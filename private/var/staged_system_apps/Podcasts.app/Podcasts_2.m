uint64_t sub_1001E0590()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E05B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

NSObject *sub_1001E05E8()
{
  uint64_t *v0;

  return sub_1001DD334(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001E05F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100558F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E0648(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v48 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v43 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PodcastReview(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - v16;
  v18 = sub_10003F544(&qword_100559020);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, 1, 1, v11);
    a4(v20);
    return sub_100007A28((uint64_t)v20, &qword_100559020);
  }
  else
  {
    v42 = v8;
    v22 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v48;
    v24 = sub_100032AC8(v48, a2);
    v25 = JSONDecoder.init()(v24);
    v26 = sub_100026844(&qword_100559028, (uint64_t (*)(uint64_t))&type metadata accessor for PodcastReview, (uint64_t)&protocol conformance descriptor for PodcastReview);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v11, v23, a2, v11, v26);
    swift_release(v25);
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    v41 = static OS_dispatch_queue.main.getter(v27);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v28 = *(unsigned __int8 *)(v12 + 80);
    v29 = (v28 + 32) & ~v28;
    v30 = swift_allocObject(&unk_1004B43E0, v29 + v13, v28 | 7);
    *(_QWORD *)(v30 + 16) = a4;
    *(_QWORD *)(v30 + 24) = a5;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v30 + v29, v15, v11);
    aBlock[4] = sub_1001E1AE0;
    v50 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004B43F8;
    v31 = _Block_copy(aBlock);
    v32 = v50;
    swift_retain();
    v33 = swift_release(v32);
    v34 = v43;
    static DispatchQoS.unspecified.getter(v33);
    aBlock[0] = _swiftEmptyArrayStorage;
    v35 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v36 = sub_10003F544((uint64_t *)&unk_10055B200);
    v37 = sub_100026534();
    v38 = v44;
    v39 = v42;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v42, v35);
    v40 = (void *)v41;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v38, v31);
    _Block_release(v31);

    sub_1001C0F60(v48, a2);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v47);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
}

uint64_t sub_1001E0C3C(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = sub_10003F544(&qword_100559020);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PodcastReview(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a3, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  a1(v7);
  return sub_100007A28((uint64_t)v7, &qword_100559020);
}

uint64_t sub_1001E0D08(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_10003F544(&qword_100559020);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PodcastReview(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  a1(v4);
  return sub_100007A28((uint64_t)v4, &qword_100559020);
}

uint64_t sub_1001E0DA8(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void (*v6)(void *, unint64_t, void *);
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = a2;
  v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain();
    v7 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;

  }
  else
  {
    swift_retain();
    v9 = 0xF000000000000000;
  }
  v10 = a3;
  v6(v4, v9, a3);

  sub_1001C0F60((uint64_t)v4, v9);
  return swift_release(v5);
}

void ReviewController.saveReview(forAdamId:review:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSURL *v20;
  void *v21;
  void *v22;
  Class isa;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v32 = a4;
  v33 = a5;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PodcastReview.Metadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = PodcastReview.metadata.getter(v13);
  PodcastReview.Metadata.saveURL.getter(v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v17 = PodcastReview.httpData(forAdamId:)(a1, a2);
  v19 = v18;
  URL._bridgeToObjectiveC()(v20);
  v22 = v21;
  isa = 0;
  if (v19 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001C0F60(v17, v19);
  }
  v24 = objc_msgSend(objc_allocWithZone((Class)IMSaveReviewService), "initWithEndpointURL:bodyData:", v22, isa);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v25 = swift_allocObject(&unk_1004B4278, 24, 7);
  swift_weakInit(v25 + 16, v31[1]);
  v26 = (_QWORD *)swift_allocObject(&unk_1004B42A0, 40, 7);
  v27 = v32;
  v28 = v33;
  v26[2] = v25;
  v26[3] = v27;
  v26[4] = v28;
  aBlock[4] = sub_1001E19BC;
  v35 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0DA8;
  aBlock[3] = &unk_1004B42B8;
  v29 = _Block_copy(aBlock);
  v30 = v35;
  swift_retain();
  swift_release(v30);
  objc_msgSend(v24, "performDataRequestWithCompletion:", v29);
  _Block_release(v29);

}

uint64_t sub_1001E1070(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v15 - 8);
  v30 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v28 = static OS_dispatch_queue.main.getter(v18);
  v19 = (_QWORD *)swift_allocObject(&unk_1004B42F0, 64, 7);
  v19[2] = a4;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a5;
  v19[6] = a6;
  v19[7] = a3;
  aBlock[4] = sub_1001E1A14;
  v33 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B4308;
  v20 = _Block_copy(aBlock);
  v21 = v33;
  swift_retain();
  sub_1001E1A24(a1, a2);
  swift_retain();
  swift_errorRetain(a3);
  v22 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10003F544((uint64_t *)&unk_10055B200);
  v25 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v12, v23);
  v26 = (void *)v28;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v17, v30);
}

uint64_t sub_1001E12A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(BOOL, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v25[24];

  v11 = sub_10003F544(&qword_100559010);
  __chkstk_darwin(v11);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = type metadata accessor for PodcastReviewServerError(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v25, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v19 = Strong;
    sub_1001E1494(a2, a3, v13);
    swift_release(v19);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      (*(void (**)(char *, _QWORD *, uint64_t))(v15 + 32))(v17, v13, v14);
      v20 = sub_100026844(&qword_100559018, (uint64_t (*)(uint64_t))&type metadata accessor for PodcastReviewServerError, (uint64_t)&protocol conformance descriptor for PodcastReviewServerError);
      v21 = swift_allocError(v14, v20, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v22, v17, v14);
      a4(0, v21);
      swift_errorRelease(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  sub_100007A28((uint64_t)v13, &qword_100559010);
  return a4(a3 >> 60 != 15, a6);
}

uint64_t sub_1001E1494@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  Class isa;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  __int128 v29;
  id v30[3];
  uint64_t v31;

  if (a2 >> 60 == 15)
    goto LABEL_20;
  v6 = (void *)objc_opt_self(NSJSONSerialization);
  sub_100032AC8(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v30[0] = 0;
  v8 = objc_msgSend(v6, "JSONObjectWithData:options:error:", isa, 4, v30);

  v9 = v30[0];
  if (!v8)
  {
    v15 = v30[0];
    v16 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v17);
    sub_1001C0F60(a1, a2);
    swift_errorRelease(v16);
    goto LABEL_20;
  }
  v10 = v30[0];
  _bridgeAnyObjectToAny(_:)(v30, v8);
  swift_unknownObjectRelease(v8);
  v11 = sub_100005EC8(0, (unint64_t *)&qword_100554EF0, NSDictionary_ptr);
  if ((swift_dynamicCast(&v28, v30, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
    sub_1001C0F60(a1, a2);
    goto LABEL_20;
  }
  v12 = (void *)v28;
  *(_QWORD *)&v28 = 0x676F6C616964;
  *((_QWORD *)&v28 + 1) = 0xE600000000000000;
  v13 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v28, &type metadata for String);
  v14 = objc_msgSend(v12, "__swift_objectForKeyedSubscript:", v13);
  swift_unknownObjectRelease(v13);
  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(&v28, v14);
    swift_unknownObjectRelease(v14);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
  }
  sub_10000773C((uint64_t)&v28, (uint64_t)v30);
  if (!v31)
  {
    sub_1001C0F60(a1, a2);

    goto LABEL_19;
  }
  if ((swift_dynamicCast(v27, v30, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
    sub_1001C0F60(a1, a2);

    goto LABEL_20;
  }
  v18 = (void *)v27[0];
  *(_QWORD *)&v28 = 0x6567617373656DLL;
  *((_QWORD *)&v28 + 1) = 0xE700000000000000;
  v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v28, &type metadata for String);
  v20 = objc_msgSend(v18, "__swift_objectForKeyedSubscript:", v19);
  swift_unknownObjectRelease(v19);
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(&v28, v20);
    sub_1001C0F60(a1, a2);

    swift_unknownObjectRelease(v20);
  }
  else
  {
    sub_1001C0F60(a1, a2);

    v28 = 0u;
    v29 = 0u;
  }
  sub_10000773C((uint64_t)&v28, (uint64_t)v30);
  if (!v31)
  {
LABEL_19:
    sub_100007A28((uint64_t)v30, (uint64_t *)&unk_100552300);
    goto LABEL_20;
  }
  if ((swift_dynamicCast(v27, v30, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v21 = v27[1];
    *a3 = v27[0];
    a3[1] = v21;
    v22 = enum case for PodcastReviewServerError.generic(_:);
    v23 = type metadata accessor for PodcastReviewServerError(0);
    v24 = *(_QWORD *)(v23 - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v24 + 104))(a3, v22, v23);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(a3, 0, 1, v23);
  }
LABEL_20:
  v26 = type metadata accessor for PodcastReviewServerError(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a3, 1, 1, v26);
}

uint64_t ChannelLockupGenerator.deinit()
{
  uint64_t v0;

  return v0;
}

void _s8Podcasts16ReviewControllerC013fetchExistingB09forAdamId10completionySS_y8ShelfKit07PodcastB0VSgctF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v7 = objc_allocWithZone((Class)IMFetchReviewService);
  swift_bridgeObjectRetain(a2);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithAdamID:", v8, swift_bridgeObjectRelease(a2).n128_f64[0]);

  v10 = swift_allocObject(&unk_1004B4340, 32, 7);
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v13[4] = sub_1001E1A5C;
  v14 = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1001E0DA8;
  v13[3] = &unk_1004B4358;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain();
  swift_release(v12);
  objc_msgSend(v9, "performDataRequestWithCompletion:", v11);
  _Block_release(v11);

}

uint64_t sub_1001E196C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E1990()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001E19BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1001E1070(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_1001E19C8()
{
  _QWORD *v0;
  unint64_t v1;

  swift_release(v0[2]);
  v1 = v0[4];
  if (v1 >> 60 != 15)
    sub_100032A84(v0[3], v1);
  swift_release(v0[6]);
  swift_errorRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001E1A14()
{
  uint64_t v0;

  return sub_1001E12A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t (**)(BOOL, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1001E1A24(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100032AC8(result, a2);
  return result;
}

uint64_t sub_1001E1A38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E1A5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001E0648(a1, a2, a3, *(void (**)(char *))(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1001E1A64()
{
  uint64_t v0;

  return sub_1001E0D08(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_1001E1A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PodcastReview(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001E1AE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PodcastReview(0) - 8) + 80);
  return sub_1001E0C3C(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

_QWORD *sub_1001E1B24(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  __n128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  int *v56;
  void (*v57)(char *, char *, uint64_t, __n128);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = (int *)type metadata accessor for DownloadJob(0);
      v14 = v13[5];
      v15 = (_QWORD *)((char *)a1 + v14);
      v16 = (_QWORD *)((char *)a2 + v14);
      v17 = v16[1];
      *v15 = *v16;
      v15[1] = v17;
      v18 = v13[6];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for Date(0);
      v63 = *(_QWORD *)(v21 - 8);
      v64 = v21;
      v22 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
      v23 = swift_bridgeObjectRetain(v17);
      v55 = v22;
      ((void (*)(char *, char *, uint64_t, __n128))v22)(v19, v20, v21, v23);
      *(_QWORD *)((char *)a1 + v13[7]) = *(_QWORD *)((char *)a2 + v13[7]);
      v24 = v13[8];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = v27;
      v25[16] = v26[16];
      v56 = v13;
      v28 = v13[9];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v61 = *(_QWORD *)((char *)a2 + v28 + 8);
      v62 = v27;
      *(_QWORD *)v29 = *(_QWORD *)((char *)a2 + v28);
      *((_QWORD *)v29 + 1) = v61;
      v60 = *(_QWORD *)((char *)a2 + v28 + 24);
      *((_QWORD *)v29 + 2) = *(_QWORD *)((char *)a2 + v28 + 16);
      *((_QWORD *)v29 + 3) = v60;
      *((_QWORD *)v29 + 4) = *(_QWORD *)((char *)a2 + v28 + 32);
      v29[40] = *((_BYTE *)a2 + v28 + 40);
      *((_QWORD *)v29 + 6) = *(_QWORD *)((char *)a2 + v28 + 48);
      v29[56] = *((_BYTE *)a2 + v28 + 56);
      v31 = *(_QWORD *)((char *)a2 + v28 + 72);
      *((_QWORD *)v29 + 8) = *(_QWORD *)((char *)a2 + v28 + 64);
      *((_QWORD *)v29 + 9) = v31;
      v32 = *(_QWORD *)((char *)a2 + v28 + 88);
      *((_QWORD *)v29 + 10) = *(_QWORD *)((char *)a2 + v28 + 80);
      *((_QWORD *)v29 + 11) = v32;
      v33 = *(_QWORD *)((char *)a2 + v28 + 104);
      *((_QWORD *)v29 + 12) = *(_QWORD *)((char *)a2 + v28 + 96);
      *((_QWORD *)v29 + 13) = v33;
      v34 = (int *)type metadata accessor for EpisodeMetadata(0);
      v35 = v34[11];
      v58 = &v30[v35];
      v59 = &v29[v35];
      v36 = type metadata accessor for URL(0);
      v57 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      v37 = swift_bridgeObjectRetain(v33);
      v57(v59, v58, v36, v37);
      v29[v34[12]] = v30[v34[12]];
      v38 = v34[13];
      v39 = &v29[v38];
      v40 = &v30[v38];
      v39[8] = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v41 = v34[14];
      v42 = &v29[v41];
      v43 = &v30[v41];
      v42[8] = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = v34[15];
      v45 = &v29[v44];
      v46 = &v30[v44];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v46, 1, v64))
      {
        v47 = sub_10003F544(&qword_1005522F0);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        v55(v45, v46, v64);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v45, 0, 1, v64);
      }
      v49 = v56[10];
      v50 = (char *)a1 + v49;
      v51 = (char *)a2 + v49;
      v52 = *((_QWORD *)v51 + 3);
      if ((unint64_t)(v52 - 1) >= 4)
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
        *((_QWORD *)v50 + 3) = v52;
        v54 = *((_QWORD *)v51 + 5);
        *((_QWORD *)v50 + 4) = *((_QWORD *)v51 + 4);
        *((_QWORD *)v50 + 5) = v54;
        *((_WORD *)v50 + 24) = *((_WORD *)v51 + 24);
        swift_bridgeObjectRetain(v52);
      }
      else
      {
        v53 = *((_OWORD *)v51 + 1);
        *(_OWORD *)v50 = *(_OWORD *)v51;
        *((_OWORD *)v50 + 1) = v53;
        *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
        *((_WORD *)v50 + 24) = *((_WORD *)v51 + 24);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v48 = a2[1];
      *a1 = *a2;
      a1[1] = v48;
      swift_bridgeObjectRetain(v48);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *a2;
      swift_errorRetain(v9);
      *a1 = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

double sub_1001E1EC4(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  double result;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload != 1)
    {
      if (!EnumCaseMultiPayload)
        swift_errorRelease(*a1);
      return result;
    }
    v16 = a1[1];
LABEL_10:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v16).n128_u64[0];
    return result;
  }
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  v6 = (int *)type metadata accessor for DownloadJob(0);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v6[5] + 8));
  v7 = (char *)a1 + v6[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(char *, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v6[8] + 8));
  v11 = (_QWORD *)((char *)a1 + v6[9]);
  swift_bridgeObjectRelease(v11[1]);
  swift_bridgeObjectRelease(v11[3]);
  swift_bridgeObjectRelease(v11[9]);
  swift_bridgeObjectRelease(v11[11]);
  swift_bridgeObjectRelease(v11[13]);
  v12 = type metadata accessor for EpisodeMetadata(0);
  v13 = (char *)v11 + *(int *)(v12 + 44);
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = (char *)v11 + *(int *)(v12 + 60);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8))
    v10(v15, v8);
  v16 = *(_QWORD *)((char *)a1 + v6[10] + 24);
  if ((unint64_t)(v16 - 1) >= 4)
    goto LABEL_10;
  return result;
}

_QWORD *sub_1001E205C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(char *, char *, uint64_t, __n128);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v65 = a3;
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = (int *)type metadata accessor for DownloadJob(0);
      v13 = v12[5];
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = v12[6];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for Date(0);
      v62 = *(_QWORD *)(v20 - 8);
      v63 = v20;
      v21 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
      v22 = swift_bridgeObjectRetain(v16);
      v56 = v21;
      ((void (*)(char *, char *, uint64_t, __n128))v21)(v18, v19, v20, v22);
      *(_QWORD *)((char *)a1 + v12[7]) = *(_QWORD *)((char *)a2 + v12[7]);
      v23 = v12[8];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v26;
      v24[16] = v25[16];
      v64 = v12;
      v27 = v12[9];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v60 = *(_QWORD *)((char *)a2 + v27 + 8);
      v61 = v26;
      *(_QWORD *)v28 = *(_QWORD *)((char *)a2 + v27);
      *((_QWORD *)v28 + 1) = v60;
      v30 = *(_QWORD *)((char *)a2 + v27 + 24);
      *((_QWORD *)v28 + 2) = *(_QWORD *)((char *)a2 + v27 + 16);
      *((_QWORD *)v28 + 3) = v30;
      *((_QWORD *)v28 + 4) = *(_QWORD *)((char *)a2 + v27 + 32);
      v28[40] = *((_BYTE *)a2 + v27 + 40);
      *((_QWORD *)v28 + 6) = *(_QWORD *)((char *)a2 + v27 + 48);
      v28[56] = *((_BYTE *)a2 + v27 + 56);
      v31 = *(_QWORD *)((char *)a2 + v27 + 72);
      *((_QWORD *)v28 + 8) = *(_QWORD *)((char *)a2 + v27 + 64);
      *((_QWORD *)v28 + 9) = v31;
      v32 = *(_QWORD *)((char *)a2 + v27 + 88);
      *((_QWORD *)v28 + 10) = *(_QWORD *)((char *)a2 + v27 + 80);
      *((_QWORD *)v28 + 11) = v32;
      v33 = *(_QWORD *)((char *)a2 + v27 + 104);
      *((_QWORD *)v28 + 12) = *(_QWORD *)((char *)a2 + v27 + 96);
      *((_QWORD *)v28 + 13) = v33;
      v34 = (int *)type metadata accessor for EpisodeMetadata(0);
      v35 = v34[11];
      v58 = &v29[v35];
      v59 = &v28[v35];
      v36 = type metadata accessor for URL(0);
      v57 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      v37 = swift_bridgeObjectRetain(v33);
      v57(v59, v58, v36, v37);
      v28[v34[12]] = v29[v34[12]];
      v38 = v34[13];
      v39 = &v28[v38];
      v40 = &v29[v38];
      v39[8] = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v41 = v34[14];
      v42 = &v28[v41];
      v43 = &v29[v41];
      v42[8] = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = v34[15];
      v45 = &v28[v44];
      v46 = &v29[v44];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(&v29[v44], 1, v63))
      {
        v47 = sub_10003F544(&qword_1005522F0);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        v56(v45, v46, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v45, 0, 1, v63);
      }
      v49 = v64[10];
      v50 = (char *)a1 + v49;
      v51 = (char *)a2 + v49;
      v52 = *((_QWORD *)v51 + 3);
      if ((unint64_t)(v52 - 1) >= 4)
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
        *((_QWORD *)v50 + 3) = v52;
        v54 = *((_QWORD *)v51 + 5);
        *((_QWORD *)v50 + 4) = *((_QWORD *)v51 + 4);
        *((_QWORD *)v50 + 5) = v54;
        *((_WORD *)v50 + 24) = *((_WORD *)v51 + 24);
        swift_bridgeObjectRetain(v52);
      }
      else
      {
        v53 = *((_OWORD *)v51 + 1);
        *(_OWORD *)v50 = *(_OWORD *)v51;
        *((_OWORD *)v50 + 1) = v53;
        *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
        *((_WORD *)v50 + 24) = *((_WORD *)v51 + 24);
      }
      v8 = a1;
      v9 = v65;
      v10 = 2;
      goto LABEL_14;
    case 1:
      v48 = a2[1];
      *a1 = *a2;
      a1[1] = v48;
      swift_bridgeObjectRetain(v48);
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_14;
    case 0:
      v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_14:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_1001E23CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  void (*v60)(char *, char *, uint64_t);
  int *v61;
  void (*v62)(char *, char *, uint64_t, __n128);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (a1 != a2)
  {
    sub_1001E27AC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v11 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = (int *)type metadata accessor for DownloadJob(0);
        v13 = v12[5];
        v14 = (_QWORD *)((char *)a1 + v13);
        v15 = (_QWORD *)((char *)a2 + v13);
        *v14 = *v15;
        v16 = v15[1];
        v14[1] = v16;
        v17 = v12[6];
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for Date(0);
        v68 = *(_QWORD *)(v20 - 8);
        v69 = v20;
        v21 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
        v22 = swift_bridgeObjectRetain(v16);
        v60 = v21;
        ((void (*)(char *, char *, uint64_t, __n128))v21)(v18, v19, v20, v22);
        *(_QWORD *)((char *)a1 + v12[7]) = *(_QWORD *)((char *)a2 + v12[7]);
        v23 = v12[8];
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        *(_QWORD *)v24 = *(_QWORD *)v25;
        v26 = *((_QWORD *)v25 + 1);
        *((_QWORD *)v24 + 1) = v26;
        v24[16] = v25[16];
        v61 = v12;
        v27 = v12[9];
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        *(_QWORD *)v28 = *(_QWORD *)((char *)a2 + v27);
        v66 = *(_QWORD *)((char *)a2 + v27 + 8);
        v67 = v26;
        *((_QWORD *)v28 + 1) = v66;
        *((_QWORD *)v28 + 2) = *(_QWORD *)((char *)a2 + v27 + 16);
        v65 = *(_QWORD *)((char *)a2 + v27 + 24);
        *((_QWORD *)v28 + 3) = v65;
        v30 = *(_QWORD *)((char *)a2 + v27 + 32);
        v28[40] = v29[40];
        *((_QWORD *)v28 + 4) = v30;
        LOBYTE(v30) = v29[56];
        *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
        v28[56] = v30;
        *((_QWORD *)v28 + 8) = *((_QWORD *)v29 + 8);
        v31 = *((_QWORD *)v29 + 9);
        *((_QWORD *)v28 + 9) = v31;
        *((_QWORD *)v28 + 10) = *((_QWORD *)v29 + 10);
        v32 = *((_QWORD *)v29 + 11);
        *((_QWORD *)v28 + 11) = v32;
        *((_QWORD *)v28 + 12) = *((_QWORD *)v29 + 12);
        v33 = *((_QWORD *)v29 + 13);
        *((_QWORD *)v28 + 13) = v33;
        v34 = (int *)type metadata accessor for EpisodeMetadata(0);
        v35 = v34[11];
        v63 = &v29[v35];
        v64 = &v28[v35];
        v36 = type metadata accessor for URL(0);
        v62 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v65);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v32);
        v37 = swift_bridgeObjectRetain(v33);
        v62(v64, v63, v36, v37);
        v28[v34[12]] = v29[v34[12]];
        v38 = v34[13];
        v39 = &v28[v38];
        v40 = &v29[v38];
        v41 = v40[8];
        *(_QWORD *)v39 = *(_QWORD *)v40;
        v39[8] = v41;
        v42 = v34[14];
        v43 = &v28[v42];
        v44 = &v29[v42];
        v45 = v44[8];
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v45;
        v46 = v34[15];
        v47 = &v28[v46];
        v48 = &v29[v46];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v48, 1, v69))
        {
          v49 = sub_10003F544(&qword_1005522F0);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          v60(v47, v48, v69);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v47, 0, 1, v69);
        }
        v51 = v61[10];
        v52 = (char *)a1 + v51;
        v53 = (char *)a2 + v51;
        if ((unint64_t)(*((_QWORD *)v53 + 3) - 1) >= 4)
        {
          *(_QWORD *)v52 = *(_QWORD *)v53;
          *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
          *((_QWORD *)v52 + 2) = *((_QWORD *)v53 + 2);
          v57 = *((_QWORD *)v53 + 3);
          *((_QWORD *)v52 + 3) = v57;
          *((_QWORD *)v52 + 4) = *((_QWORD *)v53 + 4);
          v58 = *((_QWORD *)v53 + 5);
          v52[48] = v53[48];
          *((_QWORD *)v52 + 5) = v58;
          v52[49] = v53[49];
          swift_bridgeObjectRetain(v57);
        }
        else
        {
          v54 = *(_OWORD *)v53;
          v55 = *((_OWORD *)v53 + 1);
          v56 = *((_OWORD *)v53 + 2);
          *((_WORD *)v52 + 24) = *((_WORD *)v53 + 24);
          *((_OWORD *)v52 + 1) = v55;
          *((_OWORD *)v52 + 2) = v56;
          *(_OWORD *)v52 = v54;
        }
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_15;
      case 1:
        *a1 = *a2;
        v50 = a2[1];
        a1[1] = v50;
        swift_bridgeObjectRetain(v50);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_15;
      case 0:
        v7 = *a2;
        swift_errorRetain(v7);
        *a1 = v7;
        v8 = a1;
        v9 = a3;
        v10 = 0;
LABEL_15:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1001E27AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JobStorageError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1001E27E8(char *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    v42 = a3;
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for DownloadJob(0);
    *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
    v8 = v7[6];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v41 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v41(v9, v10, v11);
    *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
    v13 = v7[8];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v14[16] = v15[16];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v16 = v7[9];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *(_OWORD *)&a2[v16 + 16];
    *(_OWORD *)v17 = *(_OWORD *)&a2[v16];
    *((_OWORD *)v17 + 1) = v19;
    v17[40] = a2[v16 + 40];
    *((_QWORD *)v17 + 4) = *(_QWORD *)&a2[v16 + 32];
    v17[56] = a2[v16 + 56];
    *((_QWORD *)v17 + 6) = *(_QWORD *)&a2[v16 + 48];
    v20 = *(_OWORD *)&a2[v16 + 80];
    *((_OWORD *)v17 + 4) = *(_OWORD *)&a2[v16 + 64];
    *((_OWORD *)v17 + 5) = v20;
    *((_OWORD *)v17 + 6) = *(_OWORD *)&a2[v16 + 96];
    v21 = (int *)type metadata accessor for EpisodeMetadata(0);
    v22 = v21[11];
    v23 = &v17[v22];
    v24 = &v18[v22];
    v25 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    v17[v21[12]] = v18[v21[12]];
    v26 = v21[13];
    v27 = &v17[v26];
    v28 = &v18[v26];
    v27[8] = v28[8];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v29 = v21[14];
    v30 = &v17[v29];
    v31 = &v18[v29];
    v30[8] = v31[8];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v32 = v21[15];
    v33 = &v17[v32];
    v34 = &v18[v32];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&v18[v32], 1, v11))
    {
      v35 = sub_10003F544(&qword_1005522F0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v41(v33, v34, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v33, 0, 1, v11);
    }
    v36 = v7[10];
    v37 = &a1[v36];
    v38 = &a2[v36];
    v39 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v39;
    *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
    *((_WORD *)v37 + 24) = *((_WORD *)v38 + 24);
    swift_storeEnumTagMultiPayload(a1, v42, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_1001E2A64(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;

  if (a1 != a2)
  {
    sub_1001E27AC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      v42 = a3;
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for DownloadJob(0);
      *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      v41 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v41(v9, v10, v11);
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v13 = v7[8];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v14[16] = v15[16];
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v16 = v7[9];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = *(_OWORD *)&a2[v16 + 16];
      *(_OWORD *)v17 = *(_OWORD *)&a2[v16];
      *((_OWORD *)v17 + 1) = v19;
      v17[40] = a2[v16 + 40];
      *((_QWORD *)v17 + 4) = *(_QWORD *)&a2[v16 + 32];
      v17[56] = a2[v16 + 56];
      *((_QWORD *)v17 + 6) = *(_QWORD *)&a2[v16 + 48];
      v20 = *(_OWORD *)&a2[v16 + 80];
      *((_OWORD *)v17 + 4) = *(_OWORD *)&a2[v16 + 64];
      *((_OWORD *)v17 + 5) = v20;
      *((_OWORD *)v17 + 6) = *(_OWORD *)&a2[v16 + 96];
      v21 = (int *)type metadata accessor for EpisodeMetadata(0);
      v22 = v21[11];
      v23 = &v17[v22];
      v24 = &v18[v22];
      v25 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      v17[v21[12]] = v18[v21[12]];
      v26 = v21[13];
      v27 = &v17[v26];
      v28 = &v18[v26];
      v27[8] = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v29 = v21[14];
      v30 = &v17[v29];
      v31 = &v18[v29];
      v30[8] = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v32 = v21[15];
      v33 = &v17[v32];
      v34 = &v18[v32];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&v18[v32], 1, v11))
      {
        v35 = sub_10003F544(&qword_1005522F0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v41(v33, v34, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v33, 0, 1, v11);
      }
      v36 = v7[10];
      v37 = &a1[v36];
      v38 = &a2[v36];
      v39 = *((_OWORD *)v38 + 1);
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *((_OWORD *)v37 + 1) = v39;
      *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
      *((_WORD *)v37 + 24) = *((_WORD *)v38 + 24);
      swift_storeEnumTagMultiPayload(a1, v42, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001E2CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v6 = objc_msgSend(v5, "mainOrPrivateContext");

  sub_10016E904(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {

    sub_10016E98C((uint64_t)v4);
    return 0;
  }
  v8 = *v4;
  v9 = v4[1];
  v19 = 0;
  v10 = (_QWORD *)swift_allocObject(&unk_1004B4470, 48, 7);
  v10[2] = &v19;
  v10[3] = v6;
  v10[4] = v8;
  v10[5] = v9;
  v11 = swift_allocObject(&unk_1004B4498, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001E3DB4;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_100029B3C;
  v18 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B44B0;
  v12 = _Block_copy(aBlock);
  v13 = v18;
  v14 = v6;
  swift_retain();
  swift_release(v13);
  objc_msgSend(v14, "performBlockAndWait:", v12);

  _Block_release(v12);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v11, "", 113, 25, 36, 1);
  result = swift_release(v11);
  if ((v14 & 1) == 0)
  {
    v7 = v19;
    swift_release(v10);
    return v7;
  }
  __break(1u);
  return result;
}

void sub_1001E2EE4(void **a1, void *a2)
{
  NSString v4;
  id v5;
  void *v6;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a2, "podcastForUuid:", v4);

  v6 = *a1;
  *a1 = v5;

}

uint64_t sub_1001E2F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v23;
  _QWORD v24[2];
  char v25[24];

  v1 = type metadata accessor for ShowOffer(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(*(id *)(v0 + 16), "mainOrPrivateContext");
  v9 = v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v9, v25, 0, 0);
  sub_10016E904(v9, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
  {
    v10 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
    aBlock[0] = ShowOffer.adamId.getter(v10);
    v11 = sub_100030584();
    v12 = BinaryInteger.description.getter(&type metadata for UInt64, v11);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v12;
  }
  v13 = *v7;
  v14 = v7[1];
  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  v15 = (_QWORD *)swift_allocObject(&unk_1004B4560, 48, 7);
  v15[2] = v8;
  v15[3] = v13;
  v15[4] = v14;
  v15[5] = v24;
  v16 = swift_allocObject(&unk_1004B4588, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1001E3E64;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = sub_1001529CC;
  v23 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B45A0;
  v17 = _Block_copy(aBlock);
  v18 = v23;
  v19 = v8;
  swift_retain(v16);
  swift_release(v18);
  objc_msgSend(v19, "performBlockAndWait:", v17);

  _Block_release(v17);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v16, "", 113, 68, 36, 1);
  result = swift_release(v16);
  if ((v19 & 1) == 0)
  {
    v12 = v24[0];
    swift_release(v15);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E31C0(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSString v6;
  id v7;
  id v8;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "podcastForUuid:", v6);

  if (!v7 || (v8 = v7, MTPodcast.adamId.getter(), v10 = v9, v8, (v10 & 1) != 0))
  {

    v12 = 0;
    v14 = 0xE000000000000000;
  }
  else
  {
    v11 = sub_100030584();
    v12 = BinaryInteger.description.getter(&type metadata for UInt64, v11);
    v14 = v13;

  }
  v15 = a4[1];
  *a4 = v12;
  a4[1] = v14;
  return swift_bridgeObjectRelease(v15);
}

void sub_1001E3294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  __n128 v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  char v40[24];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ShowOffer(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PodcastContextActionDataType(0);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  v15 = v1 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v40, 0, 0);
  sub_10016E904(v15, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload(v14, v9) != 1)
  {
    sub_10016E98C((uint64_t)v14);
    return;
  }
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
  v17 = ShowOffer.adamId.getter(v16);
  if (v17 < 0)
  {
    __break(1u);
  }
  else
  {
    v18 = v17;
    v36 = v12;
    v37 = v5;
    v38 = v1;
    ShowOffer.feedUrl.getter(v17);
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v4, 1, v19);
    if ((_DWORD)v21 == 1)
    {
      sub_1001C9958((uint64_t)v4);
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v22 = URL.absoluteString.getter(v21);
      v23 = v24;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v19);
    }
    type metadata accessor for CoreDataFetcher(0);
    v25 = objc_msgSend(*(id *)(v38 + 16), "mainOrPrivateContext");
    v26 = (void *)static CoreDataFetcher.fetchPodcast(adamId:feedUrl:with:)(v18, v22, v23, v25);

    v27 = swift_bridgeObjectRelease(v23);
    if (v26)
    {
      v28 = objc_msgSend(v26, "uuid", v27.n128_f64[0]);
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v32 = v31;

        if ((objc_msgSend(v26, "hidden") & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v37);
          swift_bridgeObjectRelease(v32);

          return;
        }
        v33 = (uint64_t)v36;
        *v36 = v30;
        *(_QWORD *)(v33 + 8) = v32;
        swift_storeEnumTagMultiPayload(v33, v9, 0);
        swift_beginAccess(v15, v39, 33, 0);
        sub_1001E3DF0(v33, v15);
        v34 = swift_endAccess(v39);
        sub_1001E3294(v34);
        sub_10016E98C(v33);
      }

    }
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v37, v27);
  }
}

uint64_t sub_1001E35A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v16;
  unsigned __int8 v17;
  char v18[24];

  v1 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v1);
  v3 = (_QWORD *)((char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = objc_msgSend(*(id *)(v0 + 16), "mainOrPrivateContext");
  v5 = v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v5, v18, 0, 0);
  sub_10016E904(v5, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload(v3, v1) == 1)
  {

    sub_10016E98C((uint64_t)v3);
    return 0;
  }
  v7 = *v3;
  v8 = v3[1];
  v17 = 0;
  v9 = (_QWORD *)swift_allocObject(&unk_1004B44E8, 48, 7);
  v9[2] = v4;
  v9[3] = v7;
  v9[4] = v8;
  v9[5] = &v17;
  v10 = swift_allocObject(&unk_1004B4510, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1001E3DD4;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_1001529CC;
  v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B4528;
  v11 = _Block_copy(aBlock);
  v12 = v16;
  v13 = v4;
  swift_bridgeObjectRetain(v8);
  swift_retain(v10);
  swift_release(v12);
  objc_msgSend(v13, "performBlockAndWait:", v11);

  _Block_release(v11);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v10, "", 113, 107, 36, 1);
  result = swift_release(v10);
  if ((v13 & 1) == 0)
  {
    v6 = v17;
    swift_release(v9);
    return v6;
  }
  __break(1u);
  return result;
}

void sub_1001E37B0(void *a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  NSString v6;
  id v7;
  double v8;
  double v9;
  BOOL v10;

  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "podcastForUuid:", v6);

  v10 = 0;
  if (v7)
  {
    objc_msgSend(v7, "lastUnfollowedDate");
    v9 = v8;

    if (v9 > 0.0)
      v10 = 1;
  }
  *a4 = v10;
}

uint64_t sub_1001E3848()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[2]);
  sub_10016E98C((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_presentationHint;
  v2 = type metadata accessor for PreviewingPresentationHint(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1001930D0(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 8), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 16), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 24), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 32), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 40), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 48), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 56), *((_BYTE *)v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 64));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001E38E0()
{
  return type metadata accessor for PodcastContextActionData(0);
}

uint64_t type metadata accessor for PodcastContextActionData(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_100559108, (uint64_t)&nominal type descriptor for PodcastContextActionData);
}

uint64_t sub_1001E38FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = "\b";
  result = type metadata accessor for PodcastContextActionDataType(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PreviewingPresentationHint(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_1003CDB28;
      result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PodcastContextActionDataType(uint64_t a1)
{
  return sub_10003EAF4(a1, qword_1005592B0, (uint64_t)&nominal type descriptor for PodcastContextActionDataType);
}

uint64_t *sub_1001E39AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for ShowOffer(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1001E3A68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v3 = type metadata accessor for ShowOffer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *sub_1001E3AB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for ShowOffer(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    swift_bridgeObjectRetain(v10);
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

_QWORD *sub_1001E3B48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_10016E98C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for ShowOffer(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      *a1 = *a2;
      v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

void *sub_1001E3BF0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for ShowOffer(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1001E3C7C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10016E98C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for ShowOffer(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001E3D18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1003CDB60;
  result = type metadata accessor for ShowOffer(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_1001E3D88()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001E3DB4()
{
  uint64_t v0;

  sub_1001E2EE4(*(void ***)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001E3DC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001E3DD4()
{
  uint64_t v0;

  sub_1001E37B0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(BOOL **)(v0 + 40));
}

uint64_t sub_1001E3DE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E3DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastContextActionDataType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E3E38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001E3E64()
{
  uint64_t v0;

  return sub_1001E31C0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_1001E3E70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E3E90()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts30AddToQueuePodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001E3EF8()
{
  return type metadata accessor for AddToQueuePodcastContextAction(0);
}

uint64_t type metadata accessor for AddToQueuePodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100559328;
  if (!qword_100559328)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AddToQueuePodcastContextAction);
  return result;
}

uint64_t sub_1001E3F3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = "\b";
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001E3FC4()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x51206F7420646441;
  v1._object = (void *)0xEC00000065756575;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_1001E4064()
{
  return 0xD000000000000028;
}

uint64_t sub_1001E4080@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts30AddToQueuePodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001E40C4()
{
  return 27;
}

uint64_t Optional.asOptional.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_1001E40E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for A?, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for EpisodeStorageError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for EpisodeStorageError(_QWORD *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *assignWithCopy for EpisodeStorageError(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  swift_errorRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  swift_errorRelease(v4);
  return a1;
}

_QWORD *initializeWithTake for EpisodeStorageError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for EpisodeStorageError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeStorageError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EpisodeStorageError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1001E4264(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1001E427C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeStorageError()
{
  return &type metadata for EpisodeStorageError;
}

uint64_t sub_1001E42B0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
    return swift_errorRetain(result);
  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for EpisodeMetadataError(uint64_t a1)
{
  return sub_1001E42E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1001E42E8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
    return swift_errorRelease(result);
  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s8Podcasts20EpisodeMetadataErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001E42B0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EpisodeMetadataError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001E42B0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001E42E8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EpisodeMetadataError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001E42E8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeContextActionDataType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeContextActionDataType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001E447C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1001E4494(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeMetadataError()
{
  return &type metadata for EpisodeMetadataError;
}

unint64_t sub_1001E44C0()
{
  unint64_t result;

  result = qword_100559440;
  if (!qword_100559440)
  {
    result = swift_getWitnessTable(&unk_1003CDDC8, &type metadata for EpisodeMetadataError);
    atomic_store(result, (unint64_t *)&qword_100559440);
  }
  return result;
}

uint64_t sub_1001E4504(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_errorRetain(v4);
  return String.init<A>(describing:)(&v4, a1);
}

uint64_t sub_1001E4540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v6[2];
  unsigned __int8 v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  v6[0] = *(_QWORD *)v1;
  v6[1] = v3;
  v7 = v4;
  sub_1001E42B0(v6[0], v3, v4);
  return String.init<A>(describing:)(v6, a1);
}

unint64_t sub_1001E4588()
{
  unint64_t result;

  result = qword_1005605D0;
  if (!qword_1005605D0)
  {
    result = swift_getWitnessTable(&unk_1003CDD88, &type metadata for EpisodeStorageError);
    atomic_store(result, (unint64_t *)&qword_1005605D0);
  }
  return result;
}

void sub_1001E45D0(uint64_t a1)
{
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = static os_log_type_t.debug.getter(a1);
  v3 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = static OS_os_log.downloads.getter(v3);
  sub_10000A520(a1, (uint64_t)v21);
  sub_10000A520(a1, (uint64_t)v18);
  if (os_log_type_enabled(v4, v2))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v24 = v6;
    *(_DWORD *)v5 = 136446466;
    v7 = v22;
    v8 = v23;
    sub_10003A834(v21, v22);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
    v11 = v10;
    v17 = sub_10003D274(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v11);
    sub_10003D380(v21);
    *(_WORD *)(v5 + 12) = 2080;
    v12 = v19;
    v13 = v20;
    sub_10003A834(v18, v19);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    v15 = 0xE900000000000067;
    v16 = 0x6E696C65636E6163;
    switch(v14)
    {
      case 0:
        v15 = 0xE700000000000000;
        v16 = 0x676E696E6E7572;
        break;
      case 1:
        v16 = 0x65646E6570737573;
        goto LABEL_8;
      case 2:
        break;
      case 3:
        v16 = 0x6574656C706D6F63;
LABEL_8:
        v15 = 0xE900000000000064;
        break;
      default:
        v15 = 0xE700000000000000;
        v16 = 0x6E776F6E6B6E75;
        break;
    }
    v17 = sub_10003D274(v16, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v15);
    sub_10003D380(v18);
    _os_log_impl((void *)&_mh_execute_header, v4, v2, "Syncing task %{public}s state: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    sub_10003D380(v21);
    sub_10003D380(v18);
  }
}

uint64_t sub_1001E487C@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = a1[3];
  v7 = a1[4];
  sub_10003A834(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(v6, v7);
  sub_10000A520((uint64_t)a1, (uint64_t)v43);
  if ((v8 & 1) == 0)
  {
    sub_10003D380(v43);
    goto LABEL_12;
  }
  v9 = v44;
  v10 = v45;
  sub_10003A834(v43, v44);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  v12 = sub_10003D380(v43);
  if (v11 != 3)
  {
LABEL_12:
    v33 = a1[3];
    v34 = a1[4];
    sub_10003A834(a1, v33);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 24))(v33, v34);
    v31 = 0;
    goto LABEL_13;
  }
  v13 = static os_log_type_t.error.getter(v12);
  v14 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v15 = static OS_os_log.downloads.getter(v14);
  sub_10000A520((uint64_t)a1, (uint64_t)v40);
  v16 = v13;
  v17 = os_log_type_enabled(v15, v13);
  v18 = a2;
  if (v17)
  {
    v19 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(32, -1);
    v46 = v36;
    *(_DWORD *)v19 = 134349314;
    type = v16;
    v21 = v41;
    v20 = v42;
    sub_10003A834(v40, v41);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v21, v20);
    sub_10003D380(v40);
    v38 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2082;
    v23 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    v24 = *(void **)&v18[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    v25 = v18[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    v38 = 0x496E6F6973736553;
    v39 = 0xEB00000000203A44;
    if (v25)
      v26 = 1936484398;
    else
      v26 = 0x7261646E6174732ELL;
    if (v25)
      v27 = (void *)0xE400000000000000;
    else
      v27 = (void *)0xE900000000000064;
    v37 = v23;
    swift_bridgeObjectRetain_n(v24, 2);
    v28._countAndFlagsBits = v26;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    v29._countAndFlagsBits = v37;
    v29._object = v24;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v24);
    v30 = v39;
    v38 = sub_10003D274(v38, v39, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 14, v19 + 22);

    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v15, type, "Not adding restored pipeline for task id: %{public}ld, session id: %{public}s because task was cancelled", (uint8_t *)v19, 0x16u);
    v31 = 1;
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    result = 0;
  }
  else
  {
    sub_10003D380(v40);

    result = 0;
    v31 = 1;
  }
LABEL_13:
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v31;
  return result;
}

void sub_1001E4BDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    v8 = *(int *)(type metadata accessor for DownloadJob(0) + 28);
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      sub_10000A520(v7, (uint64_t)&v49);
      v9 = v50;
      v10 = v51;
      sub_10003A834(&v49, v50);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10) == *(_QWORD *)(a1 + v8))
        break;
      sub_10003D380(&v49);
      v7 += 40;
      if (!--v6)
        goto LABEL_7;
    }
    sub_10002099C(&v49, (uint64_t)&v46);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks));
LABEL_7:
    v48 = 0;
    v46 = 0u;
    v47 = 0u;
  }
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v47 + 1))
  {
    sub_1001E555C((uint64_t)&v46);
LABEL_15:
    sub_1001952F0(a1, a3);
    return;
  }
  sub_10002099C(&v46, (uint64_t)&v49);
  v11 = v50;
  v12 = v51;
  sub_10003A834(&v49, v50);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12) != 1)
  {
    sub_10003D380(&v49);
    goto LABEL_15;
  }
  v45 = static os_log_type_t.default.getter();
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v14 = (void *)static OS_os_log.downloads.getter(v13);
  v15 = sub_10003F544(&qword_1005559A0);
  v16 = swift_allocObject(v15, 152, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CA240;
  v17 = v50;
  v18 = v51;
  sub_10003A834(&v49, v50);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 104))(v17, v18);
  *(_QWORD *)(v16 + 56) = &type metadata for Int64;
  *(_QWORD *)(v16 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v16 + 32) = v19;
  v20 = v50;
  v21 = v51;
  sub_10003A834(&v49, v50);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 96))(v20, v21);
  *(_QWORD *)(v16 + 96) = &type metadata for Int64;
  *(_QWORD *)(v16 + 104) = &protocol witness table for Int64;
  *(_QWORD *)(v16 + 72) = v22;
  v23 = v50;
  v24 = v51;
  sub_10003A834(&v49, v50);
  v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
  v26 = objc_msgSend(v25, "localizedAdditionalDescription");

  if (v26)
  {
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    *(_QWORD *)(v16 + 136) = &type metadata for String;
    *(_QWORD *)(v16 + 144) = sub_10003E198();
    *(_QWORD *)(v16 + 112) = v27;
    *(_QWORD *)(v16 + 120) = v29;
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v14, "Suspended task found. Bytes received %d. Bytes total %d. Progress %{public}s", 76, 2, v16);

    swift_bridgeObjectRelease(v16);
    v30 = v50;
    v31 = v51;
    sub_10003A834(&v49, v50);
    v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    v33 = objc_msgSend(v32, "totalUnitCount");
    v34 = objc_msgSend(v32, "completedUnitCount");
    v35 = sub_1001DB104();
    v37 = v36;
    v38 = objc_msgSend(v32, "fractionCompleted");
    v40 = v39;
    v41 = NSProgress.estimatedTimeRemaining.getter(v38);
    v43 = v42;

    sub_1001952F0(a1, a3);
    LOWORD(v32) = v43 & 1 | 0x100;
    v44 = a3 + *(int *)(type metadata accessor for DownloadJob(0) + 40);
    sub_10014FE3C(*(_QWORD *)v44, *(_QWORD *)(v44 + 8), *(_QWORD *)(v44 + 16), *(_QWORD *)(v44 + 24));
    *(_QWORD *)v44 = v33;
    *(_QWORD *)(v44 + 8) = v34;
    *(_QWORD *)(v44 + 16) = v35;
    *(_QWORD *)(v44 + 24) = v37;
    *(_QWORD *)(v44 + 32) = v40;
    *(_QWORD *)(v44 + 40) = v41;
    *(_WORD *)(v44 + 48) = (_WORD)v32;
    sub_10003D380(&v49);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001E4F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  os_log_type_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;

  v35 = a3;
  v5 = type metadata accessor for DownloadJob(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v32 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v32 - v12;
  v14 = static os_log_type_t.default.getter();
  v15 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v16 = static OS_os_log.downloads.getter(v15);
  sub_1001952F0(a2, (uint64_t)v13);
  v17 = os_log_type_enabled(v16, v14);
  v36 = a1;
  v34 = v5;
  if (v17)
  {
    v33 = v8;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v40[0] = v32;
    *(_DWORD *)v18 = 136446210;
    sub_1001952F0((uint64_t)v13, (uint64_t)v11);
    v19 = String.init<A>(describing:)(v11, v5);
    v21 = v20;
    *(_QWORD *)&v37 = sub_10003D274(v19, v20, (uint64_t *)v40);
    v8 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    sub_1001959BC((uint64_t)v13);
    _os_log_impl((void *)&_mh_execute_header, v16, v14, "Mapping job to dict with job: %{public}s", v18, 0xCu);
    v22 = v32;
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    sub_1001959BC((uint64_t)v13);
  }
  v23 = v35;
  v24 = (uint64_t)v8;
  sub_1001952F0(a2, (uint64_t)v8);
  v25 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v27 = v25 + 32;
    v28 = *(int *)(v34 + 28);
    swift_bridgeObjectRetain(v25);
    while (1)
    {
      sub_10000A520(v27, (uint64_t)&v37);
      v29 = v38;
      v30 = v39;
      sub_10003A834(&v37, v38);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30) == *(_QWORD *)(a2 + v28))
        break;
      sub_10003D380(&v37);
      v27 += 40;
      if (!--v26)
        goto LABEL_10;
    }
    sub_10002099C(&v37, (uint64_t)v40);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v23 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks));
LABEL_10:
    v41 = 0;
    memset(v40, 0, sizeof(v40));
  }
  swift_bridgeObjectRelease(v25);
  return sub_10021450C((uint64_t)v40, v24);
}

uint64_t sub_1001E5270(uint64_t a1)
{
  swift_errorRetain(a1);
  sub_10037B650(a1, 1);
  return swift_errorRelease(a1);
}

void sub_1001E52D0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks));

}

id sub_1001E5320()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncDownloadJobsOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001E5350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E5374()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E5398(uint64_t a1)
{
  return sub_1001E5270(a1);
}

uint64_t sub_1001E53A0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1001E53D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = v2;
  v18 = a2;
  v5 = type metadata accessor for DownloadJob(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_10017B1B4(0, v9, 0);
    v10 = v19;
    v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = a1 + v11;
    v13 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_1001E4BDC(v12, v18, (uint64_t)v8);
      if (v3)
        break;
      v3 = 0;
      v19 = v10;
      v15 = v10[2];
      v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_10017B1B4(v14 > 1, v15 + 1, 1);
        v10 = v19;
      }
      v10[2] = v15 + 1;
      sub_1001E5518((uint64_t)v8, (uint64_t)v10 + v11 + v15 * v13);
      v12 += v13;
      if (!--v9)
        return v10;
    }
    swift_release(v10);
  }
  return v10;
}

uint64_t sub_1001E5518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DownloadJob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E555C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544((uint64_t *)&unk_100564D90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001E55A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

_QWORD *_s7EpisodeVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s7EpisodeVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 _s7EpisodeVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *_s7EpisodeVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s7EpisodeVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7EpisodeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s7EpisodeVMa()
{
  return &_s7EpisodeVN;
}

unint64_t sub_1001E5794(void (*a1)(uint64_t *__return_ptr, unint64_t *), _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  _QWORD *v9;
  int64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v5 = v4;
  v6 = a4;
  v7 = a3;
  v8 = sub_1001E6C08(a3, a4);
  v9 = _swiftEmptyArrayStorage;
  if (!v8)
    return (unint64_t)v9;
  v10 = v8;
  v46 = _swiftEmptyArrayStorage;
  result = sub_10017B2A0(0, v8 & ~(v8 >> 63), 0);
  if (v10 < 0)
    goto LABEL_58;
  v12 = (v7 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = HIBYTE(v6) & 0xF;
  v34 = v7 & 0xFFFFFFFFFFFFLL;
  v35 = v14;
  if ((v6 & 0x2000000000000000) == 0)
    v14 = v7 & 0xFFFFFFFFFFFFLL;
  v42 = v14;
  v36 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v37 = v6 & 0xFFFFFFFFFFFFFFLL;
  v15 = 15;
  v38 = v13;
  v39 = v7;
  while (1)
  {
    v16 = v15 & 0xC;
    v17 = (v15 & 1) == 0 || v16 == v13;
    v18 = v17;
    if (v17)
      break;
    v19 = v15 >> 16;
    result = v15;
    if (v15 >> 16 >= v42)
      goto LABEL_55;
LABEL_24:
    if ((v6 & 0x1000000000000000) != 0)
    {
      v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(result & 0xFFFFFFFFFFFF0000, v7, v6);
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v43 = v7;
        v44 = v37;
        v21 = &v43;
        v22 = v35;
      }
      else
      {
        v21 = (_QWORD *)v36;
        v22 = v34;
        if ((v7 & 0x1000000000000000) == 0)
          v21 = (_QWORD *)_StringObject.sharedUTF8.getter(v7, v6);
      }
      v23 = _decodeScalar(_:startingAt:)(v21, v22, v19);
    }
    LODWORD(v43) = v23;
    v9 = a2;
    a1(&v45, &v43);
    if (v5)
    {
      swift_release(v46);
      return (unint64_t)v9;
    }
    v24 = v6;
    v25 = v18;
    v26 = v45;
    v9 = v46;
    result = swift_isUniquelyReferenced_nonNull_native(v46);
    if ((result & 1) == 0)
    {
      result = sub_10017B2A0(0, v9[2] + 1, 1);
      v9 = v46;
    }
    v28 = v9[2];
    v27 = v9[3];
    if (v28 >= v27 >> 1)
    {
      result = sub_10017B2A0(v27 > 1, v28 + 1, 1);
      v9 = v46;
    }
    v9[2] = v28 + 1;
    *((_DWORD *)v9 + v28 + 8) = v26;
    if (v25)
    {
      v13 = v38;
      v7 = v39;
      v6 = v24;
      if ((v15 & 0xC) == v38)
      {
        result = sub_1002D5EFC(v15, v39, v24);
        v15 = result;
      }
      if (v42 <= v15 >> 16)
        goto LABEL_56;
      v5 = 0;
      if ((v15 & 1) == 0)
        v15 = v15 & 0xC | sub_1001E6F4C(v15, v39, v6) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    else
    {
      v13 = v38;
      v7 = v39;
      v6 = v24;
      v5 = 0;
      if (v42 <= v15 >> 16)
        goto LABEL_57;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      v15 = String.UnicodeScalarView._foreignIndex(after:)(v15, v7, v6);
    }
    else
    {
      v29 = v15 >> 16;
      if ((v6 & 0x2000000000000000) != 0)
      {
        v43 = v7;
        v44 = v37;
        v31 = *((unsigned __int8 *)&v43 + v29);
      }
      else
      {
        v30 = v36;
        if ((v7 & 0x1000000000000000) == 0)
          v30 = _StringObject.sharedUTF8.getter(v7, v6);
        v31 = *(unsigned __int8 *)(v30 + v29);
      }
      v32 = (char)v31;
      v33 = __clz(v31 ^ 0xFF) - 24;
      if (v32 >= 0)
        LOBYTE(v33) = 1;
      v15 = ((v29 + v33) << 16) | 5;
    }
    if (!--v10)
      return (unint64_t)v9;
  }
  result = v15;
  if (v16 == v13)
    result = sub_1002D5EFC(v15, v7, v6);
  v19 = result >> 16;
  if (result >> 16 < v42)
  {
    if ((result & 1) == 0)
    {
      v20 = sub_1001E6F4C(result, v7, v6);
      result = v20 & 0xFFFFFFFFFFFFFFF2 | 1;
      v19 = v20 >> 16;
    }
    goto LABEL_24;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

_QWORD *sub_1001E5AFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char *v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD *result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;
  _QWORD *v52;

  v2 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  v3 = *(_QWORD *)(v44 + 64);
  v4 = __chkstk_darwin(v2);
  v42 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - v5;
  v7 = type metadata accessor for CharacterSet(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = _swiftEmptyArrayStorage;
  v11 = (void **)a1[2];
  v12 = a1[3];
  aBlock = v11;
  v47 = v12;
  v13 = swift_bridgeObjectRetain(v12);
  static CharacterSet.urlQueryAllowed.getter(v13);
  v14 = sub_10016D37C();
  v15 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v10, &type metadata for String, v14);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v17)
  {
    if ((void **)v15 == v11 && v17 == v12)
      goto LABEL_8;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v11, v12, 0);
    swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
      goto LABEL_9;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001004349D0, "Podcasts/MTNotificationTestAction+ContentCreation.swift", 55, 2, 220, 0);
  __break(1u);
LABEL_8:
  swift_bridgeObjectRelease(v17);
LABEL_9:
  v41 = v11;
  _s8DefaultsCMa();
  v20 = v6;
  sub_100342170((uint64_t)v6);
  v21 = a1[6];
  v39 = *(_QWORD *)(a1[7] + 16);
  v40 = v21;
  v22 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v23 = objc_msgSend(v22, "mainOrPrivateContext");

  result = objc_msgSend((id)objc_opt_self(MTLibrary), "sharedInstance");
  if (result)
  {
    v25 = result;
    objc_msgSend(result, "immediatelyDeleteAllHiddenPodcasts");

    v26 = v44;
    v27 = v45;
    v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v42, v20, v45);
    v29 = *(unsigned __int8 *)(v26 + 80);
    v30 = (v29 + 72) & ~v29;
    v31 = (v3 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (char *)swift_allocObject(&unk_1004B4BB8, v31 + 8, v29 | 7);
    *((_QWORD *)v32 + 2) = v43;
    *((_QWORD *)v32 + 3) = v23;
    *((_QWORD *)v32 + 4) = v41;
    *((_QWORD *)v32 + 5) = v12;
    v33 = v40;
    *((_QWORD *)v32 + 6) = a1;
    *((_QWORD *)v32 + 7) = v33;
    *((_QWORD *)v32 + 8) = v39;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v32[v30], v28, v27);
    *(_QWORD *)&v32[v31] = &v52;
    v34 = swift_allocObject(&unk_1004B4BE0, 32, 7);
    *(_QWORD *)(v34 + 16) = sub_1001E69DC;
    *(_QWORD *)(v34 + 24) = v32;
    v50 = sub_100029B3C;
    v51 = v34;
    aBlock = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_100029B1C;
    v49 = &unk_1004B4BF8;
    v35 = _Block_copy(&aBlock);
    v36 = v51;
    v37 = v23;
    swift_retain(a1);
    swift_retain(v34);
    swift_release(v36);
    objc_msgSend(v37, "performBlockAndWait:", v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v27);
    LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v34, "", 146, 38, 32, 1);
    result = (_QWORD *)swift_release(v34);
    if ((v35 & 1) == 0)
    {
      v38 = v52;
      swift_release(v32);
      return v38;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001E5EF0(uint64_t a1, void *a2, uint64_t a3, void *a4, _QWORD *a5, uint64_t *a6, uint64_t a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *ObjCClassFromMetadata;
  id v26;
  NSString v27;
  unsigned __int8 v28;
  double x;
  double y;
  double width;
  double height;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t inited;
  void *v39;
  NSString *v40;
  id v41;
  uint64_t v42;
  void *v43;
  NSString *v44;
  id v45;
  uint64_t v46;
  id v47;
  NSString *v48;
  id v49;
  unint64_t v50;
  id v51;
  NSString v52;
  Class isa;
  double v54;
  double v55;
  double v56;
  double v57;
  NSString v58;
  Class v59;
  UIImage *v60;
  UIImage *v61;
  id v62;
  uint64_t v63;
  NSString v64;
  id v65;
  char v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  __n128 v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char v82;
  void *v83;
  unint64_t *v84;
  char *v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  void *object;
  unint64_t v90;
  NSString v91;
  id v92;
  void *v93;
  id v94;
  NSString v95;
  id v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  void *v104;
  unint64_t v105;
  NSString v106;
  id v107[2];
  uint64_t v108;
  void *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  char v120[144];
  void *v121;
  unsigned __int8 v122;
  CGSize v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;

  v114 = a8;
  v115 = a7;
  v112 = type metadata accessor for CharacterSet(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v15 = (char *)v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = 0;
  v121 = 0;
  v16 = a5[4];
  v17 = a5[5];
  v113 = a5;
  sub_1001E71F4(a2, a3, a4, v16, v17, &v122, &v121);
  if (!v121)
    goto LABEL_31;
  v109 = a2;
  v18 = v121;
  v19 = objc_msgSend(v18, "uuid");
  if (v19)
  {
    v20 = v19;
    v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    v24 = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v24);
    v26 = objc_msgSend(ObjCClassFromMetadata, "defaultStore");
    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v26, "hasItemForKey:", v27);

    if ((v28 & 1) != 0)
    {

      swift_bridgeObjectRelease(v23);
      a2 = v109;
    }
    else
    {
      v107[0] = ObjCClassFromMetadata;
      v107[1] = v21;
      v108 = v23;
      v110 = a6;
      v124.size.width = 300.0;
      v124.origin.x = 0.0;
      v124.origin.y = 0.0;
      v124.size.height = 300.0;
      v125 = CGRectInset(v124, 8.0, 8.0);
      x = v125.origin.x;
      y = v125.origin.y;
      width = v125.size.width;
      height = v125.size.height;
      v33 = objc_msgSend(v18, "title");
      if (!v33)
        goto LABEL_35;
      v34 = v33;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v37 = sub_10003F544(&qword_1005594D8);
      inited = swift_initStackObject(v37, v120);
      *(_OWORD *)(inited + 16) = xmmword_1003CA240;
      *(_QWORD *)(inited + 32) = NSFontAttributeName;
      v39 = (void *)objc_opt_self(UIFont);
      v40 = NSFontAttributeName;
      v41 = objc_msgSend(v39, "boldSystemFontOfSize:", 48.0);
      v42 = sub_100005EC8(0, &qword_1005594E0, UIFont_ptr);
      *(_QWORD *)(inited + 40) = v41;
      *(_QWORD *)(inited + 64) = v42;
      *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
      v43 = (void *)objc_opt_self(UIColor);
      v44 = NSForegroundColorAttributeName;
      v45 = objc_msgSend(v43, "blackColor");
      v46 = sub_100005EC8(0, &qword_1005594E8, UIColor_ptr);
      *(_QWORD *)(inited + 80) = v45;
      *(_QWORD *)(inited + 104) = v46;
      *(_QWORD *)(inited + 112) = NSParagraphStyleAttributeName;
      v47 = objc_allocWithZone((Class)NSMutableParagraphStyle);
      v48 = NSParagraphStyleAttributeName;
      v49 = objc_msgSend(v47, "init");
      objc_msgSend(v49, "setAlignment:", 1);
      objc_msgSend(v49, "setLineBreakMode:", 0);
      *(_QWORD *)(inited + 144) = sub_100005EC8(0, &qword_1005594F0, NSMutableParagraphStyle_ptr);
      *(_QWORD *)(inited + 120) = v49;
      v50 = sub_100138A90(inited);
      v123.width = 300.0;
      v123.height = 300.0;
      UIGraphicsBeginImageContext(v123);
      v51 = objc_msgSend(v43, "orangeColor");
      objc_msgSend(v51, "set");

      v126.origin.x = 0.0;
      v126.origin.y = 0.0;
      v126.size.width = 300.0;
      v126.size.height = 300.0;
      UIRectFill(v126);
      v52 = String._bridgeToObjectiveC()();
      type metadata accessor for Key(0);
      sub_1001E7480();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v52, "boundingRectWithSize:options:attributes:context:", 3, isa, 0, width, height);
      v55 = v54;

      v56 = (height - v55) * 0.5;
      if (v56 < 0.0)
        v56 = 0.0;
      v57 = y + v56;
      v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v59 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v50);
      objc_msgSend(v58, "drawWithRect:options:attributes:context:", 3, v59, 0, x, v57, width, height);

      v60 = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();
      if (v60)
      {
        v61 = v60;
        v62 = objc_msgSend(v107[0], "defaultStore");
        v63 = v108;
        v64 = String._bridgeToObjectiveC()();
        objc_msgSend(v62, "addImage:forKey:", v61, v64, swift_bridgeObjectRelease(v63).n128_f64[0]);

      }
      else
      {
        swift_bridgeObjectRelease(v108);
      }

      a2 = v109;
      a6 = v110;
    }
    type metadata accessor for NotificationSettings(0);
    v65 = v18;
    v66 = static NotificationSettings.canSendNotification()();
    if (!__OFADD__(a6, v115))
    {
      if ((uint64_t)((char *)a6 + v115) > (uint64_t)a6)
      {
        v67 = 0;
        v110 = a9;
        LODWORD(v108) = v66 & 1;
        do
        {
          v118 = 0;
          v119 = 0xE000000000000000;
          v71 = objc_msgSend(v65, "uuid");
          if (!v71)
            goto LABEL_35;
          v72 = v71;
          v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
          v75 = v74;

          v116 = v73;
          v117 = v75;
          v76 = swift_bridgeObjectRetain(v75);
          static CharacterSet.urlQueryAllowed.getter(v76);
          v77 = sub_10016D37C();
          v78 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v15, &type metadata for String, v77);
          v80 = v79;
          (*(void (**)(char *, uint64_t))(v111 + 8))(v15, v112);
          if (!v80)
            goto LABEL_36;
          if (v78 == v73 && v80 == v75)
          {
            swift_bridgeObjectRelease(v75);
            v83 = v80;
          }
          else
          {
            v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v73, v75, 0);
            swift_bridgeObjectRelease(v80);
            if ((v82 & 1) == 0)
            {
LABEL_36:
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001004349D0, "Podcasts/MTNotificationTestAction+ContentCreation.swift", 55, 2, 220, 0);
              goto LABEL_37;
            }
            v83 = v75;
          }
          swift_bridgeObjectRelease(v83);
          v84 = (unint64_t *)a6;
          v85 = (char *)a6 + v67;
          v86._countAndFlagsBits = v73;
          v86._object = v75;
          String.append(_:)(v86);
          swift_bridgeObjectRelease(v75);
          v87._countAndFlagsBits = 0x65646F736970652ELL;
          v87._object = (void *)0xE90000000000002DLL;
          String.append(_:)(v87);
          v116 = (uint64_t)v85;
          v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          object = v88._object;
          String.append(_:)(v88);
          swift_bridgeObjectRelease(object);
          v90 = v119;
          v91 = String._bridgeToObjectiveC()();
          v92 = objc_msgSend(a2, "episodeForUuid:", v91);

          if (v92)
          {
            swift_bridgeObjectRelease(v90);
            v68 = v92;
          }
          else
          {
            v93 = (void *)objc_opt_self(MTEpisode);
            v94 = objc_msgSend(v93, "insertNewEpisodeInManagedObjectContext:canSendNotifications:", a2, v108);
            v95 = String._bridgeToObjectiveC()();
            objc_msgSend(v94, "setUuid:", v95, swift_bridgeObjectRelease(v90).n128_f64[0]);

            objc_msgSend(v94, "setPodcast:", v65);
            v96 = objc_msgSend(v65, "title");
            if (!v96)
              goto LABEL_35;
            v97 = v96;
            v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
            v100 = v99;

            v118 = 0;
            v119 = 0xE000000000000000;
            if (!v100)
              goto LABEL_35;
            swift_bridgeObjectRetain(v100);
            v101._countAndFlagsBits = v98;
            v101._object = v100;
            String.append(_:)(v101);
            swift_bridgeObjectRelease(v100);
            v102._countAndFlagsBits = 779109664;
            v102._object = (void *)0xE400000000000000;
            String.append(_:)(v102);
            v116 = (uint64_t)v85;
            v103._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
            v104 = v103._object;
            String.append(_:)(v103);
            swift_bridgeObjectRelease(v100);
            swift_bridgeObjectRelease(v104);
            v105 = v119;
            v106 = String._bridgeToObjectiveC()();
            objc_msgSend(v94, "setTitle:", v106, swift_bridgeObjectRelease(v105).n128_f64[0]);

            v68 = v94;
            a2 = v109;
          }
          v69 = v92;
          v70 = (uint64_t)v85;
          a6 = (uint64_t *)v84;
          sub_1001E74C8(v65, v68, v70, v84, v113, v114, &v122, v110);

        }
        while (v115 != ++v67);
      }

LABEL_31:
      if ((v122 & 1) != 0)
        objc_msgSend(a2, "saveInCurrentBlock");

      return;
    }
    __break(1u);
  }
LABEL_35:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001004349F0, "Podcasts/MTNotificationTestAction+ContentCreation.swift", 55, 2, 211, 0);
LABEL_37:
  __break(1u);
}

uint64_t sub_1001E694C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_1001E69DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1001E5EF0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD **)(v0 + 48), *(uint64_t **)(v0 + 56), *(_QWORD *)(v0 + 64), (_QWORD *)(v0 + v2), *(uint64_t **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001E6A3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001E6A4C(void *a1, _BYTE *a2, void **a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  NSString v16;
  void *v17;
  id v18;

  v6 = objc_msgSend(a1, "uuid");
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = sub_1003428A8(10000000, v8, v10);
  swift_bridgeObjectRelease(v10);
  objc_msgSend(a1, "setStoreCollectionId:", v11);
  objc_msgSend(a1, "storeCollectionId");
  _StringGuts.grow(_:)(57);
  v12._object = (void *)0x8000000100434A90;
  v12._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x323D746D3FLL;
  v15._object = (void *)0xE500000000000000;
  String.append(_:)(v15);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000);
  objc_msgSend(a1, "setStoreCleanURL:", v16);

  objc_msgSend(a1, "setSubscribed:", 1);
  objc_msgSend(a1, "setEpisodeLimit:", &_mh_execute_header);
  *a2 = objc_msgSend(a1, "hasChanges");
  v17 = *a3;
  *a3 = a1;
  v18 = a1;

}

unint64_t sub_1001E6C08(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = v5 | (v4 << 16);
  v7 = sub_1001E6E44(0xFuLL, a1, a2);
  result = sub_1001E6E44(v6, a1, a2);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)(v7, a1, a2);
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          v22 = a1;
          v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter(a1, a2);
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(before:)(v7, a1, a2);
        v7 = result;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v22 = a1;
          v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter(a1, a2);
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_40;
  }
  return 0;
}

unint64_t sub_1001E6E44(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_1001E6EE0(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1001E6F4C(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1001E6EE0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1002D5EFC(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_1001E6F4C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter(a2, a3);
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t sub_1001E704C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t result;
  _QWORD v16[2];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001004349F0, "Podcasts/MTNotificationTestAction+ContentCreation.swift", 55, 2, 211, 0);
    goto LABEL_12;
  }
  v16[0] = a1;
  v16[1] = a2;
  v8 = swift_bridgeObjectRetain(a2);
  static CharacterSet.urlQueryAllowed.getter(v8);
  v9 = sub_10016D37C();
  v10 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v7, &type metadata for String, v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v12)
  {
    if (v10 == a1 && v12 == a2)
    {
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, a1, a2, 0);
      swift_bridgeObjectRelease(v12);
      if ((v14 & 1) == 0)
        goto LABEL_8;
    }
    return a1;
  }
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x80000001004349D0, "Podcasts/MTNotificationTestAction+ContentCreation.swift", 55, 2, 220, 0);
LABEL_12:
  __break(1u);
  return result;
}

void sub_1001E71F4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6, void **a7)
{
  Swift::String v12;
  Swift::String v13;
  NSString v14;
  id v15;
  id v16;
  void *v17;
  NSString v18;
  NSString v19;
  id v20;
  NSString v21;
  id v22;
  NSString v23;
  NSString v24;
  id v25;
  NSString v26;
  void **v27;
  _BYTE *v28;
  id v29;

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  v13._countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a1, "podcastForUuid:", v14);

  v16 = v15;
  if (!v15)
  {
    v17 = (void *)objc_opt_self(MTPodcast);
    v26 = String._bridgeToObjectiveC()();
    v27 = a7;
    v25 = objc_msgSend(v17, "defaultShowType");
    v18 = String._bridgeToObjectiveC()();
    v28 = a6;
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v17, "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provider:imageUrl:description:", a1, 0, v26, v25, v18, v19, 0, 0, 0);

    a6 = v28;
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setUuid:", v21);

    a7 = v27;
    objc_msgSend(v20, "setEpisodes:", 0);
    v16 = v20;
  }
  v29 = v16;
  v22 = v15;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100434A70);
  objc_msgSend(v29, "setFeedURL:", v23);

  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEA00000000002066);
  objc_msgSend(v29, "setAuthor:", v24);

  sub_1001E6A4C(v29, a6, a7);
}

unint64_t sub_1001E7480()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552D78;
  if (!qword_100552D78)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1003C9A14, v1);
    atomic_store(result, (unint64_t *)&qword_100552D78);
  }
  return result;
}

uint64_t sub_1001E74C8(void *a1, void *a2, uint64_t a3, unint64_t *a4, _QWORD *a5, _QWORD *a6, unsigned __int8 *a7, uint64_t *a8)
{
  void *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  NSString v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t result;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  id v58;
  uint64_t *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unint64_t v62;

  v59 = a8;
  v60 = a7;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = a3 - (_QWORD)a4;
  if (__OFSUB__(a3, a4))
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = a5[7];
  if (v20 >= *(_QWORD *)(v21 + 16))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v57 = v17;
  v58 = a1;
  v22 = *(_QWORD *)(v21 + 16 * v20 + 40);
  swift_bridgeObjectRetain(v22);
  a4 = (unint64_t *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(a2, "setTitle:", a4);

  if (a5[12])
  {
    v8 = String._bridgeToObjectiveC()();
  }
  else
  {
    v61 = 0;
    v62 = 0xE000000000000000;
    a4 = &v61;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v62);
    v61 = 0xD00000000000001ALL;
    v62 = 0x8000000100434A10;
    v24 = qword_1005594C8;
    v23 = off_1005594D0;
    swift_bridgeObjectRetain(off_1005594D0);
    v25._countAndFlagsBits = v24;
    v25._object = v23;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v23);
    v26._countAndFlagsBits = 0x3E79646F622F3CLL;
    v26._object = (void *)0xE700000000000000;
    String.append(_:)(v26);
    v27 = v62;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
  }
  objc_msgSend(a2, "setItemDescription:", v8);

  v28 = a5[8];
  if (v20 >= *(_QWORD *)(v28 + 16))
    goto LABEL_27;
  objc_msgSend(a2, "setDuration:", *(double *)(v28 + 8 * v20 + 32));
  v29 = a5[9];
  if (v20 >= *(_QWORD *)(v29 + 16))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    result = (uint64_t)sub_10027B38C(0, a6[2] + 1, 1, a6);
    a6 = (_QWORD *)result;
    *v19 = result;
    goto LABEL_21;
  }
  v30 = Date.addingTimeInterval(_:)(objc_msgSend(a2, "setByteSize:", *(_QWORD *)(v29 + 8 * v20 + 32)), (double)a3 * 34.75 * 3600.0);
  v31 = Date.timeIntervalSinceReferenceDate.getter(v30);
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v19, v57);
  objc_msgSend(a2, "setPubDate:", v31);
  objc_msgSend(a2, "suppressAutomaticDownloadsIfNeeded");
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setEnclosureURL:", v32);

  v33 = objc_msgSend(a2, "uuid");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v19 = v59;
  v38 = sub_1003428A8(20000000, v35, v37);
  swift_bridgeObjectRelease(v37);
  objc_msgSend(a2, "setStoreTrackId:", v38);
  v39 = 1;
  objc_msgSend(a2, "setIsNew:", 1);
  objc_msgSend(a2, "setSentNotification:", 0);
  v40 = v60;
  if ((*v60 & 1) == 0)
    v39 = objc_msgSend(a2, "hasChanges");
  *v40 = v39;
  v41 = objc_msgSend(a2, "uuid");
  if (v41)
  {
    v42 = v41;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

  }
  else
  {
    v43 = 0;
    v45 = 0;
  }
  a4 = (unint64_t *)sub_1001E704C(v43, v45);
  v16 = v46;
  swift_bridgeObjectRelease(v45);
  v47 = objc_msgSend(v58, "uuid");
  if (v47)
  {
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0;
  }
  v8 = (void *)sub_1001E704C(v49, v51);
  a2 = v52;
  swift_bridgeObjectRelease(v51);
  a6 = (_QWORD *)*v19;
  result = swift_isUniquelyReferenced_nonNull_native(*v19);
  *v19 = (uint64_t)a6;
  if ((result & 1) == 0)
    goto LABEL_29;
LABEL_21:
  v55 = a6[2];
  v54 = a6[3];
  if (v55 >= v54 >> 1)
  {
    result = (uint64_t)sub_10027B38C((_QWORD *)(v54 > 1), v55 + 1, 1, a6);
    a6 = (_QWORD *)result;
    *v19 = result;
  }
  a6[2] = v55 + 1;
  v56 = &a6[4 * v55];
  v56[4] = a4;
  v56[5] = v16;
  v56[6] = v8;
  v56[7] = a2;
  return result;
}

uint64_t sub_1001E7978(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  _QWORD v32[2];
  _QWORD *v33;
  unint64_t v34;

  v4 = type metadata accessor for CharacterSet(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  v5 = __chkstk_darwin();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CharacterSet.alphanumerics.getter(v5);
  v31[2] = v7;
  swift_bridgeObjectRetain(a2);
  v8 = sub_1001E5794((void (*)(uint64_t *__return_ptr, unint64_t *))sub_1001E7BFC, v31, a1, a2);
  swift_bridgeObjectRelease(a2);
  v33 = 0;
  v34 = 0xE000000000000000;
  v32[0] = v8;
  v9 = sub_10003F544(&qword_1005594F8);
  v10 = sub_10002F9C8(&qword_100559500, &qword_1005594F8, (uint64_t)&protocol conformance descriptor for [A]);
  String.UnicodeScalarView.append<A>(contentsOf:)(v32, v9, v10);
  swift_bridgeObjectRelease(v8);
  v11 = v34;
  v32[0] = 32;
  v32[1] = 0xE100000000000000;
  v12 = sub_10016D37C();
  v13 = StringProtocol.components<A>(separatedBy:)(v32, &type metadata for String, &type metadata for String, v12, v12);
  swift_bridgeObjectRelease(v11);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = (_QWORD *)(v13 + 40);
    v16 = _swiftEmptyArrayStorage;
    do
    {
      v20 = *(v15 - 1);
      v21 = *v15;
      v22 = HIBYTE(*v15) & 0xFLL;
      if ((*v15 & 0x2000000000000000) == 0)
        v22 = v20 & 0xFFFFFFFFFFFFLL;
      if (v22)
      {
        swift_bridgeObjectRetain(*v15);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
        v33 = v16;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100048628(0, v16[2] + 1, 1);
          v16 = v33;
        }
        v18 = v16[2];
        v17 = v16[3];
        if (v18 >= v17 >> 1)
        {
          sub_100048628(v17 > 1, v18 + 1, 1);
          v16 = v33;
        }
        v16[2] = v18 + 1;
        v19 = &v16[2 * v18];
        v19[4] = v20;
        v19[5] = v21;
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  else
  {
    v16 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v13);
  v33 = v16;
  v24 = sub_10003F544((uint64_t *)&unk_10055FDF0);
  v25 = sub_10002F9C8((unint64_t *)&qword_1005547B8, (uint64_t *)&unk_10055FDF0, (uint64_t)&protocol conformance descriptor for [A]);
  v26 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v24, v25);
  v27 = swift_release(v16);
  (*(void (**)(char *, uint64_t, __n128))(v29 + 8))(v7, v30, v27);
  return v26;
}

uint64_t sub_1001E7BFC@<X0>(int *a1@<X0>, int *a2@<X8>)
{
  int v3;
  uint64_t result;
  int v5;

  v3 = *a1;
  result = CharacterSet.contains(_:)(*a1);
  if ((result & 1) != 0)
    v5 = v3;
  else
    v5 = 32;
  *a2 = v5;
  return result;
}

uint64_t CoreDataDownloadLibrary.downloadedAssets(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v2 = sub_10003F544(&qword_100559508);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_allocObject((char *)&_sMp.AssociatedTypeNames + 3, 24, 7);
  *(_QWORD *)(v6 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  v7 = sub_10003F544((uint64_t *)&unk_1005544C0);
  v8 = NSManagedObjectContext.performAndPublish<A>(_:)(sub_1001E7FF4, v6, v7);
  swift_release(v6);
  v15[1] = v8;
  v9 = sub_10003F544(&qword_100559510);
  v10 = sub_10003F544(&qword_100559518);
  v11 = sub_10002F9C8(&qword_100559520, &qword_100559510, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.map<A>(_:)(sub_1001E800C, 0, v9, v10, v11);
  swift_release(v8);
  v12 = sub_10002F9C8(&qword_100559528, &qword_100559508, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v2, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v13;
}

void sub_1001E7DC4(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Class isa;
  id v12;
  id v13;
  uint64_t v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v4 = v3;
  v5 = objc_allocWithZone((Class)NSFetchRequest);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithEntityName:", v6, swift_bridgeObjectRelease(v4).n128_f64[0]);

  v8 = sub_10003F544((uint64_t *)&unk_100553780);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CDE60;
  v10 = (void *)objc_opt_self(MTEpisode);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v10, "predicateForEpisodeUuids:", isa);

  *(_QWORD *)(v9 + 32) = v12;
  v13 = objc_msgSend(v10, "predicateForDownloaded:excludeHidden:", 1, 1);
  *(_QWORD *)(v9 + 40) = v13;
  specialized Array._endMutation()(v13);
  v14 = v9;
  sub_100005EC8(0, (unint64_t *)&unk_100553D80, NSPredicate_ptr);
  v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v15);

  objc_msgSend(v7, "setPredicate:", v16);
  v17 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v18 = NSManagedObjectContext.fetch<A>(_:)(v7, v17);

  if (!v1)
    *a1 = v18;
}

uint64_t sub_1001E7FD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001E7FF4(uint64_t *a1@<X8>)
{
  sub_1001E7DC4(a1);
}

void sub_1001E800C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;

  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v56 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v54 - v11;
  v13 = sub_10003F544((uint64_t *)&unk_100559560);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DownloadedAsset(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v64 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v58 = (char *)&v54 - v20;
  v21 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    if (v21 < 0)
      v53 = *a1;
    else
      v53 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v23 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v23)
      goto LABEL_3;
LABEL_30:
    swift_bridgeObjectRelease(v21);
    v52 = _swiftEmptyArrayStorage;
LABEL_31:
    *a2 = v52;
    return;
  }
  v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v21);
  v23 = v22;
  if (!v22)
    goto LABEL_30;
LABEL_3:
  if (v23 >= 1)
  {
    v54 = a2;
    v24 = 0;
    v59 = v21 & 0xC000000000000001;
    v65 = _swiftEmptyArrayStorage;
    v62 = v8;
    v63 = v7;
    v60 = v23;
    v61 = v21;
    v57 = v6;
    v55 = v16;
    while (1)
    {
      v25 = v59
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v21)
          : *(id *)(v21 + 8 * v24 + 32);
      v26 = v25;
      v27 = objc_msgSend(v25, "assetURL", v54);
      if (!v27)
        break;
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      swift_bridgeObjectRetain(v31);
      URL.init(string:)(v29, v31);
      swift_bridgeObjectRelease_n(v31, 2);
      v32 = v62;
      v33 = v6;
      v34 = (uint64_t)v6;
      v35 = v63;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v33, 1, v63) == 1)
        goto LABEL_15;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v12, v34, v35);
      v36 = objc_msgSend(v26, "uuid");
      if (v36)
      {
        v37 = v36;
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v17;
        v41 = v40;

        v42 = v56;
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v56, v12, v35);
        v43 = v41;
        v17 = v39;
        v16 = v55;
        DownloadedAsset.init(episodeUuid:fileURL:)(v38, v43, v42);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v35);
        v44 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v35);
        v44 = 1;
      }
      v6 = v57;
LABEL_18:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v44, 1, v16);

      v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
      v21 = v61;
      if (v45 == 1)
      {
        sub_100007A28((uint64_t)v15, (uint64_t *)&unk_100559560);
      }
      else
      {
        v46 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
        v47 = v58;
        v46(v58, v15, v16);
        v46(v64, v47, v16);
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) != 0)
          v48 = (unint64_t)v65;
        else
          v48 = sub_10027BAB0(0, v65[2] + 1, 1, (unint64_t)v65);
        v50 = *(_QWORD *)(v48 + 16);
        v49 = *(_QWORD *)(v48 + 24);
        if (v50 >= v49 >> 1)
          v48 = sub_10027BAB0(v49 > 1, v50 + 1, 1, v48);
        *(_QWORD *)(v48 + 16) = v50 + 1;
        v51 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
        v65 = (_QWORD *)v48;
        v46((char *)(v48 + v51 + *(_QWORD *)(v17 + 72) * v50), v64, v16);
      }
      if (v60 == ++v24)
      {
        swift_bridgeObjectRelease(v21);
        a2 = v54;
        v52 = v65;
        goto LABEL_31;
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v6, 1, 1, v63);
    v34 = (uint64_t)v6;
LABEL_15:
    sub_100007A28(v34, (uint64_t *)&unk_100553DC0);
    v44 = 1;
    v6 = (char *)v34;
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t CoreDataDownloadLibrary.remove(episodes:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  return sub_1001E86BC(a1, a3, a4);
}

uint64_t sub_1001E84BC@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  Class isa;

  v5 = *a1;
  isa = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, "removeDownloadAssetsForEpisodeUuids:", isa);

  *a3 = v5;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_1001E8538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v2 = sub_10003F544(&qword_100559508);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_allocObject(&unk_1004B4CE8, 24, 7);
  *(_QWORD *)(v6 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  v7 = sub_10003F544((uint64_t *)&unk_1005544C0);
  v8 = NSManagedObjectContext.performAndPublish<A>(_:)(sub_1001E8B0C, v6, v7);
  swift_release(v6);
  v15[1] = v8;
  v9 = sub_10003F544(&qword_100559510);
  v10 = sub_10003F544(&qword_100559518);
  v11 = sub_10002F9C8(&qword_100559520, &qword_100559510, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.map<A>(_:)(sub_1001E800C, 0, v9, v10, v11);
  swift_release(v8);
  v12 = sub_10002F9C8(&qword_100559528, &qword_100559508, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v2, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v13;
}

uint64_t sub_1001E86B4(void *a1)
{
  uint64_t v1;

  return sub_1001E86BC(a1, *(void **)(v1 + 8), *(void **)(v1 + 16));
}

uint64_t sub_1001E86BC(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;

  v36 = a2;
  v5 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_100559530);
  v31 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10003F544(&qword_100559538);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_10003F544(&qword_100559540);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1;
  swift_bridgeObjectRetain(a1);
  v15 = sub_10003F544(&qword_10055EB70);
  Just.init(_:)(&v37, v15);
  v37 = a3;
  v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 1, 1, v16);
  v17 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v18 = sub_10002F9C8(&qword_100559548, &qword_100559530, (uint64_t)&protocol conformance descriptor for Just<A>);
  v19 = sub_1000489AC();
  v20 = a3;
  Publisher.receive<A>(on:options:)(&v37, v7, v8, v17, v18, v19);
  sub_100007A28((uint64_t)v7, &qword_1005564A0);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
  v21 = swift_allocObject(&unk_1004B4D10, 24, 7);
  v22 = v36;
  *(_QWORD *)(v21 + 16) = v36;
  v23 = sub_10002F9C8(&qword_100559550, &qword_100559538, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v24 = v22;
  v25 = v32;
  Publisher.tryMap<A>(_:)(sub_1001E8AEC, v21, v32, v15, v23);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v25);
  v26 = sub_10002F9C8(&qword_100559558, &qword_100559540, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v27 = v33;
  v28 = Publisher.eraseToAnyPublisher()(v33, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v27);
  return v28;
}

uint64_t assignWithCopy for CoreDataDownloadLibrary(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  return a1;
}

uint64_t assignWithTake for CoreDataDownloadLibrary(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for CoreDataDownloadLibrary(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for CoreDataDownloadLibrary()
{
  return &type metadata for CoreDataDownloadLibrary;
}

uint64_t sub_1001E8AC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E8AEC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1001E84BC(a1, *(void **)(v2 + 16), a2);
}

void sub_1001E8B0C(uint64_t *a1@<X8>)
{
  sub_1001E7FF4(a1);
}

void sub_1001E8B20(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = objc_msgSend(a1, "podcastStoreId");
  v2 = objc_msgSend(a1, "podcastFeedUrl");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = objc_msgSend(a1, "author");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = objc_msgSend(a1, "podcastDisplayType");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  PodcastPlayerItem.init(adamID:feedURL:title:displayType:isSubscribeable:)(v1, v4, v6, v9, v11, v14, v16, objc_msgSend(a1, "isNotSubscribeable") ^ 1);

}

void sub_1001E8C68(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  int v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  v36 = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_1005522F0);
  __chkstk_darwin();
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v31 - v9;
  v35 = objc_msgSend(a1, "episodeStoreId");
  v11 = objc_msgSend(a1, "title");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v33 = v14;
    v34 = v13;

  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  v15 = objc_msgSend(a1, "subtitle");
  if (v15)
  {
    v16 = v15;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

  }
  else
  {
    v32 = 0;
    v18 = 0;
  }
  v19 = objc_msgSend(a1, "episodeGuid");
  if (v19)
  {
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = 0;
  }
  v24 = objc_msgSend(a1, "pubDate");
  if (v24)
  {
    v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v8, v26, 1, v3);
  sub_100031454((uint64_t)v8, (uint64_t)v10);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3);
  if (v27)
  {
    sub_1001780E4((uint64_t)v10);
    v28 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
    v29 = sub_1001780E4((uint64_t)v10);
    v30 = Date.timeIntervalSinceReferenceDate.getter(v29);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v28 = v30;
  }
  EpisodePlayerItem.init(adamID:title:subtitle:guid:pubDate:)(v35, v34, v33, v32, v18, v21, v23, *(_QWORD *)&v28, v27 != 0);

}

void *sub_1001E8EF0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  return sub_1001E8F04(a1, a2, a3);
}

void *sub_1001E8F04(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  id v15;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  return 0;
}

void sub_1001E9024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  unsigned __int8 v8;
  NSString v9;
  Class isa;
  void *v11;
  id v12;
  _QWORD *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  NSString v19;
  Class v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  Swift::String v35;

  v2 = v1;
  v4 = (void *)objc_opt_self(MTDB);
  *(_QWORD *)(v2 + 96) = objc_msgSend(v4, "sharedInstance", swift_retain().n128_f64[0]);
  *(_QWORD *)(v2 + 104) = _swiftEmptyArrayStorage;
  v5 = (void *)objc_opt_self(NSUserDefaults);
  v6 = objc_msgSend(v5, "_applePodcastsFoundationSharedUserDefaults");
  v7 = kMTNotificationStatusIsAuthorizedKey;
  v8 = objc_msgSend(v6, "BOOLForKey:", kMTNotificationStatusIsAuthorizedKey);

  *(_BYTE *)(v2 + 88) = v8;
  swift_release(v2);
  *(_QWORD *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 16) = 0x6F7369704577656ELL;
  *(_QWORD *)(v2 + 24) = 0xEB00000000736564;
  *(_QWORD *)(v2 + 32) = objc_msgSend(objc_allocWithZone((Class)MTDynamicTypeConstant), "initWithDefaultConstant:textStyle:", UIFontTextStyleBody, 64.0);
  v9 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v11 = (void *)objc_opt_self(MTSettingsGroup);
  v12 = objc_msgSend(v11, "groupWithTitle:footerText:settings:", v9, 0, isa);

  if (v12)
  {
    *(_QWORD *)(v2 + 40) = v12;
    swift_retain_n(v2, 2);
    v13 = sub_1001EA86C(a1, v2);
    swift_bridgeObjectRelease(a1);
    swift_release(v2);
    v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v35._object = (void *)0xE000000000000000;
    v15._object = (void *)0x8000000100434B40;
    v15._countAndFlagsBits = 0xD000000000000031;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v35._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v35)._object;

    swift_retain();
    v18 = sub_100178E10((uint64_t)v13);
    swift_bridgeObjectRelease(v13);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v20 = Array._bridgeToObjectiveC()().super.isa;
    v21 = objc_msgSend(v11, "groupWithTitle:footerText:settings:", v19, 0, v20, swift_bridgeObjectRelease(v18).n128_f64[0]);

    if (v21)
    {
      v22 = *(void **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = v21;
      swift_release(v2);

      v23 = objc_msgSend(v5, "_applePodcastsFoundationSharedUserDefaults");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v26 = v25;
      v27 = NSUserDefaults.BOOLPublisher(forKey:)(v24);

      swift_bridgeObjectRelease(v26);
      v34[0] = v27;
      v28 = swift_allocObject(&unk_1004B4E18, 24, 7);
      swift_weakInit(v28 + 16, v2);
      v29 = sub_10003F544((uint64_t *)&unk_100559760);
      v30 = sub_10002F9C8(&qword_1005538D8, (uint64_t *)&unk_100559760, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v31 = Publisher<>.sink(receiveValue:)(sub_1001EAE14, v28, v29, v30);
      swift_release(v28);
      swift_release(v34[0]);
      swift_beginAccess(v2 + 104, v34, 33, 0);
      v32 = sub_10003F544((uint64_t *)&unk_100556450);
      v33 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v2 + 104, v32, v33);
      swift_endAccess(v34);
      swift_release(v31);
      swift_release(v2);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1001E943C(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(unsigned __int8 *)(Strong + 88);
    *(_BYTE *)(Strong + 88) = v2;
    if (v2 == v6)
    {
      swift_release(Strong);
    }
    else
    {
      v7 = sub_1001EA198();
      sub_1001E9674((uint64_t)v7);
      swift_release(v5);
      swift_bridgeObjectRelease(v7);
    }
  }
}

void sub_1001E94C8(void *a1, id a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  char v8;
  id v9;
  void *v10;
  id v11;

  v3 = objc_msgSend(a2, "identifier");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(a1, "setArtworkKey:", v3);

    objc_msgSend(a1, "setMaximumNumberOfTextLines:", 2);
    v5 = objc_msgSend(a1, "textLabel");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "setAdjustsFontSizeToFitWidth:", 0);

    }
    v7 = objc_msgSend(a1, "traitCollection");
    v8 = UITraitCollection.interfaceIdiomIsMac.getter();

    if ((v8 & 1) != 0)
    {
      v9 = objc_msgSend(a1, "textLabel");
      if (v9)
      {
        v10 = v9;
        v11 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 14.0);
        objc_msgSend(v10, "setFont:", v11);

      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001E961C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(unsigned __int8 *)(v1 + 88);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setEnabled:forGroupWithIdentifier:", v3, v4);

}

id sub_1001E9674(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  id result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  _BYTE v51[24];
  uint64_t v52;

  v3 = (void *)objc_opt_self(MTPodcast);
  swift_bridgeObjectRetain(a1);
  v5 = sub_10002B070(v4);
  swift_bridgeObjectRelease(a1);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v3, "predicateForPodcastUuids:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  v8 = *(void **)(v1 + 96);
  swift_getObjectType(v8, v9);
  v10 = sub_1001EA688(v7, (uint64_t)_swiftEmptyArrayStorage, v8);

  v43 = v10[2];
  v40 = (uint64_t)v10;
  if (!v43)
  {
    v38 = 0;
    goto LABEL_41;
  }
  v42 = v10 + 4;
  swift_bridgeObjectRetain(v10);
  v11 = 0;
  v41 = v1;
  while (1)
  {
    v14 = &v42[5 * v11];
    v15 = *v14;
    v16 = v14[3];
    v17 = *((unsigned __int8 *)v14 + 32);
    v18 = *(void **)(v1 + 40);
    v47 = v14[1];
    swift_bridgeObjectRetain(v47);
    result = objc_msgSend(v18, "groupSettings", swift_bridgeObjectRetain(v16).n128_f64[0]);
    if (!result)
    {
LABEL_45:
      __break(1u);
      return result;
    }
    v20 = result;
    v21 = sub_100005EC8(0, (unint64_t *)&qword_100554908, off_1004A4538);
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

    v45 = v16;
    v46 = v11;
    v44 = v17;
    if ((unint64_t)v22 >> 62)
      break;
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v22);
    if (v23)
      goto LABEL_8;
LABEL_3:
    swift_bridgeObjectRelease_n(v22, 2);
    v1 = v41;
    v12 = v45;
    v13 = v46;
    if ((v44 & 1) != 0)
      goto LABEL_38;
LABEL_4:
    v11 = v13 + 1;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v47);
    if (v11 == v43)
    {
      v38 = 0;
      v12 = v40;
      goto LABEL_40;
    }
  }
  if (v22 < 0)
    v37 = v22;
  else
    v37 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v23 = _CocoaArrayWrapper.endIndex.getter(v37);
  if (!v23)
    goto LABEL_3;
LABEL_8:
  v24 = 4;
  while (1)
  {
    if ((v22 & 0xC000000000000001) != 0)
      result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v22);
    else
      result = *(id *)(v22 + 8 * v24);
    v25 = result;
    v26 = v24 - 3;
    if (__OFADD__(v24 - 4, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    v27 = objc_msgSend(result, "identifier");
    if (!v27)
      goto LABEL_9;
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

    if (v29 == v15 && v31 == v47)
      break;
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v15, v47, 0);
    swift_bridgeObjectRelease(v31);
    if ((v33 & 1) != 0)
    {
      v34 = v22;
      goto LABEL_22;
    }
LABEL_9:

    ++v24;
    if (v26 == v23)
      goto LABEL_3;
  }
  v34 = v47;
  swift_bridgeObjectRelease(v22);
LABEL_22:
  swift_bridgeObjectRelease(v22);
  v35 = objc_msgSend(v25, "value", swift_bridgeObjectRelease(v34).n128_f64[0]);
  v1 = v41;
  if (v35)
  {
    v36 = v35;
    _bridgeAnyObjectToAny(_:)(&v48, v35);

    swift_unknownObjectRelease(v36);
  }
  else
  {

    v48 = 0u;
    v49 = 0u;
  }
  sub_10003DC78((uint64_t)&v48, (uint64_t)v51, (uint64_t *)&unk_100552300);
  v12 = v45;
  v13 = v46;
  if (v52)
  {
    if ((swift_dynamicCast(v50, v51, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      if (v44 == v50[0])
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else
  {
    sub_100007A28((uint64_t)v51, (uint64_t *)&unk_100552300);
  }
  if (!v44)
    goto LABEL_4;
LABEL_38:
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v40);
  v38 = 1;
LABEL_40:
  swift_bridgeObjectRelease(v12);
LABEL_41:
  swift_beginAccess(v1 + 48, v50, 0, 0);
  sub_1001EA824(v1 + 48, (uint64_t)v51);
  if (v52)
  {
    sub_10000A520((uint64_t)v51, (uint64_t)&v48);
    sub_100007A28((uint64_t)v51, (uint64_t *)&unk_100559740);
    v39 = (void *)*sub_10003A834(&v48, *((uint64_t *)&v49 + 1));
    swift_bridgeObjectRetain(v40);
    swift_retain();
    sub_1001AB28C(v38, v39, v40, (unsigned __int8 *)v1);
    swift_bridgeObjectRelease_n(v40, 2);
    swift_release(v1);
    return (id)sub_10003D380(&v48);
  }
  else
  {
    swift_bridgeObjectRelease(v40);
    return (id)sub_100007A28((uint64_t)v51, (uint64_t *)&unk_100559740);
  }
}

void sub_1001E9B08(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  NSString v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  id v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v14 = a3;
    swift_bridgeObjectRetain(a2);
    v13 = a2;
    v6 = a2 + 64;
    do
    {
      v7 = *(_QWORD *)(v6 - 24);
      v8 = *(_QWORD *)(v6 - 8);
      v6 += 40;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v10 = String._bridgeToObjectiveC()();
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(a1, "setValue:forSettingWithIdentifier:inGroup:", isa, v10, v11);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v7);

      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v13);
    a3 = v14;
  }
  v12 = a3[88];
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setEnabled:forGroupWithIdentifier:", v12, v15);

}

double sub_1001E9C30(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v10 = Strong;
    v11 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v12 = swift_allocObject(v11, 48, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v12 + 32) = a3;
    *(_QWORD *)(v12 + 40) = a4;
    swift_bridgeObjectRetain(a4);
    sub_1001E9F98(v12, a1 & 1);
    swift_release(v10);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  }
  return result;
}

double sub_1001E9CE8(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  Class isa;
  _QWORD *v16;
  Class v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double result;
  _QWORD *v34;
  uint64_t v35;
  _BYTE v36[80];
  _QWORD v37[4];
  char v38;
  _BYTE v39[8];
  uint64_t v40;

  v8 = sub_10003F544((uint64_t *)&unk_1005588B0);
  inited = swift_initStackObject(v8, v36);
  *(_OWORD *)(inited + 16) = xmmword_1003CA240;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastUuid);
  *(_QWORD *)(inited + 40) = v10;
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastTitle);
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastNotifications);
  *(_QWORD *)(inited + 72) = v12;
  v13 = kMTPodcastEntityName;
  v14 = sub_100178E24(a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v16 = sub_100178AE4(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 3, &type metadata for String);
  v17 = Array._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(a1, "objectDictionariesInEntity:predicate:sortDescriptors:propertiesToFetch:includeObjectId:", v13, a2, isa, v17, 0, swift_bridgeObjectRelease(v16).n128_f64[0]);

  if (v18)
  {
    v19 = sub_10003F544(&qword_1005549E0);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v34 = a4;
      swift_bridgeObjectRetain(v20);
      v22 = 0;
      v18 = _swiftEmptyArrayStorage;
      v35 = v20;
      do
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v20 + 8 * v22 + 32));
        sub_1001EABC0(v24, (uint64_t)v37);
        v25 = v37[0];
        v26 = v37[1];
        v27 = v37[2];
        v28 = v37[3];
        v29 = v38;
        sub_10003DC78((uint64_t)v37, (uint64_t)v39, (uint64_t *)&unk_100559750);
        if (v40)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v18 = sub_10027BAC4(0, v18[2] + 1, 1, v18);
          v31 = v18[2];
          v30 = v18[3];
          if (v31 >= v30 >> 1)
            v18 = sub_10027BAC4((_QWORD *)(v30 > 1), v31 + 1, 1, v18);
          v18[2] = v31 + 1;
          v23 = &v18[5 * v31];
          v23[4] = v25;
          v23[5] = v26;
          v23[6] = v27;
          v23[7] = v28;
          *((_BYTE *)v23 + 64) = v29 & 1;
          v20 = v35;
        }
        ++v22;
      }
      while (v21 != v22);
      swift_bridgeObjectRelease(v20);
      a4 = v34;
    }
    else
    {
      v18 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v20);
  }
  v32 = *a4;
  *a4 = v18;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v32).n128_u64[0];
  return result;
}

void sub_1001E9F98(uint64_t a1, char a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;

  v4 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v5 = objc_msgSend(v4, "mainOrPrivateContext");

  v6 = swift_allocObject(&unk_1004B4D50, 33, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v5;
  *(_BYTE *)(v6 + 32) = a2;
  v10[4] = sub_1001EA4E0;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100027AF8;
  v10[3] = &unk_1004B4D68;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_bridgeObjectRetain(a1);
  v9 = v5;
  swift_release(v8);
  objc_msgSend(v9, "performBlockAndWaitWithSave:", v7);
  _Block_release(v7);
  sub_1001E9674(a1);

}

uint64_t sub_1001EA0B4(uint64_t result, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    v7 = (_QWORD *)(swift_bridgeObjectRetain(result) + 40);
    v8 = a3 & 1;
    do
    {
      v9 = *v7;
      swift_bridgeObjectRetain(*v7);
      v10 = String._bridgeToObjectiveC()();
      v11 = objc_msgSend(a2, "podcastForUuid:", v10);

      objc_msgSend(v11, "setNotifications:", v8);
      swift_bridgeObjectRelease(v9);

      v7 += 2;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease(v6);
  }
  return result;
}

_QWORD *sub_1001EA198()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = objc_msgSend(*(id *)(v0 + 40), "groupSettings");
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = v1;
  v3 = sub_100005EC8(0, (unint64_t *)&qword_100554908, off_1004A4538);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
  {
LABEL_20:
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    result = (_QWORD *)sub_100048628(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
      break;
    v7 = 0;
    while (v5 != v7)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      else
        v8 = *(id *)(v4 + 8 * v7 + 32);
      v9 = v8;
      result = objc_msgSend(v8, "identifier");
      if (!result)
        goto LABEL_23;
      v10 = result;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v13 = v12;

      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
        sub_100048628(v14 > 1, v15 + 1, 1);
      ++v7;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v16 = &_swiftEmptyArrayStorage[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
      if (v5 == v7)
        goto LABEL_20;
    }
    __break(1u);
LABEL_16:
    if (v4 < 0)
      v17 = v4;
    else
      v17 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v4);
    if (!v5)
      goto LABEL_20;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

BOOL sub_1001EA358(id *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v5 = objc_msgSend(*a1, "identifier");
  if (!v5)
    return a3 == 0;
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v8;

  if (a3)
  {
    if (v7 == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease(v9);
      return 1;
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, a2, a3, 0);
      swift_bridgeObjectRelease(v9);
      return v11 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    return 0;
  }
}

uint64_t sub_1001EA424()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1001EA440()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_100007A28(v0 + 48, (uint64_t *)&unk_100559740);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t _s17NewEpisodeSectionCMa()
{
  return objc_opt_self(_TtCC8Podcasts45MTNotificationSettingsSectionedViewController17NewEpisodeSection);
}

uint64_t sub_1001EA4B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1001EA4E0()
{
  uint64_t v0;

  return sub_1001EA0B4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

_QWORD *sub_1001EA4EC(void *a1, uint64_t a2, id a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD aBlock[5];
  uint64_t v16;
  _QWORD *v17;

  v17 = 0;
  v5 = objc_msgSend(a3, "mainOrPrivateContext");
  v6 = (_QWORD *)swift_allocObject(&unk_1004B4E90, 48, 7);
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v17;
  v7 = swift_allocObject(&unk_1004B4EB8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001EB050;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1001529CC;
  v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B4ED0;
  v8 = _Block_copy(aBlock);
  v9 = v16;
  v10 = v5;
  v11 = a1;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  swift_release(v9);
  objc_msgSend(v10, "performBlockAndWait:", v8);
  _Block_release(v8);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v7, "", 148, 137, 36, 1);
  result = (_QWORD *)swift_release(v7);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v17;
    if (v17)
      swift_bridgeObjectRetain(v17);
    else
      v13 = _swiftEmptyArrayStorage;

    v14 = v17;
    swift_release(v6);
    swift_bridgeObjectRelease(v14);
    return v13;
  }
  return result;
}

_QWORD *sub_1001EA688(void *a1, uint64_t a2, id a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD aBlock[5];
  uint64_t v16;
  _QWORD *v17;

  v17 = 0;
  v5 = objc_msgSend(a3, "mainOrPrivateContext");
  v6 = (_QWORD *)swift_allocObject(&unk_1004B4DA0, 48, 7);
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v17;
  v7 = swift_allocObject(&unk_1004B4DC8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001EABA4;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_100029B3C;
  v16 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B4DE0;
  v8 = _Block_copy(aBlock);
  v9 = v16;
  v10 = v5;
  v11 = a1;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  swift_release(v9);
  objc_msgSend(v10, "performBlockAndWait:", v8);
  _Block_release(v8);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v7, "", 148, 137, 36, 1);
  result = (_QWORD *)swift_release(v7);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v17;
    if (v17)
      swift_bridgeObjectRetain(v17);
    else
      v13 = _swiftEmptyArrayStorage;

    v14 = v17;
    swift_release(v6);
    swift_bridgeObjectRelease(v14);
    return v13;
  }
  return result;
}

uint64_t sub_1001EA824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100559740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1001EA86C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  NSString v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD aBlock[5];
  _QWORD *v24;
  unint64_t v25;

  result = _swiftEmptyArrayStorage;
  v25 = (unint64_t)_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v21 = (id)objc_opt_self(MTSetting);
    v20 = a1;
    v5 = (unsigned __int8 *)(a1 + 64);
    do
    {
      v7 = *v5;
      v8 = *((_QWORD *)v5 - 1);
      v10 = *((_QWORD *)v5 - 4);
      v9 = *((_QWORD *)v5 - 3);
      swift_bridgeObjectRetain_n(v9, 2);
      swift_bridgeObjectRetain(v8);
      v11 = String._bridgeToObjectiveC()();
      v12 = String._bridgeToObjectiveC()();
      v13 = swift_allocObject(&unk_1004B4E18, 24, 7);
      swift_weakInit(v13 + 16, a2);
      v14 = (_QWORD *)swift_allocObject(&unk_1004B4E40, 40, 7);
      v14[2] = v13;
      v14[3] = v10;
      v14[4] = v9;
      aBlock[4] = sub_1001EAE48;
      v24 = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001C290;
      aBlock[3] = &unk_1004B4E58;
      v15 = _Block_copy(aBlock);
      swift_release(v24);
      v16 = objc_msgSend(v21, "switchSettingWithTitle:initialValue:identifier:changeHandler:", v11, v7, v12, v15);
      _Block_release(v15);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v9);

      if (v16)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v19 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v18 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v19 >= v18 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
        specialized Array._endMutation()(v6);
      }
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v20);
    return (_QWORD *)v25;
  }
  return result;
}

id sub_1001EAA84()
{
  id v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v0 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v1 = (void *)objc_opt_self(MTPodcast);
  result = objc_msgSend(v1, "sortDescriptorsForSortType:", 3);
  if (result)
  {
    v3 = result;
    v4 = sub_100005EC8(0, (unint64_t *)&qword_1005547A0, NSSortDescriptor_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    v6 = objc_msgSend(v1, "predicateForSubscribedAndNotHidden");
    v7 = sub_1001EA4EC(v6, v5, v0);

    swift_bridgeObjectRelease(v5);
    if (v7[2])
    {
      v8 = _s17NewEpisodeSectionCMa();
      v9 = swift_allocObject(v8, 112, 7);
      sub_1001E9024((uint64_t)v7);
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      return 0;
    }
    return (id)v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1001EABA4()
{
  uint64_t v0;

  return sub_1001E9CE8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 40));
}

uint64_t sub_1001EABB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EABC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastUuid);
  v6 = v5;
  if (!*(_QWORD *)(a1 + 16) || (v7 = sub_10002E5D8(v4, v5), (v8 & 1) == 0))
  {
    v26 = 0u;
    v27 = 0u;
    goto LABEL_9;
  }
  sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v26);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_10:
    v15 = a1;
LABEL_11:
    swift_bridgeObjectRelease(v15);
    sub_100007A28((uint64_t)&v26, (uint64_t *)&unk_100552300);
    goto LABEL_12;
  }
  if ((swift_dynamicCast(&v24, &v26, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_21:
    swift_bridgeObjectRelease(a1);
    goto LABEL_12;
  }
  v9 = v24;
  v6 = v25;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastTitle);
  v12 = v11;
  if (*(_QWORD *)(a1 + 16) && (v13 = sub_10002E5D8(v10, v11), (v14 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_bridgeObjectRelease(v12);
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_9:
    swift_bridgeObjectRelease(v6);
    goto LABEL_10;
  }
  if ((swift_dynamicCast(&v24, &v26, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_21;
  }
  v16 = v24;
  v17 = v25;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPodcastNotifications);
  v21 = v20;
  if (*(_QWORD *)(a1 + 16) && (v22 = sub_10002E5D8(v19, v20), (v23 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v27 + 1))
  {
    swift_bridgeObjectRelease(v17);
    v15 = v6;
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v24, &v26, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v18 = v24;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v6);
LABEL_12:
  v9 = 0;
  v6 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
LABEL_13:
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = v18;
}

uint64_t sub_1001EADF0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001EAE14(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1001E943C(a1, v1);
}

uint64_t sub_1001EAE1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_1001EAE48(char a1)
{
  uint64_t *v1;

  return sub_1001E9C30(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001EAE58()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001EAE8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t _s17NewEpisodeSectionC13DBPodcastInfoVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s17NewEpisodeSectionC13DBPodcastInfoVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 _s17NewEpisodeSectionC13DBPodcastInfoVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s17NewEpisodeSectionC13DBPodcastInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t _s17NewEpisodeSectionC13DBPodcastInfoVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17NewEpisodeSectionC13DBPodcastInfoVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s17NewEpisodeSectionC13DBPodcastInfoVMa()
{
  return &_s17NewEpisodeSectionC13DBPodcastInfoVN;
}

id sub_1001EB064()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "createAndSaveStationWithTitle:", v1);

  return v2;
}

void (*sub_1001EB0AC(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return sub_1001EB104;
}

void sub_1001EB104(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    if (!*(_QWORD *)(v4 + v3[4]))
    {
      objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController), "endAutomaticResponseLoading");
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
      if (v5)
      {
        swift_retain();
        sub_1001EE2DC();
        swift_release(v5);
      }
    }
  }
  free(v3);
}

uint64_t sub_1001EB17C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;
  _BYTE v25[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v25, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    v11 = (void *)result;
    v12 = objc_retain(*(id *)(result
                            + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue));

    aBlock[4] = sub_1001EF0D4;
    v24 = a1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004B5258;
    v13 = _Block_copy(aBlock);
    swift_retain(a1);
    static DispatchQoS.unspecified.getter(v14);
    v22 = _swiftEmptyArrayStorage;
    v15 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = v6;
    v16 = v3;
    v17 = v15;
    v18 = sub_10003F544((uint64_t *)&unk_10055B200);
    v19 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v2, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
    return swift_release(v24);
  }
  return result;
}

uint64_t sub_1001EB38C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  uint64_t Strong;
  void *v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(_QWORD *);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  void *v28;
  char v29[24];
  char v30[24];
  _OWORD v31[4];
  __int16 v32;
  char v33;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (char *)result;
    swift_beginAccess(v1, v29, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v1);
    if (Strong)
    {
      v5 = (void *)Strong;
      v6 = *(_OWORD *)(Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode);
      v25 = *(_OWORD *)(Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode + 16);
      v26 = v6;
      v24 = *(_OWORD *)(Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode + 32);
      v23 = *(_OWORD *)(Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode + 48);
      v7 = *(unsigned __int16 *)(Strong
                               + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode
                               + 64) | (*(unsigned __int8 *)(Strong
                                                           + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode
                                                           + 66) << 16);
      swift_bridgeObjectRetain(v6);

      v8 = v23;
      v10 = v24;
      v9 = v25;
      v11 = v26;
    }
    else
    {
      v7 = 0;
      v11 = 0uLL;
      v9 = 0uLL;
      v10 = 0uLL;
      v8 = 0uLL;
    }
    v26 = v11;
    v31[0] = v11;
    v31[1] = v9;
    v31[2] = v10;
    v31[3] = v8;
    v32 = v7;
    v33 = BYTE2(v7);
    v28 = &_swiftEmptySetSingleton;
    v27 = v3;
    __chkstk_darwin(Strong);
    v22[2] = v31;
    v22[3] = v3;
    v22[4] = &v28;
    v12 = type metadata accessor for PlayingEpisodePlayStateDataSource();
    v14 = sub_100005E40((unint64_t *)&unk_1005598D8, v13, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CE03C);
    SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)(sub_1001EF104, v22, v12, v14);
    v15 = &v3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
    swift_beginAccess(&v3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates], &v27, 0, 0);
    v16 = *(void (**)(_QWORD *))v15;
    if (*(_QWORD *)v15)
    {
      v17 = *((_QWORD *)v15 + 1);
      v18 = v28;
      sub_10002CA20((uint64_t)v16, v17);
      v19 = swift_bridgeObjectRetain(v18);
      v20 = sub_1001F9EB0(v19);
      swift_bridgeObjectRelease(v18);
      v16(v20);
      sub_10002CA30((uint64_t)v16, v17);
      swift_release(v20);
    }
    v21 = v28;

    swift_bridgeObjectRelease(v21);
    return swift_bridgeObjectRelease(v26);
  }
  return result;
}

id sub_1001EB598()
{
  char *v0;
  void *v1;
  uint64_t v2;
  objc_super v4;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer];
  if (v2)
  {
    swift_retain();
    sub_1001EE5C4();
    swift_release(v2);
  }
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for PlayingEpisodePlayStateDataSource();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_1001EB7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  char v21;
  char v22;
  float v23;
  double v24;
  double v25;
  __n128 v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __n128 v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t i;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95[24];
  void *v96;
  uint64_t v97[7];
  _QWORD v98[2];
  double v99;
  double v100;
  float v101;
  char v102;
  char v103;

  v76 = a3;
  sub_1001EF068(a1, (uint64_t)v97);
  v5 = v97[0];
  v82 = sub_10003F544(&qword_100559908);
  __chkstk_darwin(v82);
  v90 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100559910);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v88 = (uint64_t)&v74 - v12;
  __chkstk_darwin(v11);
  v89 = (uint64_t)&v74 - v13;
  v14 = type metadata accessor for EpisodePlayState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v85 = (uint64_t)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v84 = (double *)((char *)&v74 - v18);
  v19 = &_swiftEmptySetSingleton;
  v96 = &_swiftEmptySetSingleton;
  sub_1001EF068(a1, (uint64_t)v98);
  v83 = v98[0];
  if (!v98[0])
    goto LABEL_43;
  v20 = v99;
  v21 = v102;
  v22 = v103 & 1;
  v75 = v10;
  if (v99 <= 0.0)
  {
    swift_bridgeObjectRetain(v5);
    v28 = 0.0;
  }
  else
  {
    v23 = v101;
    v24 = v100;
    v25 = *(double *)&v98[1];
    v26 = swift_bridgeObjectRetain(v5);
    v27 = v24 + (static Date.timeIntervalSinceReferenceDate.getter(v26) - v25) * v23;
    if (v27 >= v20)
      v27 = v20;
    v28 = fmax(v27, 0.0);
  }
  v29 = v84;
  *v84 = v28;
  v29[1] = v20;
  *((_BYTE *)v29 + 16) = (v21 & 1) == 0;
  *((_BYTE *)v29 + 17) = v22;
  *((_BYTE *)v29 + 18) = 0;
  v81 = v14;
  swift_storeEnumTagMultiPayload(v29, v14, 3);
  v30 = *(_QWORD *)(v83 + 56);
  v77 = v83 + 56;
  v31 = 1 << *(_BYTE *)(v83 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v74 = a2;
  v34 = (_QWORD *)(a2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates);
  v35 = swift_beginAccess(a2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates, v95, 0, 0);
  v36 = 0;
  v78 = (unint64_t)(v31 + 63) >> 6;
  v37 = v89;
  v80 = v34;
  v79 = v15;
  if (v33)
    goto LABEL_14;
LABEL_15:
  v41 = v36 + 1;
  if (!__OFADD__(v36, 1))
  {
    if (v41 < v78)
    {
      v42 = *(_QWORD *)(v77 + 8 * v41);
      ++v36;
      if (v42)
        goto LABEL_28;
      v36 = v41 + 1;
      if (v41 + 1 < v78)
      {
        v42 = *(_QWORD *)(v77 + 8 * v36);
        if (v42)
          goto LABEL_28;
        v36 = v41 + 2;
        if (v41 + 2 < v78)
        {
          v42 = *(_QWORD *)(v77 + 8 * v36);
          if (!v42)
          {
            v43 = v41 + 3;
            if (v43 < v78)
            {
              v42 = *(_QWORD *)(v77 + 8 * v43);
              if (v42)
              {
                v36 = v43;
                goto LABEL_28;
              }
              while (1)
              {
                v36 = v43 + 1;
                if (__OFADD__(v43, 1))
                  goto LABEL_45;
                if (v36 >= v78)
                  goto LABEL_42;
                v42 = *(_QWORD *)(v77 + 8 * v36);
                ++v43;
                if (v42)
                  goto LABEL_28;
              }
            }
            goto LABEL_42;
          }
LABEL_28:
          v39 = (v42 - 1) & v42;
          for (i = __clz(__rbit64(v42)) + (v36 << 6); ; i = v38 | (v36 << 6))
          {
            v44 = *(_QWORD *)(v83 + 48) + 24 * i;
            v46 = *(_QWORD *)v44;
            v45 = *(_QWORD *)(v44 + 8);
            v47 = *(_BYTE *)(v44 + 16);
            v48 = *v34;
            v49 = *(_QWORD *)(*v34 + 16);
            v86 = v36;
            v87 = v39;
            if (v49)
            {
              sub_10003CAD8(v46, v45, v47);
              swift_bridgeObjectRetain(v48);
              v50 = sub_1001CD1C8(v46, v45, v47);
              if ((v51 & 1) != 0)
              {
                sub_100199320(*(_QWORD *)(v48 + 56) + *(_QWORD *)(v15 + 72) * v50, v37);
                v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
                v53 = v37;
                v54 = 0;
              }
              else
              {
                v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
                v53 = v37;
                v54 = 1;
              }
              v56 = v15;
              v57 = v81;
              v52(v53, v54, 1, v81);
              swift_bridgeObjectRelease(v48);
            }
            else
            {
              v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
              v55 = v37;
              v56 = v15;
              v57 = v81;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v52)(v55, 1, 1, v81, v35);
              sub_10003CAD8(v46, v45, v47);
            }
            sub_10003CAD8(v46, v45, v47);
            sub_10035D398((uint64_t)&v92, v46, v45, v47);
            sub_10003CA84(v92, v93, v94);
            swift_beginAccess(v34, &v92, 33, 0);
            v58 = v84;
            v59 = v85;
            sub_100199320((uint64_t)v84, v85);
            sub_10003CAD8(v46, v45, v47);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
            v91 = *v34;
            *v34 = 0x8000000000000000;
            sub_10021C25C(v59, v46, v45, v47, isUniquelyReferenced_nonNull_native);
            v61 = *v34;
            *v34 = v91;
            swift_bridgeObjectRelease(v61);
            sub_10003CA84(v46, v45, v47);
            swift_endAccess(&v92);
            v62 = v88;
            sub_100199320((uint64_t)v58, v88);
            v52(v62, 0, 1, v57);
            v63 = v90;
            v64 = v90 + *(int *)(v82 + 48);
            sub_100007A64(v89, v90, &qword_100559910);
            sub_100007A64(v62, v64, &qword_100559910);
            v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
            if (v65(v63, 1, v57) == 1)
            {
              sub_100007A28(v88, &qword_100559910);
              v66 = v65(v64, 1, v57);
              v33 = v87;
              v37 = v89;
              if (v66 != 1)
                goto LABEL_12;
              sub_100007A28(v90, &qword_100559910);
              v15 = v79;
              v34 = v80;
              v36 = v86;
            }
            else
            {
              v67 = v90;
              v68 = v88;
              v69 = (uint64_t)v75;
              sub_100007A64(v90, (uint64_t)v75, &qword_100559910);
              if (v65(v64, 1, v57) == 1)
              {
                sub_100007A28(v68, &qword_100559910);
                sub_100199364(v69);
                v37 = v89;
                v33 = v87;
LABEL_12:
                sub_100007A28(v90, &qword_100559908);
                v15 = v79;
                v34 = v80;
                v36 = v86;
LABEL_13:
                sub_10035D398((uint64_t)&v92, v46, v45, v47);
                sub_10003CA84(v92, v93, v94);
                sub_100007A28(v37, &qword_100559910);
                if (!v33)
                  goto LABEL_15;
                goto LABEL_14;
              }
              v70 = v85;
              sub_1001993EC(v64, v85);
              v71 = static EpisodePlayState.== infix(_:_:)(v69, v70);
              sub_100199364(v70);
              sub_100007A28(v68, &qword_100559910);
              sub_100199364(v69);
              sub_100007A28(v67, &qword_100559910);
              v37 = v89;
              v15 = v79;
              v34 = v80;
              v36 = v86;
              v33 = v87;
              if ((v71 & 1) == 0)
                goto LABEL_13;
            }
            sub_100007A28(v37, &qword_100559910);
            sub_10003CA84(v46, v45, v47);
            if (!v33)
              goto LABEL_15;
LABEL_14:
            v38 = __clz(__rbit64(v33));
            v39 = (v33 - 1) & v33;
          }
        }
      }
    }
LABEL_42:
    swift_release(v83);
    sub_100199364((uint64_t)v84);
    v19 = v96;
LABEL_43:
    sub_1001EC03C((uint64_t)v19);
    v73 = v72;
    swift_bridgeObjectRelease(v19);
    sub_1002E7DAC(v73);
    return;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

void sub_1001EC03C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD v48[3];

  v3 = sub_10003F544(&qword_100559910);
  __chkstk_darwin(v3);
  v43 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_previouslyPlayingEpisodes);
  v41 = a1;
  v39 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_previouslyPlayingEpisodes;
  if (v5)
  {
    if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v5 + 16) >> 3)
    {
      v48[0] = v5;
      swift_bridgeObjectRetain(v5);
      sub_10033B3A4(a1);
      v6 = (unint64_t *)v48[0];
    }
    else
    {
      swift_bridgeObjectRetain(v5);
      v6 = sub_10033BA98(a1, v5);
    }
  }
  else
  {
    v6 = (unint64_t *)&_swiftEmptySetSingleton;
  }
  v7 = v6[7];
  v44 = v6 + 7;
  v8 = 1 << *((_BYTE *)v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v40 = v1;
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates);
  v45 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(v6);
  v12 = 0;
  v13 = v43;
  v42 = v6;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v46 = v12;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v17 >= v45)
      goto LABEL_31;
    v18 = v44[v17];
    v19 = v12 + 1;
    if (!v18)
    {
      v19 = v12 + 2;
      if (v12 + 2 >= v45)
        goto LABEL_31;
      v18 = v44[v19];
      if (!v18)
      {
        v19 = v12 + 3;
        if (v12 + 3 >= v45)
          goto LABEL_31;
        v18 = v44[v19];
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v46 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_27:
    v21 = v6[6] + 24 * v16;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_BYTE *)(v21 + 16);
    swift_beginAccess(v11, v48, 33, 0);
    v25 = *v11;
    sub_10003CAD8(v22, v23, v24);
    swift_bridgeObjectRetain(v25);
    v26 = sub_1001CD1C8(v22, v23, v24);
    v28 = v27;
    swift_bridgeObjectRelease(v25);
    if ((v28 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      v30 = *v11;
      v47 = *v11;
      *v11 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10021DCD8();
        v30 = v47;
      }
      sub_10003CA84(*(_QWORD *)(*(_QWORD *)(v30 + 48) + 24 * v26), *(_QWORD *)(*(_QWORD *)(v30 + 48) + 24 * v26 + 8), *(_BYTE *)(*(_QWORD *)(v30 + 48) + 24 * v26 + 16));
      v31 = *(_QWORD *)(v30 + 56);
      v32 = type metadata accessor for EpisodePlayState(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = v31 + *(_QWORD *)(v33 + 72) * v26;
      v13 = v43;
      sub_1001993EC(v34, v43);
      sub_10021B138(v26, v30);
      v35 = *v11;
      *v11 = v30;
      v36 = swift_bridgeObjectRelease(v35);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v33 + 56))(v13, 0, 1, v32, v36);
      v6 = v42;
    }
    else
    {
      v14 = type metadata accessor for EpisodePlayState(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    }
    v12 = v46;
    sub_100007A28(v13, &qword_100559910);
    swift_endAccess(v48);
    sub_10003CA84(v22, v23, v24);
  }
  v20 = v12 + 4;
  if (v12 + 4 >= v45)
  {
LABEL_31:
    swift_release(v6);
    v37 = *(_QWORD *)(v40 + v39);
    v38 = v41;
    *(_QWORD *)(v40 + v39) = v41;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRelease(v37);
    return;
  }
  v18 = v44[v20];
  if (v18)
  {
    v19 = v12 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v45)
      goto LABEL_31;
    v18 = v44[v19];
    ++v20;
    if (v18)
      goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

uint64_t type metadata accessor for PlayingEpisodePlayStateDataSource()
{
  return objc_opt_self(_TtC8Podcasts33PlayingEpisodePlayStateDataSource);
}

uint64_t sub_1001EC440()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

id sub_1001EC48C()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_accessQueue);
}

id sub_1001EC4A0()
{
  uint64_t *v0;
  uint64_t v1;
  id result;
  uint64_t v3;

  v1 = *v0;
  result = objc_msgSend(*(id *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController), "beginAutomaticResponseLoading");
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
  if (v3)
  {
    swift_retain();
    sub_1001EE1F4();
    return (id)swift_release(v3);
  }
  return result;
}

uint64_t sub_1001EC500()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates);
  swift_beginAccess(v1, v4, 0, 0);
  v2 = *v1;
  sub_10002CA20(*v1, v1[1]);
  return v2;
}

uint64_t sub_1001EC55C(uint64_t a1, uint64_t a2)
{
  sub_1001EECA8(a1, a2);
  return sub_10002CA30(a1, a2);
}

void (*sub_1001EC594(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1001EB0AC(v2);
  return sub_100179DD8;
}

uint64_t sub_1001EC5DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 & 1;
  v6 = type metadata accessor for PlayingEpisodePlayStateDataSource();
  v8 = sub_100005E40((unint64_t *)&unk_1005598D8, v7, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CE03C);
  return SynchronizedEpisodeStateDataSource.state(for:)(a1, a2, v5, v6, v8);
}

id sub_1001EC650(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t ObjectType;
  uint64_t (*v16)(uint64_t, _QWORD);
  _QWORD *v17;
  id result;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  char *v24;
  uint64_t v25;
  _OWORD v26[7];
  char v27[24];
  _OWORD v28[8];

  v4 = v3;
  v8 = objc_msgSend(a1, "request");
  v9 = objc_opt_self(MPCPlayerRequest);
  v10 = (void *)swift_dynamicCastObjCClass(v8, v9);
  if (!v10)
  {
    swift_unknownObjectRelease(v8);
    goto LABEL_7;
  }
  v11 = swift_unknownObjectRetain(v8);
  v12 = NowPlayingDataProvider.shared.unsafeMutableAddressor(v11);
  swift_beginAccess(v12, v27, 0, 0);
  sub_100007A64(v12, (uint64_t)v26, &qword_1005598E8);
  if (!*(_QWORD *)&v26[0])
  {
    swift_unknownObjectRelease(v8);
    sub_100007A28((uint64_t)v26, &qword_1005598E8);
    goto LABEL_7;
  }
  v25 = a2;
  v28[4] = v26[4];
  v28[5] = v26[5];
  v28[6] = v26[6];
  v28[0] = v26[0];
  v28[1] = v26[1];
  v28[2] = v26[2];
  v28[3] = v26[3];
  v14 = v26[0];
  ObjectType = swift_getObjectType(*(_QWORD *)&v26[0], v13);
  v16 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v14 + 1) + 8);
  swift_unknownObjectRetain(v14);
  v17 = (_QWORD *)v16(ObjectType, *((_QWORD *)&v14 + 1));
  swift_unknownObjectRelease(v14);
  result = objc_msgSend(v10, "playerPath");
  if (result)
  {
    v19 = result;
    (*(void (**)(void))((swift_isaMask & *v17) + 0x110))();

    swift_unknownObjectRelease(v8);
    sub_1001EEF40((uint64_t)v28);
    a2 = v25;
LABEL_7:
    v20 = *(_QWORD *)&v4[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_episodeLookupUtil];
    v21 = (_QWORD *)swift_allocObject(&unk_1004B5128, 64, 7);
    v21[2] = a2;
    v21[3] = a3;
    v21[4] = a1;
    v21[5] = v4;
    v21[6] = v10;
    v21[7] = v20;
    v22 = v10;
    swift_unknownObjectRetain(v20);
    swift_retain();
    v23 = a1;
    v24 = v4;
    dispatch_to_main_queue(_:)(sub_1001EEFDC, v21);

    return (id)swift_release(v21);
  }
  __break(1u);
  return result;
}

void sub_1001EC870(void (*a1)(uint64_t), uint64_t a2, void *a3, char *a4, void *a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  id v34;
  id v35;
  Class isa;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  const void *v58;
  char *v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  id v73;
  int v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  void *v83;
  id v84;
  void *v85;
  uint64_t v86;
  id v87;
  char v88;
  char v89;
  id v90;
  void *v91;
  uint64_t v92;
  id v93;
  void *v94;
  id v95;
  unsigned int v96;
  void *v97;
  int v98;
  char **v99;
  uint64_t v100;
  id v101;
  double v102;
  uint64_t v103;
  NSString v104;
  uint64_t v105;
  id v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  double v113;
  const char *v114;
  char v115;
  unsigned __int8 v116;
  char v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  void *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;
  int v135;
  id v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  void *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 aBlock;
  __int128 v153;
  void *v154;
  uint64_t v155;
  char v156;
  unsigned __int8 v157;
  char v158;
  _QWORD *v159;
  int v160;
  char v161;

  v145 = a6;
  v146 = a5;
  v148 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v150 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v151 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v149 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_1005598F0);
  __chkstk_darwin(v13);
  v15 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for IndexPath(0, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v147 = (char *)&v132 - v24;
  a1(v23);
  v25 = objc_msgSend(a3, "response");
  if (!v25)
    return;
  v26 = v25;
  v27 = objc_opt_self(MPCPlayerResponse);
  v28 = (void *)swift_dynamicCastObjCClass(v26, v27);
  if (!v28)
  {
    swift_unknownObjectRelease(v26);
    return;
  }
  v29 = v28;
  v143 = v8;
  v144 = v11;
  v30 = objc_msgSend(v28, "tracklist");
  v31 = objc_msgSend(v30, "playingItemIndexPath");

  if (!v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
    goto LABEL_13;
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v31);

  v32 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v32(v15, v22, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
  {
LABEL_13:
    sub_100007A28((uint64_t)v15, (uint64_t *)&unk_1005598F0);
    v59 = v148;
    v60 = *(_QWORD *)&v148[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer];
    if (v60)
    {
      swift_retain();
      sub_1001EE2DC();
      swift_release(v60);
    }
    v49 = swift_allocObject(&unk_1004B5150, 24, 7);
    swift_unknownObjectWeakInit(v49 + 16, v59);
    v154 = sub_1001EF010;
    v155 = v49;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v153 = sub_100027AF8;
    *((_QWORD *)&v153 + 1) = &unk_1004B5168;
    v61 = _Block_copy(&aBlock);
    swift_retain();
    v62 = v149;
    static DispatchQoS.unspecified.getter(v63);
    v159 = _swiftEmptyArrayStorage;
    v64 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v65 = sub_10003F544((uint64_t *)&unk_10055B200);
    v66 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
    v67 = v143;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v65, v66, v143, v64);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v62, v10, v61);
    swift_unknownObjectRelease(v26);
    _Block_release(v61);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v10, v67);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v62, v144);
    goto LABEL_16;
  }
  v33 = v147;
  v32(v147, v15, v18);
  v34 = objc_msgSend(v29, "tracklist");
  v35 = objc_msgSend(v34, "items");

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v37 = objc_msgSend(v35, "itemAtIndexPath:", isa);

  v38 = objc_msgSend(v37, "metadataObject");
  if (v38)
  {
    v39 = v38;
    v40 = objc_msgSend(v38, "flattenedGenericObject");

    if (v40)
    {
      v41 = objc_msgSend(v40, "anyObject");

      if (v41)
      {
        v42 = objc_opt_self(MPModelPodcastEpisode);
        v43 = swift_dynamicCastObjCClass(v41, v42);
        if (v43)
        {
          v44 = v43;
          sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
          v45 = v41;
          v46 = (id)IMPlayerItem.init(modelObject:includeArtworkCatalog:)(v44, 0);
          v47 = objc_msgSend(v29, "state");
          v141 = v45;
          v142 = v46;
          if (v47 == (id)1)
          {
            v48 = v148;
            v146 = *(void **)&v148[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue];
            v49 = swift_allocObject(&unk_1004B5150, 24, 7);
            swift_unknownObjectWeakInit(v49 + 16, v48);
            v154 = sub_1001EF054;
            v155 = v49;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v153 = sub_100027AF8;
            *((_QWORD *)&v153 + 1) = &unk_1004B51E0;
            v148 = (char *)_Block_copy(&aBlock);
            swift_retain();
            v50 = v149;
            static DispatchQoS.unspecified.getter(v51);
            v159 = _swiftEmptyArrayStorage;
            v52 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v53 = sub_10003F544((uint64_t *)&unk_10055B200);
            v54 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
            v55 = v53;
            v56 = v37;
            v57 = v143;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v55, v54, v143, v52);
            v58 = v148;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v50, v10, v148);
            swift_unknownObjectRelease(v26);

            _Block_release(v58);
            (*(void (**)(char *, uint64_t))(v150 + 8))(v10, v57);
            (*(void (**)(char *, uint64_t))(v151 + 8))(v50, v144);
            (*(void (**)(char *, uint64_t))(v19 + 8))(v147, v18);
LABEL_16:
            v68 = v155;
            v69 = v49;
LABEL_17:
            swift_release(v69);
            swift_release(v68);
            return;
          }
          v70 = objc_msgSend(v46, "episodeGuid");
          if (v70)
          {
            v71 = v70;
            v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
            v140 = v72;

          }
          else
          {
            v137 = 0;
            v140 = 0;
          }
          *(_QWORD *)&v138 = objc_msgSend(v46, "episodeStoreId");
          v73 = objc_msgSend(v29, "state");
          objc_msgSend(v37, "duration");
          v74 = v157;
          v75 = objc_msgSend(v46, "episode");
          v136 = v75;
          v135 = v74;
          v133 = v73;
          if (v75)
          {
            v76 = v75;
            v77 = objc_msgSend(v75, "uuid");
            if (v77)
            {
              v78 = v77;
              v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
              v80 = v79;

            }
            else
            {
              v132 = 0;
              v80 = 0;
            }
            if (!v140)
            {
              v84 = objc_msgSend(v76, "guid");
              if (v84)
              {
                v85 = v84;
                v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
                v140 = v86;

              }
              else
              {
                v137 = 0;
                v140 = 0;
              }
            }
            v87 = v76;
            *(_QWORD *)&v139 = MTEpisode.contentId.getter(v87);
            v89 = v88;

            if ((v89 & 1) == 0)
            {
              LODWORD(v138) = 0;
              v83 = v146;
              v90 = v133;
              if (!v83)
                goto LABEL_47;
LABEL_42:
              v93 = objc_msgSend(v83, "playerPath");
              if (!v93)
              {
LABEL_66:
                swift_bridgeObjectRelease(v140);
                __break(1u);
                return;
              }
              v94 = v93;
              v95 = objc_msgSend(v93, "route");

              if (v95)
              {
                v96 = objc_msgSend(v95, "isDeviceRoute");

                if (v80)
                {
                  v97 = v37;
                  swift_bridgeObjectRelease(v140);
                  v98 = v96 ^ 1;
LABEL_49:
                  LODWORD(v137) = v98;
LABEL_50:
                  v99 = &selRef_dateLabelDescriptionForEpisode_download_;
                  v100 = v132;
LABEL_64:
                  v112 = v90 == (id)2;
                  v140 = static EpisodeStateIdentifier.generateIdsFrom(uuid:contentId:)(v100, v80, v139, v138);
                  *(_QWORD *)&v113 = swift_bridgeObjectRelease(v80).n128_u64[0];
                  v114 = v99[239];
                  v134 = v97;
                  objc_msgSend(v97, v114, v113);
                  v139 = aBlock;
                  v138 = v153;
                  v115 = v156;
                  v116 = v157;
                  v117 = v158;
                  v118 = v154;
                  v119 = v155;
                  v120 = v148;
                  v146 = *(void **)&v148[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue];
                  v121 = (char *)swift_allocObject(&unk_1004B5150, 24, 7);
                  swift_unknownObjectWeakInit(v121 + 16, v120);
                  v122 = swift_allocObject(&unk_1004B51A0, 92, 7);
                  v145 = v121;
                  v123 = v140;
                  *(_QWORD *)(v122 + 16) = v121;
                  *(_QWORD *)(v122 + 24) = v123;
                  v124 = v138;
                  *(_OWORD *)(v122 + 32) = v139;
                  *(_OWORD *)(v122 + 48) = v124;
                  *(_QWORD *)(v122 + 64) = v118;
                  *(_QWORD *)(v122 + 72) = v119;
                  *(_BYTE *)(v122 + 80) = v115;
                  *(_BYTE *)(v122 + 81) = v116;
                  *(_BYTE *)(v122 + 82) = v117;
                  *(_DWORD *)(v122 + 83) = v160;
                  *(_BYTE *)(v122 + 87) = v161;
                  *(_BYTE *)(v122 + 88) = v112;
                  *(_BYTE *)(v122 + 89) = v135;
                  *(_BYTE *)(v122 + 90) = v137;
                  *(_BYTE *)(v122 + 91) = v112;
                  v154 = sub_1001EF044;
                  v155 = v122;
                  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
                  *((_QWORD *)&aBlock + 1) = 1107296256;
                  *(_QWORD *)&v153 = sub_100027AF8;
                  *((_QWORD *)&v153 + 1) = &unk_1004B51B8;
                  v125 = _Block_copy(&aBlock);
                  swift_retain();
                  v126 = v149;
                  static DispatchQoS.unspecified.getter(v127);
                  v159 = _swiftEmptyArrayStorage;
                  v128 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                  v129 = sub_10003F544((uint64_t *)&unk_10055B200);
                  v130 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
                  v131 = v143;
                  dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v129, v130, v143, v128);
                  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v126, v10, v125);
                  swift_unknownObjectRelease(v26);

                  _Block_release(v125);
                  (*(void (**)(char *, uint64_t))(v150 + 8))(v10, v131);
                  (*(void (**)(char *, uint64_t))(v151 + 8))(v126, v144);
                  (*(void (**)(char *, uint64_t))(v19 + 8))(v147, v18);
                  v68 = v155;
                  v69 = (uint64_t)v145;
                  goto LABEL_17;
                }
                if (v96)
                {
                  v97 = v37;
                  swift_bridgeObjectRelease(v140);
                  LODWORD(v137) = 0;
                  v80 = 0;
                  goto LABEL_50;
                }
              }
              else
              {
LABEL_47:
                if (v80)
                {
                  v97 = v37;
                  swift_bridgeObjectRelease(v140);
                  v98 = 1;
                  goto LABEL_49;
                }
              }
              v101 = objc_msgSend(objc_allocWithZone((Class)MTEpisodeLookupRequest), "init");
              v103 = v140;
              if (v140)
              {
                v104 = String._bridgeToObjectiveC()();
                *(_QWORD *)&v102 = swift_bridgeObjectRelease(v103).n128_u64[0];
              }
              else
              {
                v104 = 0;
              }
              objc_msgSend(v101, "setEpisodeGuid:", v104, v102, v132);

              if ((v138 & 1) != 0)
              {
                v105 = 0;
                goto LABEL_59;
              }
              v105 = v139;
              if ((v139 & 0x8000000000000000) == 0)
              {
LABEL_59:
                objc_msgSend(v101, "setStoreTrackId:", v105);
                v106 = objc_msgSend(v46, "podcastFeedUrl");
                objc_msgSend(v101, "setPodcastFeedUrl:", v106);

                v107 = objc_msgSend(v145, "findEpisodeWithRequest:", v101);
                if (v107
                  && (v108 = v107,
                      v109 = objc_msgSend(v107, "uuid"),
                      v108,
                      v109))
                {
                  v97 = v37;
                  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
                  v80 = v111;

                  v100 = v110;
                }
                else
                {
                  v97 = v37;

                  v100 = 0;
                  v80 = 0;
                }
                LODWORD(v137) = 1;
                v99 = &selRef_dateLabelDescriptionForEpisode_download_;
                v90 = v133;
                goto LABEL_64;
              }
              __break(1u);
              goto LABEL_66;
            }
            v83 = v146;
            v81 = v133;
          }
          else
          {
            v81 = v73;
            v132 = 0;
            v80 = 0;
            v82 = v137;
            if (!v140)
              v82 = 0;
            v137 = v82;
            v83 = v146;
          }
          v91 = (void *)objc_opt_self(MTStoreIdentifier);
          v92 = v138;
          if (objc_msgSend(v91, "isNotEmpty:", (_QWORD)v138))
          {
            *(_QWORD *)&v139 = AdamID.init(rawValue:)(v92 & ~(v92 >> 63));
            LODWORD(v138) = 0;
          }
          else
          {
            *(_QWORD *)&v139 = 0;
            LODWORD(v138) = 1;
          }
          v90 = v81;
          v46 = v142;
          goto LABEL_42;
        }

      }
    }
  }
  swift_unknownObjectRelease(v26);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v33, v18);
}

double sub_1001ED690(uint64_t a1)
{
  uint64_t v1;
  char *Strong;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(_QWORD *, __n128);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  void *v18;
  _QWORD v19[6];
  uint64_t v20[3];
  void *v21;
  char v22[24];
  char v23[24];
  _OWORD v24[5];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = &Strong[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
    v4 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_DWORD *)(v3 + 63) = 0;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;

    swift_bridgeObjectRelease(v4);
  }
  swift_beginAccess(v1, v22, 0, 0);
  v5 = swift_unknownObjectWeakLoadStrong(v1);
  if (v5)
  {
    v7 = (char *)v5;
    memset(v24, 0, 67);
    v21 = &_swiftEmptySetSingleton;
    v20[0] = v5;
    v19[2] = v24;
    v19[3] = __chkstk_darwin(v5);
    v19[4] = &v21;
    v8 = type metadata accessor for PlayingEpisodePlayStateDataSource();
    v10 = sub_100005E40((unint64_t *)&unk_1005598D8, v9, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CE03C);
    SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)(sub_1001EF104, v19, v8, v10);
    v11 = &v7[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
    swift_beginAccess(&v7[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates], v20, 0, 0);
    v12 = *(void (**)(_QWORD *, __n128))v11;
    if (*(_QWORD *)v11)
    {
      v13 = *((_QWORD *)v11 + 1);
      v14 = v21;
      sub_10002CA20((uint64_t)v12, v13);
      swift_bridgeObjectRetain(v14);
      v16 = sub_1001F9EB0(v15);
      v17 = swift_bridgeObjectRelease(v14);
      v12(v16, v17);
      sub_10002CA30((uint64_t)v12, v13);
      swift_release(v16);
    }
    v18 = v21;

    *(_QWORD *)&result = swift_bridgeObjectRelease(v18).n128_u64[0];
  }
  return result;
}

double sub_1001ED848(uint64_t a1)
{
  uint64_t v1;
  char *Strong;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(_QWORD *, __n128);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  void *v21;
  _QWORD v22[7];
  uint64_t v23[3];
  void *v24;
  char v25[24];
  char v26[24];
  char v27[24];
  _OWORD v28[5];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v27, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = &Strong[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
    v4 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_DWORD *)(v3 + 63) = 0;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;

    swift_bridgeObjectRelease(v4);
  }
  swift_beginAccess(v1, v26, 0, 0);
  v5 = swift_unknownObjectWeakLoadStrong(v1);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
    swift_retain();

    if (v7)
    {
      sub_1001EE2DC();
      swift_release(v7);
    }
  }
  swift_beginAccess(v1, v25, 0, 0);
  v8 = swift_unknownObjectWeakLoadStrong(v1);
  if (v8)
  {
    v10 = (char *)v8;
    memset(v28, 0, 67);
    v24 = &_swiftEmptySetSingleton;
    v23[0] = v8;
    v22[2] = v28;
    v22[3] = __chkstk_darwin(v8);
    v22[4] = &v24;
    v11 = type metadata accessor for PlayingEpisodePlayStateDataSource();
    v13 = sub_100005E40((unint64_t *)&unk_1005598D8, v12, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CE03C);
    SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)(sub_1001EF05C, v22, v11, v13);
    v14 = &v10[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
    swift_beginAccess(&v10[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates], v23, 0, 0);
    v15 = *(void (**)(_QWORD *, __n128))v14;
    if (*(_QWORD *)v14)
    {
      v16 = *((_QWORD *)v14 + 1);
      v17 = v24;
      sub_10002CA20((uint64_t)v15, v16);
      swift_bridgeObjectRetain(v17);
      v19 = sub_1001F9EB0(v18);
      v20 = swift_bridgeObjectRelease(v17);
      v15(v19, v20);
      sub_10002CA30((uint64_t)v15, v16);
      swift_release(v19);
    }
    v21 = v24;

    *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  }
  return result;
}

void sub_1001EDA50(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t Strong;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(_QWORD *, __n128);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  __n128 v39;
  void *v40;
  _QWORD v41[7];
  uint64_t v42;
  int v43;
  uint64_t v44[3];
  void *v45;
  char v46[24];
  char v47[24];
  char v48[24];
  _QWORD v49[6];
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  __int16 v53;
  char v54;

  v43 = a3;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[7] & 1;
  v11 = *((_BYTE *)a2 + 57) & 1;
  v12 = *((_BYTE *)a2 + 58) & 1;
  v13 = a2[8] & 1;
  v14 = *((_BYTE *)a2 + 65) & 1;
  v15 = *((_BYTE *)a2 + 66) & 1;
  v16 = a1 + 16;
  v18 = *((_DWORD *)a2 + 12);
  v17 = *((_DWORD *)a2 + 13);
  swift_beginAccess(a1 + 16, v48, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v16);
  if (Strong)
  {
    v20 = (void *)Strong;
    v21 = Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode;
    v42 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode);
    *(_QWORD *)v21 = v4;
    *(_QWORD *)(v21 + 8) = v5;
    *(_QWORD *)(v21 + 16) = v6;
    *(_QWORD *)(v21 + 24) = v7;
    *(_QWORD *)(v21 + 32) = v8;
    *(_QWORD *)(v21 + 40) = v9;
    *(_QWORD *)(v21 + 48) = v18 | ((unint64_t)v17 << 32);
    *(_QWORD *)(v21 + 56) = v10 | (v11 << 8) | (v12 << 16);
    *(_BYTE *)(v21 + 66) = v15;
    *(_WORD *)(v21 + 64) = v13 | (v14 << 8);
    sub_100198D38(a2);

    swift_bridgeObjectRelease(v42);
  }
  v42 = v10;
  if ((v43 & 1) != 0)
  {
    swift_beginAccess(v16, v49, 0, 0);
    v22 = swift_unknownObjectWeakLoadStrong(v16);
    if (v22)
    {
      v23 = (void *)v22;
      v24 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
      swift_retain();

      if (v24)
      {
        sub_1001EE1F4();
        swift_release(v24);
      }
    }
  }
  else
  {
    swift_beginAccess(v16, v47, 0, 0);
    v25 = swift_unknownObjectWeakLoadStrong(v16);
    if (v25)
    {
      v26 = (void *)v25;
      v27 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
      swift_retain();

      if (v27)
      {
        sub_1001EE2DC();
        swift_release(v27);
      }
    }
    swift_beginAccess(v16, v46, 0, 0);
    v28 = swift_unknownObjectWeakLoadStrong(v16);
    if (v28)
    {
      v29 = (char *)v28;
      v49[0] = v4;
      v49[1] = v5;
      v49[2] = v6;
      v49[3] = v7;
      v49[4] = v8;
      v49[5] = v9;
      v50 = v18;
      v51 = v17;
      v52 = v42 | ((unint64_t)v11 << 8) | ((unint64_t)v12 << 16);
      v54 = v15;
      v53 = v13 | (v14 << 8);
      v45 = &_swiftEmptySetSingleton;
      v44[0] = v28;
      v41[2] = v49;
      v41[3] = __chkstk_darwin(v28);
      v41[4] = &v45;
      v30 = type metadata accessor for PlayingEpisodePlayStateDataSource();
      v32 = sub_100005E40((unint64_t *)&unk_1005598D8, v31, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CE03C);
      SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)(sub_1001EF104, v41, v30, v32);
      v33 = &v29[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
      swift_beginAccess(&v29[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates], v44, 0, 0);
      v34 = *(void (**)(_QWORD *, __n128))v33;
      if (*(_QWORD *)v33)
      {
        v35 = *((_QWORD *)v33 + 1);
        v36 = v45;
        sub_10002CA20((uint64_t)v34, v35);
        swift_bridgeObjectRetain(v36);
        v38 = sub_1001F9EB0(v37);
        v39 = swift_bridgeObjectRelease(v36);
        v34(v38, v39);
        sub_10002CA30((uint64_t)v34, v35);
        swift_release(v38);
      }
      v40 = v45;

      swift_bridgeObjectRelease(v40);
    }
  }
}

uint64_t sub_1001EDEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v25 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  v21 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v21);
  v26 = _swiftEmptyArrayStorage;
  v13 = sub_100005E40((unint64_t *)&qword_1005521B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10003F544(&qword_100555A00);
  v15 = sub_10003AEC0((unint64_t *)&qword_1005521C0, &qword_100555A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v14, v15, v7, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x8000000100434D70, v12, v9, v6, 0);
  v17 = v22;
  *(_QWORD *)(v22 + 32) = v16;
  sub_100005EC8(0, &qword_100559918, OS_dispatch_source_ptr);
  v26 = 0;
  v18 = sub_100005E40((unint64_t *)&unk_100559920, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  dispatch thunk of OptionSet.init(rawValue:)(&v26, v1, v18);
  v19 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v3, v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v3, v1);
  result = v17;
  *(_QWORD *)(v17 + 24) = v19;
  return result;
}

uint64_t sub_1001EE144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_10003F544((uint64_t *)&unk_10055B200);
  v3 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_1001EE1F4()
{
  return sub_1001EE2F0((uint64_t)sub_1001EED98, (uint64_t)&unk_1004B50C8);
}

uint64_t sub_1001EE208(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong || (v3 = *(_BYTE *)(Strong + 16), result = swift_release(Strong), (v3 & 1) == 0))
  {
    swift_beginAccess(v1, v10, 0, 0);
    v5 = swift_weakLoadStrong(v1);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v5 + 24);
      swift_unknownObjectRetain(v7);
      swift_release(v6);
      swift_getObjectType(v7, v8);
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease(v7);
    }
    swift_beginAccess(v1, v9, 0, 0);
    result = swift_weakLoadStrong(v1);
    if (result)
    {
      *(_BYTE *)(result + 16) = 1;
      return swift_release(result);
    }
  }
  return result;
}

uint64_t sub_1001EE2DC()
{
  return sub_1001EE2F0((uint64_t)sub_1001EED90, (uint64_t)&unk_1004B50A0);
}

uint64_t sub_1001EE2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(v2 + 32);
  v12 = swift_allocObject(&unk_1004B5060, 24, 7);
  swift_weakInit(v12 + 16, v2);
  aBlock[4] = a1;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_100005E40((unint64_t *)&qword_100556BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10003F544((uint64_t *)&unk_10055B200);
  v17 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v18 = v24;
  swift_release(v12);
  return swift_release(v18);
}

uint64_t sub_1001EE4F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong || (v3 = *(unsigned __int8 *)(Strong + 16), result = swift_release(Strong), v3 == 1))
  {
    swift_beginAccess(v1, v10, 0, 0);
    v5 = swift_weakLoadStrong(v1);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v5 + 24);
      swift_unknownObjectRetain(v7);
      swift_release(v6);
      swift_getObjectType(v7, v8);
      OS_dispatch_source.suspend()();
      swift_unknownObjectRelease(v7);
    }
    swift_beginAccess(v1, v9, 0, 0);
    result = swift_weakLoadStrong(v1);
    if (result)
    {
      *(_BYTE *)(result + 16) = 0;
      return swift_release(result);
    }
  }
  return result;
}

uint64_t sub_1001EE5C4()
{
  return sub_1001EE2F0((uint64_t)sub_1001EED88, (uint64_t)&unk_1004B5078);
}

uint64_t sub_1001EE5D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    swift_unknownObjectRetain(v4);
    swift_release(v3);
    swift_getObjectType(v4, v5);
    OS_dispatch_source.cancel()();
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_1001EE648()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for PositionUpdateTimer()
{
  return objc_opt_self(_TtC8PodcastsP33_7251381704B496E880E1F9E2557F0DE119PositionUpdateTimer);
}

uint64_t destroy for PlayingEpisodeInfo(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t initializeWithCopy for PlayingEpisodeInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)((char *)a2 + 65);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for PlayingEpisodeInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a1 + 13) = *((_DWORD *)a2 + 13);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a1 + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a1 + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a1 + 65) = *((_BYTE *)a2 + 65);
  *((_BYTE *)a1 + 66) = *((_BYTE *)a2 + 66);
  return a1;
}

__n128 initializeWithTake for PlayingEpisodeInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for PlayingEpisodeInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v5 = a2[6];
  a1[5] = a2[5];
  a1[6] = v5;
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a1 + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a1 + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a1 + 65) = *((_BYTE *)a2 + 65);
  *((_BYTE *)a1 + 66) = *((_BYTE *)a2 + 66);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayingEpisodeInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 67))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayingEpisodeInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 67) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 67) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayingEpisodeInfo()
{
  return &type metadata for PlayingEpisodeInfo;
}

uint64_t sub_1001EE8F4()
{
  return sub_100005E40(&qword_1005598C8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodePlayState, (uint64_t)&protocol conformance descriptor for EpisodePlayState);
}

uint64_t sub_1001EE924(uint64_t a1, uint64_t a2)
{
  return sub_100005E40(&qword_1005598D0, a2, (uint64_t (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource, (uint64_t)&unk_1003CDFE4);
}

uint64_t sub_1001EE950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t updated;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD, uint64_t);
  char *v31;
  void (*v32)(_QWORD *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v44 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v46 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v37 - v7);
  v45 = type metadata accessor for DispatchTime(0);
  v43 = *(_QWORD *)(v45 - 8);
  v9 = __chkstk_darwin(v45);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v42 = (char *)&v37 - v12;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for PositionUpdateTimer();
  swift_allocObject(updated, 40, 7);
  v20 = sub_1001EDEA0();
  v21 = *(_QWORD *)(v20 + 24);
  v37 = v20;
  ObjectType = swift_getObjectType(v21, v22);
  v24 = swift_allocObject(&unk_1004B5218, 32, 7);
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = a2;
  aBlock[4] = sub_100029B44;
  v48 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B5230;
  v25 = _Block_copy(aBlock);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v26);
  sub_1001EE144();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v18, v15, v25, ObjectType);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
  swift_release(v48);
  v28 = swift_getObjectType(*(_QWORD *)(v20 + 24), v27);
  static DispatchTime.now()();
  *v8 = 1;
  v29 = v44;
  v30 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v44 + 104);
  v30(v8, enum case for DispatchTimeInterval.seconds(_:), v4);
  v31 = v42;
  + infix(_:_:)(v11, v8);
  v32 = *(void (**)(_QWORD *, uint64_t))(v29 + 8);
  v32(v8, v4);
  v33 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34 = v45;
  v33(v11, v45);
  *v8 = 500;
  v30(v8, enum case for DispatchTimeInterval.milliseconds(_:), v4);
  v35 = v46;
  *v46 = 0;
  v30(v35, enum case for DispatchTimeInterval.nanoseconds(_:), v4);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v31, v8, v35, v28);
  v32(v35, v4);
  v32(v8, v4);
  v33(v31, v34);
  return v37;
}

id sub_1001EECA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  _BYTE v10[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates, v10, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  sub_10002CA20(a1, a2);
  result = (id)sub_10002CA30(v6, v7);
  if (!*v5)
  {
    result = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController), "endAutomaticResponseLoading");
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
    if (v9)
    {
      swift_retain();
      sub_1001EE2DC();
      return (id)swift_release(v9);
    }
  }
  return result;
}

uint64_t sub_1001EED64()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EED88()
{
  uint64_t v0;

  return sub_1001EE5D8(v0);
}

uint64_t sub_1001EED90()
{
  uint64_t v0;

  return sub_1001EE4F0(v0);
}

uint64_t sub_1001EED98()
{
  uint64_t v0;

  return sub_1001EE208(v0);
}

uint64_t sub_1001EEDA0(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, _QWORD);
  _QWORD *v12;
  uint64_t result;
  void *v14;
  _OWORD v15[7];
  _BYTE v16[24];
  _OWORD v17[7];

  v3 = objc_msgSend(a1, "request");
  v4 = objc_opt_self(MPCPlayerRequest);
  v5 = swift_dynamicCastObjCClass(v3, v4);
  if (!v5)
  {
    swift_unknownObjectRelease(v3);
    return 1;
  }
  v6 = (void *)v5;
  v7 = NowPlayingDataProvider.shared.unsafeMutableAddressor(v5);
  swift_beginAccess(v7, v16, 0, 0);
  sub_100007A64(v7, (uint64_t)v15, &qword_1005598E8);
  if (!*(_QWORD *)&v15[0])
  {
    swift_unknownObjectRelease(v3);
    sub_100007A28((uint64_t)v15, &qword_1005598E8);
    return 1;
  }
  v17[4] = v15[4];
  v17[5] = v15[5];
  v17[6] = v15[6];
  v17[0] = v15[0];
  v17[1] = v15[1];
  v17[2] = v15[2];
  v17[3] = v15[3];
  v9 = v15[0];
  ObjectType = swift_getObjectType(*(_QWORD *)&v15[0], v8);
  v11 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v9 + 1) + 8);
  swift_unknownObjectRetain(v9);
  v12 = (_QWORD *)v11(ObjectType, *((_QWORD *)&v9 + 1));
  swift_unknownObjectRelease(v9);
  result = (uint64_t)objc_msgSend(v6, "playerPath");
  if (result)
  {
    v14 = (void *)result;
    (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v12) + 0x118))(result, a2);

    swift_unknownObjectRelease(v3);
    sub_1001EEF40((uint64_t)v17);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001EEF40(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for NowPlayingDataProvider - 1) + 8))();
  return a1;
}

uint64_t sub_1001EEF74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EEF98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1001EEFDC()
{
  uint64_t v0;

  sub_1001EC870(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_1001EEFEC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1001EF010()
{
  uint64_t v0;

  return sub_1001ED690(v0);
}

uint64_t sub_1001EF018()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 92, 7);
}

void sub_1001EF044()
{
  uint64_t v0;

  sub_1001EDA50(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), *(unsigned __int8 *)(v0 + 91));
}

double sub_1001EF054()
{
  uint64_t v0;

  return sub_1001ED848(v0);
}

void sub_1001EF05C()
{
  uint64_t *v0;

  sub_1001EB7CC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001EF068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100559900);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EF0B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EF0D4()
{
  uint64_t v0;

  return sub_1001EB38C(v0);
}

double sub_1001EF108(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  double result;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _BYTE v39[24];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  sub_1001B4C18(a2, &v40);
  v4 = v40;
  v5 = v41;
  v6 = v42;
  v7 = v43;
  v8 = a1 + 16;
  v9 = v44;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (!Strong)
    goto LABEL_11;
  v11 = Strong;
  v12 = a2;
  v34 = v7;
  v13 = *(unsigned __int8 *)(Strong + 64);
  v14 = *(_QWORD *)(Strong + 24);
  v36 = *(_QWORD *)(Strong + 32);
  v37 = *(_QWORD *)(Strong + 40);
  v35 = *(_QWORD *)(Strong + 48);
  v15 = *(_QWORD *)(Strong + 56);
  sub_1001B4BBC(v14, v36, v37, v35, v15, *(_BYTE *)(Strong + 64));
  swift_release(v11);
  if ((int)v13 <= 1)
  {
    if ((_DWORD)v13)
      v16 = 4;
    else
      v16 = v13;
    v17 = v15;
LABEL_14:
    v19 = v12;
    if (!(_DWORD)v9)
      goto LABEL_36;
    goto LABEL_15;
  }
  if ((_DWORD)v13 != 2)
  {
LABEL_11:
    sub_10033F96C();
    return result;
  }
  v17 = v15;
  if (!(v37 | v36 | v14 | v35 | v15))
  {
    v16 = 2;
    goto LABEL_14;
  }
  v18 = v37 | v36 | v35 | v15;
  v19 = v12;
  if (v14 == 1 && !v18)
  {
    v16 = 3;
    if (!(_DWORD)v9)
      goto LABEL_36;
    goto LABEL_15;
  }
  if (v18)
    v22 = 0;
  else
    v22 = v14 == 2;
  v16 = 5;
  if (!v22)
    v16 = 6;
  if ((_DWORD)v9)
  {
LABEL_15:
    if ((_DWORD)v9 == 1)
    {
      v9 = 4;
    }
    else if (v5 | *((_QWORD *)&v4 + 1) | (unint64_t)v4 | v6 | v34)
    {
      v21 = v5 | *((_QWORD *)&v4 + 1) | v6 | v34;
      if ((_QWORD)v4 != 1 || v21)
      {
        if (v21)
          v23 = 0;
        else
          v23 = (_QWORD)v4 == 2;
        if (v23)
          v9 = 5;
        else
          v9 = 6;
      }
      else
      {
        v9 = 3;
      }
    }
    else
    {
      v9 = 2;
    }
  }
LABEL_36:
  if (v16 != v9)
  {
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(76);
    v38 = v45;
    v29._object = (void *)0x8000000100434E80;
    v29._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v29);
    sub_1001B4C18(v19, &v45);
    _print_unlocked<A, B>(_:_:)(&v45, &v38, &type metadata for PresentableError, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v30._countAndFlagsBits = 0xD000000000000028;
    v30._object = (void *)0x8000000100434EB0;
    String.append(_:)(v30);
    *(_QWORD *)&v45 = v14;
    *((_QWORD *)&v45 + 1) = v36;
    v46 = v37;
    v47 = v35;
    v48 = v17;
    v49 = v13;
    _print_unlocked<A, B>(_:_:)(&v45, &v38, &type metadata for PresentableError, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v31 = *((_QWORD *)&v38 + 1);
    sub_10033F96C();
    swift_bridgeObjectRelease(v31);
    v24 = v14;
    v25 = v36;
    v26 = v37;
    v27 = v35;
    v28 = v17;
    return sub_1001B4BA8(v24, v25, v26, v27, v28, v13);
  }
  sub_1001B4C18(v19, &v45);
  if (v49 || (swift_beginAccess(v8, &v38, 0, 0), (v32 = swift_weakLoadStrong(v8)) == 0))
  {
    v24 = v14;
    v25 = v36;
    v26 = v37;
    v27 = v35;
    v28 = v17;
    return sub_1001B4BA8(v24, v25, v26, v27, v28, v13);
  }
  v33 = v32;
  sub_1001EFB88(v19);
  sub_1001B4BA8(v14, v36, v37, v35, v17, v13);
  *(_QWORD *)&result = swift_release(v33).n128_u64[0];
  return result;
}

uint64_t sub_1001EF440(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C5E0();
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_1004B5310, 24, 7);
  swift_weakInit(v14 + 16, v2);
  v15 = swift_allocObject(&unk_1004B53B0, 65, 7);
  *(_QWORD *)(v15 + 16) = v14;
  sub_1001B4C18(a1, (_OWORD *)(v15 + 24));
  aBlock[4] = sub_1001F02E4;
  v24 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B53C8;
  v16 = _Block_copy(aBlock);
  v17 = v24;
  sub_1001F02F0((uint64_t)a1);
  swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_10017F258();
  v20 = sub_10003F544((uint64_t *)&unk_10055B200);
  v21 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1001EF644(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t Strong;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void **aBlock;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  void *v51;
  double (*v52)();
  uint64_t v53;
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[24];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  sub_1001B4C18(a2, &v57);
  v4 = v57;
  v5 = v58;
  v6 = v59;
  v7 = v60;
  v47 = a1;
  v8 = a1 + 16;
  v9 = v61;
  swift_beginAccess(v8, v56, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (Strong)
  {
    v11 = *(unsigned __int8 *)(Strong + 64);
    swift_release(Strong);
    if (v11 != 255)
      sub_10033F96C();
  }
  swift_beginAccess(v8, v55, 0, 0);
  v12 = swift_weakLoadStrong(v8);
  if (v12)
  {
    v13 = v12;
    v14 = v5;
    v15 = *(_QWORD *)(v12 + 24);
    v16 = *(_QWORD *)(v12 + 32);
    v17 = v6;
    v18 = v7;
    v19 = *(_QWORD *)(v12 + 40);
    v20 = *(_QWORD *)(v12 + 48);
    v21 = *(_QWORD *)(v12 + 56);
    *(_OWORD *)(v12 + 24) = v4;
    *(_QWORD *)(v12 + 40) = v14;
    *(_QWORD *)(v12 + 48) = v17;
    *(_QWORD *)(v12 + 56) = v18;
    v22 = *(_BYTE *)(v12 + 64);
    *(_BYTE *)(v12 + 64) = v9;
    sub_1001F02F0((uint64_t)a2);
    sub_1001B4BA8(v15, v16, v19, v20, v21, v22);
    swift_release(v13);
  }
  sub_1001B4C18(a2, &v62);
  if (v66)
  {
    if (v66 != 1)
    {
      if (v64 | v65 | (unint64_t)v62 | v63 | *((_QWORD *)&v62 + 1))
      {
        v30 = v64 | v65 | v63 | *((_QWORD *)&v62 + 1);
        if ((_QWORD)v62 != 1 || v30)
        {
          if ((_QWORD)v62 != 2 || v30)
          {
            swift_beginAccess(v8, v54, 0, 0);
            v42 = swift_weakLoadStrong(v8);
            if (!v42)
              return;
            v43 = v42;
            v33 = *(void **)(v42 + 16);
            swift_unknownObjectRetain(v33);
            swift_release(v43);
            if (!v33)
              return;
            v52 = sub_1001F0294;
            v53 = v47;
            aBlock = _NSConcreteStackBlock;
            v49 = 1107296256;
            v50 = sub_100027AF8;
            v51 = &unk_1004B53F0;
            v34 = _Block_copy(&aBlock);
            v44 = v53;
            swift_retain();
            objc_msgSend(v33, "showSubscriptionRequired:", v34, swift_release(v44).n128_f64[0]);
          }
          else
          {
            swift_beginAccess(v8, v54, 0, 0);
            v39 = swift_weakLoadStrong(v8);
            if (!v39)
              return;
            v40 = v39;
            v33 = *(void **)(v39 + 16);
            swift_unknownObjectRetain(v33);
            swift_release(v40);
            if (!v33)
              return;
            v52 = sub_1001F0294;
            v53 = v47;
            aBlock = _NSConcreteStackBlock;
            v49 = 1107296256;
            v50 = sub_100027AF8;
            v51 = &unk_1004B5418;
            v34 = _Block_copy(&aBlock);
            v41 = v53;
            swift_retain();
            objc_msgSend(v33, "showEpisodeRestricted:", v34, swift_release(v41).n128_f64[0]);
          }
        }
        else
        {
          swift_beginAccess(v8, v54, 0, 0);
          v31 = swift_weakLoadStrong(v8);
          if (!v31)
            return;
          v32 = v31;
          v33 = *(void **)(v31 + 16);
          swift_unknownObjectRetain(v33);
          swift_release(v32);
          if (!v33)
            return;
          v52 = sub_1001F0294;
          v53 = v47;
          aBlock = _NSConcreteStackBlock;
          v49 = 1107296256;
          v50 = sub_100027AF8;
          v51 = &unk_1004B5468;
          v34 = _Block_copy(&aBlock);
          v35 = v53;
          swift_retain();
          objc_msgSend(v33, "showGenericAlert:", v34, swift_release(v35).n128_f64[0]);
        }
      }
      else
      {
        swift_beginAccess(v8, v54, 0, 0);
        v36 = swift_weakLoadStrong(v8);
        if (!v36)
          return;
        v37 = v36;
        v33 = *(void **)(v36 + 16);
        swift_unknownObjectRetain(v33);
        swift_release(v37);
        if (!v33)
          return;
        v52 = sub_1001F0294;
        v53 = v47;
        aBlock = _NSConcreteStackBlock;
        v49 = 1107296256;
        v50 = sub_100027AF8;
        v51 = &unk_1004B5490;
        v34 = _Block_copy(&aBlock);
        v38 = v53;
        swift_retain();
        objc_msgSend(v33, "showNoInternet:", v34, swift_release(v38).n128_f64[0]);
      }
      swift_unknownObjectRelease(v33);
      _Block_release(v34);
      return;
    }
    v23 = *((_QWORD *)&v62 + 1);
    swift_beginAccess(v8, v54, 0, 0);
    v24 = swift_weakLoadStrong(v8);
    if (v24)
    {
      v25 = v24;
      v26 = *(void **)(v24 + 16);
      swift_unknownObjectRetain(v26);
      swift_release(v25);
      if (v26)
      {
        if (v23)
          v27 = String._bridgeToObjectiveC()();
        else
          v27 = 0;
        v52 = sub_1001F0294;
        v53 = v47;
        aBlock = _NSConcreteStackBlock;
        v49 = 1107296256;
        v50 = sub_100027AF8;
        v51 = &unk_1004B5440;
        v45 = _Block_copy(&aBlock);
        v46 = v53;
        swift_retain();
        objc_msgSend(v26, "showEpisodeFeedDeleted:onDismiss:", v27, v45, swift_release(v46).n128_f64[0]);
        swift_unknownObjectRelease(v26);
        _Block_release(v45);

      }
    }
  }
  else
  {
    swift_beginAccess(v8, &aBlock, 0, 0);
    v28 = swift_weakLoadStrong(v8);
    if (v28)
    {
      v29 = v28;
      sub_1001EFB88(a2);
      swift_release(v29);
    }
  }
}

void sub_1001EFB88(__int128 *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSString v42;
  NSString v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t tableName;
  uint64_t tableName_8;
  void **aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  double (*v59)();
  _QWORD *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;

  sub_1001B4C18(a1, &v61);
  if (!v65)
  {
    v2 = (void *)*((_QWORD *)&v61 + 1);
    tableName = v61;
    tableName_8 = v1;
    v4 = v62;
    v3 = v63;
    v5 = v64;
    v6 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v4);
    v51 = v3;
    v52 = v5;
    sub_10002CA20(v3, v5);
    v7 = objc_msgSend(v6, "mainBundle");
    v8._countAndFlagsBits = 0xD000000000000015;
    v66._object = (void *)0xE000000000000000;
    v8._object = (void *)0x8000000100434DF0;
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    v66._countAndFlagsBits = 0;
    v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v66);

    v11 = sub_10003F544(&qword_1005559A0);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
    v13 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v12 + 56) = &type metadata for Int;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v12 + 32) = v13;
    static String.localizedStringWithFormat(_:_:)(v10._countAndFlagsBits, v10._object, v12);
    v50 = v14;
    swift_bridgeObjectRelease(v10._object);
    *(_QWORD *)&v15 = swift_bridgeObjectRelease(v12).n128_u64[0];
    v16 = *(_QWORD *)(v4 + 16);
    v17 = objc_msgSend(v6, "mainBundle", v15);
    if (v16 < 2)
    {
      v27._countAndFlagsBits = 0xD000000000000017;
      v68._object = (void *)0xE000000000000000;
      v27._object = (void *)0x8000000100434E10;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      v68._countAndFlagsBits = 0;
      v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v17, v28, v68);
      countAndFlagsBits = v29._countAndFlagsBits;
      object = v29._object;

      v23 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v23 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v23 + 56) = &type metadata for String;
      *(_QWORD *)(v23 + 64) = sub_10003E198();
      if (v2)
      {
        v30 = tableName;
        v25 = tableName_8;
      }
      else
      {
        v35 = objc_msgSend(v6, "mainBundle");
        v70._object = (void *)0xE000000000000000;
        v36._object = (void *)0x8000000100434E30;
        v36._countAndFlagsBits = 0xD000000000000028;
        v37._countAndFlagsBits = 0;
        v37._object = (void *)0xE000000000000000;
        v70._countAndFlagsBits = 0;
        v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)(unint64_t)tableName, (NSBundle)v35, v37, v70);
        v30 = v38._countAndFlagsBits;
        v2 = v38._object;

        v25 = tableName_8;
      }
      *(_QWORD *)(v23 + 32) = v30;
      *(_QWORD *)(v23 + 40) = v2;
    }
    else
    {
      v18._countAndFlagsBits = 0xD00000000000001ELL;
      v67._object = (void *)0xE000000000000000;
      v18._object = (void *)0x8000000100434E60;
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v67._countAndFlagsBits = 0;
      v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v67);
      countAndFlagsBits = v20._countAndFlagsBits;
      object = v20._object;

      v23 = swift_allocObject(v11, 112, 7);
      *(_OWORD *)(v23 + 16) = xmmword_1003CA220;
      v24 = *(_QWORD *)(v4 + 16) - 1;
      *(_QWORD *)(v23 + 56) = &type metadata for Int;
      *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v23 + 32) = v24;
      *(_QWORD *)(v23 + 96) = &type metadata for String;
      *(_QWORD *)(v23 + 104) = sub_10003E198();
      if (v2)
      {
        v26 = tableName;
        v25 = tableName_8;
      }
      else
      {
        v31 = objc_msgSend(v6, "mainBundle");
        v69._object = (void *)0xE000000000000000;
        v32._object = (void *)0x8000000100434E30;
        v32._countAndFlagsBits = 0xD000000000000028;
        v33._countAndFlagsBits = 0;
        v33._object = (void *)0xE000000000000000;
        v69._countAndFlagsBits = 0;
        v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)(unint64_t)tableName, (NSBundle)v31, v33, v69);
        v26 = v34._countAndFlagsBits;
        v2 = v34._object;

        v25 = tableName_8;
      }
      *(_QWORD *)(v23 + 72) = v26;
      *(_QWORD *)(v23 + 80) = v2;
    }
    static String.localizedStringWithFormat(_:_:)(countAndFlagsBits, object, v23);
    v40 = v39;
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v23);
    v41 = *(void **)(v25 + 16);
    if (v41)
    {
      swift_unknownObjectRetain(*(_QWORD *)(v25 + 16));
      v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v50);
      v43 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      v44 = swift_allocObject(&unk_1004B5310, 24, 7);
      swift_weakInit(v44 + 16, v25);
      v45 = (_QWORD *)swift_allocObject(&unk_1004B5338, 48, 7);
      v45[2] = v51;
      v45[3] = v52;
      v45[4] = v4;
      v45[5] = v44;
      v59 = sub_1001F0288;
      v60 = v45;
      aBlock = _NSConcreteStackBlock;
      v56 = 1107296256;
      v57 = sub_100027AF8;
      v58 = &unk_1004B5350;
      v46 = _Block_copy(&aBlock);
      v47 = v60;
      sub_10002CA20(v51, v52);
      swift_release(v47);
      v48 = swift_allocObject(&unk_1004B5310, 24, 7);
      swift_weakInit(v48 + 16, v25);
      v59 = sub_1001F0294;
      v60 = (_QWORD *)v48;
      aBlock = _NSConcreteStackBlock;
      v56 = 1107296256;
      v57 = sub_100027AF8;
      v58 = &unk_1004B5378;
      v49 = _Block_copy(&aBlock);
      objc_msgSend(v41, "showOrUpdateNetworkErrorAlert:body:onRetry:onDismiss:", v42, v43, v46, v49, swift_release(v60).n128_f64[0]);
      sub_10002CA30(v51, v52);
      swift_unknownObjectRelease(v41);
      _Block_release(v49);
      _Block_release(v46);

    }
    else
    {
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v40);
      sub_10002CA30(v51, v52);
      swift_bridgeObjectRelease(v50);
    }
  }
}

double sub_1001F00E4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];

  v4 = a4 + 16;
  if (a1)
    a1(a3);
  swift_beginAccess(v4, v14, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(Strong + 24);
    v9 = *(_QWORD *)(v7 + 32);
    v10 = *(_QWORD *)(v7 + 40);
    v11 = *(_QWORD *)(v7 + 48);
    v12 = *(_QWORD *)(v7 + 56);
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_QWORD *)(v7 + 56) = 0;
    v13 = *(_BYTE *)(v7 + 64);
    *(_BYTE *)(v7 + 64) = -1;
    sub_1001B4BA8(v8, v9, v10, v11, v12, v13);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

double sub_1001F0174(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(Strong + 24);
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(_QWORD *)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 48);
    v9 = *(_QWORD *)(v4 + 56);
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_QWORD *)(v4 + 56) = 0;
    v10 = *(_BYTE *)(v4 + 64);
    *(_BYTE *)(v4 + 64) = -1;
    sub_1001B4BA8(v5, v6, v7, v8, v9, v10);
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001F01F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_1001B4BA8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t sub_1001F0228()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F024C()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_1001F0288()
{
  uint64_t v0;

  return sub_1001F00E4(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

double sub_1001F0294()
{
  uint64_t v0;

  return sub_1001F0174(v0);
}

uint64_t sub_1001F02AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_1001B1EE4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject(v0, 65, 7);
}

void sub_1001F02E4()
{
  uint64_t v0;

  sub_1001EF644(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24));
}

uint64_t sub_1001F02F0(uint64_t a1)
{
  sub_1001B1E6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

char *NonFollowedShowsSyncProcessor.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t ObjectType;
  char *v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_signpost_type_t v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for OSSignposter(0);
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NonFollowedShowsSyncStorage()), "init");
  v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CloudSyncBugReporter()), "init");
  v13 = objc_allocWithZone((Class)type metadata accessor for NonFollowedShowsSyncProcessor(0));
  v14 = sub_1001F4514((uint64_t)v11, (uint64_t)v12, v13);

  ObjectType = swift_getObjectType(v0, v15);
  swift_deallocPartialClassInstance(v0, ObjectType, *(unsigned int *)((swift_isaMask & *v0) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v0) + 0x34));
  v17 = (char *)v14;
  static OSSignposter.cloudSync.getter(v17);
  v18 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 16);
  v19 = v18(v7, &v17[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID], v1);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v18(v5, v7, v1);
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    v23 = OSSignpostID.rawValue.getter(v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v21, v23, "NonFollowedShowsSyncProcessor.created", "", v22, 2u);
    swift_slowDealloc(v22, -1, -1);

    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v7, v1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
    v24(v5, v1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  }
  return v17;
}

uint64_t type metadata accessor for NonFollowedShowsSyncProcessor(uint64_t a1)
{
  uint64_t result;

  result = qword_100559A68;
  if (!qword_100559A68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NonFollowedShowsSyncProcessor);
  return result;
}

id NonFollowedShowsSyncProcessor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NonFollowedShowsSyncProcessor(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Bool __swiftcall NonFollowedShowsSyncProcessor.hasLocalChanges()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage, &v5, 0, 0);
  sub_10000A520(v1, (uint64_t)v6);
  v2 = v7;
  v3 = v8;
  sub_10003A834(v6, v7);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v2, v3);
  sub_10003D380(v6);
  return v2 & 1;
}

Swift::String_optional __swiftcall NonFollowedShowsSyncProcessor.version(forGetTransaction:key:)(MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2;
  void *v3;
  Swift::String_optional result;

  v2 = sub_1001F4648(key._countAndFlagsBits, (unint64_t)key._object);
  result.value._object = v3;
  result.value._countAndFlagsBits = v2;
  return result;
}

uint64_t NonFollowedShowsSyncProcessor.data(forSetTransaction:key:version:)(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  return sub_1001F4B34(a2, a3, a4);
}

uint64_t NonFollowedShowsSyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  return sub_1001F5530(a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1001F099C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class isa;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  os_log_type_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  _QWORD *v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  void *v61;
  uint64_t (*v62)();
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __n128 v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint8_t *v87;
  _QWORD *v88;
  uint64_t aBlock;
  _QWORD v90[2];
  void *v91;
  uint64_t (*v92)();
  _QWORD *v93;
  _BYTE v94[24];
  uint64_t v95;

  v74 = a4;
  v73 = a3;
  v5 = (_QWORD *)type metadata accessor for Logger(0);
  v81 = *(v5 - 1);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v71 - v9;
  v11 = sub_10003F544(&qword_100559A78);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v82 = (char *)&v71 - v15;
  v16 = type metadata accessor for RemoteNonFollowedShow(0);
  v83 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v86 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v80 = (char *)&v71 - v19;
  v20 = objc_msgSend(objc_allocWithZone((Class)MZKeyValueStoreNode), "init");
  isa = 0;
  if (a2 >> 60 != 15)
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setValue:", isa);

  v22 = objc_msgSend(v20, "hasData");
  if ((_DWORD)v22)
  {
    v23 = objc_msgSend(v20, "arrayValue");
    if (v23
      && (v24 = v23,
          v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8),
          v24,
          v26 = sub_10034EFCC(v25),
          swift_bridgeObjectRelease(v25),
          v26))
    {
      v27 = v26;
    }
    else
    {
      swift_bridgeObjectRelease(0);
      v27 = _swiftEmptyArrayStorage;
    }
    v45 = (uint64_t)v82;
    v44 = v83;
    v84 = v27[2];
    if (v84)
    {
      v72 = v20;
      v85 = v27;
      v46 = swift_bridgeObjectRetain(v27);
      v47 = v85;
      v48 = 0;
      v88 = _swiftEmptyArrayStorage;
      v46.n128_u64[0] = 136380675;
      v77 = v46;
      v76 = (char *)&type metadata for Any + 8;
      v87 = (uint8_t *)v16;
      v79 = v10;
      v78 = v14;
      do
      {
        v49 = swift_bridgeObjectRetain(v47[v48 + 4]);
        RemoteNonFollowedShow.init(dictionary:)(v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v14, 0, 1, v16);
        sub_1001F5CF4((uint64_t)v14, v45);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v16) == 1)
        {
          sub_1001F5C44(v45);
        }
        else
        {
          v50 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
          v51 = v80;
          v50(v80, v45, v16);
          v50(v86, (uint64_t)v51, v16);
          if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) != 0)
            v52 = (unint64_t)v88;
          else
            v52 = sub_10027BBE0(0, v88[2] + 1, 1, (unint64_t)v88);
          v54 = *(_QWORD *)(v52 + 16);
          v53 = *(_QWORD *)(v52 + 24);
          if (v54 >= v53 >> 1)
            v52 = sub_10027BBE0(v53 > 1, v54 + 1, 1, v52);
          *(_QWORD *)(v52 + 16) = v54 + 1;
          v55 = v83;
          v56 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
          v88 = (_QWORD *)v52;
          v57 = v52 + v56 + *(_QWORD *)(v83 + 72) * v54;
          v16 = (uint64_t)v87;
          v50((char *)v57, (uint64_t)v86, (uint64_t)v87);
          v44 = v55;
        }
        ++v48;
        v47 = v85;
      }
      while (v84 != v48);
      swift_bridgeObjectRelease_n(v85, 2);
      v20 = v72;
      v58 = v88;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v58 = _swiftEmptyArrayStorage;
    }
    v59 = v75;
    v60 = &v75[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
    swift_beginAccess(&v75[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage], v94, 0, 0);
    sub_10000A520((uint64_t)v60, (uint64_t)&aBlock);
    v61 = v91;
    v62 = v92;
    sub_10003A834(&aBlock, (uint64_t)v91);
    v63 = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v62 + 1))(v61, v62);
    sub_10003D380(&aBlock);
    v64 = swift_allocObject(&unk_1004B5540, 24, 7);
    swift_unknownObjectWeakInit(v64 + 16, v59);
    v65 = (_QWORD *)swift_allocObject(&unk_1004B5568, 56, 7);
    v65[2] = v64;
    v65[3] = v58;
    v66 = v73;
    v65[4] = v63;
    v65[5] = v66;
    v67 = v74;
    v65[6] = v74;
    v92 = sub_1001F5CE4;
    v93 = v65;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v90[0] = 1107296256;
    v90[1] = sub_100027AF8;
    v91 = &unk_1004B5580;
    v68 = _Block_copy(&aBlock);
    v69 = v93;
    swift_bridgeObjectRetain(v67);
    v70 = v63;
    swift_release(v69);
    objc_msgSend(v70, "performBlockAndWaitWithSave:", v68);
    _Block_release(v68);

  }
  else
  {
    static Logger.cloudSync.getter(v22);
    v28 = static os_log_type_t.default.getter();
    v29 = v75;
    v30 = Logger.logObject.getter(v29);
    v31 = v28;
    if (os_log_type_enabled(v30, v28))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v88 = v5;
      v34 = v33;
      *(_DWORD *)v32 = 136315138;
      v95 = v33;
      v87 = v32 + 4;
      v35 = (uint64_t)&v29[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
      swift_beginAccess(&v29[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage], v94, 0, 0);
      sub_10000A520(v35, (uint64_t)&aBlock);
      v72 = v20;
      v37 = v91;
      v36 = v92;
      sub_10003A834(&aBlock, (uint64_t)v91);
      v38 = (*((uint64_t (**)(void *, uint64_t (*)()))v36 + 8))(v37, v36);
      v40 = v39;
      sub_10003D380(&aBlock);
      v41 = Optional<A>.description.getter(v38, v40);
      v43 = v42;
      swift_bridgeObjectRelease(v40);
      aBlock = sub_10003D274(v41, v43, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v90, v87, v32 + 12);

      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[NonFollowedShows] Empty remote Implicit Follows key for current version %s. Nothing to merge.", v32, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(char *, _QWORD *))(v81 + 8))(v8, v88);
    }
    else
    {

      (*(void (**)(char *, _QWORD *))(v81 + 8))(v8, v5);
    }
  }
}

uint64_t sub_1001F1284(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_signpost_type_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char *v30;
  uint8_t *v31;
  os_signpost_id_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a4;
  v43 = a1;
  v44 = a2;
  v6 = type metadata accessor for OSSignpostError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v41 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for OSSignposter(0);
  v17 = __chkstk_darwin(v16);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  if (v21)
  {
    v36 = v11;
    v37 = v18;
    v38 = v17;
    v39 = v4;
    v40 = a3;
    swift_retain();
    v23 = static OSSignposter.cloudSync.getter(v22);
    v24 = OSSignposter.logHandle.getter(v23);
    v25 = OSSignpostIntervalState.signpostID.getter();
    v26 = static os_signpost_type_t.end.getter(v25);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)(v27);
      swift_release(v21);
      if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v28 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        v28 = "";
      }
      v29 = v36;
      v30 = v41;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v15, v10);
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      v32 = OSSignpostID.rawValue.getter(v31);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, v26, v32, "NonFollowedShowsSyncProcessor.finish", v28, v31, 2u);
      swift_slowDealloc(v31, -1, -1);

      v33 = *(void (**)(char *, uint64_t))(v29 + 8);
      v33(v15, v10);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v38);
      swift_release(v21);
      v33(v30, v10);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v10);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v38);
      swift_release(v21);
    }
    a3 = v40;
  }
  result = sub_1001F41DC(v43, v44);
  if (a3)
    return a3(0);
  return result;
}

uint64_t NonFollowedShowsSyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  return sub_1001F573C(a4, a5, a6, a7, a8, a9);
}

uint64_t NonFollowedShowsSyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  return sub_1001F592C(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1001F1868(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_signpost_type_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  uint8_t *v29;
  os_signpost_id_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  char *v36;
  uint64_t v37;

  v37 = a2;
  v4 = type metadata accessor for OSSignpostError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for OSSignposter(0);
  result = __chkstk_darwin(v14);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  if (v19)
  {
    v32 = v9;
    v33 = v16;
    v34 = result;
    v35 = a1;
    v20 = swift_retain(v19);
    v21 = static OSSignposter.cloudSync.getter(v20);
    v22 = OSSignposter.logHandle.getter(v21);
    v23 = OSSignpostIntervalState.signpostID.getter();
    v24 = static os_signpost_type_t.end.getter(v23);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v25 = swift_retain(v19);
      checkForErrorAndConsumeState(state:)(v25);
      swift_release(v19);
      if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v26 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v26 = "";
      }
      v27 = v32;
      v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v36, v13, v8);
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v24, v30, "NonFollowedShowsSyncProcessor.reschedule", v26, v29, 2u);
      swift_slowDealloc(v29, -1, -1);

      v31 = *(void (**)(char *, uint64_t))(v27 + 8);
      v31(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      swift_release(v19);
      result = ((uint64_t (*)(char *, uint64_t))v31)(v28, v8);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      result = swift_release(v19);
    }
    a1 = v35;
  }
  if (a1)
    return a1(1);
  return result;
}

Swift::Void __swiftcall NonFollowedShowsSyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)(MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *, uint64_t, uint64_t, __n128);
  __n128 v9;
  _BYTE v10[24];

  object = didProcessResponseWithDomainVersion.value._object;
  countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  v5 = v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v5, v10, 33, 0);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  sub_100038DEC(v5, v6);
  v8 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, __n128))(v7 + 96);
  v9 = swift_bridgeObjectRetain(object);
  v8(countAndFlagsBits, object, v6, v7, v9);
  swift_endAccess(v10);
}

uint64_t sub_1001F1E0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  os_log_type_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  void *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  NSObject *v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  NSObject *v90;
  uint64_t v91;
  char v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[16];
  uint64_t v98;
  uint64_t v99;
  char v100[32];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v82 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v82 - v18;
  a1 += 16;
  swift_beginAccess(a1, v100, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (!result)
    return result;
  v88 = v11;
  v89 = a3;
  v86 = v14;
  v90 = result;
  static Logger.cloudSync.getter(result);
  v21 = static os_log_type_t.default.getter();
  v22 = swift_bridgeObjectRetain_n(a2, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = v21;
  v25 = os_log_type_enabled(v23, v21);
  v84 = a4;
  v85 = a5;
  if (v25)
  {
    v87 = v10;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v96 = v27;
    *(_DWORD *)v26 = 136380675;
    v83 = v26 + 4;
    v28 = v17;
    v29 = type metadata accessor for RemoteNonFollowedShow(0);
    swift_bridgeObjectRetain(a2);
    v31 = Array.description.getter(v30, v29);
    v33 = v32;
    swift_bridgeObjectRelease(a2);
    v34 = v31;
    v17 = v28;
    v94 = sub_10003D274(v34, v33, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v83, v26 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    v35 = v33;
    v10 = v87;
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[NonFollowedShows] Inserting or updating Implicit Follows for remote list %{private}s.", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v36 = *(void (**)(char *, uint64_t))(v88 + 8);
  v36(v19, v10);
  v37 = v89;
  v38 = v90;
  sub_1001F24B4(a2, v89);
  v40 = v39;
  v41 = (uint64_t)v38 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess((char *)v38 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage, &v94, 0, 0);
  sub_10000A520(v41, (uint64_t)&v96);
  v42 = v98;
  v43 = v99;
  sub_10003A834(&v96, v98);
  v44 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v43 + 128))(v40, v37, v42, v43);
  sub_10003D380(&v96);
  if (v44)
  {
    if ((unint64_t)v44 >> 62)
    {
      if (v44 >= 0)
        v72 = v44 & 0xFFFFFFFFFFFFFF8;
      else
        v72 = v44;
      swift_bridgeObjectRetain(v44);
      v73 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v44);
      if (v73)
      {
        v87 = v10;
        v45 = *(_QWORD *)(v40 + 16);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRetain(v44);
        v46 = _CocoaArrayWrapper.endIndex.getter(v72);
        swift_bridgeObjectRelease(v44);
        goto LABEL_9;
      }
    }
    else if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v87 = v10;
      v45 = *(_QWORD *)(v40 + 16);
      swift_bridgeObjectRelease(v40);
      v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
      sub_1001F3BAC(v45, v46, v84, v85);
      static Logger.cloudSync.getter(v47);
      v48 = static os_log_type_t.default.getter();
      swift_bridgeObjectRetain_n(v44, 2);
      v49 = v38;
      v50 = v17;
      v51 = Logger.logObject.getter(v49);
      if (os_log_type_enabled(v51, v48))
      {
        v52 = swift_slowAlloc(22, -1);
        v89 = (void *)swift_slowAlloc(64, -1);
        v93 = v89;
        *(_DWORD *)v52 = 136315395;
        sub_10000A520(v41, (uint64_t)&v96);
        LODWORD(v88) = v48;
        v53 = v98;
        v54 = v99;
        sub_10003A834(&v96, v98);
        v55 = *(uint64_t (**)(uint64_t, uint64_t))(v54 + 40);
        v90 = v50;
        v56 = v55(v53, v54);
        v58 = v57;
        sub_10003D380(&v96);
        v91 = v56;
        v92 = v58 & 1;
        v59 = sub_10003F544((uint64_t *)&unk_100559A80);
        v60 = String.init<A>(describing:)(&v91, v59);
        v62 = v61;
        v96 = sub_10003D274(v60, v61, (uint64_t *)&v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v52 + 4, v52 + 12);

        swift_bridgeObjectRelease(v62);
        *(_WORD *)(v52 + 12) = 2081;
        v63 = sub_1001F5D3C();
        swift_bridgeObjectRetain(v44);
        v65 = Array.description.getter(v64, v63);
        v67 = v66;
        swift_bridgeObjectRelease(v44);
        v96 = sub_10003D274(v65, v67, (uint64_t *)&v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v52 + 14, v52 + 22);
        swift_bridgeObjectRelease_n(v44, 2);
        swift_bridgeObjectRelease(v67);
        _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v88, "[NonFollowedShows] Removing Implicit Follows only local and before timestamp %s: %{private}s.", (uint8_t *)v52, 0x16u);
        v68 = v89;
        swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v52, -1, -1);

        v69 = v90;
      }
      else
      {

        swift_bridgeObjectRelease_n(v44, 2);
        v69 = v50;
      }
      v36((char *)v69, v87);
      sub_10000A520(v41, (uint64_t)&v96);
      v70 = v98;
      v71 = v99;
      sub_10003A834(&v96, v98);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 152))(v44, v70, v71);

      swift_bridgeObjectRelease(v44);
      return sub_10003D380(&v96);
    }
    swift_bridgeObjectRelease(v44);
  }
  swift_bridgeObjectRelease(v40);
  v74 = v86;
  static Logger.cloudSync.getter(v75);
  v76 = static os_log_type_t.default.getter();
  v77 = v76;
  v78 = Logger.logObject.getter(v76);
  v79 = v77;
  if (os_log_type_enabled(v78, v77))
  {
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "[NonFollowedShows] We didn't find any local Implicit Follow which is not present in cloud and which is older than last sync date. We are done.", v80, 2u);
    swift_slowDealloc(v80, -1, -1);
    v81 = v38;
  }
  else
  {
    v81 = v78;
    v78 = v38;
  }

  return ((uint64_t (*)(char *, uint64_t))v36)(v74, v10);
}

void sub_1001F24B4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, __n128);
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  NSString v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  void (*v61)(char *, char *, uint64_t);
  os_log_type_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 v69;
  id v70;
  uint64_t v71;
  char *v72;
  os_log_type_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, __n128);
  unint64_t v84;
  unint64_t v85;
  __n128 v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __n128 v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  char *v110;
  id v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 v124;
  void *v125;
  void *v126;
  id v127;
  uint64_t v128;
  char *v129;
  os_log_type_t v130;
  id v131;
  NSObject *v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  double v145;
  id v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  __n128 v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  double v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  double v166;
  id v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  __n128 v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  double v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  char *v195;
  id v196;
  NSObject *v197;
  os_log_type_t v198;
  _BOOL4 v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  double v210;
  id v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  __n128 v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  double v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  __n128 v232;
  char *v233;
  char *v234;
  __n128 v235;
  uint64_t *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  id v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t (*v251)(char *, char *, uint64_t);
  __n128 v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  char v265[16];

  v244 = a2;
  v4 = type metadata accessor for Logger(0);
  v256 = *(_QWORD *)(v4 - 8);
  v257 = v4;
  v5 = __chkstk_darwin(v4);
  v243 = (char *)&v228 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v228 - v8;
  v10 = __chkstk_darwin(v7);
  v238 = (char *)&v228 - v11;
  v12 = __chkstk_darwin(v10);
  v230 = (char *)&v228 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v228 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v228 - v17;
  v247 = type metadata accessor for RemoteNonFollowedShow(0);
  v19 = *(_QWORD *)(v247 - 8);
  v20 = __chkstk_darwin(v247);
  v242 = (char *)&v228 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v239 = (char *)&v228 - v23;
  v24 = __chkstk_darwin(v22);
  __chkstk_darwin(v24);
  v27 = (char *)&v228 - v26;
  v250 = *(_QWORD *)(a1 + 16);
  if (!v250)
    return;
  v237 = v25;
  v28 = v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  v249 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v229 = a1;
  swift_bridgeObjectRetain(a1);
  v240 = v28;
  v29 = swift_beginAccess(v28, v265, 0, 0);
  v30 = 0;
  v248 = *(_QWORD *)(v19 + 72);
  v236 = &v260;
  v233 = (char *)&v259 + 4;
  v246 = _swiftEmptyArrayStorage;
  v251 = *(uint64_t (**)(char *, char *, uint64_t))(v19 + 16);
  v29.n128_u64[0] = 136315394;
  v235 = v29;
  v234 = (char *)&type metadata for Any + 8;
  v29.n128_u64[0] = 136381955;
  v232 = v29;
  v29.n128_u64[0] = 136315138;
  v252 = v29;
  v254 = v18;
  v31 = v247;
  v253 = v27;
  v241 = v9;
  v231 = v16;
  v245 = v19;
  while (2)
  {
    v255 = v30;
    v33 = v251;
    v34 = v251(v27, (char *)(v249 + v248 * v30), v31);
    v35 = RemoteNonFollowedShow.prioritizedIDs.getter(v34);
    v259 = v35;
    v36 = sub_10003F544(&qword_100559A98);
    v37 = sub_1001F5D78();
    v39 = Collection.isNotEmpty.getter(v36, v37, v38);
    if ((v39 & 1) == 0)
    {
      v56 = v243;
      swift_bridgeObjectRelease(v35);
      static Logger.cloudSync.getter(v57);
      v58 = v242;
      v59 = v33(v242, v27, v31);
      v60 = Logger.logObject.getter(v59);
      v61 = (void (*)(char *, char *, uint64_t))v33;
      v62 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v62))
      {
        v63 = swift_slowAlloc(12, -1);
        v64 = (id)swift_slowAlloc(32, -1);
        v259 = (uint64_t)v64;
        *(_DWORD *)v63 = v252.n128_u32[0];
        v65 = v239;
        v61(v239, v58, v31);
        v66 = String.init<A>(describing:)(v65, v31);
        v68 = v67;
        *(_QWORD *)(v63 + 4) = sub_10003D274(v66, v67, &v259);
        v69 = swift_bridgeObjectRelease(v68);
        v32 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
        v32(v58, v31, v69);
        _os_log_impl((void *)&_mh_execute_header, v60, v62, "[NonFollowedShows] Remote Implicit Follow received without any meaningful podcast ID. There is nothing we can do with this show: %s", (uint8_t *)v63, 0xCu);
        swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
        v70 = v64;
        v18 = v254;
        swift_slowDealloc(v70, -1, -1);
        v71 = v63;
        v27 = v253;
        swift_slowDealloc(v71, -1, -1);
      }
      else
      {
        v32 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
        ((void (*)(char *, uint64_t))v32)(v58, v31);
      }

      (*(void (**)(char *, uint64_t))(v256 + 8))(v56, v257);
      goto LABEL_5;
    }
    v40 = *(_QWORD *)(v35 + 16);
    if (!v40)
    {
LABEL_23:
      v72 = v238;
      static Logger.cloudSync.getter(v39);
      v73 = static os_log_type_t.default.getter();
      v74 = v27;
      v75 = v237;
      v76 = v247;
      v33(v237, v74, v247);
      swift_bridgeObjectRetain(v35);
      v78 = Logger.logObject.getter(v77);
      v79 = v73;
      if (os_log_type_enabled(v78, v73))
      {
        v80 = swift_slowAlloc(22, -1);
        v258 = (id)swift_slowAlloc(64, -1);
        v259 = (uint64_t)v258;
        *(_DWORD *)v80 = v235.n128_u32[0];
        swift_bridgeObjectRetain(v35);
        v82 = Array.description.getter(v81, &type metadata for PodcastIdentifier);
        v83 = (void (*)(char *, uint64_t, uint64_t, __n128))v33;
        v85 = v84;
        swift_bridgeObjectRelease(v35);
        *(_QWORD *)(v80 + 4) = sub_10003D274(v82, v85, &v259);
        swift_bridgeObjectRelease_n(v35, 2);
        v86 = swift_bridgeObjectRelease(v85);
        *(_WORD *)(v80 + 12) = 2080;
        v87 = v239;
        v83(v239, (uint64_t)v75, v76, v86);
        v88 = String.init<A>(describing:)(v87, v76);
        v90 = v89;
        *(_QWORD *)(v80 + 14) = sub_10003D274(v88, v89, &v259);
        v91 = swift_bridgeObjectRelease(v90);
        v92 = v76;
        v32 = *(void (**)(char *, uint64_t, __n128))(v245 + 8);
        v32(v75, v92, v91);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "[NonFollowedShows] Received Implicit Follow from sync which doesn't exist in this device, we must insert it as Implicitly Followed: IDs %s, remote show: %s", (uint8_t *)v80, 0x16u);
        v93 = v258;
        swift_arrayDestroy(v258, 2, v234);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v80, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v35, 2);
        v94 = v76;
        v32 = *(void (**)(char *, uint64_t, __n128))(v245 + 8);
        ((void (*)(char *, uint64_t))v32)(v75, v94);
      }

      v95 = *(void (**)(char *, uint64_t))(v256 + 8);
      v95(v72, v257);
      sub_10000A520(v240, (uint64_t)&v259);
      v96 = v262;
      v97 = v263;
      sub_10003A834(&v259, v262);
      v27 = v253;
      v98 = (void *)(*(uint64_t (**)(char *, id, uint64_t, uint64_t))(v97 + 136))(v253, v244, v96, v97);
      sub_10003D380(&v259);
      v99 = objc_msgSend(v98, "uuid");
      v100 = v241;
      if (v99)
      {
        v101 = v99;
        v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
        v104 = v103;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v246);
        v19 = v245;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          v106 = v246;
        else
          v106 = sub_10027AE00(0, v246[2] + 1, 1, v246);
        v108 = v106[2];
        v107 = v106[3];
        if (v108 >= v107 >> 1)
          v106 = sub_10027AE00((_QWORD *)(v107 > 1), v108 + 1, 1, v106);
        v106[2] = v108 + 1;
        v246 = v106;
        v109 = &v106[2 * v108];
        v109[4] = v102;
        v109[5] = v104;

        v18 = v254;
      }
      else
      {
        static Logger.cloudSync.getter(0);
        v110 = v100;
        v111 = v98;
        v112 = Logger.logObject.getter(v111);
        v113 = static os_log_type_t.error.getter(v112);
        v114 = os_log_type_enabled(v112, v113);
        v18 = v254;
        v19 = v245;
        if (v114)
        {
          v115 = swift_slowAlloc(50, -1);
          v116 = swift_slowAlloc(96, -1);
          v264 = (void *)v116;
          *(_DWORD *)v115 = v232.n128_u32[0];
          v117 = objc_msgSend(v111, "title");
          if (v117)
          {
            v118 = v117;
            v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
            v121 = v120;

          }
          else
          {
            v119 = 0;
            v121 = 0;
          }
          v142 = Optional<A>.description.getter(v119, v121);
          v144 = v143;
          swift_bridgeObjectRelease(v121);
          v259 = sub_10003D274(v142, v144, (uint64_t *)&v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v236, v115 + 4, v115 + 12);

          *(_QWORD *)&v145 = swift_bridgeObjectRelease(v144).n128_u64[0];
          *(_WORD *)(v115 + 12) = 2080;
          v146 = objc_msgSend(v111, "uuid", v145);
          if (v146)
          {
            v147 = v146;
            v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
            v150 = v149;

          }
          else
          {
            v148 = 0;
            v150 = 0;
          }
          v151 = Optional<A>.description.getter(v148, v150);
          v153 = v152;
          swift_bridgeObjectRelease(v150);
          v259 = sub_10003D274(v151, v153, (uint64_t *)&v264);
          v154 = v236;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v236, v115 + 14, v115 + 22);

          v155 = swift_bridgeObjectRelease(v153);
          *(_WORD *)(v115 + 22) = 2081;
          v259 = MTPodcast.adamId.getter(v155);
          LOBYTE(v260) = v156 & 1;
          v157 = sub_10003F544(&qword_10055B760);
          v158 = String.init<A>(describing:)(&v259, v157);
          v160 = v159;
          v259 = sub_10003D274(v158, v159, (uint64_t *)&v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v154, v115 + 24, v115 + 32);

          *(_QWORD *)&v161 = swift_bridgeObjectRelease(v160).n128_u64[0];
          *(_WORD *)(v115 + 32) = 1024;
          LODWORD(v160) = objc_msgSend(v111, "subscribed", v161);

          LODWORD(v259) = v160;
          v162 = v233;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v233, v115 + 34, v115 + 38);

          *(_WORD *)(v115 + 38) = 1024;
          LODWORD(v160) = objc_msgSend(v111, "hidden");

          LODWORD(v259) = v160;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v162, v115 + 40, v115 + 44);

          *(_WORD *)(v115 + 44) = 1024;
          LODWORD(v160) = objc_msgSend(v111, "isImplicitlyFollowed");

          LODWORD(v259) = v160;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v162, v115 + 46, v115 + 50);

          _os_log_impl((void *)&_mh_execute_header, v112, v113, "[NonFollowedShows] New inserted podcast has no uuid: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.", (uint8_t *)v115, 0x32u);
          swift_arrayDestroy(v116, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v116, -1, -1);
          swift_slowDealloc(v115, -1, -1);

          (*(void (**)(char *, uint64_t))(v256 + 8))(v241, v257);
          v32 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
          v27 = v253;
          v18 = v254;
        }
        else
        {

          v95(v110, v257);
        }
      }
      goto LABEL_68;
    }
    swift_bridgeObjectRetain(v35);
    v258 = v244;
    v41 = 0;
    v42 = (_BYTE *)(v35 + 48);
    while (1)
    {
      v45 = *((_QWORD *)v42 - 2);
      if (*v42)
      {
        v46 = *((_QWORD *)v42 - 1);
        if (*v42 == 1)
        {
          sub_1001F5DC4(*((_QWORD *)v42 - 2), *((_QWORD *)v42 - 1), 1u);
          swift_bridgeObjectRetain(v35);
          v47 = sub_1001F5DC4(v45, v46, 1u);
          static Logger.cloudSync.getter(v47);
          swift_bridgeObjectRetain(v46);
          v49 = Logger.logObject.getter(v48);
          v50 = static os_log_type_t.error.getter(v49);
          if (os_log_type_enabled(v49, v50))
          {
            v51 = swift_slowAlloc(12, -1);
            v52 = (id)swift_slowAlloc(32, -1);
            v259 = (uint64_t)v52;
            *(_DWORD *)v51 = v252.n128_u32[0];
            swift_bridgeObjectRetain(v46);
            *(_QWORD *)(v51 + 4) = sub_10003D274(v45, v46, &v259);
            sub_1001C2808(v45, v46, 1u);
            sub_1001C2808(v45, v46, 1u);
            swift_bridgeObjectRelease(v46);
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "[NonFollowedShows] A remote podcast identified by a local ID as the UUID does not make any sense at all. Offending UUID: %s", (uint8_t *)v51, 0xCu);
            swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
            v53 = v52;
            v18 = v254;
            swift_slowDealloc(v53, -1, -1);
            v54 = v51;
            v27 = v253;
            swift_slowDealloc(v54, -1, -1);

          }
          else
          {

            sub_1001C2808(v45, v46, 1u);
            sub_1001C2808(v45, v46, 1u);
          }
          (*(void (**)(char *, uint64_t))(v256 + 8))(v18, v257);
          sub_1001C2808(v45, v46, 1u);
          swift_bridgeObjectRelease(v35);
        }
        else
        {
          swift_bridgeObjectRetain(v35);
          sub_1001F5DC4(v45, v46, 2u);
          v43 = String._bridgeToObjectiveC()();
          v44 = objc_msgSend(v258, "podcastForFeedUrl:", v43);

          sub_1001C2808(v45, v46, 2u);
          swift_bridgeObjectRelease(v35);
          if (v44)
            break;
        }
        goto LABEL_10;
      }
      v55 = objc_msgSend(v258, "podcastForStoreId:", *((_QWORD *)v42 - 2));

      if (v55)
        break;
LABEL_10:
      ++v41;
      v42 += 24;
      if (v40 == v41)
        goto LABEL_22;
    }
    if (v40 == v41)
    {
LABEL_22:

      swift_bridgeObjectRelease(v35);
      v33 = v251;
      goto LABEL_23;
    }
    if (v41 >= *(_QWORD *)(v35 + 16))
    {
      __break(1u);
    }
    else
    {
      v122 = *((_QWORD *)v42 - 2);
      v123 = *((_QWORD *)v42 - 1);
      v124 = *v42;
      v259 = v122;
      v260 = v123;
      v261 = v124;
      sub_1001F5DC4(v122, v123, v124);
      v125 = v258;
      sub_1001F3F6C(&v259, v258, &v264);
      sub_1001C2808(v122, v123, v124);
      v126 = v264;
      if (v264)
      {

        v127 = v126;
        v128 = swift_bridgeObjectRelease_n(v35, 2);
        v129 = v231;
        static Logger.cloudSync.getter(v128);
        v130 = static os_log_type_t.default.getter();
        v131 = v127;
        v132 = Logger.logObject.getter(v131);
        v133 = os_log_type_enabled(v132, v130);
        v19 = v245;
        if (v133)
        {
          v134 = swift_slowAlloc(50, -1);
          v135 = swift_slowAlloc(96, -1);
          v264 = (void *)v135;
          *(_DWORD *)v134 = v232.n128_u32[0];
          v136 = objc_msgSend(v131, "title");
          if (v136)
          {
            v137 = v136;
            v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
            v140 = v139;

          }
          else
          {
            v138 = 0;
            v140 = 0;
          }
          v163 = Optional<A>.description.getter(v138, v140);
          v165 = v164;
          swift_bridgeObjectRelease(v140);
          v259 = sub_10003D274(v163, v165, (uint64_t *)&v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v236, v134 + 4, v134 + 12);

          *(_QWORD *)&v166 = swift_bridgeObjectRelease(v165).n128_u64[0];
          *(_WORD *)(v134 + 12) = 2080;
          v167 = objc_msgSend(v131, "uuid", v166);
          if (v167)
          {
            v168 = v167;
            v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
            v171 = v170;

          }
          else
          {
            v169 = 0;
            v171 = 0;
          }
          v172 = Optional<A>.description.getter(v169, v171);
          v174 = v173;
          swift_bridgeObjectRelease(v171);
          v259 = sub_10003D274(v172, v174, (uint64_t *)&v264);
          v175 = v236;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v236, v134 + 14, v134 + 22);

          v176 = swift_bridgeObjectRelease(v174);
          *(_WORD *)(v134 + 22) = 2081;
          v259 = MTPodcast.adamId.getter(v176);
          LOBYTE(v260) = v177 & 1;
          v178 = sub_10003F544(&qword_10055B760);
          v179 = String.init<A>(describing:)(&v259, v178);
          v181 = v180;
          v259 = sub_10003D274(v179, v180, (uint64_t *)&v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v175, v134 + 24, v134 + 32);

          *(_QWORD *)&v182 = swift_bridgeObjectRelease(v181).n128_u64[0];
          *(_WORD *)(v134 + 32) = 1024;
          LODWORD(v181) = objc_msgSend(v131, "subscribed", v182);

          LODWORD(v259) = v181;
          v183 = v233;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v233, v134 + 34, v134 + 38);

          *(_WORD *)(v134 + 38) = 1024;
          LODWORD(v181) = objc_msgSend(v131, "hidden");

          LODWORD(v259) = v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v183, v134 + 40, v134 + 44);

          *(_WORD *)(v134 + 44) = 1024;
          LODWORD(v181) = objc_msgSend(v131, "isImplicitlyFollowed");

          LODWORD(v259) = v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v183, v134 + 46, v134 + 50);

          _os_log_impl((void *)&_mh_execute_header, v132, v130, "[NonFollowedShows] Upgrade to Implicitly Followed if needed from sync already existing local podcast: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.", (uint8_t *)v134, 0x32u);
          swift_arrayDestroy(v135, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v135, -1, -1);
          swift_slowDealloc(v134, -1, -1);

          v141 = *(void (**)(char *, uint64_t))(v256 + 8);
          v141(v231, v257);
          v27 = v253;
        }
        else
        {

          v141 = *(void (**)(char *, uint64_t))(v256 + 8);
          v141(v129, v257);
        }
        sub_10000A520(v240, (uint64_t)&v259);
        v184 = v262;
        v185 = v263;
        sub_10003A834(&v259, v262);
        (*(void (**)(id, char *, uint64_t, uint64_t))(v185 + 144))(v131, v27, v184, v185);
        sub_10003D380(&v259);
        v186 = objc_msgSend(v131, "uuid");
        if (v186)
        {
          v187 = v186;
          v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
          v190 = v189;

          if ((swift_isUniquelyReferenced_nonNull_native(v246) & 1) != 0)
            v191 = v246;
          else
            v191 = sub_10027AE00(0, v246[2] + 1, 1, v246);
          v193 = v191[2];
          v192 = v191[3];
          if (v193 >= v192 >> 1)
            v191 = sub_10027AE00((_QWORD *)(v192 > 1), v193 + 1, 1, v191);
          v191[2] = v193 + 1;
          v246 = v191;
          v194 = &v191[2 * v193];
          v194[4] = v188;
          v194[5] = v190;

          v32 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
          v18 = v254;
        }
        else
        {
          v195 = v230;
          static Logger.cloudSync.getter(0);
          v196 = v131;
          v197 = Logger.logObject.getter(v196);
          v198 = static os_log_type_t.error.getter(v197);
          v199 = os_log_type_enabled(v197, v198);
          v18 = v254;
          if (v199)
          {
            v200 = swift_slowAlloc(50, -1);
            v201 = swift_slowAlloc(96, -1);
            v264 = (void *)v201;
            *(_DWORD *)v200 = v232.n128_u32[0];
            v202 = objc_msgSend(v196, "title");
            if (v202)
            {
              v203 = v202;
              v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
              v206 = v205;

            }
            else
            {
              v204 = 0;
              v206 = 0;
            }
            v207 = Optional<A>.description.getter(v204, v206);
            v209 = v208;
            swift_bridgeObjectRelease(v206);
            v259 = sub_10003D274(v207, v209, (uint64_t *)&v264);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v236, v200 + 4, v200 + 12);

            *(_QWORD *)&v210 = swift_bridgeObjectRelease(v209).n128_u64[0];
            *(_WORD *)(v200 + 12) = 2080;
            v211 = objc_msgSend(v196, "uuid", v210);
            if (v211)
            {
              v212 = v211;
              v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
              v215 = v214;

            }
            else
            {
              v213 = 0;
              v215 = 0;
            }
            v216 = Optional<A>.description.getter(v213, v215);
            v218 = v217;
            swift_bridgeObjectRelease(v215);
            v259 = sub_10003D274(v216, v218, (uint64_t *)&v264);
            v219 = v236;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v236, v200 + 14, v200 + 22);

            v220 = swift_bridgeObjectRelease(v218);
            *(_WORD *)(v200 + 22) = 2081;
            v259 = MTPodcast.adamId.getter(v220);
            LOBYTE(v260) = v221 & 1;
            v222 = sub_10003F544(&qword_10055B760);
            v223 = String.init<A>(describing:)(&v259, v222);
            v225 = v224;
            v259 = sub_10003D274(v223, v224, (uint64_t *)&v264);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v219, v200 + 24, v200 + 32);

            *(_QWORD *)&v226 = swift_bridgeObjectRelease(v225).n128_u64[0];
            *(_WORD *)(v200 + 32) = 1024;
            LODWORD(v225) = objc_msgSend(v196, "subscribed", v226);

            LODWORD(v259) = v225;
            v227 = v233;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v233, v200 + 34, v200 + 38);

            *(_WORD *)(v200 + 38) = 1024;
            LODWORD(v225) = objc_msgSend(v196, "hidden");

            LODWORD(v259) = v225;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v227, v200 + 40, v200 + 44);

            *(_WORD *)(v200 + 44) = 1024;
            LODWORD(v225) = objc_msgSend(v196, "isImplicitlyFollowed");

            LODWORD(v259) = v225;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v227, v200 + 46, v200 + 50);

            _os_log_impl((void *)&_mh_execute_header, v197, v198, "[NonFollowedShows] Existing local podcast has no uuid: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.", (uint8_t *)v200, 0x32u);
            swift_arrayDestroy(v201, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v201, -1, -1);
            swift_slowDealloc(v200, -1, -1);

            (*(void (**)(char *, uint64_t))(v256 + 8))(v230, v257);
            v27 = v253;
            v18 = v254;
          }
          else
          {

            v141(v195, v257);
          }
          v32 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
        }
LABEL_68:
        v31 = v247;
LABEL_5:
        v30 = v255 + 1;
        ((void (*)(char *, uint64_t))v32)(v27, v31);
        if (v30 == v250)
        {
          swift_bridgeObjectRelease(v229);
          return;
        }
        continue;
      }
    }
    break;
  }
  __break(1u);
}

void sub_1001F3BAC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  void *v25;
  NSString v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  unint64_t v33;
  Class isa;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38[184];

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v35 - v16;
  if (a1 || a2 < 10)
  {
    v27 = static Logger.cloudSync.getter(v15);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      *(_DWORD *)v30 = 134218240;
      v36 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2048;
      v36 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v30 + 14, v30 + 22);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%ld non followed shows added from cloud, %ld non-followed-shows removed locally.", (uint8_t *)v30, 0x16u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {
    v18 = static Logger.cloudSync.getter(v15);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (_DWORD *)swift_slowAlloc(22, -1);
      v35 = a3;
      v22 = a2;
      v23 = v21;
      *v21 = 134218240;
      v36 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 1, v21 + 3);
      *((_WORD *)v23 + 6) = 2048;
      v36 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, (char *)v23 + 14, (char *)v23 + 22);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[NonFollowedShows] Big library removal detected remoteNonFollowedShowsCount = %ld, localNonFollowedShowsToDeleteCount = %ld", (uint8_t *)v23, 0x16u);
      v24 = v23;
      a2 = v22;
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    v25 = *(void **)(v5 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter);
    if (a4)
      v26 = String._bridgeToObjectiveC()();
    else
      v26 = 0;
    v31 = sub_10003F544(&qword_100559A90);
    inited = swift_initStackObject(v31, v38);
    *(_OWORD *)(inited + 16) = xmmword_1003CA220;
    v36 = 0xD00000000000001BLL;
    v37 = 0x8000000100434F90;
    AnyHashable.init<A>(_:)(&v36, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 72) = 0;
    v36 = 0xD000000000000022;
    v37 = 0x8000000100434FB0;
    AnyHashable.init<A>(_:)(&v36, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 168) = &type metadata for Int;
    *(_QWORD *)(inited + 144) = a2;
    v33 = sub_10013842C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v25, "reportNonFollowedShowsSyncIssue:version:userInfo:", 1, v26, isa, swift_bridgeObjectRelease(v33).n128_f64[0]);

  }
}

void sub_1001F3F6C(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    v12 = a1[1];
    if (v11 == 1)
    {
      swift_bridgeObjectRetain(v12);
      static Logger.cloudSync.getter(v13);
      swift_bridgeObjectRetain(v12);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter(v15);
      if (os_log_type_enabled(v15, v16))
      {
        v22 = a3;
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v24 = v21;
        *(_DWORD *)v17 = 136315138;
        swift_bridgeObjectRetain(v12);
        v23 = sub_10003D274(v10, v12, &v24);
        a3 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v17 + 4, v17 + 12);
        sub_1001C2808(v10, v12, 1u);
        sub_1001C2808(v10, v12, 1u);
        swift_bridgeObjectRelease(v12);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[NonFollowedShows] A remote podcast identified by a local ID as the UUID does not make any sense at all. Offending UUID: %s", v17, 0xCu);
        v18 = v21;
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        sub_1001C2808(v10, v12, 1u);
        sub_1001C2808(v10, v12, 1u);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v19 = 0;
    }
    else
    {
      v20 = String._bridgeToObjectiveC()();
      v19 = objc_msgSend(a2, "podcastForFeedUrl:", v20);

    }
  }
  else
  {
    v19 = objc_msgSend(a2, "podcastForStoreId:", *a1);
  }
  *a3 = v19;
}

uint64_t sub_1001F41DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Date.init()(v12);
  v16 = Date.timeIntervalSinceReferenceDate.getter(v15);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  static Logger.cloudSync.getter(v17);
  LOBYTE(v10) = static os_log_type_t.default.getter();
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = v10;
  if (os_log_type_enabled(v19, (os_log_type_t)v10))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(32, -1);
    v44 = v3;
    v23 = v22;
    v46[0] = v22;
    *(_DWORD *)v21 = 136315394;
    v43 = v6;
    swift_bridgeObjectRetain(a2);
    v24 = Optional<A>.description.getter(a1, a2);
    v42 = a1;
    v25 = v24;
    v27 = v26;
    swift_bridgeObjectRelease(a2);
    v45 = sub_10003D274(v25, v27, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v21 + 12) = 2048;
    v45 = *(_QWORD *)&v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v21 + 14, v21 + 22);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[NonFollowedShows] Bumping NonFollowedShowsSync version: %s, nonFollowedShowsLastSyncTimestamp: %f, isNonFollowedShowsSyncDirty = false.", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    v3 = v44;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    v30 = v42;
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v43);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v30 = a1;
  }
  v31 = v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage, v46, 33, 0);
  v32 = *(_QWORD *)(v31 + 24);
  v33 = *(_QWORD *)(v31 + 32);
  sub_100038DEC(v31, v32);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v33 + 72);
  v35 = swift_bridgeObjectRetain(a2);
  v34(v30, a2, v32, v33, v35);
  v36 = *(_QWORD *)(v31 + 24);
  v37 = *(_QWORD *)(v31 + 32);
  sub_100038DEC(v31, v36);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v37 + 24))(0, v36, v37);
  v38 = *(_QWORD *)(v31 + 24);
  v39 = *(_QWORD *)(v31 + 32);
  sub_100038DEC(v31, v38);
  (*(void (**)(double, _QWORD, uint64_t, uint64_t))(v39 + 48))(COERCE_DOUBLE(*(_QWORD *)&v16), 0, v38, v39);
  return swift_endAccess(v46);
}

id sub_1001F4514(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  uint64_t v16;
  objc_super v17;
  _QWORD v18[5];

  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[3] = type metadata accessor for NonFollowedShowsSyncStorage();
  v18[4] = &protocol witness table for NonFollowedShowsSyncStorage;
  v18[0] = a1;
  v10 = a3;
  v11 = static OSSignposter.cloudSync.getter(v10);
  v12 = OSSignposter.logHandle.getter(v11);
  OSSignpostID.init(log:)(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState] = 0;
  sub_10000A520((uint64_t)v18, (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage]);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter] = a2;
  swift_unknownObjectRetain(a2);

  v13 = (objc_class *)type metadata accessor for NonFollowedShowsSyncProcessor(0);
  v17.receiver = v10;
  v17.super_class = v13;
  v14 = objc_msgSendSuper2(&v17, "init");
  sub_10003D380(v18);
  return v14;
}

uint64_t sub_1001F4648(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  char v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_signpost_id_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  v51 = a1;
  v5 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v49 - v13;
  v15 = type metadata accessor for OSSignposter(0);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignposter.cloudSync.getter(v16);
  v52 = v9;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v58(v14, v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID, v8);
  v19 = swift_bridgeObjectRetain_n(a2, 2);
  v20 = OSSignposter.logHandle.getter(v19);
  v50 = static os_signpost_type_t.begin.getter(v20);
  v21 = OS_os_log.signpostsEnabled.getter();
  v55 = v7;
  if ((v21 & 1) != 0)
  {
    v58(v12, (uint64_t)v14, v8);
    v22 = swift_slowAlloc(12, -1);
    v49 = v2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v62[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    v60 = sub_10003D274(v51, a2, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 4, v23 + 12);
    v25 = swift_bridgeObjectRelease_n(a2, 3);
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v50, v26, "NonFollowedShowsSyncProcessor.GET", "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v27 = v24;
    v7 = v55;
    swift_slowDealloc(v27, -1, -1);
    v28 = v23;
    v3 = v49;
    swift_slowDealloc(v28, -1, -1);

    v29 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v8);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    v29 = v52;
  }
  v58(v12, (uint64_t)v14, v8);
  v30 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = OSSignpostIntervalState.init(id:isOpen:)(v12, 1);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v8);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v54);
  v32 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState) = v31;
  swift_release(v32);
  v33 = v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage, &v60, 0, 0);
  sub_10000A520(v33, (uint64_t)v62);
  v34 = v63;
  v35 = v64;
  sub_10003A834(v62, v63);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
  v38 = v37;
  v39 = sub_10003D380(v62);
  static Logger.cloudSync.getter(v39);
  LOBYTE(v35) = static os_log_type_t.default.getter();
  v40 = swift_bridgeObjectRetain_n(v38, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = v35;
  if (os_log_type_enabled(v41, (os_log_type_t)v35))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v62[0] = v44;
    *(_DWORD *)v43 = 136315138;
    swift_bridgeObjectRetain(v38);
    v45 = Optional<A>.description.getter(v36, v38);
    v47 = v46;
    swift_bridgeObjectRelease(v38);
    v59 = sub_10003D274(v45, v47, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease_n(v38, 2);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "[NonFollowedShows] Version for Get transaction: %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  }
  else
  {

    swift_bridgeObjectRelease_n(v38, 2);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v57);
  }
  return v36;
}

uint64_t sub_1001F4B34(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  char v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_signpost_id_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  os_log_type_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  char v67;
  char v68;
  id v69;
  id v70;
  _QWORD *v71;
  Class isa;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSString v90;
  unsigned __int8 *v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  _BYTE v95[4];
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  void (*v106)(_BYTE *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[3];
  uint64_t v111;
  uint64_t v112;

  v100 = a1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v105 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v95[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v95[-v14];
  v16 = type metadata accessor for OSSignposter(0);
  v102 = *(_QWORD *)(v16 - 8);
  v103 = v16;
  v17 = __chkstk_darwin(v16);
  v19 = &v95[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static OSSignposter.cloudSync.getter(v17);
  v104 = v3;
  v101 = v10;
  v106 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v106(v15, v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID, v9);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = OSSignposter.logHandle.getter(v20);
  v96 = static os_signpost_type_t.begin.getter(v21);
  v22 = OS_os_log.signpostsEnabled.getter();
  v98 = v6;
  v99 = a3;
  v97 = v7;
  if ((v22 & 1) != 0)
  {
    v106(v13, (uint64_t)v15, v9);
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v110[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    v108 = sub_10003D274(v100, a2, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v23 + 4, v23 + 12);
    v25 = swift_bridgeObjectRelease_n(a2, 3);
    v26 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v96, v26, "NonFollowedShowsSyncProcessor.SET", "%s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v27 = v101;
    (*(void (**)(_BYTE *, uint64_t))(v101 + 8))(v13, v9);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    v27 = v101;
  }
  v106(v13, (uint64_t)v15, v9);
  v28 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v15, v9);
  (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v19, v103);
  v30 = v104;
  v31 = *(_QWORD *)(v104 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState);
  *(_QWORD *)(v104 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState) = v29;
  swift_release(v31);
  v32 = v30 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v30 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage, &v108, 0, 0);
  sub_10000A520(v32, (uint64_t)v110);
  v33 = v111;
  v34 = v112;
  sub_10003A834(v110, v111);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 120))(v33, v34);
  v36 = sub_10003D380(v110);
  v37 = v105;
  if (!*(_QWORD *)(v35 + 16))
  {
    sub_10000A520(v32, (uint64_t)v110);
    v55 = v111;
    v56 = v112;
    sub_10003A834(v110, v111);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v55, v56);
    if (!v58)
    {
      v36 = sub_10003D380(v110);
      goto LABEL_5;
    }
    v59 = v57;
    v60 = v58;
    result = sub_10003D380(v110);
    v62 = HIBYTE(v60) & 0xF;
    v63 = v59 & 0xFFFFFFFFFFFFLL;
    if ((v60 & 0x2000000000000000) != 0)
      v64 = HIBYTE(v60) & 0xF;
    else
      v64 = v59 & 0xFFFFFFFFFFFFLL;
    if (!v64)
    {
      swift_bridgeObjectRelease(v60);
      goto LABEL_5;
    }
    if ((v60 & 0x1000000000000000) != 0)
    {
      v66 = sub_1002D6014(v59, v60, 10);
      v68 = v94;
      goto LABEL_60;
    }
    if ((v60 & 0x2000000000000000) == 0)
    {
      if ((v59 & 0x1000000000000000) != 0)
        v65 = (unsigned __int8 *)((v60 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v65 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v59, v60);
      v66 = (uint64_t)sub_1002D6000(v65, v63, 10);
      v68 = v67 & 1;
LABEL_60:
      swift_bridgeObjectRelease(v60);
      if ((v68 & 1) == 0 && v66 >= 11)
      {
        v85 = *(void **)(v30 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter);
        sub_10000A520(v32, (uint64_t)v110);
        v86 = v111;
        v87 = v112;
        sub_10003A834(v110, v111);
        (*(void (**)(uint64_t, uint64_t))(v87 + 64))(v86, v87);
        if (v88)
        {
          v89 = v88;
          v90 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v89);
        }
        else
        {
          v90 = 0;
        }
        sub_10003D380(v110);
        objc_msgSend(v85, "reportNonFollowedShowsSyncIssue:version:userInfo:", 0, v90, 0);

      }
      goto LABEL_5;
    }
    v110[0] = v59;
    v110[1] = v60 & 0xFFFFFFFFFFFFFFLL;
    if (v59 == 43)
    {
      if (!v62)
        goto LABEL_76;
      if (v62 == 1 || (BYTE1(v59) - 48) > 9u)
        goto LABEL_47;
      v66 = (BYTE1(v59) - 48);
      if (v62 != 2)
      {
        if ((BYTE2(v59) - 48) > 9u)
          goto LABEL_47;
        v66 = 10 * (BYTE1(v59) - 48) + (BYTE2(v59) - 48);
        v76 = v62 - 3;
        if (v76)
        {
          v77 = (unsigned __int8 *)v110 + 3;
          while (1)
          {
            v78 = *v77 - 48;
            if (v78 > 9)
              goto LABEL_47;
            v79 = 10 * v66;
            if ((unsigned __int128)(v66 * (__int128)10) >> 64 != (10 * v66) >> 63)
              goto LABEL_47;
            v66 = v79 + v78;
            if (__OFADD__(v79, v78))
              goto LABEL_47;
            v68 = 0;
            ++v77;
            if (!--v76)
              goto LABEL_60;
          }
        }
      }
    }
    else
    {
      if (v59 == 45)
      {
        if (v62)
        {
          if (v62 != 1 && (BYTE1(v59) - 48) <= 9u)
          {
            if (v62 == 2)
            {
              v68 = 0;
              v66 = -(uint64_t)(BYTE1(v59) - 48);
              goto LABEL_60;
            }
            if ((BYTE2(v59) - 48) <= 9u)
            {
              v66 = -10 * (BYTE1(v59) - 48) - (BYTE2(v59) - 48);
              v84 = v62 - 3;
              if (!v84)
                goto LABEL_59;
              v91 = (unsigned __int8 *)v110 + 3;
              while (1)
              {
                v92 = *v91 - 48;
                if (v92 > 9)
                  break;
                v93 = 10 * v66;
                if ((unsigned __int128)(v66 * (__int128)10) >> 64 != (10 * v66) >> 63)
                  break;
                v66 = v93 - v92;
                if (__OFSUB__(v93, v92))
                  break;
                v68 = 0;
                ++v91;
                if (!--v84)
                  goto LABEL_60;
              }
            }
          }
LABEL_47:
          v66 = 0;
          v68 = 1;
          goto LABEL_60;
        }
        __break(1u);
LABEL_76:
        __break(1u);
        return result;
      }
      if (!v62 || (v59 - 48) > 9u)
        goto LABEL_47;
      v66 = (v59 - 48);
      if (v62 != 1)
      {
        if ((BYTE1(v59) - 48) > 9u)
          goto LABEL_47;
        v66 = 10 * (v59 - 48) + (BYTE1(v59) - 48);
        v80 = v62 - 2;
        if (v80)
        {
          v81 = (unsigned __int8 *)v110 + 2;
          while (1)
          {
            v82 = *v81 - 48;
            if (v82 > 9)
              goto LABEL_47;
            v83 = 10 * v66;
            if ((unsigned __int128)(v66 * (__int128)10) >> 64 != (10 * v66) >> 63)
              goto LABEL_47;
            v66 = v83 + v82;
            if (__OFADD__(v83, v82))
              goto LABEL_47;
            v68 = 0;
            ++v81;
            if (!--v80)
              goto LABEL_60;
          }
        }
      }
    }
LABEL_59:
    v68 = 0;
    goto LABEL_60;
  }
LABEL_5:
  static Logger.cloudSync.getter(v36);
  v38 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n(a2, 2);
  v39 = swift_bridgeObjectRetain_n(v35, 2);
  v40 = Logger.logObject.getter(v39);
  if (os_log_type_enabled(v40, v38))
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v110[0] = v42;
    *(_DWORD *)v41 = 136315394;
    swift_bridgeObjectRetain(v35);
    v43 = sub_10003F544(&qword_1005549E0);
    v44 = Array.description.getter(v35, v43);
    v45 = v32;
    v47 = v46;
    swift_bridgeObjectRelease(v35);
    v107 = sub_10003D274(v44, v47, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v35, 2);
    v48 = v47;
    v32 = v45;
    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v41 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v107 = sub_10003D274(v100, a2, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v40, v38, "[NonFollowedShows] Providing data for SET transaction. implicitlyFollowedShows: %s, key: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v105, v98);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(v35, 2);
    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v37, v98);
  }
  v49 = v99;
  sub_10000A520(v32, (uint64_t)v110);
  v50 = v111;
  v51 = v112;
  sub_10003A834(v110, v111);
  (*(void (**)(uint64_t, uint64_t))(v51 + 64))(v50, v51);
  if (v52)
  {
    v53 = v52;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
  }
  else
  {
    v54 = 0;
  }
  sub_10003D380(v110);
  v69 = v54;
  *v49 = v54;
  v70 = objc_msgSend(objc_allocWithZone((Class)MZKeyValueStoreNode), "init");
  v71 = sub_100179088(v35);
  swift_bridgeObjectRelease(v35);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v70, "setArrayValue:", isa, swift_bridgeObjectRelease(v71).n128_f64[0]);

  v73 = objc_msgSend(v70, "value");
  if (v73)
  {
    v74 = v73;
    v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);

  }
  else
  {

    return 0;
  }
  return v75;
}

uint64_t sub_1001F5530(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = v8;
  v35 = a5;
  v36 = a6;
  v32 = a3;
  v33 = a1;
  v34 = a2;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v15);
  v18 = static os_log_type_t.default.getter();
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v20 = Logger.logObject.getter(v19);
  if (os_log_type_enabled(v20, v18))
  {
    v29 = a7;
    v21 = swift_slowAlloc(12, -1);
    v31 = v9;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v30 = a8;
    v24 = v23;
    v38 = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(a4);
    v37 = sub_10003D274(v32, a4, &v38);
    a7 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v18, "[NonFollowedShows] Updating local cache after GET transaction for key %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    a8 = v30;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v27 = v35;
  v26 = v36;
  sub_1001F099C(v33, v34, v35, v36);
  return sub_1001F1284(v27, v26, a7, a8);
}

uint64_t sub_1001F573C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  os_log_type_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = v6;
  v29 = a3;
  v30 = a4;
  v28 = a1;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v13);
  v16 = static os_log_type_t.default.getter();
  v17 = swift_bridgeObjectRetain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  if (os_log_type_enabled(v18, v16))
  {
    v25 = a5;
    v19 = swift_slowAlloc(12, -1);
    v26 = a6;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v27 = v7;
    v22 = v21;
    v32 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v31 = sub_10003D274(v28, a2, &v32);
    a5 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v16, "[NonFollowedShows] Successful SET transaction for key %s, marking everything as synced and finishing normally.", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v20;
    a6 = v26;
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return sub_1001F1284(v29, v30, a5, a6);
}

uint64_t sub_1001F592C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];

  v9 = v8;
  v40 = a2;
  v41 = a5;
  v37 = a3;
  v39 = a1;
  v38 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v38 - 8);
  v15 = __chkstk_darwin(v38);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v15);
  v18 = static os_log_type_t.default.getter();
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v20 = Logger.logObject.getter(v19);
  if (os_log_type_enabled(v20, v18))
  {
    v35 = a8;
    v21 = swift_slowAlloc(12, -1);
    v36 = a6;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v34 = a7;
    v24 = v23;
    v43[0] = v23;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(a4);
    v42 = sub_10003D274(v37, a4, v43);
    a8 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v18, "[NonFollowedShows] Failure on SET transaction for key %s, Bookkeeper copy has diverged from local copy, we must merge both.", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    a7 = v34;
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    a6 = v36;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v38);
  v27 = v41;
  sub_1001F099C(v39, v40, v41, a6);
  sub_1001F1868(a7, a8);
  v28 = v9 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess(v9 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage, v43, 33, 0);
  v29 = *(_QWORD *)(v28 + 24);
  v30 = *(_QWORD *)(v28 + 32);
  sub_100038DEC(v28, v29);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v30 + 72);
  v32 = swift_bridgeObjectRetain(a6);
  v31(v27, a6, v29, v30, v32);
  return swift_endAccess(v43);
}

uint64_t sub_1001F5B90()
{
  return type metadata accessor for NonFollowedShowsSyncProcessor(0);
}

uint64_t sub_1001F5B98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = &unk_1003CE148;
  result = type metadata accessor for OSSignpostID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1003CE160;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F5C20()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F5C44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100559A78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F5C84()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F5CA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001F5CE4()
{
  uint64_t v0;

  return sub_1001F1E0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1001F5CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100559A78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F5D3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100553810;
  if (!qword_100553810)
  {
    v1 = objc_opt_self(MTPodcast);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100553810);
  }
  return result;
}

unint64_t sub_1001F5D78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100559AA0;
  if (!qword_100559AA0)
  {
    v1 = sub_10003CA40(&qword_100559A98);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100559AA0);
  }
  return result;
}

uint64_t sub_1001F5DC4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 <= 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1001F5E78()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1001F5E9C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  void *object;
  id v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  NSString v29;
  id v30;
  NSString v31;
  void *v32;
  id v33;
  _QWORD *v34;
  id v35;
  id v36;
  NSString v37;
  void *v38;
  id v39;
  _QWORD aBlock[5];
  _QWORD *v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;

  v5 = (void *)objc_opt_self(NSBundle);
  v6 = objc_msgSend(v5, "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000018;
  v46._object = (void *)0x8000000100435090;
  v7._object = (void *)0x8000000100433DD0;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v46._countAndFlagsBits = 0xD000000000000014;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v46);

  v10 = sub_10003F544(&qword_1005559A0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA200;
  v12 = objc_msgSend(a1, "title");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10003E198();
  if (v16)
    v17 = v14;
  else
    v17 = 0;
  if (v16)
    v18 = v16;
  else
    v18 = 0xE000000000000000;
  *(_QWORD *)(v11 + 32) = v17;
  *(_QWORD *)(v11 + 40) = v18;
  String.init(format:_:)(v9._countAndFlagsBits, v9._object, v11);
  v20 = v19;
  v21 = objc_msgSend(v5, "mainBundle", swift_bridgeObjectRelease(v9._object).n128_f64[0]);
  v47._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0x6C65636E6143;
  v22._object = (void *)0xE600000000000000;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v47._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v47)._object;

  v25 = objc_msgSend(v5, "mainBundle");
  v48._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x53206574656C6544;
  v26._object = (void *)0xEE006E6F69746174;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v48._countAndFlagsBits = 0;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v48)._object;

  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v30 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v29, 0, 1);

  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v32 = (void *)objc_opt_self(UIAlertAction);
  v33 = objc_msgSend(v32, "actionWithTitle:style:handler:", v31, 1, 0);

  objc_msgSend(v30, "addAction:", v33);
  v34 = (_QWORD *)swift_allocObject(&unk_1004B55E0, 48, 7);
  v34[2] = a2;
  v34[3] = a1;
  v34[4] = a3;
  v34[5] = a4;
  v35 = a2;
  v36 = a1;
  swift_retain();
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  aBlock[4] = sub_1001F629C;
  v45 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AC13C;
  aBlock[3] = &unk_1004B55F8;
  v38 = _Block_copy(aBlock);
  swift_release(v45);
  v39 = objc_msgSend(v32, "actionWithTitle:style:handler:", v37, 2, v38);
  _Block_release(v38);

  objc_msgSend(v30, "addAction:", v39);
  return v30;
}

uint64_t sub_1001F6268()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F629C()
{
  uint64_t v0;

  return (*(uint64_t (**)(id))(v0 + 32))(objc_msgSend(*(id *)(v0 + 16), "deletePlaylist:", *(_QWORD *)(v0 + 24)));
}

uint64_t sub_1001F62CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v4 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v5 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v5 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  *(_QWORD *)(v5 + 40) = v6;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v10, a1, a2);
  if (v11)
  {
    sub_10002099C(&v10, (uint64_t)v12);
    v7 = v13;
    v8 = v14;
    sub_10003A834(v12, v13);
    *(_QWORD *)&v10 = sub_1001F62CC(v7, v8);
    sub_100172C68(v5);
    v5 = v10;
    sub_10003D380(v12);
  }
  else
  {
    sub_1001F63B0((uint64_t)&v10);
  }
  return v5;
}

uint64_t sub_1001F63B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_100559AA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1001F63F0(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSURL *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v21;

  v2 = v1;
  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v2;
  v7 = v2[2];
  v8 = v2[4];
  v9 = objc_allocWithZone((Class)CLSContext);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "initWithType:identifier:title:", v6, v10, v11, swift_bridgeObjectRelease(v8).n128_f64[0]);

  objc_msgSend(v12, "setAssignable:", *((unsigned __int8 *)v2 + 40));
  objc_msgSend(v12, "setDisplayOrder:", v2[6]);
  v13 = type metadata accessor for CLSContextMetadata(0);
  sub_100036A44((uint64_t)v2 + *(int *)(v13 + 36), (uint64_t)v5);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v5, 1, v14) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    v17 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v14);
  }
  objc_msgSend(v12, "setUniversalLinkURL:", v17);

  if ((a1 & 1) != 0)
  {
    v19 = (void *)(*(uint64_t (**)(void))((char *)v2 + *(int *)(v13 + 40)))();
    objc_msgSend(v12, "setThumbnail:", v19);

  }
  return v12;
}

uint64_t type metadata accessor for CLSContextMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_100559B08;
  if (!qword_100559B08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CLSContextMetadata);
  return result;
}

_QWORD *sub_1001F6604(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v8 = a2[2];
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    v9 = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    v10 = a3[9];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 32) = v9;
    v13 = type metadata accessor for URL(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v14 + 48);
    swift_bridgeObjectRetain(v8);
    v16 = swift_bridgeObjectRetain(v9);
    if (v15(v12, 1, v13, v16))
    {
      v17 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v19 = a3[10];
    v20 = a3[11];
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    *(_QWORD *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    v24 = a3[12];
    v25 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)((char *)v4 + v24) = v25;
    swift_retain();
    swift_bridgeObjectRetain(v25);
  }
  return v4;
}

uint64_t sub_1001F6768(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v4 = a1 + a2[9];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)(a1 + a2[10] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t sub_1001F6800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = a3[9];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 32) = v8;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v13 + 48);
  swift_bridgeObjectRetain(v7);
  v15 = swift_bridgeObjectRetain(v8);
  if (v14(v11, 1, v12, v15))
  {
    v16 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v17 = a3[10];
  v18 = a3[11];
  v19 = (_QWORD *)(a1 + v17);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v22 = a3[12];
  v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_retain();
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t sub_1001F6938(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = a3[9];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[10];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  v23 = v20[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release(v23);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v24 = a3[12];
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_1001F6AEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1001F6BF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = a3[9];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = a3[10];
  v19 = *(_QWORD *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  swift_release(v19);
  v20 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_1001F6D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F6D80);
}

uint64_t sub_1001F6D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1001F6E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F6E0C);
}

uint64_t sub_1001F6E0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

void sub_1001F6E84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1003CE1C8;
  v4[2] = &unk_1003CE1C8;
  v4[3] = &unk_1003CE1E0;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000048DC(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = (char *)&value witness table for () + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = &unk_1003CE1F8;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

char *sub_1001F6F2C(void *a1, void *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  objc_class *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  NSString v39;
  void *v40;
  void *v41;
  id v42;
  char *v43;
  uint64_t v44;
  NSString v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  objc_super v60;
  _QWORD *v61;

  v58 = a1;
  v59 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v56 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v55 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v57 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_previouslyPlayingEpisodes] = 0;
  v12 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController;
  v13 = objc_allocWithZone((Class)MPRequestResponseController);
  v14 = a3;
  *(_QWORD *)&a3[v12] = objc_msgSend(v13, "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer] = 0;
  v15 = &v14[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *(_DWORD *)(v15 + 63) = 0;
  v54 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue;
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v16);
  v61 = _swiftEmptyArrayStorage;
  v17 = sub_100026844((unint64_t *)&qword_1005521B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v52 = v17;
  v18 = sub_10003F544(&qword_100555A00);
  v51 = v18;
  v19 = sub_10002F9C8((unint64_t *)&qword_1005521C0, &qword_100555A00, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = v18;
  v21 = v6;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v20, v19, v6, v17);
  v22 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v23 = v55;
  v56 = *(_QWORD *)(v56 + 104);
  ((void (*)(char *, _QWORD, uint64_t))v56)(v55, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000042, 0x80000001004350B0, v11, v8, v23, 0);
  *(_QWORD *)&v14[v54] = v24;
  v25 = &v14[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v54 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_accessQueue;
  v26 = sub_10003F544(&qword_100559B78);
  v27 = swift_allocObject(v26, ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(_QWORD *)(v57 + 72), *(unsigned __int8 *)(v57 + 80) | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1003CA200;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v61 = (_QWORD *)v27;
  v28 = dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v51, v19, v21, v52);
  static DispatchQoS.unspecified.getter(v28);
  ((void (*)(char *, uint64_t, uint64_t))v56)(v23, v22, v53);
  v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100435100, v11, v8, v23, 0);
  *(_QWORD *)&v14[v54] = v29;
  v30 = v58;
  v31 = v59;
  *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerController] = v58;
  *(_QWORD *)&v14[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_episodeLookupUtil] = v31;
  v32 = v30;
  v33 = v31;

  v34 = (objc_class *)type metadata accessor for PlayingEpisodePlayStateDataSource();
  v60.receiver = v14;
  v60.super_class = v34;
  v35 = objc_msgSendSuper2(&v60, "init");
  v36 = objc_allocWithZone((Class)MPCPlayerRequest);
  v37 = v35;
  v38 = objc_msgSend(v36, "init");
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v38, "setLabel:", v39);

  sub_100005EC8(0, (unint64_t *)&unk_100559B80, MPModelPodcastEpisode_ptr);
  v40 = (void *)static MPModelPodcastEpisode.propertiesRequiredForPopulatingPlayerItem()();
  objc_msgSend(v38, "setPlayingItemProperties:", v40);

  v41 = (void *)static MPModelPodcastEpisode.propertiesRequiredForPopulatingPlayerItem()();
  objc_msgSend(v38, "setQueueItemProperties:", v41);

  v42 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v43 = (char *)v37;
  v44 = *(_QWORD *)(PlayerNotification_PlayerPathDidChange.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v44);
  v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v44);
  objc_msgSend(v42, "addObserver:selector:name:object:", v43, "playerPathDidChange", v45, 0);

  v46 = *(void **)&v43[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController];
  objc_msgSend(v46, "setDelegate:", v43);
  objc_msgSend(v46, "setRequest:", v38);
  v47 = swift_allocObject(&unk_1004B5630, 24, 7);
  swift_unknownObjectWeakInit(v47 + 16, v43);
  swift_retain(v47);
  v48 = sub_1001EE950((uint64_t)sub_1001F7510, v47);
  swift_release_n(v47, 2);

  v49 = *(_QWORD *)&v43[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer];
  *(_QWORD *)&v43[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer] = v48;
  swift_release(v49);
  return v43;
}

uint64_t sub_1001F74EC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F7510()
{
  uint64_t v0;

  return sub_1001EB17C(v0);
}

uint64_t property wrapper backing initializer of FeedIngesterProvider.downloadManager(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_10003F544((uint64_t *)&unk_100559B90);
  return Synchronized.init(wrappedValue:)(&v3, v1);
}

uint64_t FeedIngesterProvider.downloadManager.getter()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v4;
  _BYTE v5[24];

  swift_beginAccess(v0 + 56, v5, 0, 0);
  v1 = *(_QWORD *)(v0 + 56);
  swift_retain();
  sub_10003F544((uint64_t *)&unk_100559B90);
  Synchronized.wrappedValue.getter(&v4, v2);
  swift_release(v1);
  return v4;
}

uint64_t FeedIngesterProvider.downloadManager.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;

  v6 = a1;
  swift_beginAccess(v1 + 56, v5, 33, 0);
  swift_unknownObjectRetain(a1);
  v3 = sub_10003F544((uint64_t *)&unk_10055ED80);
  Synchronized.wrappedValue.setter(&v6, v3);
  swift_endAccess(v5);
  return swift_unknownObjectRelease(a1);
}

void (*FeedIngesterProvider.downloadManager.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  __n128 v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = v3 + 3;
  v3[5] = v1;
  swift_beginAccess(v1 + 56, v3, 33, 0);
  sub_10003F544((uint64_t *)&unk_100559B90);
  Synchronized.wrappedValue.getter(v4, v5);
  return sub_1001F7694;
}

void sub_1001F7694(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2[4] = v3;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain(v3);
    v4 = sub_10003F544((uint64_t *)&unk_10055ED80);
    Synchronized.wrappedValue.setter(v2 + 4, v4);
    swift_unknownObjectRelease(v2[3]);
  }
  else
  {
    v5 = sub_10003F544((uint64_t *)&unk_10055ED80);
    Synchronized.wrappedValue.setter(v2 + 4, v5);
  }
  swift_endAccess(v2);
  free(v2);
}

id FeedIngesterProvider.createNewIngester(with:from:updaterJobUUID:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v30;
  uint64_t v31;
  uint64_t v33;
  _BYTE v34[32];

  v6 = (void *)v4[2];
  v7 = v4[3];
  v8 = v4[8];
  v9 = v4[9];
  v31 = v9;
  v11 = v4[4];
  v10 = (void *)v4[5];
  v27 = v8;
  v28 = v11;
  swift_beginAccess(v4 + 7, v34, 0, 0);
  v12 = v4[7];
  swift_unknownObjectRetain(v9);
  v30 = v6;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRetain(v11);
  v13 = v10;
  swift_retain();
  swift_unknownObjectRetain(v8);
  sub_10003F544((uint64_t *)&unk_100559B90);
  Synchronized.wrappedValue.getter(&v33, v14);
  swift_release(v12);
  v15 = v33;
  v25 = v33;
  v26 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EpisodeLevelCalculator(0)), "init");
  v16 = v4[6];
  type metadata accessor for NotificationSettings(0);
  swift_unknownObjectRetain(v16);
  v17 = swift_bridgeObjectRetain(a4);
  v18 = static NotificationSettings.canSendNotification()(v17);
  v19 = objc_allocWithZone((Class)MTFeedIngester);
  v20 = a1;
  v21 = String._bridgeToObjectiveC()();
  LOBYTE(v24) = v18 & 1;
  v22 = objc_msgSend(v19, "initWithPodcast:ctx:storeInfoUpdater:imageDownloader:imageStore:syncController:library:downloadManager:episodeLevelCalculator:categoryIngester:feedUpdateSource:updaterJobUUID:canSendNotifications:", v20, v30, v7, v27, v31, v28, swift_bridgeObjectRelease(a4).n128_f64[0], v13, v15, v26, v16, a2, v21, v24);

  swift_unknownObjectRelease(v7);
  swift_unknownObjectRelease(v27);
  swift_unknownObjectRelease(v31);
  swift_unknownObjectRelease(v28);

  swift_unknownObjectRelease(v25);
  swift_unknownObjectRelease(v16);
  return v22;
}

uint64_t FeedIngesterProvider.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t FeedIngesterProvider.__deallocating_deinit()
{
  uint64_t v0;

  FeedIngesterProvider.deinit();
  return swift_deallocClassInstance(v0, 80, 7);
}

id sub_1001F7988(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FeedIngesterProvider.createNewIngester(with:from:updaterJobUUID:)(a1, a2, a3, a4);
}

double sub_1001F79A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  id v33;
  NSURL *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  Class v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  id v44;
  __n128 v45;
  NSURL *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  Class isa;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, unint64_t, uint64_t, __n128);
  char *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = type metadata accessor for EpisodeOffer(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v5);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v58 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v62 = (char *)&v55 - v13;
  v14 = *(_QWORD *)(v0 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = *(unsigned __int8 *)(v14 + 32);
    v64 = v8;
    if (v17 == 1)
    {
      v39 = *(_QWORD *)(v15 + 16);
      if (v39)
      {
        v63 = (id)objc_opt_self(UIApplication);
        v40 = v15 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
        v56 = v16;
        sub_100198BD4(v15, v16, 1u);
        v41 = *(char **)(v2 + 72);
        v61 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v2 + 16);
        v62 = v41;
        v57 = v15;
        v42 = swift_bridgeObjectRetain(v15);
        v59 = v2;
        v60 = (char *)&type metadata for Any + 8;
        v43 = v58;
        do
        {
          v61(v4, v40, v1, v42);
          v44 = objc_msgSend(v63, "sharedApplication");
          EpisodeOffer.streamUrl.getter(v45);
          URL._bridgeToObjectiveC()(v46);
          v48 = v47;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v8);
          v49 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for OpenExternalURLOptionsKey(0);
          sub_1001F8128();
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          v51 = v49;
          v8 = v64;
          objc_msgSend(v44, "openURL:options:completionHandler:", v48, isa, 0, swift_bridgeObjectRelease(v51).n128_f64[0]);

          (*(void (**)(char *, uint64_t))(v59 + 8))(v4, v1);
          v40 += (unint64_t)v62;
          --v39;
        }
        while (v39);
        v53 = v56;
        v52 = v57;
        sub_100198C1C(v57, v56, 1u);
        sub_100198C1C(v52, v53, 1u);
      }
    }
    else if (!v17)
    {
      v18 = *(_QWORD *)(v15 + 16);
      if (v18)
      {
        v19 = v15;
        v20 = type metadata accessor for CoreDataFetcher(0);
        v56 = v16;
        sub_100198BD4(v19, v16, 0);
        swift_bridgeObjectRetain(v19);
        v57 = v19;
        v22 = (uint64_t *)(v19 + 40);
        v63 = (char *)&type metadata for () + 8;
        v60 = (char *)&type metadata for Any + 8;
        v61 = (void (*)(char *, unint64_t, uint64_t, __n128))v20;
        v23 = v58;
        do
        {
          v26 = *(v22 - 1);
          v25 = *v22;
          v65 = 0;
          v66 = 0;
          __chkstk_darwin(v21);
          *(&v55 - 2) = (uint64_t)&v65;
          swift_bridgeObjectRetain(v25);
          static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(v27, v26, v25, sub_1001F8170, &v55 - 4, v63);
          swift_bridgeObjectRelease(v25);
          v28 = v66;
          if (v66)
          {
            v29 = v65;
            swift_bridgeObjectRetain(v66);
            URL.init(string:)(v29, v28);
            v30 = swift_bridgeObjectRelease(v28);
            v31 = v64;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v23 + 48))(v7, 1, v64, v30) == 1)
            {
              sub_1001C9958((uint64_t)v7);
            }
            else
            {
              v32 = v62;
              (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v62, v7, v31);
              v33 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
              URL._bridgeToObjectiveC()(v34);
              v36 = v35;
              v37 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
              type metadata accessor for OpenExternalURLOptionsKey(0);
              sub_1001F8128();
              v38 = Dictionary._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v33, "openURL:options:completionHandler:", v36, v38, 0, swift_bridgeObjectRelease(v37).n128_f64[0]);

              (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v31);
            }
            v24 = v66;
          }
          else
          {
            v24 = 0;
          }
          v22 += 2;
          swift_bridgeObjectRelease(v24);
          --v18;
        }
        while (v18);
        v54 = v57;
        sub_100198C1C(v57, v56, 0);
        *(_QWORD *)&result = swift_bridgeObjectRelease(v54).n128_u64[0];
      }
    }
  }
  return result;
}

uint64_t sub_1001F7E68(void *a1, uint64_t *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 && (v3 = objc_msgSend(a1, "enclosureURL")) != 0)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = a2[1];
  *a2 = v5;
  a2[1] = v7;
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1001F7ED0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts24OpenEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001F7F30()
{
  return type metadata accessor for OpenEpisodeContextAction(0);
}

uint64_t type metadata accessor for OpenEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100559CC0;
  if (!qword_100559CC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OpenEpisodeContextAction);
  return result;
}

uint64_t sub_1001F7F74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = "\b";
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F7FEC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE400000000000000;
  v1._object = (void *)0x8000000100435210;
  v1._countAndFlagsBits = 0xD000000000000013;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 1852141647;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1001F808C()
{
  return 6516580;
}

uint64_t sub_1001F809C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts24OpenEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001F80E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  swift_retain();
  v2 = sub_100367488();
  swift_release(v1);
  return v2 & 1;
}

unint64_t sub_1001F8128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B800;
  if (!qword_10055B800)
  {
    type metadata accessor for OpenExternalURLOptionsKey(255);
    result = swift_getWitnessTable(&unk_1003C9B68, v1);
    atomic_store(result, &qword_10055B800);
  }
  return result;
}

uint64_t sub_1001F8170(void *a1)
{
  uint64_t v1;

  return sub_1001F7E68(a1, *(uint64_t **)(v1 + 16));
}

uint64_t (*sub_1001F8178())(uint64_t a1)
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v1 = v0[21];
  v2 = v0[22];
  if (v1)
  {
    v3 = (uint64_t (*)(uint64_t))v0[21];
  }
  else
  {
    v4 = v0[20];
    v3 = sub_100181074;
    v0[21] = sub_100181074;
    v0[22] = v4;
    swift_retain_n(v4, 2);
    sub_10002CA30(0, v2);
  }
  sub_10002CA20(v1, v2);
  return v3;
}

uint64_t sub_1001F81F0(uint64_t a1, char a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];

  v4 = v3;
  v8 = sub_10003F544((uint64_t *)&unk_1005550F0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = PassthroughSubject.init()(v9);
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 160) = v10;
  *(_BYTE *)(v3 + 16) = a2;
  v11 = a3[1];
  *(_OWORD *)(v3 + 24) = *a3;
  *(_OWORD *)(v3 + 40) = v11;
  *(_OWORD *)(v3 + 56) = a3[2];
  v12 = type metadata accessor for ShowListProvider(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = swift_retain();
  *(_QWORD *)(v3 + 72) = ShowListProvider.init(asPartOf:kind:pageSize:)(v13);
  v14 = sub_10003F544((uint64_t *)&unk_100555120);
  BaseObjectGraph.inject<A>(_:)(v18, v14, v14);
  sub_10002099C(v18, v3 + 80);
  v15 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(v18, v15, v15);
  sub_10002099C(v18, v3 + 120);
  v16 = *(_QWORD *)(v3 + 72);
  swift_retain();
  ShowListProvider.start()();
  swift_release(v16);
  swift_release(a1);
  return v4;
}

uint64_t sub_1001F8318()
{
  _QWORD *v0;

  swift_release(v0[9]);
  sub_10003D380(v0 + 10);
  sub_10003D380(v0 + 15);
  swift_release(v0[20]);
  sub_10002CA30(v0[21], v0[22]);
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for CarPlayShowsProvider()
{
  return objc_opt_self(_TtC8Podcasts20CarPlayShowsProvider);
}

uint64_t sub_1001F837C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;

  v1 = v0;
  v2 = sub_10003F544(&qword_1005564A0);
  __chkstk_darwin(v2);
  v44 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_100559E98);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100559EA0);
  v41 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10003F544(&qword_100559EA8);
  v46 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10003F544((uint64_t *)&unk_100559EB0);
  v47 = *(_QWORD *)(v45 - 8);
  v12 = __chkstk_darwin(v45);
  v42 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)ShowListProvider.pageContent.getter(v12);
  v48 = v14;
  v15 = sub_10003F544(&qword_100552190);
  v16 = sub_10003F544((uint64_t *)&unk_100559EC0);
  v17 = sub_10002F9C8((unint64_t *)&unk_100555170, &qword_100552190, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.compactMap<A>(_:)(sub_1001F87D4, 0, v15, v16, v17);
  swift_release(v14);
  v18 = *(_BYTE *)(v0 + 16);
  v19 = swift_allocObject(&unk_1004B5788, 25, 7);
  *(_QWORD *)(v19 + 16) = v1;
  *(_BYTE *)(v19 + 24) = v18;
  swift_retain();
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10003F544(&qword_100559ED0);
  v23 = sub_10002F9C8(&qword_100559ED8, &qword_100559E98, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v24 = sub_10002F9C8((unint64_t *)&unk_100559EE0, &qword_100559ED0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v21, sub_1001F9A24, v19, v4, v22, v23, v24);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  v25 = sub_10003F544(&qword_1005545E0);
  v26 = sub_10002F9C8((unint64_t *)&unk_100559EF0, &qword_100559EA0, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  Publisher.map<A>(_:)(sub_1001F96C4, 0, v7, v25, v26);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v7);
  v27 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v48 = (id)static OS_dispatch_queue.main.getter(v28);
  v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v30 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = sub_10002F9C8((unint64_t *)&unk_100559F00, &qword_100559EA8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = sub_10000A2C8((unint64_t *)&qword_1005551A0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v34 = v42;
  v33 = v43;
  Publisher.receive<A>(on:options:)(&v48, v30, v43, v27, v31, v32);
  sub_100007A28(v30, &qword_1005564A0);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v33);
  v35 = sub_10002F9C8(&qword_100559F10, (uint64_t *)&unk_100559EB0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v36 = v45;
  v37 = Publisher.eraseToAnyPublisher()(v45, v35);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v36);
  return v37;
}

uint64_t sub_1001F87D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _BYTE v64[40];
  uint64_t v65;
  _QWORD v66[5];
  unint64_t v67;

  v4 = sub_10003F544((uint64_t *)&unk_100559FB0);
  __chkstk_darwin(v4);
  v62 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ModernShelf(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v58 - v11;
  v13 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100186174(a1, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 3)
  {
    v19 = &v15[*(int *)(sub_10003F544((uint64_t *)&unk_100555340) + 48)];
    sub_1001D0EFC((uint64_t)v15, (uint64_t)v18);
    v20 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    v21 = *(int *)(v16 + 24);
    v61 = v18;
    v22 = *(_QWORD *)&v18[v21];
    v23 = *(_QWORD *)(v22 + 16);
    v63 = v7;
    if (v23)
    {
      v58 = v12;
      v59 = a2;
      type metadata accessor for ShowListProvider(0);
      v24 = v22 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v25 = *(_QWORD *)(v7 + 72);
      v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v60 = v22;
      swift_bridgeObjectRetain_n(v22, 2);
      while (1)
      {
        v27 = v26(v10, v24, v6);
        v28 = ModernShelf.id.getter(v27);
        v30 = v29;
        v32 = static ShowListProvider.showsShelfID.getter();
        v33 = v31;
        if (v28 == v32 && v30 == v31)
        {
          swift_bridgeObjectRelease(v60);
          swift_bridgeObjectRelease(v30);
          goto LABEL_14;
        }
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);
        swift_bridgeObjectRelease(v30);
        v35 = swift_bridgeObjectRelease(v33);
        if ((v34 & 1) != 0)
          break;
        v7 = v63;
        (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v10, v6, v35);
        v24 += v25;
        if (!--v23)
        {
          v22 = v60;
          v36 = swift_bridgeObjectRelease(v60);
          v37 = 1;
          v12 = v58;
          a2 = v59;
          goto LABEL_11;
        }
      }
      v30 = v60;
LABEL_14:
      v12 = v58;
      a2 = v59;
      v41 = (uint64_t)v62;
      v7 = v63;
      v40 = (uint64_t)v61;
      v42 = swift_bridgeObjectRelease(v30);
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v7 + 32))(v41, v10, v6, v42);
      v37 = 0;
      v22 = v60;
    }
    else
    {
      v36 = swift_bridgeObjectRetain(v22);
      v37 = 1;
LABEL_11:
      v40 = (uint64_t)v61;
      v41 = (uint64_t)v62;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(v41, v37, 1, v6, v36);
    v43 = swift_bridgeObjectRelease(v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v7 + 48))(v41, 1, v6, v43) == 1)
    {
      sub_10003F970(v40, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
      result = sub_100007A28(v41, (uint64_t *)&unk_100559FB0);
      v39 = 0;
    }
    else
    {
      v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32))(v12, v41, v6);
      v45 = ModernShelf.items.getter(v44);
      v46 = v45;
      v39 = _swiftEmptyArrayStorage;
      v67 = (unint64_t)_swiftEmptyArrayStorage;
      v47 = *(_QWORD *)(v45 + 16);
      if (v47)
      {
        v48 = v45 + 32;
        do
        {
          sub_10000A520(v48, (uint64_t)v66);
          sub_10000A520((uint64_t)v66, (uint64_t)v64);
          v50 = sub_10003F544(&qword_1005545F0);
          v52 = type metadata accessor for LibraryShowLockup(0, v51);
          if ((swift_dynamicCast(&v65, v64, v50, v52, 6) & 1) == 0)
            v65 = 0;
          v53 = sub_10003D380(v66);
          v54 = v65;
          if (v65)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
            v56 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v55 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v56 >= v55 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
            v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
            specialized Array._endMutation()(v49);
          }
          v48 += 40;
          --v47;
        }
        while (v47);
        v39 = (_QWORD *)v67;
      }
      v57 = swift_bridgeObjectRelease(v46);
      (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v12, v6, v57);
      result = sub_10003F970((uint64_t)v61, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
    }
  }
  else
  {
    result = sub_10003F970((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for PageContent);
    v39 = 0;
  }
  *a2 = v39;
  return result;
}

uint64_t sub_1001F8C64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  v57 = a4;
  v7 = sub_10003F544(&qword_100559F18);
  v8 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  v47 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10003F544(&qword_100559F20);
  v50 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_100559F28);
  v14 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  v52 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10003F544(&qword_100559F30);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_10003F544(&qword_100559F38);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v49 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v58 = v20;
  swift_bridgeObjectRetain(v20);
  v21 = sub_10003F544((uint64_t *)&unk_100559EC0);
  v22 = sub_10002F9C8((unint64_t *)&unk_100559F40, (uint64_t *)&unk_100559EC0, (uint64_t)&protocol conformance descriptor for [A]);
  Publishers.Sequence.init(sequence:)(&v58, v21, &type metadata for Never, v22, &protocol witness table for Never);
  v23 = swift_allocObject(&unk_1004B57B0, 24, 7);
  swift_weakInit(v23 + 16, a2);
  v24 = swift_allocObject(&unk_1004B57D8, 25, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_BYTE *)(v24 + 24) = a3;
  v25 = static Subscribers.Demand.unlimited.getter(v24);
  v26 = sub_10003F544(&qword_1005552C0);
  v27 = sub_10002F9C8((unint64_t *)&unk_100559F50, &qword_100559F18, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v28 = sub_10002F9C8((unint64_t *)&unk_1005552D0, &qword_1005552C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = v25;
  v30 = v46;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v29, sub_1001F9A54, v24, v46, v26, v27, v28);
  swift_release(v24);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v30);
  v31 = sub_100005EC8(0, (unint64_t *)&qword_100559F60, CPListItem_ptr);
  v32 = sub_10002F9C8(&qword_100559F68, &qword_100559F20, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v33 = v48;
  Publisher.compactMap<A>(_:)(sub_100183858, 0, v48, v31, v32);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v33);
  v34 = sub_10002F9C8((unint64_t *)&unk_100559F70, &qword_100559F28, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v35 = v51;
  Publisher.collect()(v51, v34);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v35);
  v36 = swift_allocObject(&unk_1004B5800, 24, 7);
  *(_QWORD *)(v36 + 16) = v20;
  swift_bridgeObjectRetain(v20);
  v37 = sub_10003F544((uint64_t *)&unk_1005544E0);
  v38 = sub_10002F9C8(&qword_100559F80, &qword_100559F30, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v39 = v49;
  v40 = v53;
  Publisher.map<A>(_:)(sub_1001F9A84, v36, v53, v37, v38);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v40);
  v41 = sub_10002F9C8(&qword_100559F88, &qword_100559F38, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v42 = v54;
  v43 = Publisher.eraseToAnyPublisher()(v54, v41);
  result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v39, v42);
  *v57 = v43;
  return result;
}

uint64_t sub_1001F90D4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];
  _OWORD v23[4];
  char v24;
  _OWORD v25[3];

  v6 = sub_10003F544(&qword_100559F98);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v22, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v11 = Strong;
    v12 = sub_1001F9274(a2);
    memset(v23, 0, sizeof(v23));
    v24 = -1;
    v13 = *(_OWORD *)(v11 + 40);
    v25[0] = *(_OWORD *)(v11 + 24);
    v25[1] = v13;
    v25[2] = *(_OWORD *)(v11 + 56);
    v14 = sub_1001F8178();
    v16 = v15;
    v17 = sub_1002F99C8(v11 + 80, (uint64_t)v23, v12, v25, v11 + 120, (uint64_t)v14, v15);
    swift_release(v11);
    result = swift_release(v16);
  }
  else
  {
    v19 = sub_10003F544(&qword_100559FA0);
    Empty.init(completeImmediately:)(1, v19, &type metadata for Never, &protocol witness table for Never);
    v20 = sub_10002F9C8(&qword_100559FA8, &qword_100559F98, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
    v17 = Publisher.eraseToAnyPublisher()(v6, v20);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  *a3 = v17;
  return result;
}

uint64_t sub_1001F9274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 8)
    return 3;
  if (a1 == 9)
  {
    v6 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v7 = static OS_os_log.carPlay.getter(v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Recently Unfollowed should not appear in CarPlay.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  else
  {
    v12 = ShowsSortType.rawValue.getter(a1);
    v14 = v13;
    v16 = ShowsSortType.rawValue.getter(2);
    v17 = v15;
    if (v12 == v16 && v14 == v15)
    {
      v11 = 2;
      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) != 0)
        return 2;
      else
        return 0;
    }
  }
  return v11;
}

void sub_1001F9420(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *a1;
  if (!((unint64_t)a2 >> 62))
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v6)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease(a2);
    v8 = _swiftEmptyArrayStorage;
    if (v5 < 0)
      goto LABEL_31;
    goto LABEL_28;
  }
  if (a2 < 0)
    v27 = a2;
  else
    v27 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v6 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v6)
    goto LABEL_27;
LABEL_3:
  if (v6 >= 1)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v7 = 0;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a2);
        v12 = LegacyLockup.title.getter(v10, v11);
        v14 = v13;
        swift_unknownObjectRelease(v10);
        if (v14)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_10027AE00(0, v8[2] + 1, 1, v8);
          v16 = v8[2];
          v15 = v8[3];
          if (v16 >= v15 >> 1)
            v8 = sub_10027AE00((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
          v8[2] = v16 + 1;
          v9 = &v8[2 * v16];
          v9[4] = v12;
          v9[5] = v14;
        }
        ++v7;
      }
      while (v6 != v7);
    }
    else
    {
      v17 = 0;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        v19 = *(_QWORD *)(a2 + 8 * v17 + 32);
        swift_retain();
        v22 = LegacyLockup.title.getter(v20, v21);
        v24 = v23;
        swift_release(v19);
        if (v24)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_10027AE00(0, v8[2] + 1, 1, v8);
          v26 = v8[2];
          v25 = v8[3];
          if (v26 >= v25 >> 1)
            v8 = sub_10027AE00((_QWORD *)(v25 > 1), v26 + 1, 1, v8);
          v8[2] = v26 + 1;
          v18 = &v8[2 * v26];
          v18[4] = v22;
          v18[5] = v24;
        }
        ++v17;
      }
      while (v6 != v17);
    }
    swift_bridgeObjectRelease(a2);
    if (v5 < 0)
      goto LABEL_31;
LABEL_28:
    if ((v5 & 0x4000000000000000) == 0)
    {
      v28 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v5);
LABEL_30:
      v30 = v28;
      sub_1001FCB68(&v30, v8);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v8);
      *a3 = v30;
      return;
    }
LABEL_31:
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v5);
    v28 = (uint64_t)sub_1001F9AB0(v29, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_100174498);
    swift_bridgeObjectRelease(v5);
    goto LABEL_30;
  }
  __break(1u);
  swift_release(v30);
  __break(1u);
}

uint64_t sub_1001F96C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v9);
  v10 = swift_bridgeObjectRetain_n(v8, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = (unint64_t)v8 >> 62;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    if (v13)
    {
      if (v8 < 0)
        v28 = v8;
      else
        v28 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v15 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v15 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v8);
    v30 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CarPlayShowsProvider: section total items count is %ld.", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = sub_10003F544((uint64_t *)&unk_100553780);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1003CA250;
  if (v13)
  {
    if (v8 < 0)
      v25 = v8;
    else
      v25 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v26 = sub_10003F544(&qword_1005544F0);
    v27 = _bridgeCocoaArray<A>(_:)(v25, v26);
    swift_bridgeObjectRelease(v8);
    v8 = v27;
  }
  else
  {
    swift_bridgeObjectRetain(v8);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v18);
  }
  v19 = objc_allocWithZone((Class)CPListSection);
  v20 = sub_100180784(v8);
  swift_bridgeObjectRelease(v8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v19, "initWithItems:", isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

  *(_QWORD *)(v17 + 32) = v22;
  v30 = v17;
  result = specialized Array._endMutation()(v23);
  *a2 = v30;
  return result;
}

uint64_t sub_1001F9970()
{
  return sub_1001F837C();
}

uint64_t sub_1001F9990()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544((uint64_t *)&unk_1005550F0);
  v1 = sub_10002F9C8(&qword_100554FB0, (uint64_t *)&unk_1005550F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_1001F9A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001F9A24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1001F8C64(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_1001F9A30()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F9A54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001F90D4(*(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), a1);
}

uint64_t sub_1001F9A60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001F9A84(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1001F9420(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_1001F9A8C(uint64_t a1)
{
  return sub_1001F9AB0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_10017426C);
}

_QWORD *sub_1001F9A98(uint64_t a1)
{
  return sub_1001F9AB0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_100174498);
}

_QWORD *sub_1001F9AA4(uint64_t a1)
{
  return sub_1001F9AB0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001746AC);
}

_QWORD *sub_1001F9AB0(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_10003F544((uint64_t *)&unk_100553780);
      v6 = (_QWORD *)swift_allocObject(v5, 8 * v4 + 32, 7);
      v7 = j__malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v4;
      v6[3] = (2 * (v8 >> 3)) | 1;
    }
    v9 = swift_bridgeObjectRetain(a1);
    v10 = a2(v6 + 4, v4, a1, v9);
    a2 = v11;
    swift_bridgeObjectRelease(v10);
    if (a2 == (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v4)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
    if (!v4)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_1001F9BB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13, v14, v5, &type metadata for String);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1001F9D20(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_10003F544((uint64_t *)&unk_100553780);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    v15 = sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    swift_arrayInitWithCopy(v10 + 4, v13, v5, v15);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1001F9EB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10003F544(&qword_100559FE0);
  v4 = (_QWORD *)swift_allocObject(v3, 24 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  v6 = sub_1001FA6A0((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10017F43C(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t **sub_1001F9FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.count.getter(a1);
  if (!v2)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_10003F544((uint64_t *)&unk_100553780);
    v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_1001FA8AC(&v9, v4 + 4, v2, v1);
  result = (uint64_t **)sub_10017F43C(v9);
  if (v7 == (uint64_t *)v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_1001FA09C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10003F544(&qword_100554938);
  v4 = *(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_1001FABBC(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10017F43C(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001FA1B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10003F544((uint64_t *)&unk_100559FC0);
  v4 = (_QWORD *)swift_allocObject(v3, 40 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  v6 = sub_1001FAE84((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10017F43C(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001FA2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1001FB090((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10017F43C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

char *sub_1001FA388(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10003F544(&qword_100559F90);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1001FA480(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1001FA52C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1001FA5D4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1001FA68C(uint64_t a1)
{
  return sub_1001FA388(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001FA6A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    *(_QWORD *)v11 = *(_QWORD *)v20;
    *(_QWORD *)(v11 + 8) = v22;
    *(_BYTE *)(v11 + 16) = v23;
    if (v13 == v10)
    {
      sub_10003CAD8(v21, v22, v23);
      goto LABEL_38;
    }
    v11 += 24;
    result = sub_10003CAD8(v21, v22, v23);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t *sub_1001FA8AC(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD v35[5];

  v4 = a4;
  v6 = a2;
  v31 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    v10 = sub_10000A2C8((unint64_t *)&qword_100564E50, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    result = Set.Iterator.init(_cocoa:)(v35, v8, v9, v10);
    v4 = v35[0];
    v11 = v35[1];
    v12 = v35[2];
    v13 = v35[3];
    v14 = v35[4];
    if (v6)
      goto LABEL_6;
LABEL_39:
    v15 = 0;
    goto LABEL_41;
  }
  v13 = 0;
  v26 = -1 << *(_BYTE *)(a4 + 32);
  v11 = a4 + 56;
  v12 = ~v26;
  v27 = -v26;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v14 = v28 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v15 = 0;
LABEL_41:
    v29 = v31;
LABEL_44:
    *v29 = v4;
    v29[1] = v11;
    v29[2] = v12;
    v29[3] = v13;
    v29[4] = v14;
    return (uint64_t *)v15;
  }
  if (a3 < 0)
    goto LABEL_51;
  v15 = 0;
  v32 = (unint64_t)(v12 + 64) >> 6;
  v30 = v12;
  while (1)
  {
    if (v4 < 0)
    {
      v22 = __CocoaSet.Iterator.next()(result);
      if (!v22)
        goto LABEL_43;
      v23 = v22;
      v33 = v22;
      v24 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
      v18 = v34;
      result = (uint64_t *)swift_unknownObjectRelease(v23);
      if (!v18)
        goto LABEL_43;
      goto LABEL_11;
    }
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_10;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v19 >= v32)
    {
      v14 = 0;
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v11 + 8 * v19);
    if (v20)
      goto LABEL_26;
    v21 = v13 + 2;
    if (v13 + 2 >= v32)
    {
      v14 = 0;
      ++v13;
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      if (v13 + 3 >= v32)
        goto LABEL_47;
      v20 = *(_QWORD *)(v11 + 8 * (v13 + 3));
      if (v20)
      {
        v19 = v13 + 3;
        goto LABEL_26;
      }
      v21 = v13 + 4;
      if (v13 + 4 >= v32)
      {
        v14 = 0;
        v13 += 3;
        goto LABEL_43;
      }
      v20 = *(_QWORD *)(v11 + 8 * v21);
      if (!v20)
      {
        v19 = v13 + 5;
        if (v13 + 5 >= v32)
        {
LABEL_47:
          v14 = 0;
          v13 = v21;
          goto LABEL_43;
        }
        v20 = *(_QWORD *)(v11 + 8 * v19);
        if (!v20)
        {
          v25 = v13 + 6;
          while (v32 != v25)
          {
            v20 = *(_QWORD *)(v11 + 8 * v25++);
            if (v20)
            {
              v19 = v25 - 1;
              goto LABEL_26;
            }
          }
          v14 = 0;
          v13 = v32 - 1;
          goto LABEL_43;
        }
        goto LABEL_26;
      }
    }
    v19 = v21;
LABEL_26:
    v14 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    v18 = result;
    if (!result)
      goto LABEL_43;
LABEL_11:
    ++v15;
    *v6++ = v18;
    if (v15 == a3)
    {
      v15 = a3;
LABEL_43:
      v12 = v30;
      v29 = v31;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1001FABBC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for MediaLibraryPid(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 32);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 56) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001FAE84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 v21[2];
  __int128 v22[2];

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
LABEL_36:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    sub_10000A520(*(_QWORD *)(a4 + 56) + 40 * v16, (uint64_t)v21);
    sub_10002099C(v21, (uint64_t)v22);
    result = sub_10002099C(v22, v11);
    v11 += 40;
    if (v13 == a3)
    {
      v13 = a3;
LABEL_35:
      v7 = v20;
      goto LABEL_36;
    }
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * v17);
  if (v18)
    goto LABEL_23;
  v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v12 = v17 + 1;
  if (v17 + 2 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_23;
  }
  v12 = v17 + 2;
  if (v17 + 3 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_23;
  }
  v19 = v17 + 4;
  v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v17 = v19;
LABEL_23:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
    goto LABEL_9;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v12 = v14 - 1;
      goto LABEL_34;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001FB090(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001FB28C(uint64_t a1)
{
  return sub_100008B68(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001FB2A0(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001FB2B4(uint64_t a1)
{
  return sub_10017BA3C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001FB2C8(_QWORD *a1)
{
  return sub_10017C808(0, a1[2], 0, a1);
}

uint64_t sub_1001FB2DC(id *a1, id *a2, id *a3, void **__dst, _QWORD *a5)
{
  void **v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  id *v45;
  void **v46;
  id *v47;
  void **v48;
  unint64_t v49;
  id *v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  BOOL v79;
  id *v80;
  uint64_t result;
  unint64_t v83;
  void *v84;
  id *v85;
  void **v86;
  id *__src;
  void **__srca;
  id *v89;
  id *v90;
  void **v91;
  id v92;
  id *v93;
  id *v94;
  uint64_t v95;
  unint64_t v96;
  void **v97;
  void **v98;
  id *v99;

  v5 = __dst;
  v6 = a3;
  v7 = (char *)a2 - (char *)a1;
  v8 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v8 = (char *)a2 - (char *)a1;
  v9 = v8 >> 3;
  v10 = (char *)a3 - (char *)a2;
  v11 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v11 = (char *)a3 - (char *)a2;
  v12 = v11 >> 3;
  v99 = a1;
  v98 = __dst;
  __src = a1;
  if (v9 < v11 >> 3)
  {
    if (v7 < -7)
      goto LABEL_124;
    if (__dst != a1 || &a1[v9] <= __dst)
    {
      v13 = a2;
      memmove(__dst, a1, 8 * v9);
      a2 = v13;
      a1 = __src;
    }
    v91 = &v5[v9];
    v97 = v91;
    if (a2 < v6 && v7 >= 8)
    {
      v89 = v6;
      v14 = a5[2];
      if (v14 <= 1)
        v15 = 1;
      else
        v15 = a5[2];
      v95 = v15;
      while (1)
      {
        v86 = v5;
        __srca = a1;
        v93 = a2;
        v16 = *v5;
        v17 = *a2;
        v18 = v16;
        v19 = objc_msgSend(v17, "text");
        if (v19)
        {
          v20 = v19;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v23 = v22;

          if (!v14)
            goto LABEL_40;
        }
        else
        {
          v21 = 0;
          v23 = 0xE000000000000000;
          if (!v14)
            goto LABEL_40;
        }
        v24 = a5[4];
        v25 = a5[5];
        if ((v24 != v21 || v25 != v23)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(a5[4], a5[5], v21, v23, 0) & 1) == 0)
        {
          v33 = a5 + 7;
          v34 = 1;
          while (v14 != v34)
          {
            v26 = v34;
            v35 = *(v33 - 1);
            v36 = *v33;
            if (v35 != v21 || v36 != v23)
            {
              v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v21, v23, 0);
              v34 = v26 + 1;
              v33 += 2;
              if ((v38 & 1) == 0)
                continue;
            }
            goto LABEL_24;
          }
LABEL_40:

          swift_bridgeObjectRelease(v23);
          goto LABEL_55;
        }
        v26 = 0;
LABEL_24:
        v27 = objc_msgSend(v18, "text", swift_bridgeObjectRelease(v23).n128_f64[0]);
        if (v27)
        {
          v28 = v27;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v31 = v30;

          if (v24 != v29)
            goto LABEL_30;
        }
        else
        {
          v29 = 0;
          v31 = 0xE000000000000000;
          if (v24)
            goto LABEL_30;
        }
        if (v25 != v31)
        {
LABEL_30:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v29, v31, 0) & 1) == 0)
          {
            v39 = a5 + 7;
            v40 = 1;
            while (v14 != v40)
            {
              v32 = v40;
              if (v95 == v40)
                goto LABEL_123;
              v41 = *(v39 - 1);
              v42 = *v39;
              if (v41 != v29 || v42 != v31)
              {
                v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v29, v31, 0);
                v40 = v32 + 1;
                v39 += 2;
                if ((v44 & 1) == 0)
                  continue;
              }
              goto LABEL_49;
            }

            swift_bridgeObjectRelease(v31);
LABEL_51:
            v45 = v93 + 1;
            v5 = v86;
            v46 = __srca;
            if (__srca < v93 || __srca >= v45 || __srca != v93)
              *__srca = *v93;
            goto LABEL_58;
          }
          v32 = 0;
LABEL_49:
          v25 = v31;
          goto LABEL_50;
        }
        v32 = 0;
LABEL_50:

        swift_bridgeObjectRelease(v25);
        if (v26 < v32)
          goto LABEL_51;
LABEL_55:
        v46 = __srca;
        if (__srca != v86)
          *__srca = *v86;
        v5 = v86 + 1;
        v98 = v86 + 1;
        v45 = v93;
LABEL_58:
        a1 = v46 + 1;
        if (v5 < v91)
        {
          a2 = v45;
          if (v45 < v89)
            continue;
        }
        v99 = a1;
        break;
      }
    }
LABEL_121:
    sub_1001FA52C((void **)&v99, (const void **)&v98, &v97);
    return 1;
  }
  if (v10 < -7)
    goto LABEL_124;
  if (__dst != a2 || &a2[v12] <= __dst)
  {
    v47 = a2;
    memmove(__dst, a2, 8 * v12);
    a2 = v47;
    a1 = __src;
  }
  v48 = &v5[v12];
  v97 = v48;
  v99 = a2;
  if (a1 >= a2 || v10 < 8)
    goto LABEL_121;
  v49 = a5[2];
  v96 = v49;
  if (v49 <= 1)
    v49 = 1;
  v83 = v49;
  v50 = a2;
  while (1)
  {
    v94 = a2;
    v51 = *--v50;
    v52 = *(v48 - 1);
    v92 = v51;
    v84 = v52;
    v53 = objc_msgSend(v52, "text");
    if (v53)
    {
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v57 = v56;

    }
    else
    {
      v55 = 0;
      v57 = 0xE000000000000000;
    }
    v90 = v6;
    v85 = v6 - 1;
    if (!v96)
      goto LABEL_95;
    v58 = a5[4];
    v59 = a5[5];
    if ((v58 != v55 || v59 != v57)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(a5[4], a5[5], v55, v57, 0) & 1) == 0)
    {
      v67 = a5 + 7;
      v68 = 1;
      while (1)
      {
        v60 = v68;
        if (v96 == v68)
          break;
        v69 = *(v67 - 1);
        v70 = *v67;
        if (v69 != v55 || v70 != v57)
        {
          v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v55, v57, 0);
          v68 = v60 + 1;
          v67 += 2;
          if ((v72 & 1) == 0)
            continue;
        }
        goto LABEL_79;
      }
LABEL_95:

      swift_bridgeObjectRelease(v57);
      v6 = v85;
      goto LABEL_111;
    }
    v60 = 0;
LABEL_79:
    v61 = objc_msgSend(v92, "text", swift_bridgeObjectRelease(v57).n128_f64[0]);
    if (v61)
    {
      v62 = v61;
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v65 = v64;

      if (v58 != v63)
        goto LABEL_85;
    }
    else
    {
      v63 = 0;
      v65 = 0xE000000000000000;
      if (v58)
        goto LABEL_85;
    }
    if (v59 == v65)
    {
      v66 = 0;
      goto LABEL_105;
    }
LABEL_85:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v63, v65, 0) & 1) == 0)
      break;
    v66 = 0;
LABEL_104:
    v59 = v65;
LABEL_105:

    swift_bridgeObjectRelease(v59);
    v79 = v60 < v66;
    v6 = v85;
    if (v79)
    {
LABEL_107:
      v80 = __src;
      if (v90 != v94 || v6 >= v94)
        *v6 = *v50;
      v99 = v50;
      goto LABEL_116;
    }
LABEL_111:
    v97 = v48 - 1;
    v80 = __src;
    v50 = v94;
    if (v90 < v48 || v6 >= v48 || v90 != v48)
      *v6 = *(v48 - 1);
    --v48;
LABEL_116:
    if (v50 > v80)
    {
      a2 = v50;
      if (v48 > v5)
        continue;
    }
    goto LABEL_121;
  }
  v73 = a5 + 7;
  v74 = 1;
  while (1)
  {
    v66 = v74;
    if (v96 == v74)
    {

      swift_bridgeObjectRelease(v65);
      v6 = v85;
      goto LABEL_107;
    }
    if (v83 == v74)
      break;
    v75 = *(v73 - 1);
    v76 = *v73;
    if (v75 != v63 || v76 != v65)
    {
      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v63, v65, 0);
      v74 = v66 + 1;
      v73 += 2;
      if ((v78 & 1) == 0)
        continue;
    }
    goto LABEL_104;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  swift_bridgeObjectRelease(a5);
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1001FB9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v44;
  void *v45;
  id v46;

  if (a3 == a2)
    return;
  v5 = a3;
  v6 = *a4;
  v7 = a5[2];
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = a5[2];
  v39 = v8;
  v41 = a5 + 7;
LABEL_9:
  v9 = *(void **)(v6 + 8 * v5);
  v40 = v5;
  while (1)
  {
    v10 = *(void **)(v6 + 8 * (v5 - 1));
    v11 = v9;
    v46 = v10;
    v12 = objc_msgSend(v11, "text");
    v44 = v5 - 1;
    v45 = v11;
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      if (!v7)
        goto LABEL_7;
    }
    else
    {
      v14 = 0;
      v16 = 0xE000000000000000;
      if (!v7)
        goto LABEL_7;
    }
    v18 = a5[4];
    v17 = a5[5];
    if ((v18 != v14 || v17 != v16)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(a5[4], a5[5], v14, v16, 0) & 1) == 0)
    {
      v26 = v41;
      v27 = 1;
      while (v7 != v27)
      {
        v19 = v27;
        v28 = *(v26 - 1);
        v29 = *v26;
        if (v28 != v14 || v29 != v16)
        {
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v14, v16, 0);
          v27 = v19 + 1;
          v26 += 2;
          if ((v31 & 1) == 0)
            continue;
        }
        goto LABEL_18;
      }
LABEL_7:

      swift_bridgeObjectRelease(v16);
LABEL_8:
      v5 = v40 + 1;
      if (v40 + 1 == a2)
        return;
      goto LABEL_9;
    }
    v19 = 0;
LABEL_18:
    swift_bridgeObjectRelease(v16);
    v20 = objc_msgSend(v46, "text");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

      if (v18 != v22)
        goto LABEL_24;
    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
      if (v18)
        goto LABEL_24;
    }
    if (v17 == v24)
    {
      v25 = 0;
LABEL_43:

      swift_bridgeObjectRelease(v17);
      if (v19 >= v25)
        goto LABEL_8;
      if (!v6)
        break;
      goto LABEL_45;
    }
LABEL_24:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, v22, v24, 0) & 1) != 0)
    {
      v25 = 0;
LABEL_42:
      v17 = v24;
      goto LABEL_43;
    }
    v32 = v41;
    v33 = 1;
    while (v7 != v33)
    {
      v25 = v33;
      if (v39 == v33)
        goto LABEL_49;
      v34 = *(v32 - 1);
      v35 = *v32;
      if (v34 != v22 || v35 != v24)
      {
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v22, v24, 0);
        v33 = v25 + 1;
        v32 += 2;
        if ((v37 & 1) == 0)
          continue;
      }
      goto LABEL_42;
    }

    swift_bridgeObjectRelease(v24);
    if (!v6)
      break;
LABEL_45:
    v9 = *(void **)(v6 + 8 * v5);
    *(_QWORD *)(v6 + 8 * v5) = *(_QWORD *)(v6 + 8 * v44);
    *(_QWORD *)(v6 + 8 * v44) = v9;
    --v5;
    if (v44 == a1)
      goto LABEL_8;
  }
  __break(1u);
LABEL_49:
  __break(1u);
}

void sub_1001FBCBC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  _BOOL4 v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  int v79;
  uint64_t *v80;
  Swift::Int v81;
  Swift::Int v82;
  uint64_t *v83;
  uint64_t v84;
  Swift::Int v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  Swift::Int v90;
  Swift::Int v91;
  void *v92;
  id v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  char v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  id *v167;
  id *v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  Swift::Int v182;
  Swift::Int v183;
  uint64_t v184;
  uint64_t v185;
  Swift::Int v186;
  char *v187;
  char *v188;
  void **__dst;
  Swift::Int v190;
  Swift::Int v191;
  Swift::Int v192;
  uint64_t *v193;
  uint64_t v194;
  Swift::Int v195;
  uint64_t v196;
  _QWORD *v197;
  int v198;
  void *v199;
  unint64_t v200;
  id v201;
  id *v202;
  uint64_t v203;

  v3 = (unint64_t)a2;
  v5 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_bridgeObjectRetain(v3);
        sub_1001FB9E0(0, v5, 1, a1, (_QWORD *)v3);
        swift_bridgeObjectRelease_n(v3, 4);
      }
      else
      {
        swift_bridgeObjectRelease_n(v3, 3);
      }
      return;
    }
    goto LABEL_261;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_269;
  v197 = (_QWORD *)v3;
  v181 = a1;
  v182 = v6;
  v194 = v2;
  if (v5 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v203 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v120 = _swiftEmptyArrayStorage[2];
LABEL_224:
      v188 = v11;
      if (v120 < 2)
      {
LABEL_235:
        swift_bridgeObjectRelease(v188);
        *(_QWORD *)((v203 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()(v179);
        swift_bridgeObjectRelease_n(v197, 3);
        swift_bridgeObjectRelease(v203);
        return;
      }
      v173 = *v181;
      while (1)
      {
        v3 = v120 - 2;
        if (v120 < 2)
          goto LABEL_254;
        if (!v173)
          goto LABEL_268;
        v174 = *(_QWORD *)&v188[16 * v3 + 32];
        v175 = *(_QWORD *)&v188[16 * v120 + 24];
        v176 = (id *)(v173 + 8 * *(_QWORD *)&v188[16 * v120 + 16]);
        swift_bridgeObjectRetain(v197);
        sub_1001FB2DC((id *)(v173 + 8 * v174), v176, (id *)(v173 + 8 * v175), __dst, v197);
        if (v194)
        {
          v3 = (unint64_t)v197;
          v171 = v188;
          goto LABEL_221;
        }
        swift_bridgeObjectRelease(v197);
        if (v175 < v174)
          goto LABEL_256;
        if ((swift_isUniquelyReferenced_nonNull_native(v188) & 1) == 0)
          v188 = sub_1001FA68C((uint64_t)v188);
        if (v3 >= *((_QWORD *)v188 + 2))
          goto LABEL_257;
        v194 = 0;
        v177 = &v188[16 * v3 + 32];
        *(_QWORD *)v177 = v174;
        *((_QWORD *)v177 + 1) = v175;
        v178 = *((_QWORD *)v188 + 2);
        if (v120 > v178)
          goto LABEL_258;
        memmove(&v188[16 * v120 + 16], &v188[16 * v120 + 32], 16 * (v178 - v120));
        *((_QWORD *)v188 + 2) = v178 - 1;
        v120 = v178 - 1;
        if (v178 <= 2)
          goto LABEL_235;
      }
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = sub_100005EC8(0, (unint64_t *)&qword_100559F60, CPListItem_ptr);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v203 = v10;
  }
  v12 = 0;
  v13 = *a1;
  v193 = (uint64_t *)(v3 + 56);
  v180 = *a1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v14 = v5;
  v186 = v5;
  v196 = *a1;
  while (2)
  {
    v15 = v12 + 1;
    v187 = v11;
    v195 = v12;
    if (v12 + 1 >= v14)
      goto LABEL_110;
    v190 = v12 + 1;
    v16 = *(void **)(v13 + 8 * v15);
    v17 = *(void **)(v13 + 8 * v12);
    v18 = v16;
    v19 = v17;
    v20 = objc_msgSend(v18, "text");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
    }
    v3 = (unint64_t)v197;
    v200 = v197[2];
    if (v200)
    {
      v26 = v197[4];
      v25 = v197[5];
      if ((v26 != v22 || v25 != v24) && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v22, v24, 0) & 1) == 0)
      {
        v34 = v193;
        v35 = 1;
        while (1)
        {
          v27 = v35;
          if (v200 == v35)
            break;
          v36 = *(v34 - 1);
          v37 = *v34;
          if (v36 != v22 || v37 != v24)
          {
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v22, v24, 0);
            v35 = v27 + 1;
            v34 += 2;
            if ((v39 & 1) == 0)
              continue;
          }
          goto LABEL_22;
        }

        swift_bridgeObjectRelease(v24);
        v198 = 0;
        goto LABEL_53;
      }
      v27 = 0;
LABEL_22:
      v28 = objc_msgSend(v19, "text", swift_bridgeObjectRelease(v24).n128_f64[0]);
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v32 = v31;

        if (v26 != v30)
          goto LABEL_29;
      }
      else
      {
        v30 = 0;
        v32 = 0xE000000000000000;
        if (v26)
          goto LABEL_29;
      }
      if (v25 == v32)
      {
        v33 = 0;
        goto LABEL_51;
      }
LABEL_29:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v30, v32, 0) & 1) == 0)
      {
        v40 = v19;
        if (v200 <= 1)
          v41 = 1;
        else
          v41 = v200;
        v3 = (unint64_t)v193;
        v42 = 1;
        while (1)
        {
          v33 = v42;
          if (v200 == v42)
            break;
          if (v41 == v42)
            goto LABEL_259;
          v43 = *(_QWORD *)(v3 - 8);
          v44 = *(_QWORD *)v3;
          if (v43 != v30 || v44 != v32)
          {
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v30, v32, 0);
            v42 = v33 + 1;
            v3 += 16;
            if ((v46 & 1) == 0)
              continue;
          }
          v25 = v32;
          v19 = v40;
          goto LABEL_51;
        }

        swift_bridgeObjectRelease(v32);
        v47 = 1;
        goto LABEL_52;
      }
      v33 = 0;
      v25 = v32;
LABEL_51:

      swift_bridgeObjectRelease(v25);
      v47 = v27 < v33;
LABEL_52:
      v198 = v47;
LABEL_53:
      v3 = (unint64_t)v197;
      v11 = v187;
      goto LABEL_54;
    }

    swift_bridgeObjectRelease(v24);
    v198 = 0;
LABEL_54:
    v12 = v195;
    v48 = v195 + 2;
    v14 = v186;
    v13 = v196;
    v49 = v190;
    if (v195 + 2 < v186)
    {
      if (v200 <= 1)
        v50 = 1;
      else
        v50 = v200;
      v184 = v50;
      while (1)
      {
        v51 = *(void **)(v13 + 8 * v49);
        v52 = *(id *)(v13 + 8 * v48);
        v53 = v51;
        v54 = objc_msgSend(v52, "text");
        if (v54)
        {
          v55 = v54;
          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v58 = v57;

        }
        else
        {
          v56 = 0;
          v58 = 0xE000000000000000;
        }
        v3 = (unint64_t)v197;
        if (v200)
        {
          v60 = v197[4];
          v59 = v197[5];
          if (v60 == v56 && v59 == v58
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v60, v59, v56, v58, 0) & 1) != 0)
          {
            v61 = 0;
LABEL_70:
            v62 = objc_msgSend(v53, "text", swift_bridgeObjectRelease(v58).n128_f64[0]);
            if (v62)
            {
              v63 = v62;
              v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
              v66 = v65;

              if (v60 != v64)
              {
LABEL_76:
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v60, v59, v64, v66, 0) & 1) == 0)
                {
                  v3 = (unint64_t)v193;
                  v74 = 1;
                  while (1)
                  {
                    v67 = v74;
                    if (v200 == v74)
                      break;
                    if (v184 == v74)
                      goto LABEL_242;
                    v75 = *(_QWORD *)(v3 - 8);
                    v76 = *(_QWORD *)v3;
                    if (v75 != v64 || v76 != v66)
                    {
                      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v64, v66, 0);
                      v74 = v67 + 1;
                      v3 += 16;
                      if ((v78 & 1) == 0)
                        continue;
                    }
                    goto LABEL_94;
                  }

                  swift_bridgeObjectRelease(v66);
                  v3 = (unint64_t)v197;
                  v11 = v187;
                  if ((v198 & 1) == 0)
                  {
                    v15 = v48;
                    v14 = v186;
                    v13 = v196;
                    v12 = v195;
                    goto LABEL_110;
                  }
                  goto LABEL_61;
                }
                v67 = 0;
LABEL_94:
                v59 = v66;
                goto LABEL_95;
              }
            }
            else
            {
              v64 = 0;
              v66 = 0xE000000000000000;
              if (v60)
                goto LABEL_76;
            }
            if (v59 != v66)
              goto LABEL_76;
            v67 = 0;
LABEL_95:

            swift_bridgeObjectRelease(v59);
            v79 = v61 >= v67;
            v3 = (unint64_t)v197;
            v11 = v187;
            if (v198 == v79)
            {
              v14 = v186;
              v13 = v196;
LABEL_100:
              v12 = v195;
              break;
            }
            goto LABEL_61;
          }
          v68 = v193;
          v69 = 1;
          while (1)
          {
            v61 = v69;
            if (v200 == v69)
              break;
            v70 = *(v68 - 1);
            v71 = *v68;
            if (v70 != v56 || v71 != v58)
            {
              v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v56, v58, 0);
              v69 = v61 + 1;
              v68 += 2;
              if ((v73 & 1) == 0)
                continue;
            }
            goto LABEL_70;
          }
          v3 = (unint64_t)v197;
          v11 = v187;
        }

        swift_bridgeObjectRelease(v58);
        if ((v198 & 1) != 0)
        {
          v14 = v186;
          v13 = v196;
          v12 = v195;
          if (v48 < v195)
            goto LABEL_262;
LABEL_103:
          if (v12 < v48)
          {
            v80 = (uint64_t *)(v180 + 8 * v48);
            v81 = v48;
            v82 = v12;
            v83 = (uint64_t *)(v13 + 8 * v12);
            do
            {
              if (v82 != --v81)
              {
                if (!v13)
                  goto LABEL_267;
                v84 = *v83;
                *v83 = *v80;
                *v80 = v84;
              }
              ++v82;
              --v80;
              ++v83;
            }
            while (v82 < v81);
          }
          v15 = v48;
          goto LABEL_110;
        }
LABEL_61:
        v49 = v48++;
        v14 = v186;
        v13 = v196;
        if (v48 == v186)
        {
          v48 = v186;
          goto LABEL_100;
        }
      }
    }
    v15 = v48;
    if (v198)
    {
      if (v48 < v12)
        goto LABEL_262;
      goto LABEL_103;
    }
LABEL_110:
    if (v15 >= v14)
      goto LABEL_166;
    if (__OFSUB__(v15, v12))
      goto LABEL_260;
    if (v15 - v12 >= v182)
      goto LABEL_166;
    v85 = v12 + v182;
    if (__OFADD__(v12, v182))
      goto LABEL_263;
    if (v85 >= v14)
      v85 = v14;
    if (v85 < v12)
    {
LABEL_264:
      __break(1u);
LABEL_265:
      swift_bridgeObjectRelease_n(v3, 3);
      __break(1u);
LABEL_266:
      swift_bridgeObjectRelease_n(v197, 3);
      __break(1u);
LABEL_267:
      swift_bridgeObjectRelease_n(v3, 3);
      __break(1u);
LABEL_268:
      swift_bridgeObjectRelease_n(v197, 3);
      __break(1u);
LABEL_269:
      swift_bridgeObjectRelease_n(v3, 4);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if (v15 == v85)
      goto LABEL_166;
    v86 = *(_QWORD *)(v3 + 16);
    if (v86 <= 1)
      v87 = 1;
    else
      v87 = *(_QWORD *)(v3 + 16);
    v183 = v85;
    v185 = v87;
    while (2)
    {
      v89 = *(void **)(v13 + 8 * v15);
      v191 = v15;
      v90 = v15;
      while (1)
      {
        v91 = v90 - 1;
        v92 = *(void **)(v13 + 8 * (v90 - 1));
        v88 = v89;
        v201 = v92;
        v93 = objc_msgSend(v88, "text");
        if (v93)
        {
          v94 = v93;
          v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
          v97 = v96;

          if (!v86)
            goto LABEL_123;
        }
        else
        {
          v95 = 0;
          v97 = 0xE000000000000000;
          if (!v86)
            goto LABEL_123;
        }
        v99 = *(_QWORD *)(v3 + 32);
        v98 = *(_QWORD *)(v3 + 40);
        v199 = v88;
        if ((v99 != v95 || v98 != v97)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v99, v98, v95, v97, 0) & 1) == 0)
        {
          break;
        }
        v100 = 0;
LABEL_134:
        v101 = objc_msgSend(v201, "text", swift_bridgeObjectRelease(v97).n128_f64[0]);
        if (v101)
        {
          v102 = v101;
          v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
          v105 = v104;

          if (v99 != v103)
            goto LABEL_140;
        }
        else
        {
          v103 = 0;
          v105 = 0xE000000000000000;
          if (v99)
            goto LABEL_140;
        }
        if (v98 == v105)
        {
          v106 = 0;
          goto LABEL_159;
        }
LABEL_140:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v99, v98, v103, v105, 0) & 1) == 0)
        {
          v3 = (unint64_t)v193;
          v113 = 1;
          while (v86 != v113)
          {
            v106 = v113;
            if (v185 == v113)
            {
              __break(1u);
LABEL_238:
              __break(1u);
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
LABEL_244:
              __break(1u);
LABEL_245:
              __break(1u);
LABEL_246:
              __break(1u);
LABEL_247:
              __break(1u);
LABEL_248:
              __break(1u);
LABEL_249:
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
LABEL_252:
              __break(1u);
LABEL_253:
              __break(1u);
LABEL_254:
              __break(1u);
LABEL_255:
              __break(1u);
LABEL_256:
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
LABEL_262:
              __break(1u);
LABEL_263:
              __break(1u);
              goto LABEL_264;
            }
            v114 = *(_QWORD *)(v3 - 8);
            v115 = *(_QWORD *)v3;
            if (v114 != v103 || v115 != v105)
            {
              v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, v103, v105, 0);
              v113 = v106 + 1;
              v3 += 16;
              if ((v117 & 1) == 0)
                continue;
            }
            goto LABEL_158;
          }

          swift_bridgeObjectRelease(v105);
          v13 = v196;
          v3 = (unint64_t)v197;
          if (!v196)
            goto LABEL_265;
          goto LABEL_161;
        }
        v106 = 0;
LABEL_158:
        v98 = v105;
LABEL_159:

        swift_bridgeObjectRelease(v98);
        v13 = v196;
        v3 = (unint64_t)v197;
        if (v100 >= v106)
          goto LABEL_124;
        if (!v196)
          goto LABEL_265;
LABEL_161:
        v89 = *(void **)(v13 + 8 * v90);
        *(_QWORD *)(v13 + 8 * v90) = *(_QWORD *)(v13 + 8 * v91);
        *(_QWORD *)(v13 + 8 * v91) = v89;
        --v90;
        if (v91 == v195)
          goto LABEL_124;
      }
      v107 = v193;
      v108 = 1;
      while (v86 != v108)
      {
        v100 = v108;
        v109 = *(v107 - 1);
        v110 = *v107;
        if (v109 != v95 || v110 != v97)
        {
          v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v110, v95, v97, 0);
          v108 = v100 + 1;
          v107 += 2;
          if ((v112 & 1) == 0)
            continue;
        }
        goto LABEL_134;
      }
      v3 = (unint64_t)v197;
      v88 = v199;
LABEL_123:

      swift_bridgeObjectRelease(v97);
      v13 = v196;
LABEL_124:
      v15 = v191 + 1;
      if (v191 + 1 != v183)
        continue;
      break;
    }
    v15 = v183;
    v11 = v187;
    v12 = v195;
LABEL_166:
    if (v15 < v12)
      goto LABEL_255;
    v192 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001FA388(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v119 = *((_QWORD *)v11 + 2);
    v118 = *((_QWORD *)v11 + 3);
    v120 = v119 + 1;
    v13 = v196;
    if (v119 >= v118 >> 1)
    {
      v170 = sub_1001FA388((char *)(v118 > 1), v119 + 1, 1, v11);
      v13 = v196;
      v11 = v170;
    }
    *((_QWORD *)v11 + 2) = v120;
    v3 = (unint64_t)(v11 + 32);
    v121 = &v11[16 * v119 + 32];
    *(_QWORD *)v121 = v195;
    *((_QWORD *)v121 + 1) = v192;
    if (!v119)
    {
      v120 = 1;
LABEL_214:
      v14 = v186;
      v12 = v192;
      v3 = (unint64_t)v197;
      if (v192 >= v186)
        goto LABEL_224;
      continue;
    }
    break;
  }
  while (2)
  {
    v122 = v120 - 1;
    if (v120 >= 4)
    {
      v127 = (_QWORD *)(v3 + 16 * v120);
      v128 = *(v127 - 8);
      v129 = *(v127 - 7);
      v133 = __OFSUB__(v129, v128);
      v130 = v129 - v128;
      if (v133)
        goto LABEL_243;
      v132 = *(v127 - 6);
      v131 = *(v127 - 5);
      v133 = __OFSUB__(v131, v132);
      v125 = v131 - v132;
      v126 = v133;
      if (v133)
        goto LABEL_244;
      v134 = v120 - 2;
      v135 = (uint64_t *)(v3 + 16 * (v120 - 2));
      v137 = *v135;
      v136 = v135[1];
      v133 = __OFSUB__(v136, v137);
      v138 = v136 - v137;
      if (v133)
        goto LABEL_246;
      v133 = __OFADD__(v125, v138);
      v139 = v125 + v138;
      if (v133)
        goto LABEL_249;
      if (v139 >= v130)
      {
        v157 = (uint64_t *)(v3 + 16 * v122);
        v159 = *v157;
        v158 = v157[1];
        v133 = __OFSUB__(v158, v159);
        v160 = v158 - v159;
        if (v133)
          goto LABEL_253;
        v150 = v125 < v160;
      }
      else
      {
LABEL_185:
        if ((v126 & 1) != 0)
          goto LABEL_245;
        v134 = v120 - 2;
        v140 = (uint64_t *)(v3 + 16 * (v120 - 2));
        v142 = *v140;
        v141 = v140[1];
        v143 = __OFSUB__(v141, v142);
        v144 = v141 - v142;
        v145 = v143;
        if (v143)
          goto LABEL_248;
        v146 = (uint64_t *)(v3 + 16 * v122);
        v148 = *v146;
        v147 = v146[1];
        v133 = __OFSUB__(v147, v148);
        v149 = v147 - v148;
        if (v133)
          goto LABEL_251;
        if (__OFADD__(v144, v149))
          goto LABEL_252;
        if (v144 + v149 < v125)
          goto LABEL_197;
        v150 = v125 < v149;
      }
      if (v150)
        v122 = v134;
    }
    else
    {
      if (v120 == 3)
      {
        v124 = *((_QWORD *)v11 + 4);
        v123 = *((_QWORD *)v11 + 5);
        v133 = __OFSUB__(v123, v124);
        v125 = v123 - v124;
        v126 = v133;
        goto LABEL_185;
      }
      v151 = *((_QWORD *)v11 + 4);
      v152 = *((_QWORD *)v11 + 5);
      v133 = __OFSUB__(v152, v151);
      v144 = v152 - v151;
      v145 = v133;
LABEL_197:
      if ((v145 & 1) != 0)
        goto LABEL_247;
      v153 = (uint64_t *)(v3 + 16 * v122);
      v155 = *v153;
      v154 = v153[1];
      v133 = __OFSUB__(v154, v155);
      v156 = v154 - v155;
      if (v133)
        goto LABEL_250;
      if (v156 < v144)
        goto LABEL_214;
    }
    v161 = v122 - 1;
    if (v122 - 1 >= v120)
      goto LABEL_238;
    if (!v13)
      goto LABEL_266;
    v162 = (uint64_t *)(v3 + 16 * v161);
    v163 = *v162;
    v164 = v122;
    v165 = (_QWORD *)(v3 + 16 * v122);
    v166 = v165[1];
    v167 = (id *)(v13 + 8 * *v162);
    v168 = (id *)(v13 + 8 * *v165);
    v202 = (id *)(v13 + 8 * v166);
    v3 = (unint64_t)v197;
    swift_bridgeObjectRetain(v197);
    sub_1001FB2DC(v167, v168, v202, __dst, v197);
    if (!v194)
    {
      swift_bridgeObjectRelease(v197);
      if (v166 < v163)
        goto LABEL_239;
      if (v164 > *((_QWORD *)v11 + 2))
        goto LABEL_240;
      v194 = 0;
      *v162 = v163;
      v3 = (unint64_t)(v11 + 32);
      *(_QWORD *)&v11[16 * v161 + 40] = v166;
      v169 = *((_QWORD *)v11 + 2);
      if (v164 >= v169)
        goto LABEL_241;
      v120 = v169 - 1;
      memmove(v165, v165 + 2, 16 * (v169 - 1 - v164));
      *((_QWORD *)v11 + 2) = v169 - 1;
      v13 = v196;
      if (v169 <= 2)
        goto LABEL_214;
      continue;
    }
    break;
  }
  v171 = v11;
LABEL_221:
  swift_bridgeObjectRelease(v171);
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)((v203 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v172);
  swift_bridgeObjectRelease_n(v3, 3);
  swift_bridgeObjectRelease(v203);
}

uint64_t sub_1001FCB68(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001FB2A0(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  swift_bridgeObjectRetain(a2);
  sub_1001FBCBC(v9, a2);
  swift_bridgeObjectRelease(a2);
  specialized ContiguousArray._endMutation()(v7);
  return swift_bridgeObjectRelease_n(a2, 2);
}

void sub_1001FCC18()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void **v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void **v25;
  void **v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *object;
  Swift::String v32;
  Swift::Bool v33;
  uint64_t v34;
  id v35;
  NSURL *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  void (*v50)(void ***, __n128);
  uint64_t v51;
  __n128 v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  void **v57;
  void **v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (*v62)(void ***, __n128);
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  void **aBlock;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, void *);
  void *v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v65 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v65 - v11;
  if (v0[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_iTunesCloudFairPlayOfflineEnabled] != 1)
  {
    static Logger.fairPlay.getter(v10);
    v13 = v0;
    v22 = Logger.logObject.getter(v13);
    v23 = static os_log_type_t.debug.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (void **)swift_slowAlloc(32, -1);
      v65 = v2;
      aBlock = v25;
      v26 = v25;
      *(_DWORD *)v24 = 136315138;
      v27 = sub_1001FD2DC();
      v29 = v28;
      v72 = sub_10003D274(v27, v28, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v24 + 4, v24 + 12);

      swift_bridgeObjectRelease(v29);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v65);
      goto LABEL_12;
    }

    v48 = *(void (**)(char *, uint64_t))(v3 + 8);
    v49 = v6;
LABEL_11:
    v48(v49, v2);
LABEL_12:
    v50 = *(void (**)(void ***, __n128))&v13[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    if (v50)
    {
      v51 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
      v69 = (void *)sub_10003F544(&qword_10055A088);
      aBlock = 0;
      LOBYTE(v67) = 0;
      v52 = swift_retain();
      v50(&aBlock, v52);
      sub_10002CA30((uint64_t)v50, v51);
      sub_10003D380(&aBlock);
    }
    goto LABEL_14;
  }
  if ((v0[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeAdamID + 8] & 1) != 0)
  {
    static Logger.fairPlay.getter(v10);
    v13 = v0;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (void **)swift_slowAlloc(32, -1);
      v65 = v2;
      aBlock = v17;
      v18 = v17;
      *(_DWORD *)v16 = 136315138;
      v19 = sub_1001FD2DC();
      v21 = v20;
      v72 = sub_10003D274(v19, v20, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v16 + 4, v16 + 12);

      swift_bridgeObjectRelease(v21);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v65);
      goto LABEL_12;
    }

    v48 = *(void (**)(char *, uint64_t))(v3 + 8);
    v49 = v9;
    goto LABEL_11;
  }
  v30 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeAdamID];
  object = URL.path(percentEncoded:)(0)._object;
  v32._countAndFlagsBits = 0x676B70766F6D2ELL;
  v32._object = (void *)0xE700000000000000;
  v33 = String.hasSuffix(_:)(v32);
  swift_bridgeObjectRelease(object);
  if (v33)
  {
    v35 = objc_allocWithZone((Class)AVURLAsset);
    URL._bridgeToObjectiveC()(v36);
    v38 = v37;
    v39 = objc_msgSend(v35, "initWithURL:options:", v37, 0);

    v40 = objc_allocWithZone((Class)type metadata accessor for FairPlayAsset(0));
    v41 = (void *)FairPlayAsset.init(adamID:avAsset:)(v30, v39);
    v42 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader];
    v43 = swift_allocObject(&unk_1004B5830, 24, 7);
    swift_unknownObjectWeakInit(v43 + 16, v1);
    v44 = swift_allocObject(&unk_1004B5858, 32, 7);
    *(_QWORD *)(v44 + 16) = v43;
    *(_QWORD *)(v44 + 24) = v41;
    v70 = sub_1001FE0B0;
    v71 = v44;
    aBlock = _NSConcreteStackBlock;
    v67 = 1107296256;
    v68 = sub_1001FDDD8;
    v69 = &unk_1004B5870;
    v45 = _Block_copy(&aBlock);
    v46 = v71;
    v47 = v41;
    swift_release(v46);
    objc_msgSend(v42, "createSessionWithAsset:completion:", v47, v45);
    _Block_release(v45);

    return;
  }
  static Logger.fairPlay.getter(v34);
  v53 = v0;
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.debug.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = (void **)swift_slowAlloc(32, -1);
    v65 = v2;
    aBlock = v57;
    v58 = v57;
    *(_DWORD *)v56 = 136315138;
    v59 = sub_1001FD2DC();
    v61 = v60;
    v72 = sub_10003D274(v59, v60, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v56 + 4, v56 + 12);

    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s Not a FairPlay asset, finishing operation.", v56, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v56, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v65);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  }
  v62 = *(void (**)(void ***, __n128))&v53[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  if (v62)
  {
    v63 = *(_QWORD *)&v53[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    v69 = (void *)sub_10003F544(&qword_10055A088);
    aBlock = 0;
    LOBYTE(v67) = 0;
    v64 = swift_retain();
    v62(&aBlock, v64);
    sub_10002CA30((uint64_t)v62, v63);
    sub_10003D380(&aBlock);
  }
LABEL_14:
  sub_100044BF0();
}

unint64_t sub_1001FD2DC()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix + 8);
  if (v2)
  {
    v3 = *v1;
  }
  else
  {
    v3 = 0xD00000000000001CLL;
    *v1 = 0xD00000000000001CLL;
    v1[1] = 0x8000000100435390;
    swift_bridgeObjectRelease(0);
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1001FD350(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t aBlock[5];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v58 - v13;
  a3 += 16;
  swift_beginAccess(a3, v65, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    v16 = (void *)result;
    if (a2)
    {
      v17 = swift_errorRetain(a2);
      static Logger.fairPlay.getter(v17);
      v18 = v16;
      v19 = a4;
      v20 = v18;
      v21 = v19;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(32, -1);
        v25 = swift_slowAlloc(64, -1);
        v59 = v25;
        *(_DWORD *)v24 = 136315651;
        v61 = v9;
        aBlock[0] = v25;
        v26 = sub_1001FD2DC();
        v28 = v27;
        v64 = sub_10003D274(v26, v27, aBlock);
        v60 = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v24 + 4, v24 + 12);

        swift_bridgeObjectRelease(v28);
        *(_WORD *)(v24 + 12) = 2160;
        v64 = 1752392040;
        v29 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v24 + 14, v24 + 22);
        *(_WORD *)(v24 + 22) = 2081;
        v30 = FairPlayAsset.description.getter(v29);
        v32 = v31;
        v64 = sub_10003D274(v30, v31, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v24 + 24, v24 + 32);

        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s Error creating content key session for adamID %{private,mask.hash}s, failing operation.", (uint8_t *)v24, 0x20u);
        v33 = v59;
        swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v24, -1, -1);

        (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v60);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      }
      swift_errorRetain(a2);
      sub_10037B65C(a2, 1);
      swift_errorRelease(a2);

      v40 = a2;
    }
    else
    {
      if (a1)
      {
        v34 = *(void **)(result + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader);
        v35 = swift_allocObject(&unk_1004B58A8, 32, 7);
        *(_QWORD *)(v35 + 16) = v16;
        *(_QWORD *)(v35 + 24) = a4;
        aBlock[4] = (uint64_t)sub_1001FE128;
        v63 = v35;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100004B9C;
        aBlock[3] = (uint64_t)&unk_1004B58C0;
        v36 = _Block_copy(aBlock);
        v37 = v63;
        v38 = v16;
        v39 = a4;
        swift_unknownObjectRetain(a1);
        swift_unknownObjectRetain(v34);
        swift_release(v37);
        objc_msgSend(v34, "startKeyRequestWithSession:completion:", a1, v36);

        _Block_release(v36);
        swift_unknownObjectRelease(a1);
        return swift_unknownObjectRelease(v34);
      }
      v61 = v9;
      static Logger.fairPlay.getter(result);
      v41 = v16;
      v42 = a4;
      v43 = v41;
      v44 = v42;
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc(32, -1);
        v48 = swift_slowAlloc(64, -1);
        aBlock[0] = v48;
        *(_DWORD *)v47 = 136315651;
        v49 = sub_1001FD2DC();
        v51 = v50;
        v64 = sub_10003D274(v49, v50, aBlock);
        v60 = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 4, v47 + 12);

        swift_bridgeObjectRelease(v51);
        *(_WORD *)(v47 + 12) = 2160;
        v64 = 1752392040;
        v52 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 14, v47 + 22);
        *(_WORD *)(v47 + 22) = 2081;
        v53 = FairPlayAsset.description.getter(v52);
        v55 = v54;
        v64 = sub_10003D274(v53, v54, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 24, v47 + 32);

        swift_bridgeObjectRelease(v55);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s No error or session returned creating content key session for adamID %{private,mask.hash}s, failing operation.", (uint8_t *)v47, 0x20u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);

        (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v60);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v8);
      }
      v56 = sub_1001FE0B8();
      v57 = swift_allocError(&type metadata for FetchFairPlayKeyOperationError, v56, 0, 0);
      sub_10037B65C(v57, 1);

      v40 = v57;
    }
    return swift_errorRelease(v40);
  }
  return result;
}

void sub_1001FD8FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t *, __n128);
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v48 - v12;
  if (a1)
  {
    v14 = swift_errorRetain(a1);
    static Logger.fairPlay.getter(v14);
    v15 = a2;
    v16 = a3;
    v17 = v15;
    v18 = v16;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(32, -1);
      v48 = swift_slowAlloc(64, -1);
      v52 = v48;
      *(_DWORD *)v21 = 136315651;
      v50 = v6;
      v22 = sub_1001FD2DC();
      v24 = v23;
      v51 = sub_10003D274(v22, v23, &v52);
      v49 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 4, v21 + 12);

      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v21 + 12) = 2160;
      v51 = 1752392040;
      v25 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2081;
      v26 = FairPlayAsset.description.getter(v25);
      v28 = v27;
      v51 = sub_10003D274(v26, v27, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 24, v21 + 32);

      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s Error fetching key for adamID %{private,mask.hash}s, failing operation.", (uint8_t *)v21, 0x20u);
      v29 = v48;
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v50);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    swift_errorRetain(a1);
    sub_10037B65C(a1, 1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    static Logger.fairPlay.getter(v11);
    v30 = a2;
    v31 = a3;
    v32 = (char *)v30;
    v33 = v31;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(32, -1);
      v37 = swift_slowAlloc(64, -1);
      v52 = v37;
      *(_DWORD *)v36 = 136315651;
      v50 = v6;
      v38 = sub_1001FD2DC();
      v40 = v39;
      v51 = sub_10003D274(v38, v39, &v52);
      v49 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v36 + 4, v36 + 12);

      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v36 + 12) = 2160;
      v51 = 1752392040;
      v41 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v36 + 14, v36 + 22);
      *(_WORD *)(v36 + 22) = 2081;
      v42 = FairPlayAsset.description.getter(v41);
      v44 = v43;
      v51 = sub_10003D274(v42, v43, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v36 + 24, v36 + 32);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s Successfully fetched key for adamID %{private,mask.hash}s, finishing operation.", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    }
    v45 = *(void (**)(uint64_t *, __n128))&v32[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    if (v45)
    {
      v46 = *(_QWORD *)&v32[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
      v54 = sub_10003F544(&qword_10055A088);
      v52 = 0;
      v53 = 0;
      v47 = swift_retain();
      v45(&v52, v47);
      sub_10002CA30((uint64_t)v45, v46);
      sub_10003D380(&v52);
    }
    sub_100044BF0();
  }
}

uint64_t sub_1001FDDD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

  return swift_unknownObjectRelease(a2);
}

double sub_1001FDE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_10003A858(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input), *(_BYTE *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input + 8));
  v1 = v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeLocation;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0
                                                           + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix
                                                           + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1001FDF60()
{
  return type metadata accessor for FetchFairPlayKeyOperation(0);
}

uint64_t type metadata accessor for FetchFairPlayKeyOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_10055A040;
  if (!qword_10055A040)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchFairPlayKeyOperation);
  return result;
}

uint64_t sub_1001FDFA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\t";
  v4[1] = &unk_1003CE448;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1003CE460;
    v4[4] = &unk_1003CE478;
    v4[5] = &unk_1003CE490;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 368);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001FE040@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = v1 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input);
  *(_QWORD *)a1 = v3;
  v4 = *(_BYTE *)(v2 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  return sub_10003A8DC(v3, v4);
}

uint64_t sub_1001FE060()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001FE084()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FE0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001FD350(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

unint64_t sub_1001FE0B8()
{
  unint64_t result;

  result = qword_10055A090;
  if (!qword_10055A090)
  {
    result = swift_getWitnessTable(&unk_1003CE558, &type metadata for FetchFairPlayKeyOperationError);
    atomic_store(result, (unint64_t *)&qword_10055A090);
  }
  return result;
}

uint64_t sub_1001FE0FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001FE128(uint64_t a1)
{
  uint64_t v1;

  sub_1001FD8FC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t storeEnumTagSinglePayload for FetchFairPlayKeyOperationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001FE170 + 4 * byte_1003CE3F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001FE190 + 4 * byte_1003CE3F5[v4]))();
}

_BYTE *sub_1001FE170(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001FE190(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001FE198(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001FE1A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001FE1A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001FE1B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchFairPlayKeyOperationError()
{
  return &type metadata for FetchFairPlayKeyOperationError;
}

unint64_t sub_1001FE1D0()
{
  unint64_t result;

  result = qword_10055A098;
  if (!qword_10055A098)
  {
    result = swift_getWitnessTable(&unk_1003CE530, &type metadata for FetchFairPlayKeyOperationError);
    atomic_store(result, (unint64_t *)&qword_10055A098);
  }
  return result;
}

uint64_t (*sub_1001FE21C())(uint64_t a1)
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v1 = v0[28];
  v2 = v0[29];
  if (v1)
  {
    v3 = (uint64_t (*)(uint64_t))v0[28];
  }
  else
  {
    v4 = v0[25];
    v3 = sub_100181074;
    v0[28] = sub_100181074;
    v0[29] = v4;
    swift_retain_n(v4, 2);
    sub_10002CA30(0, v2);
  }
  sub_10002CA20(v1, v2);
  return v3;
}

uint64_t sub_1001FE294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80), a2);
  dispatch thunk of LibraryDataProviderProtocol.libraryActionController.getter(v16, ObjectType, v5);
  v7 = v17;
  v8 = v18;
  sub_10003A834(v16, v17);
  v9 = dispatch thunk of LibraryActionControllerProtocol.updateFeed(podcast:context:)(a1, a2, 128, v7, v8);
  v10 = swift_allocObject(&unk_1004B5B20, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = swift_allocObject(&unk_1004B5B48, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  swift_bridgeObjectRetain_n(a2, 2);
  v15[3] = v12;
  v15[4] = &protocol witness table for OS_dispatch_queue;
  v15[0] = static OS_dispatch_queue.main.getter(v13);
  Promise.then(perform:orCatchError:on:)(sub_10020252C, v10, sub_100202534, v11, v15);
  swift_release(v9);
  swift_release(v10);
  swift_release(v11);
  sub_10003D380(v15);
  return sub_10003D380(v16);
}

_QWORD *sub_1001FE3D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;

  v1 = v0;
  v2 = v0[30];
  if (v2)
  {
    v3 = swift_retain();
    dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)(v1, v3);
    swift_release(v2);
  }
  swift_release(v1[9]);
  swift_unknownObjectRelease(v1[10]);
  sub_10003D380(v1 + 12);
  swift_release(v1[17]);
  swift_release(v1[18]);
  sub_10003D380(v1 + 19);
  swift_release(v1[24]);
  swift_release(v1[25]);
  swift_release(v1[26]);
  sub_10002CA30(v1[28], v1[29]);
  swift_release(v1[30]);
  return v1;
}

uint64_t sub_1001FE470()
{
  uint64_t v0;

  sub_1001FE3D8();
  return swift_deallocClassInstance(v0, 248, 7);
}

uint64_t type metadata accessor for CarPlayLibraryShowProvider()
{
  return objc_opt_self(_TtC8Podcasts26CarPlayLibraryShowProvider);
}

uint64_t sub_1001FE4B0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  v2 = v1;
  v3 = Episode.uuid.getter(a1);
  v5 = v4;
  v6 = EpisodeStateController.stateMachine(for:)(v3, v4);
  swift_bridgeObjectRelease(v5);
  v7 = *(_QWORD *)(v2 + 240);
  *(_QWORD *)(v2 + 240) = v6;
  result = swift_release(v7);
  v9 = *(_QWORD *)(v2 + 240);
  if (v9)
  {
    v10 = swift_retain();
    dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)(v2, v10);
    result = swift_release(v9);
    v11 = *(_QWORD *)(v2 + 240);
    if (v11)
    {
      v12 = swift_allocObject(&unk_1004B5A30, 24, 7);
      swift_weakInit(v12 + 16, v2);
      v13 = swift_retain();
      dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v2, sub_1002024BC, v12, v13);
      swift_release(v11);
      return swift_release(v12);
    }
  }
  return result;
}

uint64_t sub_1001FE588(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD v13[2];
  _BYTE v14[24];

  v3 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    dispatch thunk of EpisodeStateMachine.currentState.getter(result);
    v8 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)(v5);
    v10 = v9;
    sub_10003F970((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v13[0] = v8;
    v13[1] = v10;
    CurrentValueSubject.send(_:)(v13, v11);
    swift_bridgeObjectRelease(v10);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1001FE66C(_BYTE *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  const char *v12;
  unint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = "Feed update was not successful from CarPlay store page";
  if (*a1)
    v12 = "Feed update was successful from CarPlay store page";
  v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
  static Logger.podcastsStatesCoordination.getter(v8);
  v14 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain(v13);
  v16 = Logger.logObject.getter(v15);
  v17 = v14;
  if (os_log_type_enabled(v16, v14))
  {
    v23 = a2;
    if (v11)
      v18 = 0xD000000000000032;
    else
      v18 = 0xD000000000000036;
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v24 = v6;
    v21 = v20;
    v26 = v20;
    *(_DWORD *)v19 = 136315395;
    swift_bridgeObjectRetain(v13);
    v25 = sub_10003D274(v18, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v19 + 12) = 2081;
    swift_bridgeObjectRetain(a3);
    v25 = sub_10003D274(v23, a3, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s adamID: %{private}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v24);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(v13, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1001FE8C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.podcastsStatesCoordination.getter(v8);
  v11 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a3);
  v12 = swift_errorRetain(a1);
  v13 = Logger.logObject.getter(v12);
  v14 = v11;
  if (os_log_type_enabled(v13, v11))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v24 = v6;
    v17 = v16;
    v26 = v16;
    *(_DWORD *)v15 = 136380931;
    swift_bridgeObjectRetain(a3);
    v25 = sub_10003D274(a2, a3, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v15 + 12) = 2080;
    v25 = a1;
    swift_errorRetain(a1);
    v18 = sub_10003F544((uint64_t *)&unk_10055A340);
    v19 = String.init<A>(describing:)(&v25, v18);
    v21 = v20;
    v25 = sub_10003D274(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error triggering feed update from CarPlay store page for podcast adamID: %{private}s, with error: %s.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v24);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1001FEB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;

  v1 = sub_10003F544(&qword_10055A1A8);
  v2 = *(_QWORD *)(v1 - 8);
  v79 = v1;
  v80 = v2;
  __chkstk_darwin(v1);
  v75 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10003F544(&qword_10055A1B0);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v78 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055A1B8);
  v6 = *(_QWORD *)(v5 - 8);
  v86 = v5;
  v87 = v6;
  __chkstk_darwin(v5);
  v81 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_10003F544(&qword_10055A1C0);
  v90 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v82 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10003F544(&qword_10055A1C8);
  v91 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v84 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_10003F544((uint64_t *)&unk_10055A1D0);
  v95 = *(_QWORD *)(v92 - 8);
  v10 = __chkstk_darwin(v92);
  v74 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v94 = (char *)&v72 - v12;
  v13 = sub_10003F544((uint64_t *)&unk_100555140);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_10003F544((uint64_t *)&unk_1005588E0);
  v77 = *(_QWORD *)(v93 - 8);
  v17 = v77;
  v18 = __chkstk_darwin(v93);
  v73 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v72 - v21;
  v23 = LibraryShowProvider.pageContent.getter(v20);
  v96 = v23;
  v24 = sub_10003F544(&qword_100552190);
  v25 = sub_10003F544(&qword_100553E70);
  v26 = sub_10002F9C8((unint64_t *)&unk_100555170, &qword_100552190, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.compactMap<A>(_:)(sub_1001FF2FC, 0, v24, v25, v26);
  swift_release(v23);
  v27 = sub_10002F9C8((unint64_t *)&unk_1005588F0, (uint64_t *)&unk_100555140, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v76 = v22;
  Publisher.removeDuplicates(by:)(sub_1001FF438, 0, v13, v27);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v28 = v0;
  v96 = *(_QWORD *)(v0 + 192);
  v29 = sub_10003F544(&qword_1005588A8);
  v30 = sub_10002F9C8(&qword_10055A1E0, &qword_1005588A8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v31 = v94;
  Publisher<>.removeDuplicates()(v29, v30, &protocol witness table for String);
  v32 = v73;
  v33 = v22;
  v34 = v93;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v73, v33, v93);
  v35 = v74;
  v36 = v92;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v74, v31, v92);
  v96 = *(_QWORD *)(v0 + 208);
  swift_retain();
  v37 = sub_10003F544((uint64_t *)&unk_100555110);
  v38 = sub_10002F9C8((unint64_t *)&unk_100555180, (uint64_t *)&unk_1005588E0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v39 = sub_10002F9C8((unint64_t *)&unk_10055A1E8, (uint64_t *)&unk_10055A1D0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v40 = sub_10002F9C8(&qword_1005564C0, (uint64_t *)&unk_100555110, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v41 = v75;
  Publishers.CombineLatest3.init(_:_:_:)(v32, v35, &v96, v34, v36, v37, v38, v39, v40);
  v42 = swift_allocObject(&unk_1004B5A30, 24, 7);
  v43 = v28;
  swift_weakInit(v42 + 16, v28);
  v44 = swift_allocObject(&unk_1004B5A58, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_100201C08;
  *(_QWORD *)(v44 + 24) = v42;
  v45 = static Subscribers.Demand.unlimited.getter(v44);
  v46 = sub_10003F544(&qword_10055A1F8);
  v47 = sub_10002F9C8(&qword_10055A200, &qword_10055A1A8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v48 = sub_10002F9C8(&qword_10055A208, &qword_10055A1F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v50 = v78;
  v49 = v79;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v45, sub_100201C34, v44, v79, v46, v47, v48);
  swift_release(v44);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v41, v49);
  v51 = swift_allocObject(&unk_1004B5A30, 24, 7);
  swift_weakInit(v51 + 16, v43);
  v52 = swift_allocObject(&unk_1004B5A80, 32, 7);
  *(_QWORD *)(v52 + 16) = sub_100201C68;
  *(_QWORD *)(v52 + 24) = v51;
  v53 = static Subscribers.Demand.unlimited.getter(v52);
  v54 = sub_10003F544(&qword_10055A210);
  v55 = sub_10002F9C8(&qword_10055A218, &qword_10055A1B0, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v56 = sub_10002F9C8((unint64_t *)&unk_10055A220, &qword_10055A210, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v57 = v81;
  v58 = v53;
  v59 = v83;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v58, sub_100201C70, v52, v83, v54, v55, v56);
  swift_release(v52);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v50, v59);
  v60 = sub_10003F544(&qword_1005545E0);
  v61 = sub_10002F9C8(&qword_10055A230, &qword_10055A1B8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v62 = v82;
  v63 = v86;
  Publisher.compactMap<A>(_:)(sub_100201A94, 0, v86, v60, v61);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v57, v63);
  v64 = swift_allocObject(&unk_1004B5AA8, 24, 7);
  *(_QWORD *)(v64 + 16) = 2;
  v65 = sub_10002F9C8(&qword_10055A238, &qword_10055A1C0, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v66 = v84;
  v67 = v88;
  Publisher.filter(_:)(sub_100201CB0, v64, v88, v65);
  swift_release(v64);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v62, v67);
  v68 = sub_10002F9C8(&qword_10055A240, &qword_10055A1C8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v69 = v89;
  v70 = Publisher.eraseToAnyPublisher()(v89, v68);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v66, v69);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v92);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v93);
  return v70;
}

uint64_t sub_1001FF2FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100186174(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 3)
  {
    v10 = &v6[*(int *)(sub_10003F544((uint64_t *)&unk_100555340) + 48)];
    sub_1001D0EFC((uint64_t)v6, (uint64_t)v9);
    v11 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = *(_QWORD *)&v9[*(int *)(v7 + 24)];
    swift_bridgeObjectRetain(v12);
    result = sub_10003F970((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for ModernPage);
  }
  else
  {
    result = sub_10003F970((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for PageContent);
    v12 = 0;
  }
  *a2 = v12;
  return result;
}

void sub_1001FF438(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double (*v28)(char *, uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  double (*v53)(uint64_t, unint64_t, uint64_t, __n128);
  __n128 v54;
  char *v55;
  __n128 v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  char v80;
  char v81;
  __n128 v82;
  int v83;
  char v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  char v88;
  char v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t, uint64_t, __n128);
  __n128 v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t (*v119)(char *, unint64_t, uint64_t, __n128);
  __n128 v120;
  _QWORD *v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[5];
  _QWORD *v169;
  _QWORD *v170;

  v4 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v159 = *(_QWORD *)(v4 - 8);
  v160 = v4;
  v5 = __chkstk_darwin(v4);
  v162 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v152 - v7;
  v166 = type metadata accessor for ModernShelf(0);
  v9 = *(_QWORD *)(v166 - 8);
  v10 = __chkstk_darwin(v166);
  v164 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v161 = (char *)&v152 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (uint64_t)&v152 - v15;
  v17 = __chkstk_darwin(v14);
  v156 = (char *)&v152 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v152 - v20;
  __chkstk_darwin(v19);
  v23 = *a1;
  v24 = *a2;
  v25 = *(_QWORD *)(*a1 + 16);
  v165 = v9;
  v157 = v23;
  v158 = v24;
  v163 = v25;
  if (v25)
  {
    v155 = (char *)&v152 - v22;
    v26 = v23 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v27 = *(_QWORD *)(v9 + 72);
    v28 = *(double (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v29 = swift_bridgeObjectRetain(v23);
    v30 = v166;
    while (1)
    {
      v31.n128_f64[0] = v28(v21, v26, v30, v29);
      v32.n128_f64[0] = ModernShelf.itemPresentation.getter(v31);
      v33 = ModernShelf.ItemPresentation.itemKind.getter(v32);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v8, v160);
      v34 = ModernShelf.ItemKind.rawValue.getter(v33);
      v36 = v35;
      v38 = ModernShelf.ItemKind.rawValue.getter(40);
      v39 = v37;
      if (v34 == v38 && v36 == v37)
      {
        swift_bridgeObjectRelease(v157);
        swift_bridgeObjectRelease(v36);
        goto LABEL_11;
      }
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v38, v37, 0);
      swift_bridgeObjectRelease(v36);
      v41 = swift_bridgeObjectRelease(v39);
      if ((v40 & 1) != 0)
        break;
      v9 = v165;
      v30 = v166;
      (*(void (**)(char *, uint64_t, __n128))(v165 + 8))(v21, v166, v41);
      v26 += v27;
      if (!--v25)
      {
        swift_bridgeObjectRelease(v157);
        v42 = v30;
LABEL_19:
        v24 = v158;
        v43 = (uint64_t)v162;
        goto LABEL_25;
      }
    }
    v36 = v157;
LABEL_11:
    v9 = v165;
    v44 = swift_bridgeObjectRelease(v36);
    v45 = v155;
    v42 = v166;
    v46 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v9 + 32))(v155, v21, v166, v44);
    v47 = ModernShelf.items.getter(v46);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v42);
    v48 = (uint64_t)sub_10034EEB4(v47);
    swift_bridgeObjectRelease(v47);
    if (!v48)
    {
      v25 = 0;
      goto LABEL_19;
    }
    v43 = (uint64_t)v162;
    if ((unint64_t)v48 >> 62)
    {
      if (v48 >= 0)
        v49 = v48 & 0xFFFFFFFFFFFFFF8;
      else
        v49 = v48;
      swift_bridgeObjectRetain(v48);
      v24 = _CocoaArrayWrapper.endIndex.getter(v49);
      swift_bridgeObjectRelease(v48);
      if (v24)
        goto LABEL_14;
    }
    else
    {
      v24 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v24)
      {
LABEL_14:
        if ((v48 & 0xC000000000000001) != 0)
          goto LABEL_137;
        if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_139;
        }
        v25 = *(_QWORD *)(v48 + 32);
        swift_retain();
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease(v48);
    v25 = 0;
    v24 = v158;
    goto LABEL_25;
  }
  v42 = v166;
  v43 = (uint64_t)v162;
  while (1)
  {
LABEL_25:
    v50 = *(char **)(v24 + 16);
    v162 = v50;
    if (!v50)
      goto LABEL_46;
    v51 = v24 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v52 = *(_QWORD *)(v9 + 72);
    v53 = *(double (**)(uint64_t, unint64_t, uint64_t, __n128))(v9 + 16);
    v54 = swift_bridgeObjectRetain(v24);
    v55 = v50;
    while (1)
    {
      v56.n128_f64[0] = v53(v16, v51, v42, v54);
      v57.n128_f64[0] = ModernShelf.itemPresentation.getter(v56);
      v58 = ModernShelf.ItemPresentation.itemKind.getter(v57);
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v43, v160);
      v59 = ModernShelf.ItemKind.rawValue.getter(v58);
      v61 = v60;
      v63 = ModernShelf.ItemKind.rawValue.getter(40);
      v64 = v62;
      if (v59 == v63 && v61 == v62)
      {
        v24 = v158;
        swift_bridgeObjectRelease(v158);
        swift_bridgeObjectRelease(v61);
        goto LABEL_34;
      }
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v61, v63, v62, 0);
      swift_bridgeObjectRelease(v61);
      v66 = swift_bridgeObjectRelease(v64);
      if ((v65 & 1) != 0)
        break;
      v42 = v166;
      (*(void (**)(uint64_t, uint64_t, __n128))(v165 + 8))(v16, v166, v66);
      v51 += v52;
      if (!--v55)
      {
        v24 = v158;
        swift_bridgeObjectRelease(v158);
        v67 = 0;
        v9 = v165;
        goto LABEL_47;
      }
    }
    v24 = v158;
    v61 = v158;
LABEL_34:
    v42 = v166;
    v68 = swift_bridgeObjectRelease(v61);
    v9 = v165;
    v69 = v156;
    v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v165 + 32))(v156, v16, v42, v68);
    v71 = ModernShelf.items.getter(v70);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v69, v42);
    v16 = (uint64_t)sub_10034EEB4(v71);
    swift_bridgeObjectRelease(v71);
    if (!v16)
      goto LABEL_46;
    if (!((unint64_t)v16 >> 62))
    {
      if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      goto LABEL_45;
    }
    v72 = v16 >= 0 ? v16 & 0xFFFFFFFFFFFFFF8 : v16;
    swift_bridgeObjectRetain(v16);
    v73 = _CocoaArrayWrapper.endIndex.getter(v72);
    swift_bridgeObjectRelease(v16);
    if (v73)
      break;
LABEL_45:
    swift_bridgeObjectRelease(v16);
LABEL_46:
    v67 = 0;
LABEL_47:
    v159 = v25;
    v155 = (char *)v67;
    if (v25)
    {
      swift_retain();
      v16 = ShowHeader.episodeToPlay.getter(v74);
      swift_release(v25);
      if (!v67)
      {
        v75 = 0;
        if (!v16)
          goto LABEL_65;
        v76 = 0;
        goto LABEL_54;
      }
    }
    else
    {
      v75 = 0;
      if (!v67)
      {
LABEL_65:
        LODWORD(v156) = 1;
        v85 = 0;
        goto LABEL_85;
      }
      v16 = 0;
    }
    swift_retain();
    v76 = ShowHeader.episodeToPlay.getter(v77);
    swift_release(v67);
    if (!v16)
    {
      v79 = 0;
      v75 = 0;
      v85 = 0;
      v83 = 1;
      v84 = 1;
      LODWORD(v156) = 1;
      if (!v76)
        goto LABEL_85;
LABEL_57:
      v86 = swift_retain();
      v87 = Episode.adamId.getter(v86);
      v89 = v88;
      swift_release(v76);
      if ((v84 & 1) != 0)
      {
        if ((v89 & 1) == 0)
        {
          LODWORD(v156) = 0;
LABEL_70:
          v75 = v16;
          v85 = v76;
          v24 = v158;
          goto LABEL_85;
        }
      }
      else if ((v89 & 1) != 0 || v79 != v87)
      {
        LODWORD(v156) = 0;
        goto LABEL_70;
      }
      if (v83)
      {
        Episode.uuid.getter(v90);
        v92 = v91;
        v24 = v158;
        if (v91)
          goto LABEL_78;
      }
      else
      {
        v94 = Episode.uuid.getter(v90);
        v92 = v95;
        v97 = Episode.uuid.getter(v96);
        v99 = v98;
        if (v92)
        {
          v24 = v158;
          if (v98)
          {
            if (v94 == v97 && v92 == v98)
            {
              LODWORD(v156) = 1;
              v99 = v92;
            }
            else
            {
              LODWORD(v156) = _stringCompareWithSmolCheck(_:_:expecting:)(v94, v92, v97, v98, 0);
            }
            v42 = v166;
            swift_bridgeObjectRelease(v92);
            v92 = v99;
          }
          else
          {
            LODWORD(v156) = 0;
            v42 = v166;
          }
          goto LABEL_83;
        }
        v92 = v98;
        v42 = v166;
        v24 = v158;
        if (v98)
        {
LABEL_78:
          LODWORD(v156) = 0;
          goto LABEL_83;
        }
      }
      goto LABEL_79;
    }
LABEL_54:
    v78 = swift_retain();
    v79 = Episode.adamId.getter(v78);
    v81 = v80;
    swift_release(v16);
    if (v76)
    {
      v83 = 0;
      v84 = v81 & 1;
      goto LABEL_57;
    }
    if ((v81 & 1) == 0)
    {
      v85 = 0;
      LODWORD(v156) = 0;
      v75 = v16;
      goto LABEL_85;
    }
    Episode.uuid.getter(v82);
    v76 = 0;
    if (v93)
    {
      v92 = v93;
      LODWORD(v156) = 0;
LABEL_83:
      swift_bridgeObjectRelease(v92);
      goto LABEL_84;
    }
LABEL_79:
    LODWORD(v156) = 1;
LABEL_84:
    v75 = v16;
    v85 = v76;
LABEL_85:
    v153 = v85;
    v154 = v75;
    v170 = _swiftEmptyArrayStorage;
    if (v163)
    {
      v160 = v157 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v100 = *(_QWORD *)(v9 + 72);
      v101 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
      v102 = swift_bridgeObjectRetain(v157);
      v103 = 0;
      v16 = (uint64_t)&qword_1005545F0;
      v104 = v161;
      do
      {
        v107 = v101(v104, v160 + v100 * v103, v42, v102);
        v108 = ModernShelf.items.getter(v107);
        v169 = _swiftEmptyArrayStorage;
        v109 = *(_QWORD *)(v108 + 16);
        specialized ContiguousArray.reserveCapacity(_:)(v109);
        if (v109)
        {
          v110 = v108 + 32;
          while (1)
          {
            sub_10000A520(v110, (uint64_t)v168);
            v111 = sub_10003F544(&qword_1005545F0);
            v112 = type metadata accessor for LegacyEpisodeLockup(0);
            v113 = swift_dynamicCast(&v167, v168, v111, v112, 6);
            if (!(_DWORD)v113)
              break;
            v114 = v167;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v113);
            v115 = v169[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v115);
            v116 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, v114);
            specialized ContiguousArray._endMutation()(v116);
            v110 += 40;
            if (!--v109)
              goto LABEL_87;
          }
          v167 = 0;
          swift_release(v169);
          v117 = v167;
          swift_bridgeObjectRelease(v108);
          swift_release(v117);
          v105 = _swiftEmptyArrayStorage;
        }
        else
        {
LABEL_87:
          v105 = v169;
          v106 = swift_bridgeObjectRelease(v108);
        }
        ++v103;
        v42 = v166;
        v104 = v161;
        (*(void (**)(char *, uint64_t, __n128))(v165 + 8))(v161, v166, v106);
        sub_1001732EC((uint64_t)v105);
      }
      while (v103 != v163);
      swift_bridgeObjectRelease(v157);
      v43 = (uint64_t)v170;
      v9 = v165;
      v24 = v158;
    }
    else
    {
      v43 = (uint64_t)_swiftEmptyArrayStorage;
    }
    v170 = _swiftEmptyArrayStorage;
    v118 = v164;
    if (v162)
    {
      v163 = v24 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v161 = *(char **)(v9 + 72);
      v119 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
      v120 = swift_bridgeObjectRetain(v24);
      v9 = 0;
      do
      {
        v16 = v43;
        v123 = v119(v118, v163 + (_QWORD)v161 * v9, v42, v120);
        v124 = ModernShelf.items.getter(v123);
        v169 = _swiftEmptyArrayStorage;
        v125 = *(_QWORD *)(v124 + 16);
        specialized ContiguousArray.reserveCapacity(_:)(v125);
        if (v125)
        {
          v126 = v124 + 32;
          while (1)
          {
            sub_10000A520(v126, (uint64_t)v168);
            v127 = sub_10003F544(&qword_1005545F0);
            v128 = type metadata accessor for LegacyEpisodeLockup(0);
            v129 = swift_dynamicCast(&v167, v168, v127, v128, 6);
            if (!(_DWORD)v129)
              break;
            v130 = v167;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v129);
            v131 = v169[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v131);
            v132 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v131, v130);
            specialized ContiguousArray._endMutation()(v132);
            v126 += 40;
            if (!--v125)
              goto LABEL_99;
          }
          v167 = 0;
          swift_release(v169);
          v133 = v167;
          swift_bridgeObjectRelease(v124);
          swift_release(v133);
          v121 = _swiftEmptyArrayStorage;
        }
        else
        {
LABEL_99:
          v121 = v169;
          v122 = swift_bridgeObjectRelease(v124);
        }
        v43 = v16;
        ++v9;
        v118 = v164;
        v42 = v166;
        (*(void (**)(char *, uint64_t, __n128))(v165 + 8))(v164, v166, v122);
        sub_1001732EC((uint64_t)v121);
      }
      while ((char *)v9 != v162);
      swift_bridgeObjectRelease(v158);
      v134 = (uint64_t)v170;
    }
    else
    {
      v134 = (uint64_t)_swiftEmptyArrayStorage;
    }
    v135 = v159;
    if ((unint64_t)v43 >> 62)
    {
      if (v43 < 0)
        v150 = v43;
      else
        v150 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      v136 = _CocoaArrayWrapper.endIndex.getter(v150);
      swift_bridgeObjectRelease(v43);
      if (!v136)
      {
LABEL_128:
        swift_bridgeObjectRelease(v43);
        v138 = _swiftEmptyArrayStorage;
        if ((unint64_t)v134 >> 62)
          goto LABEL_129;
        goto LABEL_117;
      }
    }
    else
    {
      v136 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v136)
        goto LABEL_128;
    }
    v168[0] = _swiftEmptyArrayStorage;
    v48 = (uint64_t)v168;
    sub_10017B0DC(0, v136 & ~(v136 >> 63), 0);
    if (v136 < 0)
    {
      __break(1u);
      goto LABEL_136;
    }
    v137 = 0;
    v138 = (_QWORD *)v168[0];
    do
    {
      v139 = *(_QWORD *)(v43 + 8 * v137 + 32);
      v140 = swift_retain();
      v141 = LegacyLockup.adamId.getter(v140);
      swift_release(v139);
      v168[0] = v138;
      v9 = v138[2];
      v142 = v138[3];
      v42 = v9 + 1;
      if (v9 >= v142 >> 1)
      {
        sub_10017B0DC(v142 > 1, v9 + 1, 1);
        v138 = (_QWORD *)v168[0];
      }
      ++v137;
      v138[2] = v42;
      v138[v9 + 4] = v141;
    }
    while (v136 != v137);
    swift_bridgeObjectRelease(v43);
    if ((unint64_t)v134 >> 62)
    {
LABEL_129:
      if (v134 < 0)
        v151 = v134;
      else
        v151 = v134 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v134);
      v16 = _CocoaArrayWrapper.endIndex.getter(v151);
      swift_bridgeObjectRelease(v134);
      if (!v16)
      {
LABEL_133:
        swift_bridgeObjectRelease(v134);
        v144 = _swiftEmptyArrayStorage;
LABEL_134:
        sub_100163488(v138, v144);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v144);
        swift_release(v135);
        swift_release(v155);
        swift_release(v154);
        swift_release(v153);
        return;
      }
      goto LABEL_118;
    }
LABEL_117:
    v16 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v16)
      goto LABEL_133;
LABEL_118:
    v168[0] = _swiftEmptyArrayStorage;
    v48 = (uint64_t)v168;
    sub_10017B0DC(0, v16 & ~(v16 >> 63), 0);
    if ((v16 & 0x8000000000000000) == 0)
    {
      v143 = 0;
      v144 = (_QWORD *)v168[0];
      do
      {
        v145 = *(_QWORD *)(v134 + 8 * v143 + 32);
        v146 = swift_retain();
        v147 = LegacyLockup.adamId.getter(v146);
        swift_release(v145);
        v168[0] = v144;
        v149 = v144[2];
        v148 = v144[3];
        if (v149 >= v148 >> 1)
        {
          sub_10017B0DC(v148 > 1, v149 + 1, 1);
          v144 = (_QWORD *)v168[0];
        }
        ++v143;
        v144[2] = v149 + 1;
        v144[v149 + 4] = v147;
      }
      while (v16 != v143);
      swift_bridgeObjectRelease(v134);
      v135 = v159;
      goto LABEL_134;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v48);
LABEL_17:
    v24 = v158;
    swift_bridgeObjectRelease(v48);
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
LABEL_139:
    v67 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_40;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v67 = *(_QWORD *)(v16 + 32);
    swift_retain();
LABEL_40:
    swift_bridgeObjectRelease(v16);
    goto LABEL_47;
  }
  __break(1u);
}

void sub_100200170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  unint64_t v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __n128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __n128 v59;
  __n128 v60;
  char *v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t Strong;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double (*v151)(char *, unint64_t, uint64_t, __n128);
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  char v156[8];

  v145 = a4;
  v5 = (_QWORD *)sub_10003F544(&qword_10055A288);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_10003F544(&qword_10055A290);
  v120 = *(_QWORD *)(v122 - 8);
  v9 = __chkstk_darwin(v122);
  v119 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v121 = (char *)&v116 - v11;
  v126 = sub_10003F544(&qword_10055A298);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v123 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_10003F544(&qword_10055A2A0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v124 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_10003F544(&qword_10055A2A8);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10003F544(&qword_10055A2B0);
  v133 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_10003F544(&qword_10055A2B8);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v134 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_10055A2C0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v148 = *(_QWORD *)(v153 - 8);
  v21 = __chkstk_darwin(v153);
  v147 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v116 - v23;
  v25 = type metadata accessor for ModernShelf(0);
  v26 = __chkstk_darwin(v25);
  v152 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v116 - v30;
  __chkstk_darwin(v29);
  v35 = *(_QWORD *)(a1 + 16);
  v139 = v18;
  v140 = v17;
  v138 = v20;
  if (!v35)
  {
    v52 = 0;
    goto LABEL_35;
  }
  v118 = (char *)&v116 - v32;
  v117 = v34;
  v141 = v8;
  v142 = v6;
  v143 = v5;
  v144 = a1;
  v36 = v35;
  v37 = a1 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
  v38 = *(_QWORD *)(v33 + 72);
  v149 = v33;
  v150 = v38;
  v151 = *(double (**)(char *, unint64_t, uint64_t, __n128))(v33 + 16);
  v39 = swift_bridgeObjectRetain(a1);
  v40 = v37;
  v146 = v36;
  while (1)
  {
    v41.n128_f64[0] = v151(v31, v40, v25, v39);
    v42.n128_f64[0] = ModernShelf.itemPresentation.getter(v41);
    v43 = ModernShelf.ItemPresentation.itemKind.getter(v42);
    v8 = *(char **)(v148 + 8);
    ((void (*)(char *, uint64_t))v8)(v24, v153);
    v44 = ModernShelf.ItemKind.rawValue.getter(v43);
    v46 = v45;
    v48 = ModernShelf.ItemKind.rawValue.getter(8);
    v49 = v47;
    if (v44 == v48 && v46 == v47)
    {
      v53 = v144;
      swift_bridgeObjectRelease(v144);
      swift_bridgeObjectRelease(v46);
      goto LABEL_11;
    }
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v48, v47, 0);
    swift_bridgeObjectRelease(v46);
    v51 = swift_bridgeObjectRelease(v49);
    if ((v50 & 1) != 0)
      break;
    v5 = *(_QWORD **)(v149 + 8);
    ((void (*)(char *, uint64_t, __n128))v5)(v31, v25, v51);
    v40 += v150;
    if (!--v36)
    {
      v52 = 0;
      v53 = v144;
      v54 = v144;
      goto LABEL_12;
    }
  }
  v53 = v144;
  v46 = v144;
LABEL_11:
  v55 = swift_bridgeObjectRelease(v46);
  v56 = v149;
  v57 = v118;
  v58 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v149 + 32))(v118, v31, v25, v55);
  v54 = ModernShelf.items.getter(v58);
  v5 = *(_QWORD **)(v56 + 8);
  ((void (*)(char *, uint64_t))v5)(v57, v25);
  v52 = sub_10034EA78(v54);
LABEL_12:
  swift_bridgeObjectRelease(v54);
  v59 = swift_bridgeObjectRetain(v53);
  a1 = 0;
  while (1)
  {
    v6 = a1 + 1;
    if (__OFADD__(a1, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    v60.n128_f64[0] = v151(v152, v37, v25, v59);
    v61 = v147;
    v62.n128_f64[0] = ModernShelf.itemPresentation.getter(v60);
    v63 = ModernShelf.ItemPresentation.itemKind.getter(v62);
    ((void (*)(char *, uint64_t))v8)(v61, v153);
    v64 = ModernShelf.ItemKind.rawValue.getter(v63);
    v54 = v65;
    v67 = ModernShelf.ItemKind.rawValue.getter(40);
    v68 = v66;
    if (v64 == v67 && v54 == v66)
    {
      a1 = v144;
      swift_bridgeObjectRelease(v144);
      swift_bridgeObjectRelease(v54);
      goto LABEL_21;
    }
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v54, v67, v66, 0);
    swift_bridgeObjectRelease(v54);
    v69 = swift_bridgeObjectRelease(v68);
    if ((v53 & 1) != 0)
      break;
    ((void (*)(char *, uint64_t, __n128))v5)(v152, v25, v69);
    ++a1;
    v37 += v150;
    if (v6 == v146)
    {
      a1 = v144;
      swift_bridgeObjectRelease(v144);
      v70 = 0;
      v6 = v142;
      v5 = v143;
      v8 = v141;
      goto LABEL_36;
    }
  }
  a1 = v144;
  v54 = v144;
LABEL_21:
  v71 = swift_bridgeObjectRelease(v54);
  v72 = v117;
  v73 = (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v149 + 32))(v117, v152, v25, v71);
  v74 = ModernShelf.items.getter(v73);
  ((void (*)(uint64_t, uint64_t))v5)(v72, v25);
  v54 = (uint64_t)sub_10034EEB4(v74);
  swift_bridgeObjectRelease(v74);
  v8 = v141;
  v6 = v142;
  if (!v54)
  {
    v70 = 0;
    v5 = v143;
    goto LABEL_36;
  }
  v53 = v54 & 0xFFFFFFFFFFFFFF8;
  v5 = v143;
  if ((unint64_t)v54 >> 62)
  {
LABEL_30:
    if (v54 >= 0)
      v75 = v53;
    else
      v75 = v54;
    swift_bridgeObjectRetain(v54);
    v76 = _CocoaArrayWrapper.endIndex.getter(v75);
    swift_bridgeObjectRelease(v54);
    if (!v76)
      goto LABEL_34;
LABEL_24:
    if ((v54 & 0xC000000000000001) != 0)
    {
      v70 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v54);
    }
    else
    {
      if (!*(_QWORD *)(v53 + 16))
      {
        __break(1u);
        return;
      }
      v70 = *(_QWORD *)(v54 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease(v54);
    goto LABEL_36;
  }
  if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_24;
LABEL_34:
  swift_bridgeObjectRelease(v54);
LABEL_35:
  v70 = 0;
LABEL_36:
  v77 = v145 + 16;
  swift_beginAccess(v145 + 16, v156, 0, 0);
  Strong = swift_weakLoadStrong(v77);
  if (!Strong)
    goto LABEL_42;
  v79 = Strong;
  if (v52)
  {
    if (v70)
    {
      v154 = v52;
      swift_retain();
      v80 = sub_10003F544((uint64_t *)&unk_1005537F0);
      v81 = v70;
      v153 = v70;
      v82 = v80;
      v83 = sub_10002F9C8((unint64_t *)&unk_10055A2E0, (uint64_t *)&unk_1005537F0, (uint64_t)&protocol conformance descriptor for [A]);
      v84 = v119;
      Sequence.publisher.getter(v82, v83);
      v85 = v121;
      v152 = (char *)v52;
      v86 = v122;
      Publishers.Sequence.filter(_:)(sub_1002024C4, v81, v122);
      v87 = *(void (**)(char *, uint64_t))(v120 + 8);
      v87(v84, v86);
      swift_retain();
      v89 = static Subscribers.Demand.unlimited.getter(v88);
      v90 = sub_10003F544(&qword_1005552C0);
      v91 = sub_10002F9C8(&qword_10055A2F0, &qword_10055A290, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
      v92 = sub_10002F9C8((unint64_t *)&unk_1005552D0, &qword_1005552C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v93 = v123;
      Publisher<>.flatMap<A>(maxPublishers:_:)(v89, sub_1002024CC, v79, v86, v90, v91, v92);
      swift_release(v79);
      v87(v85, v86);
      v94 = sub_100005EC8(0, (unint64_t *)&qword_100559F60, CPListItem_ptr);
      v95 = sub_10002F9C8(&qword_10055A2F8, &qword_10055A298, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      v96 = v124;
      v97 = v126;
      Publisher.compactMap<A>(_:)(sub_100183858, 0, v126, v94, v95);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v93, v97);
      v98 = sub_10002F9C8(&qword_10055A300, &qword_10055A2A0, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
      v99 = v128;
      v100 = v129;
      Publisher.collect()(v129, v98);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v96, v100);
      v101 = sub_10002F9C8(&qword_10055A308, &qword_10055A2A8, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
      v102 = v132;
      v103 = v131;
      Publisher.filter(_:)(sub_100200EE8, 0, v131, v101);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v99, v103);
      v104 = swift_allocObject(&unk_1004B5AF8, 32, 7);
      *(_QWORD *)(v104 + 16) = v152;
      *(_QWORD *)(v104 + 24) = a1;
      swift_bridgeObjectRetain(a1);
      v105 = sub_10003F544(&qword_10055A2C8);
      v106 = sub_10002F9C8(&qword_10055A310, &qword_10055A2B0, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
      v107 = v134;
      v108 = v135;
      Publisher.map<A>(_:)(sub_100202500, v104, v135, v105, v106);
      swift_release(v104);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v102, v108);
      v154 = 0;
      v155 = a1;
      v109 = sub_10002F9C8(&qword_10055A318, &qword_10055A2B8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v110 = v138;
      v111 = v137;
      Publisher.replaceEmpty(with:)(&v154, v137, v109);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v107, v111);
      v112 = sub_10002F9C8((unint64_t *)&unk_10055A320, &qword_10055A2C0, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceEmpty<A>);
      v113 = v140;
      Publisher.eraseToAnyPublisher()(v140, v112);
      swift_release(v79);
      swift_release_n(v153, 2);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v110, v113);
      return;
    }
    swift_release(Strong);
LABEL_42:
    swift_bridgeObjectRelease(v52);
  }
  else
  {
    swift_release(Strong);
  }
  v154 = 0;
  v155 = a1;
  swift_bridgeObjectRetain(a1);
  v114 = sub_10003F544(&qword_10055A2C8);
  Just.init(_:)(&v154, v114);
  v115 = sub_10002F9C8((unint64_t *)&unk_10055A2D0, &qword_10055A288, (uint64_t)&protocol conformance descriptor for Just<A>);
  Publisher.eraseToAnyPublisher()(v5, v115);
  swift_release(v70);
  (*(void (**)(char *, _QWORD *))(v6 + 8))(v8, v5);
}

uint64_t sub_100200D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  v0 = LibraryEpisodeLockup.uuid.getter();
  v2 = v1;
  v3 = ShowHeader.episodeToPlay.getter();
  if (v3)
  {
    v4 = v3;
    v5 = Episode.uuid.getter();
    v7 = v6;
    swift_release(v4);
    if (v0 == v5 && v2 == v7)
    {
      swift_bridgeObjectRelease_n(v2, 2);
      v10 = 0;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v5, v7, 0);
      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v7);
      v10 = v9 ^ 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v2);
    v10 = 1;
  }
  return v10 & 1;
}

uint64_t sub_100200E3C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _OWORD v13[3];

  v3 = a1 + 96;
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_OWORD *)(a1 + 40);
  v13[0] = *(_OWORD *)(a1 + 24);
  v13[1] = v5;
  v13[2] = *(_OWORD *)(a1 + 56);
  v6 = a1 + 152;
  v7 = *(unsigned __int8 *)(a1 + 16);
  v8 = sub_1001FE21C();
  v10 = v9;
  v11 = sub_1002F8AB8(v3, v4, 0, 1, v7, v13, v6, (uint64_t)v8, v9);
  result = swift_release(v10);
  *a2 = v11;
  return result;
}

uint64_t sub_100200EE8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v0 = sub_10003F544((uint64_t *)&unk_1005544E0);
  v1 = sub_10002F9C8((unint64_t *)&unk_10055A330, (uint64_t *)&unk_1005544E0, (uint64_t)&protocol conformance descriptor for [A]);
  return Collection.isNotEmpty.getter(v0, v1, v2) & 1;
}

void sub_100200F58(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  void *object;
  id v38;
  char *v39;
  Class isa;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;

  v7 = *a1;
  if (!((unint64_t)a2 >> 62))
  {
    v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v8)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease(a2);
    v10 = _swiftEmptyArrayStorage;
    if (v7 < 0)
      goto LABEL_34;
    goto LABEL_28;
  }
  if (a2 < 0)
    v29 = a2;
  else
    v29 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v8 = _CocoaArrayWrapper.endIndex.getter(v29);
  if (!v8)
    goto LABEL_27;
LABEL_3:
  if (v8 < 1)
  {
    __break(1u);
    swift_release(v46);
    __break(1u);
    return;
  }
  v45 = a3;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v10 = _swiftEmptyArrayStorage;
    do
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a2);
      v14 = LegacyLockup.title.getter(v12, v13);
      v16 = v15;
      swift_unknownObjectRelease(v12);
      if (v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_10027AE00(0, v10[2] + 1, 1, v10);
        v18 = v10[2];
        v17 = v10[3];
        if (v18 >= v17 >> 1)
          v10 = sub_10027AE00((_QWORD *)(v17 > 1), v18 + 1, 1, v10);
        v10[2] = v18 + 1;
        v11 = &v10[2 * v18];
        v11[4] = v14;
        v11[5] = v16;
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    v19 = 0;
    v10 = _swiftEmptyArrayStorage;
    do
    {
      v21 = *(_QWORD *)(a2 + 8 * v19 + 32);
      swift_retain();
      v24 = LegacyLockup.title.getter(v22, v23);
      v26 = v25;
      swift_release(v21);
      if (v26)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_10027AE00(0, v10[2] + 1, 1, v10);
        v28 = v10[2];
        v27 = v10[3];
        if (v28 >= v27 >> 1)
          v10 = sub_10027AE00((_QWORD *)(v27 > 1), v28 + 1, 1, v10);
        v10[2] = v28 + 1;
        v20 = &v10[2 * v28];
        v20[4] = v24;
        v20[5] = v26;
      }
      ++v19;
    }
    while (v8 != v19);
  }
  swift_bridgeObjectRelease(a2);
  a3 = v45;
  if (v7 < 0)
    goto LABEL_34;
LABEL_28:
  if ((v7 & 0x4000000000000000) == 0)
  {
    v30 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v7);
    goto LABEL_30;
  }
LABEL_34:
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v7);
  v30 = (uint64_t)sub_1001F9A98(v43);
  swift_bridgeObjectRelease(v7);
LABEL_30:
  v46 = v30;
  sub_1001FCB68(&v46, v10);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v10);
  v31 = v46;
  swift_bridgeObjectRetain(v46);
  if (v31 < 0 || (v31 & 0x4000000000000000) != 0)
  {
    v44 = sub_10003F544(&qword_1005544F0);
    v33 = _bridgeCocoaArray<A>(_:)(v31, v44);
    swift_release(v31);
  }
  else
  {
    v33 = v31;
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v32);
  }
  swift_release(v31);
  v34 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v47._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0x5345444F53495045;
  v35._object = (void *)0xE800000000000000;
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  v47._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v47)._object;

  v38 = objc_allocWithZone((Class)CPListSection);
  v39 = sub_100180784(v33);
  swift_bridgeObjectRelease(v33);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v39);
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v38, "initWithItems:header:sectionIndexTitle:", isa, v41, 0, swift_bridgeObjectRelease(object).n128_f64[0]);

  *a4 = v42;
  a4[1] = a3;
  swift_bridgeObjectRetain(a3);
}

void sub_100201338(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double (*v26)(char *, uint64_t, uint64_t, __n128);
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __n128 v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105[24];
  __int128 v106;
  __int128 v107;
  __int128 v108;

  v6 = sub_10003F544(&qword_10055A248);
  v99 = *(_QWORD *)(v6 - 8);
  v100 = v6;
  __chkstk_darwin(v6);
  v98 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055A250);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v12);
  v96 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModernShelf.ItemPresentation(0);
  v101 = *(_QWORD *)(v14 - 8);
  v102 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ModernShelf(0);
  v103 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v97 = (char *)&v90 - v21;
  swift_beginAccess(a3 + 16, v105, 0, 0);
  Strong = swift_weakLoadStrong(a3 + 16);
  if (!Strong)
    goto LABEL_30;
  v92 = v11;
  v23 = *(_QWORD *)(a2 + 16);
  if (!v23)
  {
    swift_release(Strong);
    goto LABEL_30;
  }
  v93 = Strong;
  v90 = v9;
  v91 = v8;
  v94 = a2;
  v95 = a1;
  v24 = a2 + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80));
  v25 = *(_QWORD *)(v103 + 72);
  v26 = *(double (**)(char *, uint64_t, uint64_t, __n128))(v103 + 16);
  v27 = swift_bridgeObjectRetain(a2);
  while (1)
  {
    v28.n128_f64[0] = v26(v20, v24, v17, v27);
    v29.n128_f64[0] = ModernShelf.itemPresentation.getter(v28);
    v30 = ModernShelf.ItemPresentation.itemKind.getter(v29);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v16, v102);
    v31 = ModernShelf.ItemKind.rawValue.getter(v30);
    v33 = v32;
    v35 = ModernShelf.ItemKind.rawValue.getter(40);
    v36 = v34;
    if (v31 == v35 && v33 == v34)
    {
      a2 = v94;
      swift_bridgeObjectRelease(v94);
      swift_bridgeObjectRelease(v33);
      goto LABEL_12;
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 0);
    swift_bridgeObjectRelease(v33);
    v38 = swift_bridgeObjectRelease(v36);
    if ((v37 & 1) != 0)
      break;
    (*(void (**)(char *, uint64_t, __n128))(v103 + 8))(v20, v17, v38);
    v24 += v25;
    if (!--v23)
    {
      swift_release(v93);
      a2 = v94;
      swift_bridgeObjectRelease(v94);
      a1 = v95;
      goto LABEL_30;
    }
  }
  a2 = v94;
  v33 = v94;
LABEL_12:
  v39 = swift_bridgeObjectRelease(v33);
  v40 = v103;
  v41 = v97;
  v42 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v103 + 32))(v97, v20, v17, v39);
  v43 = ModernShelf.items.getter(v42);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v17);
  v44 = (uint64_t)sub_10034EEB4(v43);
  swift_bridgeObjectRelease(v43);
  a1 = v95;
  if (!v44)
  {
    swift_release(v93);
    goto LABEL_30;
  }
  if (!((unint64_t)v44 >> 62))
  {
    if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
LABEL_28:
    swift_release(v93);
    v82 = v44;
LABEL_29:
    swift_bridgeObjectRelease(v82);
    goto LABEL_30;
  }
  if (v44 >= 0)
    v83 = v44 & 0xFFFFFFFFFFFFFF8;
  else
    v83 = v44;
  swift_bridgeObjectRetain(v44);
  v84 = _CocoaArrayWrapper.endIndex.getter(v83);
  swift_bridgeObjectRelease(v44);
  if (!v84)
    goto LABEL_28;
LABEL_15:
  if ((v44 & 0xC000000000000001) != 0)
  {
    v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v45 = *(_QWORD *)(v44 + 32);
    swift_retain();
LABEL_18:
    swift_bridgeObjectRelease(v44);
    v47 = ShowHeader.episodeToPlay.getter(v46);
    if (v47)
    {
      v49 = v47;
      v50 = v93;
      sub_1001FE4B0(v48);
      v51 = *(_QWORD *)(v50 + 144);
      swift_retain();
      dispatch thunk of SmartPlayButtonController.apply(model:)(v45);
      swift_release(v51);
      v52 = *(_QWORD *)(v50 + 136);
      v53 = swift_retain();
      v54 = Episode.uuid.getter(v53);
      v56 = v55;
      v57 = EpisodeStateController.stateMachine(for:)(v54, v55);
      swift_release(v52);
      swift_bridgeObjectRelease(v56);
      v58 = (uint64_t)v96;
      v103 = v57;
      dispatch thunk of EpisodeStateMachine.currentState.getter(v59);
      v60 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)(v58);
      v62 = v61;
      sub_10003F970(v58, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
      *(_QWORD *)&v106 = v60;
      *((_QWORD *)&v106 + 1) = v62;
      v63 = sub_10016DD80();
      if ((Collection.isNotEmpty.getter(&type metadata for String, v63, v64) & 1) != 0)
      {
        v65 = *(_QWORD *)(v50 + 136);
        v66 = *(_OWORD *)(v50 + 40);
        v106 = *(_OWORD *)(v50 + 24);
        v107 = v66;
        v108 = *(_OWORD *)(v50 + 56);
        v67 = *(unsigned __int8 *)(v50 + 16);
        swift_retain();
        v68 = sub_1001FE21C();
        v102 = v49;
        v70 = v69;
        v71 = sub_1002F2BB0(v50 + 96, v65, v60, v62, v67, &v106, v50 + 152, (uint64_t)v68, v69);
        swift_release(v65);
        swift_bridgeObjectRelease(v62);
        swift_release(v70);
        v104 = v71;
        v72 = swift_allocObject(&unk_1004B5AD0, 32, 7);
        v74 = v94;
        v73 = v95;
        *(_QWORD *)(v72 + 16) = v95;
        *(_QWORD *)(v72 + 24) = v74;
        v75 = v73;
        swift_bridgeObjectRetain(v74);
        v76 = sub_10003F544((uint64_t *)&unk_10055A270);
        v77 = sub_10003F544(&qword_10055A258);
        v78 = sub_10002F9C8(&qword_100555238, (uint64_t *)&unk_10055A270, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v79 = v92;
        Publisher.map<A>(_:)(sub_1002024B4, v72, v76, v77, v78);
        swift_release(v72);
        swift_release(v104);
        v80 = sub_10002F9C8(&qword_10055A280, &qword_10055A250, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        v81 = v91;
        Publisher.eraseToAnyPublisher()(v91, v80);
        swift_release(v50);
        swift_release(v102);
        swift_release(v103);
        swift_release(v45);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v79, v81);
        return;
      }
      swift_release(v50);
      swift_release(v45);
      swift_release(v49);
      swift_release(v103);
      v82 = v62;
      goto LABEL_29;
    }
    swift_release(v93);
    swift_release(v45);
LABEL_30:
    *(_QWORD *)&v106 = a1;
    *((_QWORD *)&v106 + 1) = a2;
    *(_QWORD *)&v107 = 0;
    v85 = a1;
    swift_bridgeObjectRetain(a2);
    v86 = sub_10003F544(&qword_10055A258);
    v87 = v98;
    Just.init(_:)(&v106, v86);
    v88 = sub_10002F9C8((unint64_t *)&unk_10055A260, &qword_10055A248, (uint64_t)&protocol conformance descriptor for Just<A>);
    v89 = v100;
    Publisher.eraseToAnyPublisher()(v100, v88);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v87, v89);
    return;
  }
  __break(1u);
}

id sub_100201A50@<X0>(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v5;
  id v7;

  v7 = *a1;
  *a4 = a2;
  a4[1] = a3;
  a4[2] = v7;
  v5 = a2;
  swift_bridgeObjectRetain(a3);
  return v7;
}

uint64_t sub_100201A94@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100202068(*a1, a1[2]);
  *a2 = result;
  return result;
}

BOOL sub_100201AC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    if (v3 < 0)
      v6 = *a1;
    else
      v6 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v4 == a2;
}

uint64_t sub_100201B30()
{
  return sub_1001FEB1C();
}

uint64_t sub_100201B50()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003F544((uint64_t *)&unk_1005550F0);
  v1 = sub_10002F9C8(&qword_100554FB0, (uint64_t *)&unk_1005550F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_100201BC0()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_100201BE4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100201C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100200170(a1, a2, a3, v3);
}

uint64_t sub_100201C10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100201C34@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

void sub_100201C68(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100201338(a1, a2, v2);
}

uint64_t sub_100201C70@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100201CA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

BOOL sub_100201CB0(uint64_t *a1)
{
  uint64_t v1;

  return sub_100201AC4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100201CB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49[3];

  v6 = v5;
  LODWORD(v48) = a4;
  v43 = a3;
  v10 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SmartPlayPlatformContext(0);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SmartPlayContext(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v49[0] = 0;
  *((_QWORD *)&v49[0] + 1) = 0xE000000000000000;
  v20 = sub_10003F544(&qword_1005588A8);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)(v5 + 192) = CurrentValueSubject.init(_:)(v49);
  v21 = sub_10003F544((uint64_t *)&unk_1005550F0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v5 + 200) = PassthroughSubject.init()(v22);
  v23 = sub_10003F544((uint64_t *)&unk_100555110);
  v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v5 + 208) = CurrentValueSubject.init(_:)(v24);
  *(_QWORD *)(v5 + 216) = 2;
  *(_QWORD *)(v5 + 232) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 224) = 0;
  *(_BYTE *)(v5 + 16) = v48;
  v25 = a5[1];
  *(_OWORD *)(v5 + 24) = *a5;
  *(_OWORD *)(v5 + 40) = v25;
  v26 = a5[2];
  v27 = v43;
  *(_OWORD *)(v5 + 56) = v26;
  v28 = type metadata accessor for LibraryShowProvider(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  swift_retain();
  v29 = swift_bridgeObjectRetain(v27);
  v48 = a2;
  *(_QWORD *)(v5 + 72) = LibraryShowProvider.init(asPartOf:showUUID:)(a1, a2, v27, v29);
  v30 = sub_10003F544(&qword_1005609B0);
  BaseObjectGraph.inject<A>(_:)(v49, v30, v30);
  *(_OWORD *)(v5 + 80) = v49[0];
  v31 = sub_10003F544((uint64_t *)&unk_100555120);
  BaseObjectGraph.inject<A>(_:)(v49, v31, v31);
  sub_10002099C(v49, v5 + 96);
  v32 = sub_10003F544(&qword_100553720);
  BaseObjectGraph.inject<A>(_:)(v49, v32, v32);
  *(_QWORD *)(v5 + 136) = *(_QWORD *)&v49[0];
  v33 = sub_10003F544((uint64_t *)&unk_1005588D0);
  BaseObjectGraph.inject<A>(_:)(v49, v33, v33);
  sub_10002099C(v49, v5 + 152);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for SmartPlayContext.showPage(_:), v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v15, enum case for SmartPlayPlatformContext.carPlay(_:), v45);
  v34 = type metadata accessor for SmartPlayButtonController(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = swift_retain();
  *(_QWORD *)(v5 + 144) = SmartPlayButtonController.init(button:context:platform:objectGraph:)(0, v19, v15, a1, v35);
  v36 = *(_QWORD *)(v5 + 72);
  swift_retain();
  LibraryShowProvider.loadPageContent()();
  swift_release(v36);
  v37 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v38 = static OS_os_log.carPlay.getter(v37);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "CarPlayLibraryShowProvider: Loading content.", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  sub_1001FE294(v48, v27);
  return v6;
}

uint64_t sub_100202068(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  unint64_t v43;
  _BYTE v44[16];
  uint64_t v45;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (uint64_t)_swiftEmptyArrayStorage;
  if (a2)
  {
    v8 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
    v10 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v9 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v10 >= v9 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
    specialized Array._endMutation()(v11);
  }
  if (a1)
  {
    v12 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
    v14 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v13 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v14 >= v13 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
    specialized Array._endMutation()(v15);
  }
  v16 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v16);
  v17 = v45;
  v18 = swift_bridgeObjectRetain_n(v45, 4);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v19, (os_log_type_t)v20))
  {

    swift_bridgeObjectRelease_n(v17, 4);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess(&v45, &v43, 0, 0);
    return v45;
  }
  v41 = v20;
  v42 = v7;
  v21 = swift_slowAlloc(22, -1);
  *(_DWORD *)v21 = 134218240;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v36 = v17;
    else
      v36 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v22 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v22 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v17);
  v43 = v22;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v21 + 4, v21 + 12);
  swift_bridgeObjectRelease(v17);
  *(_WORD *)(v21 + 12) = 2048;
  v43 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v17 >> 62))
  {
    v23 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v17, 2);
    if (v23)
      goto LABEL_14;
LABEL_29:
    swift_bridgeObjectRelease_n(v17, 2);
    v31 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_22:
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
      v33 = v17;
LABEL_23:
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v31);
      v43 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v41, "CarPlayLibraryShowProvider: Returned sections count %ld and total section items count %ld.", (uint8_t *)v21, 0x16u);
      swift_slowDealloc(v21, -1, -1);

      v7 = v42;
      goto LABEL_24;
    }
LABEL_30:
    if (v31 < 0)
      v35 = v31;
    else
      v35 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v17);
    v33 = v31;
    goto LABEL_23;
  }
  if (v17 < 0)
    v34 = v17;
  else
    v34 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v17, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v34);
  v23 = result;
  if (!result)
    goto LABEL_29;
LABEL_14:
  if (v23 >= 1)
  {
    v38 = v19;
    v39 = v5;
    v40 = v4;
    v25 = 0;
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v17);
      else
        v26 = *(id *)(v17 + 8 * v25 + 32);
      v27 = v26;
      ++v25;
      v28 = objc_msgSend(v26, "items");
      v29 = sub_10003F544(&qword_1005544F0);
      v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

      sub_1001734C4(v30);
    }
    while (v23 != v25);
    swift_bridgeObjectRelease_n(v17, 2);
    v31 = v43;
    v5 = v39;
    v4 = v40;
    v19 = v38;
    if (!(v43 >> 62))
      goto LABEL_22;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_100202488()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_1002024B4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100201A50(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1002024BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001FE588(a1, v1);
}

uint64_t sub_1002024C4()
{
  return sub_100200D74();
}

uint64_t sub_1002024CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100200E3C(v1, a1);
}

uint64_t sub_1002024D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100202500(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100200F58(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100202508()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020252C(_BYTE *a1)
{
  uint64_t v1;

  return sub_1001FE66C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100202534(uint64_t a1)
{
  uint64_t v1;

  return sub_1001FE8C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100202548(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  _BYTE v16[24];
  Swift::String v17;
  Swift::String v18;

  swift_beginAccess(v1 + 24, v16, 0, 0);
  v3 = *(_QWORD *)(v1 + 24);
  if (v3
    && (v4 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v3, v4)))
  {
    v5 = 0xD000000000000014;
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17._object = (void *)0xAE00A680E2747865;
    v7._object = (void *)0x80000001004355B0;
    v7._countAndFlagsBits = 0xD000000000000014;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17._countAndFlagsBits = 0x54207463656C6553;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v17);
    countAndFlagsBits = v9._countAndFlagsBits;
    object = v9._object;
    v12 = 0x80000001004355D0;
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v18._object = (void *)0xEF7470697263736ELL;
    v13._countAndFlagsBits = 0x4152545F57454956;
    v13._object = (void *)0xEF5450495243534ELL;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v18._countAndFlagsBits = 0x6172542077656956;
    v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v6, v14, v18);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    v5 = 0x75622E65746F7571;
    v12 = 0xEC000000656C6262;
  }

  *a1 = 0;
  a1[1] = v5;
  a1[2] = v12;
  a1[3] = countAndFlagsBits;
  a1[4] = object;
}

void sub_100202700(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v5 = (void *)objc_opt_self(NSBundle);
  swift_bridgeObjectRetain(v3);
  v6 = objc_msgSend(v5, "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x8000000100435590;
  v7._object = (void *)0x8000000100435570;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000013;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v10);

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(Swift::String *)(a1 + 24) = v9;
}

uint64_t sub_1002027D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = (*(uint64_t (**)(void))(a2 + 32))();
  v8 = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v8;
  a3[3] = result;
  a3[4] = v10;
  return result;
}

BOOL sub_100202838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(__n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v17[24];

  v1 = v0;
  v2 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for InteractionContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 16, v17, 0, 0);
  v9 = *(_QWORD *)(v0 + 16);
  if (!v9)
    return *(_QWORD *)(v1 + 24) != 0;
  v10 = *(void (**)(__n128))(*(_QWORD *)v9 + 168);
  v11 = swift_retain();
  v10(v11);
  v12 = swift_release(v9);
  InteractionContext.page.getter(v12);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = InteractionContext.Page.isShowPage.getter(v13);
  sub_10003F970((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  return (v14 & 1) == 0 && *(_QWORD *)(v1 + 24) != 0;
}

id sub_10020296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  _BYTE v14[24];

  v1 = type metadata accessor for PodcastContextActionDataType(0);
  v2 = __chkstk_darwin(v1);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v2);
  v6 = &v14[-v5 - 8];
  v7 = *(_QWORD *)(v0 + 16);
  if (!v7)
    return 0;
  v8 = v7 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v7 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v14, 0, 0);
  sub_10014FDF8(v8, (uint64_t)v6, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload(v6, v1) == 1)
  {
    sub_10003F970((uint64_t)v6, type metadata accessor for PodcastContextActionDataType);
    return 0;
  }
  v9 = *((_QWORD *)v6 + 1);
  swift_retain();
  swift_bridgeObjectRelease(v9);
  sub_10014FDF8(v8, (uint64_t)v4, type metadata accessor for PodcastContextActionDataType);
  v10 = (void *)sub_1001E2CF0();
  sub_10003F970((uint64_t)v4, type metadata accessor for PodcastContextActionDataType);
  if (!v10)
  {
    swift_release(v7);
    return 0;
  }
  v11 = objc_msgSend(v10, "subscribed");

  swift_release(v7);
  return v11;
}

uint64_t sub_100202AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(__n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v1 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for InteractionContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(v0 + 16);
  if (v8)
  {
    swift_retain();
    sub_100367F44();
    if ((v9 & 1) != 0)
    {
      swift_beginAccess(v0 + 40, v17, 0, 0);
      v10 = *(_QWORD *)(v0 + 40);
      if (v10)
      {
        v11 = *(void (**)(__n128))(*(_QWORD *)v10 + 168);
        v12 = swift_retain();
        v11(v12);
        v13 = swift_release(v10);
        InteractionContext.page.getter(v13);
        v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        LOBYTE(v10) = InteractionContext.Page.isTranscriptView.getter(v14);
        swift_release(v8);
        sub_10003F970((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
      }
      else
      {
        swift_release(v8);
      }
    }
    else
    {
      swift_release(v8);
      LOBYTE(v10) = 0;
    }
  }
  else
  {
    LOBYTE(v10) = 0;
  }
  return v10 & 1;
}

uint64_t sub_100202C3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_100202C48(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  if (a1)
    return a1(result);
  return result;
}

uint64_t sub_100202C8C(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B0630);
}

uint64_t sub_100202C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(v1 + 16, v7, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  swift_retain();
  swift_release(v3);
  v4 = type metadata accessor for PodcastContextActionConfiguration(0);
  result = swift_dynamicCastClass(a1, v4);
  if (result)
  {
    v6 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = *(_QWORD *)(result + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100202D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(v1 + 24, v7, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  swift_retain();
  swift_release(v3);
  v4 = type metadata accessor for PodcastContextActionConfiguration(0);
  result = swift_dynamicCastClass(a1, v4);
  if (result)
  {
    v6 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = *(_QWORD *)(result + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100202DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(__n128);
  __n128 v8;
  uint64_t v9;
  void (*v10)(__n128);
  __n128 v11;

  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(void (**)(__n128))(*(_QWORD *)(v6 + 8) + 24);
  v8 = swift_retain();
  v7(v8);
  v9 = type metadata accessor for PodcastContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v9))
  {
    v10 = *(void (**)(__n128))(a3 + 24);
    swift_retain();
    v11 = swift_retain();
    v10(v11);
    swift_release(a1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(a2, v6);
}

_QWORD *sub_100202E74(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B05B8);
}

_QWORD *sub_100202E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(__n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  char *v25;
  uint64_t (**v26)();
  double v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  objc_super v33;
  _BYTE v34[24];

  v2 = v1;
  v4 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InteractionContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v11, v34, 1, 0);
  v12 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  swift_release(v12);
  v13 = type metadata accessor for PodcastContextActionConfiguration(0);
  v14 = swift_dynamicCastClass(a1, v13);
  if (v14)
  {
    v15 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(v14 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    swift_release(v15);
  }
  v16 = *v11;
  if (v16)
  {
    v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 168);
    v18 = swift_retain();
    v17(v18);
    v19 = swift_release(v16);
    InteractionContext.page.getter(v19);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v21 = InteractionContext.Page.isShowPage.getter(v20);
    sub_10003F970((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
    if ((v21 & 1) != 0)
      return _swiftEmptyArrayStorage;
  }
  if (!*(_QWORD *)(v2 + 24))
    return _swiftEmptyArrayStorage;
  v22 = swift_allocObject(&unk_1004B5D30, 32, 7);
  *(_QWORD *)(v22 + 16) = v2;
  *(_QWORD *)(v22 + 24) = a1;
  v23 = (objc_class *)type metadata accessor for ContextActionActivity();
  v24 = (char *)objc_allocWithZone(v23);
  v25 = &v24[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v25 = v2;
  *((_QWORD *)v25 + 1) = &off_1004B3538;
  v26 = (uint64_t (**)())&v24[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v26 = sub_10020C874;
  v26[1] = (uint64_t (*)())v22;
  v33.receiver = v24;
  v33.super_class = v23;
  swift_retain_n(v2, 2);
  *(_QWORD *)&v27 = swift_retain().n128_u64[0];
  v28 = objc_msgSendSuper2(&v33, "init", v27);
  v29 = sub_10003F544((uint64_t *)&unk_100553780);
  v30 = swift_allocObject(v29, 40, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v30 + 32) = v28;
  v32 = v30;
  specialized Array._endMutation()(v30);
  return (_QWORD *)v32;
}

_QWORD *sub_1002030DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t (**v7)();
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  objc_super v14;

  sub_10020650C(a1);
  if ((sub_10020DAF4() & 1) == 0)
    return _swiftEmptyArrayStorage;
  v3 = swift_allocObject(&unk_1004B5DD0, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = (objc_class *)type metadata accessor for ContextActionActivity();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v6 = v1;
  *((_QWORD *)v6 + 1) = &off_1004B6168;
  v7 = (uint64_t (**)())&v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v7 = sub_10020C8EC;
  v7[1] = (uint64_t (*)())v3;
  v14.receiver = v5;
  v14.super_class = v4;
  swift_retain_n(v1, 2);
  *(_QWORD *)&v8 = swift_retain().n128_u64[0];
  v9 = objc_msgSendSuper2(&v14, "init", v8);
  v10 = sub_10003F544((uint64_t *)&unk_100553780);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v11 + 32) = v9;
  v13 = v11;
  specialized Array._endMutation()(v11);
  return (_QWORD *)v13;
}

_QWORD *sub_1002031EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t (**v7)();
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  objc_super v14;

  sub_100206218(a1);
  if ((sub_100258DA4() & 1) == 0)
    return _swiftEmptyArrayStorage;
  v3 = swift_allocObject(&unk_1004B5E70, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = (objc_class *)type metadata accessor for ContextActionActivity();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v6 = v1;
  *((_QWORD *)v6 + 1) = &off_1004B8B08;
  v7 = (uint64_t (**)())&v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v7 = sub_10020C974;
  v7[1] = (uint64_t (*)())v3;
  v14.receiver = v5;
  v14.super_class = v4;
  swift_retain_n(v1, 2);
  *(_QWORD *)&v8 = swift_retain().n128_u64[0];
  v9 = objc_msgSendSuper2(&v14, "init", v8);
  v10 = sub_10003F544((uint64_t *)&unk_100553780);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v11 + 32) = v9;
  v13 = v11;
  specialized Array._endMutation()(v11);
  return (_QWORD *)v13;
}

_QWORD *sub_1002032FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  char *v10;
  uint64_t (**v11)();
  double v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  objc_super v18;
  _BYTE v19[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration, v19, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain();
  swift_release(v4);
  v5 = *v3;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v6 = type metadata accessor for CategoryContextActionConfiguration(0);
  if (!swift_dynamicCastClass(v5, v6))
    return _swiftEmptyArrayStorage;
  v7 = swift_allocObject(&unk_1004B5F10, 32, 7);
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = (objc_class *)type metadata accessor for ContextActionActivity();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v10 = v1;
  *((_QWORD *)v10 + 1) = &off_1004B96C8;
  v11 = (uint64_t (**)())&v9[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v11 = sub_10020C9F4;
  v11[1] = (uint64_t (*)())v7;
  v18.receiver = v9;
  v18.super_class = v8;
  swift_retain_n(v1, 2);
  *(_QWORD *)&v12 = swift_retain().n128_u64[0];
  v13 = objc_msgSendSuper2(&v18, "init", v12);
  v14 = sub_10003F544((uint64_t *)&unk_100553780);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v15 + 32) = v13;
  v17 = v15;
  specialized Array._endMutation()(v15);
  return (_QWORD *)v17;
}

_QWORD *sub_10020345C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t (**v7)();
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  objc_super v14;

  sub_100206308(a1);
  if ((sub_1002AE42C() & 1) == 0)
    return _swiftEmptyArrayStorage;
  v3 = swift_allocObject(&unk_1004B5FB0, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = (objc_class *)type metadata accessor for ContextActionActivity();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v6 = v1;
  *((_QWORD *)v6 + 1) = &off_1004BCDD0;
  v7 = (uint64_t (**)())&v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v7 = sub_10020CAA0;
  v7[1] = (uint64_t (*)())v3;
  v14.receiver = v5;
  v14.super_class = v4;
  swift_retain_n(v1, 2);
  *(_QWORD *)&v8 = swift_retain().n128_u64[0];
  v9 = objc_msgSendSuper2(&v14, "init", v8);
  v10 = sub_10003F544((uint64_t *)&unk_100553780);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v11 + 32) = v9;
  v13 = v11;
  specialized Array._endMutation()(v11);
  return (_QWORD *)v13;
}

_QWORD *sub_10020356C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  char *v22;
  uint64_t (**v23)();
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;
  _BYTE v32[24];
  _BYTE v33[24];

  v2 = v1;
  v4 = type metadata accessor for PodcastContextActionDataType(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  swift_beginAccess(v2 + 24, v33, 1, 0);
  v10 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain();
  swift_release(v10);
  v11 = type metadata accessor for PodcastContextActionConfiguration(0);
  v12 = swift_dynamicCastClass(a1, v11);
  if (v12)
  {
    v13 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v12 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v2 + 16);
  if (v14)
  {
    v15 = v14 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v14 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v32, 0, 0);
    sub_10014FDF8(v15, (uint64_t)v9, type metadata accessor for PodcastContextActionDataType);
    if (swift_getEnumCaseMultiPayload(v9, v4) == 1)
    {
      sub_10003F970((uint64_t)v9, type metadata accessor for PodcastContextActionDataType);
    }
    else
    {
      v16 = *((_QWORD *)v9 + 1);
      swift_retain();
      swift_bridgeObjectRelease(v16);
      sub_10014FDF8(v15, (uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
      v17 = (void *)sub_1001E2CF0();
      sub_10003F970((uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
      if (v17)
      {
        v18 = objc_msgSend(v17, "subscribed");

        swift_release(v14);
        if ((v18 & 1) != 0)
        {
          v19 = swift_allocObject(&unk_1004B6050, 32, 7);
          *(_QWORD *)(v19 + 16) = v2;
          *(_QWORD *)(v19 + 24) = a1;
          v20 = (objc_class *)type metadata accessor for ContextActionActivity();
          v21 = (char *)objc_allocWithZone(v20);
          v22 = &v21[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
          *(_QWORD *)v22 = v2;
          *((_QWORD *)v22 + 1) = &off_1004C6068;
          v23 = (uint64_t (**)())&v21[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
          *v23 = sub_10020CB60;
          v23[1] = (uint64_t (*)())v19;
          v31.receiver = v21;
          v31.super_class = v20;
          swift_retain_n(v2, 2);
          *(_QWORD *)&v24 = swift_retain().n128_u64[0];
          v25 = objc_msgSendSuper2(&v31, "init", v24);
          v26 = sub_10003F544((uint64_t *)&unk_100553780);
          v27 = swift_allocObject(v26, 40, 7);
          *(_OWORD *)(v27 + 16) = xmmword_1003CA250;
          *(_QWORD *)(v27 + 32) = v25;
          v30 = v27;
          specialized Array._endMutation()(v27);
          return (_QWORD *)v30;
        }
      }
      else
      {
        swift_release(v14);
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100203818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t (**v7)();
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  objc_super v14;

  sub_10020641C(a1);
  if ((sub_10037E588() & 1) == 0)
    return _swiftEmptyArrayStorage;
  v3 = swift_allocObject(&unk_1004B60F0, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  v4 = (objc_class *)type metadata accessor for ContextActionActivity();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v6 = v1;
  *((_QWORD *)v6 + 1) = &off_1004C6AF0;
  v7 = (uint64_t (**)())&v5[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v7 = sub_10020CC5C;
  v7[1] = (uint64_t (*)())v3;
  v14.receiver = v5;
  v14.super_class = v4;
  swift_retain_n(v1, 2);
  *(_QWORD *)&v8 = swift_retain().n128_u64[0];
  v9 = objc_msgSendSuper2(&v14, "init", v8);
  v10 = sub_10003F544((uint64_t *)&unk_100553780);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v11 + 32) = v9;
  v13 = v11;
  specialized Array._endMutation()(v11);
  return (_QWORD *)v13;
}

_QWORD *sub_100203928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t (*v9)();
  objc_class *v10;
  char *v11;
  char *v12;
  uint64_t (**v13)();
  double v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_super v19;

  (*(void (**)(void))(*(_QWORD *)(a3 + 8) + 8))();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3) & 1) == 0)
    return _swiftEmptyArrayStorage;
  v7 = type metadata accessor for CopyLinkEpisodeContextAction(0);
  if (swift_dynamicCastClass(v3, v7))
    return _swiftEmptyArrayStorage;
  v9 = (uint64_t (*)())swift_allocObject(&unk_1004B5C90, 48, 7);
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a3;
  *((_QWORD *)v9 + 4) = v3;
  *((_QWORD *)v9 + 5) = a1;
  v10 = (objc_class *)type metadata accessor for ContextActionActivity();
  v11 = (char *)objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(_QWORD *)v12 = v3;
  *((_QWORD *)v12 + 1) = a3;
  v13 = (uint64_t (**)())&v11[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  *v13 = sub_10020C788;
  v13[1] = v9;
  v19.receiver = v11;
  v19.super_class = v10;
  swift_unknownObjectRetain_n(v3, 2);
  *(_QWORD *)&v14 = swift_retain().n128_u64[0];
  v15 = objc_msgSendSuper2(&v19, "init", v14);
  v16 = sub_10003F544((uint64_t *)&unk_100553780);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v17 + 32) = v15;
  v18 = v17;
  specialized Array._endMutation()(v17);
  return (_QWORD *)v18;
}

uint64_t sub_100203A70(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B05B8);
}

uint64_t sub_100203A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(__n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  NSString v26;
  id v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  _BYTE v34[24];
  Swift::String v35;

  v2 = v1;
  v4 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v4);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for InteractionContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v11, v34, 1, 0);
  v12 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  swift_release(v12);
  v13 = type metadata accessor for PodcastContextActionConfiguration(0);
  v14 = swift_dynamicCastClass(a1, v13);
  if (v14)
  {
    v15 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(v14 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    swift_release(v15);
  }
  v16 = *v11;
  if (v16)
  {
    v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 168);
    v18 = swift_retain();
    v17(v18);
    v19 = swift_release(v16);
    InteractionContext.page.getter(v19);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v21 = InteractionContext.Page.isShowPage.getter(v20);
    sub_10003F970((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
    if ((v21 & 1) != 0)
      return 0;
  }
  if (!*(_QWORD *)(v2 + 24))
    return 0;
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v35._object = (void *)0x8000000100433730;
  v23._countAndFlagsBits = 0x6853206F74206F47;
  v23._object = (void *)0xEA0000000000776FLL;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0xD00000000000001ALL;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v35);

  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v26);

  if (v27)
  {
    v28 = objc_msgSend(v27, "imageWithRenderingMode:", 2);

  }
  else
  {
    v28 = 0;
  }
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v30 = ContextActionType.actionIdentifier.getter(23);
  v31 = swift_allocObject(&unk_1004B5D08, 32, 7);
  *(_QWORD *)(v31 + 16) = v2;
  *(_QWORD *)(v31 + 24) = a1;
  swift_retain();
  v32 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v25._countAndFlagsBits, v25._object, 0, 0, v28, 0, v30, 0, v32, 0, 0, 0, sub_10020C858, v31);
}

uint64_t sub_100203DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  sub_10020650C(a1);
  if ((sub_10020DAF4() & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v5);

  if (v6)
  {
    v7 = objc_msgSend(v6, "imageWithRenderingMode:", 2);

  }
  else
  {
    v7 = 0;
  }
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v9 = ContextActionType.actionIdentifier.getter(17);
  v10 = swift_allocObject(&unk_1004B5DA8, 32, 7);
  *(_QWORD *)(v10 + 16) = v1;
  *(_QWORD *)(v10 + 24) = a1;
  swift_retain();
  v11 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v4, v3, 0, 0, v7, 0, v9, 0, v11, 0, 0, 0, sub_10020C8D0, v10);
}

uint64_t sub_100203EFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  sub_100206218(a1);
  if ((sub_100258DA4() & 1) == 0)
    return 0;
  v4 = v1[9];
  v3 = v1[10];
  v5 = (id)v1[13];
  if (v5)
  {
    swift_bridgeObjectRetain(v1[10]);
    swift_bridgeObjectRetain(v5);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    v7 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v6);

    if (v7)
    {
      v5 = objc_msgSend(v7, "imageWithRenderingMode:", 2);

    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v1[10]);
  }
  v9 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_contextActionType);
  if ((_DWORD)v9 == 48)
    v10 = 0;
  else
    v10 = ContextActionType.actionIdentifier.getter(v9);
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v11 = swift_allocObject(&unk_1004B5E48, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  swift_retain();
  v12 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v4, v3, 0, 0, v5, 0, v10, 0, v12, 0, 0, 0, sub_10020C950, v11);
}

uint64_t sub_100204098(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  _BYTE v20[24];
  Swift::String v21;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration, v20, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain();
  swift_release(v4);
  v5 = *v3;
  if (!v5)
    return 0;
  v6 = type metadata accessor for CategoryContextActionConfiguration(0);
  result = swift_dynamicCastClass(v5, v6);
  if (result)
  {
    v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v9._countAndFlagsBits = 0xD000000000000019;
    v21._object = (void *)0x8000000100435590;
    v9._object = (void *)0x8000000100435570;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v21._countAndFlagsBits = 0xD000000000000013;
    v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v21);

    v12 = *(id *)(v1 + 32);
    if (v12)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
      v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      v14 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v13);

      if (v14)
      {
        v12 = objc_msgSend(v14, "imageWithRenderingMode:", 2);

      }
      else
      {
        v12 = 0;
      }
    }
    v15 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_contextActionType);
    if ((_DWORD)v15 == 48)
      v16 = 0;
    else
      v16 = ContextActionType.actionIdentifier.getter(v15);
    sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
    v17 = *(_QWORD *)(v1 + 16);
    v18 = swift_allocObject(&unk_1004B5EE8, 32, 7);
    *(_QWORD *)(v18 + 16) = v1;
    *(_QWORD *)(v18 + 24) = a1;
    swift_retain();
    v19 = swift_retain();
    return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v11._countAndFlagsBits, v11._object, 0, 0, v12, 0, v16, 0, v19, 0, v17, 0, sub_10020C9D8, v18);
  }
  return result;
}

uint64_t sub_1002042F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  unint64_t v6;
  unint64_t v7;
  NSBundle v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSString v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  _BYTE v24[24];

  sub_100206308(a1);
  if ((sub_1002AE42C() & 1) == 0)
    return 0;
  swift_beginAccess(v1 + 24, v24, 0, 0);
  v3 = *(_QWORD *)(v1 + 24);
  if (v3
    && (v4 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v3, v4)))
  {
    v5 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v23 = 0xAE00A680E2747865;
    v6 = 0x80000001004355B0;
    v7 = 0xD000000000000014;
    v8.super.isa = v5;
    v9 = 0;
    v10 = 0xE000000000000000;
    v11 = 0x54207463656C6553;
  }
  else
  {
    v5 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v23 = 0xEF7470697263736ELL;
    v7 = 0x4152545F57454956;
    v6 = 0xEF5450495243534ELL;
    v8.super.isa = v5;
    v9 = 0;
    v10 = 0xE000000000000000;
    v11 = 0x6172542077656956;
  }
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, (Swift::String_optional)0, v8, *(Swift::String *)&v9, *(Swift::String *)&v11);

  v14 = *(_QWORD *)(v1 + 24);
  if (v14
    && (v15 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v14, v15)))
  {
    v16 = 0x80000001004355D0;
  }
  else
  {
    v16 = 0xEC000000656C6262;
  }
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v18 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v17);

  if (v18)
  {
    v19 = objc_msgSend(v18, "imageWithRenderingMode:", 2);

  }
  else
  {
    v19 = 0;
  }
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v20 = ContextActionType.actionIdentifier.getter(16);
  v21 = swift_allocObject(&unk_1004B5F88, 32, 7);
  *(_QWORD *)(v21 + 16) = v1;
  *(_QWORD *)(v21 + 24) = a1;
  swift_retain();
  v22 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v13._countAndFlagsBits, v13._object, 0, 0, v19, 0, v20, 0, v22, 0, 0, 0, sub_10020CA50, v21);
}

uint64_t sub_1002045E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  NSString v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  _BYTE v30[24];
  _BYTE v31[24];
  Swift::String v32;

  v2 = v1;
  v4 = type metadata accessor for PodcastContextActionDataType(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v30[-v8];
  swift_beginAccess(v2 + 24, v31, 1, 0);
  v10 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain();
  swift_release(v10);
  v11 = type metadata accessor for PodcastContextActionConfiguration(0);
  v12 = swift_dynamicCastClass(a1, v11);
  if (v12)
  {
    v13 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v12 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v2 + 16);
  if (!v14)
    return 0;
  v15 = v14 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v14 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v30, 0, 0);
  sub_10014FDF8(v15, (uint64_t)v9, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload(v9, v4) == 1)
  {
    sub_10003F970((uint64_t)v9, type metadata accessor for PodcastContextActionDataType);
    return 0;
  }
  v16 = *((_QWORD *)v9 + 1);
  swift_retain();
  swift_bridgeObjectRelease(v16);
  sub_10014FDF8(v15, (uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
  v17 = (void *)sub_1001E2CF0();
  sub_10003F970((uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
  if (!v17)
  {
    swift_release(v14);
    return 0;
  }
  v18 = objc_msgSend(v17, "subscribed");

  swift_release(v14);
  if ((v18 & 1) == 0)
    return 0;
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v32._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0x73676E6974746553;
  v20._object = (void *)0xE800000000000000;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v32);

  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v23);

  if (v24)
  {
    v25 = objc_msgSend(v24, "imageWithRenderingMode:", 2);

  }
  else
  {
    v25 = 0;
  }
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v27 = ContextActionType.actionIdentifier.getter(24);
  v28 = swift_allocObject(&unk_1004B6028, 32, 7);
  *(_QWORD *)(v28 + 16) = v2;
  *(_QWORD *)(v28 + 24) = a1;
  swift_retain();
  v29 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v22._countAndFlagsBits, v22._object, 0, 0, v25, 0, v27, 0, v29, 0, 0, 0, sub_10020CB3C, v28);
}

uint64_t sub_10020492C(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  NSString v7;
  id v8;
  id v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  Swift::String v14;

  sub_10020641C(a1);
  if ((sub_10037E588() & 1) == 0)
    return 0;
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v14._object = (void *)0x80000001004355F0;
  v4._countAndFlagsBits = 0x6853206F74206F47;
  v4._object = (void *)0xEA0000000000776FLL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0xD000000000000021;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v14);

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v7);

  if (v8)
  {
    v9 = objc_msgSend(v8, "imageWithRenderingMode:", 2);

  }
  else
  {
    v9 = 0;
  }
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v11 = ContextActionType.actionIdentifier.getter(6);
  v12 = swift_allocObject(&unk_1004B60C8, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = a1;
  swift_retain();
  v13 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v6._countAndFlagsBits, v6._object, 0, 0, v9, 0, v11, 0, v13, 0, 0, 0, sub_10020CBCC, v12);
}

uint64_t sub_100204B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(void))(*(_QWORD *)(a3 + 8) + 8))();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3) & 1) == 0)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v16 = v8;
  v17 = v7;
  v9 = sub_100206914(a2, a3);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) == 48)
    v10 = 0;
  else
    v10 = ContextActionType.actionIdentifier.getter();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3) & 1;
  sub_100005EC8(0, (unint64_t *)&unk_100560F80, UIAction_ptr);
  v14 = (_QWORD *)swift_allocObject(&unk_1004B5C68, 48, 7);
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = v3;
  v14[5] = a1;
  swift_unknownObjectRetain(v3);
  v15 = swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v17, v16, 0, 0, v9, 0, v10, 0, v15, 0, v12, v13, sub_10020C788, v14);
}

id sub_100204C7C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B05B8);
}

id sub_100204C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(__n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  uint64_t v26;
  _QWORD *v27;
  NSString v28;
  void *v29;
  id v30;
  NSString v31;
  id v32;
  _QWORD aBlock[5];
  _QWORD *v36;
  _BYTE v37[24];
  Swift::String v38;

  v2 = v1;
  v4 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InteractionContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v11, v37, 1, 0);
  v12 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  swift_release(v12);
  v13 = type metadata accessor for PodcastContextActionConfiguration(0);
  v14 = swift_dynamicCastClass(a1, v13);
  if (v14)
  {
    v15 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(v14 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    swift_release(v15);
  }
  v16 = *v11;
  if (v16)
  {
    v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 168);
    v18 = swift_retain();
    v17(v18);
    v19 = swift_release(v16);
    InteractionContext.page.getter(v19);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v21 = InteractionContext.Page.isShowPage.getter(v20);
    sub_10003F970((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
    if ((v21 & 1) != 0)
      return 0;
  }
  if (!*(_QWORD *)(v2 + 24))
    return 0;
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v38._object = (void *)0x8000000100433730;
  v23._countAndFlagsBits = 0x6853206F74206F47;
  v23._object = (void *)0xEA0000000000776FLL;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v38)._object;

  v26 = sub_10020B7A4(a1, 23) & 1;
  v27 = (_QWORD *)swift_allocObject(&unk_1004B5CB8, 40, 7);
  v27[2] = v2;
  v27[3] = a1;
  v27[4] = v26;
  swift_retain();
  swift_retain();
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_10020C818;
  v36 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100209D28;
  aBlock[3] = &unk_1004B5CD0;
  v29 = _Block_copy(aBlock);
  v30 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v26, v28, v29);

  _Block_release(v29);
  swift_release(v36);
  objc_msgSend(v30, "setBackgroundColor:", 0);
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v31);

  objc_msgSend(v30, "setImage:", v32);
  return v30;
}

id sub_100204FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  NSString v6;
  void *v7;
  id v8;
  NSString v9;
  id v10;
  _QWORD v12[5];
  _QWORD *v13;

  sub_10020650C(a1);
  if ((sub_100202AD4() & 1) == 0)
    return 0;
  v3 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain(v3);
  v4 = sub_10020B7A4(a1, 17) & 1;
  v5 = (_QWORD *)swift_allocObject(&unk_1004B5D58, 40, 7);
  v5[2] = v1;
  v5[3] = a1;
  v5[4] = v4;
  swift_retain();
  swift_retain();
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v12[4] = sub_10020C890;
  v13 = v5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100209D28;
  v12[3] = &unk_1004B5D70;
  v7 = _Block_copy(v12);
  v8 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v4, v6, v7);

  _Block_release(v7);
  swift_release(v13);
  objc_msgSend(v8, "setBackgroundColor:", 0);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v9);

  objc_msgSend(v8, "setImage:", v10);
  return v8;
}

id sub_10020519C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  NSString v9;
  void *v10;
  NSString v11;
  id v12;
  _QWORD v14[5];
  _QWORD *v15;

  sub_100206218(a1);
  if ((sub_100258DA4() & 1) == 0)
    return 0;
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_contextActionType);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  if (v5 == 48)
    v6 = 0;
  else
    v6 = sub_10020B7A4(a1, v5) & 1;
  v8 = (_QWORD *)swift_allocObject(&unk_1004B5DF8, 40, 7);
  v8[2] = v1;
  v8[3] = a1;
  v8[4] = v6;
  swift_retain();
  swift_retain();
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v14[4] = sub_10020C908;
  v15 = v8;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100209D28;
  v14[3] = &unk_1004B5E10;
  v10 = _Block_copy(v14);
  v7 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v6, v9, v10);

  _Block_release(v10);
  swift_release(v15);
  objc_msgSend(v7, "setBackgroundColor:", 0);
  if (v3)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    v12 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v11);

    objc_msgSend(v7, "setImage:", v12);
  }
  else
  {
    objc_msgSend(v7, "setImage:", 0);
  }
  return v7;
}

id sub_100205394(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  NSString v16;
  void *v17;
  id v18;
  NSString v19;
  id v20;
  id v21;
  NSString v23;
  _QWORD aBlock[5];
  _QWORD *v25;
  char v26[24];
  Swift::String v27;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration, v26, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain();
  swift_release(v4);
  v5 = *v3;
  if (!v5)
    return 0;
  v6 = type metadata accessor for CategoryContextActionConfiguration(0);
  if (!swift_dynamicCastClass(v5, v6))
    return 0;
  v7 = *(_QWORD *)(v1 + 32);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle", swift_bridgeObjectRetain(v7).n128_f64[0]);
  v10._countAndFlagsBits = 0xD000000000000019;
  v27._object = (void *)0x8000000100435590;
  v10._object = (void *)0x8000000100435570;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0xD000000000000013;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v27)._object;

  v13 = 0;
  v14 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_contextActionType);
  if (v14 != 48)
    v13 = sub_10020B7A4(a1, v14) & 1;
  v15 = (_QWORD *)swift_allocObject(&unk_1004B5E98, 40, 7);
  v15[2] = v1;
  v15[3] = a1;
  v15[4] = v13;
  swift_retain();
  swift_retain();
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_10020C998;
  v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100209D28;
  aBlock[3] = &unk_1004B5EB0;
  v17 = _Block_copy(aBlock);
  v18 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v13, v16, v17);

  _Block_release(v17);
  swift_release(v25);
  objc_msgSend(v18, "setBackgroundColor:", 0);
  if (v7)
  {
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v20 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v19);
  }
  else
  {
    v21 = *(id *)(v1 + 32);
    if (!v21)
      goto LABEL_8;
    swift_bridgeObjectRetain(v21);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    v19 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v23);

    if (!v19)
    {
      v21 = 0;
      goto LABEL_8;
    }
    v20 = objc_msgSend(v19, "imageWithRenderingMode:", 2);
  }
  v21 = v20;

LABEL_8:
  objc_msgSend(v18, "setImage:", v21);

  return v18;
}

id sub_1002056B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  unint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  NSString v15;
  void *v16;
  NSString v17;
  id v18;
  _QWORD aBlock[5];
  _QWORD *v21;
  _BYTE v22[24];
  Swift::String v23;
  Swift::String v24;

  sub_100206308(a1);
  if ((sub_1002AE42C() & 1) == 0)
    return 0;
  swift_beginAccess(v1 + 24, v22, 0, 0);
  v3 = *(_QWORD *)(v1 + 24);
  if (v3
    && (v4 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v3, v4)))
  {
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v23._object = (void *)0xAE00A680E2747865;
    v6._object = (void *)0x80000001004355B0;
    v6._countAndFlagsBits = 0xD000000000000014;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = 0x54207463656C6553;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v23)._object;
    v9 = 0x80000001004355D0;
  }
  else
  {
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v24._object = (void *)0xEF7470697263736ELL;
    v11._countAndFlagsBits = 0x4152545F57454956;
    v11._object = (void *)0xEF5450495243534ELL;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0x6172542077656956;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v5, v12, v24)._object;
    v9 = 0xEC000000656C6262;
  }

  v13 = sub_10020B7A4(a1, 16) & 1;
  v14 = (_QWORD *)swift_allocObject(&unk_1004B5F38, 40, 7);
  v14[2] = v1;
  v14[3] = a1;
  v14[4] = v13;
  swift_retain();
  swift_retain();
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_10020CA10;
  v21 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100209D28;
  aBlock[3] = &unk_1004B5F50;
  v16 = _Block_copy(aBlock);
  v10 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v13, v15, v16);

  _Block_release(v16);
  swift_release(v21);
  objc_msgSend(v10, "setBackgroundColor:", 0);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v18 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v17);

  objc_msgSend(v10, "setImage:", v18);
  return v10;
}

id sub_1002059D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  _QWORD *v24;
  NSString v25;
  void *v26;
  id v27;
  NSString v28;
  id v29;
  _QWORD aBlock[5];
  _QWORD *v32;
  _BYTE v33[24];
  _BYTE v34[24];
  Swift::String v35;

  v2 = v1;
  v4 = type metadata accessor for PodcastContextActionDataType(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)aBlock - v8;
  swift_beginAccess(v2 + 24, v34, 1, 0);
  v10 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain();
  swift_release(v10);
  v11 = type metadata accessor for PodcastContextActionConfiguration(0);
  v12 = swift_dynamicCastClass(a1, v11);
  if (v12)
  {
    v13 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v12 + OBJC_IVAR____TtC8Podcasts33PodcastContextActionConfiguration_dataSource);
    swift_retain();
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v2 + 16);
  if (!v14)
    return 0;
  v15 = v14 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v14 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v33, 0, 0);
  sub_10014FDF8(v15, (uint64_t)v9, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload(v9, v4) == 1)
  {
    sub_10003F970((uint64_t)v9, type metadata accessor for PodcastContextActionDataType);
    return 0;
  }
  v16 = *((_QWORD *)v9 + 1);
  swift_retain();
  swift_bridgeObjectRelease(v16);
  sub_10014FDF8(v15, (uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
  v17 = (void *)sub_1001E2CF0();
  sub_10003F970((uint64_t)v7, type metadata accessor for PodcastContextActionDataType);
  if (!v17)
  {
    swift_release(v14);
    return 0;
  }
  v18 = objc_msgSend(v17, "subscribed");

  swift_release(v14);
  if ((v18 & 1) == 0)
    return 0;
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v35._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0x73676E6974746553;
  v20._object = (void *)0xE800000000000000;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v35)._object;

  v23 = sub_10020B7A4(a1, 24) & 1;
  v24 = (_QWORD *)swift_allocObject(&unk_1004B5FD8, 40, 7);
  v24[2] = v2;
  v24[3] = a1;
  v24[4] = v23;
  swift_retain();
  swift_retain();
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_10020CAF4;
  v32 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100209D28;
  aBlock[3] = &unk_1004B5FF0;
  v26 = _Block_copy(aBlock);
  v27 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v23, v25, v26);

  _Block_release(v26);
  swift_release(v32);
  objc_msgSend(v27, "setBackgroundColor:", 0);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v28);

  objc_msgSend(v27, "setImage:", v29);
  return v27;
}

id sub_100205D6C(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  _QWORD *v8;
  NSString v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  _QWORD aBlock[5];
  _QWORD *v16;
  Swift::String v17;

  sub_10020641C(a1);
  if ((sub_10037E588() & 1) == 0)
    return 0;
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v17._object = (void *)0x80000001004355F0;
  v4._countAndFlagsBits = 0x6853206F74206F47;
  v4._object = (void *)0xEA0000000000776FLL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0xD000000000000021;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v17)._object;

  v7 = sub_10020B7A4(a1, 6) & 1;
  v8 = (_QWORD *)swift_allocObject(&unk_1004B6078, 40, 7);
  v8[2] = v1;
  v8[3] = a1;
  v8[4] = v7;
  swift_retain();
  swift_retain();
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_10020CB84;
  v16 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100209D28;
  aBlock[3] = &unk_1004B6090;
  v10 = _Block_copy(aBlock);
  v11 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v7, v9, v10);

  _Block_release(v10);
  swift_release(v16);
  objc_msgSend(v11, "setBackgroundColor:", 0);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v12);

  objc_msgSend(v11, "setImage:", v13);
  return v11;
}

id sub_100205F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  void (*v8)(uint64_t, void *, void *, void *);
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  NSString v14;
  void *v15;
  NSString v16;
  id v17;
  _QWORD aBlock[2];
  void (*v20)(uint64_t, void *, void *, void *);
  void *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v23;

  (*(void (**)(void))(*(_QWORD *)(a3 + 8) + 8))();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3) & 1) == 0)
    return 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 80))(aBlock, a2, a3);
  v7 = (void *)aBlock[0];
  v8 = v20;
  v9 = v22;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  if (v10 == 48)
    v11 = 0;
  else
    v11 = sub_10020B7A4(a1, v10) & 1;
  v13 = (_QWORD *)swift_allocObject(&unk_1004B5B78, 56, 7);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v3;
  v13[5] = a1;
  v13[6] = v11;
  swift_unknownObjectRetain(v3);
  swift_retain();
  if (v9)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v14 = 0;
  }
  v22 = sub_100209A64;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  v20 = sub_100209D28;
  v21 = &unk_1004B5B90;
  v15 = _Block_copy(aBlock);
  v12 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", v11, v14, v15);

  _Block_release(v15);
  swift_release(v23);
  objc_msgSend(v12, "setBackgroundColor:", v7);
  if (v8)
  {
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v17 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v16);

  }
  else
  {
    v17 = sub_100206914(a2, a3);
  }
  objc_msgSend(v12, "setImage:", v17);

  return v12;
}

uint64_t sub_1002061DC(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B0880);
}

_QWORD *sub_1002061E8(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B0808);
}

uint64_t sub_1002061F4(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B0808);
}

id sub_100206200(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B0808);
}

uint64_t sub_10020620C(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B15E0);
}

uint64_t sub_100206218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = v1;
  swift_beginAccess(v1 + 64, v12, 1, 0);
  v4 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v2 + 64) = a1;
  swift_retain();
  swift_release(v4);
  v5 = type metadata accessor for NowPlayingContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v5))
  {
    swift_retain();
    v6 = sub_1001B76F8();
    v7 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = v6;
    swift_release(a1);
  }
  else
  {
    v8 = type metadata accessor for EpisodeContextActionConfiguration(0);
    result = swift_dynamicCastClass(a1, v8);
    if (result)
    {
      v10 = &OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource;
    }
    else
    {
      v11 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
      result = swift_dynamicCastClass(a1, v11);
      if (!result)
        return result;
      v10 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource;
    }
    v7 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = *(_QWORD *)(result + *v10);
    swift_retain();
  }
  return swift_release(v7);
}

uint64_t sub_100206308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v2 = v1;
  swift_beginAccess(v1 + 24, v15, 1, 0);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain();
  swift_release(v4);
  v5 = type metadata accessor for NowPlayingContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v5))
  {
    swift_retain();
    v6 = sub_1001B76F8();
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v6;
    swift_release(a1);
  }
  else
  {
    v8 = type metadata accessor for EpisodeContextActionConfiguration(0);
    v9 = swift_dynamicCastClass(a1, v8);
    if (v9)
    {
      v10 = &OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource;
    }
    else
    {
      v11 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
      v9 = swift_dynamicCastClass(a1, v11);
      if (!v9)
        goto LABEL_9;
      v10 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource;
    }
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v9 + *v10);
    swift_retain();
  }
  v9 = swift_release(v7);
LABEL_9:
  result = static Podcasts.areTranscriptsEnabled.getter(v9);
  if ((result & 1) != 0)
  {
    v13 = *(_QWORD *)(v2 + 16);
    swift_retain();
    sub_1002AE604(v14);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_10020641C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = v1;
  swift_beginAccess(v1 + 24, v12, 1, 0);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain();
  swift_release(v4);
  v5 = type metadata accessor for NowPlayingContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v5))
  {
    swift_retain();
    v6 = sub_1001B76F8();
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v6;
    swift_release(a1);
  }
  else
  {
    v8 = type metadata accessor for EpisodeContextActionConfiguration(0);
    result = swift_dynamicCastClass(a1, v8);
    if (result)
    {
      v10 = &OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource;
    }
    else
    {
      v11 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
      result = swift_dynamicCastClass(a1, v11);
      if (!result)
        return result;
      v10 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource;
    }
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(result + *v10);
    swift_retain();
  }
  return swift_release(v7);
}

uint64_t sub_10020650C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];

  v2 = v1;
  swift_beginAccess(v1 + 40, v14, 1, 0);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 40) = a1;
  swift_retain();
  swift_release(v4);
  v5 = type metadata accessor for NowPlayingContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v5))
  {
    swift_retain();
    v6 = sub_1001B76F8();
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v6;
    swift_release(a1);
  }
  else
  {
    v8 = type metadata accessor for EpisodeContextActionConfiguration(0);
    result = swift_dynamicCastClass(a1, v8);
    if (result)
    {
      v10 = &OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource;
    }
    else
    {
      v11 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
      result = swift_dynamicCastClass(a1, v11);
      if (!result)
        goto LABEL_9;
      v10 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource;
    }
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(result + *v10);
    swift_retain();
  }
  result = swift_release(v7);
LABEL_9:
  v12 = *(_QWORD *)(v2 + 16);
  if (v12)
  {
    swift_retain();
    sub_100367F44();
    if ((v13 & 1) != 0)
    {
      sub_10020D084(v12);
      sub_10020D9DC();
    }
    return swift_release(v12);
  }
  return result;
}

double sub_100206630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v13[24];

  v2 = v1;
  swift_beginAccess(v1 + 24, v13, 1, 0);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain();
  swift_release(v4);
  v5 = type metadata accessor for NowPlayingContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v5))
  {
    swift_retain();
    v6 = sub_1001B76F8();
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v6;
    swift_release(a1);
LABEL_8:
    swift_release(v7);
    return sub_100321AD4();
  }
  v8 = type metadata accessor for EpisodeContextActionConfiguration(0);
  v9 = swift_dynamicCastClass(a1, v8);
  if (v9)
  {
    v10 = &OBJC_IVAR____TtC8Podcasts33EpisodeContextActionConfiguration_dataSource;
LABEL_7:
    v7 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v9 + *v10);
    swift_retain();
    goto LABEL_8;
  }
  v11 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  v9 = swift_dynamicCastClass(a1, v11);
  if (v9)
  {
    v10 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource;
    goto LABEL_7;
  }
  return sub_100321AD4();
}

uint64_t sub_100206728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(__n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;

  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(void (**)(__n128))(*(_QWORD *)(v6 + 8) + 24);
  v8 = swift_retain();
  v7(v8);
  v9 = type metadata accessor for NowPlayingContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v9))
  {
    swift_retain();
    v10 = sub_1001B76F8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(v10, a2, a3);
LABEL_8:
    swift_release(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(a2, v6);
  }
  v11 = type metadata accessor for EpisodeContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v11))
  {
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a3 + 24);
    swift_retain();
    v13 = swift_retain();
    v12(v14, a2, a3, v13);
    goto LABEL_8;
  }
  v15 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  v16 = swift_dynamicCastClass(a1, v15);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_dataSource);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a3 + 24);
    swift_retain();
    v19 = swift_retain();
    v18(v17, a2, a3, v19);
    goto LABEL_8;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(a2, v6);
}

_QWORD *sub_100206860(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B1568);
}

uint64_t sub_10020686C(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B1568);
}

id sub_100206878(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B1568);
}

uint64_t sub_100206884(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B19C8);
}

_QWORD *sub_100206890(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B1950);
}

uint64_t sub_10020689C(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B1950);
}

id sub_1002068A8(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B1950);
}

uint64_t sub_1002068B4(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B1C68);
}

_QWORD *sub_1002068C0(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B1BF0);
}

uint64_t sub_1002068CC(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B1BF0);
}

id sub_1002068D8(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B1BF0);
}

uint64_t sub_1002068E4(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B1EE0);
}

_QWORD *sub_1002068F0(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B1E68);
}

uint64_t sub_1002068FC(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B1E68);
}

id sub_100206908(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B1E68);
}

id sub_100206914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  id v6;

  (*(void (**)(void))(a2 + 32))();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v5 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v4);

  if (!v5)
    return 0;
  v6 = objc_msgSend(v5, "imageWithRenderingMode:", 2);

  return v6;
}

uint64_t sub_1002069AC(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B2D08);
}

_QWORD *sub_1002069B8(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B2C90);
}

uint64_t sub_1002069C4(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B2C90);
}

id sub_1002069D0(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B2C90);
}

double sub_1002069DC@<D0>(uint64_t a1@<X8>)
{
  return sub_10020C5FC(0xD00000000000001ALL, (void *)0x8000000100433730, a1);
}

uint64_t sub_1002069FC(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, (uint64_t (*)(void))sub_1001C8330);
}

uint64_t sub_100206A18(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B36E8);
}

_QWORD *sub_100206A24(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B3630);
}

uint64_t sub_100206A30(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B3630);
}

id sub_100206A3C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B3630);
}

uint64_t sub_100206A48(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B38A0);
}

_QWORD *sub_100206A54(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B3828);
}

uint64_t sub_100206A60(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B3828);
}

id sub_100206A6C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B3828);
}

uint64_t sub_100206A78(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B3BC0);
}

_QWORD *sub_100206A84(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B3B48);
}

uint64_t sub_100206A90(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B3B48);
}

id sub_100206A9C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B3B48);
}

uint64_t sub_100206AA8(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B4680);
}

_QWORD *sub_100206AB4(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B4608);
}

uint64_t sub_100206AC0(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B4608);
}

id sub_100206ACC(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B4608);
}

uint64_t sub_100206AD8(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B5710);
}

_QWORD *sub_100206AE4(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B5698);
}

uint64_t sub_100206AF0(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B5698);
}

id sub_100206AFC(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B5698);
}

uint64_t sub_100206B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ObjectType;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  void (*v83)(void);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[32];
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;

  v2 = type metadata accessor for ActionMetricsBehavior(0);
  v90 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v89 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for PresentationSource.Position(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v85 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055A350);
  __chkstk_darwin(v5);
  v86 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSLogger(0);
  v94 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for ContextMetricsActionContext(0);
  v10 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(qword_1005542D8);
  v14 = __chkstk_darwin(v13);
  v91 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v77 - v16;
  result = sub_100209DD8(a1);
  if (!v19)
    return result;
  v22 = v19;
  v80 = v20;
  v81 = result;
  v93 = v21;
  v84 = v2;
  v83 = *(void (**)(void))(*(_QWORD *)a1 + 120);
  v83();
  v23 = type metadata accessor for PresentationSource(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v95 = v23;
  v82 = v25;
  result = ((uint64_t (*)(char *, uint64_t))v25)(v17, 1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v26 = PresentationSource.viewController.getter();
  if (!v26)
  {
    swift_bridgeObjectRelease(v93);
    v52 = swift_bridgeObjectRelease(v22);
    v53 = (*(uint64_t (**)(char *, uint64_t, __n128))(v24 + 8))(v17, v95, v52);
LABEL_14:
    static OSLogger.actions.getter(v53);
    v54 = sub_10003F544(&qword_100557CA8);
    v55 = type metadata accessor for LogMessage(0);
    v56 = swift_allocObject(v54, ((*(unsigned __int8 *)(*(_QWORD *)(v55 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v55 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v55 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v55 - 8) + 80) | 7);
    *(_OWORD *)(v56 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100435530);
    Logger.error(_:)(v56, v7, &protocol witness table for OSLogger);
    v57 = swift_bridgeObjectRelease(v56);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v94 + 8))(v9, v7, v57);
  }
  v27 = (void *)v26;
  v79 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
  v28 = v79(v17, v95);
  v29 = UIResponder.nearestActionRunner.getter(v28);
  v31 = v30;

  if (!v29)
  {
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v22);
    goto LABEL_14;
  }
  v94 = v31;
  v78 = v29;
  v33 = MetricsLabel.rawValue.getter(v32);
  v35 = v34;
  v36 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v36)
    || (v37 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(a1, v37)))
  {
    v38 = static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    v38 = static MetricsTargetType.button.getter();
  }
  v40 = v38;
  v41 = v39;
  v42 = v84;
  v43 = swift_dynamicCastClass(a1, v36);
  v44 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v43)
    v44 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *v44, v92);
  v45 = type metadata accessor for ContextMetricsAction(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v93 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(v33, v35, v81, v22, v80, v93, v40, v41, v12);
  type metadata accessor for ActionRunnerOptions(0);
  v46 = swift_retain();
  v47 = BaseObjectGraph.__allocating_init(_:)(v46);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v97);
  v48 = v98;
  if (v98)
  {
    v49 = sub_10003A834(v97, v98);
    *((_QWORD *)&v101 + 1) = v48;
    v50 = sub_1000242A8(&v100);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v50, v49, v48);
    v51 = sub_10003D380(v97);
  }
  else
  {
    v51 = sub_100007A28((uint64_t)v97, &qword_100557C78);
    v100 = 0u;
    v101 = 0u;
  }
  v58 = v94;
  v59 = v91;
  v60 = v82;
  ((void (*)(uint64_t))v83)(v51);
  result = v60(v59, 1, v95);
  if ((_DWORD)result == 1)
    goto LABEL_24;
  v61 = (uint64_t)v86;
  PresentationSource.position.getter();
  v62 = v87;
  v63 = v88;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v61, 1, v88))
  {
    sub_100007A28(v61, &qword_10055A350);
    v79(v59, v95);
    v64 = 0;
  }
  else
  {
    v65 = v59;
    v66 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v85, v61, v63);
    sub_100007A28(v61, &qword_10055A350);
    v67 = v79(v65, v95);
    v64 = (void *)PresentationSource.Position.view.getter(v67);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v63);
  }
  sub_10020C738((uint64_t)&v100, (uint64_t)v96);
  v68 = v64;
  ActionOrigin.init(sender:view:)(v97, v96, v64);
  v69 = ActionRunnerOptions.withActionOrigin(_:)(v97);
  sub_100007A28((uint64_t)v97, (uint64_t *)&unk_100557CB0);

  swift_release(v47);
  sub_100007A28((uint64_t)&v100, (uint64_t *)&unk_100552300);
  v70 = v78;
  ObjectType = swift_getObjectType(v78, v71);
  v98 = v45;
  v99 = sub_100026844(&qword_10055A358, (uint64_t (*)(uint64_t))&type metadata accessor for ContextMetricsAction, (uint64_t)&protocol conformance descriptor for Action);
  v73 = v93;
  v97[0] = v93;
  v75 = v89;
  v74 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v89, enum case for ActionMetricsBehavior.fromAction(_:), v42);
  swift_retain();
  v76 = ActionRunner.perform(_:withMetrics:asPartOf:)(v97, v75, v69, ObjectType, v58);
  swift_release(v73);
  swift_unknownObjectRelease(v70);
  swift_release(v69);
  swift_release(v76);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v42);
  return sub_10003D380(v97);
}

uint64_t sub_100207238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  unsigned int *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  char *v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(void);
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[32];
  _QWORD v101[3];
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;

  v2 = type metadata accessor for ActionMetricsBehavior(0);
  v92 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v91 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for PresentationSource.Position(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v87 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055A350);
  __chkstk_darwin(v5);
  v88 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContextMetricsActionContext(0);
  v94 = *(_QWORD *)(v7 - 8);
  v95 = v7;
  __chkstk_darwin(v7);
  v96 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MetricsLabel(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSLogger(0);
  v98 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(qword_1005542D8);
  v17 = __chkstk_darwin(v16);
  v93 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v81 - v19;
  result = sub_10020A0D8(a1);
  if (!v22)
    return result;
  v25 = v22;
  v83 = v23;
  v84 = result;
  v97 = v24;
  v82 = v2;
  v86 = *(void (**)(void))(*(_QWORD *)a1 + 120);
  v86();
  v26 = type metadata accessor for PresentationSource(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v99 = v26;
  v85 = v28;
  result = ((uint64_t (*)(char *, uint64_t))v28)(v20, 1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v29 = PresentationSource.viewController.getter();
  if (!v29)
  {
    swift_bridgeObjectRelease(v97);
    v58 = swift_bridgeObjectRelease(v25);
    v59 = (*(uint64_t (**)(char *, uint64_t, __n128))(v27 + 8))(v20, v99, v58);
LABEL_14:
    static OSLogger.actions.getter(v59);
    v60 = sub_10003F544(&qword_100557CA8);
    v61 = type metadata accessor for LogMessage(0);
    v62 = swift_allocObject(v60, ((*(unsigned __int8 *)(*(_QWORD *)(v61 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v61 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v61 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v61 - 8) + 80) | 7);
    *(_OWORD *)(v62 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100435530);
    Logger.error(_:)(v62, v13, &protocol witness table for OSLogger);
    v63 = swift_bridgeObjectRelease(v62);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v98 + 8))(v15, v13, v63);
  }
  v30 = (void *)v29;
  v81 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
  v31 = v81(v20, v99);
  v32 = UIResponder.nearestActionRunner.getter(v31);
  v34 = v33;

  if (!v32)
  {
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v25);
    goto LABEL_14;
  }
  v98 = v34;
  v35 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for MetricsLabel.play(_:), v9);
  v36 = MetricsLabel.rawValue.getter(v35);
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v39 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v39)
    || (v40 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(a1, v40)))
  {
    v41 = v32;
    v42 = static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    v41 = v32;
    v42 = static MetricsTargetType.button.getter();
  }
  v44 = v42;
  v45 = v43;
  v46 = v86;
  v47 = swift_dynamicCastClass(a1, v39);
  v48 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v47)
    v48 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  v49 = v96;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v96, *v48, v95);
  v50 = type metadata accessor for ContextMetricsAction(0);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v51 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(v36, v38, v84, v25, v83, v97, v44, v45, v49);
  type metadata accessor for ActionRunnerOptions(0);
  v52 = swift_retain();
  v53 = BaseObjectGraph.__allocating_init(_:)(v52);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v101);
  v54 = v102;
  if (v102)
  {
    v55 = sub_10003A834(v101, v102);
    *((_QWORD *)&v105 + 1) = v54;
    v56 = sub_1000242A8(&v104);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v56, v55, v54);
    v57 = sub_10003D380(v101);
  }
  else
  {
    v57 = sub_100007A28((uint64_t)v101, &qword_100557C78);
    v104 = 0u;
    v105 = 0u;
  }
  v64 = v93;
  v65 = v85;
  ((void (*)(uint64_t))v46)(v57);
  result = v65(v64, 1, v99);
  if ((_DWORD)result == 1)
    goto LABEL_24;
  v66 = (uint64_t)v88;
  PresentationSource.position.getter();
  v67 = v89;
  v68 = v90;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v66, 1, v90))
  {
    sub_100007A28(v66, &qword_10055A350);
    v81(v64, v99);
    v69 = 0;
  }
  else
  {
    v70 = v64;
    v71 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v87, v66, v68);
    sub_100007A28(v66, &qword_10055A350);
    v72 = v81(v70, v99);
    v69 = (void *)PresentationSource.Position.view.getter(v72);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v68);
  }
  sub_10020C738((uint64_t)&v104, (uint64_t)v100);
  v73 = v69;
  ActionOrigin.init(sender:view:)(v101, v100, v69);
  v74 = ActionRunnerOptions.withActionOrigin(_:)(v101);
  sub_100007A28((uint64_t)v101, (uint64_t *)&unk_100557CB0);

  swift_release(v53);
  sub_100007A28((uint64_t)&v104, (uint64_t *)&unk_100552300);
  ObjectType = swift_getObjectType(v41, v75);
  v102 = v50;
  v103 = sub_100026844(&qword_10055A358, (uint64_t (*)(uint64_t))&type metadata accessor for ContextMetricsAction, (uint64_t)&protocol conformance descriptor for Action);
  v101[0] = v51;
  v77 = v92;
  v78 = v91;
  v79 = v82;
  (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, enum case for ActionMetricsBehavior.fromAction(_:), v82);
  swift_retain();
  v80 = ActionRunner.perform(_:withMetrics:asPartOf:)(v101, v78, v74, ObjectType, v98);
  swift_release(v51);
  swift_unknownObjectRelease(v41);
  swift_release(v74);
  swift_release(v80);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  return sub_10003D380(v101);
}

uint64_t sub_1002079D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ObjectType;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  void (*v88)(void);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;

  v3 = type metadata accessor for ActionMetricsBehavior(0);
  v94 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v93 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for PresentationSource.Position(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v89 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055A350);
  __chkstk_darwin(v6);
  v90 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContextMetricsActionContext(0);
  v96 = *(_QWORD *)(v8 - 8);
  v97 = v8;
  __chkstk_darwin(v8);
  v98 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MetricsLabel(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSLogger(0);
  v101 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(qword_1005542D8);
  v18 = __chkstk_darwin(v17);
  v95 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v82 - v20;
  v22 = v1;
  result = sub_10020A6D8(a1);
  if (!v24)
    return result;
  v84 = v25;
  v85 = result;
  v99 = v26;
  v100 = v24;
  v83 = v3;
  v27 = *(void (**)(void))(*(_QWORD *)a1 + 120);
  v86 = a1;
  v88 = v27;
  v27();
  v28 = type metadata accessor for PresentationSource(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v102 = v28;
  v87 = v30;
  result = ((uint64_t (*)(char *, uint64_t))v30)(v21, 1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v31 = PresentationSource.viewController.getter();
  if (!v31)
  {
    swift_bridgeObjectRelease(v99);
    v61 = swift_bridgeObjectRelease(v100);
    v62 = (*(uint64_t (**)(char *, uint64_t, __n128))(v29 + 8))(v21, v102, v61);
LABEL_14:
    static OSLogger.actions.getter(v62);
    v63 = sub_10003F544(&qword_100557CA8);
    v64 = type metadata accessor for LogMessage(0);
    v65 = swift_allocObject(v63, ((*(unsigned __int8 *)(*(_QWORD *)(v64 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v64 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v64 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v64 - 8) + 80) | 7);
    *(_OWORD *)(v65 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100435530);
    Logger.error(_:)(v65, v14, &protocol witness table for OSLogger);
    v66 = swift_bridgeObjectRelease(v65);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v101 + 8))(v16, v14, v66);
  }
  v32 = (void *)v31;
  v82 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  v33 = v82(v21, v102);
  v34 = UIResponder.nearestActionRunner.getter(v33);
  v36 = v35;

  if (!v34)
  {
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v100);
    goto LABEL_14;
  }
  v101 = v36;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v22 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_metricsLabel, v10);
  v38 = MetricsLabel.rawValue.getter(v37);
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v41 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  v42 = v86;
  if (swift_dynamicCastClass(v86, v41)
    || (v43 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v42, v43)))
  {
    v44 = v34;
    v45 = static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    v44 = v34;
    v45 = static MetricsTargetType.button.getter();
  }
  v47 = v45;
  v48 = v46;
  v49 = v95;
  v50 = swift_dynamicCastClass(v42, v41);
  v51 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v50)
    v51 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  v52 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v98, *v51, v97);
  v53 = type metadata accessor for ContextMetricsAction(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(v38, v40, v85, v100, v84, v99, v47, v48, v52);
  type metadata accessor for ActionRunnerOptions(0);
  v55 = swift_retain();
  v56 = BaseObjectGraph.__allocating_init(_:)(v55);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v42 + 144))(v104);
  v57 = v105;
  if (v105)
  {
    v58 = sub_10003A834(v104, v105);
    *((_QWORD *)&v108 + 1) = v57;
    v59 = sub_1000242A8(&v107);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v59, v58, v57);
    v60 = sub_10003D380(v104);
  }
  else
  {
    v60 = sub_100007A28((uint64_t)v104, &qword_100557C78);
    v107 = 0u;
    v108 = 0u;
  }
  v67 = v87;
  ((void (*)(uint64_t))v88)(v60);
  result = v67(v49, 1, v102);
  if ((_DWORD)result == 1)
    goto LABEL_24;
  v68 = (uint64_t)v90;
  PresentationSource.position.getter();
  v69 = v91;
  v70 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v68, 1, v92))
  {
    sub_100007A28(v68, &qword_10055A350);
    v82(v49, v102);
    v71 = 0;
  }
  else
  {
    v72 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v89, v68, v70);
    sub_100007A28(v68, &qword_10055A350);
    v73 = v82(v49, v102);
    v71 = (void *)PresentationSource.Position.view.getter(v73);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v72, v70);
  }
  sub_10020C738((uint64_t)&v107, (uint64_t)v103);
  v74 = v71;
  ActionOrigin.init(sender:view:)(v104, v103, v71);
  v75 = ActionRunnerOptions.withActionOrigin(_:)(v104);
  sub_100007A28((uint64_t)v104, (uint64_t *)&unk_100557CB0);

  swift_release(v56);
  sub_100007A28((uint64_t)&v107, (uint64_t *)&unk_100552300);
  ObjectType = swift_getObjectType(v44, v76);
  v105 = v53;
  v106 = sub_100026844(&qword_10055A358, (uint64_t (*)(uint64_t))&type metadata accessor for ContextMetricsAction, (uint64_t)&protocol conformance descriptor for Action);
  v104[0] = v54;
  v78 = v94;
  v79 = v93;
  v80 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for ActionMetricsBehavior.fromAction(_:), v83);
  swift_retain();
  v81 = ActionRunner.perform(_:withMetrics:asPartOf:)(v104, v79, v75, ObjectType, v101);
  swift_release(v54);
  swift_unknownObjectRelease(v44);
  swift_release(v75);
  swift_release(v81);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
  return sub_10003D380(v104);
}

void sub_10020817C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  void *v74;
  char *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t);
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  void (*v89)(__n128);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[32];
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  char v112[8];

  v3 = type metadata accessor for ActionMetricsBehavior(0);
  v99 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v98 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for PresentationSource.Position(0);
  v97 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v93 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055A350);
  __chkstk_darwin(v6);
  v96 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for ContextMetricsActionContext(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v102 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MetricsLabel(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSLogger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(qword_1005542D8);
  v18 = __chkstk_darwin(v17);
  v95 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v85 - v20;
  v105 = a1;
  v22 = sub_10020A9E8(a1);
  if (!v23)
    return;
  v26 = v23;
  v91 = v24;
  v92 = v22;
  v104 = v25;
  v27 = swift_beginAccess(v1 + 24, v112, 0, 0);
  v28 = *(_QWORD *)(v1 + 24);
  if (v28)
  {
    v29 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0);
    if (swift_dynamicCastClass(v28, v29))
    {
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v26);
      return;
    }
  }
  v90 = v3;
  v89 = *(void (**)(__n128))(*(_QWORD *)v105 + 120);
  v89(v27);
  v30 = type metadata accessor for PresentationSource(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v94 = v30;
  v88 = v32;
  if (((unsigned int (*)(char *, uint64_t))v32)(v21, 1) == 1)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return;
  }
  v33 = PresentationSource.viewController.getter();
  if (!v33)
  {
    swift_bridgeObjectRelease(v104);
    v64 = swift_bridgeObjectRelease(v26);
    v65 = (*(uint64_t (**)(char *, uint64_t, __n128))(v31 + 8))(v21, v94, v64);
LABEL_17:
    static OSLogger.actions.getter(v65);
    v66 = sub_10003F544(&qword_100557CA8);
    v67 = type metadata accessor for LogMessage(0);
    v68 = swift_allocObject(v66, ((*(unsigned __int8 *)(*(_QWORD *)(v67 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v67 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v67 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v67 - 8) + 80) | 7);
    *(_OWORD *)(v68 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100435530);
    Logger.error(_:)(v68, v13, &protocol witness table for OSLogger);
    v69 = swift_bridgeObjectRelease(v68);
    (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v16, v13, v69);
    return;
  }
  v34 = (void *)v33;
  v87 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
  v35 = v87(v21, v94);
  v36 = UIResponder.nearestActionRunner.getter(v35);
  v38 = v37;

  if (!v36)
  {
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v26);
    goto LABEL_17;
  }
  v85 = v38;
  v86 = v36;
  v39 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for MetricsLabel.viewTranscript(_:), v9);
  v40 = MetricsLabel.rawValue.getter(v39);
  v42 = v41;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v43 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  if (swift_dynamicCastClass(v105, v43)
    || (v44 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v105, v44)))
  {
    v45 = static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    v45 = static MetricsTargetType.button.getter();
  }
  v47 = v45;
  v48 = v46;
  v49 = v90;
  v50 = v103;
  v51 = v101;
  v52 = v105;
  v53 = swift_dynamicCastClass(v105, v43);
  v54 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v53)
    v54 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  v55 = v102;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v102, *v54, v51);
  v56 = type metadata accessor for ContextMetricsAction(0);
  swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  v57 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(v40, v42, v92, v26, v91, v104, v47, v48, v55);
  type metadata accessor for ActionRunnerOptions(0);
  v58 = swift_retain();
  v59 = BaseObjectGraph.__allocating_init(_:)(v58);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v52 + 144))(v107);
  v60 = v108;
  if (v108)
  {
    v61 = sub_10003A834(v107, v108);
    *((_QWORD *)&v111 + 1) = v60;
    v62 = sub_1000242A8(&v110);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v62, v61, v60);
    v63 = sub_10003D380(v107);
  }
  else
  {
    v63 = sub_100007A28((uint64_t)v107, &qword_100557C78);
    v110 = 0u;
    v111 = 0u;
  }
  v70 = v97;
  v71 = (uint64_t)v96;
  v72 = v95;
  v73 = v88;
  ((void (*)(uint64_t))v89)(v63);
  if (v73(v72, 1, v94) == 1)
    goto LABEL_27;
  PresentationSource.position.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v71, 1, v50))
  {
    sub_100007A28(v71, &qword_10055A350);
    v87(v72, v94);
    v74 = 0;
  }
  else
  {
    v75 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v93, v71, v50);
    sub_100007A28(v71, &qword_10055A350);
    v76 = v87(v72, v94);
    v74 = (void *)PresentationSource.Position.view.getter(v76);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v75, v50);
  }
  sub_10020C738((uint64_t)&v110, (uint64_t)v106);
  v77 = v74;
  ActionOrigin.init(sender:view:)(v107, v106, v74);
  v78 = ActionRunnerOptions.withActionOrigin(_:)(v107);
  sub_100007A28((uint64_t)v107, (uint64_t *)&unk_100557CB0);

  swift_release(v59);
  sub_100007A28((uint64_t)&v110, (uint64_t *)&unk_100552300);
  v79 = v86;
  ObjectType = swift_getObjectType(v86, v80);
  v108 = v56;
  v109 = sub_100026844(&qword_10055A358, (uint64_t (*)(uint64_t))&type metadata accessor for ContextMetricsAction, (uint64_t)&protocol conformance descriptor for Action);
  v107[0] = v57;
  v82 = v99;
  v83 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v98, enum case for ActionMetricsBehavior.fromAction(_:), v49);
  swift_retain();
  v84 = ActionRunner.perform(_:withMetrics:asPartOf:)(v107, v83, v78, ObjectType, v85);
  swift_release(v57);
  swift_unknownObjectRelease(v79);
  swift_release(v78);
  swift_release(v84);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v49);
  sub_10003D380(v107);
}

uint64_t sub_100208990(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  void (*v88)(void);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE v102[32];
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;

  v98 = a3;
  v5 = type metadata accessor for ActionMetricsBehavior(0);
  v95 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v94 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for PresentationSource.Position(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v90 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055A350);
  __chkstk_darwin(v8);
  v91 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for ContextMetricsActionContext(0);
  v99 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSLogger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544(qword_1005542D8);
  v17 = __chkstk_darwin(v16);
  v97 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v81 - v19;
  result = a2(a1);
  if (!v22)
    return result;
  v25 = v22;
  v85 = v23;
  v86 = result;
  v100 = v24;
  v89 = v5;
  v88 = *(void (**)(void))(*(_QWORD *)a1 + 120);
  v88();
  v26 = type metadata accessor for PresentationSource(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v101 = v26;
  v87 = v28;
  result = ((uint64_t (*)(char *, uint64_t))v28)(v20, 1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v29 = PresentationSource.viewController.getter();
  if (!v29)
  {
    swift_bridgeObjectRelease(v100);
    v56 = swift_bridgeObjectRelease(v25);
    v57 = (*(uint64_t (**)(char *, uint64_t, __n128))(v27 + 8))(v20, v101, v56);
LABEL_14:
    static OSLogger.actions.getter(v57);
    v58 = sub_10003F544(&qword_100557CA8);
    v59 = type metadata accessor for LogMessage(0);
    v60 = swift_allocObject(v58, ((*(unsigned __int8 *)(*(_QWORD *)(v59 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v59 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v59 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v59 - 8) + 80) | 7);
    *(_OWORD *)(v60 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100435530);
    Logger.error(_:)(v60, v12, &protocol witness table for OSLogger);
    v61 = swift_bridgeObjectRelease(v60);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v61);
  }
  v30 = (void *)v29;
  v84 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
  v31 = v84(v20, v101);
  v32 = UIResponder.nearestActionRunner.getter(v31);
  v34 = v33;

  if (!v32)
  {
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v25);
    goto LABEL_14;
  }
  v83 = v34;
  v82 = v32;
  v36 = MetricsLabel.rawValue.getter(v35);
  v38 = v37;
  v39 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  if (swift_dynamicCastClass(a1, v39)
    || (v40 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(a1, v40)))
  {
    v41 = static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    v41 = static MetricsTargetType.button.getter();
  }
  v43 = v41;
  v44 = v42;
  v45 = v89;
  v46 = v96;
  v47 = swift_dynamicCastClass(a1, v39);
  v48 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v47)
    v48 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v11, *v48, v46);
  v49 = type metadata accessor for ContextMetricsAction(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v100 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(v36, v38, v86, v25, v85, v100, v43, v44, v11);
  type metadata accessor for ActionRunnerOptions(0);
  v50 = swift_retain();
  v51 = BaseObjectGraph.__allocating_init(_:)(v50);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v103);
  v52 = v104;
  if (v104)
  {
    v53 = sub_10003A834(v103, v104);
    *((_QWORD *)&v107 + 1) = v52;
    v54 = sub_1000242A8(&v106);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v54, v53, v52);
    v55 = sub_10003D380(v103);
  }
  else
  {
    v55 = sub_100007A28((uint64_t)v103, &qword_100557C78);
    v106 = 0u;
    v107 = 0u;
  }
  v62 = v83;
  v63 = v97;
  v64 = v87;
  ((void (*)(uint64_t))v88)(v55);
  result = v64(v63, 1, v101);
  if ((_DWORD)result == 1)
    goto LABEL_24;
  v65 = (uint64_t)v91;
  PresentationSource.position.getter();
  v66 = v92;
  v67 = v93;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v65, 1, v93))
  {
    sub_100007A28(v65, &qword_10055A350);
    v84(v63, v101);
    v68 = 0;
  }
  else
  {
    v69 = v63;
    v70 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v90, v65, v67);
    sub_100007A28(v65, &qword_10055A350);
    v71 = v84(v69, v101);
    v68 = (void *)PresentationSource.Position.view.getter(v71);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v70, v67);
  }
  sub_10020C738((uint64_t)&v106, (uint64_t)v102);
  v72 = v68;
  ActionOrigin.init(sender:view:)(v103, v102, v68);
  v73 = ActionRunnerOptions.withActionOrigin(_:)(v103);
  sub_100007A28((uint64_t)v103, (uint64_t *)&unk_100557CB0);

  swift_release(v51);
  sub_100007A28((uint64_t)&v106, (uint64_t *)&unk_100552300);
  v74 = v82;
  ObjectType = swift_getObjectType(v82, v75);
  v104 = v49;
  v105 = sub_100026844(&qword_10055A358, (uint64_t (*)(uint64_t))&type metadata accessor for ContextMetricsAction, (uint64_t)&protocol conformance descriptor for Action);
  v77 = v100;
  v103[0] = v100;
  v78 = v95;
  v79 = v94;
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, enum case for ActionMetricsBehavior.fromAction(_:), v45);
  swift_retain();
  v80 = ActionRunner.perform(_:withMetrics:asPartOf:)(v103, v79, v73, ObjectType, v62);
  swift_release(v77);
  swift_unknownObjectRelease(v74);
  swift_release(v73);
  swift_release(v80);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v45);
  return sub_10003D380(v103);
}

void sub_1002090DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  void (*v90)(void);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[32];
  _QWORD v110[3];
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;

  v6 = type metadata accessor for OSLogger(0);
  v105 = *(_QWORD *)(v6 - 8);
  v106 = v6;
  __chkstk_darwin(v6);
  v104 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetricsBehavior(0);
  v100 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v99 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for PresentationSource.Position(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v94 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_10055A350);
  __chkstk_darwin(v11);
  v96 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ContextMetricsActionContext(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v103 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MetricsLabel(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(qword_1005542D8);
  v19 = __chkstk_darwin(v18);
  v95 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v86 - v21;
  v23 = sub_10020B2EC(a1, a2, a3);
  if (!v24)
    return;
  v92 = v25;
  v93 = v23;
  v107 = v26;
  v108 = v24;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 112))(a1, a2, a3) & 1) != 0)
  {
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v108);
    return;
  }
  v88 = v8;
  v27 = *(void (**)(void))(*(_QWORD *)a1 + 120);
  v91 = a1;
  v90 = v27;
  v27();
  v28 = type metadata accessor for PresentationSource(0);
  v29 = *(_QWORD *)(v28 - 8);
  v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v89(v22, 1, v28) == 1)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  v30 = PresentationSource.viewController.getter();
  if (!v30)
  {
    swift_bridgeObjectRelease(v107);
    v61 = swift_bridgeObjectRelease(v108);
    v62 = (*(uint64_t (**)(char *, uint64_t, __n128))(v29 + 8))(v22, v28, v61);
LABEL_16:
    v63 = v104;
    static OSLogger.actions.getter(v62);
    v64 = sub_10003F544(&qword_100557CA8);
    v65 = type metadata accessor for LogMessage(0);
    v66 = swift_allocObject(v64, ((*(unsigned __int8 *)(*(_QWORD *)(v65 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v65 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v65 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v65 - 8) + 80) | 7);
    *(_OWORD *)(v66 + 16) = xmmword_1003CA200;
    LogMessage.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100435530);
    v67 = v106;
    Logger.error(_:)(v66, v106, &protocol witness table for OSLogger);
    v68 = swift_bridgeObjectRelease(v66);
    (*(void (**)(char *, uint64_t, __n128))(v105 + 8))(v63, v67, v68);
    return;
  }
  v31 = (void *)v30;
  v32 = *(void (**)(char *, uint64_t))(v29 + 8);
  v33 = v28;
  v87 = v32;
  v34 = ((uint64_t (*)(char *, uint64_t))v32)(v22, v28);
  v35 = UIResponder.nearestActionRunner.getter(v34);
  v37 = v36;

  if (!v35)
  {
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v108);
    goto LABEL_16;
  }
  v106 = v35;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v39 = MetricsLabel.rawValue.getter(v38);
  v41 = v40;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v42 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  v43 = v91;
  if (swift_dynamicCastClass(v91, v42)
    || (v44 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0),
        swift_dynamicCastClass(v43, v44)))
  {
    v45 = static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    v45 = static MetricsTargetType.button.getter();
  }
  v47 = v45;
  v48 = v46;
  v50 = v102;
  v49 = v103;
  v105 = v37;
  v51 = swift_dynamicCastClass(v43, v42);
  v52 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v51)
    v52 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v49, *v52, v50);
  v53 = type metadata accessor for ContextMetricsAction(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(v39, v41, v93, v108, v92, v107, v47, v48, v49);
  type metadata accessor for ActionRunnerOptions(0);
  v55 = swift_retain();
  v56 = BaseObjectGraph.__allocating_init(_:)(v55);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v43 + 144))(v110);
  v57 = v111;
  if (v111)
  {
    v58 = sub_10003A834(v110, v111);
    *((_QWORD *)&v114 + 1) = v57;
    v59 = sub_1000242A8(&v113);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v59, v58, v57);
    v60 = sub_10003D380(v110);
  }
  else
  {
    v60 = sub_100007A28((uint64_t)v110, &qword_100557C78);
    v113 = 0u;
    v114 = 0u;
  }
  v69 = v98;
  v70 = v97;
  v71 = v95;
  v72 = v89;
  ((void (*)(uint64_t))v90)(v60);
  if (v72(v71, 1, v33) == 1)
    goto LABEL_26;
  v73 = (uint64_t)v96;
  PresentationSource.position.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v73, 1, v69))
  {
    sub_100007A28(v73, &qword_10055A350);
    v87(v71, v33);
    v74 = 0;
  }
  else
  {
    v75 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v94, v73, v69);
    sub_100007A28(v73, &qword_10055A350);
    v76 = ((uint64_t (*)(char *, uint64_t))v87)(v71, v33);
    v74 = (void *)PresentationSource.Position.view.getter(v76);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v75, v69);
  }
  sub_10020C738((uint64_t)&v113, (uint64_t)v109);
  v77 = v74;
  ActionOrigin.init(sender:view:)(v110, v109, v74);
  v78 = ActionRunnerOptions.withActionOrigin(_:)(v110);
  sub_100007A28((uint64_t)v110, (uint64_t *)&unk_100557CB0);

  swift_release(v56);
  sub_100007A28((uint64_t)&v113, (uint64_t *)&unk_100552300);
  v79 = v106;
  ObjectType = swift_getObjectType(v106, v80);
  v111 = v53;
  v112 = sub_100026844(&qword_10055A358, (uint64_t (*)(uint64_t))&type metadata accessor for ContextMetricsAction, (uint64_t)&protocol conformance descriptor for Action);
  v110[0] = v54;
  v82 = v100;
  v83 = v99;
  v84 = v88;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v99, enum case for ActionMetricsBehavior.fromAction(_:), v88);
  swift_retain();
  v85 = ActionRunner.perform(_:withMetrics:asPartOf:)(v110, v83, v78, ObjectType, v105);
  swift_release(v54);
  swift_unknownObjectRelease(v79);
  swift_release(v78);
  swift_release(v85);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
  sub_10003D380(v110);
}

uint64_t sub_1002098F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t), void (*a9)(__n128))
{
  __n128 v12;

  a8(a6);
  v12 = swift_retain();
  a9(v12);
  sub_100209A90(a7, a3, a4);
  return swift_release(a4);
}

uint64_t sub_100209954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9, void (*a10)(__n128))
{
  __n128 v13;

  sub_100208990(a6, a8, a9);
  v13 = swift_retain();
  a10(v13);
  sub_100209A90(a7, a3, a4);
  return swift_release(a4);
}

uint64_t sub_1002099BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v13;
  void (*v14)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t, __n128);
  __n128 v15;

  sub_1002090DC(a6, a8, a9);
  v13 = (_QWORD *)swift_allocObject(&unk_1004B5BF0, 40, 7);
  v13[2] = a7;
  v13[3] = a3;
  v13[4] = a4;
  v14 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t, __n128))(a9 + 96);
  v15 = swift_retain();
  v14(sub_10020BDC4, v13, a8, a9, v15);
  return swift_release(v13);
}

uint64_t sub_100209A5C()
{
  return sub_10020C7D8(56);
}

uint64_t sub_100209A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1002099BC(a1, a2, a3, a4, v4[4], v4[5], v4[6], v4[2], v4[3]);
}

uint64_t sub_100209A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  void *v18;
  double v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v31 = a2;
  v32 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v30 - v15;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter(v17);
  static DispatchTime.now()(v18);
  v19 = 0.0;
  if (a1 == 1)
    v19 = 1.0;
  + infix(_:_:)(v14, v19);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v21 = swift_allocObject(&unk_1004B5C18, 32, 7);
  v22 = v32;
  *(_QWORD *)(v21 + 16) = v31;
  *(_QWORD *)(v21 + 24) = v22;
  aBlock[4] = sub_1001CA264;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B5C30;
  v23 = _Block_copy(aBlock);
  v24 = v37;
  swift_retain();
  v25 = swift_release(v24);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10003F544((uint64_t *)&unk_10055B200);
  v28 = sub_100026534();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v4, v26);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v9, v6, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v10);
}

void sub_100209D28(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6;
  void (*v7)(id, id, uint64_t (*)(char), uint64_t);
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v7 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  v9 = swift_allocObject(&unk_1004B5BC8, 24, 7);
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain();
  v11 = a2;
  v10 = a3;
  v7(v11, v10, sub_10020BD8C, v9);
  swift_release(v6);
  swift_release(v9);

}

uint64_t sub_100209DD8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
  {
    v10 = swift_conformsToProtocol2(*v1, &protocol descriptor for EpisodeContextActionItem);
    if (v10)
      v12 = v10;
    else
      v12 = 0;
    if (!v10)
      v1 = 0;
    if (v1)
    {
      ObjectType = swift_getObjectType(v1, v11);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
      if (v14)
      {
        v15 = v14;
        sub_1003689C0();
        v17 = v16;
        v6 = v18;
        v7 = v19;
        swift_release(v15);
        swift_bridgeObjectRelease(v17);
        v20 = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
        if (v20)
          v22 = v20;
        else
          v22 = 0;
        if (v20)
          v23 = v2;
        else
          v23 = 0;
        if (v23)
        {
          v24 = swift_getObjectType(v23, v21);
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v24, v22);
          if (v25)
          {
            v26 = v25;
            sub_1003689C0();
            v8 = v27;
            v9 = v28;
            v30 = v29;
            swift_release(v26);
            swift_bridgeObjectRelease(v30);
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease(v7);
      }
    }
    result = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v33 = result;
    v34 = swift_getObjectType(v2, v32);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v34, v33);
    if (v35)
    {
      v36 = v35;
      v8 = sub_1001E2F48();
      v9 = v37;
      swift_release(v36);
      swift_bridgeObjectRetain(v9);
      v6 = v8;
      v7 = v9;
      goto LABEL_31;
    }
    swift_beginAccess(v2 + 2, v51, 0, 0);
    if (v2[2]
      && (v50 = v2[2],
          v38 = type metadata accessor for ContextActionsConfiguration(0),
          swift_retain(),
          v39 = sub_10003F544(&qword_10055A368),
          (swift_dynamicCast(&v52, &v50, v38, v39, 6) & 1) != 0))
    {
      if (*((_QWORD *)&v53 + 1))
      {
        sub_10002099C(&v52, (uint64_t)v55);
        v40 = v56;
        v41 = v57;
        sub_10003A834(v55, v56);
        v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
        if (v42)
        {
          v43 = v42;
          sub_1003689C0();
          v8 = v44;
          v9 = v45;
          v6 = v46;
          v7 = v47;
          swift_release(v43);
          sub_10003D380(v55);
          goto LABEL_31;
        }
        sub_10003D380(v55);
LABEL_30:
        v8 = 0;
        v6 = 0;
        v9 = 0xE000000000000000;
        v7 = 0xE000000000000000;
        goto LABEL_31;
      }
    }
    else
    {
      v54 = 0;
      v52 = 0u;
      v53 = 0u;
    }
    sub_100007A28((uint64_t)&v52, &qword_10055A360);
    goto LABEL_30;
  }
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
  swift_bridgeObjectRetain(v7);
  v8 = 0;
  v9 = 0xE000000000000000;
LABEL_31:
  v48 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v48 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v48)
  {
    v49 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v49 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v49)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020A0D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50[24];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
  {
    result = swift_conformsToProtocol2(*v1, &protocol descriptor for EpisodeContextActionItem);
    if (result)
    {
      v14 = result;
      ObjectType = swift_getObjectType(v1, v13);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
      if (!v16)
        goto LABEL_17;
      v17 = v16;
      sub_1003689C0();
      v19 = v18;
      v6 = v20;
      v7 = v21;
      swift_release(v17);
      swift_bridgeObjectRelease(v19);
      result = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
      if (result)
      {
        v23 = result;
        v24 = swift_getObjectType(v2, v22);
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23);
        if (v25)
        {
          v26 = v25;
          sub_1003689C0();
          v8 = v27;
          v9 = v28;
          v30 = v29;
          swift_release(v26);
          swift_bridgeObjectRelease(v30);
          goto LABEL_3;
        }
        swift_bridgeObjectRelease(v7);
LABEL_17:
        v31 = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
        if (v31)
          v33 = v31;
        else
          v33 = 0;
        if (v31)
          v34 = v2;
        else
          v34 = 0;
        if (v34)
        {
          v35 = swift_getObjectType(v34, v32);
          v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v35, v33);
          if (v36)
          {
            v37 = v36;
            v8 = sub_1001E2F48();
            v9 = v38;
            swift_release(v37);
            swift_bridgeObjectRetain(v9);
            v6 = v8;
            v7 = v9;
            goto LABEL_3;
          }
        }
        swift_beginAccess(v2 + 5, v50, 0, 0);
        if (v2[5]
          && (v49 = v2[5],
              v39 = type metadata accessor for ContextActionsConfiguration(0),
              swift_retain(),
              v40 = sub_10003F544(&qword_10055A368),
              (swift_dynamicCast(&v51, &v49, v39, v40, 6) & 1) != 0))
        {
          if (*((_QWORD *)&v52 + 1))
          {
            sub_10002099C(&v51, (uint64_t)v54);
            v41 = v55;
            v42 = v56;
            sub_10003A834(v54, v55);
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
            if (v43)
            {
              v44 = v43;
              sub_1003689C0();
              v8 = v45;
              v9 = v46;
              v6 = v47;
              v7 = v48;
              swift_release(v44);
              sub_10003D380(v54);
              goto LABEL_3;
            }
            sub_10003D380(v54);
LABEL_33:
            v8 = 0;
            v6 = 0;
            v9 = 0xE000000000000000;
            v7 = 0xE000000000000000;
            goto LABEL_3;
          }
        }
        else
        {
          v53 = 0;
          v51 = 0u;
          v52 = 0u;
        }
        sub_100007A28((uint64_t)&v51, &qword_10055A360);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
  swift_bridgeObjectRetain(v7);
  v8 = 0;
  v9 = 0xE000000000000000;
LABEL_3:
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    v11 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v11 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020A3D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50[24];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
  {
    result = swift_conformsToProtocol2(*v1, &protocol descriptor for EpisodeContextActionItem);
    if (result)
    {
      v14 = result;
      ObjectType = swift_getObjectType(v1, v13);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
      if (!v16)
        goto LABEL_17;
      v17 = v16;
      sub_1003689C0();
      v19 = v18;
      v6 = v20;
      v7 = v21;
      swift_release(v17);
      swift_bridgeObjectRelease(v19);
      result = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
      if (result)
      {
        v23 = result;
        v24 = swift_getObjectType(v2, v22);
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23);
        if (v25)
        {
          v26 = v25;
          sub_1003689C0();
          v8 = v27;
          v9 = v28;
          v30 = v29;
          swift_release(v26);
          swift_bridgeObjectRelease(v30);
          goto LABEL_3;
        }
        swift_bridgeObjectRelease(v7);
LABEL_17:
        v31 = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
        if (v31)
          v33 = v31;
        else
          v33 = 0;
        if (v31)
          v34 = v2;
        else
          v34 = 0;
        if (v34)
        {
          v35 = swift_getObjectType(v34, v32);
          v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v35, v33);
          if (v36)
          {
            v37 = v36;
            v8 = sub_1001E2F48();
            v9 = v38;
            swift_release(v37);
            swift_bridgeObjectRetain(v9);
            v6 = v8;
            v7 = v9;
            goto LABEL_3;
          }
        }
        swift_beginAccess(v2 + 8, v50, 0, 0);
        if (v2[8]
          && (v49 = v2[8],
              v39 = type metadata accessor for ContextActionsConfiguration(0),
              swift_retain(),
              v40 = sub_10003F544(&qword_10055A368),
              (swift_dynamicCast(&v51, &v49, v39, v40, 6) & 1) != 0))
        {
          if (*((_QWORD *)&v52 + 1))
          {
            sub_10002099C(&v51, (uint64_t)v54);
            v41 = v55;
            v42 = v56;
            sub_10003A834(v54, v55);
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
            if (v43)
            {
              v44 = v43;
              sub_1003689C0();
              v8 = v45;
              v9 = v46;
              v6 = v47;
              v7 = v48;
              swift_release(v44);
              sub_10003D380(v54);
              goto LABEL_3;
            }
            sub_10003D380(v54);
LABEL_33:
            v8 = 0;
            v6 = 0;
            v9 = 0xE000000000000000;
            v7 = 0xE000000000000000;
            goto LABEL_3;
          }
        }
        else
        {
          v53 = 0;
          v51 = 0u;
          v52 = 0u;
        }
        sub_100007A28((uint64_t)&v51, &qword_10055A360);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
  swift_bridgeObjectRetain(v7);
  v8 = 0;
  v9 = 0xE000000000000000;
LABEL_3:
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    v11 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v11 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020A6D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char v55[24];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
    v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
    swift_bridgeObjectRetain(v7);
    v8 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_37;
  }
  v10 = swift_conformsToProtocol2(*v1, &protocol descriptor for EpisodeContextActionItem);
  if (v10)
    v12 = v10;
  else
    v12 = 0;
  if (!v10)
    v1 = 0;
  if (v1)
  {
    ObjectType = swift_getObjectType(v1, v11);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
    if (v14)
    {
      v15 = v14;
      sub_1003689C0();
      v17 = v16;
      v6 = v18;
      v7 = v19;
      swift_release(v15);
      swift_bridgeObjectRelease(v17);
      v20 = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
      if (v20)
        v22 = v20;
      else
        v22 = 0;
      if (v20)
        v23 = v2;
      else
        v23 = 0;
      if (v23)
      {
        v24 = swift_getObjectType(v23, v21);
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v24, v22);
        if (v25)
        {
          v26 = v25;
          sub_1003689C0();
          v8 = v27;
          v9 = v28;
          v30 = v29;
          swift_release(v26);
          swift_bridgeObjectRelease(v30);
          goto LABEL_37;
        }
      }
      swift_bridgeObjectRelease(v7);
    }
  }
  v31 = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
  if (v31)
    v33 = v31;
  else
    v33 = 0;
  if (v31)
    v34 = v2;
  else
    v34 = 0;
  if (v34)
  {
    v35 = swift_getObjectType(v34, v32);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v35, v33);
    if (v36)
    {
      v37 = v36;
      v8 = sub_1001E2F48();
      v9 = v38;
      swift_release(v37);
      swift_bridgeObjectRetain(v9);
      v6 = v8;
      v7 = v9;
      goto LABEL_37;
    }
  }
  v39 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration);
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration, v55, 0, 0);
  v40 = *v39;
  if (!v40
    || (v54 = v40,
        v41 = type metadata accessor for ContextActionsConfiguration(0),
        swift_retain(),
        v42 = sub_10003F544(&qword_10055A368),
        (swift_dynamicCast(&v56, &v54, v41, v42, 6) & 1) == 0))
  {
    v58 = 0;
    v56 = 0u;
    v57 = 0u;
    goto LABEL_35;
  }
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_35:
    sub_100007A28((uint64_t)&v56, &qword_10055A360);
    goto LABEL_36;
  }
  sub_10002099C(&v56, (uint64_t)v59);
  v43 = v60;
  v44 = v61;
  sub_10003A834(v59, v60);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
  if (v45)
  {
    v46 = v45;
    sub_1003689C0();
    v8 = v47;
    v9 = v48;
    v6 = v49;
    v7 = v50;
    swift_release(v46);
    sub_10003D380(v59);
    goto LABEL_37;
  }
  sub_10003D380(v59);
LABEL_36:
  v8 = 0;
  v6 = 0;
  v9 = 0xE000000000000000;
  v7 = 0xE000000000000000;
LABEL_37:
  v51 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v51 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v51)
  {
    v52 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v52 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v52)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020A9E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50[24];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
  {
    result = swift_conformsToProtocol2(*v1, &protocol descriptor for EpisodeContextActionItem);
    if (result)
    {
      v14 = result;
      ObjectType = swift_getObjectType(v1, v13);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
      if (!v16)
        goto LABEL_17;
      v17 = v16;
      sub_1003689C0();
      v19 = v18;
      v6 = v20;
      v7 = v21;
      swift_release(v17);
      swift_bridgeObjectRelease(v19);
      result = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
      if (result)
      {
        v23 = result;
        v24 = swift_getObjectType(v2, v22);
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23);
        if (v25)
        {
          v26 = v25;
          sub_1003689C0();
          v8 = v27;
          v9 = v28;
          v30 = v29;
          swift_release(v26);
          swift_bridgeObjectRelease(v30);
          goto LABEL_3;
        }
        swift_bridgeObjectRelease(v7);
LABEL_17:
        v31 = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
        if (v31)
          v33 = v31;
        else
          v33 = 0;
        if (v31)
          v34 = v2;
        else
          v34 = 0;
        if (v34)
        {
          v35 = swift_getObjectType(v34, v32);
          v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v35, v33);
          if (v36)
          {
            v37 = v36;
            v8 = sub_1001E2F48();
            v9 = v38;
            swift_release(v37);
            swift_bridgeObjectRetain(v9);
            v6 = v8;
            v7 = v9;
            goto LABEL_3;
          }
        }
        swift_beginAccess(v2 + 3, v50, 0, 0);
        if (v2[3]
          && (v49 = v2[3],
              v39 = type metadata accessor for ContextActionsConfiguration(0),
              swift_retain(),
              v40 = sub_10003F544(&qword_10055A368),
              (swift_dynamicCast(&v51, &v49, v39, v40, 6) & 1) != 0))
        {
          if (*((_QWORD *)&v52 + 1))
          {
            sub_10002099C(&v51, (uint64_t)v54);
            v41 = v55;
            v42 = v56;
            sub_10003A834(v54, v55);
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
            if (v43)
            {
              v44 = v43;
              sub_1003689C0();
              v8 = v45;
              v9 = v46;
              v6 = v47;
              v7 = v48;
              swift_release(v44);
              sub_10003D380(v54);
              goto LABEL_3;
            }
            sub_10003D380(v54);
LABEL_33:
            v8 = 0;
            v6 = 0;
            v9 = 0xE000000000000000;
            v7 = 0xE000000000000000;
            goto LABEL_3;
          }
        }
        else
        {
          v53 = 0;
          v51 = 0u;
          v52 = 0u;
        }
        sub_100007A28((uint64_t)&v51, &qword_10055A360);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
  swift_bridgeObjectRetain(v7);
  v8 = 0;
  v9 = 0xE000000000000000;
LABEL_3:
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    v11 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v11 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020ACE8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
  {
    v10 = swift_conformsToProtocol2(*v1, &protocol descriptor for EpisodeContextActionItem);
    if (v10)
      v12 = v10;
    else
      v12 = 0;
    if (!v10)
      v1 = 0;
    if (v1)
    {
      ObjectType = swift_getObjectType(v1, v11);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
      if (v14)
      {
        v15 = v14;
        sub_1003689C0();
        v17 = v16;
        v6 = v18;
        v7 = v19;
        swift_release(v15);
        swift_bridgeObjectRelease(v17);
        v20 = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
        if (v20)
          v22 = v20;
        else
          v22 = 0;
        if (v20)
          v23 = v2;
        else
          v23 = 0;
        if (v23)
        {
          v24 = swift_getObjectType(v23, v21);
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v24, v22);
          if (v25)
          {
            v26 = v25;
            sub_1003689C0();
            v8 = v27;
            v9 = v28;
            v30 = v29;
            swift_release(v26);
            swift_bridgeObjectRelease(v30);
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease(v7);
      }
    }
    result = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v33 = result;
    v34 = swift_getObjectType(v2, v32);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v34, v33);
    if (v35)
    {
      v36 = v35;
      v8 = sub_1001E2F48();
      v9 = v37;
      swift_release(v36);
      swift_bridgeObjectRetain(v9);
      v6 = v8;
      v7 = v9;
      goto LABEL_31;
    }
    swift_beginAccess(v2 + 3, v51, 0, 0);
    if (v2[3]
      && (v50 = v2[3],
          v38 = type metadata accessor for ContextActionsConfiguration(0),
          swift_retain(),
          v39 = sub_10003F544(&qword_10055A368),
          (swift_dynamicCast(&v52, &v50, v38, v39, 6) & 1) != 0))
    {
      if (*((_QWORD *)&v53 + 1))
      {
        sub_10002099C(&v52, (uint64_t)v55);
        v40 = v56;
        v41 = v57;
        sub_10003A834(v55, v56);
        v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
        if (v42)
        {
          v43 = v42;
          sub_1003689C0();
          v8 = v44;
          v9 = v45;
          v6 = v46;
          v7 = v47;
          swift_release(v43);
          sub_10003D380(v55);
          goto LABEL_31;
        }
        sub_10003D380(v55);
LABEL_30:
        v8 = 0;
        v6 = 0;
        v9 = 0xE000000000000000;
        v7 = 0xE000000000000000;
        goto LABEL_31;
      }
    }
    else
    {
      v54 = 0;
      v52 = 0u;
      v53 = 0u;
    }
    sub_100007A28((uint64_t)&v52, &qword_10055A360);
    goto LABEL_30;
  }
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
  swift_bridgeObjectRetain(v7);
  v8 = 0;
  v9 = 0xE000000000000000;
LABEL_31:
  v48 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v48 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v48)
  {
    v49 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v49 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v49)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020AFE8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = type metadata accessor for ChannelContextActionConfiguration(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
  {
    result = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
    if (result)
    {
      v12 = result;
      ObjectType = swift_getObjectType(v2, v11);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
      if (!v14)
        goto LABEL_9;
      v15 = v14;
      sub_1003689C0();
      v17 = v16;
      v19 = v18;
      swift_release(v15);
      swift_bridgeObjectRelease(v17);
      result = swift_conformsToProtocol2(*v2, &protocol descriptor for EpisodeContextActionItem);
      if (result)
      {
        v21 = result;
        v22 = swift_getObjectType(v2, v20);
        v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v22, v21);
        if (v23)
        {
          v24 = v23;
          sub_1003689C0();
          v8 = v25;
          v9 = v26;
          v28 = v27;
          swift_bridgeObjectRelease(v19);
          swift_release(v24);
          swift_bridgeObjectRelease(v28);
LABEL_18:
          swift_bridgeObjectRetain(v9);
          v6 = v8;
          v7 = v9;
          goto LABEL_27;
        }
        swift_bridgeObjectRelease(v19);
LABEL_9:
        v29 = swift_conformsToProtocol2(*v2, &protocol descriptor for PodcastContextActionItem);
        if (v29)
          v31 = v29;
        else
          v31 = 0;
        if (v29)
          v32 = v2;
        else
          v32 = 0;
        if (v32)
        {
          v33 = swift_getObjectType(v32, v30);
          v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v33, v31);
          if (v34)
          {
            v35 = v34;
            v8 = sub_1001E2F48();
            v9 = v36;
            swift_release(v35);
            goto LABEL_18;
          }
        }
        swift_beginAccess(v2 + 3, v51, 0, 0);
        v37 = v2[3];
        if (v37
          && (v50 = v37,
              v38 = type metadata accessor for ContextActionsConfiguration(0),
              swift_retain(),
              v39 = sub_10003F544(&qword_10055A368),
              (swift_dynamicCast(&v52, &v50, v38, v39, 6) & 1) != 0))
        {
          if (*((_QWORD *)&v53 + 1))
          {
            sub_10002099C(&v52, (uint64_t)v55);
            v40 = v56;
            v41 = v57;
            sub_10003A834(v55, v56);
            v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
            if (v42)
            {
              v43 = v42;
              sub_1003689C0();
              v8 = v44;
              v9 = v45;
              v6 = v46;
              v7 = v47;
              swift_release(v43);
              sub_10003D380(v55);
              goto LABEL_27;
            }
            sub_10003D380(v55);
LABEL_26:
            v8 = 0;
            v6 = 0;
            v9 = 0xE000000000000000;
            v7 = 0xE000000000000000;
            goto LABEL_27;
          }
        }
        else
        {
          v54 = 0;
          v52 = 0u;
          v53 = 0u;
        }
        sub_100007A28((uint64_t)&v52, &qword_10055A360);
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
  swift_bridgeObjectRetain(v7);
  v8 = 0;
  v9 = 0xE000000000000000;
LABEL_27:
  v48 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v48 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v48)
  {
    v49 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v49 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v49)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v6;
}

uint64_t sub_10020B2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;

  v4 = v3;
  v8 = type metadata accessor for ChannelContextActionConfiguration(0);
  v9 = swift_dynamicCastClass(a1, v8);
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId);
    v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8Podcasts33ChannelContextActionConfiguration_channelAdamId + 8);
    swift_bridgeObjectRetain(v12);
    v13 = 0;
    v14 = 0xE000000000000000;
    goto LABEL_41;
  }
  ObjectType = swift_getObjectType(v3, v10);
  v16 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for EpisodeContextActionItem);
  if (v16)
    v18 = v16;
  else
    v18 = 0;
  if (!v16)
    v3 = 0;
  if (!v3
    || (v19 = swift_getObjectType(v3, v17),
        (v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18)) == 0))
  {
LABEL_23:
    v40 = swift_getObjectType(v4, v17);
    v41 = swift_conformsToProtocol2(v40, &protocol descriptor for PodcastContextActionItem);
    if (v41)
      v43 = v41;
    else
      v43 = 0;
    if (v41)
      v44 = v4;
    else
      v44 = 0;
    if (v44)
    {
      v45 = swift_getObjectType(v44, v42);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v45, v43);
      if (v46)
      {
        v47 = v46;
        v13 = sub_1001E2F48();
        v14 = v48;
        swift_release(v47);
        goto LABEL_32;
      }
    }
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 16))(a2);
    if (v49
      && (v63 = v49,
          v50 = type metadata accessor for ContextActionsConfiguration(0),
          v51 = sub_10003F544(&qword_10055A368),
          (swift_dynamicCast(&v64, &v63, v50, v51, 6) & 1) != 0))
    {
      if (*((_QWORD *)&v65 + 1))
      {
        sub_10002099C(&v64, (uint64_t)v67);
        v52 = v68;
        v53 = v69;
        sub_10003A834(v67, v68);
        v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
        if (v54)
        {
          v55 = v54;
          sub_1003689C0();
          v13 = v56;
          v14 = v57;
          v11 = v58;
          v12 = v59;
          swift_release(v55);
          sub_10003D380(v67);
          goto LABEL_41;
        }
        sub_10003D380(v67);
        goto LABEL_40;
      }
    }
    else
    {
      v66 = 0;
      v64 = 0u;
      v65 = 0u;
    }
    sub_100007A28((uint64_t)&v64, &qword_10055A360);
LABEL_40:
    v13 = 0;
    v11 = 0;
    v14 = 0xE000000000000000;
    v12 = 0xE000000000000000;
    goto LABEL_41;
  }
  v21 = v20;
  sub_1003689C0();
  v23 = v22;
  v11 = v24;
  v12 = v25;
  swift_release(v21);
  swift_bridgeObjectRelease(v23);
  v27 = swift_getObjectType(v4, v26);
  v28 = swift_conformsToProtocol2(v27, &protocol descriptor for EpisodeContextActionItem);
  if (v28)
    v30 = v28;
  else
    v30 = 0;
  if (v28)
    v31 = v4;
  else
    v31 = 0;
  if (!v31
    || (v32 = swift_getObjectType(v31, v29),
        (v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v32, v30)) == 0))
  {
    swift_bridgeObjectRelease(v12);
    goto LABEL_23;
  }
  v34 = v33;
  sub_1003689C0();
  v13 = v35;
  v14 = v36;
  v38 = v37;
  swift_release(v34);
  swift_bridgeObjectRelease(v38);
  if (object_getClass(v4) == (Class)_TtC8Podcasts34EpisodePresentPodcastContextAction && v4
    || (v39 = type metadata accessor for SubscribeEpisodeContextAction(), swift_dynamicCastClass(v4, v39)))
  {
    swift_bridgeObjectRelease(v12);
LABEL_32:
    swift_bridgeObjectRetain(v14);
    v11 = v13;
    v12 = v14;
  }
LABEL_41:
  v60 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v60 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v60)
  {
    v61 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v61 = v11 & 0xFFFFFFFFFFFFLL;
    if (!v61)
    {
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v14);
      return 0;
    }
  }
  return v11;
}

uint64_t sub_10020B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v7 = swift_retain(a1);
  v6(v7, a2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
}

uint64_t sub_10020B68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(__n128);
  __n128 v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;

  v6 = sub_10003F544(&qword_10055A370);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(__n128))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 24);
  v10 = swift_retain();
  v9(v10);
  v11 = type metadata accessor for StationShowContextActionConfiguration(0);
  result = swift_dynamicCastClass(a1, v11);
  if (result)
  {
    sub_10014FDF8(result + OBJC_IVAR____TtC8Podcasts37StationShowContextActionConfiguration_dataSource, (uint64_t)v8, type metadata accessor for StationShowContextActionData);
    v13 = type metadata accessor for StationShowContextActionData(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
    v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(a3 + 24);
    v15 = swift_retain();
    v14(v8, a2, a3, v15);
    return swift_release(a1);
  }
  return result;
}

uint64_t sub_10020B7A4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD v53[8];
  unsigned __int8 v54;

  v52 = a2;
  v3 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for EpisodeListSettings(0);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InteractionContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InteractionContext.Page(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v46 - v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(v17);
  InteractionContext.page.getter(v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10014FDF8((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  if (swift_getEnumCaseMultiPayload(v16, v13) == 4)
  {
    v48 = v19;
    v49 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = *v16 & 1;
    v25 = 4;
    v26 = 0xE000000000000000;
    v27 = 0xE000000000000000;
    v28 = 0xE000000000000000;
    v50 = 0xE000000000000000;
  }
  else
  {
    InteractionContext.Page.episodeListSettings.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v51) == 1)
    {
      sub_10003F970((uint64_t)v19, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
      sub_100007A28((uint64_t)v5, &qword_10055B790);
      v29 = (uint64_t)v16;
LABEL_36:
      sub_10003F970(v29, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
      v24 = 0;
      return v24 & 1;
    }
    v48 = v19;
    v30 = v51;
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v5, v51);
    v32 = EpisodeListSettings.listType.getter(v53, v31);
    v22 = v53[2];
    v46 = v53[0];
    v47 = v53[1];
    v27 = v53[3];
    v33 = v53[4];
    v34 = v53[5];
    v49 = v53[6];
    v50 = v53[7];
    v25 = v54;
    v24 = EpisodeListSettings.hidePlayedEpisodes.getter(v32);
    v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v28 = v34;
    v36 = v8;
    v23 = v33;
    v21 = v46;
    v35(v36, v30);
    v37 = (uint64_t)v16;
    v26 = v47;
    sub_10003F970(v37, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  }
  switch((char)v52)
  {
    case 3:
      if (v25 == 1)
      {
        sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, 1);
        goto LABEL_8;
      }
      if (v25 == 7)
      {
        sub_100168F7C(v22, v27);
        v40 = v22;
        v41 = v27;
        v42 = 2;
        goto LABEL_28;
      }
      if (v25 != 9)
        goto LABEL_35;
      v38 = v22 | v26 | v21 | v27 | v23 | v28 | v49;
      v39 = v50;
      goto LABEL_18;
    case 11:
      if (v25 == 6)
      {
        sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, 6);
        goto LABEL_8;
      }
      if (v25 != 7)
      {
        if (v25 != 9 || v21 != 4)
          goto LABEL_35;
        v38 = v22 | v26 | v27 | v23;
        v39 = v28 | v49 | v50;
LABEL_18:
        if (v38 | v39)
        {
LABEL_35:
          sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, v25);
          v29 = (uint64_t)v48;
          goto LABEL_36;
        }
LABEL_8:
        sub_10003F970((uint64_t)v48, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
        v24 = 1;
        return v24 & 1;
      }
      sub_100168F7C(v22, v27);
      v40 = v22;
      v41 = v27;
      v42 = 3;
LABEL_28:
      v24 = static EpisodeUserFilter.== infix(_:_:)(v40, v41, v42, 2);
      sub_1001691E8(v22, v27);
      sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, 7);
LABEL_29:
      sub_10003F970((uint64_t)v48, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
      return v24 & 1;
    case 12:
      switch(v25)
      {
        case 1:
        case 2:
        case 4:
        case 6:
          sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, v25);
          goto LABEL_29;
        case 3:
          sub_10003F970((uint64_t)v48, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
          sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, 3);
          v24 = v27 & 1;
          break;
        case 5:
          goto LABEL_8;
        case 7:
          sub_100168F7C(v22, v27);
          v43 = static EpisodeUserFilter.== infix(_:_:)(v22, v27, 1, 2);
          sub_1001691E8(v22, v27);
          sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, 7);
          sub_10003F970((uint64_t)v48, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
          v24 |= v43;
          break;
        case 9:
          v44 = v23 | v28 | v49;
          if (v22 | v26 | v21 | v27 | v44 | v50 && ((unint64_t)(v21 - 3) > 1 || v22 | v26 | v27 | v44 | v50))
            goto LABEL_35;
          goto LABEL_29;
        default:
          goto LABEL_35;
      }
      return v24 & 1;
    case 13:
      if (v25 != 7)
        goto LABEL_35;
      sub_100168F7C(v22, v27);
      v40 = v22;
      v41 = v27;
      v42 = 4;
      goto LABEL_28;
    case 14:
    case 15:
      sub_10003F49C(v21, v26, v22, v27, v23, v28, v49, v50, v25);
      goto LABEL_8;
    default:
      goto LABEL_35;
  }
}

uint64_t sub_10020BD68()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020BD8C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_10020BDA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020BDC4()
{
  uint64_t *v0;

  return sub_100209A90(v0[2], v0[3], v0[4]);
}

uint64_t sub_10020BDD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)a1 = xmmword_1003CE660;
  *(_QWORD *)(a1 + 16) = 0xE400000000000000;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10020BDF4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, sub_10020DC54);
}

uint64_t sub_10020BE10(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B6610);
}

_QWORD *sub_10020BE1C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B6570);
}

uint64_t sub_10020BE28(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B6570);
}

id sub_10020BE34(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B6570);
}

uint64_t sub_10020BE40(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B82B0);
}

_QWORD *sub_10020BE4C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B8238);
}

uint64_t sub_10020BE58(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B8238);
}

id sub_10020BE64(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B8238);
}

uint64_t sub_10020BE70(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B83E8);
}

_QWORD *sub_10020BE7C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B8330);
}

uint64_t sub_10020BE88(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B8330);
}

id sub_10020BE94(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B8330);
}

uint64_t sub_10020BEA0(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B85E8);
}

_QWORD *sub_10020BEAC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B8570);
}

uint64_t sub_10020BEB8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B8570);
}

id sub_10020BEC4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B8570);
}

uint64_t sub_10020BED0(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B8968);
}

_QWORD *sub_10020BEDC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B88F0);
}

uint64_t sub_10020BEE8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B88F0);
}

id sub_10020BEF4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B88F0);
}

uint64_t sub_10020BF00(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004B8A88);
}

_QWORD *sub_10020BF0C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B8A10);
}

uint64_t sub_10020BF18(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B8A10);
}

id sub_10020BF24(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B8A10);
}

uint64_t sub_10020BF30@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[12];
  v2 = v1[13];
  v4 = v1[9];
  v5 = v1[10];
  *a1 = 0;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v4;
  a1[4] = v5;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_10020BF68(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, (uint64_t (*)(void))sub_100258FF4);
}

double sub_10020BF84@<D0>(uint64_t a1@<X8>)
{
  return sub_10020C20C((void (*)(_OWORD *__return_ptr))sub_100202700, a1);
}

BOOL sub_10020BF90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  _BYTE v5[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration, v5, 0, 0);
  v2 = *v1;
  result = 0;
  if (v2)
  {
    v3 = type metadata accessor for CategoryContextActionConfiguration(0);
    if (swift_dynamicCastClass(v2, v3))
      return 1;
  }
  return result;
}

uint64_t sub_10020C000(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, sub_100270CF0);
}

uint64_t sub_10020C00C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts31FavoriteCategoriesContextAction_configuration);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain(a1);
  return swift_release(v4);
}

uint64_t sub_10020C080(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B9A50);
}

_QWORD *sub_10020C08C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B99D8);
}

uint64_t sub_10020C098(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B99D8);
}

id sub_10020C0A4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B99D8);
}

uint64_t sub_10020C0B0(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004B9D08);
}

_QWORD *sub_10020C0BC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B9C90);
}

uint64_t sub_10020C0C8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B9C90);
}

id sub_10020C0D4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B9C90);
}

uint64_t sub_10020C0E0(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004BA010);
}

_QWORD *sub_10020C0EC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004B9F98);
}

uint64_t sub_10020C0F8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004B9F98);
}

id sub_10020C104(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004B9F98);
}

uint64_t sub_10020C110(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004BA140);
}

_QWORD *sub_10020C11C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BA0C8);
}

uint64_t sub_10020C128(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BA0C8);
}

id sub_10020C134(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BA0C8);
}

uint64_t sub_10020C140(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004BA238);
}

_QWORD *sub_10020C14C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BA1C0);
}

uint64_t sub_10020C158(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BA1C0);
}

id sub_10020C164(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BA1C0);
}

uint64_t sub_10020C170(uint64_t a1, uint64_t a2)
{
  return sub_10020B638(a1, a2, (uint64_t)&off_1004BACC8);
}

_QWORD *sub_10020C17C(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BACC8);
}

uint64_t sub_10020C188(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BACC8);
}

id sub_10020C194(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BACC8);
}

uint64_t sub_10020C1A0(uint64_t a1, uint64_t a2)
{
  return sub_10020B638(a1, a2, (uint64_t)&off_1004BBB48);
}

_QWORD *sub_10020C1AC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BBB48);
}

uint64_t sub_10020C1B8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BBB48);
}

id sub_10020C1C4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BBB48);
}

uint64_t sub_10020C1D0(uint64_t a1, uint64_t a2)
{
  return sub_10020B68C(a1, a2, (uint64_t)&off_1004BBD90);
}

_QWORD *sub_10020C1DC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BBD18);
}

uint64_t sub_10020C1E8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BBD18);
}

id sub_10020C1F4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BBD18);
}

double sub_10020C200@<D0>(uint64_t a1@<X8>)
{
  return sub_10020C20C((void (*)(_OWORD *__return_ptr))sub_100202548, a1);
}

double sub_10020C20C@<D0>(void (*a1)(_OWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  a1(v6);
  v3 = v7;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t sub_10020C24C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, (uint64_t (*)(void))sub_1002AF214);
}

uint64_t sub_10020C268(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004BD9C8);
}

_QWORD *sub_10020C274(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BD950);
}

uint64_t sub_10020C280(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BD950);
}

id sub_10020C28C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BD950);
}

uint64_t sub_10020C298(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004BE320);
}

_QWORD *sub_10020C2A4(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BE2A8);
}

uint64_t sub_10020C2B0(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BE2A8);
}

id sub_10020C2BC(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BE2A8);
}

uint64_t sub_10020C2C8(uint64_t a1, uint64_t a2)
{
  return sub_10020B638(a1, a2, (uint64_t)&off_1004BF768);
}

_QWORD *sub_10020C2D4(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BF768);
}

uint64_t sub_10020C2E0(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BF768);
}

id sub_10020C2EC(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BF768);
}

uint64_t sub_10020C2F8(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004BFA28);
}

_QWORD *sub_10020C304(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004BF9B0);
}

uint64_t sub_10020C310(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004BF9B0);
}

id sub_10020C31C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004BF9B0);
}

uint64_t sub_10020C328(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004C06C0);
}

_QWORD *sub_10020C334(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C0648);
}

uint64_t sub_10020C340(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C0648);
}

id sub_10020C34C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C0648);
}

uint64_t sub_10020C358(uint64_t a1, uint64_t a2)
{
  return sub_10020B638(a1, a2, (uint64_t)&off_1004C0788);
}

_QWORD *sub_10020C364(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C0788);
}

uint64_t sub_10020C370(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C0788);
}

id sub_10020C37C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C0788);
}

uint64_t sub_10020C388(uint64_t a1, uint64_t a2)
{
  return sub_10020B638(a1, a2, (uint64_t)&off_1004C11F0);
}

_QWORD *sub_10020C394(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C11F0);
}

uint64_t sub_10020C3A0(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C11F0);
}

id sub_10020C3AC(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C11F0);
}

uint64_t sub_10020C3B8(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004C28E0);
}

_QWORD *sub_10020C3C4(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C2868);
}

uint64_t sub_10020C3D0(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C2868);
}

id sub_10020C3DC(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C2868);
}

uint64_t sub_10020C3E8(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004C29F8);
}

_QWORD *sub_10020C3F4(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C2980);
}

uint64_t sub_10020C400(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C2980);
}

id sub_10020C40C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C2980);
}

uint64_t sub_10020C418(uint64_t a1, uint64_t a2)
{
  return sub_10020B638(a1, a2, (uint64_t)&off_1004C2E98);
}

_QWORD *sub_10020C424(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C2E98);
}

uint64_t sub_10020C430(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C2E98);
}

id sub_10020C43C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C2E98);
}

uint64_t sub_10020C448(uint64_t a1, uint64_t a2)
{
  return sub_100206728(a1, a2, (uint64_t)&off_1004C3040);
}

_QWORD *sub_10020C454(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C2F60);
}

uint64_t sub_10020C460(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C2F60);
}

id sub_10020C46C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C2F60);
}

uint64_t sub_10020C478(uint64_t a1, uint64_t a2)
{
  return sub_10020B68C(a1, a2, (uint64_t)&off_1004C4310);
}

_QWORD *sub_10020C484(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C4298);
}

uint64_t sub_10020C490(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C4298);
}

id sub_10020C49C(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C4298);
}

double sub_10020C4A8@<D0>(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  double result;
  Swift::String v7;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._object = (void *)0xE000000000000000;
  v3._countAndFlagsBits = 0x73676E6974746553;
  v3._object = (void *)0xE800000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v7);

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1003CE670;
  *(_QWORD *)(a1 + 16) = 0xE400000000000000;
  *(Swift::String *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10020C558(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003666C0);
}

double sub_10020C574@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  sub_1002027D4(a1, a2, v7);
  v4 = v8;
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v4;
  return result;
}

uint64_t sub_10020C5B0(uint64_t a1, uint64_t a2)
{
  return sub_100202DC0(a1, a2, (uint64_t)&off_1004C6A50);
}

_QWORD *sub_10020C5BC(uint64_t a1, uint64_t a2)
{
  return sub_100203928(a1, a2, (uint64_t)&off_1004C69D8);
}

uint64_t sub_10020C5C8(uint64_t a1, uint64_t a2)
{
  return sub_100204B0C(a1, a2, (uint64_t)&off_1004C69D8);
}

id sub_10020C5D4(uint64_t a1, uint64_t a2)
{
  return sub_100205F94(a1, a2, (uint64_t)&off_1004C69D8);
}

double sub_10020C5E0@<D0>(uint64_t a1@<X8>)
{
  return sub_10020C5FC(0xD000000000000021, (void *)0x80000001004355F0, a1);
}

double sub_10020C5FC@<D0>(uint64_t a1@<X2>, void *a2@<X3>, uint64_t a3@<X8>)
{
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  double result;
  Swift::String v11;

  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11._object = a2;
  v7._countAndFlagsBits = 0x6853206F74206F47;
  v7._object = (void *)0xEA0000000000776FLL;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = a1;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v11);

  result = 0.0;
  *(_OWORD *)a3 = xmmword_1003CE680;
  *(_QWORD *)(a3 + 16) = 0xEF6572617571732ELL;
  *(Swift::String *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_10020C6C0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C6CC(a1, a2, a3, a4, (uint64_t (*)(void))sub_10037DA48);
}

uint64_t sub_10020C6CC(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result;

  result = a5();
  if (a1)
    return a1(result);
  return result;
}

uint64_t sub_10020C714()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020C738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_100552300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020C780()
{
  return sub_10020C7D8(48);
}

uint64_t sub_10020C788()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = v0[3];
  sub_1002090DC(v0[5], v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_10020C7D0()
{
  return sub_10020C7D8(48);
}

uint64_t sub_10020C7D8(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 32));
  swift_release(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10020C810()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020C818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1002098F0(a1, a2, a3, a4, v4[2], v4[3], v4[4], (void (*)(uint64_t))sub_100206B08, (void (*)(__n128))sub_1001C8330);
}

uint64_t sub_10020C850()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C858(uint64_t a1)
{
  return sub_10020CA64(a1, sub_100206B08, (uint64_t (*)(uint64_t))sub_1001C8330);
}

uint64_t sub_10020C86C()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C874()
{
  return sub_10020CAB4(sub_100206B08, (uint64_t (*)(uint64_t))sub_1001C8330);
}

uint64_t sub_10020C888()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020C890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1002098F0(a1, a2, a3, a4, v4[2], v4[3], v4[4], (void (*)(uint64_t))sub_100207238, (void (*)(__n128))sub_10020DC54);
}

uint64_t sub_10020C8C8()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C8D0(uint64_t a1)
{
  return sub_10020CA64(a1, sub_100207238, (uint64_t (*)(uint64_t))sub_10020DC54);
}

uint64_t sub_10020C8E4()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C8EC()
{
  return sub_10020CAB4(sub_100207238, (uint64_t (*)(uint64_t))sub_10020DC54);
}

uint64_t sub_10020C900()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020C908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_100209954(a1, a2, a3, a4, v4[2], v4[3], v4[4], sub_10020A3D8, (uint64_t)&OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel, (void (*)(__n128))sub_100258FF4);
}

uint64_t sub_10020C948()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C950(uint64_t a1)
{
  return sub_10020CBE8(a1, sub_10020A3D8, (uint64_t)&OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel, (uint64_t (*)(uint64_t))sub_100258FF4);
}

uint64_t sub_10020C96C()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C974()
{
  return sub_10020CC78(sub_10020A3D8, (uint64_t)&OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel, (uint64_t (*)(uint64_t))sub_100258FF4);
}

uint64_t sub_10020C990()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020C998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1002098F0(a1, a2, a3, a4, v4[2], v4[3], v4[4], (void (*)(uint64_t))sub_1002079D0, (void (*)(__n128))sub_100270CF0);
}

uint64_t sub_10020C9D0()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C9D8(uint64_t a1)
{
  return sub_10020CA64(a1, sub_1002079D0, (uint64_t (*)(uint64_t))sub_100270CF0);
}

uint64_t sub_10020C9EC()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020C9F4()
{
  return sub_10020CAB4(sub_1002079D0, (uint64_t (*)(uint64_t))sub_100270CF0);
}

uint64_t sub_10020CA08()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020CA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1002098F0(a1, a2, a3, a4, v4[2], v4[3], v4[4], sub_10020817C, (void (*)(__n128))sub_1002AF214);
}

uint64_t sub_10020CA48()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020CA50(uint64_t a1)
{
  return sub_10020CA64(a1, (uint64_t (*)(_QWORD))sub_10020817C, (uint64_t (*)(uint64_t))sub_1002AF214);
}

uint64_t sub_10020CA64(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2(*(_QWORD *)(v3 + 24));
  return a3(v5);
}

uint64_t sub_10020CA98()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020CAA0()
{
  return sub_10020CAB4((uint64_t (*)(_QWORD))sub_10020817C, (uint64_t (*)(uint64_t))sub_1002AF214);
}

uint64_t sub_10020CAB4(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(*(_QWORD *)(v2 + 24));
  return a2(v4);
}

uint64_t sub_10020CAEC()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020CAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_100209954(a1, a2, a3, a4, v4[2], v4[3], v4[4], sub_10020ACE8, (uint64_t)&OBJC_IVAR____TtC8Podcasts28SettingsPodcastContextAction_metricsLabel, (void (*)(__n128))sub_1003666C0);
}

uint64_t sub_10020CB34()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020CB3C(uint64_t a1)
{
  return sub_10020CBE8(a1, sub_10020ACE8, (uint64_t)&OBJC_IVAR____TtC8Podcasts28SettingsPodcastContextAction_metricsLabel, (uint64_t (*)(uint64_t))sub_1003666C0);
}

uint64_t sub_10020CB58()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020CB60()
{
  return sub_10020CC78(sub_10020ACE8, (uint64_t)&OBJC_IVAR____TtC8Podcasts28SettingsPodcastContextAction_metricsLabel, (uint64_t (*)(uint64_t))sub_1003666C0);
}

uint64_t sub_10020CB7C()
{
  return sub_10020CC24(40);
}

uint64_t sub_10020CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_100209954(a1, a2, a3, a4, v4[2], v4[3], v4[4], sub_10020AFE8, (uint64_t)&OBJC_IVAR____TtC8Podcasts34EpisodePresentPodcastContextAction_metricsLabel, (void (*)(__n128))sub_10037DA48);
}

uint64_t sub_10020CBC4()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020CBCC(uint64_t a1)
{
  return sub_10020CBE8(a1, sub_10020AFE8, (uint64_t)&OBJC_IVAR____TtC8Podcasts34EpisodePresentPodcastContextAction_metricsLabel, (uint64_t (*)(uint64_t))sub_10037DA48);
}

uint64_t sub_10020CBE8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v6;

  v6 = sub_100208990(*(_QWORD *)(v4 + 24), a2, a3);
  return a4(v6);
}

uint64_t sub_10020CC1C()
{
  return sub_10020CC24(32);
}

uint64_t sub_10020CC24(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10020CC5C()
{
  return sub_10020CC78(sub_10020AFE8, (uint64_t)&OBJC_IVAR____TtC8Podcasts34EpisodePresentPodcastContextAction_metricsLabel, (uint64_t (*)(uint64_t))sub_10037DA48);
}

uint64_t sub_10020CC78(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = sub_100208990(*(_QWORD *)(v3 + 24), a1, a2);
  return a3(v5);
}

double sub_10020CCEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  double result;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a2;
  v44 = a3;
  sub_10003F544(&qword_10055A410);
  __chkstk_darwin();
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for URLComponents(0);
  v6 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin();
  v35 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 24);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = v8;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 56);
  v38 = *(_QWORD *)(a1 + 48);
  v39 = v11;
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 88);
  v36 = *(_QWORD *)(a1 + 80);
  v37 = v14;
  v17 = *(double *)(a1 + 96);
  LOBYTE(a1) = *(_BYTE *)(a1 + 104);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  *(_QWORD *)&v18 = swift_bridgeObjectRetain(v16).n128_u64[0];
  v19 = v13;
  v20 = v42;
  v28 = sub_10028D270(v41, v9, v40, v10, v39, v12, v38, v19, v18, v21, v22, v23, v24, v25, v26, v27, v37, v15, v36,
          v16,
          v17,
          a1);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v43, 1, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v20) == 1)
  {
    sub_10020CEEC((uint64_t)v5);
    v30 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v44, 1, 1, v30);
  }
  else
  {
    v31 = v35;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v35, v5, v20);
    v32 = swift_bridgeObjectRetain(v28);
    v33 = URLComponents.queryItems.setter(v32);
    URLComponents.url.getter(v33);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v20);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v28).n128_u64[0];
  return result;
}

uint64_t sub_10020CEEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_10055A410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10020CF2C(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v16;

  *(_QWORD *)(v2 + 16) = 0;
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16._object = (void *)0xE400000000000000;
  v6._object = (void *)0x80000001004356B0;
  v6._countAndFlagsBits = 0xD000000000000013;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 2036427856;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v16);

  *(Swift::String *)(v2 + 24) = v8;
  *(_QWORD *)(v2 + 40) = 0;
  v9 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
  v10 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_QWORD *)(v12 + 32) = 0;
  v13 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
  v14 = type metadata accessor for PendingPlaybackMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_10002099C(a1, v2 + 48);
  *(_QWORD *)(v2 + 88) = a2;
  return v2;
}

void sub_10020D084(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_10003F544(&qword_100555C48);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v3);
  v4 = sub_10003F544(&qword_100559910);
  __chkstk_darwin(v4);
  v5 = sub_10003F544(&qword_10055A550);
  __chkstk_darwin(v5);
  __asm { BR              X10 }
}

void sub_10020D1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100368248(1);
  v5 = v4;
  if (v4[2])
  {
    v6 = v4[4];
    v7 = v4[5];
    swift_bridgeObjectRetain_n(v7, 2);
    v8 = swift_bridgeObjectRelease(v5);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))PendingPlaybackMetadata.init(adamId:uuid:))(0, 1, v6, v7, v8);
    v9 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
    swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata, v3 - 104, 33, 0);
    sub_10016DE28(v0, v9, &qword_10055A550);
    swift_endAccess(v3 - 104);
    v10 = EpisodeStateController.stateMachine(for:)(v6, v7);
    swift_bridgeObjectRelease(v7);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v11);
    swift_release(v10);
    v12 = type metadata accessor for EpisodePlayState(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v1, 0, 1, v12);
    v13 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
    swift_beginAccess(v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state, v3 - 104, 33, 0);
    sub_10016DE28(v1, v13, &qword_100559910);
    swift_endAccess(v3 - 104);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }
}

void sub_10020D9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[40];
  _BYTE v12[24];

  swift_beginAccess(v0 + 40, v12, 0, 0);
  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    v2 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
    v3 = swift_dynamicCastClass(v1, v2);
    if (v3)
    {
      v4 = v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime;
      *(_QWORD *)v4 = *(_QWORD *)(v3
                                + OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_referenceStartTime);
      *(_BYTE *)(v4 + 8) = 0;
      v5 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_alignmentCoordinator;
    }
    else
    {
      v6 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0);
      v3 = swift_dynamicCastClass(v1, v6);
      if (!v3)
        return;
      v7 = *(_BYTE *)(v3
                    + direct field offset for NowPlayingTranscriptSelectionContextActionConfiguration.referenceStartTime
                    + 8);
      v8 = v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime;
      *(_QWORD *)v8 = *(_QWORD *)(v3
                                + direct field offset for NowPlayingTranscriptSelectionContextActionConfiguration.referenceStartTime);
      *(_BYTE *)(v8 + 8) = v7;
      v5 = (uint64_t *)&direct field offset for NowPlayingTranscriptSelectionContextActionConfiguration.alignmentCoordinator;
    }
    sub_10000A520(v3 + *v5, (uint64_t)v11);
    v9 = v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator;
    swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator, v10, 33, 0);
    sub_10016DE28((uint64_t)v11, v9, &qword_10055A538);
    swift_endAccess(v10);
  }
}

uint64_t sub_10020DAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(__n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v1 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for InteractionContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(v0 + 16);
  if (!v8)
    goto LABEL_6;
  swift_retain();
  sub_100367F44();
  if ((v9 & 1) == 0)
  {
    swift_release(v8);
LABEL_6:
    LOBYTE(v10) = 0;
    return v10 & 1;
  }
  swift_beginAccess(v0 + 40, v17, 0, 0);
  v10 = *(_QWORD *)(v0 + 40);
  if (v10)
  {
    v11 = *(void (**)(__n128))(*(_QWORD *)v10 + 168);
    v12 = swift_retain();
    v11(v12);
    v13 = swift_release(v10);
    InteractionContext.page.getter(v13);
    v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v10) = InteractionContext.Page.isTranscriptView.getter(v14);
    swift_release(v8);
    sub_10003F970((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  }
  else
  {
    swift_release(v8);
  }
  return v10 & 1;
}

uint64_t sub_10020DC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];
  _QWORD v42[5];
  _BYTE v43[32];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin(v2);
  v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100559910);
  __chkstk_darwin(v7);
  v9 = (__int128 *)((char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for EpisodePlayState(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - v15;
  v17 = v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state, v43, 0, 0);
  sub_100007A64(v17, (uint64_t)v9, &qword_100559910);
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v18 = &qword_100559910;
    v19 = v9;
    return sub_100007A28((uint64_t)v19, v18);
  }
  sub_1001993EC((uint64_t)v9, (uint64_t)v16);
  v20 = v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator, v41, 0, 0);
  sub_100007A64(v20, (uint64_t)&v39, &qword_10055A538);
  if (!v40)
  {
    sub_10003F970((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v18 = &qword_10055A538;
    v19 = &v39;
    return sub_100007A28((uint64_t)v19, v18);
  }
  v21 = sub_10002099C(&v39, (uint64_t)v42);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime + 8) & 1) == 0)
  {
    v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime);
    v23 = static Logger.transcripts.getter(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v26 = 134217984;
      *(_QWORD *)&v39 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 8, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "User tapped transcript play button at %f", v26, 0xCu);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v37);
    v27 = type metadata accessor for TaskPriority(0);
    v28 = (uint64_t)v38;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v38, 1, 1, v27);
    sub_100199320((uint64_t)v16, (uint64_t)v14);
    sub_10000A520((uint64_t)v42, (uint64_t)&v39);
    v29 = *(unsigned __int8 *)(v11 + 80);
    v30 = (v29 + 40) & ~v29;
    v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (v31 + 47) & 0xFFFFFFFFFFFFFFF8;
    v33 = (_QWORD *)swift_allocObject(&unk_1004B6218, v32 + 8, v29 | 7);
    v33[2] = 0;
    v33[3] = 0;
    v33[4] = v1;
    sub_1001993EC((uint64_t)v14, (uint64_t)v33 + v30);
    sub_10002099C(&v39, (uint64_t)v33 + v31);
    *(_QWORD *)((char *)v33 + v32) = v22;
    swift_retain();
    v34 = sub_10034F744(v28, (uint64_t)&unk_10055A548, (uint64_t)v33);
    swift_release(v34);
  }
  sub_10003D380(v42);
  return sub_10003F970((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
}

uint64_t sub_10020E010(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(double *)(v7 + 104) = a1;
  *(_QWORD *)(v7 + 88) = a6;
  *(_QWORD *)(v7 + 96) = a7;
  *(_QWORD *)(v7 + 80) = a5;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 112) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 120) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 128) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 136) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 144) = swift_task_alloc(v10);
  v11 = type metadata accessor for EpisodePlayState(0);
  *(_QWORD *)(v7 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_10055A550);
  *(_QWORD *)(v7 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PendingPlaybackMetadata(0);
  *(_QWORD *)(v7 + 168) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 176) = v14;
  *(_QWORD *)(v7 + 184) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10020E100, 0, 0);
}

uint64_t sub_10020E100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  sub_100007A64(v4, v3, &qword_10055A550);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100007A28(*(_QWORD *)(v0 + 160), &qword_10055A550);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
    v8 = EpisodePlayState.isEpisodePlaying.getter(v7);
    v9 = sub_100199320(v6, v5);
    v10 = *(_QWORD *)(v0 + 152);
    if ((v8 & 1) != 0)
    {
      sub_10003F970(*(_QWORD *)(v0 + 152), (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    }
    else
    {
      v11 = EpisodePlayState.isEpisodePaused.getter(v9);
      sub_10003F970(v10, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
      if ((v11 & 1) == 0)
      {
        v13 = *(_QWORD *)(v0 + 176);
        v12 = *(_QWORD *)(v0 + 184);
        v14 = *(_QWORD *)(v0 + 168);
        v15 = *(_QWORD **)(v0 + 80);
        v16 = v15[9];
        v17 = v15[10];
        sub_10003A834(v15 + 6, v16);
        dispatch thunk of EpisodeControllerProtocol.preflight(_:)(v12, v16, v17);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
        goto LABEL_8;
      }
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  }
LABEL_8:
  v18 = *(_QWORD **)(v0 + 96);
  v19 = v18[3];
  v20 = v18[4];
  sub_10003A834(v18, v19);
  v21 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AlignmentCoordinator.fetchPlayerTimestamp(for:)[1]);
  *(_QWORD *)(v0 + 192) = v21;
  *v21 = v0;
  v21[1] = sub_10020E29C;
  return dispatch thunk of AlignmentCoordinator.fetchPlayerTimestamp(for:)(v19, v20, *(double *)(v0 + 104));
}

uint64_t sub_10020E29C(double a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  *(double *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10020E470;
  else
    v5 = sub_10020E304;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10020E304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = static Logger.transcripts.getter(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v1 + 200);
    v6 = *(_QWORD *)(v1 + 104);
    v7 = swift_slowAlloc(22, -1);
    *(_QWORD *)(v1 + 64) = v5;
    *(_DWORD *)v7 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2048;
    *(_QWORD *)(v1 + 72) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v7 + 14, v7 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting play at %f, reference timestamp: %f", (uint8_t *)v7, 0x16u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(double *)(v1 + 200);
  v9 = *(_QWORD *)(v1 + 144);
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 120);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  sub_10020E740(v8);
  v12 = *(_QWORD *)(v1 + 152);
  v13 = *(_QWORD *)(v1 + 160);
  v15 = *(_QWORD *)(v1 + 136);
  v14 = *(_QWORD *)(v1 + 144);
  v16 = *(_QWORD *)(v1 + 128);
  swift_task_dealloc(*(_QWORD *)(v1 + 184));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10020E470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v1 + 208);
  static Logger.transcripts.getter(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 208);
    v7 = *(_QWORD *)(v1 + 104);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_QWORD *)(v1 + 48) = v7;
    *(_DWORD *)v8 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v6);
    v10 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v1 + 56) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v8 + 14, v8 + 22);
    *v9 = v10;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to play from transcript at time: %f, error: %@", (uint8_t *)v8, 0x16u);
    v11 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 208);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }
  v13 = *(_QWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 112);
  v15 = *(_QWORD *)(v1 + 120);

  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  v17 = v16(v13, v14);
  v18 = static Logger.transcripts.getter(v17);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = *(_QWORD *)(v1 + 104);
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v22 = 134217984;
    *(_QWORD *)(v1 + 40) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Falling back to play at reference time: %f", v22, 0xCu);
    swift_slowDealloc(v22, -1, -1);
  }
  v23 = *(_QWORD *)(v1 + 208);
  v24 = *(_QWORD *)(v1 + 136);
  v25 = *(_QWORD *)(v1 + 112);
  v26 = *(double *)(v1 + 104);

  v16(v24, v25);
  sub_10020E740(v26);
  swift_errorRelease(v23);
  v27 = *(_QWORD *)(v1 + 152);
  v28 = *(_QWORD *)(v1 + 160);
  v30 = *(_QWORD *)(v1 + 136);
  v29 = *(_QWORD *)(v1 + 144);
  v31 = *(_QWORD *)(v1 + 128);
  swift_task_dealloc(*(_QWORD *)(v1 + 184));
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10020E740(double a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32[24];

  v2 = v1;
  v4 = *v1;
  v5 = sub_10003F544(&qword_100555C48);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v6);
  v7 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10003F544(&qword_100559910);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v16 = (char *)&v29 - v15;
  v17 = v2[2];
  if (v17)
  {
    v31 = v9;
    v18 = (uint64_t)v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
    swift_beginAccess((char *)v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state, v32, 0, 0);
    sub_100007A64(v18, (uint64_t)v16, &qword_100559910);
    v19 = type metadata accessor for EpisodePlayState(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v16, 1, v19) == 1)
    {
      v30 = v4;
      swift_retain();
      goto LABEL_8;
    }
    sub_100007A64((uint64_t)v16, (uint64_t)v13, &qword_100559910);
    if (swift_getEnumCaseMultiPayload(v13, v19) != 3)
    {
      v30 = v4;
      swift_retain();
      sub_10003F970((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
LABEL_8:
      __asm { BR              X10 }
    }
    v20 = v13[16];
    v21 = v2;
    v22 = v2 + 6;
    v23 = v21[9];
    v24 = v21[10];
    sub_10003A834(v22, v23);
    swift_retain();
    dispatch thunk of EpisodeControllerProtocol.seekTo(time:)(v23, v24, a1);
    if (v20 == 1)
    {
      v25 = v16;
      v27 = v21[9];
      v26 = v21[10];
      sub_10003A834(v22, v27);
      v28 = v26;
      v16 = v25;
      dispatch thunk of EpisodeControllerProtocol.playPlayer()(v27, v28);
    }
    swift_release(v17);
    return sub_100007A28((uint64_t)v16, &qword_100559910);
  }
  return result;
}

uint64_t sub_10020F1CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  sub_10003D380(v0 + 6);
  swift_release(v0[11]);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state, &qword_100559910);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator, &qword_10055A538);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata, &qword_10055A550);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10020F25C()
{
  return type metadata accessor for PlayTranscriptSelectionContextAction(0);
}

uint64_t type metadata accessor for PlayTranscriptSelectionContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055A460;
  if (!qword_10055A460)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayTranscriptSelectionContextAction);
  return result;
}

void sub_10020F2A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = "\b";
  v6[1] = &unk_1003CE830;
  v6[2] = "\b";
  v6[3] = &unk_1003CE848;
  v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10020F388(319, (unint64_t *)&qword_10055A470, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodePlayState);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = &unk_1003CE860;
    v6[7] = &unk_1003CE878;
    sub_10020F388(319, (unint64_t *)&unk_10055A478, (uint64_t (*)(uint64_t))&type metadata accessor for PendingPlaybackMetadata);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_10020F388(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10020F3D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_10020F400()
{
  return 2036427888;
}

uint64_t sub_10020F410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for MetricsLabel.play(_:);
  v3 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void sub_10020F45C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    swift_retain();
    sub_100367F44();
    if ((v2 & 1) != 0)
    {
      sub_10020D084(v1);
      sub_10020D9DC();
    }
    swift_release(v1);
  }
}

uint64_t sub_10020F4C0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_10020F4F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 40, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10020F538(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10020F574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for EpisodePlayState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 2)
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v4, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v4, v6);
  }
  v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_10003D380((_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_10020F654(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for EpisodePlayState(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = (uint64_t)v1 + v5;
  v11 = (uint64_t)v1 + v6;
  v12 = *(double *)((char *)v1 + ((v6 + 47) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_10055A544);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100191178;
  return sub_10020E010(v12, a1, v7, v8, v9, v10, v11);
}

uint64_t sub_10020F718(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void sub_10020F738(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1;
  v9 = *a1 + 8;
  if (v6)
    v11 = v6;
  else
    v11 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8, v9);
  *a1 = v9;
  v10 = *a2;
  if (*a2)
  {
    *v10 = v7;
    *a2 = v10 + 1;
  }
  else
  {

  }
}

uint64_t type metadata accessor for MTTestActionBlockStep()
{
  return objc_opt_self(_TtC8Podcasts21MTTestActionBlockStep);
}

uint64_t sub_10020F808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t (*)(), uint64_t, __n128);
  uint64_t v6;
  __n128 v7;

  v5 = *(void (**)(uint64_t (*)(), uint64_t, __n128))(*(_QWORD *)v2 + 16);
  v6 = swift_allocObject(&unk_1004B6268, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_retain();
  v5(sub_100029B44, v6, v7);
  return swift_release(v6);
}

uint64_t sub_10020F878()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10020F89C()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  Class isa;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t inited;
  void *v8;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  NSString v23;
  Class v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  _QWORD aBlock[5];
  uint64_t v32;
  _BYTE v33[40];
  Swift::String v34;
  Swift::String v35;

  v1 = v0;
  *(_QWORD *)(v0 + 88) = objc_msgSend(objc_allocWithZone((Class)MTInformativeTableViewCell), "init", swift_retain().n128_f64[0]);
  swift_release(v0);
  *(_QWORD *)(v0 + 80) = 0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 16) = 0x7263736275536F6ELL;
  *(_QWORD *)(v0 + 24) = 0xEF736E6F69747069;
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone((Class)MTDynamicTypeConstant), "initWithDefaultConstant:textStyle:", UIFontTextStyleBody, UITableViewAutomaticDimension);
  v2 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = (void *)objc_opt_self(MTSettingsGroup);
  v5 = objc_msgSend(v4, "groupWithTitle:footerText:settings:", v2, 0, isa);

  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_QWORD *)(v1 + 40) = v5;
  v6 = sub_10003F544((uint64_t *)&unk_100553780);
  inited = swift_initStackObject(v6, v33);
  *(_OWORD *)(inited + 16) = xmmword_1003CA250;
  v8 = (void *)objc_opt_self(MTSetting);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle", swift_retain().n128_f64[0]);
  v11._countAndFlagsBits = 0xD00000000000002DLL;
  v34._object = (void *)0xE000000000000000;
  v11._object = (void *)0x8000000100435770;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v34)._object;

  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v8, "informativeSettingWithText:identifier:", v14, v15);

  if (!v16)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(_QWORD *)(inited + 32) = v16;
  aBlock[0] = inited;
  specialized Array._endMutation()(v17);
  v18 = objc_msgSend(v9, "mainBundle", swift_retain().n128_f64[0]);
  v19._countAndFlagsBits = 0xD000000000000031;
  v35._object = (void *)0xE000000000000000;
  v19._object = (void *)0x8000000100434B40;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v35)._object;

  v22 = sub_100178E10(inited);
  swift_bridgeObjectRelease(inited);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v24 = Array._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(v4, "groupWithTitle:footerText:settings:", v23, 0, v24, swift_bridgeObjectRelease(v22).n128_f64[0]);

  if (v25)
  {
    v26 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = v25;
    swift_release(v1);

    v27 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v28 = swift_allocObject(&unk_1004B6290, 24, 7);
    swift_weakInit(v28 + 16, v1);
    aBlock[4] = sub_10020FF90;
    v32 = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002BF30;
    aBlock[3] = &unk_1004B62A8;
    v29 = _Block_copy(aBlock);
    swift_release(v32);
    v30 = objc_msgSend(v27, "addObserverForName:object:queue:usingBlock:", UIContentSizeCategoryDidChangeNotification, 0, 0, v29);
    swift_release(v1);
    _Block_release(v29);
    swift_unknownObjectRelease(v30);

    return;
  }
LABEL_7:
  __break(1u);
}

void sub_10020FD18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  id v5;
  void *v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend(objc_allocWithZone((Class)MTInformativeTableViewCell), "init");
    v6 = *(void **)(v4 + 88);
    *(_QWORD *)(v4 + 88) = v5;
    swift_release(v4);

  }
}

double sub_10020FD8C()
{
  uint64_t v0;
  id v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  NSString v6;
  double v7;
  double v8;
  double result;
  Swift::String v10;

  v1 = objc_msgSend(*(id *)(v0 + 88), "messageLabel");
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10._object = (void *)0xE000000000000000;
  v3._object = (void *)0x8000000100435770;
  v3._countAndFlagsBits = 0xD00000000000002DLL;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v10)._object;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v1, "setText:", v6);

  objc_msgSend(*(id *)(v0 + 88), "fittingSize");
  if (v8 != 0.0 || v7 != 0.0)
    return v7;
  objc_msgSend(*(id *)(v0 + 32), "currentConstant");
  return result;
}

void sub_10020FEC0()
{
  uint64_t v0;

}

uint64_t sub_10020FEC8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_10020FF2C(v0 + 48);
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t _s22NoSubscriptionsSectionCMa()
{
  return objc_opt_self(_TtCC8Podcasts45MTNotificationSettingsSectionedViewController22NoSubscriptionsSection);
}

uint64_t sub_10020FF2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544((uint64_t *)&unk_100559740);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10020FF6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10020FF90(uint64_t a1)
{
  uint64_t v1;

  sub_10020FD18(a1, v1);
}

uint64_t MTEpisode.subscriptionName.getter()
{
  return sub_10020FFD8((SEL *)&selRef_subscriptionName);
}

double MTEpisode.timeRemainingOpt.getter()
{
  void *v0;
  double result;

  objc_msgSend(v0, "timeRemaining");
  return result;
}

uint64_t MTEpisode.channelName.getter()
{
  return sub_10020FFD8((SEL *)&selRef_name);
}

uint64_t sub_10020FFD8(SEL *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = objc_msgSend(v1, "podcast");
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(v3, "channel");

  if (!v5)
    return 0;
  v6 = objc_msgSend(v5, *a1);

  if (!v6)
    return 0;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

double MTEpisode.durationOpt.getter()
{
  void *v0;
  double result;

  objc_msgSend(v0, "duration");
  return result;
}

id MTEpisode.isExplicit.getter()
{
  void *v0;

  return objc_msgSend(v0, "explicit");
}

uint64_t MTEpisode.mediaType.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isVideo") & 1) != 0)
    return 1;
  if (objc_msgSend(v0, "isExternalType"))
    return 2;
  return 0;
}

uint64_t MTEpisode.episodeTypeResolvedValue.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isTrailer") & 1) != 0)
    return 2;
  else
    return objc_msgSend(v0, "isBonus") ^ 1;
}

void MTEpisode.episodeTypeResolvedValue.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;

  v3 = ((uint64_t (*)(void))EpisodeType.rawValue.getter)();
  v5 = v4;
  v6 = EpisodeType.rawValue.getter(1);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease(v5);
    v12 = 0;
LABEL_9:
    swift_bridgeObjectRelease(v5);
    objc_msgSend(v1, "setEpisodeType:", v12);
    goto LABEL_10;
  }
  v9 = v7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) == 0)
  {
    EpisodeType.rawValue.getter(a1);
    v5 = v11;
    v12 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  v12 = 0;
  objc_msgSend(v1, "setEpisodeType:", 0);
LABEL_10:

}

void (*MTEpisode.episodeTypeResolvedValue.modify(_QWORD *a1))(uint64_t a1)
{
  void *v1;
  char *v2;
  char v3;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  if ((objc_msgSend(v1, "isTrailer") & 1) != 0)
    v3 = 2;
  else
    v3 = objc_msgSend(v1, "isBonus") ^ 1;
  *v2 = v3;
  return sub_100210298;
}

void sub_100210298(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v11;
  uint64_t v12;
  id v13;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = EpisodeType.rawValue.getter(v2);
  v5 = v4;
  v7 = EpisodeType.rawValue.getter(1);
  v8 = v6;
  if (v3 == v7 && v5 == v6)
  {
    swift_bridgeObjectRelease(v5);
    v13 = 0;
LABEL_12:
    swift_bridgeObjectRelease(v5);
    objc_msgSend(*(id *)a1, "setEpisodeType:", v13);
    goto LABEL_13;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v5);
  if ((v11 & 1) == 0)
  {
    EpisodeType.rawValue.getter(v2);
    v5 = v12;
    v13 = String._bridgeToObjectiveC()();
    goto LABEL_12;
  }
  v13 = 0;
  objc_msgSend(*(id *)a1, "setEpisodeType:", 0);
LABEL_13:

}

id MTEpisode.showTypeIsSerial.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "podcast");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "isSerialShowTypeInFeed");

  return v3;
}

uint64_t MTEpisode.releaseDate.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  objc_msgSend(v1, "pubDate");
  if (v3 <= 0.0)
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  else
  {
    objc_msgSend(v1, "pubDate");
    Date.init(timeIntervalSinceReferenceDate:)(v4);
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  return v6(v7, v8, 1, v5);
}

id MTEpisode.seasonNumberOpt.getter()
{
  return sub_100210480((SEL *)&selRef_seasonNumber);
}

id MTEpisode.episodeNumberOpt.getter()
{
  return sub_100210480((SEL *)&selRef_episodeNumber);
}

id sub_100210480(SEL *a1)
{
  void *v1;

  if ((uint64_t)objc_msgSend(v1, *a1) < 1)
    return 0;
  else
    return objc_msgSend(v1, *a1);
}

uint64_t sub_1002104D8()
{
  return MTEpisode.channelName.getter();
}

uint64_t sub_1002104F8()
{
  return MTEpisode.subscriptionName.getter();
}

id sub_100210518()
{
  id *v0;

  return objc_msgSend(*v0, "entitlementState");
}

id sub_100210528()
{
  id *v0;

  return objc_msgSend(*v0, "hasFreeVersion");
}

void sub_100210548(uint64_t a1@<X8>)
{
  MTEpisode.listenNowReason.getter(a1);
}

uint64_t sub_100210568()
{
  id *v0;
  id v1;

  v1 = *v0;
  if ((objc_msgSend(*v0, "isTrailer") & 1) != 0)
    return 2;
  else
    return objc_msgSend(v1, "isBonus") ^ 1;
}

uint64_t sub_1002105B4()
{
  id *v0;
  id v1;

  v1 = *v0;
  if ((objc_msgSend(*v0, "isVideo") & 1) != 0)
    return 1;
  if (objc_msgSend(v1, "isExternalType"))
    return 2;
  return 0;
}

id sub_100210608()
{
  id *v0;

  return objc_msgSend(*v0, "explicit");
}

id sub_100210628()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, "podcast");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "isSerialShowTypeInFeed");

  return v3;
}

double sub_100210680()
{
  id *v0;
  double result;

  objc_msgSend(*v0, "duration");
  return result;
}

id sub_1002106A8(uint64_t a1, uint64_t a2)
{
  return sub_1002106C0(a1, a2, (SEL *)&selRef_seasonNumber);
}

id sub_1002106B4(uint64_t a1, uint64_t a2)
{
  return sub_1002106C0(a1, a2, (SEL *)&selRef_episodeNumber);
}

id sub_1002106C0(uint64_t a1, uint64_t a2, SEL *a3)
{
  void **v3;
  void *v5;

  v5 = *v3;
  if ((uint64_t)objc_msgSend(v5, *a3) < 1)
    return 0;
  else
    return objc_msgSend(v5, *a3);
}

uint64_t sub_10021071C@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  objc_msgSend(v3, "pubDate");
  if (v4 <= 0.0)
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a1;
    v9 = 1;
  }
  else
  {
    objc_msgSend(v3, "pubDate");
    Date.init(timeIntervalSinceReferenceDate:)(v5);
    v6 = type metadata accessor for Date(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a1;
    v9 = 0;
  }
  return v7(v8, v9, 1, v6);
}

double sub_1002107B0()
{
  id *v0;
  double result;

  objc_msgSend(*v0, "timeRemaining");
  return result;
}

id sub_1002107DC(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v6 = objc_msgSend(a1, "uuid");
  v7 = v6;
  if (!v6)
    goto LABEL_6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  v7 = objc_msgSend(a1, "podcast");
  if (!v7)
  {
    swift_bridgeObjectRelease(v10);
LABEL_6:
    swift_bridgeObjectRelease(a3);

    return v7;
  }
  type metadata accessor for PodcastDetail(0);
  v11 = v7;
  v12 = sub_1001D0F44(v11, 0, 0, 0, 1u);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(a1, "episodeCount", swift_retain(v12).n128_f64[0]);
    v7 = (id)dispatch thunk of StationShow.__allocating_init(uuid:stationUuid:podcast:episodeCount:)(v8, v10, a2, a3, v13, v14);
    swift_release(v13);

  }
  else
  {
    swift_bridgeObjectRelease(v10);

    swift_bridgeObjectRelease(a3);
    return 0;
  }
  return v7;
}

void sub_10021092C()
{
  uint64_t v0;
  uint64_t KeyPath;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10021205C();
  KeyPath = swift_getKeyPath(&unk_1003CEA50, v0);
  v2 = (void *)NSExpression.init<A, B>(forKeyPath:)(KeyPath);
  v3 = objc_msgSend(v2, "keyPath");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  qword_100572E88 = v4;
  unk_100572E90 = v6;
}

uint64_t sub_100210A38(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a2;
  v8 = sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v40 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.modernPlayback.getter(v12);
  v15 = v4;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v39 = a4;
    v18 = swift_slowAlloc(12, -1);
    v37 = v10;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v36 = v11;
    v21 = v20;
    v43 = v20;
    *(_DWORD *)v19 = 136315138;
    ObjectType = swift_getObjectType(v15, v22);
    v24 = _typeName(_:qualified:)(ObjectType, 0);
    v38 = a1;
    v25 = a3;
    v27 = v26;
    v42 = sub_10003D274(v24, v26, &v43);
    a4 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4, v19 + 12);

    v28 = v27;
    a3 = v25;
    a1 = v38;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] Resolving manifest for playback. ", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v29 = v19;
    v10 = v37;
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v36);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v11);
  }
  v30 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v10, 1, 1, v30);
  v31 = swift_allocObject(&unk_1004B63A0, 65, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = a1;
  *(_QWORD *)(v31 + 40) = a3;
  *(_QWORD *)(v31 + 48) = a4;
  *(_QWORD *)(v31 + 56) = v15;
  *(_BYTE *)(v31 + 64) = v41 & 1;
  v32 = v15;
  v33 = a1;
  sub_10002CA20(a3, a4);
  v34 = sub_10034F744((uint64_t)v10, (uint64_t)&unk_10055A7A8, v31);
  return swift_release(v34);
}

uint64_t sub_100210CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  *(_BYTE *)(v8 + 316) = a8;
  *(_QWORD *)(v8 + 128) = a6;
  *(_QWORD *)(v8 + 136) = a7;
  *(_QWORD *)(v8 + 120) = a5;
  v9 = type metadata accessor for PlaybackController.QueueCommand(0);
  *(_QWORD *)(v8 + 144) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 152) = v10;
  *(_QWORD *)(v8 + 160) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 168) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 176) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 184) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 192) = swift_task_alloc(v13);
  v14 = sub_10003F544(&qword_10055A7B0);
  v15 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v8 + 200) = v15;
  v16 = type metadata accessor for PlaybackIntent(0);
  *(_QWORD *)(v8 + 208) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v8 + 216) = v17;
  *(_QWORD *)(v8 + 224) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_task_alloc(dword_10056051C);
  *(_QWORD *)(v8 + 232) = v18;
  *v18 = v8;
  v18[1] = sub_100210DFC;
  return sub_1002BC960(v15);
}

uint64_t sub_100210DFC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_task_switch(sub_100210E50, 0, 0);
}

uint64_t sub_100210E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100211FF8(v3);
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 240) = static MainActor.shared.getter(v5);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_100211204, v6, v7);
  }
  else
  {
    v9 = *(void **)(v0 + 136);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 224), v3, v1);
    static Logger.modernPlayback.getter(v10);
    v11 = Logger.logObject.getter(v9);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 176);
    if (v13)
    {
      v37 = *(unsigned __int8 *)(v0 + 316);
      v17 = *(void **)(v0 + 136);
      v39 = *(_QWORD *)(v0 + 192);
      v18 = swift_slowAlloc(18, -1);
      v38 = v16;
      v19 = swift_slowAlloc(32, -1);
      v42 = v19;
      *(_DWORD *)v18 = 136315394;
      ObjectType = swift_getObjectType(v17, v20);
      v22 = _typeName(_:qualified:)(ObjectType, 0);
      v24 = v23;
      *(_QWORD *)(v0 + 112) = sub_10003D274(v22, v23, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v24);

      *(_WORD *)(v18 + 12) = 1024;
      *(_DWORD *)(v0 + 312) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 316, v18 + 14, v18 + 18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] Intent created, requesting playback (waitForEngine: %{BOOL}d)", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v25 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v25(v39, v38);
    }
    else
    {
      v26 = *(void **)(v0 + 136);

      v25 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v25(v14, v16);
    }
    *(_QWORD *)(v0 + 248) = v25;
    v28 = *(_QWORD *)(v0 + 152);
    v27 = *(_QWORD *)(v0 + 160);
    v29 = *(unsigned __int8 *)(v0 + 316);
    v30 = *(_QWORD *)(v0 + 144);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 16))(v27, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, enum case for PlaybackController.QueueCommand.replace(_:), v30);
    v31 = *(_QWORD *)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 144);
    if (v29 == 1)
    {
      *(_QWORD *)(v0 + 80) = v32;
      *(_QWORD *)(v0 + 88) = &protocol witness table for PlaybackController.QueueCommand;
      v33 = sub_1000242A8((_QWORD *)(v0 + 56));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v28 + 16))(v33, v31, v32);
      v40 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
          + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
      v34 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
                                       + 1));
      *(_QWORD *)(v0 + 256) = v34;
      *v34 = v0;
      v34[1] = sub_100211284;
      return ((uint64_t (*)(uint64_t, _QWORD, double))v40)(v0 + 56, 0, 5.0);
    }
    else
    {
      *(_QWORD *)(v0 + 40) = v32;
      *(_QWORD *)(v0 + 48) = &protocol witness table for PlaybackController.QueueCommand;
      v35 = sub_1000242A8((_QWORD *)(v0 + 16));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v28 + 16))(v35, v31, v32);
      v41 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
          + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
      v36 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                       + 1));
      *(_QWORD *)(v0 + 272) = v36;
      *v36 = v0;
      v36[1] = sub_10021136C;
      return ((uint64_t (*)(uint64_t, _QWORD))v41)(v0 + 16, 0);
    }
  }
}

uint64_t sub_100211204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 240));
  if (v1)
    (*(void (**)(uint64_t))(v0 + 120))(2);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100211284(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 256);
  *(_QWORD *)(*v2 + 264) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10021159C;
  }
  else
  {

    sub_10003D380((_QWORD *)(v4 + 56));
    v6 = sub_100211304;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100211304()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 288) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1002113EC, v3, v4);
}

uint64_t sub_10021136C(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 272);
  *(_QWORD *)(*v2 + 280) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100211864;
  }
  else
  {

    sub_10003D380((_QWORD *)(v4 + 16));
    v6 = sub_1002120E8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002113EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 288));
  if (v1)
    (*(void (**)(uint64_t))(v0 + 120))(1);
  return swift_task_switch(sub_10021143C, 0, 0);
}

uint64_t sub_10021143C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002114C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 304));
  if (v1)
    (*(void (**)(uint64_t))(v0 + 120))(2);
  return swift_task_switch(sub_100211518, 0, 0);
}

uint64_t sub_100211518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  swift_errorRelease(*(_QWORD *)(v0 + 296));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021159C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v1 = v0;
  (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[20], v0[18]);
  v2 = sub_10003D380(v0 + 7);
  v3 = v0[33];
  v0[37] = v3;
  v4 = (void *)v0[17];
  static Logger.modernPlayback.getter(v2);
  v5 = v4;
  swift_errorRetain(v3);
  v6 = v5;
  v7 = swift_errorRetain(v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v31 = v1[23];
    v32 = (void (*)(uint64_t, uint64_t))v1[31];
    v30 = v1[21];
    v10 = (void *)v1[17];
    v11 = swift_slowAlloc(22, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v33 = v29;
    *(_DWORD *)v11 = 136315394;
    ObjectType = swift_getObjectType(v10, v13);
    v15 = _typeName(_:qualified:)(ObjectType, 0);
    v17 = v16;
    v1[12] = sub_10003D274(v15, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 12, v1 + 13, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain(v3);
    v18 = _swift_stdlib_bridgeErrorToNSError(v3);
    v1[13] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v11 + 14, v11 + 22);
    *v12 = v18;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Error starting manifest playback: %@", (uint8_t *)v11, 0x16u);
    v19 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v12, 1, v19);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v32(v31, v30);
  }
  else
  {
    v20 = (void (*)(uint64_t, uint64_t))v1[31];
    v21 = v1[23];
    v22 = v1[21];
    v23 = (void *)v1[17];

    swift_errorRelease(v3);
    swift_errorRelease(v3);

    v20(v21, v22);
  }
  v24 = type metadata accessor for MainActor(0);
  v1[38] = static MainActor.shared.getter(v25);
  v26 = dispatch thunk of Actor.unownedExecutor.getter(v24, &protocol witness table for MainActor);
  return swift_task_switch(sub_1002114C8, v26, v27);
}

uint64_t sub_100211864()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v1 = v0;
  (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[20], v0[18]);
  v2 = sub_10003D380(v0 + 2);
  v3 = v0[35];
  v0[37] = v3;
  v4 = (void *)v0[17];
  static Logger.modernPlayback.getter(v2);
  v5 = v4;
  swift_errorRetain(v3);
  v6 = v5;
  v7 = swift_errorRetain(v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v31 = v1[23];
    v32 = (void (*)(uint64_t, uint64_t))v1[31];
    v30 = v1[21];
    v10 = (void *)v1[17];
    v11 = swift_slowAlloc(22, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v33 = v29;
    *(_DWORD *)v11 = 136315394;
    ObjectType = swift_getObjectType(v10, v13);
    v15 = _typeName(_:qualified:)(ObjectType, 0);
    v17 = v16;
    v1[12] = sub_10003D274(v15, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 12, v1 + 13, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain(v3);
    v18 = _swift_stdlib_bridgeErrorToNSError(v3);
    v1[13] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v11 + 14, v11 + 22);
    *v12 = v18;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Error starting manifest playback: %@", (uint8_t *)v11, 0x16u);
    v19 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v12, 1, v19);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v32(v31, v30);
  }
  else
  {
    v20 = (void (*)(uint64_t, uint64_t))v1[31];
    v21 = v1[23];
    v22 = v1[21];
    v23 = (void *)v1[17];

    swift_errorRelease(v3);
    swift_errorRelease(v3);

    v20(v21, v22);
  }
  v24 = type metadata accessor for MainActor(0);
  v1[38] = static MainActor.shared.getter(v25);
  v26 = dispatch thunk of Actor.unownedExecutor.getter(v24, &protocol witness table for MainActor);
  return swift_task_switch(sub_1002114C8, v26, v27);
}

uint64_t sub_100211BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[24];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100563120);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_10003F544((uint64_t *)&unk_10055B6F0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  dispatch thunk of PlaybackController.$isPlaying.getter(v8);
  v11 = sub_10002F9C8(&qword_100556560, (uint64_t *)&unk_100563120, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.removeDuplicates()(v2, v11, &protocol witness table for Bool);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v12 = swift_allocObject(&unk_1004B6378, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v0);
  v13 = sub_10002F9C8((unint64_t *)&unk_10055B740, (uint64_t *)&unk_10055B6F0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v14 = Publisher<>.sink(receiveValue:)(sub_100211F18, v12, v6, v13);
  swift_release(v12);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  v15 = v1 + OBJC_IVAR___MTSharedPlaybackController_subscriptions;
  swift_beginAccess(v15, v20, 33, 0);
  v16 = sub_10003F544((uint64_t *)&unk_100556450);
  v17 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v15, v16, v17);
  swift_endAccess(v20);
  return swift_release(v14);
}

void sub_100211DE0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  void *v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    objc_msgSend(Strong, "setIsPlaying:", v2);

  }
}

id sub_100211E6C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedPlaybackController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SharedPlaybackController()
{
  return objc_opt_self(MTSharedPlaybackController);
}

uint64_t sub_100211EF4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100211F18(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100211DE0(a1, v1);
}

uint64_t sub_100211F20()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_100211F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_10055A7A4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100191178;
  return sub_100210CF0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100211FF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_10055A7B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100212038()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10021205C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055A7B8;
  if (!qword_10055A7B8)
  {
    v1 = objc_opt_self(NSExpression);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10055A7B8);
  }
  return result;
}

const char *sub_100212098()
{
  return "isPlaying";
}

id sub_1002120A4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isPlaying");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1002120D4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsPlaying:", *a1);
}

void WidgetNowPlayingInfo.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  uint64_t v25;
  Swift::UInt64 v26;
  Swift::UInt64 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_1005522F0);
  v9 = __chkstk_darwin(v8);
  v31 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v30 - v14;
  v16 = v1[1];
  if (v16)
  {
    v17 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(a1, v17, v16);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*((_BYTE *)v1 + 16));
  v18 = (int *)type metadata accessor for WidgetNowPlayingInfo(0);
  sub_100007A64((uint64_t)v1 + v18[6], (uint64_t)v15, &qword_1005522F0);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v15, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
    Hasher._combine(_:)(1u);
    v20 = sub_100026844(&qword_100558EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100007A64((uint64_t)v1 + v18[7], (uint64_t)v13, &qword_1005522F0);
  if (v19(v13, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    Hasher._combine(_:)(1u);
    v21 = sub_100026844(&qword_100558EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v22 = (uint64_t)v1 + v18[8];
  if (*(_BYTE *)(v22 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = *(_QWORD *)v22;
    Hasher._combine(_:)(1u);
    if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v24 = v23;
    else
      v24 = 0;
    Hasher._combine(_:)(v24);
  }
  v25 = (uint64_t)v1 + v18[9];
  if (*(_BYTE *)(v25 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v26 = *(_QWORD *)v25;
    Hasher._combine(_:)(1u);
    if ((v26 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v27 = v26;
    else
      v27 = 0;
    Hasher._combine(_:)(v27);
  }
  v28 = v31;
  sub_100007A64((uint64_t)v2 + v18[10], v31, &qword_1005522F0);
  if (v19((char *)v28, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v28, v4);
    Hasher._combine(_:)(1u);
    v29 = sub_100026844(&qword_100558EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v29);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

BOOL sub_1002124AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1002124C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100213AB0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002124E4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1002124F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000314D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100212518(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000314D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int WidgetNowPlayingInfo.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  WidgetNowPlayingInfo.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100212580(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  WidgetNowPlayingInfo.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Void __swiftcall WidgetNowPlayingInfo.logInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  os_log_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  os_log_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v1 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v64 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  __chkstk_darwin(v1);
  v63 = (uint64_t)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_1005522F0);
  v4 = __chkstk_darwin(v3);
  v62 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (uint64_t)&v56 - v6;
  v7 = type metadata accessor for WidgetNowPlayingInfo(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v71 = (uint64_t)&v56 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v56 - v16);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + *(int *)(v7 + 36) + 8) & 1) != 0)
  {
    v23 = 0xE300000000000000;
    v67 = 7104878;
  }
  else
  {
    v20 = Double.description.getter(v20);
    v67 = v20;
    v23 = v24;
  }
  v25 = *(_BYTE *)(v0 + *(int *)(v7 + 32) + 8);
  v69 = v7;
  if ((v25 & 1) != 0)
  {
    v26 = 0xE300000000000000;
    v66 = 7104878;
  }
  else
  {
    v20 = Double.description.getter(v20);
    v66 = v20;
    v26 = v27;
  }
  static Logger.widget.getter(v20);
  sub_10003151C(v0, (uint64_t)v17);
  sub_10003151C(v0, (uint64_t)v15);
  v28 = v71;
  sub_10003151C(v0, v71);
  sub_10003151C(v0, (uint64_t)v10);
  swift_bridgeObjectRetain(v23);
  v29 = swift_bridgeObjectRetain(v26);
  v30 = Logger.logObject.getter(v29);
  v61 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, (os_log_type_t)v61))
  {
    v60 = v30;
    v70 = v10;
    v31 = swift_slowAlloc(58, -1);
    v56 = swift_slowAlloc(160, -1);
    v73 = v56;
    *(_DWORD *)v31 = 136447490;
    v32 = v17[1];
    v33 = v69;
    v58 = v19;
    v59 = v18;
    v57 = v22;
    if (v32)
    {
      v34 = *v17;
      v35 = v32;
    }
    else
    {
      v35 = 0xE300000000000000;
      v34 = 7104878;
    }
    swift_bridgeObjectRetain(v32);
    v72 = sub_10003D274(v34, v35, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v35);
    sub_10003149C((uint64_t)v17);
    *(_WORD *)(v31 + 12) = 1024;
    v36 = v15[16];
    sub_10003149C((uint64_t)v15);
    LODWORD(v72) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, (char *)&v72 + 4, v31 + 14, v31 + 18);
    *(_WORD *)(v31 + 18) = 2082;
    swift_bridgeObjectRetain(v23);
    v72 = sub_10003D274(v67, v23, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v31 + 20, v31 + 28);
    swift_bridgeObjectRelease_n(v23, 3);
    *(_WORD *)(v31 + 28) = 2082;
    swift_bridgeObjectRetain(v26);
    v72 = sub_10003D274(v66, v26, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v31 + 30, v31 + 38);
    swift_bridgeObjectRelease_n(v26, 3);
    *(_WORD *)(v31 + 38) = 2082;
    v37 = v68;
    sub_100007A64(v71 + *(int *)(v33 + 24), v68, &qword_1005522F0);
    v38 = type metadata accessor for Date(0);
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38) == 1)
    {
      sub_100007A28(v37, &qword_1005522F0);
      v41 = 0xE300000000000000;
      v42 = 7104878;
    }
    else
    {
      v43 = v63;
      sub_100212C40(v63);
      v42 = Date.ISO8601Format(_:)(v43);
      v41 = v44;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v43, v65);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    }
    v45 = v59;
    v46 = (uint64_t)v62;
    v72 = sub_10003D274(v42, v41, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v31 + 40, v31 + 48);
    swift_bridgeObjectRelease(v41);
    sub_10003149C(v71);
    *(_WORD *)(v31 + 48) = 2082;
    sub_100007A64((uint64_t)&v70[*(int *)(v33 + 28)], v46, &qword_1005522F0);
    if (v40(v46, 1, v38) == 1)
    {
      sub_100007A28(v46, &qword_1005522F0);
      v47 = 0xE300000000000000;
      v49 = v57;
      v48 = v58;
      v50 = 7104878;
    }
    else
    {
      v51 = v63;
      sub_100212C40(v63);
      v50 = Date.ISO8601Format(_:)(v51);
      v47 = v52;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v51, v65);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v46, v38);
      v49 = v57;
      v48 = v58;
    }
    v53 = v61;
    v54 = v56;
    v72 = sub_10003D274(v50, v47, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v31 + 50, v31 + 58);
    swift_bridgeObjectRelease(v47);
    sub_10003149C((uint64_t)v70);
    v55 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, v53, "WidgetNowPlayingInfo: %{public}s, isPlaying: %{BOOL}d, duration %{public}s, timeRemaining %{public}s, start %{public}s, end %{public}s", (uint8_t *)v31, 0x3Au);
    swift_arrayDestroy(v54, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v45);
  }
  else
  {
    sub_10003149C((uint64_t)v15);
    sub_10003149C((uint64_t)v17);
    swift_bridgeObjectRelease_n(v26, 2);
    swift_bridgeObjectRelease_n(v23, 2);
    sub_10003149C(v28);
    sub_10003149C((uint64_t)v10);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
}

uint64_t sub_100212C40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t result;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a1;
  v1 = sub_10003F544(&qword_10055A8C0);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for TimeZone(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v19 + 104))(v18, enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  v20 = v12;
  v21 = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v20);
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v23 = v32;
  v22(v11, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v31);
  TimeZone.init(secondsFromGMT:)(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v3, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v26 = v28;
    v25(v28, v3, v23);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(v18, v15, v11, v7, 0, v26);
  }
  return result;
}

uint64_t sub_100212EB4(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100212ED8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100212F00()
{
  return sub_100026844(&qword_10055A7D8, type metadata accessor for WidgetNowPlayingInfo, (uint64_t)&protocol conformance descriptor for WidgetNowPlayingInfo);
}

_QWORD *initializeBufferWithCopyOfBuffer for WidgetNowPlayingInfo(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_10003F544(&qword_1005522F0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[7];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)((char *)a2 + v17, 1, v11))
    {
      v20 = sub_10003F544(&qword_1005522F0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    }
    v21 = a3[8];
    v22 = a3[9];
    v23 = (char *)v4 + v21;
    v24 = (uint64_t)a2 + v21;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = *(_BYTE *)(v24 + 8);
    v25 = (char *)v4 + v22;
    v26 = (uint64_t)a2 + v22;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = *(_BYTE *)(v26 + 8);
    v27 = a3[10];
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(v29, 1, v11))
    {
      v30 = sub_10003F544(&qword_1005522F0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v28, v29, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t assignWithCopy for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  int v34;
  int v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_10003F544(&qword_1005522F0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[7];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v13((void *)(a1 + v17), 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    v22 = sub_10003F544(&qword_1005522F0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v18, v19, v11);
LABEL_13:
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(_QWORD *)v24 = v26;
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  *(_BYTE *)(v28 + 8) = *((_BYTE *)v29 + 8);
  *(_QWORD *)v28 = v30;
  v31 = a3[10];
  v32 = (void *)(a1 + v31);
  v33 = (void *)(a2 + v31);
  v34 = v13((void *)(a1 + v31), 1, v11);
  v35 = v13(v33, 1, v11);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v32, v33, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v32, v11);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    v36 = sub_10003F544(&qword_1005522F0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v32, v33, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v32, 0, 1, v11);
  return a1;
}

uint64_t initializeWithTake for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_10003F544(&qword_1005522F0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    v16 = sub_10003F544(&qword_1005522F0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  v18 = a3[9];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[10];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11(v25, 1, v9))
  {
    v26 = sub_10003F544(&qword_1005522F0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  int v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_10003F544(&qword_1005522F0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[7];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v13((void *)(a1 + v17), 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v18, v19, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    v22 = sub_10003F544(&qword_1005522F0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v18, v19, v11);
LABEL_13:
  v23 = a3[8];
  v24 = a3[9];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[10];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  v32 = v13((void *)(a1 + v29), 1, v11);
  v33 = v13(v31, 1, v11);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v30, v31, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v30, v11);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    v34 = sub_10003F544(&qword_1005522F0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v30, v31, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v11);
  return a1;
}

uint64_t sub_1002138D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10003F544(&qword_1005522F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_100213960(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_10003F544(&qword_1005522F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetNowPlayingInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

unint64_t sub_100213A6C()
{
  unint64_t result;

  result = qword_10055A888;
  if (!qword_10055A888)
  {
    result = swift_getWitnessTable(&unk_1003CEC5C, &type metadata for WidgetNowPlayingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10055A888);
  }
  return result;
}

uint64_t sub_100213AB0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x8000000100435890;
    if (a2 == 0x8000000100435890)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100435890, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6E6979616C507369 && a2 == 0xE900000000000067)
  {
    v6 = 0xE900000000000067;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6979616C507369, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x80000001004358B0;
    if (a2 == 0x80000001004358B0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001004358B0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001004358D0)
  {
    v8 = 0x80000001004358D0;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001004358D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x616D6552656D6974 && a2 == 0xED0000676E696E69)
  {
    v9 = 0xED0000676E696E69;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616D6552656D6974, 0xED0000676E696E69, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001004358F0)
  {
    swift_bridgeObjectRelease(0x80000001004358F0);
    return 6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001004358F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t type metadata accessor for FetchNonFollowedShows()
{
  return objc_opt_self(_TtC8Podcasts21FetchNonFollowedShows);
}

uint64_t sub_100213DC0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = sub_100213E4C();
  v5 = NSManagedObjectContext.fetch<A>(_:)(a1, v4);
  v6 = sub_10034F2EC(v5);
  result = swift_bridgeObjectRelease(v5);
  v8 = _swiftEmptyArrayStorage;
  if (v6)
    v8 = v6;
  *a2 = v8;
  return result;
}

unint64_t sub_100213E4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100554EF0;
  if (!qword_100554EF0)
  {
    v1 = objc_opt_self(NSDictionary);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100554EF0);
  }
  return result;
}

uint64_t FlowAction.init(station:presentationContext:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v42 = a2;
  v3 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v3);
  v41 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FlowDestinationPageHeader(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowPresentationContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FlowDestination(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for StationDetail(0);
  v15 = a1;
  sub_1002DA298(v15, 0, 1, 1);
  if (v16)
  {
    v17 = v16;
    *v14 = v16;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for FlowDestination.station(_:), v11);
    v18 = swift_retain();
    v19 = StationDetail.title.getter(v18);
    v35 = v20;
    v36 = v19;
    v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v37 = v7;
    v22 = v21(v10, v42, v7);
    v23 = static Link.Presentation.textFollowsTintColor.getter(v22);
    v24 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    v25 = Link.Presentation.init(rawValue:)(0);
    v26 = Link.Presentation.init(rawValue:)(v25);
    if (Link.Presentation.init(rawValue:)(v26 & v23) != v23)
      v25 = Link.Presentation.init(rawValue:)(v25 | v23);
    v27 = Link.Presentation.init(rawValue:)(v25);
    if (Link.Presentation.init(rawValue:)(v27 & v24) != v24)
      v25 = Link.Presentation.init(rawValue:)(v25 | v24);
    v28 = v37;
    v29 = v40;
    v30 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v38 + 104))(v40, enum case for FlowDestinationPageHeader.standard(_:), v39);
    v31 = v41;
    static ActionMetrics.notInstrumented.getter(v30);
    v32 = dispatch thunk of FlowAction.__allocating_init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v14, 0, 0, v36, v35, v10, 0, v25, v29, v31);
    swift_release(v17);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v42, v28);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v42, v7);
    return 0;
  }
  return v32;
}

uint64_t FlowAction.init(podcast:presentationContext:actionMetrics:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD, uint64_t);
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[12];
  unsigned int v41;
  uint64_t *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v49 = a3;
  v50 = a2;
  v4 = type metadata accessor for ActionMetrics(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v48 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for FlowDestinationPageHeader(0);
  v46 = *(_BYTE **)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v8 = &v40[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FlowPresentationContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v40[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for FlowDestination(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)&v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PodcastDetail(0);
  v17 = a1;
  v18 = sub_1001D0F44(v17, 0, 0, 0, 1u);
  if (v18)
  {
    v19 = v18;
    sub_1001930E8();
    LOBYTE(v41) = static UITraitCollection.interfaceIdiomIsMac.getter() & 1;
    v41 = v41;
    *v16 = v19;
    v20 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v14 + 104);
    v42 = v16;
    v20(v16, enum case for FlowDestination.podcast(_:), v13);
    v43 = v12;
    v44 = v10;
    v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
    v22 = v50;
    v45 = v9;
    v21(v12, v50, v9);
    v23 = (void (*)(_BYTE *, _QWORD, uint64_t))*((_QWORD *)v46 + 13);
    v46 = v8;
    v23(v8, enum case for FlowDestinationPageHeader.uber(_:), v47);
    v24 = v48;
    v25 = v49;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v51 + 16))(v48, v49, v52);
    swift_retain();
    v27 = static Link.Presentation.textFollowsTintColor.getter(v26);
    v28 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    v29 = Link.Presentation.init(rawValue:)(0);
    v30 = Link.Presentation.init(rawValue:)(v29);
    v31 = v22;
    v32 = v25;
    if (Link.Presentation.init(rawValue:)(v30 & v27) != v27)
      v29 = Link.Presentation.init(rawValue:)(v29 | v27);
    v33 = Link.Presentation.init(rawValue:)(v29);
    v34 = v17;
    if (Link.Presentation.init(rawValue:)(v33 & v28) != v28)
      v29 = Link.Presentation.init(rawValue:)(v29 | v28);
    v35 = v51;
    v37 = v44;
    v36 = v45;
    v38 = dispatch thunk of FlowAction.__allocating_init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v42, 0, 0, 0, 0, v43, v41, v29, v46, v24);
    swift_release(v19);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v32, v52);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v31, v36);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v52);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v50, v9);
    return 0;
  }
  return v38;
}

void sub_100214438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10013B9CC((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_10021BD0C(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_100007A28(a1, (uint64_t *)&unk_100552300);
    sub_100216CFC(a2, a3, v10);
    swift_bridgeObjectRelease(a3);
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100552300);
  }
}

uint64_t sub_10021450C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  __int128 v8[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10002099C((__int128 *)a1, (uint64_t)v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v7 = *v2;
    *v2 = 0x8000000000000000;
    sub_10021C0DC(v8, a2, isUniquelyReferenced_nonNull_native);
    v5 = *v2;
    *v2 = v7;
    swift_bridgeObjectRelease(v5);
    return sub_10003F970(a2, type metadata accessor for DownloadJob);
  }
  else
  {
    sub_100007A28(a1, (uint64_t *)&unk_100564D90);
    sub_100216DEC(a2, (uint64_t)v8);
    sub_10003F970(a2, type metadata accessor for DownloadJob);
    return sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100564D90);
  }
}

double sub_1002145D8(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = sub_10003F544(&qword_10055AAE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100007A28(a1, &qword_10055AAE8);
    sub_100216EF0((uint64_t)a2, (uint64_t)v8);

    sub_100007A28((uint64_t)v8, &qword_10055AAE8);
  }
  else
  {
    sub_10013BE30(a1, (uint64_t)v11, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_10021C7A4((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    v15 = *v3;
    *v3 = v17;

    *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  return result;
}

void sub_10021472C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10002099C((__int128 *)a1, (uint64_t)v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_10021C8E4(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_100007A28(a1, &qword_10055AAC8);
    sub_100217014(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    sub_100007A28((uint64_t)v10, &qword_10055AAC8);
  }
}

void sub_100214800(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[40];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[40];
  _OWORD v39[4];
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F544(&qword_10055AAD8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    sub_100048678(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)&v42);
    sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v44 + 8);
    v40[0] = v44[0];
    v40[1] = v44[1];
    v41 = v45;
    v39[2] = v42;
    v39[3] = v43;
    v28 = v42;
    v30 = v43;
    v32 = *(_QWORD *)&v44[0];
    sub_10013B9CC((_OWORD *)((char *)v40 + 8), v39);
    v17 = sub_10003F544((uint64_t *)&unk_100552300);
    swift_dynamicCast(v34, v39, (char *)&type metadata for Any + 8, v17, 7);
    v35 = v28;
    v36 = v30;
    v37 = v32;
    sub_10000773C((uint64_t)v34, (uint64_t)v38);
    v29 = v35;
    v31 = v36;
    v33 = v37;
    sub_10000773C((uint64_t)v38, (uint64_t)v39);
    sub_10000773C((uint64_t)v39, (uint64_t)&v35);
    v18 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v19 = -1 << *((_BYTE *)v3 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)&v7[8 * v21];
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v31;
    *(_QWORD *)(v10 + 32) = v33;
    sub_10000773C((uint64_t)&v35, v3[7] + 32 * v9);
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release(v3);
    sub_10017F43C(a1);
    return;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_100214BDC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F544(&qword_100552A20);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_37;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_37;
        v14 = *(_QWORD *)(v29 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_37;
          v14 = *(_QWORD *)(v29 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_10003D344(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v41);
    *(_QWORD *)&v40 = v19;
    *((_QWORD *)&v40 + 1) = v18;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v19;
    *((_QWORD *)&v38[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10013B9CC(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10013B9CC(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10013B9CC(v37, v38);
    sub_10013B9CC(v38, &v34);
    v20 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v30;
    *(_OWORD *)(v10 + 16) = v31;
    *(_QWORD *)(v10 + 32) = v32;
    sub_10013B9CC(&v34, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10017F43C(a1);
    return;
  }
  v14 = *(_QWORD *)(v29 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_100214FA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F544(&qword_100552A20);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v30)
      goto LABEL_37;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_37;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_37;
        v14 = *(_QWORD *)(v31 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v30)
            goto LABEL_37;
          v14 = *(_QWORD *)(v31 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = v17[1];
    v19 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v12);
    *(_QWORD *)&v41[0] = *v17;
    *((_QWORD *)&v41[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    v20 = v19;
    swift_dynamicCast(&v33, v41, &type metadata for String, &type metadata for AnyHashable, 7);
    v32 = v20;
    v21 = sub_100005EC8(0, &qword_100556900, &off_1004A4540);
    swift_dynamicCast(v36, &v32, v21, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_10013B9CC(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_10013B9CC(v40, v41);
    sub_10013B9CC(v41, &v37);
    v22 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v7[8 * v25];
      }
      while (v29 == -1);
      v9 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v33;
    *(_OWORD *)(v10 + 16) = v34;
    *(_QWORD *)(v10 + 32) = v35;
    sub_10013B9CC(&v37, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_10017F43C(a1);
    return;
  }
  v14 = *(_QWORD *)(v31 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v30)
      goto LABEL_37;
    v14 = *(_QWORD *)(v31 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_100215360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F544(&qword_100552958);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v39 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v38 = (unint64_t)(63 - v4) >> 6;
  v7 = &v45;
  v8 = &v47;
  swift_bridgeObjectRetain(v1);
  v40 = 0;
  v9 = (unint64_t *)&unk_100560F70;
  v10 = NSNumber_ptr;
  v11 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = v40 + 1;
  if (__OFADD__(v40, 1))
    goto LABEL_35;
  if (v20 >= v38)
    goto LABEL_32;
  v21 = *(_QWORD *)(v39 + 8 * v20);
  v22 = v40 + 1;
  if (!v21)
  {
    v22 = v40 + 2;
    if (v40 + 2 >= v38)
      goto LABEL_32;
    v21 = *(_QWORD *)(v39 + 8 * v22);
    if (!v21)
    {
      v22 = v40 + 3;
      if (v40 + 3 >= v38)
        goto LABEL_32;
      v21 = *(_QWORD *)(v39 + 8 * v22);
      if (!v21)
      {
        v22 = v40 + 4;
        if (v40 + 4 >= v38)
          goto LABEL_32;
        v21 = *(_QWORD *)(v39 + 8 * v22);
        if (!v21)
        {
          v23 = v40 + 5;
          if (v40 + 5 < v38)
          {
            v21 = *(_QWORD *)(v39 + 8 * v23);
            if (v21)
            {
              v22 = v40 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v38)
                break;
              v21 = *(_QWORD *)(v39 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10017F43C(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v40 = v22;
  v41 = (v21 - 1) & v21;
  for (i = __clz(__rbit64(v21)) + (v22 << 6); ; i = __clz(__rbit64(v6)) | (v40 << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v25 = v24[1];
    v26 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * i);
    v43 = *v24;
    v44 = v25;
    v42 = v26;
    v27 = sub_100005EC8(0, v9, v10);
    swift_bridgeObjectRetain(v25);
    v28 = v26;
    swift_dynamicCast(v7, &v42, v27, v11, 7);
    v30 = v43;
    v29 = v44;
    sub_10013B9CC(v7, v8);
    sub_10013B9CC(v8, v48);
    sub_10013B9CC(v48, &v46);
    v31 = sub_10002E5D8(v30, v29);
    v32 = v31;
    if ((v33 & 1) != 0)
    {
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v10;
      v16 = v9;
      v17 = (uint64_t *)(v3[6] + 16 * v31);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = v30;
      v17[1] = v29;
      v9 = v16;
      v10 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      v11 = (char *)&type metadata for Any + 8;
      v18 = (_QWORD *)(v3[7] + 32 * v32);
      sub_10003D380(v18);
      sub_10013B9CC(&v46, v18);
      v6 = v41;
      if (!v41)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v31;
    v34 = (uint64_t *)(v3[6] + 16 * v31);
    *v34 = v30;
    v34[1] = v29;
    sub_10013B9CC(&v46, (_OWORD *)(v3[7] + 32 * v31));
    v35 = v3[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_34;
    v3[2] = v37;
    v6 = v41;
    if (!v41)
      goto LABEL_11;
LABEL_10:
    v41 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

id sub_1002156DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  Class v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  Class isa;
  uint64_t v86;
  uint64_t v87;
  Class v88;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD v103[2];
  uint64_t v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  char v108[24];
  char v109[32];

  v2 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v2);
  v96 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ArtworkModel(0);
  v94 = *(_QWORD *)(v4 - 8);
  v95 = v4;
  __chkstk_darwin(v4);
  v93 = (uint64_t *)((char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  v98 = v10;
  __chkstk_darwin(v9);
  v92 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ShowOffer(0);
  v100 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v99 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PodcastContextActionDataType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v90 - v22;
  v24 = sub_10003F544(&qword_10055AAA0);
  __chkstk_darwin(v24);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v26, 1, 1, v14);
    sub_100007A28((uint64_t)v26, &qword_10055AAA0);
    return 0;
  }
  v91 = v12;
  v101 = a1;
  v28 = v27 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v27 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v109, 0, 0);
  sub_10014FDF8(v28, (uint64_t)v26, type metadata accessor for PodcastContextActionDataType);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v26, 0, 1, v14);
  sub_100007A28((uint64_t)v26, &qword_10055AAA0);
  v29 = *(_QWORD *)(v101 + 16);
  if (!v29)
    return 0;
  v30 = v29 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v29 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v108, 0, 0);
  sub_10014FDF8(v30, (uint64_t)v21, type metadata accessor for PodcastContextActionDataType);
  v31 = (uint64_t)v21;
  v32 = (uint64_t)v23;
  sub_10013BE30(v31, (uint64_t)v23, type metadata accessor for PodcastContextActionDataType);
  sub_10014FDF8((uint64_t)v23, (uint64_t)v18, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload(v18, v14) == 1)
  {
    v33 = v91;
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v99, v18, v91);
    v34 = sub_10003F544(&qword_1005654C0);
    inited = swift_initStackObject(v34, &v107);
    *(_OWORD *)(inited + 16) = xmmword_1003CA240;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("name"));
    *(_QWORD *)(inited + 32) = v36;
    *(_QWORD *)(inited + 40) = v37;
    v38 = ShowOffer.title.getter(v36);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v38;
    *(_QWORD *)(inited + 56) = v39;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("artistName"));
    *(_QWORD *)(inited + 88) = v40;
    v41 = ShowOffer.provider.getter();
    *(_QWORD *)(inited + 120) = &type metadata for String;
    if (v42)
      v43 = v41;
    else
      v43 = 0;
    v44 = 0xE000000000000000;
    if (v42)
      v44 = v42;
    *(_QWORD *)(inited + 96) = v43;
    *(_QWORD *)(inited + 104) = v44;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("id"));
    *(_QWORD *)(inited + 128) = v45;
    *(_QWORD *)(inited + 136) = v46;
    *(_QWORD *)&v105 = ShowOffer.adamId.getter(v45);
    v47 = sub_100030584();
    v48 = BinaryInteger.description.getter(&type metadata for UInt64, v47);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v48;
    *(_QWORD *)(inited + 152) = v49;
    v50 = sub_1001386B4(inited);
    ShowOffer.storeUrl.getter(v50);
    v51 = v97;
    v52 = v98;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v8, 1, v97) == 1)
    {
      v53 = sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DC0);
    }
    else
    {
      v60 = v92;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v92, v8, v51);
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("url"));
      v63 = v62;
      v64 = URL.absoluteString.getter(v61);
      v106 = &type metadata for String;
      *(_QWORD *)&v105 = v64;
      *((_QWORD *)&v105 + 1) = v65;
      sub_10013B9CC(&v105, v103);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
      v102 = v50;
      sub_10021BD0C(v103, v61, v63, isUniquelyReferenced_nonNull_native);
      v50 = v102;
      swift_bridgeObjectRelease(v63);
      v67 = swift_bridgeObjectRelease(0x8000000000000000);
      v33 = v91;
      v53 = (*(uint64_t (**)(char *, uint64_t, __n128))(v98 + 8))(v60, v51, v67);
    }
    v69 = v95;
    v68 = (uint64_t)v96;
    v70 = v94;
    ShowOffer.artwork.getter(v53);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69) == 1)
    {
      sub_100007A28(v68, &qword_10055D840);
    }
    else
    {
      v71 = v68;
      v72 = v93;
      sub_10013BE30(v71, (uint64_t)v93, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("artwork"));
      v75 = v74;
      v76 = sub_10003F544(&qword_100553D40);
      v77 = swift_initStackObject(v76, &v104);
      *(_OWORD *)(v77 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v77 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("url"));
      *(_QWORD *)(v77 + 40) = v78;
      v79 = v72[1];
      *(_QWORD *)(v77 + 48) = *v72;
      *(_QWORD *)(v77 + 56) = v79;
      swift_bridgeObjectRetain(v79);
      v80 = sub_100138578(v77);
      v106 = (void *)sub_10003F544(&qword_100553D48);
      *(_QWORD *)&v105 = v80;
      sub_10013B9CC(&v105, v103);
      v81 = swift_isUniquelyReferenced_nonNull_native(v50);
      v102 = v50;
      sub_10021BD0C(v103, v73, v75, v81);
      v50 = v102;
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10003F970((uint64_t)v72, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
    v82 = (void *)objc_opt_self(MTShareUtil);
    sub_100214BDC(v50);
    v84 = v83;
    swift_bridgeObjectRelease(v50);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v84);
    v86 = type metadata accessor for SharePodcastContextAction(0);
    v87 = ShareAction.applicationActivities.getter(v86, &off_1004B65E8);
    sub_100005EC8(0, (unint64_t *)&qword_10055AAA8, UIActivity_ptr);
    v88 = Array._bridgeToObjectiveC()().super.isa;
    v54 = objc_msgSend(v82, "shareViewControllerWithPodcastDetails:applicationActivities:", isa, v88, swift_bridgeObjectRelease(v87).n128_f64[0]);

    (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v33);
  }
  else
  {
    swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
    v54 = (id)sub_1001E2CF0();
    if (v54)
    {
      v55 = (void *)objc_opt_self(MTShareUtil);
      v56 = type metadata accessor for SharePodcastContextAction(0);
      v57 = v54;
      v58 = ShareAction.applicationActivities.getter(v56, &off_1004B65E8);
      sub_100005EC8(0, (unint64_t *)&qword_10055AAA8, UIActivity_ptr);
      v59 = Array._bridgeToObjectiveC()().super.isa;
      v54 = objc_msgSend(v55, "shareViewControllerWithPodcast:applicationActivities:", v57, v59, swift_bridgeObjectRelease(v58).n128_f64[0]);

    }
  }
  sub_10003F970(v32, type metadata accessor for PodcastContextActionDataType);
  return v54;
}

id sub_100215EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  __n128 v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  Class isa;
  id v83;
  _QWORD *v84;
  void *v85;
  Class v86;
  void *v87;
  Class v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  _OWORD v103[2];
  uint64_t v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  char v108[24];
  char v109[32];

  v1 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v1);
  v99 = (char *)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ArtworkModel(0);
  v97 = *(_QWORD *)(v3 - 8);
  v98 = v3;
  __chkstk_darwin(v3);
  v94 = (uint64_t *)((char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v5);
  v95 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for URL(0);
  v100 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v93 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShowOffer(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v101 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PodcastContextActionDataType(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v90 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v90 - v19;
  v21 = sub_10003F544(&qword_10055AAA0);
  __chkstk_darwin(v21);
  v23 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v0 + 16);
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v23, 1, 1, v11);
    sub_100007A28((uint64_t)v23, &qword_10055AAA0);
    return 0;
  }
  v91 = v8;
  v92 = v9;
  v25 = v24 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v24 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v109, 0, 0);
  sub_10014FDF8(v25, (uint64_t)v23, type metadata accessor for PodcastContextActionDataType);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  sub_100007A28((uint64_t)v23, &qword_10055AAA0);
  v26 = *(_QWORD *)(v0 + 16);
  if (!v26)
    return 0;
  v27 = v26 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess(v26 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v108, 0, 0);
  sub_10014FDF8(v27, (uint64_t)v18, type metadata accessor for PodcastContextActionDataType);
  v28 = (uint64_t)v18;
  v29 = (uint64_t)v20;
  sub_10013BE30(v28, (uint64_t)v20, type metadata accessor for PodcastContextActionDataType);
  sub_10014FDF8((uint64_t)v20, (uint64_t)v15, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload(v15, v11) == 1)
  {
    v30 = v91;
    v31 = v101;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v101, v15, v91);
    v32 = sub_10003F544(&qword_1005654C0);
    inited = swift_initStackObject(v32, &v107);
    *(_OWORD *)(inited + 16) = xmmword_1003CA240;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("name"));
    *(_QWORD *)(inited + 32) = v34;
    *(_QWORD *)(inited + 40) = v35;
    v36 = ShowOffer.title.getter(v34);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v36;
    *(_QWORD *)(inited + 56) = v37;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("artistName"));
    *(_QWORD *)(inited + 88) = v38;
    v39 = ShowOffer.provider.getter();
    *(_QWORD *)(inited + 120) = &type metadata for String;
    if (v40)
      v41 = v39;
    else
      v41 = 0;
    v42 = 0xE000000000000000;
    if (v40)
      v42 = v40;
    *(_QWORD *)(inited + 96) = v41;
    *(_QWORD *)(inited + 104) = v42;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("id"));
    *(_QWORD *)(inited + 128) = v43;
    *(_QWORD *)(inited + 136) = v44;
    *(_QWORD *)&v105 = ShowOffer.adamId.getter(v43);
    v45 = sub_100030584();
    v46 = BinaryInteger.description.getter(&type metadata for UInt64, v45);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v46;
    *(_QWORD *)(inited + 152) = v47;
    v48 = sub_1001386B4(inited);
    v49 = (uint64_t)v95;
    ShowOffer.storeUrl.getter(v48);
    v50 = v100;
    v51 = v96;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v49, 1, v96) == 1)
    {
      v52 = sub_100007A28(v49, (uint64_t *)&unk_100553DC0);
    }
    else
    {
      v59 = v93;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v93, v49, v51);
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("url"));
      v62 = v61;
      v63 = URL.absoluteString.getter(v60);
      v106 = &type metadata for String;
      *(_QWORD *)&v105 = v63;
      *((_QWORD *)&v105 + 1) = v64;
      sub_10013B9CC(&v105, v103);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v48);
      v102 = v48;
      sub_10021BD0C(v103, v60, v62, isUniquelyReferenced_nonNull_native);
      v48 = v102;
      swift_bridgeObjectRelease(v62);
      v66 = swift_bridgeObjectRelease(0x8000000000000000);
      v30 = v91;
      v52 = (*(uint64_t (**)(char *, uint64_t, __n128))(v100 + 8))(v59, v51, v66);
    }
    v67 = (uint64_t)v99;
    ShowOffer.artwork.getter(v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v67, 1, v98) == 1)
    {
      sub_100007A28(v67, &qword_10055D840);
    }
    else
    {
      v68 = v94;
      sub_10013BE30(v67, (uint64_t)v94, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("artwork"));
      v71 = v70;
      v72 = sub_10003F544(&qword_100553D40);
      v73 = swift_initStackObject(v72, &v104);
      *(_OWORD *)(v73 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v73 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("url"));
      *(_QWORD *)(v73 + 40) = v74;
      v75 = v68[1];
      *(_QWORD *)(v73 + 48) = *v68;
      *(_QWORD *)(v73 + 56) = v75;
      swift_bridgeObjectRetain(v75);
      v76 = sub_100138578(v73);
      v106 = (void *)sub_10003F544(&qword_100553D48);
      *(_QWORD *)&v105 = v76;
      sub_10013B9CC(&v105, v103);
      v77 = swift_isUniquelyReferenced_nonNull_native(v48);
      v102 = v48;
      v78 = v69;
      v31 = v101;
      sub_10021BD0C(v103, v78, v71, v77);
      v48 = v102;
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_10003F970((uint64_t)v68, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
    v79 = (void *)objc_opt_self(MTShareUtil);
    sub_100214BDC(v48);
    v81 = v80;
    swift_bridgeObjectRelease(v48);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v83 = objc_msgSend(v79, "shareActivityItemsWithPodcastDetails:", isa, swift_bridgeObjectRelease(v81).n128_f64[0]);

    if (v83)
    {
      v84 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v83, (char *)&type metadata for Any + 8);

    }
    else
    {
      v84 = _swiftEmptyArrayStorage;
    }
    v85 = (void *)objc_opt_self(UIActivityItemsConfiguration);
    v86 = Array._bridgeToObjectiveC()().super.isa;
    v53 = objc_msgSend(v85, "mt_configurationWithActivityItems:", v86, swift_bridgeObjectRelease(v84).n128_f64[0]);

    (*(void (**)(char *, uint64_t))(v92 + 8))(v31, v30);
    goto LABEL_27;
  }
  swift_bridgeObjectRelease(*((_QWORD *)v15 + 1));
  v54 = sub_1001E2CF0();
  if (v54)
  {
    v55 = (void *)v54;
    v56 = objc_msgSend((id)objc_opt_self(MTShareUtil), "shareActivityItemsWithPodcast:", v54);
    if (v56)
    {
      v57 = v56;
      v58 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, (char *)&type metadata for Any + 8);

    }
    else
    {
      v58 = _swiftEmptyArrayStorage;
    }
    v87 = (void *)objc_opt_self(UIActivityItemsConfiguration);
    v88 = Array._bridgeToObjectiveC()().super.isa;
    v53 = objc_msgSend(v87, "mt_configurationWithActivityItems:", v88, swift_bridgeObjectRelease(v58).n128_f64[0]);

LABEL_27:
    sub_10003F970(v29, type metadata accessor for PodcastContextActionDataType);
    return v53;
  }
  sub_10003F970((uint64_t)v20, type metadata accessor for PodcastContextActionDataType);
  return 0;
}

void sub_1002166B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];
  Swift::String v18;

  v1 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_1002156DC(v0);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v18._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0x6853206572616853;
  v6._object = (void *)0xAD0000A680E2776FLL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v18);

  v9 = type metadata accessor for SharePodcastContextAction(0);
  ShareAction.prepareShareController(_:customShareTitle:sharingStyle:)(v4, v8._countAndFlagsBits, v8._object, 0, v9, &off_1004B65E8);
  swift_bridgeObjectRelease(v8._object);
  if (v4)
  {
    swift_beginAccess(v0 + 24, v17, 0, 0);
    v10 = *(_QWORD *)(v0 + 24);
    if (v10)
    {
      v11 = *(void (**)(__n128))(*(_QWORD *)v10 + 120);
      v12 = swift_retain();
      v11(v12);
      swift_release(v10);
      v13 = type metadata accessor for PresentationSource(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v13) != 1)
      {
        PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v4, 1, 15, 1, 0, 0);

        (*(void (**)(char *, uint64_t))(v14 + 8))(v3, v13);
        return;
      }
    }
    else
    {
      v15 = type metadata accessor for PresentationSource(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v3, 1, 1, v15);
    }

    sub_100007A28((uint64_t)v3, qword_1005542D8);
  }
}

uint64_t sub_1002168AC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts25SharePodcastContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100216914()
{
  return type metadata accessor for SharePodcastContextAction(0);
}

uint64_t type metadata accessor for SharePodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055A990;
  if (!qword_10055A990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharePodcastContextAction);
  return result;
}

uint64_t sub_100216958(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003CEDB8;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_1002169DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v13;

  v6 = sub_1002156DC(v3);
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x6853206572616853;
  v8._object = (void *)0xAD0000A680E2776FLL;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v13);

  v11 = type metadata accessor for SharePodcastContextAction(0);
  ShareAction.prepareShareController(_:customShareTitle:sharingStyle:)(v6, v10._countAndFlagsBits, v10._object, a1, v11, a3);
  swift_bridgeObjectRelease(v10._object);
  return v6;
}

uint64_t sub_100216AD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A520(v1 + 32, a1);
}

uint64_t sub_100216AEC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x6853206572616853;
  v1._object = (void *)0xAD0000A680E2776FLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_100216B90()
{
  return 0xD000000000000013;
}

uint64_t sub_100216BAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts25SharePodcastContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100216BF0()
{
  return 38;
}

BOOL sub_100216BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];

  v1 = sub_10003F544(&qword_10055AAA0);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(_QWORD *)(v0 + 16);
  if (v4)
  {
    v5 = v4 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess(v4 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type, v10, 0, 0);
    sub_10014FDF8(v5, (uint64_t)v3, type metadata accessor for PodcastContextActionDataType);
    v6 = type metadata accessor for PodcastContextActionDataType(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 0, 1, v6);
  }
  else
  {
    v7 = type metadata accessor for PodcastContextActionDataType(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  }
  sub_100007A28((uint64_t)v3, &qword_10055AAA0);
  return v4 != 0;
}

double sub_100216CFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10002E5D8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10021D48C();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10013B9CC((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_10021A8E0(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_100216DEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1001CD140(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10021DA9C();
      v10 = v15;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for DownloadJob(0);
    sub_10003F970(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, type metadata accessor for DownloadJob);
    sub_10002099C((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v7), a2);
    sub_10021AE50(v7, v10);
    v13 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100216EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1001CD240(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10021E2A8();
      v10 = v19;
    }

    v11 = *(_QWORD *)(v10 + 56);
    v12 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
    v13 = *(_QWORD *)(v12 - 8);
    sub_10013BE30(v11 + *(_QWORD *)(v13 + 72) * v7, a2, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    sub_10021B4E4(v7, v10);
    v14 = *v3;
    *v3 = v10;
    v15 = swift_bridgeObjectRelease(v14);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v13 + 56))(a2, 0, 1, v12, v15);
  }
  else
  {
    v17 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17, v18);
  }
}

double sub_100217014@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10002E5D8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10021E754();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10002099C((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_10021B950(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10021710C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100029DFC(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10021F174();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
  sub_10021BB38(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

void sub_1002171F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_100552958);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_10013B9CC(v24, v38);
      }
      else
      {
        sub_10003D344((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_10013B9CC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002174EC(uint64_t a1, uint64_t a2)
{
  sub_10021992C(a1, a2, &qword_10055AB00);
}

void sub_1002174F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_100552A20);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10013B9CC((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_100048678(v25, (uint64_t)&v39);
      sub_10003D344(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10013B9CC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_10021780C(uint64_t a1, uint64_t a2)
{
  sub_100219338(a1, a2, &qword_100552C18);
}

void sub_100217818(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for MediaRequest.ContentType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_100552B68);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = v2;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100026844((unint64_t *)&unk_1005641B0, (uint64_t (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v10 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_100217BAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  _QWORD v43[9];
  __int128 v44[3];

  v3 = v2;
  v6 = type metadata accessor for DownloadJob(0);
  v41 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_10055AAF8);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v39)
      break;
    v22 = v40;
    v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_36;
      v23 = v40[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_36:
          swift_release(v9);
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v17 >= v39)
              goto LABEL_36;
            v23 = v40[v17];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v17 = v24;
      }
    }
LABEL_23:
    v15 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v41 + 72);
    v26 = *(_QWORD *)(v9 + 48) + v25 * v20;
    if ((v42 & 1) != 0)
    {
      sub_10013BE30(v26, (uint64_t)v8, type metadata accessor for DownloadJob);
      sub_10002099C((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v20), (uint64_t)v44);
    }
    else
    {
      sub_10014FDF8(v26, (uint64_t)v8, type metadata accessor for DownloadJob);
      sub_10000A520(*(_QWORD *)(v9 + 56) + 40 * v20, (uint64_t)v44);
    }
    Hasher.init(_seed:)(v43, *(_QWORD *)(v11 + 40));
    v27 = type metadata accessor for UUID(0);
    v28 = sub_100026844((unint64_t *)&unk_100558620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v27, v28);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_10013BE30((uint64_t)v8, *(_QWORD *)(v11 + 48) + v25 * v18, type metadata accessor for DownloadJob);
    sub_10002099C(v44, *(_QWORD *)(v11 + 56) + 40 * v18);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v38;
  v22 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_100217F78(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD v49[9];

  v3 = v2;
  v6 = type metadata accessor for EpisodePlayState(0);
  v46 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v48 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_10055AAF0);
  v47 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_43;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v45 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = v2;
  v44 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain();
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v44)
      break;
    v22 = v45;
    v23 = v45[v21];
    ++v16;
    if (!v23)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v44)
        goto LABEL_36;
      v23 = v45[v16];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v44)
        {
LABEL_36:
          swift_release(v8);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v45[v24];
        if (!v23)
        {
          while (1)
          {
            v16 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v16 >= v44)
              goto LABEL_36;
            v23 = v45[v16];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v16 = v24;
      }
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = *(_QWORD *)(v8 + 48) + 24 * v20;
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v30 = *(unsigned __int8 *)(v27 + 16);
    v31 = *(_QWORD *)(v46 + 72);
    v32 = v25 + v31 * v20;
    if ((v47 & 1) != 0)
    {
      sub_10013BE30(v32, v48, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    }
    else
    {
      sub_10014FDF8(v32, v48, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
      sub_10003CAD8(v28, v29, v30);
    }
    Hasher.init(_seed:)(v49, *(_QWORD *)(v10 + 40));
    EpisodeStateIdentifier.hash(into:)(v49, v28, v29, v30);
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v10 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v15 + 8 * (v35 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v15 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v15 + 8 * v36);
      }
      while (v40 == -1);
      v17 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v10 + 48) + 24 * v17;
    *(_QWORD *)v18 = v28;
    *(_QWORD *)(v18 + 8) = v29;
    *(_BYTE *)(v18 + 16) = v30;
    sub_10013BE30(v48, *(_QWORD *)(v10 + 56) + v31 * v17, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  swift_release(v8);
  v3 = v43;
  v22 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v8 + 32);
  if (v41 >= 64)
    bzero(v22, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v41;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_43:
  swift_release(v8);
  *v3 = v10;
}

void sub_100218320(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_10055AAB8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
      v34 = v32;
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002185EC(uint64_t a1, uint64_t a2)
{
  sub_100219654(a1, a2, &qword_10055AAB0);
}

void sub_1002185F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];
  _OWORD v41[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_10055AAE0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v17 >= v37)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v38 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v37)
        goto LABEL_37;
      v19 = *(_QWORD *)(v38 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v37)
        {
LABEL_37:
          swift_release(v5);
          if ((v39 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v19 = *(_QWORD *)(v38 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_46;
            if (v13 >= v37)
              goto LABEL_37;
            v19 = *(_QWORD *)(v38 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_24;
          }
        }
        v13 = v20;
      }
    }
LABEL_24:
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_25:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v39 & 1) != 0)
    {
      sub_10013B9CC(v22, v41);
    }
    else
    {
      sub_10003D344((uint64_t)v22, (uint64_t)v41);
      v23 = v21;
    }
    v24 = *(_QWORD *)(v8 + 40);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v27 = v26;
    Hasher.init(_seed:)(v40, v24);
    String.hash(into:)(v40, v25, v27);
    v28 = Hasher._finalize()();
    swift_bridgeObjectRelease(v27);
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v14 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
    sub_10013B9CC(v41, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v18 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v18, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_100218930(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v6 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10003F544(&qword_100552C28);
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v39 = v3;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain();
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v40)
      break;
    v22 = v41;
    v23 = v41[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_36;
      v23 = v41[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_36:
          swift_release(v9);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v41[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v17 >= v40)
              goto LABEL_36;
            v23 = v41[v17];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v17 = v24;
      }
    }
LABEL_23:
    v15 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v20);
    v26 = *(_QWORD *)(v42 + 72);
    v27 = *(_QWORD *)(v9 + 56) + v26 * v20;
    if ((v43 & 1) != 0)
    {
      sub_10013BE30(v27, (uint64_t)v8, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    }
    else
    {
      sub_10014FDF8(v27, (uint64_t)v8, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
      v28 = v25;
    }
    v29 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v11 + 40));
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v18) = v25;
    sub_10013BE30((uint64_t)v8, *(_QWORD *)(v11 + 56) + v26 * v18, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v39;
  v22 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_100218C84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[9];

  v3 = v2;
  v48 = type metadata accessor for EpisodeDownloadState(0);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_10055AAD0);
  v45 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v7, a1, a2);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_41;
  v42 = v2;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v44 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v43 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  v15 = swift_retain();
  v16 = 0;
  v17 = v46;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v21 = v20 | (v16 << 6);
      goto LABEL_24;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v43)
      goto LABEL_36;
    v23 = v44[v22];
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v13 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v7 + 56);
    v26 = v7;
    v27 = *(_QWORD *)(v7 + 48) + 24 * v21;
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v30 = *(unsigned __int8 *)(v27 + 16);
    v31 = *(_QWORD *)(v17 + 72);
    v32 = v25 + v31 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 32))(v47, v32, v48, v15);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v47, v32, v48, v15);
      sub_10003CAD8(v28, v29, v30);
    }
    Hasher.init(_seed:)(v49, *(_QWORD *)(v9 + 40));
    EpisodeStateIdentifier.hash(into:)(v49, v28, v29, v30);
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v9 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v14 + 8 * (v35 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v14 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      v17 = v46;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      v17 = v46;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v14 + 8 * v36);
      }
      while (v40 == -1);
      v18 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v9 + 48) + 24 * v18;
    *(_QWORD *)v19 = v28;
    *(_QWORD *)(v19 + 8) = v29;
    *(_BYTE *)(v19 + 16) = v30;
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v9 + 56) + v31 * v18, v47, v48);
    ++*(_QWORD *)(v9 + 16);
    v7 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v43)
  {
    v23 = v44[v24];
    if (!v23)
    {
      while (1)
      {
        v16 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v16 >= v43)
          goto LABEL_36;
        v23 = v44[v16];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v16 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v7);
  v3 = v42;
  if ((v45 & 1) != 0)
  {
    v41 = 1 << *(_BYTE *)(v7 + 32);
    if (v41 >= 64)
      bzero(v44, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v41;
    *(_QWORD *)(v7 + 16) = 0;
  }
LABEL_41:
  swift_release(v7);
  *v3 = v9;
}

void sub_100219014(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_100552A88);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_25;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_37;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v13 >= v36)
              goto LABEL_37;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v13 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v38 & 1) != 0)
    {
      sub_10002099C(v25, (uint64_t)v40);
    }
    else
    {
      sub_10000A520((uint64_t)v25, (uint64_t)v40);
      swift_bridgeObjectRetain(v23);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v24, v23);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    sub_10002099C(v40, *(_QWORD *)(v8 + 56) + 40 * v14);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_100219338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10003F544(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_100219648(uint64_t a1, uint64_t a2)
{
  sub_100219654(a1, a2, &qword_10055AB08);
}

void sub_100219654(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10003F544(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      v36 = v34;
    }
    v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_100219920(uint64_t a1, uint64_t a2)
{
  sub_10021992C(a1, a2, &qword_100552BF8);
}

void sub_10021992C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10003F544(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

Swift::Int sub_100219C34(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_10055AAC0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v33[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v33[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v32 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v33[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

void sub_100219EF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10003F544(&qword_100552A48);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((v37 & 1) == 0)
    {
      sub_10013BE1C(v32);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    NavigationTab.hash(into:)(v38, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v24 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10021A1F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  _QWORD v44[9];

  v3 = v2;
  v42 = *(_QWORD *)(type metadata accessor for EpisodeMetadata(0) - 8);
  __chkstk_darwin();
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10003F544(&qword_100552A58);
  v43 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_43;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v3;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain();
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v40)
      break;
    v22 = v41;
    v23 = v41[v21];
    ++v16;
    if (!v23)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_36;
      v23 = v41[v16];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_36:
          swift_release(v8);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v41[v24];
        if (!v23)
        {
          while (1)
          {
            v16 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v16 >= v40)
              goto LABEL_36;
            v23 = v41[v16];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v16 = v24;
      }
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v42 + 72);
    v29 = *(_QWORD *)(v8 + 56) + v28 * v20;
    if ((v43 & 1) != 0)
    {
      sub_10013BE30(v29, (uint64_t)v7, type metadata accessor for EpisodeMetadata);
    }
    else
    {
      sub_10014FDF8(v29, (uint64_t)v7, type metadata accessor for EpisodeMetadata);
      swift_bridgeObjectRetain(v26);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v44, v27, v26);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v17 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
    *v18 = v27;
    v18[1] = v26;
    sub_10013BE30((uint64_t)v7, *(_QWORD *)(v10 + 56) + v28 * v17, type metadata accessor for EpisodeMetadata);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release(v8);
  v3 = v39;
  v22 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_43:
  swift_release(v8);
  *v3 = v10;
}

void sub_10021A578(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[9];

  v3 = v2;
  v47 = type metadata accessor for MediaLibraryPid(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10003F544(&qword_100552A78);
  v45 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v42 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v43)
      goto LABEL_36;
    v23 = v44[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 32))(v46, v31, v47, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v46, v31, v47, v16);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v48, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v48, v29, v28);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v10 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v46, v47);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v43)
  {
    v23 = v44[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v43)
          goto LABEL_36;
        v23 = v44[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v42;
  if ((v45 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v8 + 32);
    if (v40 >= 64)
      bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v40;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

unint64_t sub_10021A8E0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10021AAB4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_100048678(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = sub_100048644((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10021AC7C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10021AE50(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v36 = type metadata accessor for DownloadJob(0);
  v4 = *(_QWORD *)(v36 - 8);
  result = __chkstk_darwin(v36);
  v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = a2;
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v11 = (result + 1) & v10;
      v12 = *(_QWORD *)(v4 + 72);
      v13 = v39;
      v37 = v7;
      while (1)
      {
        v16 = v12 * v9;
        v17 = a1;
        v18 = v38;
        sub_10014FDF8(*(_QWORD *)(v13 + 48) + v12 * v9, v38, type metadata accessor for DownloadJob);
        Hasher.init(_seed:)(v40, *(_QWORD *)(v13 + 40));
        v19 = type metadata accessor for UUID(0);
        v20 = sub_100026844((unint64_t *)&unk_100558620, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v40, v19, v20);
        v21 = Hasher._finalize()();
        v22 = v18;
        a1 = v17;
        result = sub_10003F970(v22, type metadata accessor for DownloadJob);
        v23 = v21 & v10;
        if (v17 >= (uint64_t)v11)
        {
          if (v23 < v11)
          {
            v7 = v37;
            v13 = v39;
          }
          else
          {
            v7 = v37;
            v13 = v39;
            if ((uint64_t)a1 >= v23)
              goto LABEL_12;
          }
        }
        else
        {
          v7 = v37;
          v13 = v39;
          if (v23 >= v11 || (uint64_t)a1 >= v23)
          {
LABEL_12:
            v24 = *(_QWORD *)(v13 + 48);
            result = v24 + v12 * a1;
            v25 = v24 + v16;
            if ((uint64_t)(v12 * a1) < v16 || result >= v25 + v12)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v36);
            }
            else if (v12 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
            }
            v26 = *(_QWORD *)(v13 + 56);
            v27 = v26 + 40 * a1;
            v28 = (__int128 *)(v26 + 40 * v9);
            if (a1 != v9 || (a1 = v9, v27 >= (unint64_t)v28 + 40))
            {
              v14 = *v28;
              v15 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v14;
              *(_OWORD *)(v27 + 16) = v15;
              a1 = v9;
            }
          }
        }
        v9 = (v9 + 1) & v10;
        if (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_23;
      }
    }
    v13 = v39;
LABEL_23:
    v29 = (uint64_t *)(v7 + 8 * (a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v7 + 8 * (a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
    v13 = v39;
  }
  *v29 = v30 & v31;
  v32 = *(_QWORD *)(v13 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v34;
    ++*(_DWORD *)(v13 + 36);
  }
  return result;
}

unint64_t sub_10021B138(unint64_t a1, uint64_t a2)
{
  return sub_10021B6C8(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
}

void sub_10021B144(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10021B2F4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;
        Hasher.init(_seed:)(v30, v10);
        v15 = v11;
        String.hash(into:)(v30, v12, v14);
        v16 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v14);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8)
            goto LABEL_5;
        }
        else if (v17 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v9 = v23[1];
            *v22 = *v23;
            v22[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10021B4E4(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13)
            goto LABEL_6;
        }
        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_QWORD *)(v16 + 8 * v3);
        v18 = (_QWORD *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
        v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
        v22 = v21 * v3;
        v23 = v19 + v21 * v3;
        v24 = v21 * v6;
        v25 = v19 + v21 * v6;
        v26 = v25 + v21;
        if (v22 < v24 || v23 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v25, 1, v20);
        }
        else
        {
          v3 = v6;
          if (v22 == v24)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v23);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v29 = *v28;
    v30 = (-1 << v3) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10021B6BC(unint64_t a1, uint64_t a2)
{
  return sub_10021B6C8(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodeDownloadState);
}

unint64_t sub_10021B6C8(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD v44[9];

  v3 = a2;
  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v8 = ~v6;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v9 = (result + 1) & v8;
      v43 = v5;
      do
      {
        v10 = 24 * v7;
        v11 = *(_QWORD *)(v3 + 40);
        v12 = v3;
        v13 = *(_QWORD *)(v3 + 48) + 24 * v7;
        v14 = v9;
        v15 = v8;
        v16 = *(_QWORD *)v13;
        v17 = *(_QWORD *)(v13 + 8);
        v18 = v4;
        v19 = *(unsigned __int8 *)(v13 + 16);
        Hasher.init(_seed:)(v44, v11);
        sub_10003CAD8(v16, v17, v19);
        EpisodeStateIdentifier.hash(into:)(v44, v16, v17, v19);
        v20 = Hasher._finalize()();
        v21 = v17;
        v8 = v15;
        v9 = v14;
        v22 = v19;
        v4 = v18;
        result = sub_10003CA84(v16, v21, v22);
        v23 = v20 & v8;
        if (v18 >= (uint64_t)v14)
        {
          if (v23 < v14)
          {
            v5 = v43;
            v3 = v12;
            goto LABEL_6;
          }
          v5 = v43;
          v3 = v12;
          if (v4 < v23)
            goto LABEL_6;
        }
        else
        {
          v5 = v43;
          v3 = v12;
          if (v23 < v9 && v4 < v23)
            goto LABEL_6;
        }
        v24 = *(_QWORD *)(v3 + 48);
        v25 = v24 + 24 * v4;
        v26 = (__int128 *)(v24 + v10);
        if (24 * v4 < v10 || v25 >= (unint64_t)v26 + 24 || v4 != v7)
        {
          v27 = *v26;
          *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v25 = v27;
        }
        v28 = *(_QWORD *)(v3 + 56);
        v29 = a3(0);
        v30 = *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72);
        v31 = v30 * v4;
        result = v28 + v30 * v4;
        v32 = v30 * v7;
        v33 = v28 + v30 * v7;
        v34 = v33 + v30;
        if (v31 < v32 || result >= v34)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v33, 1, v29);
        }
        else
        {
          v4 = v7;
          if (v31 == v32)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result);
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v8;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    v36 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v37 = *v36;
    v38 = (-1 << v4) - 1;
  }
  else
  {
    v36 = (uint64_t *)(v5 + 8 * (result >> 6));
    v38 = *v36;
    v37 = (-1 << result) - 1;
  }
  *v36 = v38 & v37;
  v39 = *(_QWORD *)(v3 + 16);
  v40 = __OFSUB__(v39, 1);
  v41 = v39 - 1;
  if (v40)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v41;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10021B950(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10021BB38(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10021BD0C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002E5D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10003D380(v19);
        sub_10013B9CC(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10021D48C();
      goto LABEL_7;
    }
    sub_1002171F0(v15, a4 & 1);
    v20 = sub_10002E5D8(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10021CF58(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_10021BE3C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1001CCFC0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10003D380(v17);
        return sub_10013B9CC(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10021D67C();
      goto LABEL_7;
    }
    sub_1002174F8(v13, a3 & 1);
    v19 = sub_1001CCFC0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100048678(a2, (uint64_t)v21);
      return sub_10021CFC0(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10021BF74(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10021CA24(a1, a2, a3, a4, &qword_100552C18);
}

void sub_10021BF80(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for MediaRequest.ContentType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1001CD0D4(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10021D86C();
    goto LABEL_7;
  }
  sub_100217818(v17, a3 & 1);
  v22 = sub_1001CD0D4(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10021D080(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10021C0DC(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1001CD140(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = (_QWORD *)(v19[7] + 40 * v13);
        sub_10003D380(v20);
        return sub_10002099C(a1, (uint64_t)v20);
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_10021DA9C();
      goto LABEL_7;
    }
    sub_100217BAC(v16, a3 & 1);
    v22 = sub_1001CD140(a2);
    if ((v17 & 1) == (v23 & 1))
    {
      v13 = v22;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10014FDF8(a2, (uint64_t)v10, type metadata accessor for DownloadJob);
      return sub_10021D118(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10021C25C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  char v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;

  v6 = (_QWORD **)v5;
  v11 = a4 & 1;
  v12 = (_QWORD *)*v5;
  v14 = sub_1001CD1C8(a2, a3, a4 & 1);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for EpisodePlayState(0);
        return sub_10021F7D4(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_10021DCD8();
      goto LABEL_7;
    }
    sub_100217F78(v17, a5 & 1);
    v24 = sub_1001CD1C8(a2, a3, v11);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10021D1BC(v14, a2, a3, v11, a1, v20);
      return sub_10003CAD8(a2, a3, v11);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EpisodeStateIdentifier);
  __break(1u);
  return result;
}

id sub_10021C3C0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1001CD28C((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = sub_10021DF44();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v15[7] + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v17 = 8 * v9;
    *(_QWORD *)(v15[6] + v17) = a2;
    *(_QWORD *)(v15[7] + v17) = a1;
    v18 = v15[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v15[2] = v20;
      return a2;
    }
    goto LABEL_14;
  }
  sub_100218320((uint64_t)result, a3 & 1);
  result = (id)sub_1001CD28C((uint64_t)a2);
  if ((v13 & 1) == (v16 & 1))
  {
    v9 = (unint64_t)result;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v21 = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_10021C514(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1001CD2D8((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10021EAF4(&qword_10055AAB0);
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_100219654(v12, a3 & 1, &qword_10055AAB0);
  v17 = sub_1001CD2D8((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

_OWORD *sub_10021C684(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1001CCFBC(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_10003D380(v16);
        return sub_10013B9CC(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10021E0E4();
      goto LABEL_7;
    }
    sub_1002185F8(v12, a3 & 1);
    v18 = sub_1001CCFBC(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10021D258(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for OpenURLOptionsKey(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

id sub_10021C7A4(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  unint64_t v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1001CD240((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        v17 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
        return (id)sub_10021F7D4(a1, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v9, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10021E2A8();
      goto LABEL_7;
    }
    sub_100218930(v12, a3 & 1);
    v19 = sub_1001CD240((uint64_t)a2);
    if ((v13 & 1) == (v20 & 1))
    {
      v9 = v19;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10021D2BC(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  v21 = sub_100005EC8(0, &qword_100558618, AVURLAsset_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_10021C8E4(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002E5D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 40 * v12);
        sub_10003D380(v19);
        sub_10002099C(a1, (uint64_t)v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10021E754();
      goto LABEL_7;
    }
    sub_100219014(v15, a4 & 1);
    v20 = sub_10002E5D8(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10021D348(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10021CA18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10021CA24(a1, a2, a3, a4, &qword_100552A80);
}

void sub_10021CA24(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_10002E5D8(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10021E93C(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100219338(v17, a4 & 1, a5);
  v22 = sub_10002E5D8(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10021CB98(char a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v7 = a2 & 1;
  v8 = *v3;
  v10 = sub_1001CD370(a2 & 1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_10021EE44();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = v7;
    *(_BYTE *)(v16[7] + v10) = a1 & 1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_100219C34(result, a3 & 1);
  result = sub_1001CD370(v7);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RemoteNotificationType);
  __break(1u);
  return result;
}

void sub_10021CCC8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1001CD07C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10021EFCC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v16[6] + v20) = a2;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      sub_10013BE1C(a2);
      return;
    }
    goto LABEL_14;
  }
  sub_100219EF8(v13, a3 & 1);
  v18 = sub_1001CD07C(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NavigationTab);
  __break(1u);
}

void sub_10021CE18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002E5D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for EpisodeMetadata(0);
        sub_10021F7D4(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, type metadata accessor for EpisodeMetadata);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10021F334();
      goto LABEL_7;
    }
    sub_10021A1F8(v15, a4 & 1);
    v21 = sub_10002E5D8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10021D3FC(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_10021CF58(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10013B9CC(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_10021CFC0(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10013B9CC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_10021D038(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_10021D080(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for MediaRequest.ContentType(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10021D118(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for DownloadJob(0);
  sub_10013BE30(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for DownloadJob);
  result = sub_10002099C(a3, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10021D1BC(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a6[6] + 24 * a1;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(_BYTE *)(v9 + 16) = a4 & 1;
  v10 = a6[7];
  v11 = type metadata accessor for EpisodePlayState(0);
  result = sub_10013BE30(a5, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
  v13 = a6[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a6[2] = v15;
  return result;
}

_OWORD *sub_10021D258(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10013B9CC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10021D2BC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  result = sub_10013BE30(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_10021D348(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10002099C(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_10021D3B4(unint64_t result, char a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2 & 1;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_10021D3FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for EpisodeMetadata(0);
  result = sub_10013BE30(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, type metadata accessor for EpisodeMetadata);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void sub_10021D48C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10003F544(&qword_100552958);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10003D344(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10013B9CC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_10021D670()
{
  return sub_10021EC9C(&qword_10055AB00);
}

void *sub_10021D67C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10003F544(&qword_100552A20);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_100048678(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10003D344(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10013B9CC(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10021D860()
{
  sub_10021E93C(&qword_100552C18);
}

void sub_10021D86C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for MediaRequest.ContentType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100552B68);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10021DA9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27[2];

  v1 = v0;
  v2 = type metadata accessor for DownloadJob(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055AAF8);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    sub_10014FDF8(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5, type metadata accessor for DownloadJob);
    v20 = 40 * v18;
    sub_10000A520(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    sub_10013BE30((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19, type metadata accessor for DownloadJob);
    result = (void *)sub_10002099C(v27, *(_QWORD *)(v8 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10021DCD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for EpisodePlayState(0);
  v34 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055AAF0);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v32 = v4 + 64;
  v33 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v17 = 24 * v16;
    v18 = *(_QWORD *)(v4 + 48) + 24 * v16;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_BYTE *)(v18 + 16);
    v22 = *(_QWORD *)(v34 + 72) * v16;
    sub_10014FDF8(*(_QWORD *)(v4 + 56) + v22, (uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v23 = v35;
    v24 = *(_QWORD *)(v35 + 48) + v17;
    *(_QWORD *)v24 = v19;
    *(_QWORD *)(v24 + 8) = v20;
    *(_BYTE *)(v24 + 16) = v21;
    sub_10013BE30((uint64_t)v3, *(_QWORD *)(v23 + 56) + v22, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    result = (void *)sub_10003CAD8(v19, v20, v21);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10021DF44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10003F544(&qword_10055AAB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10021E0E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_10003F544(&qword_10055AAE0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_10003D344(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10013B9CC(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10021E2A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100552C28);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (id)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    sub_10014FDF8(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    sub_10013BE30((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (id)swift_release(v5);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10021E4D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = type metadata accessor for EpisodeDownloadState(0);
  v1 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_10055AAD0);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v39 = v4;
  if (!v5)
  {
    result = swift_release(v3);
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v35 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v35, 8 * v8);
    v6 = v39;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v38 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v34 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v10 << 6);
      result = v38;
      goto LABEL_12;
    }
    v27 = v10 + 1;
    result = v38;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v10);
      if (!v28)
        break;
    }
LABEL_25:
    v13 = (v28 - 1) & v28;
    v17 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v19 = 24 * v17;
    v20 = *(_QWORD *)(result + 48) + 24 * v17;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    v24 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(_QWORD *)(result + 56) + v24, v15);
    v25 = v39;
    v26 = *(_QWORD *)(v39 + 48) + v19;
    *(_QWORD *)v26 = v21;
    *(_QWORD *)(v26 + 8) = v22;
    *(_BYTE *)(v26 + 16) = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v25 + 56) + v24, v14, v15);
    sub_10003CAD8(v21, v22, v23);
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = swift_release(v38);
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v10);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10021E754()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_10003F544(&qword_100552A88);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_10000A520(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10002099C(v26, *(_QWORD *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10021E93C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10003F544(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_10021EAE8()
{
  return sub_10021EAF4(&qword_10055AB08);
}

id sub_10021EAF4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10003F544(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10021EC90()
{
  return sub_10021EC9C(&qword_100552BF8);
}

id sub_10021EC9C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10003F544(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10021EE44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_10003F544(&qword_10055AAC0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10021EFCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10003F544(&qword_100552A48);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    sub_10013BE1C(v17);
    swift_bridgeObjectRetain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10021F174()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10003F544(&qword_100552BF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_unknownObjectRetain(v24);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10021F334()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v28 = *(_QWORD *)(type metadata accessor for EpisodeMetadata(0) - 8);
  __chkstk_darwin();
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100552A58);
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_release(v4);
LABEL_28:
    *v1 = v6;
    return;
  }
  v25 = v1;
  v7 = (void *)(v5 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)v7 >= v4 + 64 + 8 * v8)
    memmove(v7, (const void *)(v4 + 64), 8 * v8);
  v26 = v4 + 64;
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_12;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v27)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_25:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    sub_10014FDF8(*(_QWORD *)(v4 + 56) + v20, (uint64_t)v3, type metadata accessor for EpisodeMetadata);
    v21 = (_QWORD *)(*(_QWORD *)(v6 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    sub_10013BE30((uint64_t)v3, *(_QWORD *)(v6 + 56) + v20, type metadata accessor for EpisodeMetadata);
    swift_bridgeObjectRetain(v19);
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_26:
    swift_release(v4);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10021F578()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for MediaLibraryPid(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F544(&qword_100552A78);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10021F7D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

double sub_10021F818(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  Swift::String_optional v4;
  double result;

  if (a1[2])
  {
    v2 = a1[4];
    v1 = (void *)a1[5];
    swift_bridgeObjectRetain(v1);
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  if (qword_100552088 != -1)
    swift_once(&qword_100552088, sub_10025BAF0);
  v3 = (id)qword_100572F28;
  v4.value._countAndFlagsBits = v2;
  v4.value._object = v1;
  MTNotificationSettingsPresentationController.presentModal(highlightedPodcastUuid:)(v4);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

uint64_t _s24PickShowThenGoToSettingsCMa()
{
  return objc_opt_self(_TtCC8Podcasts24MTNotificationTestAction24PickShowThenGoToSettings);
}

uint64_t sub_10021F8C8()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = type metadata accessor for MTTestActionContentPickerPresenter();
  v1 = (_QWORD *)swift_allocObject(v0, 40, 7);
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
  sub_10029B12C(0x6F6853206B636950, 0xAC000000A680E277, 1, 0, (uint64_t)sub_10021F818, 0);
  return swift_release(v1);
}

uint64_t sub_10021F938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + qword_10055ABB0;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10004AE60(v3, a1);
}

uint64_t sub_10021F988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + qword_10055ABB0;
  swift_beginAccess(v3, v5, 33, 0);
  sub_10021FF4C(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_10021F9E0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_10055ABB0, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_10021FA24()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + qword_10055ABB8), "reloadData");
}

unint64_t sub_10021FA3C()
{
  uint64_t v0;
  unint64_t result;

  result = (unint64_t)objc_msgSend(*(id *)(v0 + qword_10055ABB8), "numberOfObjects");
  if ((result & 0x8000000000000000) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10021FA6C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v40[2];

  v12 = sub_10003F544((uint64_t *)&unk_1005598F0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v40 - v16;
  if (a4)
  {
    v18 = a3;
    v19 = a5;
    v20 = a7;
    v21 = a1;
    v22 = swift_unknownObjectRetain(a4);
    _bridgeAnyObjectToAny(_:)(v40, v22);
    swift_unknownObjectRelease(a4);
    if (a5)
    {
LABEL_3:
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a5);

      v27 = type metadata accessor for IndexPath(0, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v17, 0, 1, v27);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    v30 = a3;
    v31 = a5;
    v32 = a7;
    v33 = a1;
    if (a5)
      goto LABEL_3;
  }
  v34 = type metadata accessor for IndexPath(0, v23, v24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v17, 1, 1, v34);
LABEL_6:
  if (a7)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a7);

    v37 = type metadata accessor for IndexPath(0, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v15, 0, 1, v37);
  }
  else
  {
    v38 = type metadata accessor for IndexPath(0, v28, v29);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v15, 1, 1, v38);
  }

  sub_100007A28((uint64_t)v15, (uint64_t *)&unk_1005598F0);
  sub_100007A28((uint64_t)v17, (uint64_t *)&unk_1005598F0);
  return sub_100007A28((uint64_t)v40, (uint64_t *)&unk_100552300);
}

void sub_10021FC3C()
{
  sub_10021FF94();
}

id sub_10021FC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for BaseResultsController(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), a3, a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_10021FCA4(uint64_t a1)
{
  sub_100007A28(a1 + qword_10055ABB0, &qword_10055AEA8);

}

uint64_t sub_10021FCE4@<X0>(uint64_t a1@<X8>)
{
  return sub_10021F938(a1);
}

uint64_t sub_10021FD04(uint64_t a1)
{
  return sub_10021F988(a1);
}

void (*sub_10021FD24(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_10021F9E0((uint64_t)v2);
  return sub_100179DD8;
}

id sub_10021FD6C()
{
  return sub_10021FA24();
}

unint64_t sub_10021FD8C()
{
  return sub_10021FA3C();
}

void sub_10021FDAC()
{
  uint64_t v0;

}

id sub_10021FDBC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChapterResultsController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10021FDF0(uint64_t a1)
{

}

uint64_t sub_10021FE00()
{
  return type metadata accessor for ChapterResultsController(0);
}

void sub_10021FE08(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  id v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(id *)(*v1 + qword_10055ACA0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "objectAtIndexPath:", isa);

  if (v5)
  {
    v6 = type metadata accessor for ChapterInfoAdapter();
    v7 = swift_allocObject(v6, 24, 7);
    *(_QWORD *)(v7 + 16) = v5;
    a1[3] = v6;
    a1[4] = (uint64_t)&off_1004B6730;
    *a1 = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for ChapterInfoAdapter()
{
  return objc_opt_self(_TtC8Podcasts18ChapterInfoAdapter);
}

uint64_t sub_10021FECC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), "title");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_10021FF24()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), "time");
}

id sub_10021FF38()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), "duration");
}

uint64_t sub_10021FF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055AEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10021FF94()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.BaseResultsController", 30, "init()", 6, 0);
  __break(1u);
}

ValueMetadata *type metadata accessor for PodcastsWidgetInfo()
{
  return &type metadata for PodcastsWidgetInfo;
}

void sub_10021FFD0(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002CLL;
  a1[1] = 0x8000000100435AF0;
}

uint64_t *sub_10021FFFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for ShowEntity(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100220084(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShowEntity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1002200B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ShowEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100220114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ShowEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100220170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ShowEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002201CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ShowEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100220228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100220234);
}

uint64_t sub_100220234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShowEntity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100220270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022027C);
}

uint64_t sub_10022027C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShowEntity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FetchShowLatestLocalEpisodesIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_10055AF08;
  if (!qword_10055AF08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchShowLatestLocalEpisodesIntent);
  return result;
}

uint64_t sub_1002202F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ShowEntity(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10022036C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[5];
  uint64_t v33;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100005EC8(0, &qword_10055B020, UIScene_ptr);
    v5 = sub_10022746C();
    v6 = Set.Iterator.init(_cocoa:)(v32, v3, v4, v5);
    v1 = v32[0];
    v29 = v32[1];
    v7 = v32[2];
    v8 = v32[3];
    v9 = v32[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v28 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v16 = __CocoaSet.Iterator.next()(v6);
    if (!v16)
      goto LABEL_45;
    v17 = v16;
    v33 = v16;
    v18 = sub_100005EC8(0, &qword_10055B020, UIScene_ptr);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v30, &v33, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
    v19 = (id)v30;
    swift_unknownObjectRelease(v17);
    v15 = v8;
    v13 = v9;
    if (!v19)
      goto LABEL_45;
LABEL_37:
    v23 = objc_msgSend(v19, "session");
    v24 = objc_msgSend(v23, "userInfo");

    if (!v24)
    {
      v30 = 0u;
      v31 = 0u;
LABEL_12:
      sub_100007A28((uint64_t)&v30, (uint64_t *)&unk_100552300);
      goto LABEL_13;
    }
    v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    if (*(_QWORD *)(v25 + 16) && (v26 = sub_10002E5D8(0xD000000000000018, 0x8000000100435E60), (v27 & 1) != 0))
    {
      sub_10003D344(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&v30);
    }
    else
    {
      v30 = 0u;
      v31 = 0u;
    }
    swift_bridgeObjectRelease(v25);
    if (!*((_QWORD *)&v31 + 1))
      goto LABEL_12;
    if (swift_dynamicCast(&v33, &v30, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)
      && (v33 & 1) != 0)
    {
      goto LABEL_45;
    }
LABEL_13:

    v8 = v15;
    v9 = v13;
  }
  if (v9)
  {
    v13 = (v9 - 1) & v9;
    v14 = __clz(__rbit64(v9)) | (v8 << 6);
    v15 = v8;
LABEL_36:
    v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    if (!v19)
      goto LABEL_45;
    goto LABEL_37;
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v20 >= v28)
      goto LABEL_45;
    v21 = *(_QWORD *)(v29 + 8 * v20);
    v15 = v8 + 1;
    if (!v21)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_45;
      v21 = *(_QWORD *)(v29 + 8 * v15);
      if (!v21)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_45;
        v21 = *(_QWORD *)(v29 + 8 * v15);
        if (!v21)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_45;
          v21 = *(_QWORD *)(v29 + 8 * v15);
          if (!v21)
          {
            v15 = v8 + 5;
            if (v8 + 5 >= v28)
              goto LABEL_45;
            v21 = *(_QWORD *)(v29 + 8 * v15);
            if (!v21)
            {
              v22 = v8 + 6;
              while (v28 != v22)
              {
                v21 = *(_QWORD *)(v29 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_35;
                }
              }
LABEL_45:
              sub_10017F43C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_35:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
    goto LABEL_36;
  }
  __break(1u);
}

id sub_100220744()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v0, "setMinimumFractionDigits:", 0);
  objc_msgSend(v0, "setMaximumFractionDigits:", 2);
  result = objc_msgSend(v0, "setNumberStyle:", 1);
  qword_10055AF40 = (uint64_t)v0;
  return result;
}

void sub_1002207B8()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIMenuSystem), "mainSystem");
  objc_msgSend(v0, "setNeedsRebuild");

}

uint64_t sub_100220804()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t result;
  _OWORD v5[2];
  Swift::String v6;

  sub_100005EC8(0, (unint64_t *)&unk_10055B060, UIKeyCommand_ptr);
  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001004360C0;
  v1._countAndFlagsBits = 0xD000000000000014;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v6);

  memset(v5, 0, sizeof(v5));
  result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v3._countAndFlagsBits, v3._object, 0, "focusSearchField", 102, 0xE100000000000000, 0x100000, v5, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  qword_100572EA0 = result;
  return result;
}

uint64_t sub_100220900()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  Swift::String v7;

  sub_100005EC8(0, (unint64_t *)&unk_10055B060, UIKeyCommand_ptr);
  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._object = (void *)0xED00007364656546;
  v1._object = (void *)0x80000001004360A0;
  v1._countAndFlagsBits = 0xD000000000000011;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0x2068736572666552;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  v4 = static MenuSelectors.refreshCommand.getter();
  memset(v6, 0, sizeof(v6));
  result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v3._countAndFlagsBits, v3._object, 0, v4, 114, 0xE100000000000000, 0x100000, v6, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  qword_100572EA8 = result;
  return result;
}

uint64_t sub_100220A14()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t result;
  _OWORD v5[2];
  Swift::String v6;

  sub_100005EC8(0, (unint64_t *)&unk_10055B060, UIKeyCommand_ptr);
  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000018;
  v6._object = (void *)0x8000000100436080;
  v1._object = (void *)0x8000000100436060;
  v1._countAndFlagsBits = 0xD000000000000011;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v6);

  memset(v5, 0, sizeof(v5));
  result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v3._countAndFlagsBits, v3._object, 0, "addPodcastAction", 110, 0xE100000000000000, 1179648, v5, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  qword_100572EB0 = result;
  return result;
}

uint64_t sub_100220B24()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t result;
  _OWORD v5[2];
  Swift::String v6;

  sub_100005EC8(0, (unint64_t *)&unk_10055B060, UIKeyCommand_ptr);
  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6._object = (void *)0xEB000000006E6F69;
  v1._object = (void *)0x8000000100433D50;
  v1._countAndFlagsBits = 0xD000000000000012;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0x746174532077654ELL;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v6);

  memset(v5, 0, sizeof(v5));
  result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v3._countAndFlagsBits, v3._object, 0, "menuBarNewStation", 110, 0xE100000000000000, 0x100000, v5, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  qword_100572EB8 = result;
  return result;
}

void sub_100220C34(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  id v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Class v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  Class isa;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;

  v3 = v2;
  ObjectType = swift_getObjectType(v2, a2);
  sub_100005EC8(0, &qword_10055B040, UIMenuSystem_ptr);
  v6 = objc_msgSend(a1, "system");
  v7 = objc_msgSend((id)objc_opt_self(UIMenuSystem), "mainSystem");
  v8 = static NSObject.== infix(_:_:)(v6, v7);

  if ((v8 & 1) != 0)
  {
    v9 = swift_allocObject(&unk_1004B68E0, 24, 7);
    *(_QWORD *)(v9 + 16) = ObjectType;
    v10 = swift_allocObject(&unk_1004B6908, 32, 7);
    *(_QWORD *)(v10 + 16) = sub_10022766C;
    *(_QWORD *)(v10 + 24) = v9;
    v27[4] = sub_100029B44;
    v28 = v10;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 1107296256;
    v27[2] = sub_100220F78;
    v27[3] = &unk_1004B6920;
    v11 = _Block_copy(v27);
    v12 = v28;
    swift_retain();
    swift_release(v12);
    objc_msgSend(a1, "replaceChildrenOfMenuForIdentifier:fromChildrenBlock:", UIMenuApplication, v11);
    _Block_release(v11);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v10, "", 87, 484, 55, 1);
    swift_release(v10);
    if ((v11 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v13 = sub_1002249C4();
      v14 = (id)ASKBuildTypeGetCurrent(objc_msgSend(a1, "insertSiblingMenu:afterMenuForIdentifier:", v13, UIMenuView));
      v15 = sub_10003F544(&qword_10055B048);
      v16 = swift_allocObject(v15, 48, 7);
      *(_OWORD *)(v16 + 16) = xmmword_1003CA220;
      v17 = (void *)ASKBuildTypeDebug;
      v18 = (void *)ASKBuildTypeInternal;
      *(_QWORD *)(v16 + 32) = ASKBuildTypeDebug;
      *(_QWORD *)(v16 + 40) = v18;
      type metadata accessor for BuildType(0);
      v19 = v17;
      v20 = v18;
      isa = Array._bridgeToObjectiveC()().super.isa;
      v22 = swift_bridgeObjectRelease(v16);
      LODWORD(v16) = ASKBuildTypeIsAnyOf(v14, isa, v22);

      if ((_DWORD)v16)
        sub_10022611C(a1);
      v24 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter);
      if (v24)
      {
        v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter + 8);
        v26 = swift_getObjectType(v24, v23);
        swift_unknownObjectRetain(v24);
        dispatch thunk of MenuBarPresenter.buildMenuBar(with:)(a1, v26, v25);
        swift_release(v9);

        swift_unknownObjectRelease(v24);
      }
      else
      {
        swift_release(v9);

      }
    }
  }
}

uint64_t sub_100220F28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100224880();
  swift_bridgeObjectRetain(a1);
  sub_100173A54(v2);
  return a1;
}

Class sub_100220F78(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  v4 = sub_100005EC8(0, &qword_1005545A8, UIMenuElement_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  v6 = v3();
  swift_bridgeObjectRelease(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  return isa;
}

uint64_t sub_1002210B0()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter));
}

uint64_t sub_1002210E0(uint64_t a1, uint64_t a2)
{
  sub_100224770(a1, a2);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*sub_100221104(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter);
  *(_OWORD *)a1 = v2;
  swift_unknownObjectRetain(v2);
  return sub_10022114C;
}

uint64_t sub_10022114C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v5 = swift_unknownObjectRetain(v4);
    sub_100224770(v5, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    sub_100224770(v4, v3);
  }
  return swift_unknownObjectRelease(v2);
}

id sub_1002211A0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  NSString v23;
  objc_super v25;
  __int128 v26[3];

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v6 = OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_debugActionsController;
  v7 = objc_allocWithZone((Class)type metadata accessor for DebugActionsController());
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, "init");
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_objectGraph] = a1;
  v9 = sub_10003F544(&qword_1005609B0);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(v26, v9, v9);
  *(_OWORD *)&v8[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_libraryDataProvider] = v26[0];
  v10 = sub_10003F544((uint64_t *)&unk_100562A90);
  BaseObjectGraph.inject<A>(_:)(v26, v10, v10);
  sub_10002099C(v26, (uint64_t)&v8[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController]);
  v11 = sub_10003F544(&qword_10055C4A0);
  BaseObjectGraph.inject<A>(_:)(v26, v11, v11);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_syncController] = *(_QWORD *)&v26[0];
  v12 = type metadata accessor for PlaybackController(0);
  BaseObjectGraph.inject<A>(_:)(v26, v12, v12);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playbackController] = *(_QWORD *)&v26[0];
  if (qword_1005520C0 != -1)
    swift_once(&qword_1005520C0, sub_100004A04);
  v13 = (void *)qword_100573030;
  v14 = &v8[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl];
  *((_QWORD *)v14 + 3) = type metadata accessor for PodcastsPlayerAdapter(0);
  *((_QWORD *)v14 + 4) = &protocol witness table for PodcastsPlayerAdapter;
  *(_QWORD *)v14 = v13;
  v15 = v13;

  v25.receiver = v8;
  v25.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v25, "init");
  v17 = (void *)objc_opt_self(NSNotificationCenter);
  v18 = v16;
  v19 = objc_msgSend(v17, "defaultCenter");
  objc_msgSend(v19, "addObserver:selector:name:object:", v18, "didChangeStoreAccount:", ACDAccountStoreDidChangeNotification, 0);
  v20 = v18;
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "addObserver:selector:name:object:", v20, "mainWindowDidChangeKey:", v21, 0);

  v22 = v20;
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "addObserver:selector:name:object:", v22, "mainWindowDidChangeKey:", v23, 0);

  swift_release(a1);
  return v22;
}

id sub_10022145C(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  id v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v4 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v4, "removeObserver:", v2);

  v6.receiver = v2;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

uint64_t sub_100221608()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _OWORD v37[2];

  v1 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v1);
  v3 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v4);
  v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SearchAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)v37 - v12;
  v14 = type metadata accessor for URL(0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  static ActionMetrics.notInstrumented.getter(v15);
  SearchAction.init(origin:term:url:hintIndex:activatesSearchBar:actionMetrics:)(2, 0, 0xE000000000000000, v6, 0, 1, 0, v3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v16 = *(unsigned __int8 *)(v8 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = swift_allocObject(&unk_1004B6868, v17 + v9, v16 | 7);
  *(_QWORD *)(v18 + 16) = v0;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  v19 = static Link.Presentation.textFollowsTintColor.getter(v0);
  v20 = Link.Presentation.init(rawValue:)(0);
  v21 = Link.Presentation.init(rawValue:)(v20);
  v22 = Link.Presentation.init(rawValue:)(v21 & v19);
  if (v22 != v19)
  {
    v22 = Link.Presentation.init(rawValue:)(v20 | v19);
    v20 = v22;
  }
  static ActionMetrics.notInstrumented.getter(v22);
  v23 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)(0, 0, v20, v3, sub_10022758C, v18);
  v25 = sub_10003F544(&qword_1005612A0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v26 + 56) = v23;
  *(_QWORD *)(v26 + 64) = sub_100026844(&qword_100555628, (uint64_t (*)(uint64_t))&type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v26 + 32) = v24;
  swift_retain();
  v27 = Link.Presentation.init(rawValue:)(0);
  LOBYTE(v23) = v27;
  static ActionMetrics.notInstrumented.getter(v27);
  v28 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 12, v26, 0, 0, 0, 0, (_BYTE)v23, v3);
  memset(v37, 0, sizeof(v37));
  swift_retain();
  v34 = (void *)UIResponder.firstViewInResponderChain.getter(v30, v31, v32, v33);
  v35 = sub_100224468(v29, (uint64_t)v37, v34);
  swift_release(v24);
  swift_release(v29);
  swift_release(v35);

  sub_100007A28((uint64_t)v37, (uint64_t *)&unk_100552300);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return swift_release(v29);
}

uint64_t sub_100221970(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v35 = a2;
  v38 = a1;
  v40 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SearchAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v36 = static OS_dispatch_queue.main.getter(v16);
  static DispatchTime.now()(v36);
  + infix(_:_:)(v13, 0.1);
  v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17 = v13;
  v18 = v9;
  v37(v17, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v6);
  v19 = *(unsigned __int8 *)(v7 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = swift_allocObject(&unk_1004B6890, v20 + v8, v19 | 7);
  v22 = v38;
  *(_QWORD *)(v21 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_100227610;
  v45 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B68A8;
  v23 = _Block_copy(aBlock);
  v24 = v45;
  v25 = v22;
  v26 = swift_release(v24);
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v27 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10003F544((uint64_t *)&unk_10055B200);
  v29 = sub_100026534();
  v31 = v39;
  v30 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v40, v27);
  v32 = (void *)v36;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v5, v31, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v30);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v42);
  return ((uint64_t (*)(char *, uint64_t))v37)(v15, v18);
}

uint64_t sub_100221C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  _OWORD v8[2];

  memset(v8, 0, sizeof(v8));
  v5 = (void *)UIResponder.firstViewInResponderChain.getter(a1, a2, a3, a4);
  v6 = sub_1002245E4(a2, (uint64_t)v8, v5);
  swift_release(v6);

  return sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100552300);
}

void sub_100221DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  char v76;
  char v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char *v82;
  void (*v83)(uint64_t, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v1 = v0;
  v2 = sub_10003F544(&qword_10055B030);
  __chkstk_darwin(v2);
  v105 = (char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  v103 = *(_QWORD *)(v4 - 8);
  v104 = v4;
  v5 = __chkstk_darwin(v4);
  v100 = (uint64_t *)((char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v102 = (uint64_t)&v93 - v7;
  v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v97 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v95 = (char *)&v93 - v15;
  v106 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v106 - 8);
  v17 = __chkstk_darwin(v106);
  v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v101 = (char *)&v93 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v93 - v23;
  v25 = __chkstk_darwin(v22);
  v98 = (char *)&v93 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v93 - v28;
  v30 = static Logger.navigation.getter(v27);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  v33 = os_log_type_enabled(v31, v32);
  v99 = v12;
  v96 = v10;
  if (v33)
  {
    v93 = v19;
    v34 = swift_slowAlloc(12, -1);
    v94 = v11;
    v35 = v1;
    v36 = (uint8_t *)v34;
    v37 = swift_slowAlloc(32, -1);
    v108 = v37;
    *(_DWORD *)v36 = 136315138;
    v107 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v108);
    v38 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v36 + 4, v36 + 12);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s Attempting to navigate to current show page.", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v39 = v36;
    v1 = v35;
    v11 = v94;
    swift_slowDealloc(v39, -1, -1);

    v40 = *(void (**)(char *, uint64_t))(v16 + 8);
    v41 = v38;
    v19 = v93;
    v40(v29, v41);
  }
  else
  {

    v40 = *(void (**)(char *, uint64_t))(v16 + 8);
    v40(v29, v106);
  }
  v42 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v43 = sub_100290A2C();
  v44 = objc_msgSend(v43, "rootViewController");

  if (!v44)
  {
    v54 = static Logger.navigation.getter(v45);
    v48 = Logger.logObject.getter(v54);
    v55 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v108 = v57;
      *(_DWORD *)v56 = 136315138;
      v107 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v56 + 4, v56 + 12);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
LABEL_35:

    goto LABEL_36;
  }
  v46 = static Podcasts.isBlueMoonEnabled()(v45);
  if ((v46 & 1) != 0)
  {
    v47 = dispatch thunk of PlaybackController.nowPlayingItem.getter(v46);
    if (v47)
    {
      v48 = v47;
      v49 = -[NSObject podcast](v47, "podcast");
      if (v49)
      {
        v50 = v49;
        v51 = MPModelObject.uuid.getter(v49);
        v53 = v52;

        if (v53)
        {
          sub_100226564(v51, v53, v1, (uint64_t)v44);
          swift_bridgeObjectRelease(v53);

          return;
        }
      }
      v73 = -[NSObject podcast](v48, "podcast");
      if (v73)
      {
        v74 = v73;
        v75 = MPModelObject.adamID.getter(v73);
        v77 = v76;

        if ((v77 & 1) == 0)
        {
          if (v75 < 0)
          {
            __break(1u);
            return;
          }
          v78 = objc_msgSend((id)objc_opt_self(MTURLResolver), "podcastUrlForStoreId:", v75);
          v79 = v99;
          v80 = (uint64_t)v96;
          if (v78)
          {
            v81 = v78;
            v82 = v97;
            static URL._unconditionallyBridgeFromObjectiveC(_:)(v78);

            v83 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
            v83(v80, v82, v11);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v80, 0, 1, v11);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v80, 1, v11) != 1)
            {
              v84 = (uint64_t)v95;
              v83((uint64_t)v95, (char *)v80, v11);
              sub_100226874(v84, v1, (uint64_t)v44);

              (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v84, v11);
              return;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v96, 1, 1, v11);
          }
          v73 = (id)sub_100007A28(v80, (uint64_t *)&unk_100553DC0);
        }
      }
      v19 = v98;
      v88 = static Logger.navigation.getter(v73);
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.error.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc(12, -1);
        v92 = swift_slowAlloc(32, -1);
        v108 = v92;
        *(_DWORD *)v91 = 136315138;
        v107 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v91 + 4, v91 + 12);
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v91, -1, -1);
      }

      goto LABEL_35;
    }
    v85 = static Logger.navigation.getter(0);
    v64 = Logger.logObject.getter(v85);
    v65 = static os_log_type_t.error.getter(v64);
    if (!os_log_type_enabled(v64, v65))
    {

      v87 = v24;
LABEL_37:
      v40(v87, v106);
      return;
    }
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    v108 = v67;
    v19 = v24;
    *(_DWORD *)v66 = 136315138;
    v107 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v66 + 4, v66 + 12);
    goto LABEL_25;
  }
  v58 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                  + 24);
  v59 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                  + 32);
  sub_10003A834((_QWORD *)(v1 + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl), v58);
  v60 = (uint64_t)v105;
  (*(void (**)(uint64_t, uint64_t))(v59 + 72))(v58, v59);
  v61 = v104;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v60, 1, v104) == 1)
  {
    v62 = sub_100007A28(v60, &qword_10055B030);
    v19 = v101;
    v63 = static Logger.navigation.getter(v62);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    if (!os_log_type_enabled(v64, v65))
    {
LABEL_26:

LABEL_36:
      v87 = v19;
      goto LABEL_37;
    }
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    v108 = v67;
    *(_DWORD *)v66 = 136315138;
    v107 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v66 + 4, v66 + 12);
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v64, v65, v68, v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);
    goto LABEL_26;
  }
  v69 = v102;
  sub_1002274C4(v60, v102);
  v70 = v100;
  sub_100227508(v69, (uint64_t)v100);
  if (swift_getEnumCaseMultiPayload(v70, v61) == 1)
  {
    v71 = v99;
    v72 = (uint64_t)v97;
    (*(void (**)(char *, uint64_t *, uint64_t))(v99 + 32))(v97, v70, v11);
    sub_100226874(v72, v1, (uint64_t)v44);

    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v11);
  }
  else
  {
    v86 = v70[1];
    sub_100226564(*v70, v86, v1, (uint64_t)v44);
    swift_bridgeObjectRelease(v86);

  }
  sub_10022754C(v69);
}

uint64_t sub_10022286C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for FlowPresentationContext(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlowPresentationHints(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlowDestination(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v11 = 0;
  v11[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for FlowDestination.notificationSettings(_:), v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for FlowPresentationContext.presentModalPageSheet(_:), v0);
  FlowPresentationHints.init(context:animate:)(v3, 2);
  UIResponder.nearestFlowController.getter(v16);
  v12 = v17;
  if (v17)
  {
    v13 = v18;
    sub_10003A834(v16, v17);
    dispatch thunk of FlowController.show(destination:hints:referrer:)(v11, v7, 0, 0, v12, v13);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
    return sub_10003D380(v16);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
    return sub_100007A28((uint64_t)v16, &qword_100554570);
  }
}

void sub_100222D44(char *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  char *v9;

  v5 = &a1[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl];
  v6 = *((_QWORD *)v5 + 3);
  v7 = *((_QWORD *)v5 + 4);
  sub_10003A834(v5, v6);
  v8 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v7 + 192);
  v9 = a1;
  v8(a3, 0, 0, v6, v7);

}

void sub_1002230D4()
{
  id v0;

  type metadata accessor for AnalyticsIdentifierManager(0);
  v0 = (id)static AnalyticsIdentifierManager.sharedInstance.getter();
  dispatch thunk of AnalyticsIdentifierManager.resetIdentifiers()();

}

void sub_100223118()
{
  id v0;
  NSURL *v1;
  void *v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  objc_msgSend(v0, "openURL:withCompletionHandler:", v2, 0);

}

id sub_100223250(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_super v14;
  _QWORD v15[3];
  uint64_t v16;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  if (sub_100226BB4() && (static Selector.== infix(_:_:)(a1, "playPause") & 1) != 0
    || _UIAccessibilityFullKeyboardAccessEnabled()
    && (static Selector.== infix(_:_:)(a1, "playPause") & 1) != 0)
  {
    return 0;
  }
  if ((static Selector.== infix(_:_:)(a1, "manageAccount") & 1) != 0)
    return objc_msgSend((id)objc_opt_self(AMSRestrictions), "allowAccountModifications");
  sub_10020C738(a2, (uint64_t)v15);
  v7 = v16;
  if (v16)
  {
    v8 = sub_10003A834(v15, v16);
    v9 = *(_QWORD *)(v7 - 8);
    __chkstk_darwin(v8);
    v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)(v11, v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    sub_10003D380(v15);
  }
  else
  {
    v12 = 0;
  }
  v14.receiver = v2;
  v14.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v14, "canPerformAction:withSender:", a1, v12);
  swift_unknownObjectRelease(v12);
  return v6;
}

id sub_100223460(void *a1)
{
  uint64_t v1;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char **v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  char v14;
  void *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  void *object;
  id v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t inited;
  char *v32;
  id v33;
  double v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  id v81;
  Swift::String v82;
  Swift::String v83;
  void *v84;
  id v85;
  Swift::String v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  id v90;
  unsigned int v91;
  void *v92;
  NSString v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE v99[72];
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;

  v3 = objc_msgSend(a1, "action");
  v4 = (_QWORD *)(v1
                + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl);
  v5 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                 + 24);
  v6 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                 + 32);
  sub_10003A834((_QWORD *)(v1 + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl), v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
  v8 = &selRef_setEpisodeFetchLimit_;
  v9 = &selRef_setEpisodeFetchLimit_;
  if ((static Selector.== infix(_:_:)("menuBarNewStation", v3) & 1) != 0)
    goto LABEL_2;
  if ((static Selector.== infix(_:_:)("showNotificationSettings", v3) & 1) != 0)
  {
    v12 = *(_QWORD *)(v1
                    + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_libraryDataProvider
                    + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v1+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_libraryDataProvider), v11);
    v14 = dispatch thunk of LibraryDataProviderProtocol.hasFollowedShows()(ObjectType, v12);
LABEL_5:
    LOBYTE(v10) = v14;
    goto LABEL_19;
  }
  if ((static Selector.== infix(_:_:)("playPause", v3) & 1) != 0)
  {
    if ((_UIAccessibilityFullKeyboardAccessEnabled() & 1) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
  if ((static Selector.== infix(_:_:)("alternatePlayPause", v3) & 1) != 0)
  {
    if (_UIAccessibilityFullKeyboardAccessEnabled())
    {
LABEL_11:
      v15 = (void *)objc_opt_self(NSBundle);
      v16 = objc_msgSend(v15, "mainBundle");
      v100._object = (void *)0xE400000000000000;
      v17._object = (void *)0x80000001004356B0;
      v17._countAndFlagsBits = 0xD000000000000013;
      v18._countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      v100._countAndFlagsBits = 2036427856;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v100)._object;

      v20 = objc_msgSend(v15, "mainBundle");
      v21._countAndFlagsBits = 0xD000000000000014;
      v101._object = (void *)0xE500000000000000;
      v21._object = (void *)0x8000000100435D60;
      v22._countAndFlagsBits = 0;
      v22._object = (void *)0xE000000000000000;
      v101._countAndFlagsBits = 0x6573756150;
      v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v101)._object;

      v24 = v4[3];
      v25 = v4[4];
      sub_10003A834(v4, v24);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
      v27 = (v26 & 1) == 0;
      if ((v26 & 1) != 0)
        v28 = object;
      else
        v28 = v23;
      if (v27)
        v29 = object;
      else
        v29 = v23;
      v8 = &selRef_setEpisodeFetchLimit_;
      v9 = &selRef_setEpisodeFetchLimit_;
      objc_msgSend(a1, "setAttributes:", (unint64_t)objc_msgSend(a1, "attributes", swift_bridgeObjectRelease(v28).n128_f64[0]) & 0xFFFFFFFFFFFFFFFBLL);
      v10 = (uint64_t)String._bridgeToObjectiveC()();
      objc_msgSend(a1, "setTitle:", v10, swift_bridgeObjectRelease(v29).n128_f64[0]);

      LOBYTE(v10) = 1;
      goto LABEL_19;
    }
LABEL_18:
    objc_msgSend(a1, "setAttributes:", (unint64_t)objc_msgSend(a1, "attributes") | 4);
    LOBYTE(v10) = 1;
    goto LABEL_19;
  }
  if ((static Selector.== infix(_:_:)("nextTrack", v3) & 1) != 0)
  {
    v37 = v4[3];
    v38 = v4[4];
    sub_10003A834(v4, v37);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 104))(v37, v38);
    goto LABEL_5;
  }
  if ((static Selector.== infix(_:_:)("previousTrack", v3) & 1) != 0)
  {
    v39 = v4[3];
    v40 = v4[4];
    sub_10003A834(v4, v39);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 120))(v39, v40);
    goto LABEL_5;
  }
  if ((static Selector.== infix(_:_:)("jumpForwards", v3) & 1) != 0)
  {
    v41 = v4[3];
    v42 = v4[4];
    sub_10003A834(v4, v41);
    (*(void (**)(uint64_t, uint64_t))(v42 + 56))(v41, v42);
    v44 = v43;
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setTitle:", v45, swift_bridgeObjectRelease(v44).n128_f64[0]);

    v46 = v4[3];
    v47 = v4[4];
    sub_10003A834(v4, v46);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 136))(v46, v47);
    goto LABEL_5;
  }
  if ((static Selector.== infix(_:_:)("jumpBackwards", v3) & 1) != 0)
  {
    v48 = v4[3];
    v49 = v4[4];
    sub_10003A834(v4, v48);
    (*(void (**)(uint64_t, uint64_t))(v49 + 64))(v48, v49);
    v51 = v50;
    v52 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setTitle:", v52, swift_bridgeObjectRelease(v51).n128_f64[0]);

    v53 = v4[3];
    v54 = v4[4];
    sub_10003A834(v4, v53);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 152))(v53, v54);
    goto LABEL_5;
  }
  v55 = static Selector.== infix(_:_:)("increaseVolume", v3);
  if ((v55 & 1) != 0 || (v55 = static Selector.== infix(_:_:)("decreaseVolume", v3), (v55 & 1) != 0))
  {
    if ((static Podcasts.isBlueMoonEnabled()(v55) & 1) != 0)
    {
      v14 = dispatch thunk of PlaybackController.isVolumeControlAvailable.getter();
    }
    else
    {
      v56 = v4[3];
      v57 = v4[4];
      sub_10003A834(v4, v56);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 208))(v56, v57);
    }
    goto LABEL_5;
  }
  if ((static Selector.== infix(_:_:)("setThreeQuartersSpeed", v3) & 1) != 0)
  {
    v58 = v4[3];
    v59 = v4[4];
    sub_10003A834(v4, v58);
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 184))(v58, v59);
    v60 = v7 == 0;
    goto LABEL_53;
  }
  if ((static Selector.== infix(_:_:)("setNormalSpeed", v3) & 1) != 0)
  {
    v61 = v4[3];
    v62 = v4[4];
    sub_10003A834(v4, v61);
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 184))(v61, v62);
    v60 = v7 == 1;
    goto LABEL_53;
  }
  if ((static Selector.== infix(_:_:)("setOneAndAQuarterSpeed", v3) & 1) != 0)
  {
    v63 = v4[3];
    v64 = v4[4];
    sub_10003A834(v4, v63);
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 184))(v63, v64);
    v60 = v7 == 2;
    goto LABEL_53;
  }
  if ((static Selector.== infix(_:_:)("setOneAndAHalfSpeed", v3) & 1) != 0)
  {
    v65 = v4[3];
    v66 = v4[4];
    sub_10003A834(v4, v65);
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 184))(v65, v66);
    v60 = v7 == 3;
    goto LABEL_53;
  }
  if ((static Selector.== infix(_:_:)("setOneAndThreeQuartersSpeed", v3) & 1) != 0)
  {
    v67 = v4[3];
    v68 = v4[4];
    sub_10003A834(v4, v67);
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 184))(v67, v68);
    v60 = v7 == 4;
LABEL_53:
    v69 = v60;
    goto LABEL_56;
  }
  if ((static Selector.== infix(_:_:)("setDoubleSpeed", v3) & 1) != 0)
  {
    v71 = v4[3];
    v72 = v4[4];
    sub_10003A834(v4, v71);
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 184))(v71, v72);
    v69 = v7 > 4u;
LABEL_56:
    v70 = "setState:";
LABEL_57:
    objc_msgSend(a1, v70, v69);
    goto LABEL_19;
  }
  if ((static Selector.== infix(_:_:)("viewAccountName", v3) & 1) != 0)
  {
    v73 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
    v74 = objc_msgSend((id)swift_getObjCClassFromMetadata(v73), "sharedInstance");
    v75 = objc_msgSend(v74, "activeFullName");

    if (!v75)
    {
      v79 = 0xE000000000000000;
      goto LABEL_75;
    }
LABEL_65:
    static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
    v79 = v78;

LABEL_75:
    v93 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setTitle:", v93, swift_bridgeObjectRelease(v79).n128_f64[0]);

    v94 = objc_msgSend(a1, "title");
    v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v97 = v96;

    v10 = String.count.getter(v95, v97);
    v98 = (unint64_t)objc_msgSend(a1, "attributes", swift_bridgeObjectRelease(v97).n128_f64[0]);
    v70 = "setAttributes:";
    if (v10)
    {
      objc_msgSend(a1, "setAttributes:", v98 & 0xFFFFFFFFFFFFFFFBLL);
      LOBYTE(v10) = 0;
      goto LABEL_19;
    }
    v69 = v98 | 4;
    goto LABEL_57;
  }
  if ((static Selector.== infix(_:_:)("viewAccountEmail", v3) & 1) != 0)
  {
    v76 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
    v77 = objc_msgSend((id)swift_getObjCClassFromMetadata(v76), "sharedInstance");
    v75 = objc_msgSend(v77, "activeEmail");

    if (!v75)
    {
      v79 = 0xE000000000000000;
      goto LABEL_75;
    }
    goto LABEL_65;
  }
  if ((static Selector.== infix(_:_:)("manageAccount", v3) & 1) == 0)
  {
LABEL_2:
    LOBYTE(v10) = 1;
    goto LABEL_19;
  }
  v80 = (void *)objc_opt_self(NSBundle);
  v81 = objc_msgSend(v80, "mainBundle");
  v102._object = (void *)0xAA0000000000A680;
  v82._countAndFlagsBits = 0x6E49206E676953;
  v82._object = (void *)0xE700000000000000;
  v83._countAndFlagsBits = 0;
  v83._object = (void *)0xE000000000000000;
  v102._countAndFlagsBits = 0xE26E49206E676953;
  v84 = NSLocalizedString(_:tableName:bundle:value:comment:)(v82, (Swift::String_optional)0, (NSBundle)v81, v83, v102)._object;

  v85 = objc_msgSend(v80, "mainBundle");
  v103._object = (void *)0x8000000100435D40;
  v86._countAndFlagsBits = 0x7070412077656956;
  v86._object = (void *)0xED0000444920656CLL;
  v87._countAndFlagsBits = 0;
  v87._object = (void *)0xE000000000000000;
  v103._countAndFlagsBits = 0x1000000000000010;
  v88 = NSLocalizedString(_:tableName:bundle:value:comment:)(v86, (Swift::String_optional)0, (NSBundle)v85, v87, v103)._object;

  v89 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
  v90 = objc_msgSend((id)swift_getObjCClassFromMetadata(v89), "sharedInstance");
  v91 = objc_msgSend(v90, "isUserLoggedIn");

  if (v91)
    v92 = v84;
  else
    v92 = v88;
  if (v91)
    v84 = v88;
  swift_bridgeObjectRelease(v92);
  v10 = (uint64_t)String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setTitle:", v10, swift_bridgeObjectRelease(v84).n128_f64[0]);

  LOBYTE(v10) = 1;
  v8 = &selRef_setEpisodeFetchLimit_;
LABEL_19:
  v30 = sub_10003F544(&qword_10055B008);
  inited = swift_initStackObject(v30, v99);
  *(_OWORD *)(inited + 16) = xmmword_1003CA210;
  *(_QWORD *)(inited + 32) = "nextTrack";
  *(_QWORD *)(inited + 40) = "previousTrack";
  v32 = v8[445];
  *(_QWORD *)(inited + 48) = "jumpForwards";
  *(_QWORD *)(inited + 56) = v32;
  *(_QWORD *)(inited + 64) = v9[440];
  if (sub_100226BB4())
  {
    v33 = objc_msgSend(a1, "action");
    if ((static Selector.== infix(_:_:)(*(_QWORD *)(inited + 32), v33) & 1) != 0
      || (static Selector.== infix(_:_:)(*(_QWORD *)(inited + 40), v33) & 1) != 0
      || (static Selector.== infix(_:_:)(*(_QWORD *)(inited + 48), v33) & 1) != 0
      || (static Selector.== infix(_:_:)(*(_QWORD *)(inited + 56), v33) & 1) != 0
      || (static Selector.== infix(_:_:)(*(_QWORD *)(inited + 64), v33) & 1) != 0)
    {
      swift_setDeallocating(inited);
LABEL_28:
      v35 = (unint64_t)objc_msgSend(a1, "attributes") | 1;
      return objc_msgSend(a1, "setAttributes:", v35);
    }
  }
  *(_QWORD *)&v34 = swift_bridgeObjectRelease(inited).n128_u64[0];
  if ((v10 & 1) == 0)
    goto LABEL_28;
  v35 = (unint64_t)objc_msgSend(a1, "attributes", v34) & 0xFFFFFFFFFFFFFFFELL;
  return objc_msgSend(a1, "setAttributes:", v35);
}

void sub_10022410C(void *a1, uint64_t a2, Class *a3, SEL *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = objc_allocWithZone(*a3);
  v7 = a1;
  v8 = objc_msgSend(v6, "init");
  objc_msgSend(v8, *a4);

}

uint64_t sub_100224174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for FlowPresentationContext(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlowPresentationHints(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlowDestination(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for FlowDestination.debug(_:), v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for FlowPresentationContext.presentModalCard(_:), v0);
  FlowPresentationHints.init(context:animate:)(v3, 2);
  UIResponder.nearestFlowController.getter(v16);
  v12 = v17;
  if (v17)
  {
    v13 = v18;
    sub_10003A834(v16, v17);
    dispatch thunk of FlowController.show(destination:hints:referrer:)(v11, v7, 0, 0, v12, v13);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_10003D380(v16);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_100007A28((uint64_t)v16, &qword_100554570);
  }
}

id sub_100224374()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DebugActionsController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002243AC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_100224468(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __n128 v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  _QWORD v19[5];
  _QWORD v20[5];

  v6 = type metadata accessor for ActionPerformer(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20[3] = type metadata accessor for TabChangeAction(0);
  v20[4] = sub_100026844((unint64_t *)&unk_100560980, (uint64_t (*)(uint64_t))&type metadata accessor for TabChangeAction, (uint64_t)&protocol conformance descriptor for Action);
  v20[0] = a1;
  type metadata accessor for ActionRunnerOptions(0);
  swift_retain();
  v10 = swift_retain();
  v11 = BaseObjectGraph.__allocating_init(_:)(v10);
  sub_10020C738(a2, (uint64_t)v18);
  v12 = a3;
  ActionOrigin.init(sender:view:)(v19, v18, a3);
  v13 = ActionRunnerOptions.withActionOrigin(_:)(v19);
  sub_100007A28((uint64_t)v19, (uint64_t *)&unk_100557CB0);
  swift_release(v11);
  sub_10000A520((uint64_t)v20, (uint64_t)v19);
  v14 = swift_retain();
  v15 = ActionPerformer.init(_:asPartOf:)(v19, v13, v14);
  v16 = ActionPerformer.callAsFunction()(v15);
  swift_release(v13);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  sub_10003D380(v20);
  return v16;
}

uint64_t sub_1002245E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[32];
  _QWORD v21[5];
  _QWORD v22[5];

  v6 = type metadata accessor for ActionPerformer(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for SearchAction(0);
  v22[3] = v10;
  v22[4] = sub_100026844(&qword_10055B038, (uint64_t (*)(uint64_t))&type metadata accessor for SearchAction, (uint64_t)&protocol conformance descriptor for SearchAction);
  v11 = sub_1000242A8(v22);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v11, a1, v10);
  type metadata accessor for ActionRunnerOptions(0);
  v12 = swift_retain();
  v13 = BaseObjectGraph.__allocating_init(_:)(v12);
  sub_10020C738(a2, (uint64_t)v20);
  v14 = a3;
  ActionOrigin.init(sender:view:)(v21, v20, a3);
  v15 = ActionRunnerOptions.withActionOrigin(_:)(v21);
  sub_100007A28((uint64_t)v21, (uint64_t *)&unk_100557CB0);
  swift_release(v13);
  sub_10000A520((uint64_t)v22, (uint64_t)v21);
  v16 = swift_retain();
  v17 = ActionPerformer.init(_:asPartOf:)(v21, v15, v16);
  v18 = ActionPerformer.callAsFunction()(v17);
  swift_release(v15);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  sub_10003D380(v22);
  return v18;
}

void sub_100224770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter);
  if (v6)
  {
    v7 = v5[1];
    ObjectType = swift_getObjectType(v6, a2);
    swift_unknownObjectRetain(v6);
    dispatch thunk of MenuBarPresenter.rebuildMenuBar.setter(UInt64.int64Representation.getter, 0, ObjectType, v7);
    swift_unknownObjectRelease(v6);
    v6 = *v5;
  }
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v6);
  v10 = *v5;
  if (*v5)
  {
    v11 = v5[1];
    v12 = swift_getObjectType(*v5, v9);
    swift_unknownObjectRetain(v10);
    dispatch thunk of MenuBarPresenter.rebuildMenuBar.setter(sub_1002207B8, 0, v12, v11);
    swift_unknownObjectRelease(v10);
  }
  v13 = objc_msgSend((id)objc_opt_self(UIMenuSystem), "mainSystem");
  objc_msgSend(v13, "setNeedsRebuild");

}

uint64_t sub_100224880()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;

  v0 = sub_10003F544((uint64_t *)&unk_100553780);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003CBDC0;
  if (qword_100552050 != -1)
    swift_once(&qword_100552050, sub_100220804);
  v2 = (void *)qword_100572EA0;
  *(_QWORD *)(v1 + 32) = qword_100572EA0;
  v3 = qword_100552058;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100552058, sub_100220900);
  v5 = (void *)qword_100572EA8;
  *(_QWORD *)(v1 + 40) = qword_100572EA8;
  v6 = qword_100552060;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100552060, sub_100220A14);
  v8 = (void *)qword_100572EB0;
  *(_QWORD *)(v1 + 48) = qword_100572EB0;
  v9 = qword_100552068;
  v10 = v8;
  if (v9 != -1)
    v10 = (id)swift_once(&qword_100552068, sub_100220B24);
  v11 = (void *)qword_100572EB8;
  *(_QWORD *)(v1 + 56) = qword_100572EB8;
  specialized Array._endMutation()(v10);
  v12 = v11;
  return v1;
}

Class sub_1002249C4()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  UIMenuElementSize preferredElementSize;
  Swift::String v70;
  objc_class *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  UIMenuElementSize v97;
  Swift::String v98;
  objc_class *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  double v106;
  id v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  id v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  id v125;
  double v126;
  id v127;
  id v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  id v132;
  Swift::String v133;
  Swift::String v134;
  Swift::String v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  id v144;
  id v145;
  double v146;
  id v147;
  id v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  id v152;
  Swift::String v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  id v164;
  id v165;
  double v166;
  id v167;
  id v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  id v172;
  Swift::String v173;
  Swift::String v174;
  Swift::String v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  id v184;
  id v185;
  double v186;
  id v187;
  id v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  id v192;
  Swift::String v193;
  Swift::String v194;
  Swift::String v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  id v204;
  id v205;
  double v206;
  id v207;
  id v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  id v212;
  Swift::String v213;
  Swift::String v214;
  Swift::String v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  id v224;
  Swift::String v225;
  Swift::String v226;
  Swift::String v227;
  uint64_t v228;
  UIMenuElementSize v229;
  id v230;
  id v231;
  id v232;
  id v233;
  objc_class *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  id v238;
  Swift::String v239;
  Swift::String v240;
  Swift::String v241;
  Class isa;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  Swift::OpaquePointer children;
  Swift::OpaquePointer childrenb;
  Swift::OpaquePointer childrenc;
  Swift::OpaquePointer childrena;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  objc_class *v260;
  id v261;
  id v262;
  objc_class *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  char image;
  void *v270;
  id v271;
  void *v272;
  void *v273;
  uint64_t v274;
  id v275;
  void *v276;
  id v277;
  __int128 v278;
  __int128 v279;
  UIMenuElementSize v280;
  UIImage_optional v281;
  UIImage_optional v282;
  UIImage_optional v283;
  UIImage_optional v284;
  Swift::String swift__string;
  Swift::String swift__stringa;
  Swift::String v287;
  Swift::String swift__stringc;
  Swift::String swift__stringd;
  Swift::String swift__stringe;
  Swift::String swift__stringf;
  Swift::String swift__stringg;
  Swift::String swift__stringh;
  Swift::String swift__stringi;
  Swift::String swift__stringj;
  Swift::String swift__stringk;
  Swift::String swift__stringl;
  Swift::String swift__stringm;

  v280 = (UIMenuElementSize)_swiftEmptyArrayStorage;
  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  swift__string._object = (void *)0xE000000000000000;
  v2._countAndFlagsBits = 1954047310;
  v2._object = (void *)0xE400000000000000;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  swift__string._countAndFlagsBits = 0;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, swift__string);

  sub_100005EC8(0, (unint64_t *)&unk_10055B060, UIKeyCommand_ptr);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyInputRightArrow);
  v278 = 0u;
  v279 = 0u;
  v7 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v4._countAndFlagsBits, v4._object, 0, "nextTrack", v5, v6, 0x100000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v8 = objc_msgSend(v0, "mainBundle");
  swift__stringa._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0x73756F6976657250;
  v9._object = (void *)0xE800000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  swift__stringa._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, swift__stringa);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyInputLeftArrow);
  v278 = 0u;
  v279 = 0u;
  v14 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v11._countAndFlagsBits, v11._object, 0, "previousTrack", v12, v13, 0x100000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyInputRightArrow);
  v278 = 0u;
  v279 = 0u;
  v17 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(0, 0xE000000000000000, 0, "jumpForwards", v15, v16, 1179648, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyInputLeftArrow);
  v278 = 0u;
  v279 = 0u;
  v20 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(0, 0xE000000000000000, 0, "jumpBackwards", v18, v19, 1179648, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v272 = (void *)v7;
  v21 = (void *)v7;
  v22 = v17;
  objc_msgSend(v21, "setAllowsAutomaticMirroring:", 0);
  v271 = v14;
  objc_msgSend(v14, "setAllowsAutomaticMirroring:", 0);
  objc_msgSend(v17, "setAllowsAutomaticMirroring:", 0);
  v273 = v20;
  objc_msgSend(v20, "setAllowsAutomaticMirroring:", 0);
  v23 = objc_msgSend(v0, "mainBundle");
  v287._countAndFlagsBits = 0xD000000000000012;
  v287._object = (void *)0x8000000100435FB0;
  v24._countAndFlagsBits = 0x6853206F74206F47;
  v24._object = (void *)0xEA0000000000776FLL;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v287);

  v278 = 0u;
  v279 = 0u;
  v27 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v26._countAndFlagsBits, v26._object, 0, "goToCurrentShow", 108, 0xE100000000000000, 0x100000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  image = static UIMenuIdentifier.play.getter();
  v276 = v0;
  v28 = objc_msgSend(v0, "mainBundle");
  swift__stringc._object = (void *)0xE400000000000000;
  v29._object = (void *)0x80000001004356B0;
  v29._countAndFlagsBits = 0xD000000000000013;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  swift__stringc._countAndFlagsBits = 2036427856;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, swift__stringc);

  v278 = 0u;
  v279 = 0u;
  if (_UIAccessibilityFullKeyboardAccessEnabled())
    v32 = 4;
  else
    v32 = 0;
  swift_bridgeObjectRetain(v31._object);
  v33 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v31._countAndFlagsBits, v31._object, 0, "playPause", 32, 0xE100000000000000, 0, &v278, _swiftEmptyArrayStorage, 0, 0, v32, 0);
  v278 = 0u;
  v279 = 0u;
  if (_UIAccessibilityFullKeyboardAccessEnabled())
    v34 = 0;
  else
    v34 = 4;
  v35 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v31._countAndFlagsBits, v31._object, 0, "alternatePlayPause", 32, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, v34, 0);
  v36 = (id)sub_10003F544((uint64_t *)&unk_100553780);
  v37 = swift_allocObject(v36, 48, 7);
  *(_OWORD *)(v37 + 16) = xmmword_1003CDE60;
  *(_QWORD *)(v37 + 32) = v33;
  *(_QWORD *)(v37 + 40) = v35;
  *(_QWORD *)&v278 = v37;
  specialized Array._endMutation()(v37);
  v38 = v278;
  if ((unint64_t)v278 >> 62)
  {
    if ((uint64_t)v278 < 0)
      v244 = v278;
    else
      v244 = v278 & 0xFFFFFFFFFFFFFF8;
    v245 = sub_100005EC8(0, &qword_1005545A8, UIMenuElement_ptr);
    v40 = _bridgeCocoaArray<A>(_:)(v244, v245);
    swift_bridgeObjectRelease(v38);
    v38 = v40;
  }
  else
  {
    swift_bridgeObjectRetain(v278);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v39);
    sub_100005EC8(0, &qword_1005545A8, UIMenuElement_ptr);
    swift_bridgeObjectRelease(v38);
    v40 = v38;
  }
  *(_QWORD *)&v278 = v38;
  v41 = (void *)v27;
  if ((unint64_t)v38 >> 62)
  {
    if (v38 < 0)
      v246 = v38;
    else
      v246 = v40 & 0xFFFFFFFFFFFFFF8;
    v247 = v272;
    v44 = v14;
    v248 = v14;
    v249 = v22;
    v250 = v273;
    v251 = v41;
    swift_bridgeObjectRetain(v38);
    v42 = _CocoaArrayWrapper.endIndex.getter(v246);
    v50 = v42 + 5;
    if (!__OFADD__(v42, 5))
    {
LABEL_11:
      v271 = v36;
      v51 = sub_1002243AC(v50, 1);
      specialized Array._endMutation()(v51);
      v36 = v272;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v42 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v49 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v42 < v49 >> 1)
        goto LABEL_12;
      goto LABEL_85;
    }
  }
  else
  {
    v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    v43 = v272;
    v44 = v14;
    v45 = v14;
    v46 = v22;
    v47 = v273;
    v48 = v41;
    swift_bridgeObjectRetain(v38);
    v50 = v42 + 5;
    if (!__OFADD__(v42, 5))
      goto LABEL_11;
  }
  __break(1u);
LABEL_85:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v42 + 1, 1);
LABEL_12:
  v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v36);
  specialized Array._endMutation()(v52);
  v53 = v44;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
  v55 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v54 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v55 >= v54 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
  v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v53);
  specialized Array._endMutation()(v56);
  v57 = v22;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
  v59 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v58 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v59 >= v58 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
  v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
  specialized Array._endMutation()(v60);
  v61 = v273;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
  v63 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v62 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v63 >= v62 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
  v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v61);
  specialized Array._endMutation()(v64);
  v65 = v41;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
  v67 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v66 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v67 >= v66 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
  sub_100005EC8(0, &qword_10055B058, UIMenu_ptr);
  v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v65);
  specialized Array._endMutation()(v68);
  preferredElementSize = (uint64_t)v278;
  swift_bridgeObjectRelease(v38);
  v268 = v36;

  v264 = v65;
  v266 = v57;

  v267 = v53;
  v70._countAndFlagsBits = 0;
  v70._object = (void *)0xE000000000000000;
  v281.value.super.isa = 0;
  v281.is_nil = image;
  v71 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v70, (Swift::String_optional)0, v281, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, children).super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
  v73 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v72 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v73 >= v72 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
  v263 = v71;
  v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
  specialized Array._endMutation()(v74);
  v75 = objc_msgSend(v276, "mainBundle");
  v76._countAndFlagsBits = 0x6573616572636E49;
  swift__stringd._object = (void *)0xE000000000000000;
  v76._object = (void *)0xEF656D756C6F5620;
  v77._countAndFlagsBits = 0;
  v77._object = (void *)0xE000000000000000;
  swift__stringd._countAndFlagsBits = 0;
  v78 = NSLocalizedString(_:tableName:bundle:value:comment:)(v76, (Swift::String_optional)0, (NSBundle)v75, v77, swift__stringd);

  v79 = String.init(format:_:)(v78._countAndFlagsBits, v78._object, _swiftEmptyArrayStorage);
  v81 = v80;
  swift_bridgeObjectRelease(v78._object);
  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyInputUpArrow);
  v278 = 0u;
  v279 = 0u;
  v84 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v79, v81, 0, "increaseVolume", v82, v83, 0x100000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v85 = objc_msgSend(v276, "mainBundle");
  swift__stringe._object = (void *)0xE000000000000000;
  v86._countAndFlagsBits = 0x6573616572636544;
  v86._object = (void *)0xEF656D756C6F5620;
  v87._countAndFlagsBits = 0;
  v87._object = (void *)0xE000000000000000;
  swift__stringe._countAndFlagsBits = 0;
  v88 = NSLocalizedString(_:tableName:bundle:value:comment:)(v86, (Swift::String_optional)0, (NSBundle)v85, v87, swift__stringe);

  v89 = String.init(format:_:)(v88._countAndFlagsBits, v88._object, _swiftEmptyArrayStorage);
  v91 = v90;
  swift_bridgeObjectRelease(v88._object);
  v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyInputDownArrow);
  v278 = 0u;
  v279 = 0u;
  v94 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v89, v91, 0, "decreaseVolume", v92, v93, 0x100000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v95 = static UIMenuIdentifier.volume.getter();
  v96 = swift_allocObject(v271, 48, 7);
  *(_OWORD *)(v96 + 16) = xmmword_1003CDE60;
  *(_QWORD *)(v96 + 32) = v84;
  *(_QWORD *)(v96 + 40) = v94;
  *(_QWORD *)&v278 = v96;
  specialized Array._endMutation()(v96);
  v97 = (uint64_t)v278;
  v262 = v84;
  v261 = v94;
  v98._countAndFlagsBits = 0;
  v98._object = (void *)0xE000000000000000;
  v282.value.super.isa = 0;
  v282.is_nil = v95;
  v99 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v98, (Swift::String_optional)0, v282, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v97, childrenb).super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v99);
  v101 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v100 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v101 >= v100 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1, v101 + 1, 1);
  v260 = v99;
  v102 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v101, v99);
  specialized Array._endMutation()(v102);
  if (qword_100552048 != -1)
    swift_once(&qword_100552048, sub_100220744);
  v103 = (void *)qword_10055AF40;
  v104 = objc_allocWithZone((Class)NSNumber);
  v105 = v103;
  LODWORD(v106) = 0.75;
  v107 = objc_msgSend(v104, "initWithFloat:", v106);
  v108 = objc_msgSend(v105, "stringFromNumber:", v107);

  v265 = v61;
  if (v108)
  {
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    v111 = v110;

  }
  else
  {
    v109 = 0;
    v111 = 0;
  }
  v112 = objc_msgSend(v276, "mainBundle");
  swift__stringf._object = (void *)0x8000000100435FF0;
  v113._countAndFlagsBits = 0xD000000000000013;
  v113._object = (void *)0x8000000100435FD0;
  v114._countAndFlagsBits = 0;
  v114._object = (void *)0xE000000000000000;
  swift__stringf._countAndFlagsBits = 0xD00000000000006BLL;
  v115 = NSLocalizedString(_:tableName:bundle:value:comment:)(v113, (Swift::String_optional)0, (NSBundle)v112, v114, swift__stringf);

  v274 = sub_10003F544(&qword_1005559A0);
  v116 = swift_allocObject(v274, 72, 7);
  *(_OWORD *)(v116 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v116 + 56) = &type metadata for String;
  v117 = sub_10003E198();
  *(_QWORD *)(v116 + 64) = v117;
  if (v111)
    v118 = v109;
  else
    v118 = 892808752;
  v119 = 0xE400000000000000;
  if (v111)
    v119 = v111;
  *(_QWORD *)(v116 + 32) = v118;
  *(_QWORD *)(v116 + 40) = v119;
  v120 = static String.localizedStringWithFormat(_:_:)(v115._countAndFlagsBits, v115._object, v116);
  v122 = v121;
  swift_bridgeObjectRelease(v115._object);
  swift_bridgeObjectRelease(v116);
  v278 = 0u;
  v279 = 0u;
  v259 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v120, v122, 0, "setThreeQuartersSpeed", 48, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v123 = (void *)qword_10055AF40;
  v124 = objc_allocWithZone((Class)NSNumber);
  v125 = v123;
  LODWORD(v126) = 1.0;
  v127 = objc_msgSend(v124, "initWithFloat:", v126);
  v128 = objc_msgSend(v125, "stringFromNumber:", v127);

  if (v128)
  {
    v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
    v131 = v130;

  }
  else
  {
    v129 = 0;
    v131 = 0;
  }
  v132 = objc_msgSend(v276, "mainBundle");
  swift__stringg._object = (void *)0x8000000100435FF0;
  v133._countAndFlagsBits = 0xD000000000000013;
  v133._object = (void *)0x8000000100435FD0;
  v134._countAndFlagsBits = 0;
  v134._object = (void *)0xE000000000000000;
  swift__stringg._countAndFlagsBits = 0xD00000000000006BLL;
  v135 = NSLocalizedString(_:tableName:bundle:value:comment:)(v133, (Swift::String_optional)0, (NSBundle)v132, v134, swift__stringg);

  v136 = swift_allocObject(v274, 72, 7);
  v137 = v136;
  *(_OWORD *)(v136 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v136 + 56) = &type metadata for String;
  *(_QWORD *)(v136 + 64) = v117;
  if (v131)
    v138 = v129;
  else
    v138 = 3157553;
  v139 = 0xE300000000000000;
  if (v131)
    v139 = v131;
  *(_QWORD *)(v136 + 32) = v138;
  *(_QWORD *)(v136 + 40) = v139;
  v140 = static String.localizedStringWithFormat(_:_:)(v135._countAndFlagsBits, v135._object, v136);
  v142 = v141;
  swift_bridgeObjectRelease(v135._object);
  swift_bridgeObjectRelease(v137);
  v278 = 0u;
  v279 = 0u;
  v258 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v140, v142, 0, "setNormalSpeed", 49, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v143 = (void *)qword_10055AF40;
  v144 = objc_allocWithZone((Class)NSNumber);
  v145 = v143;
  LODWORD(v146) = 1.25;
  v147 = objc_msgSend(v144, "initWithFloat:", v146);
  v148 = objc_msgSend(v145, "stringFromNumber:", v147);

  if (v148)
  {
    v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
    v151 = v150;

  }
  else
  {
    v149 = 0;
    v151 = 0;
  }
  v152 = objc_msgSend(v276, "mainBundle");
  swift__stringh._object = (void *)0x8000000100435FF0;
  v153._countAndFlagsBits = 0xD000000000000013;
  v153._object = (void *)0x8000000100435FD0;
  v154._countAndFlagsBits = 0;
  v154._object = (void *)0xE000000000000000;
  swift__stringh._countAndFlagsBits = 0xD00000000000006BLL;
  v155 = NSLocalizedString(_:tableName:bundle:value:comment:)(v153, (Swift::String_optional)0, (NSBundle)v152, v154, swift__stringh);

  v156 = swift_allocObject(v274, 72, 7);
  v157 = v156;
  *(_OWORD *)(v156 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v156 + 56) = &type metadata for String;
  *(_QWORD *)(v156 + 64) = v117;
  v158 = 892481073;
  if (v151)
    v158 = v149;
  v159 = 0xE400000000000000;
  if (v151)
    v159 = v151;
  *(_QWORD *)(v156 + 32) = v158;
  *(_QWORD *)(v156 + 40) = v159;
  v160 = static String.localizedStringWithFormat(_:_:)(v155._countAndFlagsBits, v155._object, v156);
  v162 = v161;
  swift_bridgeObjectRelease(v155._object);
  swift_bridgeObjectRelease(v157);
  v278 = 0u;
  v279 = 0u;
  v257 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v160, v162, 0, "setOneAndAQuarterSpeed", 50, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v163 = (void *)qword_10055AF40;
  v164 = objc_allocWithZone((Class)NSNumber);
  v165 = v163;
  LODWORD(v166) = 1.5;
  v167 = objc_msgSend(v164, "initWithFloat:", v166);
  v168 = objc_msgSend(v165, "stringFromNumber:", v167);

  if (v168)
  {
    v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
    v171 = v170;

  }
  else
  {
    v169 = 0;
    v171 = 0;
  }
  v172 = objc_msgSend(v276, "mainBundle");
  swift__stringi._object = (void *)0x8000000100435FF0;
  v173._countAndFlagsBits = 0xD000000000000013;
  v173._object = (void *)0x8000000100435FD0;
  v174._countAndFlagsBits = 0;
  v174._object = (void *)0xE000000000000000;
  swift__stringi._countAndFlagsBits = 0xD00000000000006BLL;
  v175 = NSLocalizedString(_:tableName:bundle:value:comment:)(v173, (Swift::String_optional)0, (NSBundle)v172, v174, swift__stringi);

  v176 = swift_allocObject(v274, 72, 7);
  v177 = v176;
  *(_OWORD *)(v176 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v176 + 56) = &type metadata for String;
  *(_QWORD *)(v176 + 64) = v117;
  v178 = 3485233;
  if (v171)
    v178 = v169;
  v179 = 0xE300000000000000;
  if (v171)
    v179 = v171;
  *(_QWORD *)(v176 + 32) = v178;
  *(_QWORD *)(v176 + 40) = v179;
  v180 = static String.localizedStringWithFormat(_:_:)(v175._countAndFlagsBits, v175._object, v176);
  v182 = v181;
  swift_bridgeObjectRelease(v175._object);
  swift_bridgeObjectRelease(v177);
  v278 = 0u;
  v279 = 0u;
  v256 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v180, v182, 0, "setOneAndAHalfSpeed", 51, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v183 = (void *)qword_10055AF40;
  v184 = objc_allocWithZone((Class)NSNumber);
  v185 = v183;
  LODWORD(v186) = 1.75;
  v187 = objc_msgSend(v184, "initWithFloat:", v186);
  v188 = objc_msgSend(v185, "stringFromNumber:", v187);

  if (v188)
  {
    v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
    v191 = v190;

  }
  else
  {
    v189 = 0;
    v191 = 0;
  }
  v192 = objc_msgSend(v276, "mainBundle");
  swift__stringj._object = (void *)0x8000000100435FF0;
  v193._countAndFlagsBits = 0xD000000000000013;
  v193._object = (void *)0x8000000100435FD0;
  v194._countAndFlagsBits = 0;
  v194._object = (void *)0xE000000000000000;
  swift__stringj._countAndFlagsBits = 0xD00000000000006BLL;
  v195 = NSLocalizedString(_:tableName:bundle:value:comment:)(v193, (Swift::String_optional)0, (NSBundle)v192, v194, swift__stringj);

  v196 = swift_allocObject(v274, 72, 7);
  v197 = v196;
  *(_OWORD *)(v196 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v196 + 56) = &type metadata for String;
  *(_QWORD *)(v196 + 64) = v117;
  if (v191)
    v198 = v189;
  else
    v198 = 892808753;
  v199 = 0xE400000000000000;
  if (v191)
    v199 = v191;
  *(_QWORD *)(v196 + 32) = v198;
  *(_QWORD *)(v196 + 40) = v199;
  v200 = static String.localizedStringWithFormat(_:_:)(v195._countAndFlagsBits, v195._object, v196);
  v202 = v201;
  swift_bridgeObjectRelease(v195._object);
  swift_bridgeObjectRelease(v197);
  v278 = 0u;
  v279 = 0u;
  v270 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v200, v202, 0, "setOneAndThreeQuartersSpeed", 52, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v203 = (void *)qword_10055AF40;
  v204 = objc_allocWithZone((Class)NSNumber);
  v205 = v203;
  LODWORD(v206) = 2.0;
  v207 = objc_msgSend(v204, "initWithFloat:", v206);
  v208 = objc_msgSend(v205, "stringFromNumber:", v207);

  if (v208)
  {
    v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
    v211 = v210;

  }
  else
  {
    v209 = 0;
    v211 = 0;
  }
  v212 = objc_msgSend(v276, "mainBundle");
  swift__stringk._object = (void *)0x8000000100435FF0;
  v213._countAndFlagsBits = 0xD000000000000013;
  v213._object = (void *)0x8000000100435FD0;
  v214._countAndFlagsBits = 0;
  v214._object = (void *)0xE000000000000000;
  swift__stringk._countAndFlagsBits = 0xD00000000000006BLL;
  v215 = NSLocalizedString(_:tableName:bundle:value:comment:)(v213, (Swift::String_optional)0, (NSBundle)v212, v214, swift__stringk);

  v216 = swift_allocObject(v274, 72, 7);
  v217 = v216;
  *(_OWORD *)(v216 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v216 + 56) = &type metadata for String;
  *(_QWORD *)(v216 + 64) = v117;
  if (v211)
    v218 = v209;
  else
    v218 = 3157554;
  v219 = 0xE300000000000000;
  if (v211)
    v219 = v211;
  *(_QWORD *)(v216 + 32) = v218;
  *(_QWORD *)(v216 + 40) = v219;
  v220 = static String.localizedStringWithFormat(_:_:)(v215._countAndFlagsBits, v215._object, v216);
  v222 = v221;
  swift_bridgeObjectRelease(v215._object);
  swift_bridgeObjectRelease(v217);
  v278 = 0u;
  v279 = 0u;
  v223 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v220, v222, 0, "setDoubleSpeed", 53, 0xE100000000000000, 0x80000, &v278, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v224 = objc_msgSend(v276, "mainBundle");
  swift__stringl._object = (void *)0xE000000000000000;
  v225._countAndFlagsBits = 0x6B63616279616C50;
  v225._object = (void *)0xEE00646565705320;
  v226._countAndFlagsBits = 0;
  v226._object = (void *)0xE000000000000000;
  swift__stringl._countAndFlagsBits = 0;
  v227 = NSLocalizedString(_:tableName:bundle:value:comment:)(v225, (Swift::String_optional)0, (NSBundle)v224, v226, swift__stringl);

  LOBYTE(v224) = static UIMenuIdentifier.playbackSpeed.getter();
  v228 = swift_allocObject(v271, 80, 7);
  *(_OWORD *)(v228 + 16) = xmmword_1003CA1F0;
  *(_QWORD *)(v228 + 32) = v259;
  *(_QWORD *)(v228 + 40) = v258;
  *(_QWORD *)(v228 + 48) = v257;
  *(_QWORD *)(v228 + 56) = v256;
  *(_QWORD *)(v228 + 64) = v270;
  *(_QWORD *)(v228 + 72) = v223;
  *(_QWORD *)&v278 = v228;
  specialized Array._endMutation()(v228);
  v229 = (uint64_t)v278;
  v277 = v259;
  v275 = v258;
  v230 = v257;
  v231 = v256;
  v232 = v270;
  v233 = v223;
  v283.value.super.isa = 0;
  v283.is_nil = (char)v224;
  v234 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v227, (Swift::String_optional)0, v283, 0, 0xFFFFFFFFFFFFFFFFLL, v229, childrenc).super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v234);
  v236 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v235 = *(_QWORD *)((v280 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v236 >= v235 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v235 > 1, v236 + 1, 1);
  v237 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v236, v234);
  specialized Array._endMutation()(v237);
  v238 = objc_msgSend(v276, "mainBundle");
  swift__stringm._object = (void *)0xE000000000000000;
  v239._countAndFlagsBits = 0x736C6F72746E6F43;
  v239._object = (void *)0xE800000000000000;
  v240._countAndFlagsBits = 0;
  v240._object = (void *)0xE000000000000000;
  swift__stringm._countAndFlagsBits = 0;
  v241 = NSLocalizedString(_:tableName:bundle:value:comment:)(v239, (Swift::String_optional)0, (NSBundle)v238, v240, swift__stringm);

  v284.is_nil = static UIMenuIdentifier.controls.getter();
  v284.value.super.isa = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v241, (Swift::String_optional)0, v284, 0, 0xFFFFFFFFFFFFFFFFLL, v280, childrena).super.super.isa;

  return isa;
}

void sub_10022611C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  UIMenuElementSize v5;
  uint64_t v6;
  UIMenuElementSize preferredElementSize;
  Swift::String v8;
  Class isa;
  void *v10;
  uint64_t v11;
  UIMenuElementSize v12;
  id v13;
  Swift::String v14;
  Class v15;
  uint64_t v16;
  UIMenuElementSize v17;
  objc_class *v18;
  objc_class *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::OpaquePointer v23;
  Swift::OpaquePointer v24;
  Swift::OpaquePointer v25;
  Class v26;
  __int128 v27;
  __int128 v28;
  UIImage_optional v29;
  UIImage_optional v30;
  UIImage_optional v31;

  v2 = sub_10003F544((uint64_t *)&unk_100553780);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1003CBDC0;
  sub_100005EC8(0, &qword_10055B050, UICommand_ptr);
  v27 = 0u;
  v28 = 0u;
  *(_QWORD *)(v3 + 32) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(0xD000000000000018, 0x8000000100435F10, 0, 0, 0, 0, "sendRandomNotification", &v27, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v27 = 0u;
  v28 = 0u;
  *(_QWORD *)(v3 + 40) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(0xD00000000000001DLL, 0x8000000100435F30, 0, 0, 0, 0, "sendMostRecentNotification", &v27, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v27 = 0u;
  v28 = 0u;
  *(_QWORD *)(v3 + 48) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(0xD000000000000018, 0x8000000100435F50, 0, 0, 0, 0, "sendOldestNoticication", &v27, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v27 = 0u;
  v28 = 0u;
  v4 = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(0xD000000000000017, 0x8000000100435F70, 0, 0, 0, 0, "clearAll", &v27, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)&v27 = v3;
  specialized Array._endMutation()(v4);
  v5 = (uint64_t)v27;
  if ((unint64_t)v27 >> 62)
  {
    if ((uint64_t)v27 < 0)
      v21 = v27;
    else
      v21 = v27 & 0xFFFFFFFFFFFFFF8;
    v22 = sub_100005EC8(0, &qword_1005545A8, UIMenuElement_ptr);
    swift_bridgeObjectRetain(v5);
    preferredElementSize = _bridgeCocoaArray<A>(_:)(v21, v22);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    swift_bridgeObjectRetain(v27);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v6);
    sub_100005EC8(0, &qword_1005545A8, UIMenuElement_ptr);
    preferredElementSize = v5;
  }
  swift_bridgeObjectRelease(v5);
  sub_100005EC8(0, &qword_10055B058, UIMenu_ptr);
  v8._countAndFlagsBits = 0x6163696669746F4ELL;
  v8._object = (void *)0xED0000736E6F6974;
  v29.value.super.isa = 0;
  v29.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v29, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v23).super.super.isa;
  v27 = 0u;
  v28 = 0u;
  v10 = (void *)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(0xD000000000000013, 0x8000000100435F90, 0, 0, 0, 0, "showiOSDebugMenu", &v27, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  v11 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1003CA250;
  *(_QWORD *)(v11 + 32) = v10;
  *(_QWORD *)&v27 = v11;
  specialized Array._endMutation()(v11);
  v12 = (uint64_t)v27;
  v13 = v10;
  v14._countAndFlagsBits = 0x7562654420534F69;
  v14._object = (void *)0xEE00756E654D2067;
  v30.value.super.isa = 0;
  v30.is_nil = 0;
  v15 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, (Swift::String_optional)0, v30, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v12, v24).super.super.isa;
  v16 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003CDE60;
  *(_QWORD *)(v16 + 32) = isa;
  *(_QWORD *)(v16 + 40) = v15;
  *(_QWORD *)&v27 = v16;
  specialized Array._endMutation()(v16);
  v17 = (uint64_t)v27;
  v18 = isa;
  v19 = v15;
  v20._countAndFlagsBits = 0x6775626544;
  v20._object = (void *)0xE500000000000000;
  v31.value.super.isa = 0;
  v31.is_nil = 0;
  v26 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v20, (Swift::String_optional)0, v31, 0, 0xFFFFFFFFFFFFFFFFLL, v17, v25).super.super.isa;
  objc_msgSend(a1, "insertSiblingMenu:afterMenuForIdentifier:", v26, UIMenuHelp);

}

uint64_t sub_100226564(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a1;
  v7 = type metadata accessor for PreviewingPresentationHint(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v31 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.navigation.getter(v12);
  v15 = swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(32, -1);
    v29 = v8;
    v19 = v18;
    v20 = swift_slowAlloc(64, -1);
    v27 = v11;
    v21 = v20;
    v34 = v20;
    *(_DWORD *)v19 = 136315651;
    v28 = a3;
    v33 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v34);
    v30 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2160;
    v33 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 14, v19 + 22);
    *(_WORD *)(v19 + 22) = 2081;
    swift_bridgeObjectRetain(a2);
    v33 = sub_10003D274(v32, a2, &v34);
    a4 = v30;
    a3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s Navigating to current show page for uuid=%{private,mask.hash}s.", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v19;
    v8 = v29;
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v27);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v11);
  }
  v23 = *(_QWORD *)(a3
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController
                  + 24);
  v24 = *(_QWORD *)(a3
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController
                  + 32);
  sub_10003A834((_QWORD *)(a3+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController), v23);
  v25 = *(_QWORD *)(a3
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_objectGraph);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for PreviewingPresentationHint.inferTab(_:), v7);
  dispatch thunk of EpisodeControllerProtocol.presentShowPage(asPartOf:for:from:presentationHint:suppressMetrics:)(v25, v32, a2, a4, v10, 0, v23, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100226874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a3;
  v5 = type metadata accessor for PreviewingPresentationHint(0);
  v42 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.navigation.getter(v12);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v41 = a1;
  v16 = v15(v10, a1, v7);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(32, -1);
    v36 = a2;
    v20 = v19;
    v35 = swift_slowAlloc(64, -1);
    v45 = v35;
    *(_DWORD *)v20 = 136315651;
    v44 = sub_10003D274(0xD00000000000001ALL, 0x8000000100435EB0, &v45);
    v37 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2160;
    v44 = 1752392040;
    v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    v22 = URL.absoluteString.getter(v21);
    v24 = v23;
    v44 = sub_10003D274(v22, v23, &v45);
    v5 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v20 + 24, v20 + 32);
    v25 = swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s Navigating to current show page at url=%{private,mask.hash}s.", (uint8_t *)v20, 0x20u);
    v26 = v35;
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a2 = v36;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
  v28 = *(_QWORD *)(a2
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController
                  + 24);
  v29 = *(_QWORD *)(a2
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController
                  + 32);
  sub_10003A834((_QWORD *)(a2+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController), v28);
  v30 = *(_QWORD *)(a2
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_objectGraph);
  v31 = v42;
  v32 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v40, enum case for PreviewingPresentationHint.inferTab(_:), v5);
  dispatch thunk of EpisodeControllerProtocol.presentStorePage(asPartOf:for:from:presentationHint:suppressMetrics:)(v30, v41, v43, v32, 0, v28, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v32, v5);
}

BOOL sub_100226BB4()
{
  id v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1 = objc_msgSend(v0, "delegate");

  if (!v1)
    return 0;
  if ((objc_msgSend(v1, "respondsToSelector:", "window") & 1) == 0)
  {
    swift_unknownObjectRelease(v1);
    return 0;
  }
  v2 = objc_msgSend(v1, "window");
  swift_unknownObjectRelease(v1);
  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, "firstResponder");

  if (!v3)
    return 0;
  v4 = sub_100005EC8(0, &qword_10055B010, UITextView_ptr);
  if (objc_msgSend(v3, "isKindOfClass:", swift_getObjCClassFromMetadata(v4)))
  {

    return 1;
  }
  v6 = sub_100005EC8(0, &qword_10055B018, UITextField_ptr);
  v7 = objc_msgSend(v3, "isKindOfClass:", swift_getObjCClassFromMetadata(v6));

  return (v7 & 1) != 0;
}

unint64_t sub_10022746C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B028;
  if (!qword_10055B028)
  {
    v1 = sub_100005EC8(255, &qword_10055B020, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10055B028);
  }
  return result;
}

uint64_t sub_1002274C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100227508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022754C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022758C()
{
  return sub_10022761C((uint64_t (*)(_QWORD, uint64_t))sub_100221970);
}

uint64_t sub_10022759C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SearchAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100227610()
{
  return sub_10022761C((uint64_t (*)(_QWORD, uint64_t))sub_100221C80);
}

uint64_t sub_10022761C(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchAction(0) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_10022765C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10022766C(uint64_t a1)
{
  return sub_100220F28(a1);
}

uint64_t sub_100227674()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100227694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = (char *)&loc_100227768
     + *((int *)qword_100227CA8
       + *(unsigned __int8 *)sub_10003A834((_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24)));
  __asm { BR              X10 }
}

uint64_t sub_100227778()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t result;
  void *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  void *v16;
  Swift::Bool v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *(_QWORD *)(v9 - 120) = 0x800000010042DE50;
  *(_QWORD *)(v9 - 112) = 0xD00000000000002DLL;
  v10 = URL.isHLSPlaylist()();
  if (!v10)
  {
    static Logger.downloads.getter(v10);
    v35 = v5;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v9 - 88) = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = sub_100227CB8();
      v42 = v41;
      *(_QWORD *)(v9 - 96) = sub_10003D274(v40, v41, (uint64_t *)(v9 - 88));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v38 + 4, v38 + 12);

      swift_bridgeObjectRelease(v42);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 144) + 8))(v7, *(_QWORD *)(v9 - 136));
    goto LABEL_15;
  }
  if ((v2 & 1) != 0)
  {
    static Logger.downloads.getter(v10);
    v43 = v5;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v9 - 88) = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = sub_100227CB8();
      v50 = v49;
      *(_QWORD *)(v9 - 96) = sub_10003D274(v48, v49, (uint64_t *)(v9 - 88));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v46 + 4, v46 + 12);

      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s Attempting to download HLS content without an AdamID.", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

    }
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 144) + 8))(v8, *(_QWORD *)(v9 - 136));
LABEL_15:
    v51 = *(_QWORD *)(v9 - 128);
    v52 = *(_QWORD *)(v9 - 120);
    v53 = *(_QWORD *)(v9 - 112);
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(v51 + 32) = 0;
    *(_OWORD *)v51 = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    goto LABEL_18;
  }
  result = (uint64_t)sub_100227D2C(v1, *(_QWORD *)(v9 - 112), *(void **)(v9 - 120), 1, v3 & 1, v6, v4);
  if (result)
  {
    v12 = (void *)result;
    v13 = *(os_unfair_lock_s **)&v5[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyAdamIDMap];
    v14 = v13 + 4;
    v15 = v13 + 6;
    os_unfair_lock_lock(v13 + 6);
    sub_1002281C0(v14, v12, *(_QWORD *)(v9 - 152));
    os_unfair_lock_unlock(v15);
    type metadata accessor for FairPlayRolloutController(0);
    v16 = (void *)static FairPlayRolloutController.shared.getter();
    v17 = FairPlayRolloutController.isEnabled()();

    v18 = 0;
    v19 = 0;
    if (!v17)
    {
      v20 = objc_msgSend(v12, "URLAsset");
      v21 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
      v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(v21), "sharedInstance");
      v23 = objc_msgSend(v22, "activeAccount");

      v24 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_urlProtocolDelegate];
      v25 = objc_allocWithZone((Class)IMAVSecureKeyLoader);
      v26 = v20;
      v27 = objc_msgSend(v25, "initWithRecipient:useCase:account:urlProtocolDelegate:", v26, 1, v23, v24);

      v28 = objc_msgSend(objc_allocWithZone((Class)((uint64_t (*)(_QWORD))type metadata accessor for MediaItemMetadataLoader)(0)), "init");
      v29 = *(os_unfair_lock_s **)&v5[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyLoaderMap];
      v30 = (uint64_t)&v29[4];
      v31 = v29 + 6;
      os_unfair_lock_lock(v29 + 6);
      sub_100228720(v30, v12, v27);
      os_unfair_lock_unlock(v31);
      v19 = (_QWORD *)swift_allocObject(&unk_1004B69F0, 56, 7);
      v19[2] = v28;
      v19[3] = v26;
      v32 = *(_QWORD *)(v9 - 152);
      v19[4] = v5;
      v19[5] = v32;
      v19[6] = v27;
      v33 = v5;
      v18 = sub_10022B244;
    }
    result = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
    v34 = *(_QWORD **)(v9 - 128);
    v34[3] = result;
    v34[4] = &off_1004B3EA8;
    *v34 = v12;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v54 = *(_QWORD *)(v9 - 128);
    *(_QWORD *)(v54 + 32) = 0;
    *(_OWORD *)v54 = 0u;
    *(_OWORD *)(v54 + 16) = 0u;
  }
  v52 = *(_QWORD *)(v9 - 120);
  v53 = *(_QWORD *)(v9 - 112);
LABEL_18:
  *(_QWORD *)v0 = v18;
  *(_QWORD *)(v0 + 8) = v19;
  *(_QWORD *)(v0 + 16) = v53;
  *(_QWORD *)(v0 + 24) = v52;
  *(_BYTE *)(v0 + 32) = 1;
  return result;
}

unint64_t sub_100227CB8()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___logPrefix);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___logPrefix + 8);
  if (v2)
  {
    v3 = *v1;
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    *v1 = 0xD00000000000001BLL;
    v1[1] = 0x80000001004362C0;
    swift_bridgeObjectRelease(0);
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

id sub_100227D2C(uint64_t a1, uint64_t a2, void *a3, int a4, Swift::Bool a5, int64_t a6, char a7)
{
  char *v7;
  char *v8;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSURL *v23;
  void *v24;
  void *v25;
  Class isa;
  id v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  void *v30;
  NSString v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  Swift::String v39;
  void *object;
  Swift::String v41;
  Swift::String v42;
  void *v43;
  unint64_t v44;
  NSString v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  Swift::String v60;
  void *v61;
  unint64_t v62;
  char v63[64];

  v8 = v7;
  v57 = a4;
  v58 = a2;
  v13 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10003F544((uint64_t *)&unk_10055B1F0);
  inited = swift_initStackObject(v16, v63);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVURLAssetAllowsCellularAccessKey);
  *(_QWORD *)(inited + 40) = v18;
  sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(a5);
  v19 = sub_100138F54(inited);
  sub_100215360(v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  v22 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v23);
  v25 = v24;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v22, "initWithURL:options:", v25, isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

  v28 = *(os_unfair_lock_s **)&v8[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_sessionLock];
  v59 = v8;
  v29 = v28 + 4;
  os_unfair_lock_lock(v28 + 4);
  sub_100038118(&v61);
  v30 = v61;
  os_unfair_lock_unlock(v29);
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "assetDownloadTaskWithURLAsset:assetTitle:assetArtworkData:options:", v27, v31, 0, 0);

  if (v32)
  {
    if ((a7 & 1) != 0)
      v34 = NSURLSessionTransferSizeUnknown;
    else
      v34 = a6;
    v35 = v32;
    objc_msgSend(v35, "setCountOfBytesClientExpectsToReceive:", v34);
    v61 = 0;
    v62 = 0xE000000000000000;
    if ((v57 & 1) != 0)
      v36 = 1936484398;
    else
      v36 = 0x7261646E6174732ELL;
    if ((v57 & 1) != 0)
      v37 = (void *)0xE400000000000000;
    else
      v37 = (void *)0xE900000000000064;
    v60._countAndFlagsBits = v58;
    v60._object = a3;
    v38 = v35;
    swift_bridgeObjectRetain(a3);
    v39._countAndFlagsBits = v36;
    v39._object = v37;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(v37);
    object = v60._object;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(object);
    v41._countAndFlagsBits = 46;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    v60._countAndFlagsBits = (uint64_t)objc_msgSend(v38, "taskIdentifier");
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v43 = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v43);
    v44 = v62;
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "setTaskDescription:", v45, swift_bridgeObjectRelease(v44).n128_f64[0]);

  }
  else
  {
    static Logger.downloads.getter(v33);
    v46 = v8;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v61 = (void *)v50;
      *(_DWORD *)v49 = 136315138;
      v51 = sub_100227CB8();
      v53 = v52;
      v60._countAndFlagsBits = sub_10003D274(v51, v52, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v60._object, v49 + 4, v49 + 12);

      swift_bridgeObjectRelease(v53);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v56);
    return 0;
  }
  return v32;
}

double sub_1002281C0(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  double result;
  uint64_t v9;

  v5 = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v9 = *a1;
  *a1 = 0x8000000000000000;
  sub_10021C3C0(a3, v5, isUniquelyReferenced_nonNull_native);
  v7 = *a1;
  *a1 = v9;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

void sub_100228244()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.downloads.getter(v3);
  v6 = v0;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v20 = v2;
    v21 = v1;
    v9 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v24 = v19;
    *(_DWORD *)v9 = 136315394;
    v10 = sub_100227CB8();
    v12 = v11;
    v22 = sub_10003D274(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v9 + 12) = 2082;
    v13 = (char *)&loc_1002283A8
        + 4
        * byte_1003CF0E0[*(unsigned __int8 *)sub_10003A834(&v6[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config+ 24])];
    __asm { BR              X10 }
  }

  v14 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  __chkstk_darwin(v14);
  *(&v18 - 2) = (uint64_t)v6;
  v16 = v15 + 4;
  os_unfair_lock_lock(v15 + 4);
  sub_100038118(&v22);
  v17 = (void *)v22;
  os_unfair_lock_unlock(v16);
  objc_msgSend(v17, "invalidateAndCancel");

}

double sub_1002286BC@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_100227694();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_100228708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000398D4(a1, a2, a3, a4, &OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler, sub_10002CA30);
}

void sub_100228720(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a2;
  sub_10022ACC8((uint64_t)v4, v5);

}

uint64_t sub_10022877C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  _QWORD *v13;
  id v14;
  id v15;

  v13 = (_QWORD *)swift_allocObject(&unk_1004B6A18, 56, 7);
  v13[2] = a5;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a6;
  v13[6] = a7;
  v14 = a5;
  swift_retain();
  v15 = a7;
  dispatch thunk of MediaItemMetadataLoader.keyIdentifiers(from:completion:)(a4, sub_10022B288, v13);
  return swift_release(v13);
}

void sub_100228818(_QWORD *a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  id v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  uint64_t aBlock[5];
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;

  v74 = a5;
  v76 = a3;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v68 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v68 - v19;
  v75 = v18;
  if (a1 && (v21 = a1[2]) != 0)
  {
    v22 = a1[5];
    v70 = a1[4];
    v71 = v22;
    v72 = a6;
    swift_bridgeObjectRetain(v22);
    if (v21 != 1)
    {
      static Logger.downloads.getter(v23);
      v24 = a2;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v73 = swift_slowAlloc(32, -1);
        aBlock[0] = v73;
        v69 = v11;
        *(_DWORD *)v27 = 136315138;
        v68 = v27 + 4;
        v28 = sub_100227CB8();
        v30 = v29;
        v79 = sub_10003D274(v28, v29, aBlock);
        v11 = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v68, v27 + 12);

        swift_bridgeObjectRelease(v30);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s Unexpected number of keyUris found in asset metadata. Continuing with first keyUri", v27, 0xCu);
        v31 = v73;
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        v32 = v27;
        v10 = v75;
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

      }
      v23 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
    static Logger.downloads.getter(v23);
    v45 = a2;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(32, -1);
      v73 = a4;
      v49 = v48;
      v50 = swift_slowAlloc(64, -1);
      aBlock[0] = v50;
      *(_DWORD *)v49 = 136315651;
      v69 = v11;
      v51 = sub_100227CB8();
      v53 = v52;
      v79 = sub_10003D274(v51, v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v49 + 4, v49 + 12);

      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v49 + 12) = 2160;
      v79 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v49 + 14, v49 + 22);
      *(_WORD *)(v49 + 22) = 2081;
      v54 = v74;
      v79 = v74;
      v55 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v57 = v56;
      v79 = sub_10003D274(v55, v56, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v49 + 24, v49 + 32);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s Starting key loading process for adamID:  %{private,mask.hash}s.", (uint8_t *)v49, 0x20u);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      v58 = v49;
      a4 = v73;
      swift_slowDealloc(v58, -1, -1);

      (*(void (**)(char *, uint64_t))(v69 + 8))(v14, v75);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v54 = v74;
    }
    v59 = v71;
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
    aBlock[0] = v54;
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v62 = v61;
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v62);
    v64 = (_QWORD *)swift_allocObject(&unk_1004B6A40, 48, 7);
    v64[2] = v45;
    v64[3] = v54;
    v64[4] = v76;
    v64[5] = a4;
    aBlock[4] = (uint64_t)sub_10022B308;
    v78 = v64;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100004B9C;
    aBlock[3] = (uint64_t)&unk_1004B6A58;
    v65 = _Block_copy(aBlock);
    v66 = v78;
    v67 = v45;
    swift_retain();
    swift_release(v66);
    objc_msgSend(v72, "startKeyLoadingProcessWithKeyIdentifier:contentAdamId:isRenewal:completion:", v60, v63, 0, v65);
    _Block_release(v65);

  }
  else
  {
    static Logger.downloads.getter(v18);
    v33 = a2;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(12, -1);
      v73 = a4;
      v37 = (uint8_t *)v36;
      v38 = swift_slowAlloc(32, -1);
      aBlock[0] = v38;
      *(_DWORD *)v37 = 136315138;
      v39 = sub_100227CB8();
      v41 = v40;
      v79 = sub_10003D274(v39, v40, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v37 + 4, v37 + 12);

      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s Downloading unprotected HLS content with an adamId is not supported.", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v75);
    v42 = sub_10022B298();
    v43 = swift_allocError(&type metadata for FairPlayAssetsDownloaderError, v42, 0, 0);
    *v44 = 2;
    v76();
    swift_errorRelease(v43);
  }
}

uint64_t sub_100228E9C(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  char v55[8];
  uint64_t v56;
  uint64_t v57;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v48 - v14;
  v52 = a3;
  if (!a1)
  {
    v51 = v8;
    static Logger.downloads.getter(v13);
    v36 = a2;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(32, -1);
      v49 = swift_slowAlloc(64, -1);
      v57 = v49;
      *(_DWORD *)v39 = 136315651;
      v50 = a4;
      v40 = sub_100227CB8();
      v42 = v41;
      v56 = sub_10003D274(v40, v41, &v57);
      v53 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 4, v39 + 12);

      swift_bridgeObjectRelease(v42);
      *(_WORD *)(v39 + 12) = 2160;
      v56 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 14, v39 + 22);
      *(_WORD *)(v39 + 22) = 2081;
      v56 = v52;
      v43 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v45 = v44;
      v56 = sub_10003D274(v43, v44, &v57);
      a4 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v39 + 24, v39 + 32);
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s Finished key loading process for adamID  %{private,mask.hash}s.", (uint8_t *)v39, 0x20u);
      v46 = v49;
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v34 = *(void (**)(char *, uint64_t))(v53 + 8);
    }
    else
    {

      v34 = *(void (**)(char *, uint64_t))(v9 + 8);
    }
    v35 = v15;
    goto LABEL_9;
  }
  v53 = v9;
  v16 = swift_errorRetain(a1);
  static Logger.downloads.getter(v16);
  v17 = a2;
  swift_errorRetain(a1);
  v18 = v17;
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(42, -1);
    v51 = v8;
    v23 = v22;
    v49 = swift_slowAlloc(96, -1);
    v57 = v49;
    *(_DWORD *)v23 = 136315907;
    v24 = sub_100227CB8();
    v26 = v25;
    v56 = sub_10003D274(v24, v25, &v57);
    v50 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 4, v23 + 12);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v23 + 12) = 2160;
    v56 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 14, v23 + 22);
    *(_WORD *)(v23 + 22) = 2081;
    v56 = v52;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v29 = v28;
    v56 = sub_10003D274(v27, v28, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v23 + 32) = 2080;
    swift_getErrorValue(a1, v55, v54);
    v30 = Error.localizedDescription.getter(v54[1], v54[2]);
    v32 = v31;
    v56 = sub_10003D274(v30, v31, &v57);
    a4 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 34, v23 + 42);
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s Finished key loading process for adamID %{private,mask.hash}s with error %s.", (uint8_t *)v23, 0x2Au);
    v33 = v49;
    swift_arrayDestroy(v49, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    swift_errorRelease(a1);
    v34 = *(void (**)(char *, uint64_t))(v53 + 8);
    v35 = v12;
LABEL_9:
    v34(v35, v51);
    return a4(a1);
  }
  swift_errorRelease(a1);

  swift_errorRelease(a1);
  swift_errorRelease(a1);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v8);
  return a4(a1);
}

void sub_1002293B4(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  id v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  _UNKNOWN **v46;

  v3 = v2;
  v41 = a2;
  v5 = type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyAdamIDMap];
  v11 = (uint64_t *)&v10[4];
  v12 = v10 + 6;
  os_unfair_lock_lock(v10 + 6);
  sub_10022A13C(v11, (uint64_t)a1, (uint64_t)&v43);
  os_unfair_lock_unlock(v12);
  v39 = v43;
  v40 = v44;
  if (v44 == 1)
  {
    v38 = v6;
    static Logger.downloads.getter(v13);
    v14 = v3;
    v15 = a1;
    v16 = v14;
    v17 = v15;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      v35 = v19;
      v36 = v18;
      v37 = v5;
      v20 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v43 = v34;
      *(_DWORD *)v20 = 136315394;
      v21 = sub_100227CB8();
      v23 = v22;
      v42 = sub_10003D274(v21, v22, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v20 + 4, v20 + 12);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v20 + 12) = 2082;
      v24 = v17;
      v25 = objc_msgSend(v24, "taskDescription");
      if (v25)
      {
        v26 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v29 = v28;

      }
      else
      {

        v29 = 0xEC0000005D646920;
        v27 = 0x6E776F6E6B6E755BLL;
      }
      v42 = sub_10003D274(v27, v29, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v20 + 14, v20 + 22);

      swift_bridgeObjectRelease(v29);
      v30 = v36;
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v35, "%s No corresponding adamID found for asset task %{public}s.", (uint8_t *)v20, 0x16u);
      v31 = v34;
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v38);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v38);
    }
  }
  if (*(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler])
  {
    v45 = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
    v46 = &off_1004B3EA8;
    v43 = (uint64_t)a1;
    v32 = (char *)&loc_100229734
        + dword_100229864[*(unsigned __int8 *)sub_10003A834(&v3[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(_QWORD *)&v3[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config+ 24])];
    __asm { BR              X10 }
  }
}

uint64_t sub_100229874(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _BOOL8 v14;
  id v15;
  id v16;
  char *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  char *v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  char v68[8];
  _QWORD v69[3];
  char v70[8];
  uint64_t v71;
  uint64_t v72[3];
  uint64_t v73;
  _UNKNOWN **v74;
  _QWORD v75[3];
  char v76[16];

  v5 = type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v60 - v12;
  swift_getErrorValue(a2, v76, v75);
  v14 = sub_10022A21C(v75[1], v75[2]);
  if (v14)
  {
    static Logger.downloads.getter(v14);
    v15 = v2;
    v16 = a1;
    swift_errorRetain(a2);
    v17 = (char *)v15;
    v18 = v16;
    v19 = swift_errorRetain(a2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v63 = v5;
      v64 = v7;
      v22 = swift_slowAlloc(32, -1);
      v61 = swift_slowAlloc(96, -1);
      v72[0] = v61;
      *(_DWORD *)v22 = 136315650;
      v23 = sub_100227CB8();
      v25 = v24;
      v71 = sub_10003D274(v23, v24, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v22 + 4, v22 + 12);

      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v22 + 12) = 2082;
      v62 = v18;
      v26 = v18;
      v27 = objc_msgSend(v26, "taskDescription");
      if (v27)
      {
        v28 = v27;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v31 = v30;

      }
      else
      {
        v29 = 0x6E776F6E6B6E755BLL;

        v31 = 0xEC0000005D646920;
      }
      v71 = sub_10003D274(v29, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v22 + 14, v22 + 22);

      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v22 + 22) = 2082;
      swift_getErrorValue(a2, v68, v67);
      v50 = Error.localizedDescription.getter(v67[1], v67[2]);
      v52 = v51;
      v71 = sub_10003D274(v50, v51, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease(v52);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s Download for task %{public}s was cancelled %{public}s.", (uint8_t *)v22, 0x20u);
      v53 = v61;
      swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v13, v66);
      v18 = v62;
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);

      result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v13, v66);
    }
    if (*(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler])
    {
      v73 = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
      v74 = &off_1004B3EA8;
      v72[0] = (uint64_t)v18;
      v54 = (char *)&loc_100229DE8
          + dword_10022A12C[*(unsigned __int8 *)sub_10003A834(&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config+ 24])];
      __asm { BR              X10 }
    }
  }
  else
  {
    static Logger.downloads.getter(v14);
    v32 = v2;
    v33 = a1;
    swift_errorRetain(a2);
    v34 = (char *)v32;
    v35 = v33;
    v36 = swift_errorRetain(a2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v63 = v5;
      v64 = v7;
      v39 = swift_slowAlloc(32, -1);
      v61 = swift_slowAlloc(96, -1);
      v72[0] = v61;
      *(_DWORD *)v39 = 136315650;
      v40 = sub_100227CB8();
      v42 = v41;
      v71 = sub_10003D274(v40, v41, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v39 + 4, v39 + 12);

      swift_bridgeObjectRelease(v42);
      *(_WORD *)(v39 + 12) = 2082;
      v62 = v35;
      v43 = v35;
      v44 = objc_msgSend(v43, "taskDescription");
      if (v44)
      {
        v45 = v44;
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v48 = v47;

      }
      else
      {
        v46 = 0x6E776F6E6B6E755BLL;

        v48 = 0xEC0000005D646920;
      }
      v71 = sub_10003D274(v46, v48, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v39 + 14, v39 + 22);

      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v39 + 22) = 2082;
      swift_getErrorValue(a2, v70, v69);
      v55 = Error.localizedDescription.getter(v69[1], v69[2]);
      v57 = v56;
      v71 = sub_10003D274(v55, v56, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v39 + 24, v39 + 32);
      swift_bridgeObjectRelease(v57);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s Download for task %{public}s failed with error %{public}s.", (uint8_t *)v39, 0x20u);
      v58 = v61;
      swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v11, v66);
      v35 = v62;
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);

      result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v11, v66);
    }
    if (*(_QWORD *)&v34[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler])
    {
      v73 = sub_100005EC8(0, &qword_100558610, AVAssetDownloadTask_ptr);
      v74 = &off_1004B3EA8;
      v72[0] = (uint64_t)v35;
      v59 = (char *)&loc_100229FD8
          + dword_10022A11C[*(unsigned __int8 *)sub_10003A834(&v34[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(_QWORD *)&v34[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config+ 24])];
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_10022A13C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  swift_bridgeObjectRetain(*a1);
  v7 = sub_1001CD28C(a2);
  v9 = v8;
  swift_bridgeObjectRelease(v6);
  if ((v9 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v11 = *a1;
    v14 = *a1;
    *a1 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10021DF44();
      v11 = v14;
    }

    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v7);
    sub_10021B144(v7, v11);
    v13 = *a1;
    *a1 = v11;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)a3 = v12;
  *(_BYTE *)(a3 + 8) = (v9 & 1) == 0;
}

BOOL sub_10022A21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  id v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  v12 = objc_msgSend(v11, "domain");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v13 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease_n(v15, 2);
  }
  else
  {
    v19 = v17;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {

      return 0;
    }
  }
  v22 = objc_msgSend(v11, "code");

  return v22 == (id)-999;
}

uint64_t sub_10022A574(void *a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t aBlock[5];
  uint64_t v58;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v54 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  __chkstk_darwin(v9);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_opt_self(AVAssetDownloadTask);
  v15 = swift_dynamicCastObjCClass(a2, v14);
  if (v15)
  {
    v16 = (void *)v15;
    v17 = a2;
    v18 = objc_msgSend(v16, "URLAsset");
    sub_100252CFC(v18, a3, a1, v16);

  }
  static Logger.downloads.getter(v15);
  v19 = a2;
  v20 = v3;
  v21 = v19;
  v22 = v20;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v48 = v7;
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    aBlock[0] = v26;
    *(_DWORD *)v25 = 136315394;
    v27 = sub_100227CB8();
    v29 = v28;
    v56 = sub_10003D274(v27, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, aBlock, v25 + 4, v25 + 12);

    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v25 + 12) = 2082;
    v30 = v21;
    v31 = objc_msgSend(v30, "taskDescription");
    if (v31)
    {
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v35 = v34;

    }
    else
    {

      v35 = 0xEC0000005D646920;
      v33 = 0x6E776F6E6B6E755BLL;
    }
    v56 = sub_10003D274(v33, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, aBlock, v25 + 14, v25 + 22);

    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s Download for task %{public}s successfully completed.", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
    v7 = v48;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
  }
  sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
  v37 = (void *)static OS_dispatch_queue.main.getter(v36);
  v38 = swift_allocObject(&unk_1004B6A90, 24, 7);
  swift_unknownObjectWeakInit(v38 + 16, v22);
  aBlock[4] = (uint64_t)sub_10022B338;
  v58 = v38;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100027AF8;
  aBlock[3] = (uint64_t)&unk_1004B6AA8;
  v39 = _Block_copy(aBlock);
  v40 = swift_release(v58);
  v41 = v51;
  static DispatchQoS.unspecified.getter(v40);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v42 = sub_10017F258();
  v43 = sub_10003F544((uint64_t *)&unk_10055B200);
  v44 = sub_100026534();
  v45 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v43, v44, v7, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v45, v39);
  _Block_release(v39);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v41, v53);
}

void sub_10022AA18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  void (*v18)(__n128);
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v7 = (void *)Strong;
    static Logger.fairPlay.getter(Strong);
    v8 = v7;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(12, -1);
      v23 = v2;
      v12 = (uint8_t *)v11;
      v13 = swift_slowAlloc(32, -1);
      v25 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = sub_100227CB8();
      v16 = v15;
      v24 = sub_10003D274(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);

      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s Calling background completion handlers.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    v17 = (uint64_t *)&v8[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler];
    v18 = *(void (**)(__n128))&v8[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler];
    if (v18)
    {
      v19 = v17[1];
      v20 = swift_retain();
      v18(v20);
      sub_10002CA30((uint64_t)v18, v19);
      v21 = *v17;
    }
    else
    {
      v21 = 0;
    }
    v22 = v17[1];
    *v17 = 0;
    v17[1] = 0;
    sub_10002CA30(v21, v22);

  }
}

void sub_10022ACC8(uint64_t a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;
  Swift::Int v11;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  v8 = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(v8, 1))
  {
    v6 = sub_10022AD68(v7, v8 + 1);
    *v3 = v6;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_10021C514(a1, a2, isUniquelyReferenced_nonNull_native);
    v10 = *v3;
    *v3 = v11;
    swift_bridgeObjectRelease(v10);
    return;
  }
  __break(1u);
}

Swift::Int sub_10022AD68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10003F544(&qword_10055AAB0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100005EC8(0, &qword_10055B1E0, NSURLSessionTask_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_100005EC8(0, &qword_10055B1E8, IMAVSecureKeyLoader_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002185EC(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_10022AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10003F544(&qword_10055AB08);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100005EC8(0, &qword_100553D90, NSManagedObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_100005EC8(0, (unint64_t *)&qword_100553810, MTPodcast_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_100219648(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

uint64_t sub_10022B208()
{
  id *v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10022B244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10022877C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_10022B254()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10022B288(_QWORD *a1)
{
  uint64_t v1;

  sub_100228818(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

unint64_t sub_10022B298()
{
  unint64_t result;

  result = qword_10055B1D0;
  if (!qword_10055B1D0)
  {
    result = swift_getWitnessTable(&unk_1003CF218, &type metadata for FairPlayAssetsDownloaderError);
    atomic_store(result, (unint64_t *)&qword_10055B1D0);
  }
  return result;
}

uint64_t sub_10022B2DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10022B308(uint64_t a1)
{
  uint64_t v1;

  return sub_100228E9C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(_QWORD))(v1 + 32));
}

uint64_t sub_10022B314()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10022B338()
{
  uint64_t v0;

  sub_10022AA18(v0);
}

uint64_t sub_10022B340(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AssetDownloadStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022B37C(uint64_t a1, uint64_t a2, CMTimeValue *a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  CMTimeEpoch v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  void *v26;
  double Seconds;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  CMTimeValue v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  char v44;
  id v45;
  NSString v46;
  NSString v47;
  char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  CMTimeValue v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  _QWORD v64[7];
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CMTime time;
  CMTime v73;

  v4 = v3;
  v68 = a1;
  v67 = type metadata accessor for AssetDownloadStatus(0);
  __chkstk_darwin(v67);
  v8 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v64 - v15;
  __chkstk_darwin(v14);
  v17 = a3[5];
  time.value = a3[3];
  *(_QWORD *)&time.timescale = a3[4];
  time.epoch = v17;
  time.value = CMTimeGetSeconds(&time);
  v18 = sub_1001AE788();
  v19 = BinaryFloatingPoint.safeInt64.getter(&type metadata for Double, v18);
  if ((v20 & 1) != 0)
  {
    static Logger.downloads.getter(v19);
    v28 = v4;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(32, -1);
      v32 = swift_slowAlloc(64, -1);
      time.value = v32;
      *(_DWORD *)v31 = 136315651;
      v33 = sub_100227CB8();
      v35 = v34;
      v36 = sub_10003D274(v33, v34, &time.value);
      v69 = v10;
      v70 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 4, v31 + 12);

      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v31 + 12) = 2160;
      v70 = 1752392040;
      v37 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      v38 = Double.description.getter(v37);
      v40 = v39;
      v70 = sub_10003D274(v38, v39, &time.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s Unable to convert duration=%{private,mask.hash}s to Int64.", (uint8_t *)v31, 0x20u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v41 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    }
    else
    {

      v41 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    }
    v42 = v13;
  }
  else
  {
    v21 = v19;
    v65 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", v19);
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v63 = a2;
      else
        v63 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v22 = _CocoaArrayWrapper.endIndex.getter(v63);
    }
    else
    {
      v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a2);
    }
    v66 = v9;
    v69 = v10;
    v64[5] = v21;
    v64[6] = v8;
    if (v22)
    {
      if (v22 < 1)
      {
        __break(1u);
        JUMPOUT(0x10022BE90);
      }
      v23 = 0;
      v24 = 0.0;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a2);
        else
          v25 = *(id *)(a2 + 8 * v23 + 32);
        v26 = v25;
        ++v23;
        objc_msgSend(v25, "CMTimeRangeValue");
        time = v73;
        Seconds = CMTimeGetSeconds(&time);

        v24 = v24 + Seconds;
      }
      while (v22 != v23);
    }
    else
    {
      v24 = 0.0;
    }
    swift_bridgeObjectRelease(a2);
    *(double *)&time.value = v24;
    v43 = BinaryFloatingPoint.safeInt64.getter(&type metadata for Double, v18);
    if ((v44 & 1) == 0)
    {
      v45 = v65;
      objc_msgSend(v65, "setCompletedUnitCount:", v43);
      v46 = String._bridgeToObjectiveC()();
      v47 = String._bridgeToObjectiveC()();
      objc_msgSend(v45, "setUserInfoObject:forKey:", v46, v47);

      v48 = (char *)&loc_10022B7E4
          + dword_10022BE9C[*(unsigned __int8 *)sub_10003A834(&v4[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(_QWORD *)&v4[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config+ 24])];
      __asm { BR              X10 }
    }
    static Logger.downloads.getter(v43);
    v49 = v4;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v9 = v66;
    if (v52)
    {
      v53 = swift_slowAlloc(32, -1);
      v54 = swift_slowAlloc(64, -1);
      time.value = v54;
      *(_DWORD *)v53 = 136315651;
      v55 = sub_100227CB8();
      v57 = v56;
      v70 = sub_10003D274(v55, v56, &time.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v53 + 4, v53 + 12);

      swift_bridgeObjectRelease(v57);
      *(_WORD *)(v53 + 12) = 2160;
      v70 = 1752392040;
      v58 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v53 + 14, v53 + 22);
      *(_WORD *)(v53 + 22) = 2081;
      v59 = Double.description.getter(v58);
      v61 = v60;
      v70 = sub_10003D274(v59, v60, &time.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v53 + 24, v53 + 32);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s Unable to convert timeLoaded=%{private,mask.hash}s to Int64.", (uint8_t *)v53, 0x20u);
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

    }
    v41 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    v42 = v16;
  }
  return v41(v42, v9);
}

uint64_t getEnumTagSinglePayload for BaseOperation.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FairPlayAssetsDownloaderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10022BF88 + 4 * byte_1003CF0E9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10022BFBC + 4 * byte_1003CF0E4[v4]))();
}

uint64_t sub_10022BFBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022BFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022BFCCLL);
  return result;
}

uint64_t sub_10022BFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022BFE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10022BFE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022BFEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FairPlayAssetsDownloaderError()
{
  return &type metadata for FairPlayAssetsDownloaderError;
}

unint64_t sub_10022C00C()
{
  unint64_t result;

  result = qword_10055B230;
  if (!qword_10055B230)
  {
    result = swift_getWitnessTable(&unk_1003CF1F0, &type metadata for FairPlayAssetsDownloaderError);
    atomic_store(result, (unint64_t *)&qword_10055B230);
  }
  return result;
}

uint64_t sub_10022C058@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[2];
  __int16 v36;
  char v37;
  uint64_t v38;
  int v39;
  __int128 v40;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTDidPromptForNotificationsPermissionsKey);
  v6 = v5;
  v7 = (void *)objc_opt_self(NSUserDefaults);
  *((_QWORD *)&v31 + 1) = AppStorage.init<A>(wrappedValue:_:store:)(0, v4, v6, objc_msgSend(v7, "_applePodcastsFoundationSharedUserDefaults"));
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTNotificationStatusIsAuthorizedKey);
  *(_QWORD *)&v32 = AppStorage.init<A>(wrappedValue:_:store:)(0, v8, v9, objc_msgSend(v7, "_applePodcastsFoundationSharedUserDefaults"));
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(MTPodcastHidesPlayedEpisodesAppWideUserDefaultsKey);
  v12 = v11;
  v13 = (id)MTPodcastHidesPlayedEpisodesAppWideUserDefaults(v10);
  *((_QWORD *)&v32 + 1) = AppStorage.init<A>(wrappedValue:_:store:)(0, v10, v12, v13);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastDeletePlayedEpisodesDefaultKey);
  *(_QWORD *)&v33 = AppStorage.init<A>(wrappedValue:_:store:)(0, v14, v15, objc_msgSend(v7, "_applePodcastsFoundationSettingsUserDefaults"));
  sub_10000A520((uint64_t)a1, (uint64_t)v26);
  v16 = a1[3];
  v17 = a1[4];
  sub_10003A834(a1, v16);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 16))(v35, v16, v17);
  *((_QWORD *)&v27 + 1) = v35[0];
  *(_QWORD *)&v28 = v35[1];
  WORD4(v28) = v36;
  BYTE10(v28) = v37;
  *(_QWORD *)&v29 = v38;
  DWORD2(v29) = v39;
  v30 = v40;
  *(_QWORD *)&v31 = 0;
  v18 = a1[3];
  v19 = a1[4];
  sub_10003A834(a1, v18);
  *((_QWORD *)&v33 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  v34 = v20;
  *(_QWORD *)(a2 + 144) = v20;
  v21 = v32;
  *(_OWORD *)(a2 + 96) = v31;
  *(_OWORD *)(a2 + 112) = v21;
  v22 = v28;
  *(_OWORD *)(a2 + 32) = v27;
  *(_OWORD *)(a2 + 48) = v22;
  v23 = v30;
  *(_OWORD *)(a2 + 64) = v29;
  *(_OWORD *)(a2 + 80) = v23;
  v24 = v26[1];
  *(_OWORD *)a2 = v26[0];
  *(_OWORD *)(a2 + 16) = v24;
  *(_OWORD *)(a2 + 128) = v33;
  return sub_10003D380(a1);
}

BOOL sub_10022C280(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_100230F4C((uint64_t *)v5, (uint64_t)v7);
}

uint64_t sub_10022C2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  unsigned __int8 v75;
  char v76;
  unsigned __int8 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  v2 = v1;
  v62 = a1;
  v61 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v59 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_10055B390);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055B398);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10003F544(&qword_10055B3A0);
  v58 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v1;
  v12 = sub_10003F544(&qword_10055B3A8);
  v13 = sub_100231018();
  Form.init(content:)(sub_100231010, v63, v12, v13);
  v14 = *(_QWORD *)(v1 + 48);
  v15 = *(_BYTE *)(v1 + 56);
  v16 = *(_BYTE *)(v1 + 57);
  v17 = *(_BYTE *)(v1 + 58);
  v18 = *(_QWORD *)(v1 + 64);
  v19 = *(_DWORD *)(v1 + 72);
  v20 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)&v65 = *(_QWORD *)(v1 + 40);
  *((_QWORD *)&v65 + 1) = v14;
  LOBYTE(v66) = v15;
  BYTE1(v66) = v16;
  BYTE2(v66) = v17;
  *((_QWORD *)&v66 + 1) = v18;
  *(_DWORD *)v67 = v19;
  *(_OWORD *)&v67[8] = *(_OWORD *)(v1 + 80);
  *(_QWORD *)&v67[24] = v20;
  v55 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(&v74, v55);
  v21 = *((_QWORD *)&v74 + 1);
  v54 = v74;
  v53 = v75;
  v22 = v76;
  v52 = v77;
  v23 = v78;
  v51 = v79;
  v50 = v80;
  v49 = v81;
  sub_100231190(v1, (uint64_t)&v65);
  v24 = swift_allocObject(&unk_1004B6D30, 168, 7);
  v25 = v71;
  *(_OWORD *)(v24 + 112) = v70;
  *(_OWORD *)(v24 + 128) = v25;
  *(_OWORD *)(v24 + 144) = v72;
  *(_QWORD *)(v24 + 160) = v73;
  v26 = *(_OWORD *)&v67[16];
  *(_OWORD *)(v24 + 48) = *(_OWORD *)v67;
  *(_OWORD *)(v24 + 64) = v26;
  v27 = v69;
  *(_OWORD *)(v24 + 80) = v68;
  *(_OWORD *)(v24 + 96) = v27;
  v28 = v66;
  *(_OWORD *)(v24 + 16) = v65;
  *(_OWORD *)(v24 + 32) = v28;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
  v29 = &v10[*(int *)(v8 + 36)];
  *(_QWORD *)v29 = v54;
  *((_QWORD *)v29 + 1) = v21;
  v29[16] = v53;
  v29[17] = v22;
  v29[18] = v52;
  *((_QWORD *)v29 + 3) = v23;
  *((_DWORD *)v29 + 8) = v51;
  v30 = v49;
  *((_QWORD *)v29 + 5) = v50;
  *((_QWORD *)v29 + 6) = v30;
  *((_QWORD *)v29 + 7) = sub_1002311C8;
  *((_QWORD *)v29 + 8) = v24;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v31 = *(_QWORD *)(v2 + 48);
  v32 = *(_BYTE *)(v2 + 56);
  v33 = *(_BYTE *)(v2 + 57);
  v34 = *(_BYTE *)(v2 + 58);
  v35 = *(_QWORD *)(v2 + 64);
  v36 = *(_DWORD *)(v2 + 72);
  v37 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)&v65 = *(_QWORD *)(v2 + 40);
  *((_QWORD *)&v65 + 1) = v31;
  LOBYTE(v66) = v32;
  BYTE1(v66) = v33;
  BYTE2(v66) = v34;
  *((_QWORD *)&v66 + 1) = v35;
  *(_DWORD *)v67 = v36;
  *(_OWORD *)&v67[8] = *(_OWORD *)(v2 + 80);
  *(_QWORD *)&v67[24] = v37;
  State.wrappedValue.getter(&v74, v55);
  v38 = *((_QWORD *)&v74 + 1);
  v65 = v74;
  v39 = sub_1002311D0();
  v40 = sub_10016D37C();
  v41 = v56;
  View.navigationTitle<A>(_:)(&v65, v8, &type metadata for String, v39, v40);
  swift_bridgeObjectRelease(v38);
  sub_100007A28((uint64_t)v10, &qword_10055B398);
  v42 = v60;
  v43 = v59;
  v44 = v61;
  (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v59, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v61);
  *(_QWORD *)&v65 = v8;
  *((_QWORD *)&v65 + 1) = &type metadata for String;
  *(_QWORD *)&v66 = v39;
  *((_QWORD *)&v66 + 1) = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
  v46 = v57;
  View.navigationBarTitleDisplayMode(_:)(v43, v57, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v41, v46);
}

uint64_t sub_10022C7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];
  unsigned __int8 v48;

  v4 = sub_10003F544(&qword_10055B3E0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003F544(&qword_10055B420);
  __chkstk_darwin(v8);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_10055B3C0);
  __chkstk_darwin(v11);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  v16 = *(_BYTE *)(a1 + 57);
  v17 = *(_BYTE *)(a1 + 58);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_DWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 96);
  v38 = *(_QWORD *)(a1 + 40);
  v39 = v14;
  v40 = v15;
  v41 = v16;
  v42 = v17;
  v43 = v18;
  v44 = v19;
  v45 = *(_OWORD *)(a1 + 80);
  v46 = v20;
  v21 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(v47, v21);
  v22 = v48;
  swift_bridgeObjectRelease(v47[1]);
  if (v22 == 1)
  {
    sub_10022DE64(a1, (uint64_t)v13);
    sub_100007A64((uint64_t)v13, (uint64_t)v10, &qword_10055B3C0);
    swift_storeEnumTagMultiPayload(v10, v8, 0);
    v24 = sub_100231084();
    v25 = sub_100231100();
    _ConditionalContent<>.init(storage:)(v10, v11, v4, v24, v25);
    return sub_100007A28((uint64_t)v13, &qword_10055B3C0);
  }
  else
  {
    v37[1] = a2;
    __chkstk_darwin(v23);
    v27 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000018, 0x8000000100436370);
    v36 = 256;
    v35 = 0;
    v38 = Text.init(_:tableName:bundle:comment:)(v27);
    v39 = v28;
    v40 = v29 & 1;
    v43 = v30;
    v31 = sub_10003F544(&qword_10055B3F0);
    v32 = sub_10002F9C8(&qword_10055B3E8, &qword_10055B3F0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    Section<>.init(footer:content:)(&v38, sub_10023126C, &v37[-4], v31, &type metadata for Text, v32, &protocol witness table for Text);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    v33 = sub_100231084();
    v34 = sub_100231100();
    _ConditionalContent<>.init(storage:)(v10, v11, v4, v33, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_10022CADC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[9];
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[3];
  uint64_t v25;

  v3 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v4 = *(_OWORD *)(a1 + 32);
  v24[1] = v3;
  v24[2] = v4;
  v25 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  sub_10003A834((_QWORD *)a2, v5);
  (*(void (**)(_QWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v6 + 24))(v16, v24, v5, v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 57);
  v10 = *(_BYTE *)(a2 + 58);
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_DWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 96);
  v16[7] = *(_QWORD *)(a2 + 40);
  v16[8] = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v22 = *(_OWORD *)(a2 + 80);
  v23 = v13;
  v14 = sub_10003F544(&qword_10055B3F8);
  return State.wrappedValue.setter(v16, v14);
}

uint64_t sub_10022CBB0()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (!v2)
  {
    v7 = "SETTINGS_ALLOW_NOTIFICATIONS_DISPLAY_TITLE_IPHONE";
LABEL_6:
    v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
    v5 = 0xD000000000000031;
    return LocalizedStringKey.init(stringLiteral:)(v5, v6);
  }
  v3 = objc_msgSend(v0, "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 != (id)1)
  {
    v7 = "SETTINGS_ALLOW_NOTIFICATIONS_DISPLAY_TITLE_DEVICE";
    goto LABEL_6;
  }
  v5 = 0xD00000000000002FLL;
  v6 = 0x8000000100436780;
  return LocalizedStringKey.init(stringLiteral:)(v5, v6);
}

uint64_t sub_10022CC94()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (!v2)
  {
    v7 = "SETTINGS_ALLOW_NOTIFICATIONS_DISPLAY_FOOTER_IPHONE";
LABEL_6:
    v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
    v5 = 0xD000000000000032;
    return LocalizedStringKey.init(stringLiteral:)(v5, v6);
  }
  v3 = objc_msgSend(v0, "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 != (id)1)
  {
    v7 = "SETTINGS_ALLOW_NOTIFICATIONS_DISPLAY_FOOTER_DEVICE";
    goto LABEL_6;
  }
  v5 = 0xD000000000000030;
  v6 = 0x80000001004366C0;
  return LocalizedStringKey.init(stringLiteral:)(v5, v6);
}

uint64_t sub_10022CD78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  _QWORD v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;

  v31 = a1;
  v2 = sub_10003F544(&qword_10055B578);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055B580);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B588);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppStorage.wrappedValue.getter(v33, *(_QWORD *)(v1 + 104), &type metadata for Bool);
  v13 = LOBYTE(v33[0]);
  sub_100231190(v1, (uint64_t)v33);
  if (v13 == 1)
  {
    AppStorage.wrappedValue.getter(&v32, v36, &type metadata for Bool);
    v14 = v32;
    v15 = sub_1002315A0(v33);
    if ((v14 & 1) == 0)
    {
      __chkstk_darwin(v15);
      v16 = sub_10022CC94();
      v30 = 256;
      v29 = 0;
      v33[0] = Text.init(_:tableName:bundle:comment:)(v16);
      v33[1] = v17;
      v34 = v18 & 1;
      v35 = v19;
      v20 = sub_10003F544(&qword_10055B5B0);
      v21 = sub_10002F9C8(&qword_10055B5A8, &qword_10055B5B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      Section<>.init(footer:content:)(v33, sub_1002316EC, &v31 - 4, v20, &type metadata for Text, v21, &protocol witness table for Text);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
      swift_storeEnumTagMultiPayload(v8, v6, 0);
      v22 = sub_1002315D4();
      v23 = sub_100231664();
      _ConditionalContent<>.init(storage:)(v8, v9, v2, v22, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  else
  {
    v15 = sub_1002315A0(v33);
  }
  __chkstk_darwin(v15);
  v29 = v1;
  v25 = sub_10003F544(&qword_10055B590);
  v26 = sub_10002F9C8(&qword_10055B598, &qword_10055B590, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Section<>.init(content:)(sub_1002315CC, &v31 - 4, v25, v26);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
  swift_storeEnumTagMultiPayload(v8, v6, 1);
  v27 = sub_1002315D4();
  v28 = sub_100231664();
  _ConditionalContent<>.init(storage:)(v8, v9, v2, v27, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10022D0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  char v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  char v112;
  char v113;
  uint64_t v114;
  int v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  unsigned __int8 v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;

  v104 = a2;
  v103 = sub_10003F544(&qword_100556B40);
  v102 = *(_QWORD *)(v103 - 8);
  v3 = __chkstk_darwin(v103);
  v101 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v107 = (char *)&v85 - v5;
  v99 = sub_10003F544(&qword_10055B5C0);
  __chkstk_darwin(v99);
  v98 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10003F544(&qword_10055B5C8);
  v7 = __chkstk_darwin(v100);
  v105 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v106 = (uint64_t)&v85 - v9;
  v97 = sub_10003F544(&qword_10055B3F0);
  v96 = *(_QWORD *)(v97 - 8);
  v10 = __chkstk_darwin(v97);
  v95 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v108 = (char *)&v85 - v12;
  v92 = LocalizedStringKey.init(stringLiteral:)(0x6E69776F6C6C6F46, 0xE900000000000067);
  v91 = v13;
  v89 = v14;
  v90 = v15;
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  v18 = *(_BYTE *)(a1 + 57);
  v19 = *(_BYTE *)(a1 + 58);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_DWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 96);
  v109 = *(_QWORD *)(a1 + 40);
  v110 = v16;
  v111 = v17;
  v112 = v18;
  v113 = v19;
  v114 = v20;
  v115 = v21;
  v116 = *(_OWORD *)(a1 + 80);
  v117 = v22;
  v94 = sub_10003F544(&qword_10055B3F8);
  State.projectedValue.getter(&v118);
  v23 = v118;
  v24 = v119;
  v88 = v118;
  v25 = v121;
  v93 = v120;
  v26 = v122;
  v27 = v123;
  v28 = v124;
  v29 = v125;
  v87 = v126;
  v30 = v127;
  v86 = v128;
  KeyPath = swift_getKeyPath(&unk_1003CF590, v31);
  v118 = v23;
  v119 = v24;
  v120 = v93;
  v121 = v25;
  v122 = v26;
  v123 = v27;
  v124 = v28;
  v125 = v29;
  v126 = v87;
  v127 = v30;
  v128 = v86;
  v93 = sub_10003F544(&qword_10055B4C0);
  Binding.subscript.getter(&v109, KeyPath, v93);
  swift_bridgeObjectRelease(v25);
  swift_release(v24);
  swift_release(KeyPath);
  swift_release(v88);
  Toggle<>.init(_:isOn:)(v92, v91, v89 & 1, v90, v109, v110, v111);
  v92 = LocalizedStringKey.init(stringLiteral:)(0x6163696669746F4ELL, 0xED0000736E6F6974);
  v91 = v33;
  v89 = v34;
  v90 = v35;
  v36 = *(_QWORD *)(a1 + 48);
  v37 = *(_BYTE *)(a1 + 56);
  v38 = *(_BYTE *)(a1 + 57);
  v39 = *(_BYTE *)(a1 + 58);
  v40 = *(_QWORD *)(a1 + 64);
  v41 = *(_DWORD *)(a1 + 72);
  v42 = *(_QWORD *)(a1 + 96);
  v109 = *(_QWORD *)(a1 + 40);
  v110 = v36;
  v111 = v37;
  v112 = v38;
  v113 = v39;
  v114 = v40;
  v115 = v41;
  v116 = *(_OWORD *)(a1 + 80);
  v117 = v42;
  State.projectedValue.getter(&v118);
  v43 = v118;
  v44 = v119;
  v94 = v118;
  v45 = v121;
  v88 = v120;
  v46 = v122;
  v47 = v123;
  v87 = v124;
  v48 = v125;
  LODWORD(v29) = v126;
  v49 = v127;
  v86 = v128;
  v51 = swift_getKeyPath(&unk_1003CF5B0, v50);
  v118 = v43;
  v119 = v44;
  v120 = v88;
  v121 = v45;
  v122 = v46;
  v123 = v47;
  v124 = v87;
  v125 = v48;
  v126 = v29;
  v127 = v49;
  v128 = v86;
  Binding.subscript.getter(&v109, v51, v93);
  swift_bridgeObjectRelease(v45);
  swift_release(v44);
  swift_release(v51);
  swift_release(v94);
  v52 = v95;
  Toggle<>.init(_:isOn:)(v92, v91, v89 & 1, v90, v109, v110, v111);
  v54 = swift_getKeyPath(&unk_1003CF5D0, v53);
  v55 = swift_allocObject(&unk_1004B6E18, 17, 7);
  *(_BYTE *)(v55 + 16) = 1;
  v56 = v96;
  v57 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v58 = (uint64_t)v98;
  v59 = v97;
  v57(v98, v52, v97);
  v60 = (void (*)(uint64_t, char *, uint64_t))v57;
  v61 = (uint64_t *)(v58 + *(int *)(v99 + 36));
  *v61 = v54;
  v61[1] = (uint64_t)sub_100231754;
  v61[2] = v55;
  v99 = *(_QWORD *)(v56 + 8);
  v62 = v59;
  v63 = ((uint64_t (*)(char *, uint64_t))v99)(v52, v59);
  v64 = static Color.secondary.getter(v63);
  v66 = swift_getKeyPath(&unk_1003CF600, v65);
  v67 = v105;
  sub_100007A64(v58, v105, &qword_10055B5C0);
  v68 = (uint64_t *)(v67 + *(int *)(v100 + 36));
  *v68 = v66;
  v68[1] = v64;
  sub_100007A28(v58, &qword_10055B5C0);
  v69 = v106;
  sub_100231774(v67, v106);
  v70 = sub_10022CBB0();
  v71 = v107;
  Button<>.init(_:action:)(v70);
  v72 = v62;
  v57(v52, v108, v62);
  sub_100007A64(v69, v67, &qword_10055B5C8);
  v73 = v102;
  v74 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v75 = v101;
  v76 = v103;
  v74(v101, v71, v103);
  v77 = v104;
  v60(v104, v52, v72);
  v78 = sub_10003F544(&qword_10055B5D0);
  v79 = v105;
  sub_100007A64(v105, v77 + *(int *)(v78 + 48), &qword_10055B5C8);
  v74((char *)(v77 + *(int *)(v78 + 64)), v75, v76);
  v80 = *(void (**)(char *, uint64_t))(v73 + 8);
  v80(v107, v76);
  sub_100007A28(v106, &qword_10055B5C8);
  v81 = v72;
  v82 = v72;
  v83 = (uint64_t (*)(char *, uint64_t))v99;
  ((void (*)(char *, uint64_t))v99)(v108, v82);
  v80(v75, v76);
  sub_100007A28(v79, &qword_10055B5C8);
  return v83(v52, v81);
}

void sub_10022D800()
{
  sub_100230328(sub_100244FC8);
}

uint64_t sub_10022D80C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  void (*v58)(_BYTE *, uint64_t);
  _BYTE v60[4];
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  char v80;
  char v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  char v91;
  char v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;

  v75 = a2;
  v74 = sub_10003F544(&qword_10055B3F0);
  v72 = *(_QWORD *)(v74 - 8);
  v3 = __chkstk_darwin(v74);
  v73 = &v60[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __chkstk_darwin(v3);
  v71 = &v60[-v6];
  v7 = __chkstk_darwin(v5);
  v70 = &v60[-v8];
  __chkstk_darwin(v7);
  v76 = &v60[-v9];
  v67 = LocalizedStringKey.init(stringLiteral:)(0x6E69776F6C6C6F46, 0xE900000000000067);
  v66 = v10;
  v64 = v11;
  v65 = v12;
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_BYTE *)(a1 + 56);
  v15 = *(_BYTE *)(a1 + 57);
  v16 = *(_BYTE *)(a1 + 58);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_DWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 96);
  v77 = *(_QWORD *)(a1 + 40);
  v78 = v13;
  v79 = v14;
  v80 = v15;
  v81 = v16;
  v82 = v17;
  v83 = v18;
  v84 = *(_OWORD *)(a1 + 80);
  v85 = v19;
  v69 = sub_10003F544(&qword_10055B3F8);
  State.projectedValue.getter(&v86);
  v20 = v86;
  v21 = v87;
  v63 = v86;
  v22 = v89;
  v68 = v88;
  v23 = v90;
  v24 = v91;
  v25 = v92;
  v62 = v93;
  v61 = v94;
  v27 = v95;
  v26 = v96;
  KeyPath = swift_getKeyPath(&unk_1003CF590, v28);
  v86 = v20;
  v87 = v21;
  v88 = v68;
  v89 = v22;
  v90 = v23;
  v91 = v24;
  v92 = v25;
  v93 = v62;
  v94 = v61;
  v95 = v27;
  v96 = v26;
  v68 = sub_10003F544(&qword_10055B4C0);
  Binding.subscript.getter(&v77, KeyPath, v68);
  swift_bridgeObjectRelease(v22);
  swift_release(v21);
  swift_release(KeyPath);
  swift_release(v63);
  Toggle<>.init(_:isOn:)(v67, v66, v64 & 1, v65, v77, v78, v79);
  v67 = LocalizedStringKey.init(stringLiteral:)(0x6163696669746F4ELL, 0xED0000736E6F6974);
  v66 = v30;
  v64 = v31;
  v65 = v32;
  v33 = *(_QWORD *)(a1 + 48);
  v34 = *(_BYTE *)(a1 + 56);
  v35 = *(_BYTE *)(a1 + 57);
  v36 = *(_BYTE *)(a1 + 58);
  v37 = *(_QWORD *)(a1 + 64);
  v38 = *(_DWORD *)(a1 + 72);
  v39 = *(_QWORD *)(a1 + 96);
  v77 = *(_QWORD *)(a1 + 40);
  v78 = v33;
  v79 = v34;
  v80 = v35;
  v81 = v36;
  v82 = v37;
  v83 = v38;
  v84 = *(_OWORD *)(a1 + 80);
  v85 = v39;
  State.projectedValue.getter(&v86);
  v40 = v86;
  v41 = v87;
  v69 = v86;
  v42 = v89;
  v63 = v88;
  LODWORD(v62) = v90;
  LOBYTE(v22) = v91;
  LOBYTE(v26) = v92;
  v43 = v93;
  v44 = v94;
  v45 = v95;
  v46 = v96;
  v48 = swift_getKeyPath(&unk_1003CF5B0, v47);
  v86 = v40;
  v87 = v41;
  v88 = v63;
  v89 = v42;
  v90 = v62;
  v91 = v22;
  v92 = v26;
  v93 = v43;
  v94 = v44;
  v95 = v45;
  v96 = v46;
  Binding.subscript.getter(&v77, v48, v68);
  swift_bridgeObjectRelease(v42);
  swift_release(v41);
  swift_release(v48);
  swift_release(v69);
  v49 = v70;
  Toggle<>.init(_:isOn:)(v67, v66, v64 & 1, v65, v77, v78, v79);
  v50 = v72;
  v51 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v72 + 16);
  v52 = v71;
  v53 = v76;
  v54 = v74;
  v51(v71, v76, v74);
  v55 = v73;
  v51(v73, v49, v54);
  v56 = v75;
  v51(v75, v52, v54);
  v57 = sub_10003F544(&qword_10055B5D8);
  v51(&v56[*(int *)(v57 + 48)], v55, v54);
  v58 = *(void (**)(_BYTE *, uint64_t))(v50 + 8);
  v58(v49, v54);
  v58(v53, v54);
  v58(v55, v54);
  return ((uint64_t (*)(_BYTE *, uint64_t))v58)(v52, v54);
}

uint64_t sub_10022DCDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x6E69776F6C6C6F46, 0xE900000000000067);
  v31 = v3;
  v32 = v2;
  v29 = v4;
  v30 = v5;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 57);
  v9 = *(_BYTE *)(a1 + 58);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 96);
  v33 = *(_QWORD *)(a1 + 40);
  v34 = v6;
  v35 = v7;
  v36 = v8;
  v37 = v9;
  v38 = v10;
  v39 = v11;
  v40 = *(_OWORD *)(a1 + 80);
  v41 = v12;
  sub_10003F544(&qword_10055B3F8);
  State.projectedValue.getter(&v42);
  v14 = v42;
  v13 = v43;
  v15 = v45;
  v27 = v44;
  v28 = v42;
  v26 = v46;
  v16 = v47;
  v17 = v48;
  v18 = v49;
  v19 = v50;
  v20 = v51;
  v21 = v52;
  KeyPath = swift_getKeyPath(&unk_1003CF590, v22);
  v42 = v14;
  v43 = v13;
  v44 = v27;
  v45 = v15;
  v46 = v26;
  v47 = v16;
  v48 = v17;
  v49 = v18;
  v50 = v19;
  v51 = v20;
  v52 = v21;
  v24 = sub_10003F544(&qword_10055B4C0);
  Binding.subscript.getter(&v33, KeyPath, v24);
  swift_bridgeObjectRelease(v15);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v28);
  return Toggle<>.init(_:isOn:)(v32, v31, v29 & 1, v30, v33, v34, v35);
}

uint64_t sub_10022DE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[4];
  _QWORD v93[4];
  _QWORD v94[4];
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  uint64_t v103;
  _QWORD v104[2];
  char v105;
  uint64_t v106;
  _QWORD v107[8];

  v83 = a2;
  v82 = sub_10003F544(&qword_10055B428);
  v91 = *(_QWORD *)(v82 - 8);
  v3 = __chkstk_darwin(v82);
  v81 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v89 = (char *)&v74 - v5;
  v77 = (void (*)(char *, char *, uint64_t))sub_10003F544(&qword_10055B430);
  __chkstk_darwin(v77);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10003F544(&qword_10055B438);
  v90 = *(_QWORD *)(v80 - 8);
  v8 = __chkstk_darwin(v80);
  v79 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v85 = (char *)&v74 - v10;
  v78 = sub_10003F544(&qword_10055B440);
  v88 = *(_QWORD *)(v78 - 8);
  v11 = __chkstk_darwin(v78);
  v87 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v74 - v13;
  v15 = sub_10003F544(&qword_10055B448);
  v16 = __chkstk_darwin(v15);
  v86 = (uint64_t)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v84 = (uint64_t)&v74 - v18;
  sub_10022CD78((uint64_t)&v74 - v18);
  v94[2] = a1;
  v19 = LocalizedStringKey.init(stringLiteral:)(0x2065646F73697045, 0xED0000726564724FLL);
  v95 = Text.init(_:tableName:bundle:comment:)(v19);
  v96 = v20;
  v97 = v21 & 1;
  v100 = v22;
  v23 = sub_10003F544(&qword_10055B450);
  v24 = sub_10003CA40(&qword_10055B458);
  v25 = type metadata accessor for InlinePickerStyle(255);
  v26 = sub_10002F9C8(&qword_10055B460, &qword_10055B458, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
  v107[0] = v24;
  v107[1] = v25;
  v107[2] = v26;
  v107[3] = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v107, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v76 = v14;
  Section<>.init(header:content:)(&v95, sub_100231274, v94, &type metadata for Text, v23, &protocol witness table for Text, OpaqueTypeConformance2);
  v93[2] = a1;
  v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100436390);
  v95 = Text.init(_:tableName:bundle:comment:)(v28);
  v96 = v29;
  v97 = v30 & 1;
  v100 = v31;
  sub_10022F098(a1, (uint64_t)v7);
  v32 = sub_10003F544(&qword_10055B468);
  v33 = sub_10002F9C8(&qword_10055B470, &qword_10055B468, (uint64_t)&unk_1003CACC0);
  v34 = sub_100231284();
  v35 = v85;
  Section<>.init(header:footer:content:)(&v95, v7, sub_10023127C, v93, &type metadata for Text, v32, v77, &protocol witness table for Text, v33, v34);
  v92[2] = a1;
  v36 = LocalizedStringKey.init(stringLiteral:)(0x64616F6C6E776F44, 0xE900000000000073);
  v104[0] = Text.init(_:tableName:bundle:comment:)(v36);
  v104[1] = v37;
  v105 = v38 & 1;
  v106 = v39;
  v40 = *(_QWORD *)(a1 + 48);
  v41 = *(_BYTE *)(a1 + 56);
  v42 = *(_BYTE *)(a1 + 57);
  v43 = *(_BYTE *)(a1 + 58);
  v44 = *(_QWORD *)(a1 + 64);
  v45 = *(_DWORD *)(a1 + 72);
  v46 = *(_QWORD *)(a1 + 96);
  v95 = *(_QWORD *)(a1 + 40);
  v96 = v40;
  v97 = v41;
  v98 = v42;
  v99 = v43;
  v100 = v44;
  v101 = v45;
  v102 = *(_OWORD *)(a1 + 80);
  v103 = v46;
  v47 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(v107, v47);
  v48 = sub_100230620();
  v50 = v49;
  sub_100186B8C((uint64_t)v107);
  v95 = v48;
  v96 = v50;
  v51 = sub_10016D37C();
  v95 = Text.init<A>(_:)(&v95, &type metadata for String, v51);
  v96 = v52;
  v97 = v53 & 1;
  v100 = v54;
  v55 = sub_10003F544(&qword_10055B4A8);
  v56 = sub_10002F9C8(&qword_10055B4B0, &qword_10055B4A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v57 = v89;
  Section<>.init(header:footer:content:)(v104, &v95, sub_10023138C, v92, &type metadata for Text, v55, &type metadata for Text, &protocol witness table for Text, v56, &protocol witness table for Text);
  v58 = v86;
  sub_100007A64(v84, v86, &qword_10055B448);
  v59 = v87;
  v75 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  v60 = v78;
  v75(v87, v14, v78);
  v77 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v62 = v79;
  v61 = v80;
  v77(v79, v35, v80);
  v63 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v65 = v81;
  v64 = v82;
  v63(v81, v57, v82);
  v66 = v58;
  v67 = v83;
  sub_100007A64(v66, v83, &qword_10055B448);
  v68 = (int *)sub_10003F544(&qword_10055B4B8);
  v75((char *)(v67 + v68[12]), v59, v60);
  v77((char *)(v67 + v68[16]), v62, v61);
  v63((char *)(v67 + v68[20]), v65, v64);
  v69 = *(void (**)(char *, uint64_t))(v91 + 8);
  v69(v89, v64);
  v70 = *(void (**)(char *, uint64_t))(v90 + 8);
  v71 = v61;
  v70(v85, v61);
  v72 = *(void (**)(char *, uint64_t))(v88 + 8);
  v72(v76, v60);
  sub_100007A28(v84, &qword_10055B448);
  v69(v65, v64);
  v70(v62, v71);
  v72(v87, v60);
  return sub_100007A28(v86, &qword_10055B448);
}

uint64_t sub_10022E514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  char v63;
  unsigned __int8 v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v47 = a2;
  v46 = type metadata accessor for InlinePickerStyle(0);
  v48 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v43 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_10003F544(&qword_10055B458);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v42 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 57);
  v8 = *(_BYTE *)(a1 + 58);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_DWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 96);
  v51 = *(_QWORD *)(a1 + 40);
  v52 = v5;
  LOBYTE(v53) = v6;
  BYTE1(v53) = v7;
  BYTE2(v53) = v8;
  v54 = v9;
  v55 = v10;
  v56 = *(_OWORD *)(a1 + 80);
  v57 = v11;
  sub_10003F544(&qword_10055B3F8);
  State.projectedValue.getter(&v58);
  v12 = v58;
  v13 = v59;
  v41 = v58;
  v14 = v61;
  v40 = v60;
  v39 = v62;
  v15 = v63;
  v38 = v64;
  v16 = v65;
  v17 = v66;
  v19 = v67;
  v18 = v68;
  KeyPath = swift_getKeyPath(&unk_1003CF570, v20);
  v58 = v12;
  v59 = v13;
  v60 = v40;
  v61 = v14;
  v62 = v39;
  v63 = v15;
  v64 = v38;
  v65 = v16;
  v66 = v17;
  v67 = v19;
  v68 = v18;
  v22 = sub_10003F544(&qword_10055B4C0);
  Binding.subscript.getter(&v51, KeyPath, v22);
  swift_bridgeObjectRelease(v14);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v41);
  v23 = v51;
  v24 = v52;
  v50 = a1;
  v58 = v51;
  v59 = v52;
  v60 = v53;
  type metadata accessor for MTPodcastShowType(0);
  v26 = v25;
  swift_retain();
  swift_retain();
  v27 = sub_10003F544(&qword_10055B550);
  v28 = sub_100026844(&qword_10055B2A0, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastShowType, (uint64_t)&unk_1003C8CE4);
  v29 = sub_100231544();
  v30 = v42;
  Picker.init(selection:label:content:)(&v58, v31, sub_10023153C, v49, &type metadata for EmptyView, v26, v27, &protocol witness table for EmptyView, v28, v29);
  swift_release(v24);
  swift_release(v23);
  v32 = v43;
  InlinePickerStyle.init()(v33);
  v34 = sub_10002F9C8(&qword_10055B460, &qword_10055B458, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
  v35 = v44;
  v36 = v46;
  View.pickerStyle<A>(_:)(v32, v44, v46, v34, &protocol witness table for InlinePickerStyle);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v30, v35);
}

uint64_t sub_10022E870(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_BYTE *)(a1 + 56);
  v3 = *(_BYTE *)(a1 + 57);
  v4 = *(_BYTE *)(a1 + 58);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_DWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 96);
  v17[0] = *(_QWORD *)(a1 + 40);
  v17[1] = v1;
  v18 = v2;
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = *(_OWORD *)(a1 + 80);
  v24 = v7;
  v8 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(v25, v8);
  v9 = v25[1];
  if (v26)
    v10 = &off_1004ACEE0;
  else
    v10 = &off_1004ACF18;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  v17[0] = v10;
  v11 = sub_10003F544(&qword_10055B560);
  type metadata accessor for MTPodcastShowType(0);
  v13 = v12;
  v14 = sub_10002F9C8(&qword_10055B568, &qword_10055B560, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = sub_100026844(&qword_10055B570, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastShowType, (uint64_t)&protocol conformance descriptor for MTPodcastShowType);
  return ((uint64_t (*)(_QWORD *, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>), _QWORD, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t))ForEach<>.init(_:content:))(v17, sub_10022E9C4, 0, v11, v13, &type metadata for Text, v14, &protocol witness table for Text, v15);
}

uint64_t sub_10022E9C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = *a1;
  if (*a1 == 1)
  {
    v5 = 0xD000000000000012;
    v6 = "SHOW_TYPE_EPISODIC";
LABEL_7:
    v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
    goto LABEL_9;
  }
  if (v3 == 4)
  {
    v5 = 0xD00000000000001ALL;
    v6 = "SHOW_TYPE_OLDEST_TO_NEWEST";
    goto LABEL_7;
  }
  if (v3 == 2)
  {
    v4 = 0x8000000100436660;
    v5 = 0xD000000000000010;
  }
  else
  {
    v5 = 0x4E574F4E4B4E55;
    v4 = 0xE700000000000000;
  }
LABEL_9:
  v7 = LocalizedStringKey.init(stringLiteral:)(v5, v4);
  result = Text.init(_:tableName:bundle:comment:)(v7);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_10022EAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 57);
  v8 = *(_BYTE *)(a1 + 58);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_DWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v60 = v4;
  *((_QWORD *)&v60 + 1) = v5;
  LOBYTE(v61) = v6;
  BYTE1(v61) = v7;
  BYTE2(v61) = v8;
  *((_QWORD *)&v61 + 1) = v9;
  v57 = v10;
  LODWORD(v62) = v10;
  v53 = v12;
  v55 = v11;
  *((_QWORD *)&v62 + 1) = v11;
  *(_QWORD *)&v63 = v12;
  v51 = v13;
  *((_QWORD *)&v63 + 1) = v13;
  v14 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(&v70, v14);
  v15 = v74;
  swift_bridgeObjectRelease(v71);
  AppStorage.wrappedValue.getter(&v60, *(_QWORD *)(a1 + 120), &type metadata for Bool);
  v59 = a2;
  switch(v15)
  {
    case 2:
      goto LABEL_5;
    case 1:
LABEL_6:
      v16 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000022, 0x80000001004364D0);
      goto LABEL_7;
    case 0:
      if ((v60 & 1) != 0)
      {
LABEL_5:
        v16 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x8000000100436530);
LABEL_7:
        v17 = Text.init(_:tableName:bundle:comment:)(v16);
        v48 = v18;
        v49 = v17;
        v47 = v19;
        v50 = v20;
        v21 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000028, 0x8000000100436500);
        v44 = v22;
        v45 = v21;
        v43 = v23;
        v46 = v24;
        v70 = v4;
        v71 = v5;
        LOBYTE(v72) = v6;
        BYTE1(v72) = v7;
        BYTE2(v72) = v8;
        v73 = v9;
        v74 = v57;
        v75 = v55;
        v76 = v53;
        v77 = v51;
        State.projectedValue.getter(&v60);
        v25 = v60;
        v26 = *((_QWORD *)&v61 + 1);
        v56 = v61;
        v58 = v60;
        v27 = v62;
        v28 = BYTE1(v62);
        v29 = BYTE2(v62);
        v30 = v63;
        v31 = v64;
        v52 = *((_QWORD *)&v63 + 1);
        v54 = *((_QWORD *)&v62 + 1);
        KeyPath = swift_getKeyPath(&unk_1003CF530, v32);
        v60 = v25;
        *(_QWORD *)&v61 = v56;
        *((_QWORD *)&v61 + 1) = v26;
        LOBYTE(v62) = v27;
        BYTE1(v62) = v28;
        BYTE2(v62) = v29;
        *((_QWORD *)&v62 + 1) = v54;
        LODWORD(v63) = v30;
        *((_QWORD *)&v63 + 1) = v52;
        *(_QWORD *)&v64 = v31;
        v34 = sub_10003F544(&qword_10055B4C0);
        Binding.subscript.getter(&v70, KeyPath, v34);
        swift_bridgeObjectRelease(v26);
        swift_release(*((_QWORD *)&v25 + 1));
        swift_release(KeyPath);
        swift_release(v58);
        v35 = v70;
        v36 = v71;
        LODWORD(v26) = v72;
        sub_100231190(a1, (uint64_t)&v60);
        result = swift_allocObject(&unk_1004B6DC8, 168, 7);
        v38 = v67;
        *(_OWORD *)(result + 112) = v66;
        *(_OWORD *)(result + 128) = v38;
        *(_OWORD *)(result + 144) = v68;
        *(_QWORD *)(result + 160) = v69;
        v39 = v63;
        *(_OWORD *)(result + 48) = v62;
        *(_OWORD *)(result + 64) = v39;
        v40 = v65;
        *(_OWORD *)(result + 80) = v64;
        *(_OWORD *)(result + 96) = v40;
        v41 = v61;
        *(_OWORD *)(result + 16) = v60;
        *(_OWORD *)(result + 32) = v41;
        *(_QWORD *)v59 = v45;
        *(_QWORD *)(v59 + 8) = v44;
        *(_BYTE *)(v59 + 16) = v43 & 1;
        *(_QWORD *)(v59 + 24) = v46;
        *(_QWORD *)(v59 + 32) = v49;
        *(_QWORD *)(v59 + 40) = v48;
        *(_BYTE *)(v59 + 48) = v47 & 1;
        *(_QWORD *)(v59 + 56) = v50;
        *(_QWORD *)(v59 + 64) = v35;
        *(_QWORD *)(v59 + 72) = v36;
        *(_DWORD *)(v59 + 80) = v26;
        *(_QWORD *)(v59 + 88) = sub_1002314CC;
        *(_QWORD *)(v59 + 96) = result;
        return result;
      }
      goto LABEL_6;
  }
  v42 = sub_10003F544(&qword_10055B538);
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v42, v42);
  __break(1u);
  return result;
}

uint64_t sub_10022EDF4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[7];

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_BYTE *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 57);
  v5 = *(_BYTE *)(a1 + 58);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v21 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)&v21 + 1) = v2;
  LOBYTE(v22) = v3;
  BYTE1(v22) = v4;
  BYTE2(v22) = v5;
  *((_QWORD *)&v22 + 1) = v6;
  *(_DWORD *)v23 = v7;
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 80);
  *(_QWORD *)&v23[24] = v8;
  v9 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(v30, v9);
  swift_bridgeObjectRelease(v30[1]);
  v30[0] = &off_1004ACF48;
  KeyPath = swift_getKeyPath(&unk_1003CF558, v10);
  sub_100231190(a1, (uint64_t)&v21);
  v12 = swift_allocObject(&unk_1004B6DF0, 168, 7);
  v13 = v27;
  *(_OWORD *)(v12 + 112) = v26;
  *(_OWORD *)(v12 + 128) = v13;
  *(_OWORD *)(v12 + 144) = v28;
  *(_QWORD *)(v12 + 160) = v29;
  v14 = *(_OWORD *)&v23[16];
  *(_OWORD *)(v12 + 48) = *(_OWORD *)v23;
  *(_OWORD *)(v12 + 64) = v14;
  v15 = v25;
  *(_OWORD *)(v12 + 80) = v24;
  *(_OWORD *)(v12 + 96) = v15;
  v16 = v22;
  *(_OWORD *)(v12 + 16) = v21;
  *(_OWORD *)(v12 + 32) = v16;
  v17 = sub_10003F544(&qword_10055B540);
  v18 = sub_10002F9C8(&qword_10055B548, &qword_10055B540, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_100026844(&qword_10055B2A8, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastHidesPlayedEpisodes, (uint64_t)&unk_1003C8CA0);
  return ForEach<>.init(_:id:content:)(v30, KeyPath, sub_100231534, v12, v17, &type metadata for Text, v18, v19, &protocol witness table for Text);
}

uint64_t sub_10022EF84@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v4 = *a1;
  AppStorage.wrappedValue.getter(&v15, *(_QWORD *)(a2 + 120), &type metadata for Bool);
  switch(v4)
  {
    case 2:
      v7 = 0x8000000100436590;
      v5 = 0xD000000000000025;
LABEL_10:
      v8 = LocalizedStringKey.init(stringLiteral:)(v5, v7);
      result = Text.init(_:tableName:bundle:comment:)(v8);
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v10;
      *(_BYTE *)(a3 + 16) = v11 & 1;
      *(_QWORD *)(a3 + 24) = v12;
      return result;
    case 1:
      v5 = 0xD000000000000026;
      v6 = "SHOW_SETTINGS_HIDE_PLAYED_EPISODES_OFF";
LABEL_9:
      v7 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      goto LABEL_10;
    case 0:
      if ((v15 & 1) != 0)
      {
        v5 = 0xD00000000000002DLL;
        v6 = "SHOW_SETTINGS_HIDE_PLAYED_EPISODES_DEFAULT_ON";
      }
      else
      {
        v5 = 0xD00000000000002ELL;
        v6 = "SHOW_SETTINGS_HIDE_PLAYED_EPISODES_DEFAULT_OFF";
      }
      goto LABEL_9;
  }
  type metadata accessor for MTPodcastHidesPlayedEpisodes(0);
  v14 = v4;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v13, &v14, v13, &type metadata for Int32);
  __break(1u);
  return result;
}

uint64_t sub_10022F098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t KeyPath;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  char *v38;
  unint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[8];

  v46 = a2;
  v3 = type metadata accessor for AccessibilityActionKind(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v45 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_10055B498);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for OpenURLAction(0);
  v8 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10003F544(&qword_10055B488);
  __chkstk_darwin(v43);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  v18 = *(_BYTE *)(a1 + 57);
  v19 = *(_BYTE *)(a1 + 58);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_DWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 96);
  v49 = *(_QWORD *)(a1 + 40);
  v50 = v16;
  v51 = v17;
  v52 = v18;
  v53 = v19;
  v54 = v20;
  v55 = v21;
  v56 = *(_OWORD *)(a1 + 80);
  v57 = v22;
  v23 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(v58, v23);
  sub_10022F3A8((uint64_t)v13);
  sub_100186B8C((uint64_t)v58);
  v24 = Text.init(_:)(v13);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  KeyPath = swift_getKeyPath(&unk_1003CF490, v25);
  v42 = v10;
  OpenURLAction.init(handler:)(sub_10022F8C0, 0);
  v32 = (char *)v7 + *(int *)(v5 + 28);
  v33 = v8;
  v34 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v35 = v44;
  v34(v32, v10, v44);
  *v7 = KeyPath;
  v36 = v43;
  sub_100007A64((uint64_t)v7, (uint64_t)&v15[*(int *)(v43 + 36)], &qword_10055B498);
  *(_QWORD *)v15 = v24;
  *((_QWORD *)v15 + 1) = v26;
  v15[16] = v30;
  *((_QWORD *)v15 + 3) = v28;
  sub_10016EC3C(v24, v26, v30);
  swift_bridgeObjectRetain(v28);
  sub_100007A28((uint64_t)v7, &qword_10055B498);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v35);
  sub_10016ED14(v24, v26, v30);
  v37 = swift_bridgeObjectRelease(v28);
  v38 = v45;
  static AccessibilityActionKind.default.getter(v37);
  v39 = sub_100231308();
  View.accessibilityAction(_:_:)(v38, sub_10022F914, 0, v36, v39);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v38, v48);
  return sub_100007A28((uint64_t)v15, &qword_10055B488);
}

uint64_t sub_10022F3A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  _QWORD *v52;

  v50 = a1;
  v1 = type metadata accessor for AttributedString.InterpolationOptions(0);
  v2 = *(_QWORD *)(v1 - 8);
  v48 = v1;
  v49 = v2;
  __chkstk_darwin(v1);
  v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString.FormattingOptions(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_10055B4F0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AttributedString(0);
  v46 = *(_QWORD *)(v19 - 8);
  v47 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.init(stringLiteral:)(0x53474E4954544553, 0xEC0000005050415FLL);
  v22 = type metadata accessor for Locale(0);
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v45 = v22;
  v44(v15, 1, 1, v22);
  v52 = _swiftEmptyArrayStorage;
  v23 = sub_100026844(&qword_10055B4F8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions, (uint64_t)&protocol conformance descriptor for AttributedString.FormattingOptions);
  v42 = v23;
  v24 = sub_10003F544(&qword_10055B500);
  v41 = v24;
  v40 = sub_10002F9C8(&qword_10055B508, &qword_10055B500, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v24, v40, v10, v23);
  v37 = 256;
  AttributedString.init(localized:options:table:bundle:locale:comment:)(v18, v12, 0, 0, 0, v15, 0, 0, v37);
  v51[0] = swift_getKeyPath(&unk_1003CF4C0, v25);
  KeyPath = swift_getKeyPath(&unk_1003CF4F0, v51);
  URL.init(string:)(0xD000000000000013, 0x8000000100436450);
  v27 = sub_1002313EC();
  AttributedString.subscript.setter(v9, KeyPath, v27);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(81, 1);
  v28._countAndFlagsBits = 0xD000000000000050;
  v28._object = (void *)0x8000000100436470;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
  v52 = _swiftEmptyArrayStorage;
  v29 = sub_100026844(&qword_10055B518, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.InterpolationOptions, (uint64_t)&protocol conformance descriptor for AttributedString.InterpolationOptions);
  v30 = sub_10003F544(&qword_10055B520);
  v31 = sub_10002F9C8(&qword_10055B528, &qword_10055B520, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = v43;
  v33 = v30;
  v34 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v33, v31, v48, v29);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)(v21, v32);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v34);
  v35._countAndFlagsBits = 46;
  v35._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v35);
  String.LocalizationValue.init(stringInterpolation:)(v6);
  v44(v15, 1, 1, v45);
  v52 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v41, v40, v10, v42);
  LOWORD(v38) = 256;
  AttributedString.init(localized:options:table:bundle:locale:comment:)(v18, v12, 0, 0, 0, v15, 0, 0, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v21, v47);
}

uint64_t sub_10022F844(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for OpenURLAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.openURL.setter(v4);
}

uint64_t sub_10022F8C0()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v0, "openGlobalSettings");

  return static OpenURLAction.Result.handled.getter();
}

void sub_10022F914()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v0, "openGlobalSettings");

}

uint64_t sub_10022F960@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void (*v69)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  void (*v87)(_BYTE *, uint64_t, __n128);
  uint64_t v88;
  __n128 v89;
  uint64_t result;
  uint64_t v91;
  _BYTE v92[4];
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  _BYTE *v115;
  unsigned __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  uint64_t v133;

  v108 = a2;
  v114 = type metadata accessor for ShowAutoDownloadPickerLink(0);
  v112 = *(_QWORD *)(v114 - 8);
  v3 = __chkstk_darwin(v114);
  v113 = &v92[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v115 = &v92[-v5];
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 57);
  LOBYTE(v5) = *(_BYTE *)(a1 + 58);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_DWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 96);
  v127 = *(_QWORD *)(a1 + 40);
  v128 = v6;
  LOBYTE(v129) = v7;
  BYTE1(v129) = v8;
  BYTE2(v129) = v5;
  v130 = v9;
  v131 = v10;
  v132 = *(_OWORD *)(a1 + 80);
  v133 = v11;
  v111 = sub_10003F544(&qword_10055B3F8);
  State.projectedValue.getter(&v116);
  v13 = *((_QWORD *)&v116 + 1);
  v12 = v116;
  v110 = v116;
  v14 = *((_QWORD *)&v117 + 1);
  v109 = v117;
  v15 = v118;
  v16 = BYTE1(v118);
  v17 = BYTE2(v118);
  v18 = *((_QWORD *)&v118 + 1);
  LODWORD(v107) = v119;
  v106 = *((_QWORD *)&v119 + 1);
  v19 = v120;
  KeyPath = swift_getKeyPath(&unk_1003CF450, v20);
  v116 = __PAIR128__(v13, v12);
  *(_QWORD *)&v117 = v109;
  *((_QWORD *)&v117 + 1) = v14;
  LOBYTE(v118) = v15;
  BYTE1(v118) = v16;
  BYTE2(v118) = v17;
  *((_QWORD *)&v118 + 1) = v18;
  LODWORD(v119) = v107;
  *((_QWORD *)&v119 + 1) = v106;
  *(_QWORD *)&v120 = v19;
  v107 = sub_10003F544(&qword_10055B4C0);
  Binding.subscript.getter(v126, KeyPath, v107);
  swift_bridgeObjectRelease(v14);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v110);
  v22 = v126[0];
  v106 = v126[1];
  v105 = v126[2];
  v23 = *(_QWORD *)(a1 + 144);
  v109 = *(_QWORD *)(a1 + 136);
  v104 = v23;
  v24 = *(_QWORD *)(a1 + 40);
  v110 = *(_QWORD *)(a1 + 48);
  LODWORD(v19) = *(unsigned __int8 *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 57);
  v93 = *(unsigned __int8 *)(a1 + 58);
  v26 = *(_QWORD *)(a1 + 64);
  LODWORD(v12) = *(_DWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 80);
  v95 = *(_QWORD *)(a1 + 88);
  v94 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v116 = v24;
  *((_QWORD *)&v116 + 1) = v110;
  LOBYTE(v117) = v19;
  BYTE1(v117) = v25;
  BYTE2(v117) = v93;
  *((_QWORD *)&v117 + 1) = v26;
  LODWORD(v118) = v12;
  *((_QWORD *)&v118 + 1) = v27;
  *(_QWORD *)&v119 = v95;
  *((_QWORD *)&v119 + 1) = v94;
  swift_bridgeObjectRetain(v23);
  v28 = v111;
  State.wrappedValue.getter(&v127, v111);
  v29 = v129;
  v30 = swift_bridgeObjectRelease(v128);
  v31 = v22;
  LOBYTE(v22) = v25;
  v32 = v93;
  ShowAutoDownloadPickerLink.init(autoDownloadOption:openGlobalSettingsBlock:uuid:isSerialShow:)(v31, v106, v105, sub_10023031C, 0, v109, v104, v29, v30);
  v103 = v24;
  *(_QWORD *)&v116 = v24;
  *((_QWORD *)&v116 + 1) = v110;
  LODWORD(v104) = v19;
  LOBYTE(v117) = v19;
  v33 = v22;
  BYTE1(v117) = v22;
  v34 = v32;
  BYTE2(v117) = v32;
  v35 = v94;
  v36 = v26;
  *((_QWORD *)&v117 + 1) = v26;
  LODWORD(v106) = v12;
  LODWORD(v118) = v12;
  v105 = v27;
  *((_QWORD *)&v118 + 1) = v27;
  v37 = v95;
  *(_QWORD *)&v119 = v95;
  *((_QWORD *)&v119 + 1) = v94;
  State.wrappedValue.getter(&v127, v28);
  v38 = *((_QWORD *)&v132 + 1);
  swift_bridgeObjectRelease(v128);
  AppStorage.wrappedValue.getter(&v116, *(_QWORD *)(a1 + 128), &type metadata for Bool);
  switch(v38)
  {
    case 0:
      goto LABEL_6;
    case 1:
LABEL_5:
      v39 = 28239;
      v40 = 0xE200000000000000;
LABEL_7:
      v41 = LocalizedStringKey.init(stringLiteral:)(v39, v40);
      v42 = Text.init(_:tableName:bundle:comment:)(v41);
      v100 = v42;
      v44 = v43;
      v99 = v43;
      v46 = v45;
      v98 = v45;
      v48 = v47 & 1;
      v96 = v47 & 1;
      v102 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x8000000100436430);
      v109 = v49;
      v97 = v50;
      v101 = v51;
      v127 = v103;
      v128 = v110;
      LOBYTE(v129) = v104;
      BYTE1(v129) = v33;
      BYTE2(v129) = v34;
      v130 = v36;
      v131 = v106;
      *(_QWORD *)&v132 = v105;
      *((_QWORD *)&v132 + 1) = v37;
      v133 = v35;
      sub_10016EC3C(v42, v44, v48);
      swift_bridgeObjectRetain(v46);
      State.projectedValue.getter(&v116);
      v53 = *((_QWORD *)&v116 + 1);
      v52 = v116;
      v111 = v116;
      v54 = *((_QWORD *)&v117 + 1);
      v110 = v117;
      LODWORD(v106) = v118;
      v55 = BYTE1(v118);
      v56 = BYTE2(v118);
      v57 = *((_QWORD *)&v118 + 1);
      v58 = v119;
      v59 = *((_QWORD *)&v119 + 1);
      v105 = v120;
      v61 = swift_getKeyPath(&unk_1003CF470, v60);
      v116 = __PAIR128__(v53, v52);
      *(_QWORD *)&v117 = v110;
      *((_QWORD *)&v117 + 1) = v54;
      LOBYTE(v118) = v106;
      BYTE1(v118) = v55;
      BYTE2(v118) = v56;
      *((_QWORD *)&v118 + 1) = v57;
      LODWORD(v119) = v58;
      *((_QWORD *)&v119 + 1) = v59;
      *(_QWORD *)&v120 = v105;
      Binding.subscript.getter(&v127, v61, v107);
      swift_bridgeObjectRelease(v54);
      swift_release(v53);
      swift_release(v61);
      swift_release(v111);
      v62 = v127;
      v63 = v128;
      v111 = v129;
      sub_100231190(a1, (uint64_t)&v116);
      v64 = swift_allocObject(&unk_1004B6D58, 168, 7);
      v65 = v123;
      *(_OWORD *)(v64 + 112) = v122;
      *(_OWORD *)(v64 + 128) = v65;
      *(_OWORD *)(v64 + 144) = v124;
      *(_QWORD *)(v64 + 160) = v125;
      v66 = v119;
      *(_OWORD *)(v64 + 48) = v118;
      *(_OWORD *)(v64 + 64) = v66;
      v67 = v121;
      *(_OWORD *)(v64 + 80) = v120;
      *(_OWORD *)(v64 + 96) = v67;
      v68 = v117;
      *(_OWORD *)(v64 + 16) = v116;
      *(_OWORD *)(v64 + 32) = v68;
      v69 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v112 + 16);
      v70 = v113;
      v71 = v114;
      v69(v113, v115, v114);
      LOBYTE(v116) = v97 & 1;
      LOBYTE(v53) = v96;
      LOBYTE(v127) = v96;
      v72 = v108;
      v69(v108, v70, v71);
      v73 = &v72[*(int *)(sub_10003F544(&qword_10055B4D0) + 48)];
      v74 = v116;
      LOBYTE(v72) = v127;
      v75 = v109;
      *(_QWORD *)v73 = v102;
      *((_QWORD *)v73 + 1) = v75;
      v73[16] = v74;
      v76 = v101;
      v77 = v100;
      *((_QWORD *)v73 + 3) = v101;
      *((_QWORD *)v73 + 4) = v77;
      v78 = v99;
      *((_QWORD *)v73 + 5) = v99;
      v73[48] = (_BYTE)v72;
      v79 = v98;
      *((_QWORD *)v73 + 7) = v98;
      *((_QWORD *)v73 + 8) = v62;
      v80 = v63;
      v81 = v111;
      *((_QWORD *)v73 + 9) = v63;
      *((_QWORD *)v73 + 10) = v81;
      *((_QWORD *)v73 + 11) = sub_100231398;
      *((_QWORD *)v73 + 12) = v64;
      v82 = v75;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      sub_10016EC3C(v77, v78, (char)v72);
      v83 = v62;
      swift_retain();
      v84 = v80;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v79);
      sub_10016EC3C(v77, v78, v53);
      swift_bridgeObjectRetain(v79);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10016ED14(v77, v78, v53);
      swift_bridgeObjectRelease(v76);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v79);
      sub_10016ED14(v77, v78, v53);
      swift_release(v64);
      swift_release(v80);
      v85 = v83;
      swift_release(v83);
      v86 = swift_bridgeObjectRelease(v79);
      v87 = *(void (**)(_BYTE *, uint64_t, __n128))(v112 + 8);
      v88 = v114;
      v87(v115, v114, v86);
      LOBYTE(v80) = v127;
      swift_bridgeObjectRelease(v76);
      swift_bridgeObjectRelease(v109);
      sub_10016ED14(v77, v78, v80);
      swift_release(v64);
      swift_release(v84);
      swift_release(v85);
      v89 = swift_bridgeObjectRelease(v79);
      return ((uint64_t (*)(_BYTE *, uint64_t, __n128))v87)(v113, v88, v89);
    case 0xFFFFFFFFLL:
      if ((v116 & 1) != 0)
        goto LABEL_5;
LABEL_6:
      v39 = 6710863;
      v40 = 0xE300000000000000;
      goto LABEL_7;
  }
  v91 = sub_10003F544(&qword_10055B4C8);
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v91, v91);
  __break(1u);
  return result;
}

void sub_10023031C()
{
  sub_100230328((void (*)(void))_sSo13UIApplicationC8PodcastsE18openGlobalSettings19deepLinkDestinationy0B2UI0de4DeepG5StateC0H0O_tF_0);
}

void sub_100230328(void (*a1)(void))
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  a1();

}

uint64_t sub_100230378(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[7];

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_BYTE *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 57);
  v5 = *(_BYTE *)(a1 + 58);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v21 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)&v21 + 1) = v2;
  LOBYTE(v22) = v3;
  BYTE1(v22) = v4;
  BYTE2(v22) = v5;
  *((_QWORD *)&v22 + 1) = v6;
  *(_DWORD *)v23 = v7;
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 80);
  *(_QWORD *)&v23[24] = v8;
  v9 = sub_10003F544(&qword_10055B3F8);
  State.wrappedValue.getter(v30, v9);
  swift_bridgeObjectRelease(v30[1]);
  v30[0] = &off_1004ACF78;
  sub_100231190(a1, (uint64_t)&v21);
  v10 = swift_allocObject(&unk_1004B6D80, 168, 7);
  v11 = v27;
  *(_OWORD *)(v10 + 112) = v26;
  *(_OWORD *)(v10 + 128) = v11;
  *(_OWORD *)(v10 + 144) = v28;
  *(_QWORD *)(v10 + 160) = v29;
  v12 = *(_OWORD *)&v23[16];
  *(_OWORD *)(v10 + 48) = *(_OWORD *)v23;
  *(_OWORD *)(v10 + 64) = v12;
  v13 = v25;
  *(_OWORD *)(v10 + 80) = v24;
  *(_OWORD *)(v10 + 96) = v13;
  v14 = v22;
  *(_OWORD *)(v10 + 16) = v21;
  *(_OWORD *)(v10 + 32) = v14;
  v15 = sub_10003F544(&qword_10055B4D8);
  type metadata accessor for MTPodcastDeletePlayed(0);
  v17 = v16;
  v18 = sub_10002F9C8(&qword_10055B4E0, &qword_10055B4D8, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_100026844(&qword_10055B4E8, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastDeletePlayed, (uint64_t)&protocol conformance descriptor for MTPodcastDeletePlayed);
  return ForEach<>.init(_:content:)(v30, sub_1002313A4, v10, v15, v17, &type metadata for Text, v18, &protocol witness table for Text, v19);
}

uint64_t sub_10023050C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  AppStorage.wrappedValue.getter(&v14, *(_QWORD *)(a2 + 128), &type metadata for Bool);
  switch(v4)
  {
    case 0:
      v5 = 6710863;
      v6 = 0xE300000000000000;
      goto LABEL_9;
    case 1:
      v5 = 28239;
      v6 = 0xE200000000000000;
LABEL_9:
      v7 = LocalizedStringKey.init(stringLiteral:)(v5, v6);
      result = Text.init(_:tableName:bundle:comment:)(v7);
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v9;
      *(_BYTE *)(a3 + 16) = v10 & 1;
      *(_QWORD *)(a3 + 24) = v11;
      return result;
    case 0xFFFFFFFFLL:
      v5 = 0x20746C7561666544;
      if ((v14 & 1) != 0)
        v6 = 0xEC000000296E4F28;
      else
        v6 = 0xED00002966664F28;
      goto LABEL_9;
  }
  type metadata accessor for MTPodcastDeletePlayed(0);
  v13 = v4;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v12, &v13, v12, &type metadata for Int64);
  __break(1u);
  return result;
}

uint64_t sub_100230620()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  const char *v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  if ((MTPodcastEpisodeLimit.allowsAutomaticDownloads.getter(*(_QWORD *)(v0 + 40)) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 16) & 1) != 0 && os_feature_enabled_serial_sort_auto_downloads())
    {
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000025;
      v9 = 0xE000000000000000;
      v3 = "SERIAL_DOWNLOAD_FOOTER_ON_WITH_DEVICE";
    }
    else
    {
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD00000000000001ELL;
      v9 = 0xE000000000000000;
      v3 = "DOWNLOAD_FOOTER_ON_WITH_DEVICE";
    }
    v4 = (unint64_t)(v3 - 32) | 0x8000000000000000;
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v9 = 0xE000000000000000;
    v4 = 0x80000001004363C0;
    v2 = 0xD000000000000013;
  }
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100230760(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_10003F544(&qword_10055B530);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_1002307B8()
{
  return sub_100026844(&qword_10055B2A0, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastShowType, (uint64_t)&unk_1003C8CE4);
}

uint64_t sub_1002307E4()
{
  return sub_100026844(&qword_10055B2A8, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastHidesPlayedEpisodes, (uint64_t)&unk_1003C8CA0);
}

uint64_t sub_100230810()
{
  return sub_100026844(&qword_10055B2B0, (uint64_t (*)(uint64_t))type metadata accessor for MTPodcastDeletePlayed, (uint64_t)&unk_1003C8C5C);
}

uint64_t sub_10023083C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for ShowSettingsView_Previews.DummyController()
{
  return objc_opt_self(_TtCV8Podcasts25ShowSettingsView_Previews15DummyController);
}

uint64_t sub_100230888()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_1002308B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *v1;
  v4 = MTPodcastEpisodeLimit.intValue.getter(0);
  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(_BYTE *)(v3 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 17) = 1;
  *(_QWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFFLL;
  return swift_bridgeObjectRetain(v5);
}

__n128 sub_10023090C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __n128 result;

  sub_100186B64(a1);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  return result;
}

uint64_t initializeWithCopy for ShowSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ShowSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for ShowSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowSettings(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowSettings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowSettings()
{
  return &type metadata for ShowSettings;
}

double destroy for ShowSettingsView(_QWORD *a1)
{
  double result;

  sub_10003D380(a1);
  swift_bridgeObjectRelease(a1[6]);
  swift_release(a1[12]);
  swift_release(a1[13]);
  swift_release(a1[14]);
  swift_release(a1[15]);
  swift_release(a1[16]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[18]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v9;
  v11 = *(_QWORD *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 136) = v10;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v12;
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10013C884((_QWORD *)a1, (_QWORD *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release(v10);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

__n128 initializeWithTake for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10003D380((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowSettingsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowSettingsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowSettingsView()
{
  return &type metadata for ShowSettingsView;
}

uint64_t sub_100230F3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10046B870, 1);
}

BOOL sub_100230F4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BOOL8 result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 == *(_QWORD *)a2 && v5 == v6)
    return ((*((unsigned __int8 *)a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
        && ((*((unsigned __int8 *)a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) == 0
        && ((*((unsigned __int8 *)a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
        && a1[3] == *(_QWORD *)(a2 + 24)
        && *((_DWORD *)a1 + 8) == *(_DWORD *)(a2 + 32)
        && a1[5] == *(_QWORD *)(a2 + 40)
        && a1[6] == *(_QWORD *)(a2 + 48);
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0);
  result = 0;
  if ((v8 & 1) != 0)
    return ((*((unsigned __int8 *)a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
        && ((*((unsigned __int8 *)a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) == 0
        && ((*((unsigned __int8 *)a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
        && a1[3] == *(_QWORD *)(a2 + 24)
        && *((_DWORD *)a1 + 8) == *(_DWORD *)(a2 + 32)
        && a1[5] == *(_QWORD *)(a2 + 40)
        && a1[6] == *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t sub_100231010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10022C7CC(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100231018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B3B0;
  if (!qword_10055B3B0)
  {
    v1 = sub_10003CA40(&qword_10055B3A8);
    sub_100231084();
    sub_100231100();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B3B0);
  }
  return result;
}

unint64_t sub_100231084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B3B8;
  if (!qword_10055B3B8)
  {
    v1 = sub_10003CA40(&qword_10055B3C0);
    sub_10002F9C8(&qword_10055B3C8, &qword_10055B3D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B3B8);
  }
  return result;
}

unint64_t sub_100231100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B3D8;
  if (!qword_10055B3D8)
  {
    v1 = sub_10003CA40(&qword_10055B3E0);
    sub_10002F9C8(&qword_10055B3E8, &qword_10055B3F0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B3D8);
  }
  return result;
}

uint64_t sub_100231190(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ShowSettingsView(a2, a1);
  return a2;
}

uint64_t sub_1002311C8(uint64_t a1)
{
  uint64_t v1;

  return sub_10022CADC(a1, v1 + 16);
}

unint64_t sub_1002311D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B400;
  if (!qword_10055B400)
  {
    v1 = sub_10003CA40(&qword_10055B398);
    sub_10002F9C8(&qword_10055B408, &qword_10055B390, (uint64_t)&protocol conformance descriptor for Form<A>);
    sub_10002F9C8(&qword_10055B410, &qword_10055B418, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B400);
  }
  return result;
}

uint64_t sub_10023126C()
{
  uint64_t v0;

  return sub_10022DCDC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100231274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10022E514(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10023127C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10022EAA8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100231284()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B478;
  if (!qword_10055B478)
  {
    v1 = sub_10003CA40(&qword_10055B430);
    sub_100231308();
    sub_100026844(&qword_10055B4A0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B478);
  }
  return result;
}

unint64_t sub_100231308()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B480;
  if (!qword_10055B480)
  {
    v1 = sub_10003CA40(&qword_10055B488);
    sub_10002F9C8(&qword_10055B490, &qword_10055B498, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B480);
  }
  return result;
}

uint64_t sub_10023138C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10022F960(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100231398()
{
  uint64_t v0;

  return sub_100230378(v0 + 16);
}

uint64_t sub_1002313A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10023050C(a1, v2 + 16, a2);
}

uint64_t sub_1002313AC()
{
  return EnvironmentValues.openURL.getter();
}

void sub_1002313D0()
{
  AttributeScopes.FoundationAttributes.link.getter();
  __break(1u);
}

unint64_t sub_1002313EC()
{
  unint64_t result;

  result = qword_10055B510;
  if (!qword_10055B510)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LinkAttribute, &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute);
    atomic_store(result, (unint64_t *)&qword_10055B510);
  }
  return result;
}

void sub_100231430(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1002313EC();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_100231454()
{
  return 8;
}

uint64_t sub_100231460(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_100231468(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100231478()
{
  uint64_t v0;

  v0 = sub_10003F544(&qword_10055B530);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_1002314BC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1002314CC()
{
  uint64_t v0;

  return sub_10022EDF4(v0 + 16);
}

uint64_t sub_1002314D8()
{
  _QWORD *v0;

  sub_10003D380(v0 + 2);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_bridgeObjectRelease(v0[20]);
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_100231534@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10022EF84(a1, v2 + 16, a2);
}

uint64_t sub_10023153C()
{
  uint64_t v0;

  return sub_10022E870(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100231544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B558;
  if (!qword_10055B558)
  {
    v1 = sub_10003CA40(&qword_10055B550);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B558);
  }
  return result;
}

_QWORD *sub_1002315A0(_QWORD *a1)
{
  destroy for ShowSettingsView(a1);
  return a1;
}

uint64_t sub_1002315CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10022D80C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1002315D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B5A0;
  if (!qword_10055B5A0)
  {
    v1 = sub_10003CA40(&qword_10055B588);
    sub_10002F9C8(&qword_10055B5A8, &qword_10055B5B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B5A0);
  }
  return result;
}

unint64_t sub_100231664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B5B8;
  if (!qword_10055B5B8)
  {
    v1 = sub_10003CA40(&qword_10055B578);
    sub_10002F9C8(&qword_10055B598, &qword_10055B590, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10055B5B8);
  }
  return result;
}

uint64_t sub_1002316EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10022D0B4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1002316F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100231720(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_100231744()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_100231754(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_100231774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055B5C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002317BC()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;

  v0 = sub_10003CA40(&qword_10055B3A0);
  v3 = sub_10003CA40(&qword_10055B398);
  v4 = &type metadata for String;
  v5 = sub_1002311D0();
  v6 = sub_10016D37C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
  v3 = v0;
  v4 = (void *)OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
}

uint64_t Episode.init(from:clickAction:wantsListenNowReason:)(void *a1, uint64_t a2, _BOOL4 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  unint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  _BYTE *v60;
  id v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  objc_class *v67;
  char Attributed;
  id v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  unsigned __int8 v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  id v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  id v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  id v115;
  void *v116;
  id v117;
  uint64_t v118;
  char v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  void *v132;
  _BYTE *v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  unsigned __int8 v137;
  __int16 v139;
  __int16 v140;
  __int16 v141;
  _BYTE v142[12];
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  _BYTE *v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  id v160;
  id v161;
  unsigned int v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BOOL4 v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;

  v4 = v3;
  v185 = a2;
  v7 = sub_10003F544((uint64_t *)&unk_10055B5E0);
  v8 = __chkstk_darwin(v7);
  v10 = &v142[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v142[-v11];
  v13 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v14 = __chkstk_darwin(v13);
  v16 = &v142[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v181 = &v142[-v18];
  v19 = __chkstk_darwin(v17);
  v21 = &v142[-v20];
  __chkstk_darwin(v19);
  v183 = &v142[-v22];
  v23 = sub_10003F544(&qword_1005522F0);
  v24 = __chkstk_darwin(v23);
  v180 = &v142[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v27 = &v142[-v26];
  v28 = sub_10003F544(&qword_10055D840);
  v29 = __chkstk_darwin(v28);
  v179 = &v142[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __chkstk_darwin(v29);
  v33 = &v142[-v32];
  v34 = __chkstk_darwin(v31);
  v182 = &v142[-v35];
  __chkstk_darwin(v34);
  v184 = &v142[-v36];
  v37 = objc_msgSend(a1, "uuid");
  if (!v37)
  {

LABEL_10:
    sub_100007A28(v185, (uint64_t *)&unk_100554FF0);
    return 0;
  }
  v38 = v37;
  v177 = v10;
  v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  v41 = objc_msgSend(a1, "podcast");
  if (!v41)
  {

LABEL_9:
    swift_bridgeObjectRelease(v40);
    goto LABEL_10;
  }
  v42 = v41;
  v178 = v27;
  v43 = objc_msgSend(a1, "podcastUuid");
  if (!v43)
  {

    goto LABEL_9;
  }
  v44 = v43;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v170 = v46;
  v171 = v45;

  v169 = MTEpisode.contentId.getter(v47);
  LODWORD(v154) = v48;
  v49 = objc_msgSend(a1, "bestTitle");
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v167 = v52;
    v168 = v51;

  }
  else
  {
    v167 = 0xE000000000000000;
    v168 = 0;
  }
  v54 = objc_msgSend(a1, "numberedTitle");
  if (v54)
  {
    v55 = v54;
    v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v165 = v56;

  }
  else
  {
    v166 = 0;
    v165 = 0xE000000000000000;
  }
  v57 = objc_msgSend(a1, "podcast");
  v173 = v40;
  v172 = a3;
  if (v57)
  {
    v58 = v57;
    MTPodcast.artworkModel.getter();

  }
  else
  {
    v59 = type metadata accessor for ArtworkModel(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v184, 1, 1, v59);
  }
  v60 = v33;
  v174 = v16;
  v175 = v4;
  v61 = objc_msgSend(a1, "bestSummary");
  v62 = v42;
  if (v61)
  {
    v63 = v61;
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v66 = v65;

    v67 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    Attributed = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v69 = objc_allocWithZone(v67);
    v164 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v64, v66, 0, Attributed & 1);
  }
  else
  {
    v164 = 0;
  }
  v70 = (uint64_t)v178;
  objc_msgSend(a1, "pubDate");
  if (v71 <= 0.0)
  {
    v74 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v70, 1, 1, v74);
  }
  else
  {
    objc_msgSend(a1, "pubDate");
    Date.init(timeIntervalSinceReferenceDate:)(v72);
    v73 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v70, 0, 1, v73);
  }
  v75 = v60;
  v76 = objc_msgSend(a1, "assetURL");
  if (v76)
  {
    v77 = v76;
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v80 = v79;

    URL.init(string:)(v78, v80);
    swift_bridgeObjectRelease(v80);
    v81 = type metadata accessor for URL(0);
    v82 = *(_QWORD *)(v81 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v82 + 48))(v21, 1, v81) != 1)
    {
      v84 = v183;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 32))(v183, v21, v81);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v81);
      v42 = v62;
      goto LABEL_29;
    }
    sub_100007A28((uint64_t)v21, (uint64_t *)&unk_100553DC0);
    v42 = v62;
  }
  v83 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v183, 1, 1, v83);
LABEL_29:
  v85 = objc_msgSend(a1, "isVideo");
  v86 = v172;
  if ((v85 & 1) != 0)
  {
    v87 = 1;
  }
  else if (objc_msgSend(a1, "isExternalType"))
  {
    v87 = 2;
  }
  else
  {
    v87 = 0;
  }
  v163 = v87;
  v162 = objc_msgSend(a1, "isExplicit");
  objc_msgSend(a1, "duration");
  v89 = v88;
  v161 = objc_msgSend(a1, "episodeNumber");
  v160 = objc_msgSend(a1, "seasonNumber");
  v90 = objc_msgSend(a1, "podcast");
  if (v90)
  {
    v91 = v90;
    v159 = objc_msgSend(v90, "isSerialShowTypeInFeed");

  }
  else
  {
    v159 = 0;
  }
  v92 = objc_msgSend(v42, "title");
  if (v92)
  {
    v93 = v92;
    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
    v157 = v94;

  }
  else
  {
    v158 = 0;
    v157 = 0;
  }
  v156 = objc_msgSend(a1, "entitlementState");
  v95 = objc_msgSend(a1, "podcast");
  if (v95
    && (v96 = v95, v97 = objc_msgSend(v95, "channel"), v96, v97)
    && (v98 = objc_msgSend(v97, "subscriptionName"), v97, v98))
  {
    v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
    v149 = v99;

  }
  else
  {
    v150 = 0;
    v149 = 0;
  }
  v100 = objc_msgSend(a1, "podcast");
  if (v100
    && (v101 = v100, v102 = objc_msgSend(v100, "channel"), v101, v102)
    && (v103 = objc_msgSend(v102, "name"), v102, v103))
  {
    v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
    v147 = v104;

  }
  else
  {
    v148 = 0;
    v147 = 0;
  }
  v105 = objc_msgSend(a1, "podcast");
  if (v105
    && (v106 = v105, v107 = objc_msgSend(v105, "title"), v106, v107))
  {
    v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v145 = v108;

  }
  else
  {
    v146 = 0;
    v145 = 0;
  }
  v109 = objc_msgSend(v42, "displayType");
  if (v109)
  {
    v110 = v109;
    v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
    v113 = v112;

  }
  else
  {
    v111 = 0;
    v113 = 0xE000000000000000;
  }
  v114 = DisplayType.init(rawValue:)(v111, v113);
  v115 = objc_msgSend(a1, "podcast");
  v155 = v114;
  if (v115
    && (v116 = v115, v117 = objc_msgSend(v115, "channel"), v116, v117))
  {
    v118 = (uint64_t)objc_msgSend(v117, "storeId");

    v144 = AdamID.init(rawValue:)(v118 & ~(v118 >> 63));
    v143 = 0;
  }
  else
  {
    v144 = 0;
    v143 = 1;
  }
  v119 = v154;
  v120 = objc_msgSend(a1, "podcast");
  v121 = v120;
  if (v120)
  {
    v122 = (uint64_t)objc_msgSend(v120, "storeCollectionId");

    v154 = AdamID.init(rawValue:)(v122 & ~(v122 >> 63));
  }
  else
  {
    v154 = 0;
  }
  v123 = (uint64_t)v177;
  LODWORD(v177) = v119 & 1;
  if ((objc_msgSend(a1, "isTrailer") & 1) != 0)
    v124 = 2;
  else
    v124 = objc_msgSend(a1, "isBonus") ^ 1;
  v153 = v124;
  if (v86)
  {
    MTEpisode.listenNowReason.getter((uint64_t)v12);
  }
  else
  {
    v125 = type metadata accessor for EpisodeListenNowReason(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 56))(v12, 1, 1, v125);
  }
  v126 = (uint64_t)v12;
  v172 = v121 == 0;
  v151 = objc_msgSend(a1, "storeTrackId");
  v127 = sub_100007A64((uint64_t)v184, (uint64_t)v182, &qword_10055D840);
  v128 = MTPodcast.uberBackgroundArtworkModel.getter(v127);
  v152 = v75;
  v129 = v179;
  MTEpisode.artworkModel.getter(v128);
  v130 = v180;
  sub_100007A64((uint64_t)v178, (uint64_t)v180, &qword_1005522F0);
  v131 = type metadata accessor for URL(0);
  v132 = v42;
  v133 = v181;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v181, 1, 1, v131);
  v134 = (uint64_t)v174;
  sub_100007A64((uint64_t)v183, (uint64_t)v174, (uint64_t *)&unk_100553DC0);
  v135 = objc_msgSend(v132, "showTypeSetting");
  sub_100007A64(v126, v123, (uint64_t *)&unk_10055B5E0);
  v136 = v123;
  v137 = objc_msgSend(a1, "hasFreeVersion");
  objc_msgSend(a1, "upNextScore");
  HIBYTE(v141) = v159;
  LOBYTE(v141) = v155;
  HIBYTE(v140) = v153;
  LOBYTE(v140) = 0;
  HIBYTE(v139) = v162;
  LOBYTE(v139) = v163;
  v53 = dispatch thunk of Episode.__allocating_init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:adamId:channelAdamId:channelName:artwork:showUberArtwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showDisplayType:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(v168, v167, v166, v165, v176, v173, v171, v170, v154, v172, v169, (_BYTE)v177, v144, (_BYTE)v143, v148, v147, v182, v152, v129,
          v158,
          v157,
          v164,
          v130,
          v133,
          v134,
          v139,
          0,
          0,
          v89,
          0,
          v160,
          0,
          v161,
          v140,
          v146,
          v145,
          v141,
          v135,
          0,
          v136,
          v156,
          v137,
          v150,
          v149,
          v151,
          0);

  sub_100007A28(v185, (uint64_t *)&unk_100554FF0);
  sub_100007A28(v126, (uint64_t *)&unk_10055B5E0);
  sub_100007A28((uint64_t)v183, (uint64_t *)&unk_100553DC0);
  sub_100007A28((uint64_t)v178, &qword_1005522F0);
  sub_100007A28((uint64_t)v184, &qword_10055D840);
  return v53;
}

void sub_100232570()
{
  qword_100572EC0 = (uint64_t)&off_1004ACFB0;
}

uint64_t sub_100232584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100563120);
  v3 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  v34 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544((uint64_t *)&unk_10055B6F0);
  v7 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  v36 = v7;
  __chkstk_darwin(v6);
  v32 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544((uint64_t *)&unk_10055FF90);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544((uint64_t *)&unk_10055B700);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of PlaybackController.$nowPlayingItem.getter(v15);
  v18 = sub_10002F9C8(&qword_100556758, (uint64_t *)&unk_10055FF90, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v19 = sub_1002377BC();
  Publisher<>.removeDuplicates()(v9, v18, v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v20 = sub_10002F9C8((unint64_t *)&unk_10055B730, (uint64_t *)&unk_10055B700, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  swift_retain(v1);
  v21 = Publisher<>.sink(receiveValue:)(sub_100237878, v1, v13, v20);
  swift_release(v1);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  swift_beginAccess(v1 + 16, v37, 33, 0);
  v22 = sub_10003F544((uint64_t *)&unk_100556450);
  v23 = sub_10002F9C8(qword_1005551D0, (uint64_t *)&unk_100556450, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v1 + 16, v22, v23);
  swift_endAccess(v37);
  v24 = swift_release(v21);
  dispatch thunk of PlaybackController.$isPlaying.getter(v24);
  v25 = sub_10002F9C8(&qword_100556560, (uint64_t *)&unk_100563120, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v27 = v32;
  v26 = v33;
  Publisher<>.removeDuplicates()(v33, v25, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v26);
  v28 = sub_10002F9C8((unint64_t *)&unk_10055B740, (uint64_t *)&unk_10055B6F0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  swift_retain(v1);
  v29 = v35;
  v30 = Publisher<>.sink(receiveValue:)(sub_100237880, v1, v35, v28);
  swift_release(v1);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v29);
  swift_beginAccess(v1 + 16, v37, 33, 0);
  AnyCancellable.store<A>(in:)(v1 + 16, v22, v23);
  swift_endAccess(v37);
  return swift_release(v30);
}

uint64_t sub_1002328D8(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_10003F544((uint64_t *)&unk_10055FF00);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  if (*a1)
  {
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
    type metadata accessor for MainActor(0);
    v10 = v8;
    v11 = swift_retain(a2);
    v12 = static MainActor.shared.getter(v11);
    v13 = (_QWORD *)swift_allocObject(&unk_1004B6ED0, 48, 7);
    v13[2] = v12;
    v13[3] = &protocol witness table for MainActor;
    v13[4] = a2;
    v13[5] = v10;
    v14 = sub_10034F744((uint64_t)v7, (uint64_t)&unk_10055B758, (uint64_t)v13);

    return swift_release(v14);
  }
  return result;
}

BOOL sub_1002329D8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1;
  v8 = sub_10023861C(v7);
  LODWORD(a1) = v8;
  static Logger.userActivity.getter(v8);
  v10 = v7;
  swift_retain_n(v2, 2);
  v11 = v10;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(28, -1);
    v27 = v4;
    v15 = v14;
    v26 = swift_slowAlloc(64, -1);
    v30 = v26;
    *(_DWORD *)v15 = 136315650;
    v16 = _typeName(_:qualified:)(*v2, 0);
    v28 = (int)a1;
    a1 = (void *)v17;
    v29 = sub_10003D274(v16, v17, &v30);
    v25 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 4, v15 + 12);
    swift_release_n(v2, 2);
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(a1).n128_u64[0];
    *(_WORD *)(v15 + 12) = 2080;
    v19 = objc_msgSend(v11, "activityType", v18);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v29 = sub_10003D274(v20, v22, &v30);
    LOBYTE(a1) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 14, v15 + 22);

    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v15 + 22) = 1024;
    LODWORD(v29) = a1 != 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v15 + 24, v15 + 28);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Asking if %s supports '%s'. Returning %{BOOL}d", (uint8_t *)v15, 0x1Cu);
    v23 = v26;
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v25);
  }
  else
  {

    swift_release_n(v2, 2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return a1 != 3;
}

void sub_100232C88(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  _BYTE *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _BYTE v61[12];
  _BOOL4 v62;
  void (*v63)(_BYTE *, uint64_t);
  uint8_t *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = v1;
  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v5 = &v61[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v61[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin();
  v12 = &v61[-v11];
  static Logger.userActivity.getter(v10);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v66 = v5;
  v67 = v2;
  v65 = v6;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = swift_slowAlloc(32, -1);
    v72 = v69;
    *(_DWORD *)v17 = 136315138;
    v64 = v17 + 4;
    v18 = objc_msgSend(v13, "activityType");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v68 = v7;
    v20 = v9;
    v21 = v13;
    v22 = v19;
    v24 = v23;

    v25 = v22;
    v13 = v21;
    v9 = v20;
    v71 = sub_10003D274(v25, v24, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v64, v17 + 12);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received request to handle '%s'", v17, 0xCu);
    v26 = v69;
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v27 = v65;
    v63 = *(void (**)(_BYTE *, uint64_t))(v68 + 8);
    v63(v12, v65);
  }
  else
  {

    v63 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v63(v12, v6);
    v27 = v6;
  }
  v28 = objc_msgSend(v13, "itemIdentifier");
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = objc_msgSend(v13, "containerIdentifier");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  objc_msgSend(v13, "currentTime");
  v39 = v38;
  v40 = objc_msgSend(v13, "storeTrackID");
  v41 = v40;
  v64 = (uint8_t *)v35;
  if (v40)
  {
    v42 = v40;
    v43 = AdamID.init(rawValue:)(objc_msgSend(v42, "unsignedLongLongValue"));

  }
  else
  {
    v43 = 0;
  }
  static Logger.userActivity.getter(v40);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v32);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter();
  v47 = os_log_type_enabled(v45, v46);
  v69 = v30;
  v70 = v13;
  v68 = v43;
  if (v47)
  {
    v62 = v41 != 0;
    v48 = swift_slowAlloc(30, -1);
    *(_DWORD *)v48 = 67109888;
    LODWORD(v72) = v32 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, (char *)&v72 + 4, v48 + 4, v48 + 8);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v48 + 8) = 1024;
    LODWORD(v72) = v37 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, (char *)&v72 + 4, v48 + 10, v48 + 14);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v48 + 14) = 2048;
    v72 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v48 + 16, v48 + 24);
    *(_WORD *)(v48 + 24) = 1024;
    LODWORD(v72) = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, (char *)&v72 + 4, v48 + 26, v48 + 30);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Activity has episodeGUID: %{BOOL}d, feedURL: '%{BOOL}d, currentTime: %f, storeTrackID: %{BOOL}d", (uint8_t *)v48, 0x1Eu);
    v49 = v48;
    v27 = v65;
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v37);
    v50 = swift_bridgeObjectRelease(v32);
  }
  v52 = (uint64_t)v66;
  v51 = v67;
  v53 = v64;
  ((void (*)(_BYTE *, uint64_t, __n128))v63)(v9, v27, v50);
  v54 = swift_allocObject(&unk_1004B6F48, 24, 7);
  v55 = v70;
  *(_QWORD *)(v54 + 16) = v70;
  v56 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v52, 1, 1, v56);
  v57 = swift_allocObject(&unk_1004B6F70, 112, 7);
  *(_QWORD *)(v57 + 16) = 0;
  *(_QWORD *)(v57 + 24) = 0;
  *(_QWORD *)(v57 + 32) = v69;
  *(_QWORD *)(v57 + 40) = v32;
  *(_QWORD *)(v57 + 48) = v51;
  *(_QWORD *)(v57 + 56) = v53;
  v58 = v68;
  *(_QWORD *)(v57 + 64) = v37;
  *(_QWORD *)(v57 + 72) = v58;
  *(_BYTE *)(v57 + 80) = v41 == 0;
  *(_QWORD *)(v57 + 88) = v39;
  *(_QWORD *)(v57 + 96) = sub_10023937C;
  *(_QWORD *)(v57 + 104) = v54;
  v59 = v55;
  swift_retain();
  v60 = sub_10034FA88(v52, (uint64_t)&unk_10055B780, v57);
  swift_release(v60);
}

double sub_100233204(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  _OWORD v12[5];
  char v13;

  type metadata accessor for Logger(0);
  __chkstk_darwin();
  sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002388B8(a1, (uint64_t)v12);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = swift_allocObject(&unk_1004B7010, 128, 7);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v7 = v12[3];
  *(_OWORD *)(v6 + 64) = v12[2];
  *(_OWORD *)(v6 + 80) = v7;
  *(_OWORD *)(v6 + 96) = v12[4];
  *(_BYTE *)(v6 + 112) = v13;
  v8 = v12[1];
  *(_OWORD *)(v6 + 32) = v12[0];
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 120) = v1;
  swift_retain();
  v9 = sub_10034F744((uint64_t)v4, (uint64_t)&unk_10055B7C0, v6);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_1002334B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;

  *(_QWORD *)(v5 + 184) = a5;
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 192) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 200) = v8;
  *(_QWORD *)(v5 + 208) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionMetricsBehavior(0);
  *(_QWORD *)(v5 + 216) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 224) = v10;
  *(_QWORD *)(v5 + 232) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  *(_QWORD *)(v5 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowDestinationPageHeader(0);
  *(_QWORD *)(v5 + 248) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v5 + 256) = v13;
  *(_QWORD *)(v5 + 264) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FlowPresentationContext(0);
  *(_QWORD *)(v5 + 272) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v5 + 280) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 288) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 296) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 304) = swift_task_alloc(v16);
  v17 = type metadata accessor for FlowDestination(0);
  *(_QWORD *)(v5 + 312) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v5 + 320) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 328) = swift_task_alloc(v19);
  *(_QWORD *)(v5 + 336) = swift_task_alloc(v19);
  *(_QWORD *)(v5 + 344) = swift_task_alloc(v19);
  sub_100239680((__int128 *)(a4 + 48), v5 + 96);
  sub_100239680((__int128 *)(v5 + 96), v5 + 56);
  if (*(_BYTE *)(v5 + 88))
  {
    v20 = *(_QWORD *)(v5 + 64);
    if (*(_BYTE *)(v5 + 88) == 1)
    {
      *(_QWORD *)(v5 + 408) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 416) = v20;
      v21 = sub_100233B74;
    }
    else
    {
      *(_QWORD *)(v5 + 448) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 456) = v20;
      v21 = sub_100234054;
    }
  }
  else
  {
    v22 = *(_QWORD *)(v5 + 64);
    *(_QWORD *)(v5 + 352) = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 360) = v22;
    *(_OWORD *)(v5 + 368) = *(_OWORD *)(v5 + 72);
    v21 = sub_100233684;
  }
  return swift_task_switch(v21, 0, 0);
}

uint64_t sub_100233684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 384) = v3;
  *(_OWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 392) = v4;
  *v4 = v0;
  v4[1] = sub_100233744;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 136, 0, 0, 0xD000000000000019, 0x80000001004368C0, sub_10023A49C, v3, &type metadata for String);
}

uint64_t sub_100233744()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100233968;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 384));
    v4 = sub_1002337B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002337B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[43];
  v2 = v0[40];
  v3 = v0[38];
  v4 = v0[34];
  v5 = v0[35];
  v6 = v0[18];
  *(_QWORD *)v1 = v0[17];
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  (*(void (**)(void))(v2 + 104))();
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for FlowPresentationContext.infer(_:), v4);
  v8 = static Link.Presentation.textFollowsTintColor.getter(v7);
  v9 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v10 = Link.Presentation.init(rawValue:)(0);
  v11 = Link.Presentation.init(rawValue:)(v10);
  if (Link.Presentation.init(rawValue:)(v11 & v8) != v8)
    v10 = Link.Presentation.init(rawValue:)(v10 | v8);
  v12 = Link.Presentation.init(rawValue:)(v10);
  if (Link.Presentation.init(rawValue:)(v12 & v9) != v9)
    v10 = Link.Presentation.init(rawValue:)(v10 | v9);
  v13 = v0[43];
  v14 = v0[38];
  v15 = v0[33];
  v16 = v0[30];
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0[32] + 104))(v15, enum case for FlowDestinationPageHeader.standard(_:), v0[31]);
  static ActionMetrics.notInstrumented.getter(v17);
  v18 = type metadata accessor for FlowAction(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v0[61] = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v13, 0, 0, 0, 0, v14, 0, v10, v15, v16);
  v19 = type metadata accessor for MainActor(0);
  v0[62] = static MainActor.shared.getter(v20);
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  return swift_task_switch(sub_10023451C, v21, v22);
}

uint64_t sub_100233968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = swift_task_dealloc(*(_QWORD *)(v0 + 384));
  v2 = *(_QWORD *)(v0 + 400);
  static Logger.userActivity.getter(v1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 176) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to handle spotlight activity %@", v6, 0xCu);
    v9 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  v10 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100233B74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = v0[51];
  v1 = v0[52];
  v3 = swift_task_alloc(32);
  v0[53] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[54] = v4;
  v5 = type metadata accessor for StationDetail(0);
  *v4 = v0;
  v4[1] = sub_100233C20;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 21, 0, 0, 0xD000000000000013, 0x8000000100436920, sub_1002396A0, v3, v5);
}

uint64_t sub_100233C20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100233E48;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 424));
    v4 = sub_100233C8C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100233C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 168);
  **(_QWORD **)(v0 + 336) = v5;
  (*(void (**)(void))(v1 + 104))();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for FlowPresentationContext.infer(_:), v3);
  swift_retain();
  v7 = static Link.Presentation.textFollowsTintColor.getter(v6);
  v8 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v9 = Link.Presentation.init(rawValue:)(0);
  v10 = Link.Presentation.init(rawValue:)(v9);
  if (Link.Presentation.init(rawValue:)(v10 & v7) != v7)
    v9 = Link.Presentation.init(rawValue:)(v9 | v7);
  v11 = Link.Presentation.init(rawValue:)(v9);
  if (Link.Presentation.init(rawValue:)(v11 & v8) != v8)
    v9 = Link.Presentation.init(rawValue:)(v9 | v8);
  v12 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 104))(v14, enum case for FlowDestinationPageHeader.standard(_:), *(_QWORD *)(v0 + 248));
  static ActionMetrics.notInstrumented.getter(v16);
  v17 = type metadata accessor for FlowAction(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v12, 0, 0, 0, 0, v13, 0, v9, v14, v15);
  swift_release(v5);
  *(_QWORD *)(v0 + 488) = v18;
  v19 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 496) = static MainActor.shared.getter(v20);
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  return swift_task_switch(sub_10023451C, v21, v22);
}

uint64_t sub_100233E48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = swift_task_dealloc(*(_QWORD *)(v0 + 424));
  v2 = *(_QWORD *)(v0 + 440);
  static Logger.userActivity.getter(v1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 176) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to handle spotlight activity %@", v6, 0xCu);
    v9 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  v10 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100234054()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[56];
  v1 = v0[57];
  v3 = swift_task_alloc(32);
  v0[58] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[59] = v4;
  *v4 = v0;
  v4[1] = sub_100234104;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 19, 0, 0, 0x2874736163646F70, 0xED0000293A726F66, sub_100239698, v3, &type metadata for String);
}

uint64_t sub_100234104()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 472);
  *(_QWORD *)(*v1 + 480) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100234310;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 464));
    v4 = sub_100234170;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100234170()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0[40];
  v1 = (_QWORD *)v0[41];
  v4 = v0[35];
  v3 = v0[36];
  v5 = v0[34];
  v6 = v0[20];
  *v1 = v0[19];
  v1[1] = v6;
  (*(void (**)(void))(v2 + 104))();
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for FlowPresentationContext.infer(_:), v5);
  v8 = static Link.Presentation.textFollowsTintColor.getter(v7);
  v9 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  v10 = Link.Presentation.init(rawValue:)(0);
  v11 = Link.Presentation.init(rawValue:)(v10);
  if (Link.Presentation.init(rawValue:)(v11 & v8) != v8)
    v10 = Link.Presentation.init(rawValue:)(v10 | v8);
  v12 = Link.Presentation.init(rawValue:)(v10);
  if (Link.Presentation.init(rawValue:)(v12 & v9) != v9)
    v10 = Link.Presentation.init(rawValue:)(v10 | v9);
  v13 = v0[41];
  v14 = v0[36];
  v15 = v0[33];
  v16 = v0[30];
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0[32] + 104))(v15, enum case for FlowDestinationPageHeader.standard(_:), v0[31]);
  static ActionMetrics.notInstrumented.getter(v17);
  v18 = type metadata accessor for FlowAction(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v0[61] = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v13, 0, 0, 0, 0, v14, 0, v10, v15, v16);
  v19 = type metadata accessor for MainActor(0);
  v0[62] = static MainActor.shared.getter(v20);
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  return swift_task_switch(sub_10023451C, v21, v22);
}

uint64_t sub_100234310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = swift_task_dealloc(*(_QWORD *)(v0 + 464));
  v2 = *(_QWORD *)(v0 + 480);
  static Logger.userActivity.getter(v1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 176) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to handle spotlight activity %@", v6, 0xCu);
    v9 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  v10 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023451C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0[61];
  v2 = v0[30];
  v3 = v0[23];
  swift_release(v0[62]);
  v4 = sub_10003F544(&qword_1005612A0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v5 + 56) = type metadata accessor for FlowAction(0);
  *(_QWORD *)(v5 + 64) = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v5 + 32) = v1;
  swift_retain();
  v6 = Link.Presentation.init(rawValue:)(0);
  LOBYTE(v1) = v6;
  static ActionMetrics.notInstrumented.getter(v6);
  v7 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(0, 0, 7, v5, 0, 0, 0, 0, (_BYTE)v1, v2);
  v10 = v8;
  v11 = *(_QWORD *)(v3 + 48);
  if (v11)
  {
    v13 = v0[28];
    v12 = v0[29];
    v14 = v0[27];
    v15 = v0[23];
    v16 = *(_QWORD *)(v15 + 56);
    ObjectType = swift_getObjectType(v11, v9);
    v0[5] = v7;
    v18 = sub_100026844((unint64_t *)&unk_100560980, (uint64_t (*)(uint64_t))&type metadata accessor for TabChangeAction, (uint64_t)&protocol conformance descriptor for Action);
    v0[2] = v10;
    v0[6] = v18;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, enum case for ActionMetricsBehavior.fromAction(_:), v14);
    v19 = *(_QWORD *)(v15 + 64);
    swift_unknownObjectRetain(v11);
    swift_retain();
    v20 = ActionRunner.perform(_:withMetrics:asPartOf:)(v0 + 2, v12, v19, ObjectType, v16);
    swift_unknownObjectRelease(v11);
    swift_release(v20);
    swift_release(v10);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_10003D380(v0 + 2);
  }
  else
  {
    swift_release(v8);
  }
  return swift_task_switch(sub_10023471C, 0, 0);
}

uint64_t sub_10023471C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 488));
  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002347D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v6[4] = a1;
  v7 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100234870;
  v6[3] = &unk_1004B6FD8;
  v4 = _Block_copy(v6);
  v5 = v7;
  swift_retain();
  objc_msgSend(a3, "getContinuationStreamsWithCompletionHandler:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
}

void sub_100234870(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(void *, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

uint64_t sub_100234900(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v9 + 136) = v27;
  *(_QWORD *)(v9 + 144) = v28;
  *(double *)(v9 + 128) = a1;
  *(_BYTE *)(v9 + 392) = v26;
  *(_QWORD *)(v9 + 112) = a9;
  *(_QWORD *)(v9 + 120) = v25;
  *(_QWORD *)(v9 + 96) = a7;
  *(_QWORD *)(v9 + 104) = a8;
  *(_QWORD *)(v9 + 80) = a5;
  *(_QWORD *)(v9 + 88) = a6;
  v10 = type metadata accessor for PlaybackController.QueueCommand(0);
  *(_QWORD *)(v9 + 152) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 160) = v11;
  *(_QWORD *)(v9 + 168) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_10055B788);
  *(_QWORD *)(v9 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10003F544(&qword_10055B790);
  *(_QWORD *)(v9 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlaybackIntent(0);
  *(_QWORD *)(v9 + 192) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 200) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 208) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 216) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 224) = swift_task_alloc(v16);
  v17 = type metadata accessor for MediaIdentifier(0);
  *(_QWORD *)(v9 + 232) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v9 + 240) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 248) = swift_task_alloc(v19);
  *(_QWORD *)(v9 + 256) = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 264) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v9 + 272) = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 280) = swift_task_alloc(v22);
  *(_QWORD *)(v9 + 288) = swift_task_alloc(v22);
  *(_QWORD *)(v9 + 296) = swift_task_alloc(v22);
  *(_QWORD *)(v9 + 304) = swift_task_alloc(v22);
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_10003F544(&qword_10055B798) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 312) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 320) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 328) = swift_task_alloc(v23);
  return swift_task_switch(sub_100234AD4, 0, 0);
}

uint64_t sub_100234AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t);
  void *v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  __n128 v80;
  void (*v81)(uint64_t, uint64_t, __n128);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  char *v102;
  uint64_t v103;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 56);
  *(_QWORD *)(v0 + 336) = v4;
  v5 = v4(v1, 1, 1, v2);
  if (v3)
  {
    v98 = *(_OWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v8 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 344) = v8;
    *(_OWORD *)(v8 + 16) = v98;
    *(_QWORD *)(v8 + 32) = v7;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 352) = v9;
    *v9 = v0;
    v9[1] = sub_100235298;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000019, 0x80000001004368C0, sub_100239490, v8, &type metadata for String);
  }
  else
  {
    if ((*(_BYTE *)(v0 + 392) & 1) == 0)
    {
      v11 = static Logger.userActivity.getter(v5);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Handling activity using adam id.", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }
      v15 = *(_QWORD *)(v0 + 296);
      v16 = *(_QWORD *)(v0 + 264);
      v17 = *(_QWORD *)(v0 + 272);
      v18 = *(_QWORD *)(v0 + 120);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      v19 = sub_10003F544(&qword_1005548E0);
      v20 = swift_allocObject(v19, 40, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v20 + 32) = v18;
      v21 = *(_QWORD *)(v0 + 328);
      v22 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v0 + 336);
      v23 = *(uint64_t **)(v0 + 320);
      v24 = *(_QWORD *)(v0 + 232);
      v25 = *(_QWORD *)(v0 + 240);
      sub_100007A28(v21, &qword_10055B798);
      *v23 = v20;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v25 + 104))(v23, enum case for MediaIdentifier.episodes(_:), v24);
      v22(v23, 0, 1, v24);
      sub_10003DC78((uint64_t)v23, v21, &qword_10055B798);
    }
    v26 = *(_QWORD *)(v0 + 312);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 240);
    sub_100007A64(*(_QWORD *)(v0 + 328), v26, &qword_10055B798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    {
      v29 = sub_100007A28(*(_QWORD *)(v0 + 312), &qword_10055B798);
      v30 = static Logger.userActivity.getter(v29);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Episode not found in activity", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

      v35 = *(_QWORD *)(v0 + 320);
      v34 = *(_QWORD *)(v0 + 328);
      v37 = *(_QWORD *)(v0 + 304);
      v36 = *(_QWORD *)(v0 + 312);
      v38 = *(_QWORD *)(v0 + 288);
      v39 = *(_QWORD *)(v0 + 296);
      v40 = *(_QWORD *)(v0 + 280);
      v42 = *(_QWORD *)(v0 + 248);
      v41 = *(_QWORD *)(v0 + 256);
      v88 = *(_QWORD *)(v0 + 224);
      v89 = *(_QWORD *)(v0 + 216);
      v91 = *(_QWORD *)(v0 + 208);
      v93 = *(_QWORD *)(v0 + 184);
      v95 = *(_QWORD *)(v0 + 176);
      v99 = *(_QWORD *)(v0 + 168);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(v38, *(_QWORD *)(v0 + 264));
      sub_100007A28(v34, &qword_10055B798);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v39);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v93);
      swift_task_dealloc(v95);
      swift_task_dealloc(v99);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v43 = *(_QWORD *)(v0 + 248);
      v44 = *(_QWORD *)(v0 + 256);
      v46 = *(_QWORD *)(v0 + 232);
      v45 = *(_QWORD *)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 224);
      v92 = *(_QWORD *)(v0 + 200);
      v48 = *(_QWORD *)(v0 + 184);
      v96 = *(_QWORD *)(v0 + 192);
      v100 = *(_QWORD *)(v0 + 216);
      v49 = *(_QWORD *)(v0 + 176);
      v50 = *(_QWORD *)(v0 + 128);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 32))(v44, *(_QWORD *)(v0 + 312), v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v43, v44, v46);
      v51 = type metadata accessor for EpisodeListSettings(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v48, 1, 1, v51);
      v52 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v49, 1, 1, v52);
      v53 = sub_10003F544(&qword_10055B7A0);
      v54 = type metadata accessor for PlaybackIntent.Option(0);
      v55 = *(_QWORD *)(v54 - 8);
      v56 = *(_QWORD *)(v55 + 72);
      v57 = *(unsigned __int8 *)(v55 + 80);
      v58 = (v57 + 32) & ~v57;
      v59 = swift_allocObject(v53, v58 + 2 * v56, v57 | 7);
      *(_OWORD *)(v59 + 16) = xmmword_1003CA220;
      v60 = (_QWORD *)(v59 + v58);
      *v60 = v50;
      v61 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v55 + 104);
      v61(v60, enum case for PlaybackIntent.Option.initialItemPlayheadOverride(_:), v54);
      v61((_QWORD *)((char *)v60 + v56), enum case for PlaybackIntent.Option.startPlayback(_:), v54);
      v62 = sub_10013BB7C(v59);
      swift_setDeallocating(v59);
      swift_arrayDestroy(v60, 2, v54);
      swift_deallocClassInstance(v59, 32, 7);
      v63 = PlaybackIntent.init(id:listSettings:initialItem:options:)(v43, v48, v49, v62);
      static Logger.userActivity.getter(v63);
      v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 16);
      v65 = v64(v100, v47, v96);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.default.getter();
      v68 = os_log_type_enabled(v66, v67);
      v70 = *(_QWORD *)(v0 + 272);
      v69 = *(_QWORD *)(v0 + 280);
      v71 = *(_QWORD *)(v0 + 264);
      v72 = *(_QWORD *)(v0 + 216);
      if (v68)
      {
        v73 = *(_QWORD *)(v0 + 208);
        v90 = *(_QWORD *)(v0 + 200);
        v97 = *(_QWORD *)(v0 + 272);
        v74 = *(_QWORD *)(v0 + 192);
        v94 = *(_QWORD *)(v0 + 280);
        v75 = (uint8_t *)swift_slowAlloc(12, -1);
        v101 = (void (*)(uint64_t, uint64_t, uint64_t))v64;
        v76 = swift_slowAlloc(32, -1);
        v103 = v76;
        *(_DWORD *)v75 = 136380675;
        v101(v73, v72, v74);
        v77 = String.init<A>(describing:)(v73, v74);
        v79 = v78;
        *(_QWORD *)(v0 + 72) = sub_10003D274(v77, v78, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v75 + 4, v75 + 12);
        v80 = swift_bridgeObjectRelease(v79);
        v81 = *(void (**)(uint64_t, uint64_t, __n128))(v90 + 8);
        v81(v72, v74, v80);
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Performing intent from playback continuity %{private}s", v75, 0xCu);
        swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
        v82 = v76;
        v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v101;
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v75, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v94, v71);
      }
      else
      {
        v81 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 200) + 8);
        ((void (*)(_QWORD, _QWORD))v81)(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));

        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      }
      *(_QWORD *)(v0 + 368) = v81;
      v84 = *(_QWORD *)(v0 + 160);
      v83 = *(_QWORD *)(v0 + 168);
      v85 = *(_QWORD *)(v0 + 152);
      v64(v83, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 192));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v84 + 104))(v83, enum case for PlaybackController.QueueCommand.replace(_:), v85);
      *(_QWORD *)(v0 + 40) = v85;
      *(_QWORD *)(v0 + 48) = &protocol witness table for PlaybackController.QueueCommand;
      v86 = sub_1000242A8((_QWORD *)(v0 + 16));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v84 + 16))(v86, v83, v85);
      v102 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
           + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
      v87 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
                                       + 1));
      *(_QWORD *)(v0 + 376) = v87;
      *v87 = v0;
      v87[1] = sub_1002360E4;
      return ((uint64_t (*)(uint64_t, _QWORD, double))v102)(v0 + 16, 0, 5.0);
    }
  }
}

uint64_t sub_100235298()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002359E4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 344));
    v4 = sub_100235304;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100235304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void (*v54)(_QWORD *, _QWORD, uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, uint64_t, __n128);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  char *v94;
  uint64_t v95;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = static Logger.userActivity.getter(a1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Handling activity using guid/feedURL.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v1 + 304);
  v9 = *(_QWORD *)(v1 + 264);
  v10 = *(_QWORD *)(v1 + 272);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v12 = swift_allocObject(v11, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v12 + 32) = v2;
  *(_QWORD *)(v12 + 40) = v3;
  v13 = *(_QWORD *)(v1 + 328);
  v14 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v1 + 336);
  v15 = *(uint64_t **)(v1 + 320);
  v16 = *(_QWORD *)(v1 + 232);
  v17 = *(_QWORD *)(v1 + 240);
  sub_100007A28(v13, &qword_10055B798);
  *v15 = v12;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v17 + 104))(v15, enum case for MediaIdentifier.localEpisodes(_:), v16);
  v14(v15, 0, 1, v16);
  sub_10003DC78((uint64_t)v15, v13, &qword_10055B798);
  v18 = *(_QWORD *)(v1 + 312);
  v19 = *(_QWORD *)(v1 + 232);
  v20 = *(_QWORD *)(v1 + 240);
  sub_100007A64(*(_QWORD *)(v1 + 328), v18, &qword_10055B798);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v21 = sub_100007A28(*(_QWORD *)(v1 + 312), &qword_10055B798);
    v22 = static Logger.userActivity.getter(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Episode not found in activity", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v27 = *(_QWORD *)(v1 + 320);
    v26 = *(_QWORD *)(v1 + 328);
    v29 = *(_QWORD *)(v1 + 304);
    v28 = *(_QWORD *)(v1 + 312);
    v30 = *(_QWORD *)(v1 + 288);
    v31 = *(_QWORD *)(v1 + 296);
    v32 = *(_QWORD *)(v1 + 280);
    v34 = *(_QWORD *)(v1 + 248);
    v33 = *(_QWORD *)(v1 + 256);
    v81 = *(_QWORD *)(v1 + 224);
    v82 = *(_QWORD *)(v1 + 216);
    v84 = *(_QWORD *)(v1 + 208);
    v86 = *(_QWORD *)(v1 + 184);
    v88 = *(_QWORD *)(v1 + 176);
    v91 = *(_QWORD *)(v1 + 168);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 272) + 8))(v30, *(_QWORD *)(v1 + 264));
    sub_100007A28(v26, &qword_10055B798);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v36 = *(_QWORD *)(v1 + 248);
    v37 = *(_QWORD *)(v1 + 256);
    v39 = *(_QWORD *)(v1 + 232);
    v38 = *(_QWORD *)(v1 + 240);
    v40 = *(_QWORD *)(v1 + 224);
    v85 = *(_QWORD *)(v1 + 200);
    v41 = *(_QWORD *)(v1 + 184);
    v89 = *(_QWORD *)(v1 + 192);
    v92 = *(_QWORD *)(v1 + 216);
    v42 = *(_QWORD *)(v1 + 176);
    v43 = *(_QWORD *)(v1 + 128);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 32))(v37, *(_QWORD *)(v1 + 312), v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v37, v39);
    v44 = type metadata accessor for EpisodeListSettings(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v41, 1, 1, v44);
    v45 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v42, 1, 1, v45);
    v46 = sub_10003F544(&qword_10055B7A0);
    v47 = type metadata accessor for PlaybackIntent.Option(0);
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(_QWORD *)(v48 + 72);
    v50 = *(unsigned __int8 *)(v48 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = swift_allocObject(v46, v51 + 2 * v49, v50 | 7);
    *(_OWORD *)(v52 + 16) = xmmword_1003CA220;
    v53 = (_QWORD *)(v52 + v51);
    *v53 = v43;
    v54 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104);
    v54(v53, enum case for PlaybackIntent.Option.initialItemPlayheadOverride(_:), v47);
    v54((_QWORD *)((char *)v53 + v49), enum case for PlaybackIntent.Option.startPlayback(_:), v47);
    v55 = sub_10013BB7C(v52);
    swift_setDeallocating(v52);
    swift_arrayDestroy(v53, 2, v47);
    swift_deallocClassInstance(v52, 32, 7);
    v56 = PlaybackIntent.init(id:listSettings:initialItem:options:)(v36, v41, v42, v55);
    static Logger.userActivity.getter(v56);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
    v58 = v57(v92, v40, v89);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter();
    v61 = os_log_type_enabled(v59, v60);
    v63 = *(_QWORD *)(v1 + 272);
    v62 = *(_QWORD *)(v1 + 280);
    v64 = *(_QWORD *)(v1 + 264);
    v65 = *(_QWORD *)(v1 + 216);
    if (v61)
    {
      v66 = *(_QWORD *)(v1 + 208);
      v83 = *(_QWORD *)(v1 + 200);
      v90 = *(_QWORD *)(v1 + 272);
      v67 = *(_QWORD *)(v1 + 192);
      v87 = *(_QWORD *)(v1 + 280);
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = (void (*)(uint64_t, uint64_t, uint64_t))v57;
      v95 = swift_slowAlloc(32, -1);
      v69 = v95;
      *(_DWORD *)v68 = 136380675;
      v93(v66, v65, v67);
      v70 = String.init<A>(describing:)(v66, v67);
      v72 = v71;
      *(_QWORD *)(v1 + 72) = sub_10003D274(v70, v71, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v68 + 4, v68 + 12);
      v73 = swift_bridgeObjectRelease(v72);
      v74 = *(void (**)(uint64_t, uint64_t, __n128))(v83 + 8);
      v74(v65, v67, v73);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Performing intent from playback continuity %{private}s", v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      v75 = v69;
      v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v93;
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v87, v64);
    }
    else
    {
      v74 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v1 + 200) + 8);
      ((void (*)(_QWORD, _QWORD))v74)(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 192));

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    }
    *(_QWORD *)(v1 + 368) = v74;
    v77 = *(_QWORD *)(v1 + 160);
    v76 = *(_QWORD *)(v1 + 168);
    v78 = *(_QWORD *)(v1 + 152);
    v57(v76, *(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 192));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v76, enum case for PlaybackController.QueueCommand.replace(_:), v78);
    *(_QWORD *)(v1 + 40) = v78;
    *(_QWORD *)(v1 + 48) = &protocol witness table for PlaybackController.QueueCommand;
    v79 = sub_1000242A8((_QWORD *)(v1 + 16));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v77 + 16))(v79, v76, v78);
    v94 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
        + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
    v80 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
                                     + 1));
    *(_QWORD *)(v1 + 376) = v80;
    *v80 = v1;
    v80[1] = sub_1002360E4;
    return ((uint64_t (*)(uint64_t, _QWORD, double))v94)(v1 + 16, 0, 5.0);
  }
}

uint64_t sub_1002359E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void (*v54)(_QWORD *, _QWORD, uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, uint64_t, __n128);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  char *v94;
  uint64_t v95;

  v1 = *(_QWORD *)(v0 + 344);
  swift_errorRelease(*(_QWORD *)(v0 + 360));
  v2 = swift_task_dealloc(v1);
  if ((*(_BYTE *)(v0 + 392) & 1) == 0)
  {
    v3 = static Logger.userActivity.getter(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Handling activity using adam id.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v11 = sub_10003F544(&qword_1005548E0);
    v12 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v12 + 32) = v10;
    v13 = *(_QWORD *)(v0 + 328);
    v14 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v0 + 336);
    v15 = *(uint64_t **)(v0 + 320);
    v16 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 240);
    sub_100007A28(v13, &qword_10055B798);
    *v15 = v12;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v17 + 104))(v15, enum case for MediaIdentifier.episodes(_:), v16);
    v14(v15, 0, 1, v16);
    sub_10003DC78((uint64_t)v15, v13, &qword_10055B798);
  }
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 240);
  sub_100007A64(*(_QWORD *)(v0 + 328), v18, &qword_10055B798);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v21 = sub_100007A28(*(_QWORD *)(v0 + 312), &qword_10055B798);
    v22 = static Logger.userActivity.getter(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Episode not found in activity", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v27 = *(_QWORD *)(v0 + 320);
    v26 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 304);
    v28 = *(_QWORD *)(v0 + 312);
    v30 = *(_QWORD *)(v0 + 288);
    v31 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 280);
    v34 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 256);
    v81 = *(_QWORD *)(v0 + 224);
    v82 = *(_QWORD *)(v0 + 216);
    v84 = *(_QWORD *)(v0 + 208);
    v86 = *(_QWORD *)(v0 + 184);
    v88 = *(_QWORD *)(v0 + 176);
    v91 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(v30, *(_QWORD *)(v0 + 264));
    sub_100007A28(v26, &qword_10055B798);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 248);
    v37 = *(_QWORD *)(v0 + 256);
    v39 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 240);
    v40 = *(_QWORD *)(v0 + 224);
    v85 = *(_QWORD *)(v0 + 200);
    v41 = *(_QWORD *)(v0 + 184);
    v89 = *(_QWORD *)(v0 + 192);
    v92 = *(_QWORD *)(v0 + 216);
    v42 = *(_QWORD *)(v0 + 176);
    v43 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 32))(v37, *(_QWORD *)(v0 + 312), v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v37, v39);
    v44 = type metadata accessor for EpisodeListSettings(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v41, 1, 1, v44);
    v45 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v42, 1, 1, v45);
    v46 = sub_10003F544(&qword_10055B7A0);
    v47 = type metadata accessor for PlaybackIntent.Option(0);
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(_QWORD *)(v48 + 72);
    v50 = *(unsigned __int8 *)(v48 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = swift_allocObject(v46, v51 + 2 * v49, v50 | 7);
    *(_OWORD *)(v52 + 16) = xmmword_1003CA220;
    v53 = (_QWORD *)(v52 + v51);
    *v53 = v43;
    v54 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104);
    v54(v53, enum case for PlaybackIntent.Option.initialItemPlayheadOverride(_:), v47);
    v54((_QWORD *)((char *)v53 + v49), enum case for PlaybackIntent.Option.startPlayback(_:), v47);
    v55 = sub_10013BB7C(v52);
    swift_setDeallocating(v52);
    swift_arrayDestroy(v53, 2, v47);
    swift_deallocClassInstance(v52, 32, 7);
    v56 = PlaybackIntent.init(id:listSettings:initialItem:options:)(v36, v41, v42, v55);
    static Logger.userActivity.getter(v56);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
    v58 = v57(v92, v40, v89);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter();
    v61 = os_log_type_enabled(v59, v60);
    v63 = *(_QWORD *)(v0 + 272);
    v62 = *(_QWORD *)(v0 + 280);
    v64 = *(_QWORD *)(v0 + 264);
    v65 = *(_QWORD *)(v0 + 216);
    if (v61)
    {
      v66 = *(_QWORD *)(v0 + 208);
      v83 = *(_QWORD *)(v0 + 200);
      v90 = *(_QWORD *)(v0 + 272);
      v67 = *(_QWORD *)(v0 + 192);
      v87 = *(_QWORD *)(v0 + 280);
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = (void (*)(uint64_t, uint64_t, uint64_t))v57;
      v95 = swift_slowAlloc(32, -1);
      v69 = v95;
      *(_DWORD *)v68 = 136380675;
      v93(v66, v65, v67);
      v70 = String.init<A>(describing:)(v66, v67);
      v72 = v71;
      *(_QWORD *)(v0 + 72) = sub_10003D274(v70, v71, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v68 + 4, v68 + 12);
      v73 = swift_bridgeObjectRelease(v72);
      v74 = *(void (**)(uint64_t, uint64_t, __n128))(v83 + 8);
      v74(v65, v67, v73);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Performing intent from playback continuity %{private}s", v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      v75 = v69;
      v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v93;
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v87, v64);
    }
    else
    {
      v74 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 200) + 8);
      ((void (*)(_QWORD, _QWORD))v74)(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    }
    *(_QWORD *)(v0 + 368) = v74;
    v77 = *(_QWORD *)(v0 + 160);
    v76 = *(_QWORD *)(v0 + 168);
    v78 = *(_QWORD *)(v0 + 152);
    v57(v76, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 192));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v76, enum case for PlaybackController.QueueCommand.replace(_:), v78);
    *(_QWORD *)(v0 + 40) = v78;
    *(_QWORD *)(v0 + 48) = &protocol witness table for PlaybackController.QueueCommand;
    v79 = sub_1000242A8((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v77 + 16))(v79, v76, v78);
    v94 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
        + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
    v80 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
                                     + 1));
    *(_QWORD *)(v0 + 376) = v80;
    *v80 = v0;
    v80[1] = sub_1002360E4;
    return ((uint64_t (*)(uint64_t, _QWORD, double))v94)(v0 + 16, 0, 5.0);
  }
}

uint64_t sub_1002360E4(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 376);
  *(_QWORD *)(*v2 + 384) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002362C4;
  }
  else
  {

    sub_10003D380((_QWORD *)(v4 + 16));
    v6 = sub_100236164;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100236164()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), _QWORD))(v0 + 136))(sub_10023641C, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(v8, *(_QWORD *)(v0 + 232));
  sub_100007A28(v9, &qword_10055B798);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002362C4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v2 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(v8, *(_QWORD *)(v0 + 152));
  v1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_100007A28(v2, &qword_10055B798);
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(v2);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v3);
  swift_task_dealloc(v16);
  swift_task_dealloc(v6);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v9 = swift_errorRetain(a3);
    static Logger.userActivity.getter(v9);
    swift_errorRetain(a3);
    v10 = swift_errorRetain(a3);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(12, -1);
      v19 = v4;
      v14 = (uint8_t *)v13;
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      swift_errorRetain(a3);
      v16 = _swift_stdlib_bridgeErrorToNSError(a3);
      v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received error when opening NSUserActivity stream: %@", v14, 0xCu);
      v17 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      v18 = v14;
      v4 = v19;
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(a3);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_1002365FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;

  v5[27] = a4;
  v5[28] = a5;
  v6 = type metadata accessor for Logger(0);
  v5[29] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[30] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v8);
  v5[32] = swift_task_alloc(v8);
  v5[33] = type metadata accessor for MainActor(0);
  v5[34] = static MainActor.shared.getter(v9);
  return swift_task_switch(sub_100236684, 0, 0);
}

uint64_t sub_100236684()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[28];
  v2 = swift_task_alloc(32);
  v0[35] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[36] = v3;
  *v3 = v0;
  v3[1] = sub_10023672C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001004368A0, sub_100237950, v2, &type metadata for EpisodeUserActivityData);
}

uint64_t sub_10023672C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100236A40;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 280));
    v4 = sub_100236798;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100236798()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 64) = v2;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 160);
  v3 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 32) = v3;
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1002367FC, v4, v5);
}

uint64_t sub_1002367FC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v21;
  os_log_type_t type;
  id v23;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 272));
  v2 = sub_100236D14();
  sub_100238474((_QWORD *)(v0 + 16));
  objc_msgSend(v2, "setDelegate:", *(_QWORD *)(v1 + 40));
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v2;
  v4 = v2;

  v5 = dispatch thunk of PlaybackController.isPlaying.getter();
  if ((v5 & 1) != 0)
  {
    v6 = *(void **)(v0 + 224);
    static Logger.userActivity.getter(v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void **)(v0 + 224);
    if (v9)
    {
      type = v8;
      v11 = swift_slowAlloc(22, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 141558275;
      *(_QWORD *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2113;
      *(_QWORD *)(v0 + 208) = v10;
      v23 = v4;
      v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 14, v11 + 22);
      *v21 = v10;

      v4 = v23;
      _os_log_impl((void *)&_mh_execute_header, v7, type, "Marking activity for %{private,mask.hash}@ as current", (uint8_t *)v11, 0x16u);
      v13 = sub_10003F544((uint64_t *)&unk_100556480);
      swift_arrayDestroy(v21, 1, v13);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {

      v7 = *(NSObject **)(v0 + 224);
    }
    v14 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 240);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v17 = *(void **)(v1 + 32);
    if (v17)
    {
      v18 = v17;
      objc_msgSend(v18, "becomeCurrent");

      v4 = v18;
    }
  }

  v19 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100236A98, v2, v3);
}

uint64_t sub_100236A98()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *log;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 272));
  v2 = *(void **)(v1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");
    v3 = *(void **)(v1 + 32);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(void **)(v0 + 224);
  *(_QWORD *)(v1 + 32) = 0;

  static Logger.userActivity.getter(v6);
  v7 = v5;
  swift_errorRetain(v4);
  v8 = v7;
  v9 = swift_errorRetain(v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(void **)(v0 + 224);
  if (v12)
  {
    log = v10;
    v15 = swift_slowAlloc(32, -1);
    v16 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2113;
    *(_QWORD *)(v0 + 184) = v14;
    v17 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v15 + 14, v15 + 22);
    *v16 = v14;

    *(_WORD *)(v15 + 22) = 2112;
    swift_errorRetain(v13);
    v18 = _swift_stdlib_bridgeErrorToNSError(v13);
    *(_QWORD *)(v0 + 192) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v15 + 24, v15 + 32);
    v16[1] = v18;
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "Unable to create activity for episode: %{private,mask.hash}@, error: %@", (uint8_t *)v15, 0x20u);
    v19 = sub_10003F544((uint64_t *)&unk_100556480);
    swift_arrayDestroy(v16, 2, v19);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v13);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 296));

    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  v20 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100236D14()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  NSString v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  id v9;
  _BYTE v11[16];
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v1 = objc_allocWithZone((Class)NSUserActivity);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithActivityType:", v2);

  sub_10003DC78(v0 + 48, (uint64_t)v15, &qword_100554900);
  sub_10003DC78((uint64_t)v15, (uint64_t)v17, &qword_100554900);
  if (v17[1])
    v4 = String._bridgeToObjectiveC()();
  else
    v4 = 0;
  objc_msgSend(v3, "setTitle:", v4);

  sub_10003DC78((uint64_t)v15, (uint64_t)v16, &qword_100554900);
  if (v16[1])
    v5 = String._bridgeToObjectiveC()();
  else
    v5 = 0;
  objc_msgSend(v3, "setItemTitle:", v5);

  sub_10003DC78(v0 + 64, (uint64_t)v14, &qword_100554900);
  sub_10003DC78((uint64_t)v14, (uint64_t)v18, &qword_100554900);
  if (v18[1])
    v6 = String._bridgeToObjectiveC()();
  else
    v6 = 0;
  objc_msgSend(v3, "setContainerTitle:", v6);

  sub_10003DC78(v0, (uint64_t)v13, &qword_100554900);
  sub_10003DC78((uint64_t)v13, (uint64_t)v19, &qword_100554900);
  if (v19[1])
    v7 = String._bridgeToObjectiveC()();
  else
    v7 = 0;
  objc_msgSend(v3, "setItemIdentifier:", v7);

  sub_10003DC78(v0 + 16, (uint64_t)v12, &qword_100554900);
  sub_10003DC78((uint64_t)v12, (uint64_t)v20, &qword_100554900);
  if (v20[1])
    v8 = String._bridgeToObjectiveC()();
  else
    v8 = 0;
  objc_msgSend(v3, "setContainerIdentifier:", v8);

  sub_10003DC78(v0 + 32, (uint64_t)v11, &qword_10055B760);
  sub_10003DC78((uint64_t)v11, (uint64_t)&v21, &qword_10055B760);
  if ((v22 & 1) != 0)
    v9 = 0;
  else
    v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", v21);
  objc_msgSend(v3, "setStoreTrackID:", v9);

  objc_msgSend(v3, "setSupportsContinuationStreams:", 1);
  return v3;
}

void sub_100236FCC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char *v18;
  id v19;
  _QWORD aBlock[5];
  char *v21;

  v4 = sub_10003F544(&qword_10055B768);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v8 = objc_msgSend(v7, "playbackContext");

  v10 = MPModelObject.uuid.getter(v9);
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v14 = *(unsigned __int8 *)(v5 + 80);
    v15 = (v14 + 40) & ~v14;
    v16 = (char *)swift_allocObject(&unk_1004B6EF8, v15 + v6, v14 | 7);
    *((_QWORD *)v16 + 2) = v8;
    *((_QWORD *)v16 + 3) = v12;
    *((_QWORD *)v16 + 4) = v13;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v16[v15], (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_100239144;
    v21 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100027AF8;
    aBlock[3] = &unk_1004B6F10;
    v17 = _Block_copy(aBlock);
    v18 = v21;
    v19 = v8;
    swift_release(v18);
    objc_msgSend(v19, "performBlock:", v17);

    _Block_release(v17);
  }
  else
  {
    sub_100239020(a2, (uint64_t)aBlock);
    CheckedContinuation.resume(returning:)(aBlock, v4);

  }
}

void sub_100237190(void *a1)
{
  NSString v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD v10[10];

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "episodeForUuid:", v2);

  if (v3)
  {
    v4 = v3;
    sub_10023919C(v4, (uint64_t)v10);
    v5 = sub_10003F544(&qword_10055B768);
    CheckedContinuation.resume(returning:)(v10, v5);

  }
  else
  {
    v6 = sub_100239158();
    v7 = swift_allocError(&type metadata for UserActivityController.Error, v6, 0, 0);
    *v8 = 0;
    v10[0] = v7;
    v9 = sub_10003F544(&qword_10055B768);
    CheckedContinuation.resume(throwing:)(v10, v9);
  }
}

uint64_t sub_100237264()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for UserActivityController()
{
  return objc_opt_self(_TtC8Podcasts22UserActivityController);
}

uint64_t sub_1002373E0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  double v9;
  char v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_weakLoadStrong(v1 + OBJC_IVAR____TtC8Podcasts34PlaybackContinuityActivityDelegate_playbackController);
  if (result)
  {
    v8 = result;
    v9 = COERCE_DOUBLE(PlaybackController.currentTime.getter());
    v11 = v10;
    result = swift_release(v8);
    if ((v11 & 1) == 0)
    {
      v12 = static Logger.userActivity.getter(objc_msgSend(a1, "setCurrentTime:", v9));
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v15 = 134217984;
        v17 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Current playback time updated on activity before handoff: %f", v15, 0xCu);
        swift_slowDealloc(v15, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002375A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1002375B8, 0, 0);
}

uint64_t sub_1002375B8()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  result = swift_weakLoadStrong(v0[3] + OBJC_IVAR____TtC8Podcasts34PlaybackContinuityActivityDelegate_playbackController);
  v0[4] = result;
  if (result)
  {
    v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to PlaybackController.pause() + 1));
    v0[5] = v2;
    *v2 = v0;
    v2[1] = sub_100237624;
    return PlaybackController.pause()();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100237624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_10023A4B8;
  }
  else
  {
    v4 = sub_100237698;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100237698()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 48) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10023775C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaybackContinuityActivityDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaybackContinuityActivityDelegate()
{
  return objc_opt_self(_TtC8Podcasts34PlaybackContinuityActivityDelegate);
}

unint64_t sub_1002377BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B710;
  if (!qword_10055B710)
  {
    v1 = sub_10003CA40(&qword_10055B718);
    sub_100237820();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10055B710);
  }
  return result;
}

unint64_t sub_100237820()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B720;
  if (!qword_10055B720)
  {
    v1 = sub_100005EC8(255, (unint64_t *)&unk_100559B80, MPModelPodcastEpisode_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10055B720);
  }
  return result;
}

uint64_t sub_100237878(void **a1)
{
  uint64_t v1;

  return sub_1002328D8(a1, v1);
}

_BYTE *sub_100237880(_BYTE *result)
{
  uint64_t v1;

  if (*result == 1)
  {
    result = *(_BYTE **)(v1 + 32);
    if (result)
      return objc_msgSend(result, "becomeCurrent");
  }
  return result;
}

uint64_t sub_1002378A4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002378D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10055B754);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100191178;
  return sub_1002365FC(a1, v4, v5, v7, v6);
}

void sub_100237950(uint64_t a1)
{
  uint64_t v1;

  sub_100236FCC(a1, *(void **)(v1 + 16));
}

void sub_100237958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[5];
  char *v23;

  v21 = a4;
  v9 = sub_10003F544((uint64_t *)&unk_10055B7A8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v13 = objc_msgSend(v12, "privateQueueContext");

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 56) & ~v14;
  v16 = (char *)swift_allocObject(&unk_1004B6F98, v15 + v11, v14 | 7);
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  *((_QWORD *)v16 + 4) = v21;
  *((_QWORD *)v16 + 5) = a5;
  *((_QWORD *)v16 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v15], (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_100239524;
  v23 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B6FB0;
  v17 = _Block_copy(aBlock);
  v18 = v23;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  v19 = v13;
  swift_release(v18);
  objc_msgSend(v19, "performBlock:", v17);
  _Block_release(v17);

}

void sub_100237B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  NSString v7;
  NSString v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _QWORD v31[2];

  if (a2)
  {
    v6 = (void *)objc_opt_self(MTEpisode);
    v7 = String._bridgeToObjectiveC()();
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v6, "predicateForEpisodeGuid:onFeedURL:", v7, v8);

  }
  else
  {
    v10 = (void *)objc_opt_self(MTEpisode);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v10, "predicateForEpisodeGuid:", v8);
  }

  v11 = objc_msgSend(a5, "objectsInEntity:predicate:sortDescriptors:", kMTEpisodeEntityName, v9, 0);
  if (!v11)
    goto LABEL_23;
  v12 = v11;
  v13 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v25 = v14;
    else
      v25 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v14);
    if (v26)
      goto LABEL_7;
LABEL_18:
    swift_bridgeObjectRelease(v14);
    goto LABEL_19;
  }
  if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_18;
LABEL_7:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_10:
    v16 = v15;
    swift_bridgeObjectRelease(v14);
    v17 = objc_opt_self(MTEpisode);
    v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
    if (v18)
    {
      v19 = objc_msgSend(v18, "uuid");
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

        v31[0] = v21;
        v31[1] = v23;
        v24 = sub_10003F544((uint64_t *)&unk_10055B7A8);
        CheckedContinuation.resume(returning:)(v31, v24);

LABEL_20:
        return;
      }
    }

LABEL_19:
    v27 = sub_100239158();
    v28 = swift_allocError(&type metadata for UserActivityController.Error, v27, 0, 0);
    *v29 = 0;
    v31[0] = v28;
    v30 = sub_10003F544((uint64_t *)&unk_10055B7A8);
    CheckedContinuation.resume(throwing:)(v31, v30);
    goto LABEL_20;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(v14 + 32);
    goto LABEL_10;
  }
  __break(1u);
LABEL_23:
  __break(1u);
}

void sub_100237D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  _QWORD aBlock[5];
  char *v18;

  v6 = sub_10003F544((uint64_t *)&unk_10055B7E0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v10 = objc_msgSend(v9, "privateQueueContext");

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_1004B7038, v12 + v8, v11 | 7);
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = v10;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v13[v12], (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_100239728;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B7050;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  swift_bridgeObjectRetain(a3);
  v16 = v10;
  swift_release(v15);
  objc_msgSend(v16, "performBlock:", v14);
  _Block_release(v14);

}

void sub_100237F38(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  NSString v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (void *)objc_opt_self(MTPlaylist);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "predicateForVisiblePlaylistWithUUID:", v5);

  v7 = objc_msgSend(a3, "objectsInEntity:predicate:sortDescriptors:", kMTPlaylistEntityName, v6, 0);
  if (!v7)
    goto LABEL_20;
  v8 = v7;
  v9 = sub_100005EC8(0, (unint64_t *)&qword_100553790, NSManagedObject_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v19 = v10;
    else
      v19 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v20 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v10);
    if (v20)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease(v10);
    goto LABEL_16;
  }
  if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_4:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
LABEL_7:
    v12 = v11;
    swift_bridgeObjectRelease(v10);
    v13 = objc_opt_self(MTPlaylist);
    v14 = swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      v15 = (void *)v14;
      type metadata accessor for StationDetail(0);
      v12 = v12;
      sub_1002DA298(v15, 0, 0, 0);
      if (v16)
      {
        v17 = v16;
        v25 = v16;
        swift_retain();
        v18 = sub_10003F544((uint64_t *)&unk_10055B7E0);
        CheckedContinuation.resume(returning:)(&v25, v18);
        swift_release(v17);

LABEL_17:
        return;
      }
    }

LABEL_16:
    v21 = sub_100239158();
    v22 = swift_allocError(&type metadata for UserActivityController.Error, v21, 0, 0);
    *v23 = 1;
    v25 = v22;
    v24 = sub_10003F544((uint64_t *)&unk_10055B7E0);
    CheckedContinuation.resume(throwing:)(&v25, v24);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v10 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

void sub_100238178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  _QWORD aBlock[5];
  char *v18;

  v6 = sub_10003F544((uint64_t *)&unk_10055B7A8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v10 = objc_msgSend(v9, "privateQueueContext");

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_1004B7088, v12 + v8, v11 | 7);
  *((_QWORD *)v13 + 2) = v10;
  *((_QWORD *)v13 + 3) = a2;
  *((_QWORD *)v13 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v13[v12], (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1002397C0;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B70A0;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  v16 = v10;
  swift_bridgeObjectRetain(a3);
  swift_release(v15);
  objc_msgSend(v16, "performBlock:", v14);
  _Block_release(v14);

}

void sub_100238314(void *a1)
{
  NSString v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD v14[2];

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "podcastForFeedUrl:", v2);

  if (v3)
  {
    v4 = objc_msgSend(v3, "uuid");
    if (v4)
    {
      v5 = v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v8 = v7;

      v14[0] = v6;
      v14[1] = v8;
      v9 = sub_10003F544((uint64_t *)&unk_10055B7A8);
      CheckedContinuation.resume(returning:)(v14, v9);

      return;
    }

  }
  v10 = sub_100239158();
  v11 = swift_allocError(&type metadata for UserActivityController.Error, v10, 0, 0);
  *v12 = 2;
  v14[0] = v11;
  v13 = sub_10003F544((uint64_t *)&unk_10055B7A8);
  CheckedContinuation.resume(throwing:)(v14, v13);
}

BOOL sub_10023841C(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1002384C8((uint64_t *)v8, (uint64_t)v9);
}

_QWORD *sub_100238474(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[7];
  v4 = a1[9];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

BOOL sub_1002384C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *a1;
  v7 = *a1 == *(_QWORD *)a2 && v4 == v5;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, *(_QWORD *)a2, v5, 0), result = 0, (v8 & 1) != 0))
  {
LABEL_10:
    v10 = a1[3];
    v11 = *(_QWORD *)(a2 + 24);
    if (v10)
    {
      if (!v11)
        return 0;
      v12 = a1[2];
      v13 = *(_QWORD *)(a2 + 16);
      if (v12 != v13 || v10 != v11)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0);
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
    v15 = *(_BYTE *)(a2 + 40);
    if ((a1[5] & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 40))
        return 0;
    }
    else
    {
      if (a1[4] != *(_QWORD *)(a2 + 32))
        v15 = 1;
      if ((v15 & 1) != 0)
        return 0;
    }
    v16 = a1[7];
    v17 = *(_QWORD *)(a2 + 56);
    if (v16)
    {
      if (!v17)
        return 0;
      v18 = a1[6];
      v19 = *(_QWORD *)(a2 + 48);
      if (v18 != v19 || v16 != v17)
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0);
        result = 0;
        if ((v20 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    v21 = a1[9];
    v22 = *(_QWORD *)(a2 + 72);
    if (v21)
    {
      if (!v22)
        return 0;
      v23 = a1[8];
      v24 = *(_QWORD *)(a2 + 64);
      return v23 == v24 && v21 == v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v24, v22, 0) & 1) != 0;
    }
    return !v22;
  }
  return result;
}

uint64_t sub_10023861C(void *a1)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  double v18;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  if (qword_100552070 != -1)
    swift_once(&qword_100552070, sub_100232570);
  v2 = (_QWORD *)qword_100572EC0;
  v3 = objc_msgSend(a1, "activityType", swift_bridgeObjectRetain(qword_100572EC0).n128_f64[0]);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  LOBYTE(v3) = sub_10037B58C(v4, v6, v2);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v6).n128_u64[0];
  if ((v3 & 1) != 0)
  {

    return 0;
  }
  v9 = objc_msgSend(a1, "activityType", v7);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchableItemActionType);
  if (v10 == v13 && v12 == v14)
  {

    swift_bridgeObjectRelease_n(v12, 2);
    return 1;
  }
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)&v18 = swift_bridgeObjectRelease(v16).n128_u64[0];
  if ((v17 & 1) != 0)
  {

    return 1;
  }
  v20 = objc_msgSend(a1, "activityType", v18);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CSQueryContinuationActionType);
  v26 = v24;
  if (v21 == v25 && v23 == v24)
  {
    v8 = 2;
    swift_bridgeObjectRelease_n(v23, 2);

  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v24, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v26);

    if ((v27 & 1) != 0)
      return 2;
    else
      return 3;
  }
  return v8;
}

unint64_t sub_10023881C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v5 = HIBYTE(a3) & 0xF;
    else
      v5 = a2 & 0xFFFFFFFFFFFFLL;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v8 & 1) != 0)
      result = v7;
    if (4 * v5 >= result >> 14)
      return String.subscript.getter(result, v7, a2, a3);
  }
  __break(1u);
  return result;
}

void sub_1002388B8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  double v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[2];
  _BYTE v47[24];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;

  v4 = objc_msgSend(a1, "userInfo");
  if (v4)
  {
    v5 = v4;
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    *(_QWORD *)&v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(MDItemUniqueIdentifier);
    *((_QWORD *)&v49 + 1) = v7;
    AnyHashable.init<A>(_:)(&v49, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v6 + 16) && (v8 = sub_1001CCFC0((uint64_t)v47), (v9 & 1) != 0))
    {
      sub_10003D344(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v49);
    }
    else
    {
      v49 = 0u;
      v50 = 0u;
    }
    sub_100048644((uint64_t)v47);
    *(_QWORD *)&v10 = swift_bridgeObjectRelease(v6).n128_u64[0];
    if (*((_QWORD *)&v50 + 1))
    {
      sub_10013B9CC(&v49, &v51);
      goto LABEL_17;
    }
  }
  else
  {
    v10 = 0.0;
    v49 = 0u;
    v50 = 0u;
  }
  v11 = objc_msgSend(a1, "userInfo", v10);
  if (v11)
  {
    v12 = v11;
    v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    v46[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchableItemActivityIdentifier);
    v46[1] = v14;
    AnyHashable.init<A>(_:)(v46, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v13 + 16) && (v15 = sub_1001CCFC0((uint64_t)v47), (v16 & 1) != 0))
    {
      sub_10003D344(*(_QWORD *)(v13 + 56) + 32 * v15, (uint64_t)&v51);
    }
    else
    {
      v51 = 0u;
      v52 = 0u;
    }
    sub_100048644((uint64_t)v47);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v51 = 0u;
    v52 = 0u;
  }
  sub_100007A28((uint64_t)&v49, (uint64_t *)&unk_100552300);
LABEL_17:
  sub_100007A64((uint64_t)&v51, (uint64_t)v47, (uint64_t *)&unk_100552300);
  if (!v48)
  {
    sub_100007A28((uint64_t)v47, (uint64_t *)&unk_100552300);
    goto LABEL_25;
  }
  if ((swift_dynamicCast(&v49, v47, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_25:
    v37 = 0;
LABEL_26:
    v38 = sub_100239814();
    v39 = swift_allocError(&type metadata for CoreSpotlightItemIdentifier.Error, v38, 0, 0);
    *v40 = v37;
    swift_willThrow(v39);

    sub_100007A28((uint64_t)&v51, (uint64_t *)&unk_100552300);
    return;
  }
  v17 = v49;
  swift_bridgeObjectRetain(*((_QWORD *)&v49 + 1));
  v18 = sub_10030623C(v17, *((unint64_t *)&v17 + 1));
  v20 = v19;
  swift_bridgeObjectRelease(*((_QWORD *)&v17 + 1));
  if (!v20)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v17 + 1));
    goto LABEL_25;
  }
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  v22 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004AD050, v21);
  swift_bridgeObjectRelease(v20);
  if (v22 >= 3)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v17 + 1));
    v37 = 1;
    goto LABEL_26;
  }
  v53 = v22;
  v45 = v22 & 7;
  swift_bridgeObjectRetain(*((_QWORD *)&v17 + 1));
  v23 = sub_10023881C(1uLL, v17, *((unint64_t *)&v17 + 1));
  v25 = v24;
  v27 = v26;
  v29 = v28;
  swift_bridgeObjectRelease(*((_QWORD *)&v17 + 1));
  v44 = static String._fromSubstring(_:)(v23, v25, v27, v29);
  v31 = v30;
  swift_bridgeObjectRelease(v29);
  v32 = objc_msgSend(a1, "containerIdentifier", swift_bridgeObjectRetain(v31).n128_f64[0]);
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

  }
  else
  {

    v34 = 0;
    v36 = 0;
  }
  sub_100007A28((uint64_t)&v51, (uint64_t *)&unk_100552300);
  v41 = v53;
  if (v45)
  {
    v42 = 0;
    v43 = 0;
  }
  else
  {
    swift_bridgeObjectRetain(v36);
    v42 = v34;
    v43 = v36;
  }
  *(_OWORD *)a2 = v17;
  *(_QWORD *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v34;
  *(_QWORD *)(a2 + 40) = v36;
  *(_QWORD *)(a2 + 48) = v44;
  *(_QWORD *)(a2 + 56) = v31;
  *(_QWORD *)(a2 + 64) = v42;
  *(_QWORD *)(a2 + 72) = v43;
  *(_BYTE *)(a2 + 80) = v41;
}

uint64_t sub_100238CA8(void *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  NSString v18;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  id v21;
  NSURL *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  Class isa;
  uint64_t *v28;
  char *v29;
  _QWORD v31[2];
  _QWORD v32[5];
  __int128 v33;
  __int128 v34;

  sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin();
  v3 = (char *)&v31[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v31[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v31[-1] - v8;
  v10 = objc_msgSend(a1, "userInfo");
  if (!v10)
  {
    v33 = 0u;
    v34 = 0u;
LABEL_12:
    v28 = (uint64_t *)&unk_100552300;
    v29 = (char *)&v33;
LABEL_13:
    sub_100007A28((uint64_t)v29, v28);
    return 0;
  }
  v11 = v10;
  v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v31[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchQueryString);
  v31[1] = v13;
  AnyHashable.init<A>(_:)(v31, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v14 = sub_1001CCFC0((uint64_t)v32), (v15 & 1) != 0))
  {
    sub_10003D344(*(_QWORD *)(v12 + 56) + 32 * v14, (uint64_t)&v33);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  sub_100048644((uint64_t)v32);
  swift_bridgeObjectRelease(v12);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_12;
  if ((swift_dynamicCast(v32, &v33, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v16 = v32[1];
    v17 = (void *)objc_opt_self(MTURLResolver);
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "searchUrlForSearchText:", v18, swift_bridgeObjectRelease(v16).n128_f64[0]);

    if (v19)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v20 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v20(v3, v7, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        v20(v9, v3, v4);
        v21 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
        URL._bridgeToObjectiveC()(v22);
        v24 = v23;
        v25 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for OpenExternalURLOptionsKey(0);
        sub_100026844(&qword_10055B800, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9B68);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v21, "openURL:options:completionHandler:", v24, isa, 0, swift_bridgeObjectRelease(v25).n128_f64[0]);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
        return 1;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    v28 = (uint64_t *)&unk_100553DC0;
    v29 = v3;
    goto LABEL_13;
  }
  return 0;
}

double sub_100239020@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v4 = MPModelObject.adamID.getter();
  v6 = v5;
  v7 = objc_msgSend(a1, "title");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = objc_msgSend(a1, "podcast");
  v13 = v12;
  if (!v12)
  {

LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  v14 = objc_msgSend(v12, "title");

  if (!v14)
  {

    v13 = 0;
    goto LABEL_9;
  }
  v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;

LABEL_10:
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 40) = v6 & 1;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v11;
  *(_QWORD *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 72) = v16;
  return result;
}

uint64_t sub_100239138()
{
  return sub_100239748(&qword_10055B768);
}

uint64_t sub_100239144()
{
  return sub_1002397D4(&qword_10055B768, (uint64_t (*)(_QWORD, _QWORD, _QWORD, char *))sub_100237190);
}

unint64_t sub_100239158()
{
  unint64_t result;

  result = qword_10055B770;
  if (!qword_10055B770)
  {
    result = swift_getWitnessTable(&unk_1003CF874, &type metadata for UserActivityController.Error);
    atomic_store(result, &qword_10055B770);
  }
  return result;
}

void sub_10023919C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = objc_msgSend(a1, "guid");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v26 = v7;
    v28 = v6;

  }
  else
  {
    v26 = 0;
    v28 = 0;
  }
  v8 = objc_msgSend(a1, "podcast", v26, v28);
  if (v8 && (v9 = v8, v10 = objc_msgSend(v8, "feedURL"), v9, v10))
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = (uint64_t)objc_msgSend(a1, "storeTrackId");
  v15 = AdamID.init(rawValue:)(v14 & ~(v14 >> 63));
  v16 = objc_msgSend(a1, "title");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(a1, "podcast");
  v22 = v21;
  if (v21)
  {
    v23 = objc_msgSend(v21, "title");

    if (v23)
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v22 = v25;

    }
    else
    {

      v24 = 0;
      v22 = 0;
    }
  }
  else
  {

    v24 = 0;
  }
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v20;
  *(_QWORD *)(a2 + 64) = v24;
  *(_QWORD *)(a2 + 72) = v22;
}

uint64_t sub_100239358()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10023937C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002347D4(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_100239384()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1002393C8(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = *((_QWORD *)v1 + 3);
  v13 = *((_QWORD *)v1 + 2);
  v4 = *((_QWORD *)v1 + 5);
  v11 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 6);
  v6 = *((_QWORD *)v1 + 7);
  v7 = *((_QWORD *)v1 + 8);
  v8 = v1[11];
  v9 = (_QWORD *)swift_task_alloc(dword_10055B77C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100191178;
  return sub_100234900(v8, a1, v13, v12, v11, v4, v5, v6, v7);
}

void sub_100239490(uint64_t a1)
{
  uint64_t *v1;

  sub_100237958(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10023949C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10003F544((uint64_t *)&unk_10055B7A8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100239524()
{
  uint64_t v0;

  sub_10003F544((uint64_t *)&unk_10055B7A8);
  sub_100237B0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_100239560()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  sub_1002395B4(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_1002395B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 1 < 2)
    return swift_bridgeObjectRelease(a2);
  if (!a5)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100239604(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[15];
  v8 = (_QWORD *)swift_task_alloc(dword_10055B7BC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10023A498;
  return sub_1002334B8(a1, v4, v5, v6, v7);
}

uint64_t sub_100239680(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100239698(uint64_t a1)
{
  uint64_t v1;

  sub_100238178(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1002396A0(uint64_t a1)
{
  uint64_t v1;

  sub_100237D9C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002396A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10003F544((uint64_t *)&unk_10055B7E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100239728()
{
  return sub_1002397D4((uint64_t *)&unk_10055B7E0, (uint64_t (*)(_QWORD, _QWORD, _QWORD, char *))sub_100237F38);
}

uint64_t sub_10023973C()
{
  return sub_100239748((uint64_t *)&unk_10055B7A8);
}

uint64_t sub_100239748(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v2 = sub_10003F544(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 40) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;

  v8 = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v1 + v5, v2, v8);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1002397C0()
{
  return sub_1002397D4((uint64_t *)&unk_10055B7A8, (uint64_t (*)(_QWORD, _QWORD, _QWORD, char *))sub_100238314);
}

uint64_t sub_1002397D4(uint64_t *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, char *))
{
  char *v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10003F544(a1) - 8) + 80);
  return a2(*((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[(v3 + 40) & ~v3]);
}

unint64_t sub_100239814()
{
  unint64_t result;

  result = qword_10055B7F0;
  if (!qword_10055B7F0)
  {
    result = swift_getWitnessTable(&unk_1003CF834, &type metadata for CoreSpotlightItemIdentifier.Error);
    atomic_store(result, (unint64_t *)&qword_10055B7F0);
  }
  return result;
}

id sub_100239858(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;

  v2 = v1;
  v4 = sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Logger.userActivity.getter(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received request to pause playback (receiver has confirmed handoff)", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_1004B70D8, 40, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v2;
  v18 = v2;
  v19 = sub_10034F890((uint64_t)v6, (uint64_t)&unk_10055B810, (uint64_t)v17);
  swift_release(v19);
  return objc_msgSend(a1, "close");
}

uint64_t sub_100239A00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100239A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_10055B80C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10023A498;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_1002375B8, 0, 0);
}

uint64_t storeEnumTagSinglePayload for CoreSpotlightItemIdentifier.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100239ADC + 4 * byte_1003CF645[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100239B10 + 4 * byte_1003CF640[v4]))();
}

uint64_t sub_100239B10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100239B18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100239B20);
  return result;
}

uint64_t sub_100239B2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100239B34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100239B38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100239B40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreSpotlightItemIdentifier.Error()
{
  return &type metadata for CoreSpotlightItemIdentifier.Error;
}

uint64_t sub_100239B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 1 >= 2)
  {
    if (a5)
      return result;
    swift_bridgeObjectRetain(a4);
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1)
{
  return sub_1002395B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100239B5C(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100239B5C(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1002395B4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1002395B4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreSpotlightItemIdentifier.IdentifierType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_100239D60(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100239D68(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CoreSpotlightItemIdentifier.IdentifierType()
{
  return &type metadata for CoreSpotlightItemIdentifier.IdentifierType;
}

uint64_t storeEnumTagSinglePayload for UserActivityController.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100239DCC + 4 * byte_1003CF64F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100239E00 + 4 * byte_1003CF64A[v4]))();
}

uint64_t sub_100239E00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100239E08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100239E10);
  return result;
}

uint64_t sub_100239E1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100239E24);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100239E28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100239E30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserActivityController.Error()
{
  return &type metadata for UserActivityController.Error;
}

uint64_t destroy for EpisodeUserActivityData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

__n128 initializeWithTake for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeUserActivityData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeUserActivityData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EpisodeUserActivityData()
{
  return &type metadata for EpisodeUserActivityData;
}

unint64_t sub_10023A11C()
{
  unint64_t result;

  result = qword_10055B818;
  if (!qword_10055B818)
  {
    result = swift_getWitnessTable(&unk_1003CF7A4, &type metadata for UserActivityController.Error);
    atomic_store(result, (unint64_t *)&qword_10055B818);
  }
  return result;
}

unint64_t sub_10023A164()
{
  unint64_t result;

  result = qword_10055B820;
  if (!qword_10055B820)
  {
    result = swift_getWitnessTable(&unk_1003CF80C, &type metadata for CoreSpotlightItemIdentifier.Error);
    atomic_store(result, (unint64_t *)&qword_10055B820);
  }
  return result;
}

uint64_t destroy for CoreSpotlightItemIdentifier(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return sub_1002395B4(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for CoreSpotlightItemIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_100239B5C(v6, v7, v8, v9, v10);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = v10;
  return a1;
}

uint64_t assignWithCopy for CoreSpotlightItemIdentifier(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = v2[2];
  v6 = v2[3];
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = v2[4];
  v8 = v2[5];
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = v2[6];
  v11 = v2[7];
  v12 = v2[8];
  v13 = v2[9];
  LOBYTE(v2) = *((_BYTE *)v2 + 80);
  sub_100239B5C(v10, v11, v12, v13, v2);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  v18 = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = (_BYTE)v2;
  sub_1002395B4(v14, v15, v16, v17, v18);
  return a1;
}

__n128 initializeWithTake for CoreSpotlightItemIdentifier(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CoreSpotlightItemIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned __int8 v16;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  v16 = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = v10;
  sub_1002395B4(v11, v12, v13, v14, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSpotlightItemIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreSpotlightItemIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSpotlightItemIdentifier()
{
  return &type metadata for CoreSpotlightItemIdentifier;
}

uint64_t LegacyEnqueueMediaItemForPlaybackIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10055B838 + dword_10055B838);
  v5 = (_QWORD *)swift_task_alloc(unk_10055B83C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10023A52C;
  return v7(a1, a2);
}

uint64_t sub_10023A52C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc(v4);
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 1);
}

void sub_10023A594(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v8 = sub_10003F544((uint64_t *)&unk_10055B888);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_1004B7448, v15 | 4, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v13, v11, v8);
  *(_QWORD *)(v16 + v14) = a3;
  *(_DWORD *)(v16 + v15) = a4;
  aBlock[4] = sub_10023CB04;
  v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100153D50;
  aBlock[3] = &unk_1004B7460;
  v17 = _Block_copy(aBlock);
  swift_release(v19);
  objc_msgSend(a2, "resolveActivePlayerPathWithCompletion:", v17);
  _Block_release(v17);
}

void sub_10023A6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v25 = a5;
  v24 = a4;
  v8 = sub_10003F544((uint64_t *)&unk_10055B888);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v15 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
    v16 = *(unsigned __int8 *)(v9 + 80);
    v17 = (v16 + 16) & ~v16;
    v18 = swift_allocObject(&unk_1004B7498, v17 + v10, v16 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    aBlock[4] = sub_10023CBD8;
    v27 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001C290;
    aBlock[3] = &unk_1004B74B0;
    v19 = _Block_copy(aBlock);
    swift_release(v27);
    MRMediaRemoteInsertSystemAppPlaybackQueueForPlayer(v24, v25, 0, a1, v15, v19);
    _Block_release(v19);

  }
  else
  {
    v20 = type metadata accessor for RemoteQueueOperationError(0);
    v21 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
    v22 = swift_allocError(v20, v21, 0, 0);
    *v23 = a2;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for RemoteQueueOperationError.pathResolutionError(_:), v20);
    aBlock[0] = v22;
    swift_errorRetain(a2);
    CheckedContinuation.resume(throwing:)(aBlock, v8);
  }
}

uint64_t sub_10023A954(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = static Logger.playback.getter(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(12, -1);
      v26[1] = a2;
      v13 = (uint8_t *)v12;
      v14 = swift_slowAlloc(32, -1);
      v28 = v14;
      *(_DWORD *)v13 = 136315138;
      v26[0] = v13 + 4;
      LODWORD(v27) = a1;
      type metadata accessor for MRMediaRemoteError(0);
      v16 = String.init<A>(describing:)(&v27, v15);
      v18 = v17;
      v27 = sub_10003D274(v16, v17, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v26[0], v13 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to resolve active player path with error: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v19 = type metadata accessor for RemoteQueueOperationError(0);
    v20 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
    v21 = swift_allocError(v19, v20, 0, 0);
    *v22 = a1;
    (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v22, enum case for RemoteQueueOperationError.mediaRemoteError(_:), v19);
    v28 = v21;
    v23 = sub_10003F544((uint64_t *)&unk_10055B888);
    return CheckedContinuation.resume(throwing:)(&v28, v23);
  }
  else
  {
    v25 = sub_10003F544((uint64_t *)&unk_10055B888);
    return CheckedContinuation.resume(returning:)(v25, v25);
  }
}

void sub_10023ABA0(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_10017B2BC(0, v4, 0);
    v6 = (_QWORD *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v6);
      if (v9 >= v10 >> 1)
        sub_10017B2BC(v10 > 1, v9 + 1, 1);
      v6 += 2;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v11 = &_swiftEmptyArrayStorage[3 * v9];
      v11[4] = v7;
      v11[5] = v8;
      *((_BYTE *)v11 + 48) = 1;
      --v4;
    }
    while (v4);
    v2 = v27;
    v3 = a2;
  }
  v12 = NSManagedObjectContext.episodes(for:sortDescriptors:limit:)(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage, 0, 1);
  if (v2)
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return;
  }
  v13 = v12;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v26 = v13;
    else
      v26 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v13);
    if (!v14)
      goto LABEL_23;
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
    {
LABEL_23:
      swift_bridgeObjectRelease(v13);
      *v3 = _swiftEmptyArrayStorage;
      return;
    }
  }
  specialized ContiguousArray.reserveCapacity(_:)(v14);
  if ((v14 & 0x8000000000000000) == 0)
  {
    sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
    if ((v13 & 0xC000000000000001) != 0)
    {
      v15 = 0;
      do
      {
        v16 = v15 + 1;
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
        v18 = IMPlayerItem.init(episode:)(v17);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        v19 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v18);
        specialized ContiguousArray._endMutation()(v20);
        v15 = v16;
      }
      while (v14 != v16);
    }
    else
    {
      v21 = (void **)(v13 + 32);
      do
      {
        v22 = *v21++;
        v23 = IMPlayerItem.init(episode:)(v22);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        v24 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
        v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v23);
        specialized ContiguousArray._endMutation()(v25);
        --v14;
      }
      while (v14);
    }
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_10023AE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10055B838 + dword_10055B838);
  v6 = (_QWORD *)swift_task_alloc(unk_10055B83C);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1001B8890;
  return v8(a2, a3);
}

uint64_t sub_10023AEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for PlaybackController.QueueCommand.Location(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (id *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  EnqueueMediaItemForPlaybackIntent.location.getter(v2);
  v5 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v4, v0);
  if (v5 == enum case for PlaybackController.QueueCommand.Location.before(_:)
    || v5 == enum case for PlaybackController.QueueCommand.Location.after(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);

    v7 = type metadata accessor for RemoteQueueOperationError(0);
    v8 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
    swift_allocError(v7, v8, 0, 0);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for RemoteQueueOperationError.unsupportedQueuePosition(_:), v7);
    return swift_willThrow(v10);
  }
  else if (v5 == enum case for PlaybackController.QueueCommand.Location.queueHead(_:))
  {
    return 0;
  }
  else
  {
    if (v5 != enum case for PlaybackController.QueueCommand.Location.queueTail(_:))
      (*(void (**)(id *, uint64_t))(v1 + 8))(v4, v0);
    return 1;
  }
}

uint64_t sub_10023B018(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t EpisodeOffersIntent;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for EpisodeOffer(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  EpisodeOffersIntent = type metadata accessor for FetchEpisodeOffersIntent(0);
  v2[14] = EpisodeOffersIntent;
  v6 = *(_QWORD *)(EpisodeOffersIntent - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055B8A8);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[17] = v8;
  *v8 = v2;
  v8[1] = sub_10023B0E4;
  return BaseObjectGraph.inject<A>(_:)(v2 + 7, v7, v7);
}

uint64_t sub_10023B0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023B598;
  else
    v3 = sub_10023B148;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023B148()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[19] = v0[7];
  v1 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[20] = v2;
  *v2 = v0;
  v2[1] = sub_10023B1C8;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v1, v1);
}

uint64_t sub_10023B1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023B5D8;
  else
    v3 = sub_10023B22C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023B22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (objc_msgSend(*(id *)(v0 + 152), "isReachable"))
  {
    v1 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    sub_10003A834((_QWORD *)(v0 + 16), v2);
    v4 = swift_bridgeObjectRetain(v1);
    FetchEpisodeOffersIntent.init(adamIDs:)(v4);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
    *(_QWORD *)(v0 + 176) = v5;
    v6 = sub_100026844((unint64_t *)&unk_10055B8C0, (uint64_t (*)(uint64_t))&type metadata accessor for FetchEpisodeOffersIntent, (uint64_t)&protocol conformance descriptor for FetchEpisodeOffersIntent);
    *v5 = v0;
    v5[1] = sub_10023B3C4;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 64, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112), v6, v2, v3);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 152);
    v9 = type metadata accessor for PlaybackController.PlayerError(0);
    v10 = sub_100026844(&qword_10055E240, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackController.PlayerError, (uint64_t)&protocol conformance descriptor for PlaybackController.PlayerError);
    swift_allocError(v9, v10, 0, 0);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for PlaybackController.PlayerError.noInternet(_:), v9);
    swift_willThrow(v12);
    swift_unknownObjectRelease(v8);
    sub_10003D380((_QWORD *)(v0 + 16));
    v13 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10023B3C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
  if (v0)
    v4 = sub_10023B620;
  else
    v4 = sub_10023B438;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10023B438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 96);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    v7 = swift_bridgeObjectRetain(v1);
    do
    {
      v9 = *(_QWORD *)(v0 + 104);
      v10 = *(_QWORD *)(v0 + 88);
      v6(v9, v4, v10, v7);
      v11 = sub_10025C034();
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v9, v10);
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized Array._endMutation()(v8);
      }
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 104);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(v1);
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10023B598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023B5D8()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023B620()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023B674(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1[4] = a1;
  v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055E200);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[11] = v7;
  *v7 = v1;
  v7[1] = sub_10023B740;
  return BaseObjectGraph.inject<A>(_:)(v1 + 2, v6, v6);
}

uint64_t sub_10023B740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023BA80;
  else
    v3 = sub_10023B7A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023B7A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;

  v3 = v2[2];
  v2[13] = v3;
  ObjectType = swift_getObjectType(v3, a2);
  static Task<>.currentPriority.getter();
  v5 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v2[14] = v5;
  *v5 = v2;
  v5[1] = sub_10023B824;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v2[10], ObjectType);
}

uint64_t sub_10023B824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_10023B8A8, 0, 0);
}

uint64_t sub_10023B8A8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = (void *)v0[15];
  v3 = v0[6];
  v2 = v0[7];
  v5 = v0[4];
  v4 = v0[5];
  v6 = swift_allocObject(&unk_1004B74E8, 32, 7);
  v0[16] = v6;
  *(_QWORD *)(v6 + 16) = v1;
  *(_QWORD *)(v6 + 24) = v5;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v4);
  v7 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v8 = v1;
  swift_bridgeObjectRetain(v5);
  v9 = (_QWORD *)swift_task_alloc(v7);
  v0[17] = v9;
  v10 = sub_10003F544((uint64_t *)&unk_10055B8D0);
  *v9 = v0;
  v9[1] = sub_10023B990;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 3, v0[7], sub_10023CC44, v6, v10);
}

uint64_t sub_10023B990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_10023BAC0;
  else
    v7 = sub_10023BA24;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10023BA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);

  v3 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_10023BA80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023BAC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023BB08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for MediaIdentifier(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10023BB68, 0, 0);
}

uint64_t sub_10023BB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  EnqueueMediaItemForPlaybackIntent.mediaItem.getter();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for MediaIdentifier.podcast(_:))
    goto LABEL_2;
  v15 = v4;
  if (v4 == enum case for MediaIdentifier.episodes(_:))
  {
    v16 = *(uint64_t **)(v0 + 96);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 88) + 96))(v16, *(_QWORD *)(v0 + 80));
    v17 = *v16;
    *(_QWORD *)(v0 + 104) = v17;
    v18 = (_QWORD *)swift_task_alloc(dword_10055B8A4);
    *(_QWORD *)(v0 + 112) = v18;
    *v18 = v0;
    v18[1] = sub_10023BE74;
    return sub_10023B018(v17, *(_QWORD *)(v0 + 72));
  }
  else
  {
    if (v4 != enum case for MediaIdentifier.localEpisodes(_:))
    {
      if (v4 != enum case for MediaIdentifier.localPodcast(_:))
      {
        if (v4 != enum case for MediaIdentifier.station(_:))
        {
          v24 = enum case for MediaIdentifier.library(_:);
          v25 = type metadata accessor for RemoteQueueOperationError(0);
          v26 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
          swift_allocError(v25, v26, 0, 0);
          v8 = v27;
          v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104);
          if (v15 != v24)
          {
            v29 = *(_QWORD *)(v0 + 88);
            v28 = *(_QWORD *)(v0 + 96);
            v30 = *(_QWORD *)(v0 + 80);
            v31 = v11(v27, enum case for RemoteQueueOperationError.unknownRequest(_:), v25);
            swift_willThrow(v31);
            (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
            goto LABEL_5;
          }
          v10 = enum case for RemoteQueueOperationError.libraryNotSupported(_:);
          v12 = v25;
LABEL_4:
          v13 = v11(v8, v10, v12);
          swift_willThrow(v13);
LABEL_5:
          swift_task_dealloc(*(_QWORD *)(v0 + 96));
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
        v5 = type metadata accessor for RemoteQueueOperationError(0);
        v22 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
        swift_allocError(v5, v22, 0, 0);
        v8 = v23;
        v9 = (unsigned int *)&enum case for RemoteQueueOperationError.stationsNotSupported(_:);
LABEL_3:
        v10 = *v9;
        v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104);
        v12 = v5;
        goto LABEL_4;
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
LABEL_2:
      v5 = type metadata accessor for RemoteQueueOperationError(0);
      v6 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
      swift_allocError(v5, v6, 0, 0);
      v8 = v7;
      v9 = (unsigned int *)&enum case for RemoteQueueOperationError.podcastsNotSupported(_:);
      goto LABEL_3;
    }
    v19 = *(uint64_t **)(v0 + 96);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 88) + 96))(v19, *(_QWORD *)(v0 + 80));
    v20 = *v19;
    *(_QWORD *)(v0 + 128) = v20;
    v21 = (_QWORD *)swift_task_alloc(dword_10055B89C);
    *(_QWORD *)(v0 + 136) = v21;
    *v21 = v0;
    v21[1] = sub_10023BF60;
    return sub_10023B674(v20);
  }
}

uint64_t sub_10023BE74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v4 = v3[14];
  v3[15] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10023BF24;
  else
    v5 = sub_10023BEE0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10023BEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10023BF24()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023BF60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  v4 = v3[17];
  v3[18] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10023C014;
  else
    v5 = sub_10023BFCC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10023BFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10023C014()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023C050(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a4;
  *(_DWORD *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_10023C070, 0, 0);
}

uint64_t sub_10023C070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unsigned __int8 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v16;
  int8x16_t *v17;
  _QWORD *v18;
  uint64_t v19;
  int8x16_t v20;

  v1 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  for (; v2; v3 = *(_QWORD *)(v0 + 16))
  {
    v4 = 0;
    v5 = v1 & 0xC000000000000001;
    v6 = v3 + 32;
    while (1)
    {
      v7 = v5
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v0 + 16))
         : *(id *)(v6 + 8 * v4);
      v1 = (uint64_t)v7;
      v8 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      v9 = objc_msgSend(v7, "isEntitled");

      if ((v9 & 1) != 0)
      {
        v16 = *(_DWORD *)(v0 + 64);
        v20 = *(int8x16_t *)(v0 + 24);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
        v17 = (int8x16_t *)swift_task_alloc(48);
        *(_QWORD *)(v0 + 40) = v17;
        v17[1] = vextq_s8(v20, v20, 8uLL);
        v17[2].i32[0] = v16;
        v18 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v0 + 48) = v18;
        *v18 = v0;
        v18[1] = sub_10023C288;
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v18, 0, 0, 0xD000000000000022, 0x8000000100436970, sub_10023CA80, v17, (char *)&type metadata for () + 8);
      }
      ++v4;
      if (v8 == v2)
      {
        v3 = *(_QWORD *)(v0 + 16);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_14:
    if (v1 < 0)
      v19 = v1;
    else
      v19 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
LABEL_11:
  v10 = swift_bridgeObjectRelease(v3);
  v11 = type metadata accessor for PlaybackController.FairPlayKeyServerError(0, v10);
  v12 = sub_100026844(&qword_10055B880, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackController.FairPlayKeyServerError, (uint64_t)&protocol conformance descriptor for PlaybackController.FairPlayKeyServerError);
  swift_allocError(v11, v12, 0, 0);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v13, enum case for PlaybackController.FairPlayKeyServerError.notEntitled(_:), v11);
  swift_willThrow(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023C288()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10023C300;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_10023C2F4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10023C2F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023C300()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023C334(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[4] = a1;
  v2[5] = a2;
  v3 = sub_100005EC8(0, (unint64_t *)&unk_10055B850, off_1004A44A0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[6] = v4;
  *v4 = v2;
  v4[1] = sub_10023C3BC;
  return BaseObjectGraph.inject<A>(_:)(v2 + 2, v3, v3);
}

uint64_t sub_10023C3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023CA04;
  else
    v3 = sub_10023C420;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023C420()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[8] = v0[2];
  v1 = sub_100005EC8(0, (unint64_t *)&unk_100562AA0, &off_1004A4490);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[9] = v2;
  *v2 = v0;
  v2[1] = sub_10023C4AC;
  return BaseObjectGraph.inject<A>(_:)(v0 + 3, v1, v1);
}

uint64_t sub_10023C4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023CA10;
  else
    v3 = sub_10023C510;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023C510()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 144) = sub_10023AEA4();
  if (v1)
  {
    v3 = *(void **)(v0 + 64);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_10055B864);
    *(_QWORD *)(v0 + 96) = v5;
    *v5 = v0;
    v5[1] = sub_10023C5A4;
    return sub_10023BB08(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_10023C5A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10023C8D8;
  else
    v5 = sub_10023C610;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10023C610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Class isa;
  id v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 104);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v11 = *(_QWORD *)(v0 + 104);
    else
      v11 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      goto LABEL_19;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      goto LABEL_19;
  }
  result = objc_opt_self(PFRestrictionsUtil);
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  v4 = (void *)result;
  v5 = 0;
  v24 = *(_QWORD *)(v0 + 104) + 32;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, *(_QWORD *)(v0 + 104));
    else
      v6 = *(id *)(v24 + 8 * v5);
    v7 = v6;
    if (((objc_msgSend(v4, "isExplicitContentAllowed", v24) & 1) != 0
       || (objc_msgSend(v7, "isExplicit") & 1) == 0)
      && (v8 = objc_msgSend(v7, "isEntitled"), (v8 & 1) != 0))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
    }
    else
    {

    }
    ++v5;
  }
  while (v2 != v5);
LABEL_19:
  v12 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  *(_QWORD *)(v0 + 120) = _swiftEmptyArrayStorage;
  sub_100005EC8(0, (unint64_t *)&qword_1005545C0, off_1004A44A8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v12, "playbackQueueWithAccountInfoForPlayerItems:", isa);

  if (v14)
  {
    v15 = swift_task_alloc(dword_10055B87C);
    *(_QWORD *)(v0 + 128) = v15;
    *(_QWORD *)v15 = v0;
    *(_QWORD *)(v15 + 8) = sub_10023C914;
    v16 = *(_DWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v15 + 24) = v14;
    *(_QWORD *)(v15 + 32) = v17;
    *(_DWORD *)(v15 + 64) = v16;
    *(_QWORD *)(v15 + 16) = _swiftEmptyArrayStorage;
    return swift_task_switch(sub_10023C070, 0, 0);
  }
  else
  {
    v18 = *(void **)(v0 + 88);
    v19 = *(void **)(v0 + 64);
    swift_release(_swiftEmptyArrayStorage);
    v20 = type metadata accessor for RemoteQueueOperationError(0);
    v21 = sub_100026844(&qword_10055B870, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError, (uint64_t)&protocol conformance descriptor for RemoteQueueOperationError);
    swift_allocError(v20, v21, 0, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for RemoteQueueOperationError.unableToIdentifyQueue(_:), v20);
    swift_willThrow(v23);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10023C8D8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023C914()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10023C9C0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 120));
    v4 = sub_10023C980;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10023C980()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10023C9C0()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 88);
  v2 = *(void **)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 120));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023CA04()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023CA10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023CA44()
{
  return sub_100026844((unint64_t *)&qword_10055B840, (uint64_t (*)(uint64_t))&type metadata accessor for EnqueueMediaItemForPlaybackIntent, (uint64_t)&protocol conformance descriptor for EnqueueMediaItemForPlaybackIntent);
}

ValueMetadata *type metadata accessor for LegacyEnqueueMediaItemForPlaybackIntentImplementation()
{
  return &type metadata for LegacyEnqueueMediaItemForPlaybackIntentImplementation;
}

void sub_10023CA80(uint64_t a1)
{
  uint64_t v1;

  sub_10023A594(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_DWORD *)(v1 + 32));
}

uint64_t sub_10023CA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10003F544((uint64_t *)&unk_10055B888);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_10023CB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_10003F544((uint64_t *)&unk_10055B888) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10023A6F0(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_DWORD *)(v2 + ((v7 + 11) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10023CB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10003F544((uint64_t *)&unk_10055B888);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10023CBD8(int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10003F544((uint64_t *)&unk_10055B888) - 8) + 80);
  return sub_10023A954(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10023CC18()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10023CC44(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10023ABA0(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10023CC64(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

uint64_t sub_10023CD38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  __n128 v6;

  v2 = a2;
  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v5 = sub_10003F544(&qword_10055B970);
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v5);
  }
  v6 = swift_retain(v3);
  v4(v2, v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v2);
}

id sub_10023D000()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *sub_10023D05C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  NSString *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  NSString *v54;
  id v55;
  id v56;
  char v57;
  unint64_t v58;
  char v59;
  char v60;
  char v61;
  NSString *v62;
  id v63;
  unsigned __int8 v64;
  char v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  char *v72;
  NSURL *v73;
  void *v74;
  void *v75;
  Class isa;
  const char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  UIApplicationOpenURLOptionsKey v84;
  UIApplicationOpenURLOptionsKey v85;
  UIApplicationOpenURLOptionsKey v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[2];
  __int128 v95;
  __int128 v96;
  _QWORD v97[6];

  v90 = type metadata accessor for URL(0);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v89 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = sub_100005EC8(0, &qword_10055B978, UIOpenURLContext_ptr);
    v6 = sub_100024C10((unint64_t *)&unk_10055B980, &qword_10055B978, UIOpenURLContext_ptr);
    result = Set.Iterator.init(_cocoa:)(v97, v4, v5, v6);
    a1 = v97[0];
    v81 = v97[1];
    v8 = v97[2];
    v9 = v97[3];
    v10 = v97[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 56);
    v81 = a1 + 56;
    v8 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & v12;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v79 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v80 = (unint64_t)(v8 + 64) >> 6;
  v86 = UIApplicationOpenURLOptionsSourceApplicationKey;
  v85 = UIApplicationOpenURLOptionsAnnotationKey;
  v84 = UIApplicationOpenURLOptionsOpenInPlaceKey;
  v83 = xmmword_1003CA200;
  v15 = &_swiftEmptyDictionarySingleton;
  v16 = &selRef_appControllerWithDelegate_;
  v77 = (char *)&type metadata for Any + 8;
  v78 = (char *)&type metadata for Swift.AnyObject + 8;
  v87 = v8;
  v82 = a1;
  while (a1 < 0)
  {
    v20 = __CocoaSet.Iterator.next()(result);
    if (!v20)
      return (_QWORD *)sub_10017F43C(a1);
    v21 = v20;
    *(_QWORD *)&v94[0] = v20;
    v22 = sub_100005EC8(0, &qword_10055B978, UIOpenURLContext_ptr);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v95, v94, v78, v22, 7);
    v23 = (void *)v95;
    v24 = (id)swift_unknownObjectRelease(v21);
    v19 = v9;
    v17 = v10;
    if (!v23)
      return (_QWORD *)sub_10017F43C(a1);
LABEL_34:
    v91 = v17;
    v92 = v19;
    v28 = v16;
    v29 = v15;
    v30 = static os_log_type_t.default.getter(v24);
    v31 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v32 = (void *)static OS_os_log.launch.getter(v31);
    v33 = sub_10003F544(&qword_1005559A0);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = v83;
    v35 = objc_msgSend(v23, "URL", v77);
    v36 = v89;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v35);

    v38 = URL.absoluteString.getter(v37);
    v40 = v39;
    v41 = *(void (**)(char *, uint64_t))(v88 + 8);
    v41(v36, v90);
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10003E198();
    *(_QWORD *)(v34 + 32) = v38;
    *(_QWORD *)(v34 + 40) = v40;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v32, "Open URL context: %s", v77);

    swift_bridgeObjectRelease(v34);
    v42 = v86;
    v43 = objc_msgSend(v23, "options");
    v44 = objc_msgSend(v43, "sourceApplication");

    if (v44)
    {
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v47 = v46;

      *((_QWORD *)&v96 + 1) = &type metadata for String;
      *(_QWORD *)&v95 = v45;
      *((_QWORD *)&v95 + 1) = v47;
      sub_10013B9CC(&v95, v94);
      v15 = v29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      v93 = (uint64_t)v29;
      sub_10021C684(v94, v42, isUniquelyReferenced_nonNull_native);
      v49 = v93;

      swift_bridgeObjectRelease(0x8000000000000000);
      v16 = v28;
    }
    else
    {
      v15 = v29;
      swift_bridgeObjectRetain(v29);
      v50 = sub_1001CCFBC(v42);
      v52 = v51;
      swift_bridgeObjectRelease(v29);
      if ((v52 & 1) != 0)
      {
        v53 = swift_isUniquelyReferenced_nonNull_native(v29);
        *(_QWORD *)&v94[0] = v29;
        v49 = (uint64_t)v29;
        v16 = v28;
        if ((v53 & 1) == 0)
        {
          sub_10021E0E4();
          v49 = *(_QWORD *)&v94[0];
        }

        sub_10013B9CC((_OWORD *)(*(_QWORD *)(v49 + 56) + 32 * v50), &v95);
        sub_10021B2F4(v50, v49);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        v95 = 0u;
        v96 = 0u;
        v49 = (uint64_t)v29;
        v16 = v28;
      }

      sub_1000485DC((uint64_t)&v95);
    }
    v54 = v85;
    v55 = objc_msgSend(v23, "options");
    v56 = objc_msgSend(v55, "annotation");

    if (v56)
    {
      _bridgeAnyObjectToAny(_:)(&v95, v56);
      swift_unknownObjectRelease(v56);
      sub_10013B9CC(&v95, v94);
      v57 = swift_isUniquelyReferenced_nonNull_native(v49);
      v93 = v49;
      sub_10021C684(v94, v54, v57);
      v49 = v93;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      swift_bridgeObjectRetain(v49);
      v58 = sub_1001CCFBC(v54);
      v60 = v59;
      swift_bridgeObjectRelease(v49);
      if ((v60 & 1) != 0)
      {
        v61 = swift_isUniquelyReferenced_nonNull_native(v49);
        *(_QWORD *)&v94[0] = v49;
        if ((v61 & 1) == 0)
        {
          sub_10021E0E4();
          v49 = *(_QWORD *)&v94[0];
        }

        sub_10013B9CC((_OWORD *)(*(_QWORD *)(v49 + 56) + 32 * v58), &v95);
        sub_10021B2F4(v58, v49);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        v95 = 0u;
        v96 = 0u;
      }

      sub_1000485DC((uint64_t)&v95);
    }
    v62 = v84;
    v63 = objc_msgSend(v23, "options");
    v64 = objc_msgSend(v63, "openInPlace");

    *((_QWORD *)&v96 + 1) = &type metadata for Bool;
    LOBYTE(v95) = v64;
    sub_10013B9CC(&v95, v94);
    v65 = swift_isUniquelyReferenced_nonNull_native(v49);
    v93 = v49;
    sub_10021C684(v94, v62, v65);
    v66 = v93;

    swift_bridgeObjectRelease(0x8000000000000000);
    v67 = (void *)objc_opt_self(UIApplication);
    v68 = objc_msgSend(v67, "sharedApplication");
    v69 = objc_msgSend(v68, "delegate");

    if (v69)
    {
      if ((objc_msgSend(v69, "respondsToSelector:", v16[14]) & 1) != 0)
      {
        v70 = objc_msgSend(v67, "sharedApplication");
        v71 = objc_msgSend(v23, "URL");
        v72 = v89;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v71);

        URL._bridgeToObjectiveC()(v73);
        v75 = v74;
        type metadata accessor for OpenURLOptionsKey(0);
        sub_10023DFBC();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v69, v16[14], v70, v75, isa);
        swift_unknownObjectRelease(v69);

        swift_bridgeObjectRelease(v66);
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))v41)(v72, v90);
      }
      else
      {

        swift_bridgeObjectRelease(v66);
        result = (_QWORD *)swift_unknownObjectRelease(v69);
      }
    }
    else
    {

      result = (_QWORD *)swift_bridgeObjectRelease(v66);
    }
    v10 = v91;
    v9 = v92;
    a1 = v82;
  }
  if (v10)
  {
    v17 = (v10 - 1) & v10;
    v18 = __clz(__rbit64(v10)) | (v9 << 6);
    v19 = v9;
LABEL_33:
    v24 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v18);
    v23 = v24;
    if (!v24)
      return (_QWORD *)sub_10017F43C(a1);
    goto LABEL_34;
  }
  v25 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v25 >= v80)
      return (_QWORD *)sub_10017F43C(a1);
    v26 = *(_QWORD *)(v81 + 8 * v25);
    v19 = v9 + 1;
    if (!v26)
    {
      v19 = v9 + 2;
      if (v9 + 2 >= v80)
        return (_QWORD *)sub_10017F43C(a1);
      v26 = *(_QWORD *)(v81 + 8 * v19);
      if (!v26)
      {
        v19 = v9 + 3;
        if (v9 + 3 >= v80)
          return (_QWORD *)sub_10017F43C(a1);
        v26 = *(_QWORD *)(v81 + 8 * v19);
        if (!v26)
        {
          v19 = v9 + 4;
          if (v9 + 4 >= v80)
            return (_QWORD *)sub_10017F43C(a1);
          v26 = *(_QWORD *)(v81 + 8 * v19);
          if (!v26)
          {
            v27 = v9 + 5;
            while (v80 != v27)
            {
              v26 = *(_QWORD *)(v81 + 8 * v27++);
              if (v26)
              {
                v19 = v27 - 1;
                goto LABEL_32;
              }
            }
            return (_QWORD *)sub_10017F43C(a1);
          }
        }
      }
    }
LABEL_32:
    v17 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v19 << 6);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

void sub_10023D954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v4 = static os_log_type_t.default.getter();
  v5 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v6 = (void *)static OS_os_log.launch.getter(v5);
  v7 = sub_10003F544(&qword_1005559A0);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10003E198();
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)&v9 = swift_bridgeObjectRetain(a2).n128_u64[0];
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "Will continue user activity type: %{public}s", 44, 2, v8, v9);

  swift_bridgeObjectRelease(v8);
  v10 = (void *)objc_opt_self(UIApplication);
  v11 = objc_msgSend(v10, "sharedApplication");
  v12 = objc_msgSend(v11, "delegate");

  if (v12)
  {
    if ((objc_msgSend(v12, "respondsToSelector:", "application:willContinueUserActivityWithType:") & 1) != 0)
    {
      v13 = objc_msgSend(v10, "sharedApplication");
      v14 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "application:willContinueUserActivityWithType:", v13, v14);
      swift_unknownObjectRelease(v12);

    }
    else
    {
      swift_unknownObjectRelease(v12);
    }
  }
}

void sub_10023DB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  NSString v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[8];

  v6 = static os_log_type_t.default.getter();
  v7 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v8 = (void *)static OS_os_log.launch.getter(v7);
  v9 = sub_10003F544(&qword_1005559A0);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v11 = sub_10003E198();
  *(_QWORD *)(v10 + 64) = v11;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  v22 = a3;
  swift_getErrorValue(a3, v24, v23);
  v12 = v23[1];
  v13 = v23[2];
  swift_bridgeObjectRetain(a2);
  v14 = Error.localizedDescription.getter(v12, v13);
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v11;
  *(_QWORD *)(v10 + 72) = v14;
  *(_QWORD *)(v10 + 80) = v15;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v8, "Did fail to continue user activity type: %{public}s\nerror: %{public}s", 69, 2, v10);

  swift_bridgeObjectRelease(v10);
  v16 = (void *)objc_opt_self(UIApplication);
  v17 = objc_msgSend(v16, "sharedApplication");
  v18 = objc_msgSend(v17, "delegate");

  if (v18)
  {
    if ((objc_msgSend(v18, "respondsToSelector:", "application:didFailToContinueUserActivityWithType:error:") & 1) != 0)
    {
      v19 = objc_msgSend(v16, "sharedApplication");
      v20 = String._bridgeToObjectiveC()();
      v21 = (void *)_convertErrorToNSError(_:)(v22);
      objc_msgSend(v18, "application:didFailToContinueUserActivityWithType:error:", v19, v20, v21);

      swift_unknownObjectRelease(v18);
    }
    else
    {
      swift_unknownObjectRelease(v18);
    }
  }
}

uint64_t sub_10023DD10(void *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[5];
  uint64_t v22;

  v4 = swift_allocObject(&unk_1004B7560, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  v5 = static os_log_type_t.default.getter();
  v6 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.launch.getter(v6);
  v8 = sub_10003F544(&qword_1005559A0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
  v10 = objc_msgSend(a1, "type");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10003E198();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v7, "Perform shortcut action type: %{public}s", 40, 2, v9);

  swift_bridgeObjectRelease(v9);
  v14 = (void *)objc_opt_self(UIApplication);
  v15 = objc_msgSend(v14, "sharedApplication");
  v16 = objc_msgSend(v15, "delegate");

  if (v16)
  {
    if ((objc_msgSend(v16, "respondsToSelector:", "application:performActionForShortcutItem:completionHandler:") & 1) != 0)
    {
      swift_unknownObjectRetain(v16);
      v17 = objc_msgSend(v14, "sharedApplication");
      v21[4] = sub_10020BD8C;
      v22 = v4;
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 1107296256;
      v21[2] = sub_10001C290;
      v21[3] = &unk_1004B7578;
      v18 = _Block_copy(v21);
      objc_msgSend(v16, "application:performActionForShortcutItem:completionHandler:", v17, a1, v18, swift_retain().n128_f64[0]);
      _Block_release(v18);
      v19 = v22;
      swift_release(v4);
      swift_unknownObjectRelease_n(v16, 2);

      return swift_release(v19);
    }
    swift_unknownObjectRelease(v16);
  }
  a2[2](a2, 0);
  return swift_release(v4);
}

uint64_t sub_10023DF98()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10023DFBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B990;
  if (!qword_10055B990)
  {
    type metadata accessor for OpenURLOptionsKey(255);
    result = swift_getWitnessTable(&unk_1003C9B24, v1);
    atomic_store(result, (unint64_t *)&qword_10055B990);
  }
  return result;
}

void sub_10023E01C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];
  void *v49;

  v2 = sub_10003F544(&qword_10055BB28);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MediaLibraryPid(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v39 = (char *)&v38 - v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    v13 = sub_100241438();
    v14 = Set.Iterator.init(_cocoa:)(v48, v11, v12, v13);
    a1 = v48[0];
    v45 = v48[1];
    v15 = v48[2];
    v16 = v48[3];
    v17 = v48[4];
  }
  else
  {
    v18 = -1 << *(_BYTE *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 56);
    v45 = a1 + 56;
    v15 = ~v18;
    v20 = -v18;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v17 = v21 & v19;
    swift_bridgeObjectRetain(a1);
    v16 = 0;
  }
  v40 = v15;
  v44 = (unint64_t)(v15 + 64) >> 6;
  v42 = _swiftEmptyArrayStorage;
  v43 = (char *)&type metadata for Swift.AnyObject + 8;
  v46 = a1;
LABEL_11:
  v22 = v16;
  v23 = v17;
  if (a1 < 0)
  {
    do
    {
      v25 = __CocoaSet.Iterator.next()(v14);
      if (!v25)
        goto LABEL_42;
      v26 = v25;
      v47 = v25;
      v27 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
      swift_unknownObjectRetain(v26);
      swift_dynamicCast(&v49, &v47, v43, v27, 7);
      v28 = v49;
      swift_unknownObjectRelease(v26);
      v16 = v22;
      v17 = v23;
      if (!v28)
        goto LABEL_42;
LABEL_34:
      MediaLibraryPid.init(uint64Value:)(objc_msgSend(v28, "persistentID"));
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v33 = v39;
        v32(v39, v4, v5);
        v32(v41, v33, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
          v42 = (_QWORD *)sub_10027BBF4(0, v42[2] + 1, 1, (unint64_t)v42);
        v35 = v42[2];
        v34 = v42[3];
        if (v35 >= v34 >> 1)
          v42 = (_QWORD *)sub_10027BBF4(v34 > 1, v35 + 1, 1, (unint64_t)v42);
        v36 = v41;
        v37 = v42;
        v42[2] = v35 + 1;
        v14 = (_QWORD *)((uint64_t (*)(char *, char *, uint64_t))v32)((char *)v37+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v35, v36, v5);
        a1 = v46;
        goto LABEL_11;
      }
      v14 = (_QWORD *)sub_100007A28((uint64_t)v4, &qword_10055BB28);
      v22 = v16;
      v23 = v17;
      a1 = v46;
    }
    while (v46 < 0);
  }
  if (v23)
  {
    v17 = (v23 - 1) & v23;
    v24 = __clz(__rbit64(v23)) | (v22 << 6);
    v16 = v22;
    goto LABEL_33;
  }
  v29 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    if (v29 < v44)
    {
      v30 = *(_QWORD *)(v45 + 8 * v29);
      v16 = v22 + 1;
      if (v30)
        goto LABEL_32;
      v16 = v22 + 2;
      if (v22 + 2 >= v44)
        goto LABEL_42;
      v30 = *(_QWORD *)(v45 + 8 * v16);
      if (v30)
        goto LABEL_32;
      v16 = v22 + 3;
      if (v22 + 3 >= v44)
        goto LABEL_42;
      v30 = *(_QWORD *)(v45 + 8 * v16);
      if (v30)
        goto LABEL_32;
      v16 = v22 + 4;
      if (v22 + 4 >= v44)
        goto LABEL_42;
      v30 = *(_QWORD *)(v45 + 8 * v16);
      if (v30)
      {
LABEL_32:
        v17 = (v30 - 1) & v30;
        v24 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_33:
        v28 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v24);
        if (v28)
          goto LABEL_34;
        goto LABEL_42;
      }
      v16 = v22 + 5;
      if (v22 + 5 < v44)
      {
        v30 = *(_QWORD *)(v45 + 8 * v16);
        if (!v30)
        {
          v31 = v22 + 6;
          while (v44 != v31)
          {
            v30 = *(_QWORD *)(v45 + 8 * v31++);
            if (v30)
            {
              v16 = v31 - 1;
              a1 = v46;
              goto LABEL_32;
            }
          }
          goto LABEL_42;
        }
        goto LABEL_32;
      }
    }
LABEL_42:
    sub_10017F43C(v46);
    return;
  }
  __break(1u);
}

void sub_10023E4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  Class isa;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  void *v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    v5 = sub_100241438();
    v6 = Set.Iterator.init(_cocoa:)(v28, v3, v4, v5);
    v1 = v28[0];
    v26 = v28[1];
    v7 = v28[2];
    v8 = v28[3];
    v9 = v28[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v25 = (unint64_t)(v7 + 64) >> 6;
  v13 = MPMediaEntityPropertyKeepLocal;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v25)
      goto LABEL_35;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v25)
        goto LABEL_35;
      v22 = *(_QWORD *)(v26 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v25)
          goto LABEL_35;
        v22 = *(_QWORD *)(v26 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v25)
            goto LABEL_35;
          v22 = *(_QWORD *)(v26 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v25)
              goto LABEL_35;
            v22 = *(_QWORD *)(v26 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v25 != v23)
              {
                v22 = *(_QWORD *)(v26 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10017F43C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_35;
    while (1)
    {
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v20, "setValue:forProperty:", isa, v13);

      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        v18 = v17;
        v27 = v17;
        v19 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v29;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void *sub_10023E790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v2 = a2;
  v3 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_11:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_10033BFAC(v3, v2);
    goto LABEL_13;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001) == 0)
    goto LABEL_11;
LABEL_5:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    v6 = __CocoaSet.count.getter(v5);
    v7 = sub_100339A98(v5, v6);
    swift_bridgeObjectRelease(v2);
    v2 = v7;
    return sub_10033BFAC(v3, v2);
  }
LABEL_13:
  sub_10033B558(v3);
  return (void *)v2;
}

uint64_t sub_10023E884(uint64_t a1)
{
  char *v1;
  char v3;

  v3 = *v1;
  return String.init<A>(describing:)(&v3, a1);
}

uint64_t sub_10023E8B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[24];
  __int128 v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = v1 + 88;
  swift_beginAccess(v1 + 88, v9, 0, 0);
  sub_100241910(v1 + 88, (uint64_t)&v7);
  if (v8)
    return sub_10002099C(&v7, a1);
  v5 = sub_100007A28((uint64_t)&v7, &qword_10055BB68);
  (*(void (**)(uint64_t))(v1 + 72))(v5);
  sub_10000A520(a1, (uint64_t)&v7);
  swift_beginAccess(v3, v6, 33, 0);
  sub_100241958((uint64_t)&v7, v3);
  return swift_endAccess(v6);
}

uint64_t sub_10023E968(void *a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t *v3;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;
  char *v37;
  id v38;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t *);
  _QWORD aBlock[5];
  char *v53;
  __int128 v54[2];
  __int128 v55[2];
  _QWORD v56[6];

  v50 = a3;
  v51 = a2;
  v5 = (void *)sub_10003F544(&qword_100553350);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for URL(0);
  v49 = *(_QWORD *)(v48 - 8);
  v11 = *(_QWORD *)(v49 + 64);
  v12 = __chkstk_darwin(v48);
  v13 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v47 = (char *)&v46 - v14;
  v15 = objc_msgSend(a1, "mediaLibraryDictionary");
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  sub_100214800(v16);
  v18 = v17;
  swift_bridgeObjectRelease(v16);
  v19 = sub_100240E74(v18, v3[2], v3[3]);
  *(_QWORD *)&v20 = swift_bridgeObjectRelease(v18).n128_u64[0];
  if (v19)
  {
    v46 = v5;
    v21 = v50;
    v22 = objc_msgSend(a1, "itemFilePath", v20);
    if (v22)
    {
      v23 = v22;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

      v24 = v49;
      v25 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v26 = v48;
      v25(v10, v13, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v10, 1, v26) != 1)
      {
        v27 = v47;
        v25(v47, v10, v26);
        v28 = v24;
        sub_10023E8B0((uint64_t)v56);
        v46 = (id)v3[21];
        sub_10000A520((uint64_t)(v3 + 16), (uint64_t)v55);
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v13, v27, v26);
        sub_10000A520((uint64_t)v56, (uint64_t)v54);
        v29 = *(unsigned __int8 *)(v24 + 80);
        v30 = (v29 + 88) & ~v29;
        v31 = v29 | 7;
        v32 = v11 + v30 + 7;
        v33 = v21;
        v34 = v32 & 0xFFFFFFFFFFFFFFF8;
        v35 = (char *)swift_allocObject(&unk_1004B7790, (v32 & 0xFFFFFFFFFFFFFFF8) + 40, v31);
        *((_QWORD *)v35 + 2) = v3;
        *((_QWORD *)v35 + 3) = v19;
        *((_QWORD *)v35 + 4) = v51;
        *((_QWORD *)v35 + 5) = v33;
        sub_10002099C(v55, (uint64_t)(v35 + 48));
        v25(&v35[v30], v13, v26);
        sub_10002099C(v54, (uint64_t)&v35[v34]);
        aBlock[4] = sub_10024178C;
        v53 = v35;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10023F6A4;
        aBlock[3] = &unk_1004B77A8;
        v36 = _Block_copy(aBlock);
        v37 = v53;
        swift_retain();
        v38 = v19;
        swift_retain();
        swift_release(v37);
        objc_msgSend(v46, "requestMediaLibraryWriteTransaction:", v36);
        _Block_release(v36);

        sub_10003D380(v56);
        return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v47, v26);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v10, 1, 1, v48);
    }
    sub_100007A28((uint64_t)v10, (uint64_t *)&unk_100553DC0);
    v43 = sub_1002414C8();
    v44 = swift_allocError(&type metadata for MediaLibraryError, v43, 0, 0);
    *v45 = 3;
    *v7 = v44;
    swift_storeEnumTagMultiPayload(v7, v46, 1);
    v51(v7);

  }
  else
  {
    v40 = sub_1002414C8();
    v41 = swift_allocError(&type metadata for MediaLibraryError, v40, 0, 0);
    *v42 = 0;
    *v7 = v41;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v51(v7);
  }
  return sub_100007A28((uint64_t)v7, &qword_100553350);
}

uint64_t sub_10023EE00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t (*)(), _QWORD, uint64_t (*)(char, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31[2];
  __int128 v32[2];

  v28 = a4;
  v30 = a3;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a2 + 4;
  v18 = a2[7];
  v19 = a2[8];
  v29 = sub_10003A834(v17, v18);
  sub_10000A520(a6, (uint64_t)v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a7, v13);
  sub_10000A520(a8, (uint64_t)v31);
  v20 = *(unsigned __int8 *)(v14 + 80);
  v21 = (v20 + 72) & ~v20;
  v22 = (v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1004B77E0, v22 + 40, v20 | 7);
  *(_QWORD *)(v23 + 16) = v28;
  *(_QWORD *)(v23 + 24) = a5;
  sub_10002099C(v32, v23 + 32);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23 + v21, v16, v13);
  sub_10002099C(v31, v23 + v22);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), _QWORD, uint64_t (*)(char, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t, __n128))(v19 + 8);
  v25 = swift_retain();
  v24(v30, 6, UInt64.int64Representation.getter, 0, sub_100241880, v23, v18, v19, v25);
  swift_release(v23);
  return 1;
}

uint64_t sub_10023EF7C(char a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *), uint64_t a6, _QWORD *a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _QWORD v77[2];
  void (*v78)(uint64_t *);
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  _QWORD v88[3];
  uint64_t v89;
  uint64_t v90;

  v81 = a8;
  v82 = a7;
  v84 = a3;
  v14 = sub_10003F544(&qword_10055BB28);
  __chkstk_darwin(v14);
  v16 = (char *)v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for MediaLibraryPid(0);
  v17 = *(_QWORD *)(v85 - 8);
  v18 = __chkstk_darwin(v85);
  v20 = (char *)v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v83 = (char *)v77 - v21;
  v22 = sub_10003F544(&qword_100553350);
  v23 = __chkstk_darwin(v22);
  v25 = (_QWORD *)((char *)v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  v28 = (_QWORD *)((char *)v77 - v27);
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      v32 = a2;
    }
    else
    {
      v40 = v26;
      v41 = sub_1002414C8();
      v32 = swift_allocError(&type metadata for MediaLibraryError, v41, 0, 0);
      *v42 = 1;
      v26 = v40;
    }
    *v25 = v32;
    swift_storeEnumTagMultiPayload(v25, v26, 1);
    swift_errorRetain(a2);
    a5(v25);
    v39 = (uint64_t)v25;
    return sub_100007A28(v39, &qword_100553350);
  }
  v80 = v26;
  if (a4 >> 60 == 15)
  {
    v29 = sub_1002414C8();
    v30 = swift_allocError(&type metadata for MediaLibraryError, v29, 0, 0);
    *v31 = 2;
    *v28 = v30;
    swift_storeEnumTagMultiPayload(v28, v80, 1);
    a5(v28);
LABEL_8:
    v39 = (uint64_t)v28;
    return sub_100007A28(v39, &qword_100553350);
  }
  sub_100005EC8(0, &qword_10055BB40, NSKeyedUnarchiver_ptr);
  v33 = sub_10003F544(&qword_10055BB48);
  v34 = swift_allocObject(v33, 48, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1003CA220;
  *(_QWORD *)(v34 + 32) = sub_100005EC8(0, (unint64_t *)&unk_100560AD0, NSArray_ptr);
  *(_QWORD *)(v34 + 40) = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  v35 = v84;
  sub_100032AC8(v84, a4);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v88, v34, v35, a4);
  swift_bridgeObjectRelease(v34);
  if (!v89)
  {
    sub_100007A28((uint64_t)v88, (uint64_t *)&unk_100552300);
    goto LABEL_7;
  }
  v44 = sub_10003F544(&qword_100553928);
  if ((swift_dynamicCast(&v86, v88, (char *)&type metadata for Any + 8, v44, 6) & 1) == 0)
  {
LABEL_7:
    v36 = sub_1002414C8();
    v37 = swift_allocError(&type metadata for MediaLibraryError, v36, 0, 0);
    *v38 = 2;
    *v28 = v37;
    swift_storeEnumTagMultiPayload(v28, v80, 1);
    a5(v28);
    sub_1001C0F60(v84, a4);
    goto LABEL_8;
  }
  v45 = v86;
  v46 = *(_QWORD *)(v86 + 16);
  v79 = a4;
  if (v46)
  {
    v77[1] = a6;
    v78 = a5;
    v88[0] = _swiftEmptyArrayStorage;
    sub_10017B2E8(0, v46, 0);
    v47 = 0;
    v48 = (_QWORD *)v88[0];
    do
    {
      MediaLibraryPid.init(_:)(*(_QWORD *)(v45 + 8 * v47 + 32));
      v88[0] = v48;
      v50 = v48[2];
      v49 = v48[3];
      if (v50 >= v49 >> 1)
      {
        sub_10017B2E8(v49 > 1, v50 + 1, 1);
        v48 = (_QWORD *)v88[0];
      }
      ++v47;
      v48[2] = v50 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))((unint64_t)v48+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v50, v20, v85);
    }
    while (v46 != v47);
    v51 = swift_bridgeObjectRelease(v45);
    a5 = v78;
    a4 = v79;
  }
  else
  {
    v51 = swift_bridgeObjectRelease(v86);
    v48 = _swiftEmptyArrayStorage;
  }
  v52 = v85;
  if (v48[2])
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v17 + 16))(v16, (unint64_t)v48+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v85, v51);
    v53 = 0;
  }
  else
  {
    v53 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, v53, 1, v52);
  v54 = swift_bridgeObjectRelease(v48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48))(v16, 1, v52, v54) == 1)
  {
    sub_100007A28((uint64_t)v16, &qword_10055BB28);
    goto LABEL_7;
  }
  v55 = v83;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v83, v16, v52);
  v56 = v82[3];
  v57 = v82[4];
  sub_10003A834(v82, v56);
  v58 = v55;
  (*(void (**)(__int128 *__return_ptr, char *, uint64_t))(*(_QWORD *)(v57 + 8) + 8))(&v86, v55, v56);
  if (v87)
  {
    v59 = sub_10002099C(&v86, (uint64_t)v88);
    v60 = URL.path.getter(v59);
    v62 = v61;
    v63 = v89;
    v64 = v90;
    sub_10003A834(v88, v89);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 8))(v60, v62, 0, v63, v64);
    swift_bridgeObjectRelease(v62);
    v65 = a9[3];
    v66 = a9[4];
    v67 = sub_10003A834(a9, v65);
    v68 = MediaLibraryPid.uint64Value.getter(v67);
    v69 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 8))(v68, 1, v65, v66);

    if (v69)
    {
      v70 = v85;
      (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 16))(v28, v58, v85);
      swift_storeEnumTagMultiPayload(v28, v80, 0);
      a5(v28);
      sub_1001C0F60(v84, v79);
      sub_100007A28((uint64_t)v28, &qword_100553350);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v58, v70);
    }
    else
    {
      v74 = sub_1002414C8();
      v75 = swift_allocError(&type metadata for MediaLibraryError, v74, 0, 0);
      *v76 = 4;
      *v28 = v75;
      swift_storeEnumTagMultiPayload(v28, v80, 1);
      a5(v28);
      sub_1001C0F60(v84, v79);
      sub_100007A28((uint64_t)v28, &qword_100553350);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v58, v85);
    }
    return sub_10003D380(v88);
  }
  else
  {
    sub_100007A28((uint64_t)&v86, &qword_10055BB38);
    v71 = sub_1002414C8();
    v72 = swift_allocError(&type metadata for MediaLibraryError, v71, 0, 0);
    *v73 = 4;
    *v28 = v72;
    swift_storeEnumTagMultiPayload(v28, v80, 1);
    a5(v28);
    sub_1001C0F60(v84, a4);
    sub_100007A28((uint64_t)v28, &qword_100553350);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v55, v85);
  }
}

uint64_t sub_10023F6A4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

uint64_t sub_10023F6F4(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  void *v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 v14;

  v14 = 1;
  v6 = objc_autoreleasePoolPush();
  sub_10023F81C(a2, a1, (int)&v14);
  objc_autoreleasePoolPop(v6);
  if ((v14 & 1) != 0)
  {
    a3(0, 0);
    return 1;
  }
  else
  {
    v9 = static os_log_type_t.error.getter(v7);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v10 = (void *)static OS_os_log.mediaLibrary.getter();
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Unsuccessful result code received while deleting items from Media Library.", 74, 2, _swiftEmptyArrayStorage);

    v11 = sub_1002414C8();
    v12 = swift_allocError(&type metadata for MediaLibraryError, v11, 0, 0);
    *v13 = 7;
    a3(v12, 1);
    swift_errorRelease(v12);
    return v14;
  }
}

void sub_10023F81C(uint64_t a1, void *a2, int a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  int v15;
  _BYTE *v17;

  v4 = a2;
  v5 = (uint64_t)sub_1002410A4(a1, v4);

  v6 = static os_log_type_t.default.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.mediaLibrary.getter();
  v8 = sub_10003F544(&qword_1005559A0);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA220;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v9 + 56) = &type metadata for Int;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 32) = v10;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v14 = v5;
    else
      v14 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v11 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v11 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v9 + 96) = &type metadata for Int;
  *(_QWORD *)(v9 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 72) = v11;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Asked to delete %d episodes. About to delete %d episodes", v15, a3);

  swift_bridgeObjectRelease(v9);
  v12 = sub_1001791B4(v5);
  swift_bridgeObjectRelease(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  LOBYTE(v12) = objc_msgSend(v4, "deleteItems:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

  *v17 = v12;
}

void sub_10023F9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v29 = a3;
  v30 = a4;
  v26 = a1;
  v27 = a2;
  v6 = type metadata accessor for MediaLibraryPid(0);
  v7 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(id *)(v5 + 168);
  v14 = swift_allocObject(&unk_1004B7718, 24, 7);
  swift_weakInit(v14 + 16, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v26, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v27, v6);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v12 + v17 + v16) & ~v17;
  v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1004B7740, v19 + 16, v15 | v17 | 7);
  *(_QWORD *)(v20 + 16) = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20 + v16, v13, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v20 + v18, v9, v25);
  v21 = (_QWORD *)(v20 + v19);
  v22 = v30;
  *v21 = v29;
  v21[1] = v22;
  aBlock[4] = sub_100241660;
  v32 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10023F6A4;
  aBlock[3] = &unk_1004B7758;
  v23 = _Block_copy(aBlock);
  v24 = v32;
  swift_retain();
  swift_release(v24);
  objc_msgSend(v28, "requestMediaLibraryWriteTransaction:", v23);
  _Block_release(v23);
}

uint64_t sub_10023FBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD))
{
  uint64_t v8;
  _QWORD *Strong;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, uint64_t, uint64_t);
  char v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];

  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v52, 0, 0);
  Strong = (_QWORD *)swift_weakLoadStrong(v8);
  if (Strong)
  {
    v10 = Strong;
    v11 = Strong + 16;
    v12 = Strong[19];
    v13 = Strong[20];
    sub_10003A834(Strong + 16, v12);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v13 + 8) + 8))(&v47, a4, v12);
    if (v48)
    {
      sub_10002099C(&v47, (uint64_t)v49);
      v14 = v50;
      v15 = v51;
      sub_10003A834(v49, v50);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
      if (v17)
      {
        v18 = v16;
        v19 = v17;
        v20 = v10[19];
        v21 = v10[20];
        sub_10003A834(v11, v20);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 32))(v18, v19, v20, v21);
        swift_bridgeObjectRelease(v19);
        v27 = Data.init(contentsOf:options:)(a3, 0);
        v29 = v28;
        v30 = v50;
        v31 = v51;
        sub_10003A834(v49, v50);
        v32 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v31 + 16);
        sub_100032AC8(v27, v29);
        v33 = v32(v27, v29, v30, v31);
        sub_100032A84(v27, v29);
        if ((v33 & 1) != 0)
        {
          sub_100032A84(v27, v29);
          sub_10003D380(v49);
          swift_release(v10);
          goto LABEL_12;
        }
        v34 = sub_1002414C8();
        v23 = swift_allocError(&type metadata for MediaLibraryError, v34, 0, 0);
        *v35 = 5;
        swift_willThrow(v23);
        sub_100032A84(v27, v29);
      }
      else
      {
        v25 = sub_1002414C8();
        v23 = swift_allocError(&type metadata for MediaLibraryError, v25, 0, 0);
        *v26 = 6;
        swift_willThrow(v23);
      }
      sub_10003D380(v49);
    }
    else
    {
      sub_100007A28((uint64_t)&v47, &qword_10055BB38);
      v22 = sub_1002414C8();
      v23 = swift_allocError(&type metadata for MediaLibraryError, v22, 0, 0);
      *v24 = 4;
      swift_willThrow(v23);
    }
    v36 = swift_release(v10);
    v37 = static os_log_type_t.error.getter(v36);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v38 = (void *)static OS_os_log.mediaLibrary.getter();
    v39 = sub_10003F544(&qword_1005559A0);
    v40 = swift_allocObject(v39, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_1003CA200;
    v41 = (void *)_convertErrorToNSError(_:)(v23);
    v42 = objc_msgSend(v41, "description");

    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    *(_QWORD *)(v40 + 56) = &type metadata for String;
    *(_QWORD *)(v40 + 64) = sub_10003E198();
    *(_QWORD *)(v40 + 32) = v43;
    *(_QWORD *)(v40 + 40) = v45;
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Failed to add artwork: %@", 25, 2, v40);

    swift_bridgeObjectRelease(v40);
    swift_errorRelease(v23);
  }
LABEL_12:
  a5(0, 0);
  return 1;
}

void sub_10023FF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  v3 = v2;
  v6 = static os_log_type_t.default.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.mediaLibrary.getter();
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "About to fetch restore candidates from Media Library.", 53, 2, _swiftEmptyArrayStorage);

  v8 = *(void **)(v3 + 168);
  v9 = swift_allocObject(&unk_1004B7650, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v12[4] = sub_100241530;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10023F6A4;
  v12[3] = &unk_1004B7668;
  v10 = _Block_copy(v12);
  v11 = v13;
  swift_retain();
  swift_release(v11);
  objc_msgSend(v8, "requestMediaLibraryWriteTransaction:", v10);
  _Block_release(v10);
}

id sub_100240068(int a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  double v16;
  uint64_t v17;
  Swift::Int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  Class isa;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void *v51;
  int v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  void (*v56)(uint64_t, uint64_t);

  v3 = static os_log_type_t.default.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v4 = (void *)static OS_os_log.mediaLibrary.getter();
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Fetch restore candidates from Media Library.", 44, 2, _swiftEmptyArrayStorage);

  v5 = objc_msgSend((id)objc_opt_self(MTMediaLibraryRestorePostflightUtil), "downloadCandidateMediaItems");
  v6 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
  v7 = sub_100241438();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v5, v6, v7);

  v9 = static os_log_type_t.default.getter();
  v10 = (void *)static OS_os_log.mediaLibrary.getter();
  v11 = sub_10003F544(&qword_1005559A0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
  v56 = a2;
  *((_QWORD *)&v55 + 1) = 2;
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v13 = v8;
    else
      v13 = v8 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaSet.count.getter(v13);
  }
  else
  {
    v14 = *(_QWORD *)(v8 + 16);
  }
  *(_QWORD *)(v12 + 56) = &type metadata for Int;
  *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v12 + 32) = v14;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Found %d restore candidates in Media Library", a1);

  v15 = swift_bridgeObjectRelease(v12);
  v16 = static Date.timeIntervalSinceReferenceDate.getter(v15);
  swift_bridgeObjectRetain(v8);
  v18 = sub_100240740(v17, v16, 2592000.0);
  sub_10023E01C(v18);
  v53 = v19;
  swift_bridgeObjectRetain(v8);
  v20 = (uint64_t)sub_10023E790(v18, v8);
  v21 = static os_log_type_t.default.getter();
  v22 = (void *)static OS_os_log.mediaLibrary.getter();
  v23 = swift_allocObject(v11, 152, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1003CA240;
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v24 = v8;
    else
      v24 = v8 & 0xFFFFFFFFFFFFFF8;
    v25 = __CocoaSet.count.getter(v24);
  }
  else
  {
    v25 = *(_QWORD *)(v8 + 16);
  }
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(v23 + 56) = &type metadata for Int;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v23 + 32) = v25;
  v26 = v18 & 0xC000000000000001;
  if ((v18 & 0xC000000000000001) != 0)
    v27 = __CocoaSet.count.getter(v18);
  else
    v27 = *(_QWORD *)(v18 + 16);
  v28 = v51;
  *(_QWORD *)(v23 + 96) = &type metadata for Int;
  *(_QWORD *)(v23 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v23 + 72) = v27;
  if ((v20 & 0xC000000000000001) != 0)
  {
    if (v20 < 0)
      v29 = v20;
    else
      v29 = v20 & 0xFFFFFFFFFFFFFF8;
    v30 = __CocoaSet.count.getter(v29);
  }
  else
  {
    v30 = *(_QWORD *)(v20 + 16);
  }
  *(_QWORD *)(v23 + 136) = &type metadata for Int;
  *(_QWORD *)(v23 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v23 + 112) = v30;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Reconcile podcasts downloads. Number of episodes %d. Downloaded within last 30 days %d, download post-restore %d", (_DWORD)v51, v53, 1);

  swift_bridgeObjectRelease(v23);
  sub_10023E4A0(v20);
  swift_bridgeObjectRelease(v20);
  swift_retain();
  v32 = sub_1001F9FA4(v31);
  swift_release(v18);
  v33 = sub_1001791B4((uint64_t)v32);
  swift_release(v32);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend(v28, "deleteItems:", isa, swift_bridgeObjectRelease(v33).n128_f64[0]);

  if ((_DWORD)v35)
  {
    v36 = static os_log_type_t.default.getter();
    v37 = (void *)static OS_os_log.mediaLibrary.getter();
    v38 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v38 + 16) = v55;
    if (v26)
      v39 = __CocoaSet.count.getter(v18);
    else
      v39 = *(_QWORD *)(v18 + 16);
    swift_release(v18);
    *(_QWORD *)(v38 + 56) = &type metadata for Int;
    *(_QWORD *)(v38 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v38 + 32) = v39;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Successfully deleted %d episodes, downloaded with last 30 days.", v52);

    v45 = swift_bridgeObjectRelease(v38);
    ((void (*)(uint64_t, _QWORD, __n128))v56)(v54, 0, v45);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
    swift_bridgeObjectRelease(v54);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = (void *)static OS_os_log.mediaLibrary.getter();
    v43 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v43 + 16) = v55;
    if (v26)
      v44 = __CocoaSet.count.getter(v18);
    else
      v44 = *(_QWORD *)(v18 + 16);
    swift_release(v18);
    *(_QWORD *)(v43 + 56) = &type metadata for Int;
    *(_QWORD *)(v43 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v43 + 32) = v44;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Failed to delete %d episodes, downloaded with last 30 days.", v52);

    swift_bridgeObjectRelease(v43);
    v46 = sub_1002414C8();
    v47 = swift_allocError(&type metadata for MediaLibraryError, v46, 0, 0);
    *v48 = 7;
    v56(v47, 1);
    swift_errorRelease(v47);
  }
  return v35;
}

uint64_t sub_1002405A8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_10003D380(v0 + 4);
  swift_release(v0[10]);
  sub_100007A28((uint64_t)(v0 + 11), &qword_10055BB68);
  sub_10003D380(v0 + 16);
  swift_unknownObjectRelease(v0[21]);
  return swift_deallocClassInstance(v0, 176, 7);
}

uint64_t sub_1002405FC(void *a1, void (*a2)(uint64_t *), uint64_t a3)
{
  return sub_10023E968(a1, a2, a3);
}

void sub_10024061C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD v11[5];
  _QWORD *v12;

  v7 = *(void **)(*(_QWORD *)v3 + 168);
  v8 = (_QWORD *)swift_allocObject(&unk_1004B7600, 40, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v11[4] = sub_1002414BC;
  v12 = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10023F6A4;
  v11[3] = &unk_1004B7618;
  v9 = _Block_copy(v11);
  v10 = v12;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  swift_release(v10);
  objc_msgSend(v7, "requestMediaLibraryWriteTransaction:", v9);
  _Block_release(v9);
}

void sub_1002406F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10023F9C8(a1, a2, a3, a4);
}

void sub_100240718(uint64_t a1, uint64_t a2)
{
  sub_10023FF40(a1, a2);
}

Swift::Int sub_100240740(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int result;
  id v18;
  uint64_t v19;
  double v20;
  id v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;

  v7 = type metadata accessor for Date(0);
  v34 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_1004B76A0, 32, 7);
  *(double *)(v10 + 16) = a2;
  *(double *)(v10 + 24) = a3;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v11 = &_swiftEmptySetSingleton;
    v37 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    v13 = __CocoaSet.makeIterator()(v12);
    v14 = __CocoaSet.Iterator.next()(v13);
    if (v14)
    {
      v15 = v14;
      v33[0] = v10;
      v33[1] = v3;
      v16 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
      do
      {
        v35 = v15;
        swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v18 = objc_msgSend(v36, "dateAdded");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

        v20 = Date.timeIntervalSinceReferenceDate.getter(v19);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
        v21 = v36;
        if (a2 - v20 >= a3)
        {

        }
        else
        {
          v22 = v37;
          v23 = v37[2];
          if (v37[3] <= v23)
          {
            sub_10035DFB8(v23 + 1);
            v22 = v37;
          }
          result = NSObject._rawHashValue(seed:)(v22[5]);
          v24 = v22 + 7;
          v25 = -1 << *((_BYTE *)v22 + 32);
          v26 = result & ~v25;
          v27 = v26 >> 6;
          if (((-1 << v26) & ~v22[(v26 >> 6) + 7]) != 0)
          {
            v28 = __clz(__rbit64((-1 << v26) & ~v22[(v26 >> 6) + 7])) | v26 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v29 = 0;
            v30 = (unint64_t)(63 - v25) >> 6;
            do
            {
              if (++v27 == v30 && (v29 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v31 = v27 == v30;
              if (v27 == v30)
                v27 = 0;
              v29 |= v31;
              v32 = v24[v27];
            }
            while (v32 == -1);
            v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          }
          *(_QWORD *)((char *)v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          *(_QWORD *)(v22[6] + 8 * v28) = v21;
          ++v22[2];
        }
        v15 = __CocoaSet.Iterator.next()(result);
      }
      while (v15);
      v11 = v37;
      v10 = v33[0];
    }
    swift_release(v10);
    swift_release(v13);
  }
  else
  {
    v11 = (void *)sub_100240A28(a1, a2, a3);
    swift_release(v10);
  }
  return (Swift::Int)v11;
}

uint64_t sub_100240A28(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t isStackAllocationSafe;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;

  isStackAllocationSafe = swift_allocObject(&unk_1004B76C8, 32, 7);
  v8 = isStackAllocationSafe;
  *(double *)(isStackAllocationSafe + 16) = a2;
  *(double *)(isStackAllocationSafe + 24) = a3;
  v9 = *(_BYTE *)(a1 + 32);
  v10 = v9 & 0x3F;
  v11 = (1 << v9) + 63;
  v12 = v11 >> 6;
  v13 = 8 * (v11 >> 6);
  if (v10 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v11 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v20 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0), v13);
    sub_100240BE4((unint64_t *)((char *)&v20 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0)), v12, a1, a2, a3);
    v15 = v14;
    v16 = swift_release(a1);
    if (v3)
      swift_willThrow(v16);
    swift_release(v8);
  }
  else
  {
    v17 = (void *)swift_slowAlloc(v13, -1);
    bzero(v17, v13);
    sub_100240BE4((unint64_t *)v17, v12, a1, a2, a3);
    v15 = v18;
    swift_release(a1);
    swift_slowDealloc(v17, -1, -1);
    swift_release(v8);
  }
  return v15;
}

void sub_100240BE4(unint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  double v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v30 = a2;
  v31 = a1;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1004B76F0, 32, 7);
  v13 = 0;
  v14 = *(_QWORD *)(a3 + 56);
  v32 = 0;
  v33 = a3 + 56;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  *(double *)(v12 + 16) = a4;
  *(double *)(v12 + 24) = a5;
  v29 = v12;
  v17 = v16 & v14;
  v34 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_5;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v24 >= v34)
      goto LABEL_24;
    v25 = *(_QWORD *)(v33 + 8 * v24);
    ++v13;
    if (!v25)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v34)
        goto LABEL_24;
      v25 = *(_QWORD *)(v33 + 8 * v13);
      if (!v25)
      {
        v13 = v24 + 2;
        if (v24 + 2 >= v34)
          goto LABEL_24;
        v25 = *(_QWORD *)(v33 + 8 * v13);
        if (!v25)
          break;
      }
    }
LABEL_20:
    v17 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_5:
    v20 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v19);
    v21 = objc_msgSend(v20, "dateAdded");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v23 = Date.timeIntervalSinceReferenceDate.getter(v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

    if (a4 - v23 < a5)
    {
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_10033E020(v31, v30, v32, a3);
        swift_release(v29);
        return;
      }
    }
  }
  v26 = v24 + 3;
  if (v26 >= v34)
    goto LABEL_24;
  v25 = *(_QWORD *)(v33 + 8 * v26);
  if (v25)
  {
    v13 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v13 >= v34)
      goto LABEL_24;
    v25 = *(_QWORD *)(v33 + 8 * v13);
    ++v26;
    if (v25)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

id sub_100240E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  Class isa;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  Class v21;
  id v22;
  id v24;
  _BYTE v25[56];

  v5 = sub_10003F544(&qword_10055BB50);
  inited = swift_initStackObject(v5, v25);
  *(_OWORD *)(inited + 16) = xmmword_1003CA200;
  *(_QWORD *)(inited + 32) = 0x74695F6B63617274;
  *(_QWORD *)(inited + 40) = 0xEB00000000736D65;
  v7 = sub_10003F544(&qword_10055BB58);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(inited + 48) = v8;
  swift_bridgeObjectRetain(a1);
  v9 = sub_10013856C(inited);
  v10 = (void *)objc_opt_self(NSKeyedArchiver);
  sub_10003F544(&qword_10055BB60);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v24 = 0;
  v12 = objc_msgSend(v10, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, &v24, swift_bridgeObjectRelease(v9).n128_f64[0]);

  v13 = v24;
  if (v12)
  {
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v17 = v13;
    v18 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v19);
    swift_errorRelease(v18);
    v14 = 0;
    v16 = 0xF000000000000000;
  }
  swift_bridgeObjectRetain(a3);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  if (v16 >> 60 == 15)
  {
    v21 = 0;
  }
  else
  {
    v21 = Data._bridgeToObjectiveC()().super.isa;
    sub_1001C0F60(v14, v16);
  }
  v22 = objc_msgSend(objc_allocWithZone((Class)ML3DatabaseImport), "initWithLibraryPath:trackData:playlistData:", v20, v21, 0);

  return v22;
}

_QWORD *sub_1002410A4(uint64_t a1, void *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    v9 = (id)swift_bridgeObjectRetain(a1);
    do
    {
      v9 = objc_msgSend(a2, "itemWithPersistentID:verifyExistence:", MediaLibraryPid.uint64Value.getter(v9), 0);
      if (v9)
      {
        v11 = v9;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        v9 = (id)specialized Array._endMutation()(v10);
      }
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1002411CC()
{
  id v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "defaultMediaLibrary");
  v1 = objc_msgSend(v0, "valueForDatabaseProperty:", MTMediaLibraryRestoreTokenProperty);

  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v1);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_10000773C((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast(&v3, v5, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v3;
    else
      return 0;
  }
  else
  {
    sub_100007A28((uint64_t)v5, (uint64_t *)&unk_100552300);
    return 0;
  }
}

uint64_t sub_1002412C0()
{
  id v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;

  v0 = objc_msgSend((id)objc_opt_self(MTMediaLibraryRestorePostflightUtil), "postRestoreCandidateMediaItems");
  v1 = sub_100005EC8(0, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
  v2 = sub_100241438();
  v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v0, v1, v2);

  sub_10023E01C(v3);
  v5 = v4;
  v6 = static os_log_type_t.default.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.mediaLibrary.getter();
  v8 = sub_10003F544(&qword_1005559A0);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1003CA220;
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v10 = v3;
    else
      v10 = v3 & 0xFFFFFFFFFFFFFF8;
    v11 = __CocoaSet.count.getter(v10);
  }
  else
  {
    v11 = *(_QWORD *)(v3 + 16);
  }
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v9 + 56) = &type metadata for Int;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 32) = v11;
  v12 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v9 + 96) = &type metadata for Int;
  *(_QWORD *)(v9 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 72) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Number of post-restore episodes in the Media Library %d, Number of created ids %d", v14, v15);

  swift_bridgeObjectRelease(v9);
  return v5;
}

unint64_t sub_100241438()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100564E50;
  if (!qword_100564E50)
  {
    v1 = sub_100005EC8(255, (unint64_t *)&unk_100559FD0, MPMediaItem_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100564E50);
  }
  return result;
}

uint64_t sub_100241490()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002414BC(void *a1)
{
  uint64_t v1;

  return sub_10023F6F4(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t))(v1 + 24));
}

unint64_t sub_1002414C8()
{
  unint64_t result;

  result = qword_10055BB30;
  if (!qword_10055BB30)
  {
    result = swift_getWitnessTable(&unk_1003CFAF4, &type metadata for MediaLibraryError);
    atomic_store(result, (unint64_t *)&qword_10055BB30);
  }
  return result;
}

uint64_t sub_10024150C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_100241530(int a1)
{
  uint64_t v1;

  return sub_100240068(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100241538()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100241548()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100241558()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100241568()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024158C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for MediaLibraryPid(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v10);
}

uint64_t sub_100241660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for MediaLibraryPid(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_10023FBCC(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *(void (**)(_QWORD, _QWORD))(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002416E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 88) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  sub_10003D380((_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10003D380((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_10024178C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10023EE00(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + 48, v1 + v4, v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1002417E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  sub_10003D380((_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10003D380((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_100241880(char a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_10023EF7C(a1, a2, a3, a4, *(void (**)(uint64_t *))(v4 + 16), *(_QWORD *)(v4 + 24), (_QWORD *)(v4 + 32), v4 + v10, (_QWORD *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100241910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055BB68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100241958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055BB68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for MediaLibraryError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaLibraryError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100241A7C + 4 * byte_1003CF975[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100241AB0 + 4 * byte_1003CF970[v4]))();
}

uint64_t sub_100241AB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100241AB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100241AC0);
  return result;
}

uint64_t sub_100241ACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100241AD4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100241AD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100241AE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaLibraryError()
{
  return &type metadata for MediaLibraryError;
}

unint64_t sub_100241B04()
{
  unint64_t result;

  result = qword_10055BB70;
  if (!qword_10055BB70)
  {
    result = swift_getWitnessTable(&unk_1003CFACC, &type metadata for MediaLibraryError);
    atomic_store(result, (unint64_t *)&qword_10055BB70);
  }
  return result;
}

uint64_t sub_100241B58(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 1)
      return v2 == 1;
    v5 = *a2;
    v4 = a2[1];
    if (*(_OWORD *)a1 == 0)
    {
      v6 = v4 | v5;
      return v2 == 2 && v6 == 0;
    }
    if (*(_QWORD *)a1 ^ 1 | *(_QWORD *)(a1 + 8))
    {
      if (v2 != 2 || v5 != 2)
        return 0;
    }
    else if (v2 != 2 || v5 != 1)
    {
      return 0;
    }
    if (v4)
      return 0;
  }
  else if (*((_BYTE *)a2 + 16))
  {
    return 0;
  }
  return 1;
}

void sub_100241BE0(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  NSString v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  NSString v16;
  id v17;
  uint64_t v18;
  NSString v19;
  NSString v20;
  unint64_t v21;
  _QWORD v22[2];
  _OWORD v23[2];
  _BYTE v24[24];
  uint64_t v25;

  v2 = v1;
  v4 = v1[5];
  v5 = v1[6];
  sub_10003A834(v1 + 2, v4);
  dispatch thunk of MediaLibraryClientProtocol.mostRecentRestoreToken.getter(v4, v5);
  if (v6)
  {
    v7 = v6;
    if ((a1 & 1) == 0)
    {
      v8 = (void *)v2[10];
      v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "setValue:forKey:", v9, v10);

      return;
    }
    swift_bridgeObjectRelease(v6);
    v15 = (void *)v2[10];
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "valueForKey:", v16);

    if (v17)
    {
      _bridgeAnyObjectToAny(_:)(v23, v17);
      swift_unknownObjectRelease(v17);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_10000773C((uint64_t)v23, (uint64_t)v24);
    if (v25)
    {
      if ((swift_dynamicCast(v22, v24, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v18 = v22[1];
        v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v18);
        v20 = String._bridgeToObjectiveC()();
        objc_msgSend(v15, "setValue:forKey:", v19, v20);

        return;
      }
    }
    else
    {
      sub_100007A28((uint64_t)v24, (uint64_t *)&unk_100552300);
    }
    v21 = sub_10004A190();
    swift_allocError(&type metadata for RestoreRunnerError, v21, 0, 0);
    v14 = 0;
    *(_QWORD *)v12 = 0xD000000000000050;
    v13 = 0x80000001004372D0;
  }
  else
  {
    v11 = sub_10004A190();
    swift_allocError(&type metadata for RestoreRunnerError, v11, 0, 0);
    v13 = 0;
    v14 = 2;
    *(_QWORD *)v12 = 2;
  }
  *(_QWORD *)(v12 + 8) = v13;
  *(_BYTE *)(v12 + 16) = v14;
  swift_willThrow();
}

uint64_t sub_100241E44(char a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  NSString v4;
  id v5;
  uint64_t v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  v2 = *(void **)(v1 + 80);
  if ((a1 & 1) != 0)
    v3 = 0x8000000100437290;
  else
    v3 = 0x80000001004372B0;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v5 = objc_msgSend(v2, "valueForKey:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v8, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_10000773C((uint64_t)v8, (uint64_t)v9);
  if (v10)
  {
    if (swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v7;
    else
      return 0;
  }
  else
  {
    sub_100007A28((uint64_t)v9, (uint64_t *)&unk_100552300);
    return 0;
  }
}

void sub_100241F68(char a1, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  sub_1002446B0(a5, a1 & 1);
  v10 = static os_log_type_t.default.getter(v9);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.restore.getter();
  v12 = sub_10003F544(&qword_1005559A0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = a5;
  if ((a1 & 1) != 0)
  {
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "User decided to redownload all post-restore episodes.", 53, 2, v13);

    swift_bridgeObjectRelease(v13);
    sub_100243270(1, a2, a3);
  }
  else
  {
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "User decided to delete all post-restore episodes.", 49, 2, v13);

    swift_bridgeObjectRelease(v13);
    sub_1002421D0(a2, a3);
  }
}

uint64_t sub_1002420B0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  _BYTE v13[8];

  v4 = static os_log_type_t.error.getter(a1);
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v5 = (void *)static OS_os_log.restore.getter();
  v6 = sub_10003F544(&qword_1005559A0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003CA200;
  swift_getErrorValue(a1, v13, v12);
  v8 = Error.localizedDescription.getter(v12[1], v12[2]);
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10003E198();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Failed check if post-restore needed, error: %{public}s", 54, 2, v7);

  swift_bridgeObjectRelease(v7);
  return a2(a1, 0, 1, 1);
}

void sub_1002421D0(void (*a1)(uint64_t, uint64_t, _QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  objc_class *v7;
  char *v8;
  char *v9;
  uint64_t (**v10)@<X0>(uint64_t@<X8>);
  double v11;
  char *v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  char *v16;
  void (**v17)(uint64_t *, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  char *v23;
  char *v24;
  objc_class *v25;
  char *v26;
  char *v27;
  uint64_t (**v28)(uint64_t *, uint64_t, uint64_t);
  double v29;
  uint64_t v30;
  uint64_t (*v31)@<X0>(uint64_t@<X8>);
  objc_class *v32;
  _QWORD *v33;
  char *v34;
  uint64_t (**v35)@<X0>(uint64_t@<X8>);
  uint64_t v36;
  uint64_t (**v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v53;
  __n128 v54;
  uint64_t v55;
  void *v56;
  uint64_t (**v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v75;
  __n128 v76;
  uint64_t v77;
  objc_class *v78;
  char *v79;
  uint64_t v80;
  uint64_t (**v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v97;
  __n128 v98;
  objc_class *v99;
  char *v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  char *v118;
  __n128 v119;
  objc_class *v120;
  char *v121;
  uint64_t v122;
  uint64_t (**v123)(uint64_t);
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  Class isa;
  uint64_t v136;
  uint64_t v137;
  char v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  id v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  __int128 v148;
  id v149;
  objc_super v151;
  objc_super v152;
  objc_super v153;
  objc_super v154;
  uint64_t v155;
  objc_super v156;
  objc_super v157;
  objc_super v158;
  objc_super v159;
  objc_super v160;

  v4 = sub_10004968C(1);
  if ((v6 & 0x100) != 0)
  {
    v136 = v4;
    v137 = v5;
    v138 = v6;
    if (a1)
      a1(v4, v5, v6 | 0x100u);
    sub_10004861C(v136, v137, v138, 1);
  }
  else
  {
    v7 = (objc_class *)sub_10003F544(&qword_10055BCE8);
    v8 = (char *)objc_allocWithZone(v7);
    v9 = &v8[*(_QWORD *)((swift_isaMask & *(_QWORD *)v8) + 0x180)];
    *(_QWORD *)v9 = 0;
    v9[8] = 2;
    v10 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v8[*(_QWORD *)((swift_isaMask & *(_QWORD *)v8) + 0x188)];
    *v10 = sub_1002449B0;
    v10[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v2;
    v160.receiver = v8;
    v160.super_class = v7;
    *(_QWORD *)&v11 = swift_retain(v2).n128_u64[0];
    v12 = (char *)objc_msgSendSuper2(&v160, "init", v11);
    v13 = swift_allocObject(&unk_1004B7B58, 32, 7);
    v148 = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v13 + 16) = v148;
    v14 = (objc_class *)sub_10003F544(&qword_10055BCF0);
    v15 = (char *)objc_allocWithZone(v14);
    v16 = &v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x180)];
    *(_QWORD *)v16 = 0;
    v16[8] = 2;
    v17 = (void (**)(uint64_t *, uint64_t, uint64_t))&v15[*(_QWORD *)((swift_isaMask & *(_QWORD *)v15) + 0x188)];
    *v17 = sub_100244A30;
    v17[1] = (void (*)(uint64_t *, uint64_t, uint64_t))v13;
    v159.receiver = v15;
    v159.super_class = v14;
    swift_unknownObjectRetain(v148);
    v18 = (char *)objc_msgSendSuper2(&v159, "init");
    v19 = *(_QWORD *)(v2 + 56);
    v20 = swift_allocObject(&unk_1004B7B80, 24, 7);
    *(_QWORD *)(v20 + 16) = v19;
    v21 = (objc_class *)sub_10003F544(&qword_10055BCF8);
    v22 = (char *)objc_allocWithZone(v21);
    v23 = &v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x180)];
    *(_QWORD *)v23 = 0;
    v23[8] = 2;
    v24 = &v22[*(_QWORD *)((swift_isaMask & *(_QWORD *)v22) + 0x188)];
    *(_QWORD *)v24 = sub_100244A5C;
    *((_QWORD *)v24 + 1) = v20;
    v158.receiver = v22;
    v158.super_class = v21;
    swift_unknownObjectRetain(v19);
    v143 = objc_msgSendSuper2(&v158, "init");
    v25 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BD00);
    v26 = (char *)objc_allocWithZone(v25);
    v27 = &v26[*(_QWORD *)((swift_isaMask & *(_QWORD *)v26) + 0x180)];
    *(_QWORD *)v27 = 0;
    v27[8] = 2;
    v28 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t))&v26[*(_QWORD *)((swift_isaMask & *(_QWORD *)v26)
                                                                               + 0x188)];
    *v28 = sub_100244A64;
    v28[1] = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2;
    v157.receiver = v26;
    v157.super_class = v25;
    *(_QWORD *)&v29 = swift_retain(v2).n128_u64[0];
    v139 = objc_msgSendSuper2(&v157, "init", v29);
    v30 = swift_allocObject(&unk_1004B79A0, 24, 7);
    swift_weakInit(v30 + 16, v2);
    v31 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject(&unk_1004B7BA8, 40, 7);
    *((_QWORD *)v31 + 2) = v30;
    *((_QWORD *)v31 + 3) = a1;
    *((_QWORD *)v31 + 4) = a2;
    v32 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
    v33 = objc_allocWithZone(v32);
    v34 = (char *)v33 + *(_QWORD *)((swift_isaMask & *v33) + 0x180);
    *(_QWORD *)v34 = 0;
    v34[8] = 2;
    v35 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v33 + *(_QWORD *)((swift_isaMask & *v33) + 0x188));
    *v35 = sub_100244AA0;
    v35[1] = v31;
    v141 = (uint64_t)a1;
    sub_10002CA20((uint64_t)a1, a2);
    v156.receiver = v33;
    v156.super_class = v32;
    v149 = objc_msgSendSuper2(&v156, "init");
    v36 = swift_allocObject(&unk_1004B7BD0, 24, 7);
    swift_unknownObjectWeakInit(v36 + 16, v18);
    v37 = (uint64_t (**)(uint64_t))&v12[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v38 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v39 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v37 = sub_100244ABC;
    v37[1] = (uint64_t (*)(uint64_t))v36;
    sub_10002CA30(v38, v39);
    v40 = objc_opt_self(NSOperation);
    v142 = v12;
    v41 = swift_dynamicCastObjCClass(v12, v40);
    if (v41)
    {
      v43 = v41;
      ObjectType = swift_getObjectType(v41, v42);
      v45 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
      v47 = v45 ? v45 : 0;
      v48 = v45 ? v43 : 0;
      if (v48)
      {
        v146 = swift_getObjectType(v48, v46);
        v49 = swift_allocObject(&unk_1004B7A68, 32, 7);
        *(_QWORD *)(v49 + 24) = v47;
        swift_unknownObjectWeakInit(v49 + 16, v48);
        v50 = swift_allocObject(&unk_1004B7A90, 24, 7);
        swift_unknownObjectWeakInit(v50 + 16, v18);
        v51 = swift_allocObject(&unk_1004B7D10, 32, 7);
        *(_QWORD *)(v51 + 16) = v50;
        *(_QWORD *)(v51 + 24) = v49;
        v52 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v47 + 72);
        v53 = (id)swift_unknownObjectRetain(v12);
        swift_retain(v50);
        v54 = swift_retain(v49);
        v52(sub_1000456D4, v51, v146, v47, v54);
        swift_release(v49);
        swift_release(v50);
        swift_release(v51);
        v151.receiver = v18;
        v151.super_class = (Class)type metadata accessor for BaseOperation();
        objc_msgSendSuper2(&v151, "addDependency:", v43);

      }
    }
    v55 = swift_allocObject(&unk_1004B7BF8, 24, 7);
    v56 = v143;
    swift_unknownObjectWeakInit(v55 + 16, v143);
    v57 = (uint64_t (**)(uint64_t))&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v58 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v59 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v57 = sub_100244AC4;
    v57[1] = (uint64_t (*)(uint64_t))v55;
    v60 = v18;
    sub_10002CA30(v58, v59);
    v61 = objc_opt_self(NSOperation);
    v147 = v60;
    v62 = swift_dynamicCastObjCClass(v60, v61);
    if (v62)
    {
      v64 = v62;
      v65 = swift_getObjectType(v62, v63);
      v66 = swift_conformsToProtocol2(v65, &protocol descriptor for PodcastsOperation);
      v68 = v66 ? v66 : 0;
      v69 = v66 ? v64 : 0;
      if (v69)
      {
        v70 = swift_getObjectType(v69, v67);
        v71 = swift_allocObject(&unk_1004B7A68, 32, 7);
        *(_QWORD *)(v71 + 24) = v68;
        swift_unknownObjectWeakInit(v71 + 16, v69);
        v72 = swift_allocObject(&unk_1004B7A90, 24, 7);
        swift_unknownObjectWeakInit(v72 + 16, v143);
        v73 = swift_allocObject(&unk_1004B7CE8, 32, 7);
        *(_QWORD *)(v73 + 16) = v72;
        *(_QWORD *)(v73 + 24) = v71;
        v74 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v68 + 72);
        v75 = (id)swift_unknownObjectRetain(v147);
        swift_retain(v72);
        v76 = swift_retain(v71);
        v74(sub_1000456D4, v73, v70, v68, v76);
        v77 = v71;
        v56 = v143;
        swift_release(v77);
        swift_release(v72);
        swift_release(v73);
        v78 = (objc_class *)type metadata accessor for BaseOperation();
        v152.receiver = v143;
        v152.super_class = v78;
        objc_msgSendSuper2(&v152, "addDependency:", v64);

      }
    }
    v79 = v56;

    v80 = swift_allocObject(&unk_1004B7C20, 24, 7);
    swift_unknownObjectWeakInit(v80 + 16, v139);
    v81 = (uint64_t (**)(uint64_t))&v79[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v82 = *(_QWORD *)&v79[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v83 = *(_QWORD *)&v79[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v81 = sub_100244ABC;
    v81[1] = (uint64_t (*)(uint64_t))v80;
    sub_10002CA30(v82, v83);
    v84 = objc_opt_self(NSOperation);
    v85 = swift_dynamicCastObjCClass(v79, v84);
    if (v85)
    {
      v87 = v85;
      v88 = swift_getObjectType(v85, v86);
      v89 = swift_conformsToProtocol2(v88, &protocol descriptor for PodcastsOperation);
      v91 = v89 ? v89 : 0;
      v92 = v89 ? v87 : 0;
      if (v92)
      {
        v144 = swift_getObjectType(v92, v90);
        v93 = swift_allocObject(&unk_1004B7A68, 32, 7);
        *(_QWORD *)(v93 + 24) = v91;
        swift_unknownObjectWeakInit(v93 + 16, v92);
        v94 = swift_allocObject(&unk_1004B7A90, 24, 7);
        swift_unknownObjectWeakInit(v94 + 16, v139);
        v95 = swift_allocObject(&unk_1004B7CC0, 32, 7);
        *(_QWORD *)(v95 + 16) = v94;
        *(_QWORD *)(v95 + 24) = v93;
        v96 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v91 + 72);
        swift_unknownObjectRetain(v79);
        v97 = v79;
        swift_retain(v94);
        v98 = swift_retain(v93);
        v96(sub_1000456D4, v95, v144, v91, v98);
        swift_release(v93);
        swift_release(v94);
        swift_release(v95);
        v99 = (objc_class *)type metadata accessor for BaseOperation();
        v153.receiver = v139;
        v153.super_class = v99;
        objc_msgSendSuper2(&v153, "addDependency:", v87);

      }
    }
    v100 = (char *)v139;

    v101 = swift_allocObject(&unk_1004B7C48, 24, 7);
    swift_unknownObjectWeakInit(v101 + 16, v149);
    v102 = (uint64_t (**)(uint64_t))&v100[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v103 = *(_QWORD *)&v100[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v104 = *(_QWORD *)&v100[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v102 = sub_10014FDA0;
    v102[1] = (uint64_t (*)(uint64_t))v101;
    sub_10002CA30(v103, v104);
    v105 = objc_opt_self(NSOperation);
    v106 = swift_dynamicCastObjCClass(v100, v105);
    if (v106)
    {
      v108 = v106;
      v109 = swift_getObjectType(v106, v107);
      v110 = swift_conformsToProtocol2(v109, &protocol descriptor for PodcastsOperation);
      if (v110)
        v112 = v110;
      else
        v112 = 0;
      if (v110)
        v113 = v108;
      else
        v113 = 0;
      if (v113)
      {
        v140 = swift_getObjectType(v113, v111);
        v114 = swift_allocObject(&unk_1004B7A68, 32, 7);
        *(_QWORD *)(v114 + 24) = v112;
        swift_unknownObjectWeakInit(v114 + 16, v113);
        v115 = swift_allocObject(&unk_1004B7A90, 24, 7);
        swift_unknownObjectWeakInit(v115 + 16, v149);
        v116 = swift_allocObject(&unk_1004B7C98, 32, 7);
        *(_QWORD *)(v116 + 16) = v115;
        *(_QWORD *)(v116 + 24) = v114;
        v117 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v112 + 72);
        swift_unknownObjectRetain(v100);
        v145 = v79;
        v118 = v100;
        swift_retain(v115);
        v119 = swift_retain(v114);
        v117(sub_1000456D4, v116, v140, v112, v119);
        swift_release(v114);
        swift_release(v115);
        swift_release(v116);
        v120 = (objc_class *)type metadata accessor for BaseOperation();
        v154.receiver = v149;
        v154.super_class = v120;
        objc_msgSendSuper2(&v154, "addDependency:", v108);

        v79 = v145;
      }
    }
    v121 = (char *)v149;

    v122 = swift_allocObject(&unk_1004B7C70, 32, 7);
    *(_QWORD *)(v122 + 16) = v141;
    *(_QWORD *)(v122 + 24) = a2;
    v123 = (uint64_t (**)(uint64_t))&v121[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    v124 = *(_QWORD *)&v121[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    v125 = *(_QWORD *)&v121[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
    *v123 = sub_100244AD0;
    v123[1] = (uint64_t (*)(uint64_t))v122;
    sub_10002CA20(v141, a2);
    sub_10002CA30(v124, v125);

    v126 = sub_10000C210();
    v127 = sub_10003F544((uint64_t *)&unk_100553780);
    v128 = swift_allocObject(v127, 72, 7);
    *(_OWORD *)(v128 + 16) = xmmword_1003CFB70;
    *(_QWORD *)(v128 + 32) = v142;
    *(_QWORD *)(v128 + 40) = v147;
    *(_QWORD *)(v128 + 48) = v79;
    *(_QWORD *)(v128 + 56) = v100;
    *(_QWORD *)(v128 + 64) = v121;
    v155 = v128;
    specialized Array._endMutation()(v128);
    v129 = v155;
    sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    v130 = v142;
    v131 = v147;
    v132 = v79;
    v133 = v100;
    v134 = v121;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v129);
    objc_msgSend(v126, "addOperations:waitUntilFinished:", isa, 0);

  }
}

void sub_100242CD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(__n128);
  __n128 v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  _QWORD v18[5];
  _QWORD *v19;

  v7 = *a1;
  v8 = swift_allocObject(&unk_1004B7D88, 32, 7);
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v9 = swift_allocObject(&unk_1004B7DB0, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_10003A86C;
  *(_QWORD *)(v9 + 24) = v8;
  v11 = *(uint64_t (**)(__n128))(a4 + 16);
  v10 = *(_QWORD *)(a4 + 24);
  swift_retain(a3);
  v12 = swift_retain(v10);
  v13 = (void *)v11(v12);
  swift_release(v10);
  v14 = (_QWORD *)swift_allocObject(&unk_1004B7DD8, 48, 7);
  v14[2] = v7;
  v14[3] = v13;
  v14[4] = sub_100244B10;
  v14[5] = v9;
  v18[4] = sub_100244B50;
  v19 = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_100027AF8;
  v18[3] = &unk_1004B7DF0;
  v15 = _Block_copy(v18);
  v16 = v19;
  swift_bridgeObjectRetain(v7);
  v17 = v13;
  swift_retain(v9);
  swift_release(v16);
  objc_msgSend(v17, "performBlock:", v15);
  _Block_release(v15);
  swift_release(v9);

}

uint64_t sub_100242E30(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if ((a2 & 1) == 0)
    return a3(a1, 0);
  v6 = sub_1001E4588();
  v7 = swift_allocError(&type metadata for EpisodeStorageError, v6, 0, 0);
  *v8 = a1;
  swift_errorRetain(a1);
  a3(v7, 1);
  return swift_errorRelease(v7);
}

void sub_100242EB8(_QWORD *a1, void (*a2)(_QWORD **), uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSString v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  char v23;

  v5 = *a1;
  v6 = *a1 + 64;
  v7 = 1 << *(_BYTE *)(*a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(*a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(*a1);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_25;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_25;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
        {
          v11 = v16 + 3;
          if (v16 + 3 >= v10)
            goto LABEL_25;
          v17 = *(_QWORD *)(v6 + 8 * v11);
          if (!v17)
          {
            v11 = v16 + 4;
            if (v16 + 4 >= v10)
              goto LABEL_25;
            v17 = *(_QWORD *)(v6 + 8 * v11);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_24:
    v9 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v13 + 8);
    swift_bridgeObjectRetain(v14);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    objc_msgSend(a4, "cancelDownloadsForEpisodeUuid:userInitiated:", v15, 1);

  }
  v18 = v16 + 5;
  if (v18 >= v10)
  {
LABEL_25:
    swift_release(v5);
    v19 = swift_bridgeObjectRetain(v5);
    v20 = sub_1001FA09C(v19);
    swift_bridgeObjectRelease(v5);
    v22 = v20;
    v23 = 0;
    a2(&v22);
    swift_release(v20);
    return;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1002430A4(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  v7 = *a1;
  v8 = swift_allocObject(&unk_1004B7D38, 32, 7);
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v9 = a4 + 2;
  v11 = a4[5];
  v10 = a4[6];
  sub_10003A834(v9, v11);
  v12 = swift_allocObject(&unk_1004B7D60, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_10003A86C;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = swift_retain(a3);
  dispatch thunk of MediaLibraryClientProtocol.deleteEpisodes(identifiers:completion:)(v7, sub_100244B04, v12, v11, v10, v13);
  return swift_release(v12);
}

uint64_t sub_100243164(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0)
    return a3(0, 0);
  swift_errorRetain(a1);
  a3(a1, 1);
  return sub_1001502C4(a1, 1);
}

uint64_t sub_1002431C8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (!result || (v8 = result, sub_100241BE0(1), result = swift_release(v8), !v3))
  {
    if (a2)
      result = a2(0, 0, 0);
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

void sub_100243270(char a1, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  objc_class *v12;
  char *v13;
  char *v14;
  uint64_t (**v15)(uint64_t, void (*)(uint64_t *), uint64_t);
  double v16;
  char *v17;
  uint64_t v18;
  objc_class *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *v25;
  _QWORD *v26;
  char *v27;
  uint64_t (**v28)@<X0>(uint64_t@<X8>);
  id v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128);
  id v47;
  __n128 v48;
  uint64_t v49;
  uint64_t (**v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v67;
  objc_class *v68;
  char *v69;
  uint64_t v70;
  uint64_t (**v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  char *v79;
  char *v80;
  Class isa;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  void *v102;
  objc_super v104;
  objc_super v105;
  objc_super v106;
  objc_super v107;
  _QWORD v108[2];
  unsigned __int8 v109;
  objc_super v110;

  v4 = v3;
  v7 = sub_10004968C(a1);
  if ((v9 & 0x100) != 0)
  {
    v82 = v7;
    v83 = v8;
    v84 = v9;
    v85 = static os_log_type_t.error.getter(v7);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v86 = (void *)static OS_os_log.restore.getter();
    v87 = sub_10003F544(&qword_1005559A0);
    v88 = swift_allocObject(v87, 112, 7);
    *(_OWORD *)(v88 + 16) = xmmword_1003CA220;
    v89 = sub_10003E198();
    v90 = v89;
    v91 = 28526;
    if ((a1 & 1) != 0)
      v91 = 7562617;
    v92 = 0xE200000000000000;
    if ((a1 & 1) != 0)
      v92 = 0xE300000000000000;
    *(_QWORD *)(v88 + 56) = &type metadata for String;
    *(_QWORD *)(v88 + 64) = v89;
    *(_QWORD *)(v88 + 32) = v91;
    *(_QWORD *)(v88 + 40) = v92;
    v108[0] = v82;
    v108[1] = v83;
    v109 = v84;
    v93 = sub_10004A190();
    v94 = Error.localizedDescription.getter(&type metadata for RestoreRunnerError, v93);
    *(_QWORD *)(v88 + 96) = &type metadata for String;
    *(_QWORD *)(v88 + 104) = v90;
    *(_QWORD *)(v88 + 72) = v94;
    *(_QWORD *)(v88 + 80) = v95;
    os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "App is not ready to restore previously downloaded episodes, post-restore: %{public}s, error: %{public}s", 103, 2, v88);

    swift_bridgeObjectRelease(v88);
    if (a2)
    {
      sub_100047858(v82, v83, v84);
      a2(v82, v83, v84 | 0x100u);
      sub_10004861C(v82, v83, v84, 1);
    }
    sub_10004861C(v82, v83, v84, 1);
  }
  else
  {
    v10 = swift_allocObject(&unk_1004B7978, 32, 7);
    v11 = a1 & 1;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v10 + 24) = v3;
    v12 = (objc_class *)sub_10003F544(&qword_10055BCA8);
    v13 = (char *)objc_allocWithZone(v12);
    v14 = &v13[*(_QWORD *)((swift_isaMask & *(_QWORD *)v13) + 0x180)];
    *(_QWORD *)v14 = 0;
    v14[8] = 2;
    v15 = (uint64_t (**)(uint64_t, void (*)(uint64_t *), uint64_t))&v13[*(_QWORD *)((swift_isaMask & *(_QWORD *)v13) + 0x188)];
    *v15 = sub_100244570;
    v15[1] = (uint64_t (*)(uint64_t, void (*)(uint64_t *), uint64_t))v10;
    v110.receiver = v13;
    v110.super_class = v12;
    *(_QWORD *)&v16 = swift_retain(v4).n128_u64[0];
    v17 = (char *)objc_msgSendSuper2(&v110, "init", v16);
    v18 = *(_QWORD *)(v4 + 56);
    v101 = *(_OWORD *)(v4 + 64);
    sub_10000A520(v4 + 16, (uint64_t)v108);
    v19 = (objc_class *)type metadata accessor for RestoreDownloadedEpisodesOperation();
    v20 = (char *)objc_allocWithZone(v19);
    v21 = &v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_input];
    *(_QWORD *)v21 = 0;
    v21[8] = 2;
    *(_QWORD *)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation____lazy_storage___serialQueue] = 0;
    sub_10000A520((uint64_t)v108, (uint64_t)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_mediaLibrary]);
    *(_OWORD *)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_episodeStorage] = v101;
    *(_QWORD *)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_downloadsManager] = v18;
    v107.receiver = v20;
    v107.super_class = v19;
    swift_unknownObjectRetain(v18);
    swift_unknownObjectRetain(v101);
    v22 = (char *)objc_msgSendSuper2(&v107, "init");
    sub_10003D380(v108);
    v23 = swift_allocObject(&unk_1004B79A0, 24, 7);
    swift_weakInit(v23 + 16, v4);
    v24 = swift_allocObject(&unk_1004B79C8, 48, 7);
    *(_QWORD *)(v24 + 16) = v23;
    *(_BYTE *)(v24 + 24) = v11;
    *(_QWORD *)(v24 + 32) = a2;
    *(_QWORD *)(v24 + 40) = a3;
    v25 = (objc_class *)sub_10003F544((uint64_t *)&unk_10055BCB0);
    v26 = objc_allocWithZone(v25);
    v27 = (char *)v26 + *(_QWORD *)((swift_isaMask & *v26) + 0x180);
    *(_QWORD *)v27 = 0;
    v27[8] = 2;
    v28 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v26 + *(_QWORD *)((swift_isaMask & *v26) + 0x188));
    *v28 = sub_1002445D4;
    v28[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v24;
    v100 = (uint64_t)a2;
    sub_10002CA20((uint64_t)a2, a3);
    v106.receiver = v26;
    v106.super_class = v25;
    v29 = objc_msgSendSuper2(&v106, "init");
    v30 = swift_allocObject(&unk_1004B79F0, 24, 7);
    swift_unknownObjectWeakInit(v30 + 16, v22);
    v31 = (uint64_t (**)(uint64_t))&v17[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v32 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v33 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v31 = sub_1002445F4;
    v31[1] = (uint64_t (*)(uint64_t))v30;
    sub_10002CA30(v32, v33);
    v34 = objc_opt_self(NSOperation);
    v102 = v17;
    v35 = swift_dynamicCastObjCClass(v17, v34);
    if (v35)
    {
      v37 = v35;
      ObjectType = swift_getObjectType(v35, v36);
      v39 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for PodcastsOperation);
      v41 = v39 ? v39 : 0;
      v42 = v39 ? v37 : 0;
      if (v42)
      {
        v98 = swift_getObjectType(v42, v40);
        v43 = swift_allocObject(&unk_1004B7A68, 32, 7);
        *(_QWORD *)(v43 + 24) = v41;
        swift_unknownObjectWeakInit(v43 + 16, v42);
        v44 = swift_allocObject(&unk_1004B7A90, 24, 7);
        swift_unknownObjectWeakInit(v44 + 16, v22);
        v45 = swift_allocObject(&unk_1004B7AE0, 32, 7);
        *(_QWORD *)(v45 + 16) = v44;
        *(_QWORD *)(v45 + 24) = v43;
        v46 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, __n128))(v41 + 72);
        v96 = v29;
        v47 = (id)swift_unknownObjectRetain(v102);
        swift_retain(v44);
        v48 = swift_retain(v43);
        v46(sub_1000456D4, v45, v98, v41, v48);
        swift_release(v43);
        swift_release(v44);
        swift_release(v45);
        v104.receiver = v22;
        v104.super_class = (Class)type metadata accessor for BaseOperation();
        objc_msgSendSuper2(&v104, "addDependency:", v37);

        v29 = v96;
      }
    }
    v49 = swift_allocObject(&unk_1004B7A18, 24, 7);
    swift_unknownObjectWeakInit(v49 + 16, v29);
    v50 = (uint64_t (**)(uint64_t))&v22[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v51 = *(_QWORD *)&v22[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    v52 = *(_QWORD *)&v22[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler + 8];
    *v50 = sub_10014FDA0;
    v50[1] = (uint64_t (*)(uint64_t))v49;
    v53 = v22;
    sub_10002CA30(v51, v52);
    v54 = objc_opt_self(NSOperation);
    v55 = swift_dynamicCastObjCClass(v53, v54);
    if (v55)
    {
      v57 = v55;
      v58 = swift_getObjectType(v55, v56);
      v59 = swift_conformsToProtocol2(v58, &protocol descriptor for PodcastsOperation);
      if (v59)
        v61 = v59;
      else
        v61 = 0;
      if (v59)
        v62 = v57;
      else
        v62 = 0;
      if (v62)
      {
        v99 = swift_getObjectType(v62, v60);
        v63 = swift_allocObject(&unk_1004B7A68, 32, 7);
        *(_QWORD *)(v63 + 24) = v61;
        swift_unknownObjectWeakInit(v63 + 16, v62);
        v64 = swift_allocObject(&unk_1004B7A90, 24, 7);
        swift_unknownObjectWeakInit(v64 + 16, v29);
        v65 = swift_allocObject(&unk_1004B7AB8, 32, 7);
        *(_QWORD *)(v65 + 16) = v64;
        *(_QWORD *)(v65 + 24) = v63;
        v66 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t, __n128))(v61 + 72);
        swift_unknownObjectRetain(v53);
        v97 = v53;
        swift_retain(v64);
        v67 = swift_retain(v63);
        v66(sub_1000450E8, v65, v99, v61, v67);
        swift_release(v63);
        swift_release(v64);
        swift_release(v65);
        v68 = (objc_class *)type metadata accessor for BaseOperation();
        v105.receiver = v29;
        v105.super_class = v68;
        objc_msgSendSuper2(&v105, "addDependency:", v57);

      }
    }
    v69 = (char *)v29;

    v70 = swift_allocObject(&unk_1004B7A40, 32, 7);
    *(_QWORD *)(v70 + 16) = v100;
    *(_QWORD *)(v70 + 24) = a3;
    v71 = (uint64_t (**)(uint64_t))&v69[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    v72 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    v73 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError + 8];
    *v71 = sub_100244624;
    v71[1] = (uint64_t (*)(uint64_t))v70;
    sub_10002CA20(v100, a3);
    sub_10002CA30(v72, v73);

    v74 = sub_10000C210();
    v75 = sub_10003F544((uint64_t *)&unk_100553780);
    v76 = swift_allocObject(v75, 56, 7);
    *(_OWORD *)(v76 + 16) = xmmword_1003CA260;
    *(_QWORD *)(v76 + 32) = v102;
    *(_QWORD *)(v76 + 40) = v53;
    *(_QWORD *)(v76 + 48) = v69;
    v108[0] = v76;
    specialized Array._endMutation()(v76);
    v77 = v108[0];
    sub_100005EC8(0, &qword_1005540C0, NSOperation_ptr);
    v78 = v102;
    v79 = v53;
    v80 = v69;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v77);
    objc_msgSend(v74, "addOperations:waitUntilFinished:", isa, 0);

  }
}

uint64_t sub_100243A70(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  char v28;

  v9 = swift_allocObject(&unk_1004B7B08, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  swift_retain(a3);
  if ((a4 & 1) != 0)
  {
    swift_release(v9);
    v11 = a5 + 2;
    v13 = a5[5];
    v12 = a5[6];
    sub_10003A834(v11, v13);
    v14 = dispatch thunk of MediaLibraryClientProtocol.postRestoreCandidates()(v13, v12);
    v15 = static os_log_type_t.default.getter(v14);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v16 = (void *)static OS_os_log.restore.getter();
    v17 = sub_10003F544(&qword_1005559A0);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1003CA200;
    v19 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v18 + 56) = &type metadata for Int;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v18 + 32) = v19;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Number of post-restore items %d", v27);

    swift_bridgeObjectRelease(v18);
    v27 = v14;
    v28 = 0;
    a2(&v27);
    return swift_bridgeObjectRelease(v14);
  }
  else
  {
    v21 = static os_log_type_t.default.getter(v10);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v22 = (void *)static OS_os_log.restore.getter();
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Will prepare most recently downloaded episodes for redownload.", 62, 2, _swiftEmptyArrayStorage);

    v23 = a5[5];
    v24 = a5[6];
    sub_10003A834(a5 + 2, v23);
    v25 = (_QWORD *)swift_allocObject(&unk_1004B7B30, 40, 7);
    v25[2] = sub_10003A874;
    v25[3] = v9;
    v25[4] = a5;
    v26 = swift_retain(a5);
    dispatch thunk of MediaLibraryClientProtocol.reconcileMostRecentlyDownloadedEpisodes(completion:)(sub_1002446A0, v25, v23, v24, v26);
    return swift_release(v25);
  }
}

uint64_t sub_100243C94(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];

  if ((a2 & 1) != 0)
  {
    v11 = swift_errorRetain(a1);
    v12 = static os_log_type_t.error.getter(v11);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v13 = (void *)static OS_os_log.restore.getter();
    v14 = sub_10003F544(&qword_1005559A0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1003CA200;
    swift_getErrorValue(a1, v20, v19);
    v16 = Error.localizedDescription.getter(v19[1], v19[2]);
    v18 = v17;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10003E198();
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Failed to prepare most recently downloaded episodes for restore, error: %{public}s", 82, 2, v15);

    swift_bridgeObjectRelease(v15);
    swift_errorRetain(a1);
    a3(a1, 1);
    sub_1002449A4(a1, 1);
    return sub_1002449A4(a1, 1);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = static os_log_type_t.default.getter(a1);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v7 = (void *)static OS_os_log.restore.getter();
    v8 = sub_10003F544(&qword_1005559A0);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v9 + 56) = &type metadata for Int;
    *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v9 + 32) = v5;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Successfully prepared %d previously downloaded episodes for redownload.", LODWORD(v19[0]));

    swift_bridgeObjectRelease(v9);
    sub_100244814(v5);
    return ((uint64_t (*)(uint64_t, _QWORD))a3)(a1, 0);
  }
}

uint64_t sub_100243E98@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[24];

  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  result = swift_weakLoadStrong(v8);
  if (!result || (v10 = result, sub_100241BE0(a2 & 1), result = swift_release(v10), !v4))
  {
    v11 = static os_log_type_t.default.getter(result);
    sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
    v12 = (void *)static OS_os_log.restore.getter();
    v13 = sub_10003F544(&qword_1005559A0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1003CA200;
    v15 = sub_10003E198();
    v16 = 0x6563655274736F6DLL;
    if ((a2 & 1) != 0)
      v16 = 0x7473655274736F70;
    v17 = 0xEA0000000000746ELL;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = v15;
    if ((a2 & 1) != 0)
      v17 = 0xEB0000000065726FLL;
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v17;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}s anchor has been set.", 31, 2, v14);

    result = swift_bridgeObjectRelease(v14);
    if (a3)
      result = a3(0, 0, 0);
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 0;
  }
  return result;
}

uint64_t sub_100244028(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  _BYTE v18[8];

  v9 = static os_log_type_t.error.getter();
  sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.restore.getter();
  v11 = sub_10003F544(&qword_1005559A0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003CA200;
  swift_getErrorValue(a1, v18, v17);
  v13 = Error.localizedDescription.getter(v17[1], v17[2]);
  v15 = v14;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10003E198();
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, a4, a5, 2, v12);

  result = swift_bridgeObjectRelease(v12);
  if (a2)
    return a2(a1, 0, 257);
  return result;
}

Swift::Int sub_100244154(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Int result;
  int64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];
  _QWORD *v41;
  uint64_t *v42;

  v2 = &_swiftEmptyDictionarySingleton;
  v41 = &_swiftEmptyDictionarySingleton;
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  v42 = &v35;
  result = swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_25;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v30)
      goto LABEL_40;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v30)
        goto LABEL_40;
      v12 = *(_QWORD *)(v31 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v30)
          goto LABEL_40;
        v12 = *(_QWORD *)(v31 + 8 * v13);
        if (!v12)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v30)
            goto LABEL_40;
          v12 = *(_QWORD *)(v31 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v7 = v13;
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v17 = *v15;
    v16 = v15[1];
    sub_10020C738(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(_QWORD *)&v39 = v17;
    *((_QWORD *)&v39 + 1) = v16;
    v37 = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    sub_10020C738((uint64_t)v38, (uint64_t)&v32);
    if (v33)
    {
      sub_10013B9CC(&v32, v36);
      v18 = v37;
      v34[2] = v37;
      sub_10000773C((uint64_t)v38, (uint64_t)v42);
      sub_10013B9CC(v36, v34);
      v19 = v2[2];
      if (v2[3] <= v19)
      {
        v20 = v19 + 1;
        swift_bridgeObjectRetain(v16);
        sub_1002171F0(v20, 1);
        v2 = v41;
      }
      else
      {
        swift_bridgeObjectRetain(v16);
      }
      Hasher.init(_seed:)(&v32, v2[5]);
      String.hash(into:)(&v32, v18, *((_QWORD *)&v18 + 1));
      result = Hasher._finalize()();
      v21 = (char *)(v2 + 8);
      v22 = -1 << *((_BYTE *)v2 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~v2[(v23 >> 6) + 8]) != 0)
      {
        v25 = __clz(__rbit64((-1 << v23) & ~v2[(v23 >> 6) + 8])) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)&v21[8 * v24];
        }
        while (v29 == -1);
        v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      }
      *(_QWORD *)&v21[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
      *(_OWORD *)(v2[6] + 16 * v25) = v18;
      sub_10013B9CC(v34, (_OWORD *)(v2[7] + 32 * v25));
      ++v2[2];
      v8 = (__int128 *)v42;
    }
    else
    {
      swift_bridgeObjectRetain(v16);
      sub_100007A28((uint64_t)&v37, &qword_10055BCE0);
      v8 = &v32;
    }
    result = sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100552300);
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_40:
    sub_10017F43C(a1);
    return (Swift::Int)v2;
  }
  v12 = *(_QWORD *)(v31 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      goto LABEL_40;
    v12 = *(_QWORD *)(v31 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_24;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100244508()
{
  uint64_t v0;

  sub_10003D380((_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));

  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t sub_10024454C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100244570(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v3;

  return sub_100243A70(a1, a2, a3, *(_BYTE *)(v3 + 16), *(_QWORD **)(v3 + 24));
}

uint64_t sub_10024457C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002445A0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002445D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100243E98(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 32), a1);
}

uint64_t sub_1002445F4(uint64_t a1)
{
  uint64_t v1;

  return sub_100339A74(a1, v1);
}

uint64_t sub_1002445FC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100244624(uint64_t a1)
{
  uint64_t v1;

  return sub_100244028(a1, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)"Failed restore downloaded episodes, error: %{public}s", 53);
}

uint64_t sub_100244648()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100244674()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002446A0(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100243C94(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_1002446B0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  _BYTE v15[128];

  v4 = sub_10003F544((uint64_t *)&unk_10055BCC0);
  inited = swift_initStackObject(v4, v15);
  *(_OWORD *)(inited + 16) = xmmword_1003CA220;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeRestoredCount);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeRestoreRequested);
  *(_QWORD *)(inited + 88) = v7;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = a2;
  v8 = sub_100138F60(inited);
  v9 = sub_100244154(v8);
  swift_bridgeObjectRelease(v8);
  v10 = sub_100005EC8(0, (unint64_t *)&unk_10055BCD0, &off_1004A4568);
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "sharedInstance");
  sub_100214BDC(v9);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v11, "reportWithType:userInfo:location:reason:", 6, isa, CFSTR("rstr"), 0);

}

void sub_100244814(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  _BYTE v14[128];

  v2 = sub_10003F544((uint64_t *)&unk_10055BCC0);
  inited = swift_initStackObject(v2, v14);
  *(_OWORD *)(inited + 16) = xmmword_1003CA220;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeRestoredCount);
  *(_QWORD *)(inited + 40) = v4;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kEpisodeRestoreIsRetry);
  *(_QWORD *)(inited + 88) = v5;
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", 1);
  *(_QWORD *)(inited + 120) = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  *(_QWORD *)(inited + 96) = v6;
  v7 = sub_100138F60(inited);
  v8 = sub_100244154(v7);
  swift_bridgeObjectRelease(v7);
  v9 = sub_100005EC8(0, (unint64_t *)&unk_10055BCD0, &off_1004A4568);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "sharedInstance");
  sub_100214BDC(v8);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v10, "reportWithType:userInfo:location:reason:", 6, isa, CFSTR("rstr"), 0);

}

uint64_t sub_1002449A4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1002449B0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = v1[5];
  v4 = v1[6];
  sub_10003A834(v1 + 2, v3);
  result = dispatch thunk of MediaLibraryClientProtocol.postRestoreCandidates()(v3, v4);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_100244A0C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100244A30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100242CD8(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_100244A38()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100244A5C(_QWORD *a1, void (*a2)(_QWORD **), uint64_t a3)
{
  uint64_t v3;

  sub_100242EB8(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_100244A64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1002430A4(a1, a2, a3, v3);
}

uint64_t sub_100244A6C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100244AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002431C8(*(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 24), a1);
}

uint64_t sub_100244ABC(uint64_t a1)
{
  uint64_t v1;

  return sub_100339A3C(a1, v1);
}

uint64_t sub_100244AC4(uint64_t a1)
{
  uint64_t v1;

  return sub_100339A58(a1, v1);
}

uint64_t sub_100244AD0(uint64_t a1)
{
  uint64_t v1;

  return sub_100244028(a1, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)"Failed delete post flight downloads, error: %{public}s", 54);
}

uint64_t sub_100244B04(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100243164(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100244B10(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100242E30(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100244B1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100244B50()
{
  uint64_t v0;

  sub_1003728D0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(id, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100244B5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100244B88(uint64_t a1)
{
  uint64_t v1;

  return sub_1002420B0(a1, *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100244B90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100244BB4(char a1, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3)
{
  uint64_t v3;

  sub_100241F68(a1 & 1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t assignWithCopy for RestoreRunnerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100047858(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100047BD0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RestoreRunnerError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100047BD0(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for RestoreRunnerError()
{
  return &type metadata for RestoreRunnerError;
}

uint64_t storeEnumTagSinglePayload for PostRestoreProceedOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100244CB4 + 4 * byte_1003CFB85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100244CE8 + 4 * byte_1003CFB80[v4]))();
}

uint64_t sub_100244CE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100244CF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100244CF8);
  return result;
}

uint64_t sub_100244D04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100244D0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100244D10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100244D18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PostRestoreProceedOption()
{
  return &type metadata for PostRestoreProceedOption;
}

unint64_t sub_100244D38()
{
  unint64_t result;

  result = qword_10055BD10;
  if (!qword_10055BD10)
  {
    result = swift_getWitnessTable(&unk_1003CFD74, &type metadata for PostRestoreProceedOption);
    atomic_store(result, (unint64_t *)&qword_10055BD10);
  }
  return result;
}

uint64_t static Result<>.success.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Result(0, (char *)&type metadata for () + 8, a1, a2);
  return swift_storeEnumTagMultiPayload(a3, v4, 0);
}

uint64_t Result.zip<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  __chkstk_darwin(a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, _QWORD *))(v10 + 16))(v9, v11, a2);
  if (swift_getEnumCaseMultiPayload(v9, a2) == 1)
  {
    v12 = a2[3];
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a4, v9, v12);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a2[2], a3, 0, 0);
    v14 = type metadata accessor for Result(0, TupleTypeMetadata2, v12, a2[4]);
    v15 = 1;
  }
  else
  {
    v16 = a2[2];
    v17 = swift_getTupleTypeMetadata2(0, v16, a3, 0, 0);
    v18 = a4 + *(int *)(v17 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a4, v9, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v18, a1, a3);
    v14 = type metadata accessor for Result(0, v17, a2[3], a2[4]);
    v15 = 0;
  }
  return swift_storeEnumTagMultiPayload(a4, v14, v15);
}

uint64_t sub_100244F64()
{
  uint64_t v0;

  v0 = sub_10003F544((uint64_t *)&unk_100553DC0);
  sub_100047DD0(v0, qword_10055BD20);
  sub_100047DA4(v0, (uint64_t)qword_10055BD20);
  return URL.init(string:)(0xD000000000000033, 0x8000000100437570);
}

void sub_100244FC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSURL *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  Class isa;
  uint64_t v13;

  v0 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v3)
  {
    v4 = v3;
    if (qword_100552078 != -1)
      swift_once(&qword_100552078, sub_100244F64);
    v5 = sub_100047DA4(v0, (uint64_t)qword_10055BD20);
    sub_100036A44(v5, (uint64_t)v2);
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    v9 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v2, 1, v6) != 1)
    {
      URL._bridgeToObjectiveC()(v8);
      v9 = v10;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v2, v6);
    }
    v11 = sub_1001386B4((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "openSensitiveURL:withOptions:", v9, isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

id _sSo13UIApplicationC8PodcastsE18openGlobalSettings19deepLinkDestinationy0B2UI0de4DeepG5StateC0H0O_tF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id result;
  NSURL *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  Class isa;
  uint64_t v18;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v18 - v9;
  static URL.iOSAutomaticallyDownloadPreferences.getter(v8);
  sub_100036A44((uint64_t)v10, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    sub_1001C9958((uint64_t)v10);
    return (id)sub_1001C9958((uint64_t)v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v13 = result;
    URL._bridgeToObjectiveC()(v12);
    v15 = v14;
    v16 = sub_1001386B4((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v13, "openSensitiveURL:withOptions:", v15, isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v7 = v10;
    return (id)sub_1001C9958((uint64_t)v7);
  }
  __break(1u);
  return result;
}

void _sSo13UIApplicationC8PodcastsE18openGlobalSettingsyyF_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSURL *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  Class isa;
  uint64_t v12;

  v0 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v3)
  {
    v4 = v3;
    static URL.iOSGlobalPreferences.getter();
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    v8 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) != 1)
    {
      URL._bridgeToObjectiveC()(v7);
      v8 = v9;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v2, v5);
    }
    v10 = sub_1001386B4((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "openSensitiveURL:withOptions:", v8, isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MTLibrary.cleanUpNeutralInterests()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.database.getter(v4);
  v7 = static os_log_type_t.default.getter();
  v8 = v7;
  v9 = Logger.logObject.getter(v7);
  if (os_log_type_enabled(v9, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Deleting all neutral interests", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v12 = objc_msgSend(v11, "importContext");

  v13 = swift_allocObject(&unk_1004B8050, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  v14 = swift_allocObject(&unk_1004B8078, 32, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  aBlock[4] = sub_100245658;
  v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B8090;
  v15 = _Block_copy(aBlock);
  v16 = v19;
  v17 = v12;
  swift_release(v16);
  objc_msgSend(v17, "performBlock:", v15);
  _Block_release(v15);

}

uint64_t sub_100245630()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100245658()
{
  uint64_t v0;

  sub_100245904(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))sub_100245CFC);
}

Swift::Void __swiftcall MTLibrary.deleteAllInterestsBlockingCaller()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.database.getter(v4);
  v7 = static os_log_type_t.default.getter();
  v8 = v7;
  v9 = Logger.logObject.getter(v7);
  if (os_log_type_enabled(v9, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Immediately deleting all interests", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v12 = objc_msgSend(v11, "importContext");

  v13 = swift_allocObject(&unk_1004B8050, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  v14 = swift_allocObject(&unk_1004B80C8, 32, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = swift_allocObject(&unk_1004B80F0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100245A60;
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = sub_100029B3C;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100029B1C;
  aBlock[3] = &unk_1004B8108;
  v16 = _Block_copy(aBlock);
  v17 = v20;
  v18 = v12;
  swift_retain();
  swift_release(v17);
  objc_msgSend(v18, "performBlockAndWait:", v16);

  _Block_release(v16);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v15, "", 96, 32, 32, 1);
  swift_release(v14);
  swift_release(v15);
  if ((v18 & 1) != 0)
    __break(1u);
}

void sub_100245904(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    a3(a2);

  }
}

uint64_t sub_10024599C(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*a1, "lastUpdatedDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static Date.< infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

void sub_100245A60()
{
  uint64_t v0;

  sub_100245904(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))sub_100246400);
}

uint64_t sub_100245A80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100245A90(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  NSObject *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  double v18;
  id v19;
  uint64_t v20;
  double v21;
  _DWORD *v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;

  v27 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v28 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Logger.database.getter(v8);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  if (os_log_type_enabled(v14, v12))
  {
    v15 = (_DWORD *)swift_slowAlloc(32, -1);
    v25 = v7;
    v16 = v15;
    *v15 = 134218496;
    v17 = v15 + 1;
    v29 = COERCE_DOUBLE(-[NSObject adamID](v13, "adamID"));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17, v16 + 3);
    v26 = a2;
    *((_WORD *)v16 + 6) = 2048;
    -[NSObject interestValue](v13, "interestValue");
    v29 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, (char *)v16 + 14, (char *)v16 + 22);
    *((_WORD *)v16 + 11) = 2048;
    v19 = -[NSObject lastUpdatedDate](v13, "lastUpdatedDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = Date.timeIntervalSinceReferenceDate.getter(v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v27);
    v29 = v21;
    a2 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 6, v16 + 8);

    _os_log_impl((void *)&_mh_execute_header, v14, v12, "Deleting interest as part of interest cleanup. AdamID: %llu, interestValue: %f, lastUpdatedDate: %f", (uint8_t *)v16, 0x20u);
    v22 = v16;
    v7 = v25;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    v14 = v13;
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
  return objc_msgSend(a2, "deleteObject:", v13);
}

double sub_100245CFC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  Class isa;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  double v37;
  char v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  double result;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint8_t *v52;
  uint64_t i;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  char *v71;
  char v72[24];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v68 = v2;
  v69 = v3;
  __chkstk_darwin(v2);
  v70 = (uint8_t *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v71 = (char *)&v67 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v67 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (uint64_t)&v67 - v16;
  kMTInterestEntityName.getter(v15);
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  type metadata accessor for MTInterest(0);
  v21 = (void *)static MTInterest.predicateForNeutralInterests()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(a1, "objectsInEntity:predicate:sortDescriptors:", v20, v21, isa);

  if (v23
    && (v25 = sub_1001AD50C(),
        v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v25),
        v23,
        v27 = sub_10034F110(v26),
        swift_bridgeObjectRelease(v26),
        v27))
  {
    v77 = (unint64_t)v27;
    static Logger.database.getter(v24);
    v28 = static os_log_type_t.default.getter();
    v29 = v28;
    v30 = Logger.logObject.getter(v28);
    if (!os_log_type_enabled((os_log_t)v30, v29))
      goto LABEL_7;
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v31 = 134217984;
    swift_beginAccess(&v77, v72, 0, 0);
    v32 = v77;
    if (v77 >> 62)
      goto LABEL_41;
    v33 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v75 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v31 + 4, v31 + 12);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v30, v29, "Starting to delete %ld neutral interests.", v31, 0xCu);
      swift_slowDealloc(v31, -1, -1);
LABEL_7:

      v34 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v34(v17, v5);
      v35 = type metadata accessor for SyncKeysRepository(0);
      v36 = (void *)static SyncKeysRepository.shared.getter(v35);
      v37 = COERCE_DOUBLE(SyncKeysRepository.interestLastSyncTimestamp.getter());
      v39 = v38;

      v31 = v70;
      if ((v39 & 1) != 0)
        static Date.distantFuture.getter();
      else
        Date.init(timeIntervalSinceReferenceDate:)(v37);
      swift_beginAccess(&v77, &v75, 1, 0);
      v32 = (uint64_t)&v67;
      v45 = v77;
      __chkstk_darwin(v46);
      *(&v67 - 2) = (uint64_t)v31;
      swift_bridgeObjectRetain(v45);
      v47 = (uint64_t)sub_1002821D8(sub_1002468DC, &v67 - 4, v45);
      v48 = v77;
      v77 = v47;
      swift_bridgeObjectRelease(v48);
      static Logger.database.getter(v49);
      v29 = static os_log_type_t.default.getter();
      v50 = swift_bridgeObjectRetain_n(v47, 2);
      v51 = Logger.logObject.getter(v50);
      if (os_log_type_enabled(v51, v29))
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v52 = 134217984;
        if ((unint64_t)v47 >> 62)
        {
          v66 = v47 < 0 ? v47 : v47 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v47);
          v32 = _CocoaArrayWrapper.endIndex.getter(v66);
          swift_bridgeObjectRelease(v47);
        }
        else
        {
          v32 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v47);
        v73 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v52 + 4, v52 + 12);
        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v51, v29, "Proceeding to delete %ld interests.", v52, 0xCu);
        swift_slowDealloc(v52, -1, -1);

        v31 = v70;
      }
      else
      {

        swift_bridgeObjectRelease_n(v47, 2);
      }
      v34((uint64_t)v14, v5);
      v17 = v77;
      v6 = v77 >> 62;
      if (v77 >> 62)
      {
        if ((v77 & 0x8000000000000000) != 0)
          v56 = v77;
        else
          v56 = v77 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v77);
        v30 = _CocoaArrayWrapper.endIndex.getter(v56);
        if (!v30)
          goto LABEL_30;
      }
      else
      {
        v30 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v77);
        if (!v30)
          goto LABEL_30;
      }
      if (v30 >= 1)
        break;
      __break(1u);
LABEL_41:
      if (v32 < 0)
        v65 = v32;
      else
        v65 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v32);
      v33 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v32);
    }
    for (i = 0; i != v30; ++i)
    {
      if ((v17 & 0xC000000000000001) != 0)
        v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v17);
      else
        v54 = *(id *)(v17 + 8 * i + 32);
      v55 = v54;
      sub_100245A90(v54, a1);

    }
LABEL_30:
    swift_bridgeObjectRelease(v17);
    static Logger.database.getter(v57);
    v58 = swift_bridgeObjectRetain_n(v17, 2);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v61 = 134217984;
      if (v6)
      {
        if (v17 < 0)
          v64 = v17;
        else
          v64 = v17 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v17);
        v62 = _CocoaArrayWrapper.endIndex.getter(v64);
        swift_bridgeObjectRelease(v17);
      }
      else
      {
        v62 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v63 = v68;
      swift_bridgeObjectRelease(v17);
      v73 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Finished deleting %ld interests.", v61, 0xCu);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
      v63 = v68;
    }
    v34((uint64_t)v71, v5);
    objc_msgSend(a1, "saveInCurrentBlock");
    (*(void (**)(uint8_t *, uint64_t))(v69 + 8))(v31, v63);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v77).n128_u64[0];
  }
  else
  {
    v40 = static Logger.database.getter(v24);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to fetch interests when attempting to cleanup. Cannot delete any interests.", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

id sub_100246400(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  Class isa;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void (*v34)(uint64_t, uint64_t);
  uint64_t i;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v47 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (uint64_t)&v47 - v11;
  kMTInterestEntityName.getter(v10);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend((id)objc_opt_self(NSPredicate), "truePredicate");
  isa = Array._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(a1, "objectsInEntity:predicate:sortDescriptors:", v15, v16, isa);

  if (v18
    && (v20 = sub_1001AD50C(),
        v21 = (uint8_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v20),
        v18,
        v22 = (uint64_t)sub_10034F110((unint64_t)v21),
        swift_bridgeObjectRelease(v21),
        v22))
  {
    v47 = v2;
    static Logger.database.getter(v19);
    v23 = static os_log_type_t.default.getter();
    v24 = swift_bridgeObjectRetain_n(v22, 2);
    v25 = Logger.logObject.getter(v24);
    if (!os_log_type_enabled(v25, v23))
    {
      v27 = (unint64_t)v22 >> 62;

      swift_bridgeObjectRelease_n(v22, 2);
      goto LABEL_11;
    }
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v21 = 134217984;
    v26 = v22 & 0xFFFFFFFFFFFFFF8;
    v27 = (unint64_t)v22 >> 62;
    if ((unint64_t)v22 >> 62)
      goto LABEL_35;
    v28 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease(v22);
      v48 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v23, "Starting to delete all %ld interests.", v21, 0xCu);
      swift_slowDealloc(v21, -1, -1);

LABEL_11:
      v34 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v34(v12, v47);
      v3 = v27;
      if (v27)
      {
        if (v22 < 0)
          v38 = v22;
        else
          v38 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v12 = _CocoaArrayWrapper.endIndex.getter(v38);
        v27 = v47;
        if (!v12)
          goto LABEL_23;
      }
      else
      {
        v12 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v22);
        v27 = v47;
        if (!v12)
          goto LABEL_23;
      }
      if (v12 >= 1)
        break;
      __break(1u);
LABEL_35:
      if (v22 >= 0)
        v46 = v26;
      else
        v46 = v22;
      swift_bridgeObjectRetain(v22);
      v28 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease(v22);
    }
    for (i = 0; i != v12; ++i)
    {
      if ((v22 & 0xC000000000000001) != 0)
        v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v22);
      else
        v36 = *(id *)(v22 + 8 * i + 32);
      v37 = v36;
      sub_100245A90(v36, a1);

    }
LABEL_23:
    swift_bridgeObjectRelease(v22);
    static Logger.database.getter(v39);
    swift_bridgeObjectRetain(v22);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v43 = 134217984;
      if (v3)
      {
        if (v22 < 0)
          v45 = v22;
        else
          v45 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v44 = _CocoaArrayWrapper.endIndex.getter(v45);
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        v44 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v22);
      v48 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Finished deleting %ld interests.", v43, 0xCu);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
    }
    v34((uint64_t)v9, v27);
    return objc_msgSend(a1, "saveInCurrentBlock");
  }
  else
  {
    v29 = static Logger.database.getter(v19);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to fetch interests when attempting to cleanup. Cannot delete any interests.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1002468DC(id *a1)
{
  uint64_t v1;

  return sub_10024599C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t PlayNextChapterIntentImplementation.perform()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[12] = a1;
  v4[13] = v3;
  v5 = type metadata accessor for IndexPath(0, a2, a3);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v4[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100246960, 0, 0);
}

_QWORD *sub_100246960()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (**v6)(_QWORD, _QWORD);
  uint64_t ObjectType;
  _QWORD *result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v1 = (void *)dispatch thunk of PlaybackController.currentRoute.getter();
  if (!v1 || (v2 = v1, v3 = objc_msgSend(v1, "isDeviceRoute"), v2, !v3))
  {
    v21 = type metadata accessor for PlayChapterError(0);
    v22 = sub_100026844(&qword_1005557E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlayChapterError, (uint64_t)&protocol conformance descriptor for PlayChapterError);
    swift_allocError(v21, v22, 0, 0);
    v24 = v23;
    v25 = (unsigned int *)&enum case for PlayChapterError.remotePlayback(_:);
    goto LABEL_9;
  }
  v5 = *(_QWORD **)(v0 + 104);
  v6 = (uint64_t (**)(_QWORD, _QWORD))v5[1];
  ObjectType = swift_getObjectType(*v5, v4);
  if ((v6[14](ObjectType, v6) & 1) == 0)
  {
    v21 = type metadata accessor for PlayChapterError(0);
    v27 = sub_100026844(&qword_1005557E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlayChapterError, (uint64_t)&protocol conformance descriptor for PlayChapterError);
    swift_allocError(v21, v27, 0, 0);
    v24 = v28;
    v25 = (unsigned int *)&enum case for PlayChapterError.hasNoChapters(_:);
    goto LABEL_9;
  }
  result = (_QWORD *)v6[15](ObjectType, v6);
  v9 = (unint64_t)result + 1;
  if (result != (_QWORD *)-1)
  {
    if (v9 < v6[16](ObjectType, v6))
    {
      v10 = *(_QWORD **)(v0 + 104);
      v11 = v10[6];
      v12 = v10[7];
      result = sub_10003A834(v10 + 3, v11);
      if ((v9 & 0x8000000000000000) == 0)
      {
        v13 = *(_QWORD *)(v0 + 120);
        v14 = *(_QWORD *)(v0 + 128);
        v15 = *(_QWORD *)(v0 + 112);
        IndexPath.init(row:section:)(v9, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v11, v12);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
        v16 = type metadata accessor for PlaybackController.TransportCommand(0);
        *(_QWORD *)(v0 + 80) = v16;
        *(_QWORD *)(v0 + 88) = &protocol witness table for PlaybackController.TransportCommand;
        v17 = (double *)sub_1000242A8((_QWORD *)(v0 + 56));
        v18 = *(_QWORD *)(v0 + 40);
        v19 = *(_QWORD *)(v0 + 48);
        sub_10003A834((_QWORD *)(v0 + 16), v18);
        *v17 = (*(double (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
        (*(void (**)(double *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v17, enum case for PlaybackController.TransportCommand.seekTo(_:), v16);
        v31 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
            + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
        v20 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                         + 1));
        *(_QWORD *)(v0 + 136) = v20;
        *v20 = v0;
        v20[1] = sub_100190F38;
        return (_QWORD *)((uint64_t (*)(uint64_t, _QWORD))v31)(v0 + 56, 0);
      }
      goto LABEL_13;
    }
    v21 = type metadata accessor for PlayChapterError(0);
    v29 = sub_100026844(&qword_1005557E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlayChapterError, (uint64_t)&protocol conformance descriptor for PlayChapterError);
    swift_allocError(v21, v29, 0, 0);
    v24 = v30;
    v25 = (unsigned int *)&enum case for PlayChapterError.lastChapterAlreadyPlaying(_:);
LABEL_9:
    v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, *v25, v21);
    swift_willThrow(v26);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    return (_QWORD *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100246C7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)swift_task_alloc(dword_10055BD3C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100191178;
  return PlayNextChapterIntentImplementation.perform()(a1, v4, v5);
}

ValueMetadata *type metadata accessor for PlayNextChapterIntentImplementation()
{
  return &type metadata for PlayNextChapterIntentImplementation;
}

uint64_t sub_100246CDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[40];
  _BYTE v7[24];
  _BYTE v8[24];

  v3 = v1 + 56;
  result = swift_beginAccess(v1 + 56, v8, 0, 0);
  v5 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v5 + 16))
  {
    sub_10000A520(v5 + 32, a1);
    result = swift_beginAccess(v1 + 56, v7, 33, 0);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      sub_10000A520(*(_QWORD *)v3 + 32, (uint64_t)v6);
      result = sub_100247298((uint64_t)v6);
      if (*(_QWORD *)(*(_QWORD *)v3 + 16))
      {
        sub_1001B4178(0, 1);
        return swift_endAccess(v7);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100246DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __int128 v31[2];
  __int128 v32[2];
  _QWORD v33[4];
  _QWORD v34[4];
  _QWORD *v35;

  v6 = v5;
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = *(_QWORD *)(a5 + 16);
  if (v12)
  {
    v35 = _swiftEmptyArrayStorage;
    sub_10017B314(0, v12, 0);
    v13 = a5 + 32;
    do
    {
      sub_10003D344(v13, (uint64_t)v34);
      sub_10003D344((uint64_t)v34, (uint64_t)v33);
      v14 = sub_10003F544(&qword_1005545F8);
      if (swift_dynamicCast(v32, v33, (char *)&type metadata for Any + 8, v14, 0))
      {
        sub_10002099C(v32, (uint64_t)v31);
        v15 = sub_10003F544((uint64_t *)&unk_1005549B0);
        v16 = (_QWORD *)swift_allocObject(v15, 72, 7);
        *((_OWORD *)v16 + 1) = xmmword_1003CA200;
        sub_10002099C(v31, (uint64_t)(v16 + 4));
      }
      else
      {
        v17 = sub_10003F544(&qword_1005549D0);
        if ((swift_dynamicCast(v32, v33, (char *)&type metadata for Any + 8, v17, 0) & 1) != 0)
          v16 = *(_QWORD **)&v32[0];
        else
          v16 = _swiftEmptyArrayStorage;
      }
      sub_10003D380(v33);
      sub_10003D380(v34);
      v18 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
      {
        sub_10017B314(0, v18[2] + 1, 1);
        v18 = v35;
      }
      v20 = v18[2];
      v19 = v18[3];
      if (v20 >= v19 >> 1)
      {
        sub_10017B314(v19 > 1, v20 + 1, 1);
        v18 = v35;
      }
      v18[2] = v20 + 1;
      v18[v20 + 4] = v16;
      v13 += 32;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(a5);
    v8 = a4;
    v6 = v5;
    v10 = a2;
    v9 = a3;
    v11 = a1;
  }
  else
  {
    swift_bridgeObjectRelease(a5);
    v18 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v32[0] = _swiftEmptyArrayStorage;
  v21 = v18[2];
  if (v21)
  {
    swift_bridgeObjectRetain(v18);
    for (i = 0; i != v21; ++i)
    {
      v23 = v18[i + 4];
      swift_bridgeObjectRetain(v23);
      sub_100173C1C(v24);
    }
    swift_bridgeObjectRelease(v18);
  }
  v25 = swift_bridgeObjectRelease(v18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __n128))(v6 + 136))(v11, v10, v9, v8, *(_QWORD *)&v32[0], v25);
}

void sub_10024703C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 64) = (*(_BYTE *)(v0 + 64) & 1) == 0;
}

uint64_t sub_100247050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, 65, 7);
  *(_BYTE *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_QWORD *)(v11 + 48) = a5;
  *(_QWORD *)(v11 + 56) = a5;
  swift_bridgeObjectRetain(a5);
  return v11;
}

uint64_t MTToggleTestAction.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 65, 7);
}

void sub_1002470F8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;

  *(_BYTE *)(v0 + 64) = (*(_BYTE *)(v0 + 64) & 1) == 0;
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v2 = *(unsigned __int8 *)(v0 + 64);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setBool:forKey:", v2, v3);

}

void sub_100247184()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.MTToggleUserDefaultTestAction", 38, "init(_:category:steps:)", 23, 0);
  __break(1u);
}

uint64_t sub_1002471B0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
}

_QWORD *MTToggleUserDefaultTestAction.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  return v0;
}

uint64_t MTToggleUserDefaultTestAction.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for MTTestAction()
{
  return objc_opt_self(_TtC8Podcasts12MTTestAction);
}

uint64_t type metadata accessor for MTToggleTestAction()
{
  return objc_opt_self(_TtC8Podcasts18MTToggleTestAction);
}

uint64_t type metadata accessor for MTToggleUserDefaultTestAction()
{
  return objc_opt_self(_TtC8Podcasts29MTToggleUserDefaultTestAction);
}

uint64_t sub_100247298(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003F544(&qword_10055C060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1002472D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v5;

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "updatePlaylistWithUuid:inContext:", v5, a3);

}

uint64_t sub_100247320(__int128 *a1)
{
  uint64_t v1;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v11;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11._object = (void *)0x8000000100437720;
  v4._object = (void *)0x8000000100437700;
  v4._countAndFlagsBits = 0xD000000000000013;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0xD000000000000013;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v11);

  *(Swift::String *)(v1 + 72) = v6;
  *(_OWORD *)(v1 + 88) = xmmword_1003CC5B0;
  v7 = v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_metricsLabel;
  v8 = enum case for MetricsLabel.removeFromUpNext(_:);
  v9 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_contextActionType) = 14;
  sub_10002099C(a1, v1 + 32);
  return v1;
}

uint64_t sub_10024743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(__n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char See;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[24];

  v1 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v1);
  v3 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for InteractionContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v6);
  v11 = &v24[-v10 - 8];
  if (os_feature_enabled_unfollowed_shows_in_up_next(v9))
  {
    swift_beginAccess(v0 + 16, v24, 0, 0);
    v12 = *(_QWORD *)(v0 + 16);
    if (v12)
    {
      v13 = *(void (**)(__n128))(*(_QWORD *)v12 + 168);
      v14 = swift_retain();
      v13(v14);
      swift_release(v12);
      v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v11, v8, v4);
      v16 = InteractionContext.page.getter(v15);
      See = InteractionContext.Page.isUpNextSeeAll.getter(v16);
      v18 = sub_10017603C((uint64_t)v3);
      if ((See & 1) != 0
        || (v19 = InteractionContext.view.getter(v18),
            v20 = static InteractionContext.View.== infix(_:_:)(v19, 4),
            (v20 & 1) != 0))
      {
        LOBYTE(v12) = 1;
      }
      else
      {
        v21 = InteractionContext.view.getter(v20);
        LOBYTE(v12) = static InteractionContext.View.== infix(_:_:)(v21, 1);
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  return v12 & 1;
}

double sub_1002475C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v1 = v0[3];
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 32))
    {
      v3 = *(_QWORD *)(v1 + 16);
      v2 = *(_QWORD *)(v1 + 24);
      swift_retain();
      sub_100198BD4(v3, v2, 0);
      swift_bridgeObjectRelease(v2);
      v4 = v0[7];
      v5 = v0[8];
      sub_10003A834(v0 + 4, v4);
      dispatch thunk of LibraryActionControllerProtocol.removeFromUpNext(uuids:)(v3, v4, v5);
      swift_release(v1);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_100247664()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1002476DC()
{
  return type metadata accessor for RemoveFromUpNextEpisodeContextAction(0);
}

uint64_t type metadata accessor for RemoveFromUpNextEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055C090;
  if (!qword_10055C090)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoveFromUpNextEpisodeContextAction);
  return result;
}

uint64_t sub_100247720(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003CFF50;
  v4[3] = &unk_1003CFF68;
  v4[4] = &unk_1003CFF80;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_1003CFF98;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1002477C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t sub_1002477EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100247830()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_contextActionType);
}

uint64_t sub_100247848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
  v5 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1003CC5B0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_1002478A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(__n128);
  __n128 v10;
  uint64_t v11;
  _BYTE v14[24];

  v1 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v1);
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for InteractionContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_QWORD *)(v0 + 16))
  {
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText))
    {
      swift_beginAccess(v0 + 24, v14, 0, 0);
      v8 = *(_QWORD *)(v0 + 24);
      if (v8)
      {
        v9 = *(uint64_t (**)(__n128))(*(_QWORD *)v8 + 168);
        v10 = swift_retain();
        v11 = v9(v10);
        InteractionContext.page.getter(v11);
        swift_release(v8);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (swift_getEnumCaseMultiPayload(v3, v1) == 5)
          return *v3;
        sub_10017603C((uint64_t)v3);
      }
    }
  }
  return 0;
}

void sub_1002479E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  id v34;
  void *v35;
  _BYTE v37[24];

  v1 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v2 = __chkstk_darwin(v1);
  v4 = &v37[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = __chkstk_darwin(v2);
  v7 = &v37[-v6 - 8];
  v8 = __chkstk_darwin(v5);
  v10 = &v37[-v9 - 8];
  v11 = __chkstk_darwin(v8);
  v13 = &v37[-v12 - 8];
  __chkstk_darwin(v11);
  v15 = &v37[-v14 - 8];
  sub_100320CE4();
  v16 = *(_QWORD *)(v0 + 16);
  swift_retain();
  v18 = (void *)sub_100247D40(v17);
  swift_release(v16);
  if (v18)
  {
    v19 = objc_msgSend(v18, "shortURL");
    if (v19)
    {
      v20 = v19;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v21 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 0, 1, v21);
    }
    else
    {
      v21 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
    }
    sub_1001C9998((uint64_t)v10, (uint64_t)v13);
    type metadata accessor for URL(0);
    v24 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v21) != 1)
    {

      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v15, v13, v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v21);
      goto LABEL_13;
    }
    v25 = objc_msgSend(v18, "shareURL");
    if (v25)
    {
      v26 = v25;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = 0;
      v18 = v26;
    }
    else
    {
      v27 = 1;
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v7, v27, 1, v21);
    sub_1001C9998((uint64_t)v7, (uint64_t)v15);
  }
  else
  {
    v22 = type metadata accessor for URL(0);
    v23 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    v23(v13, 1, 1, v22);
    v23(v15, 1, 1, v22);
  }
  sub_100007A28((uint64_t)v13, (uint64_t *)&unk_100553DC0);
LABEL_13:
  sub_1001C9998((uint64_t)v15, (uint64_t)v4);
  v28 = v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink, v37, 33, 0);
  sub_1001C99E0((uint64_t)v4, v28);
  swift_endAccess(v37);
  swift_beginAccess(v0 + 24, v37, 0, 0);
  v29 = *(void **)(v0 + 24);
  if (v29)
  {
    v30 = type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
    v31 = swift_dynamicCastClass(v29, v30);
    if (v31)
    {
      v32 = &OBJC_IVAR____TtC8Podcasts45TranscriptSelectionContextActionConfiguration_selectedText;
    }
    else
    {
      v33 = type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(0);
      v31 = swift_dynamicCastClass(v29, v33);
      if (!v31)
      {
        v29 = 0;
        goto LABEL_19;
      }
      v32 = (uint64_t *)&direct field offset for NowPlayingTranscriptSelectionContextActionConfiguration.selectedText;
    }
    v29 = *(void **)(v31 + *v32);
    v34 = v29;
  }
LABEL_19:
  v35 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText) = v29;

}

uint64_t sub_100247D40(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v2);
  if (a1)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_1002481DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[6];

  v1 = type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for Logger(0);
  v13[4] = *(_QWORD *)(v3 - 8);
  v13[5] = v3;
  __chkstk_darwin(v3);
  v13[3] = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v8 = (char *)v13 - v7;
  v9 = sub_10003F544(&qword_1005522F0);
  v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText);
    if (v12)
    {
      v13[1] = v8;
      v13[2] = v12;
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t sub_100248D04()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink, (uint64_t *)&unk_100553DC0);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100248D9C()
{
  return type metadata accessor for CopyTranscriptSelectionContextAction(0);
}

uint64_t type metadata accessor for CopyTranscriptSelectionContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055C220;
  if (!qword_10055C220)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CopyTranscriptSelectionContextAction);
  return result;
}

void sub_100248DE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v6[0] = "\b";
  v6[1] = "\b";
  v6[2] = &unk_1003D0060;
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[4] = &unk_1003D0078;
  v2 = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = &unk_1003D0090;
    v6[7] = &unk_1003D0090;
    sub_1000048DC(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      v6[9] = "\b";
      swift_updateClassMetadata2(a1, 256, 10, v6, a1 + 80);
    }
  }
}

uint64_t sub_100248EA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_100248ECC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t sub_100248EF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100248F3C()
{
  return 43;
}

uint64_t EnqueueMediaItemForPlaybackIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10055C3D8 + dword_10055C3D8);
  v5 = (_QWORD *)swift_task_alloc(unk_10055C3DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10023A52C;
  return v7(a1, a2);
}

uint64_t sub_100248FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10055C3D8 + dword_10055C3D8);
  v6 = (_QWORD *)swift_task_alloc(unk_10055C3DC);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1001B8890;
  return v8(a2, a3);
}

uint64_t sub_10024902C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1[8] = a1;
  v2 = type metadata accessor for PlaybackController.QueueCommand(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PlaybackController(0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[12] = v5;
  *v5 = v1;
  v5[1] = sub_1002490CC;
  return BaseObjectGraph.inject<A>(_:)(v1 + 7, v4, v4);
}

uint64_t sub_1002490CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100249304;
  else
    v3 = sub_100249130;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100249130()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v8;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  v0[14] = v0[7];
  sub_10003F544(&qword_10055C3E8);
  v4 = EnqueueMediaItemForPlaybackIntent.mediaItem.getter();
  EnqueueMediaItemForPlaybackIntent.location.getter(v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for PlaybackController.QueueCommand.addItemToQueue(_:), v3);
  v0[5] = v3;
  v0[6] = &protocol witness table for PlaybackController.QueueCommand;
  v5 = sub_1000242A8(v0 + 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 16))(v5, v1, v3);
  v8 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
     + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                  + 1));
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_100249224;
  return ((uint64_t (*)(_QWORD *, _QWORD))v8)(v0 + 2, 0);
}

uint64_t sub_100249224(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100249338;
  }
  else
  {

    sub_10003D380((_QWORD *)(v4 + 16));
    v6 = sub_1002492A4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002492A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100249304()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100249338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10003D380((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1002493A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055B840;
  if (!qword_10055B840)
  {
    v1 = type metadata accessor for EnqueueMediaItemForPlaybackIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EnqueueMediaItemForPlaybackIntent, v1);
    atomic_store(result, (unint64_t *)&qword_10055B840);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnqueueMediaItemForPlaybackIntentImplementation()
{
  return &type metadata for EnqueueMediaItemForPlaybackIntentImplementation;
}

void MTWelcomeViewController.deferUntilAcknowledged(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v5[4] = a1;
  v6 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100027AF8;
  v5[3] = &unk_1004B8478;
  v3 = _Block_copy(v5);
  v4 = v6;
  swift_retain();
  swift_release(v4);
  objc_msgSend(v2, "addAcknowledgementCompletionBlock:", v3);
  _Block_release(v3);
}

void sub_100249494(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v5[4] = a1;
  v6 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100027AF8;
  v5[3] = &unk_1004B84A0;
  v3 = _Block_copy(v5);
  v4 = v6;
  swift_retain();
  swift_release(v4);
  objc_msgSend(v2, "addAcknowledgementCompletionBlock:", v3);
  _Block_release(v3);
}

uint64_t static Dependencies.allDependencies()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  __n128 v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t KeyPath;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  __n128 v168;
  uint64_t v169;
  __n128 v170;
  uint64_t v171;
  __n128 v172;
  uint64_t v173;
  __n128 v174;
  uint64_t v175;
  __n128 v176;
  uint64_t v177;
  __n128 v178;
  uint64_t v179;
  __n128 v180;
  uint64_t v181;
  __n128 v182;
  uint64_t v183;
  __n128 v184;
  uint64_t v185;
  __n128 v186;
  uint64_t v187;
  __n128 v188;
  uint64_t v189;
  __n128 v190;
  uint64_t v191;
  __n128 v192;
  uint64_t v193;
  __n128 v194;
  uint64_t v195;
  __n128 v196;
  uint64_t v197;
  __n128 v198;
  uint64_t v199;
  __n128 v200;
  uint64_t v201;
  __n128 v202;
  uint64_t v203;
  __n128 v204;
  uint64_t v205;
  __n128 v206;
  uint64_t v207;
  __n128 v208;
  uint64_t v209;
  __n128 v210;
  uint64_t v211;
  __n128 v212;
  uint64_t v213;
  __n128 v214;
  uint64_t v215;
  __n128 v216;
  uint64_t v217;
  __n128 v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  __n128 v222;
  uint64_t v223;
  char *v224;
  __n128 v225;
  uint64_t v226;
  char *v227;
  __n128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  void (*v240)(char *, uint64_t);
  uint64_t v241;
  char *v242;
  __n128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __n128 v252;
  uint64_t v253;
  __n128 v254;
  uint64_t v255;
  __n128 v256;
  uint64_t v257;
  char *v258;
  __n128 v259;
  __n128 v260;
  uint64_t v261;
  char *v262;
  __n128 v263;
  uint64_t v264;
  __n128 v265;
  __n128 v266;
  uint64_t v267;
  __n128 v268;
  uint64_t v269;
  __n128 v270;
  uint64_t v271;
  __n128 v272;
  uint64_t v273;
  __n128 v274;
  uint64_t v275;
  __n128 v276;
  uint64_t v277;
  __n128 v278;
  uint64_t v279;
  __n128 v280;
  uint64_t v281;
  __n128 v282;
  uint64_t v283;
  __n128 v284;
  uint64_t v285;
  __n128 v286;
  uint64_t v287;
  __n128 v288;
  uint64_t v289;
  __n128 v290;
  uint64_t v291;
  char *v292;
  __n128 v293;
  uint64_t v294;
  char *v295;
  __n128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void (*v360)(char *, uint64_t);
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  char *v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  char *v447;
  char *v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  char *v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  char *v468;
  char *v469;
  char *v470;
  char *v471;
  char *v472;
  char *v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  char *v479;
  char *v480;
  char *v481;
  char *v482;

  v0 = type metadata accessor for Dependency(0);
  v433 = *(_QWORD *)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v418 = (char *)&v362 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v430 = (char *)&v362 - v4;
  v5 = __chkstk_darwin(v3);
  v467 = (char *)&v362 - v6;
  v7 = __chkstk_darwin(v5);
  v481 = (char *)&v362 - v8;
  v9 = __chkstk_darwin(v7);
  v480 = (char *)&v362 - v10;
  v11 = __chkstk_darwin(v9);
  v479 = (char *)&v362 - v12;
  v13 = __chkstk_darwin(v11);
  v478 = (char *)&v362 - v14;
  v15 = __chkstk_darwin(v13);
  v477 = (char *)&v362 - v16;
  v17 = __chkstk_darwin(v15);
  v476 = (char *)&v362 - v18;
  v19 = __chkstk_darwin(v17);
  v475 = (char *)&v362 - v20;
  v21 = __chkstk_darwin(v19);
  v474 = (char *)&v362 - v22;
  v23 = __chkstk_darwin(v21);
  v473 = (char *)&v362 - v24;
  v25 = __chkstk_darwin(v23);
  v472 = (char *)&v362 - v26;
  v27 = __chkstk_darwin(v25);
  v471 = (char *)&v362 - v28;
  v29 = __chkstk_darwin(v27);
  v470 = (char *)&v362 - v30;
  v31 = __chkstk_darwin(v29);
  v469 = (char *)&v362 - v32;
  v33 = __chkstk_darwin(v31);
  v432 = (char *)&v362 - v34;
  v35 = __chkstk_darwin(v33);
  v468 = (char *)&v362 - v36;
  v37 = __chkstk_darwin(v35);
  v431 = (char *)&v362 - v38;
  v39 = __chkstk_darwin(v37);
  v420 = (char *)&v362 - v40;
  v41 = __chkstk_darwin(v39);
  v419 = (char *)&v362 - v42;
  v43 = __chkstk_darwin(v41);
  v482 = (char *)&v362 - v44;
  v45 = __chkstk_darwin(v43);
  v466 = (char *)&v362 - v46;
  v47 = __chkstk_darwin(v45);
  v465 = (char *)&v362 - v48;
  v49 = __chkstk_darwin(v47);
  v464 = (char *)&v362 - v50;
  v51 = __chkstk_darwin(v49);
  v463 = (char *)&v362 - v52;
  v53 = __chkstk_darwin(v51);
  v462 = (char *)&v362 - v54;
  v55 = __chkstk_darwin(v53);
  v461 = (char *)&v362 - v56;
  v57 = __chkstk_darwin(v55);
  v460 = (char *)&v362 - v58;
  v59 = __chkstk_darwin(v57);
  v459 = (char *)&v362 - v60;
  v61 = __chkstk_darwin(v59);
  v458 = (char *)&v362 - v62;
  v63 = __chkstk_darwin(v61);
  v457 = (char *)&v362 - v64;
  v65 = __chkstk_darwin(v63);
  v456 = (char *)&v362 - v66;
  v67 = __chkstk_darwin(v65);
  v455 = (char *)&v362 - v68;
  v69 = __chkstk_darwin(v67);
  v454 = (char *)&v362 - v70;
  v71 = __chkstk_darwin(v69);
  v453 = (char *)&v362 - v72;
  v73 = __chkstk_darwin(v71);
  v452 = (char *)&v362 - v74;
  v75 = __chkstk_darwin(v73);
  v451 = (char *)&v362 - v76;
  v77 = __chkstk_darwin(v75);
  v450 = (char *)&v362 - v78;
  v79 = __chkstk_darwin(v77);
  v449 = (char *)&v362 - v80;
  v81 = __chkstk_darwin(v79);
  v448 = (char *)&v362 - v82;
  v83 = __chkstk_darwin(v81);
  v447 = (char *)&v362 - v84;
  v85 = __chkstk_darwin(v83);
  v446 = (char *)&v362 - v86;
  v87 = __chkstk_darwin(v85);
  v445 = (char *)&v362 - v88;
  v89 = __chkstk_darwin(v87);
  v444 = (char *)&v362 - v90;
  v91 = __chkstk_darwin(v89);
  v443 = (char *)&v362 - v92;
  v93 = __chkstk_darwin(v91);
  v442 = (char *)&v362 - v94;
  v95 = __chkstk_darwin(v93);
  v441 = (char *)&v362 - v96;
  v97 = __chkstk_darwin(v95);
  v440 = (char *)&v362 - v98;
  v99 = __chkstk_darwin(v97);
  v439 = (char *)&v362 - v100;
  v101 = __chkstk_darwin(v99);
  v438 = (char *)&v362 - v102;
  v103 = __chkstk_darwin(v101);
  v437 = (char *)&v362 - v104;
  v105 = __chkstk_darwin(v103);
  v436 = (char *)&v362 - v106;
  v107 = __chkstk_darwin(v105);
  v435 = (char *)&v362 - v108;
  v109 = __chkstk_darwin(v107);
  v434 = (char *)&v362 - v110;
  v111 = __chkstk_darwin(v109);
  v113 = (char *)&v362 - v112;
  v114 = __chkstk_darwin(v111);
  v116 = (char *)&v362 - v115;
  v117 = __chkstk_darwin(v114);
  v119 = (char *)&v362 - v118;
  v120 = __chkstk_darwin(v117);
  v122 = (char *)&v362 - v121;
  v123 = __chkstk_darwin(v120);
  v125 = (char *)&v362 - v124;
  v126 = __chkstk_darwin(v123);
  v128 = (char *)&v362 - v127;
  v129 = __chkstk_darwin(v126);
  v131 = (char *)&v362 - v130;
  v132 = static Dependencies.allDependencies()(v129);
  v133 = type metadata accessor for PlaybackController(0);
  v422 = v132;
  v134 = swift_retain(v132);
  v423 = v131;
  Dependency.init<A>(satisfying:with:)(v133, sub_10024B9DC, 0, v133, v134);
  v135 = sub_10003F544((uint64_t *)&unk_10055C3F0);
  v424 = v128;
  Dependency.init<A>(satisfying:with:)(v135, sub_10024B9F0, 0, v135, v136);
  v137 = sub_10003F544((uint64_t *)&unk_100553AC0);
  v425 = v125;
  Dependency.init<A>(satisfying:with:)(v137, sub_10024BA5C, 0, v137, v138);
  v139 = type metadata accessor for PodcastsStateCoordinator();
  v426 = v122;
  Dependency.init<A>(satisfying:with:)(v139, sub_10024BA70, 0, v139, v140);
  v141 = sub_10003F544(&qword_100553AE0);
  v427 = v119;
  Dependency.init<A>(satisfying:with:)(v141, sub_10024BAE0, 0, v141, v142);
  v143 = type metadata accessor for LibraryDataProvider(0);
  v428 = v116;
  Dependency.init<A>(satisfying:with:)(v143, sub_10024BB84, 0, v143, v144);
  v145 = sub_10003F544(&qword_1005609B0);
  v429 = v113;
  Dependency.init<A>(satisfying:with:)(v145, sub_10024BC30, 0, v145, v146);
  v147 = sub_10003F544((uint64_t *)&unk_100553AD0);
  KeyPath = swift_getKeyPath(&unk_1003D01D0, v148);
  Dependency.init<A, B>(aliasing:with:)(v147, KeyPath);
  v150 = sub_10003F544((uint64_t *)&unk_100555130);
  v152 = swift_getKeyPath(&unk_1003D01F0, v151);
  Dependency.init<A, B>(aliasing:with:)(v150, v152);
  v153 = sub_10003F544(&qword_100553720);
  v155 = swift_getKeyPath(&unk_1003D0210, v154);
  Dependency.init<A, B>(aliasing:with:)(v153, v155);
  v156 = type metadata accessor for PodcastStateController(0);
  v158 = swift_getKeyPath(&unk_1003D0230, v157);
  Dependency.init<A, B>(aliasing:with:)(v156, v158);
  v159 = sub_10003F544((uint64_t *)&unk_100553AF0);
  v161 = swift_getKeyPath(&unk_1003D0250, v160);
  Dependency.init<A, B>(aliasing:with:)(v159, v161);
  v162 = sub_10003F544((uint64_t *)&unk_10055C400);
  v164 = swift_getKeyPath(&unk_1003D0270, v163);
  Dependency.init<A, B>(aliasing:with:)(v162, v164);
  v165 = sub_10003F544((uint64_t *)&unk_100565FC0);
  Dependency.init<A>(satisfying:with:)(v165, sub_10024BCD0, 0, v165, v166);
  v167 = sub_10003F544((uint64_t *)&unk_100553B60);
  Dependency.init<A>(satisfying:with:)(v167, sub_10024BD58, 0, v167, v168);
  v169 = sub_10003F544(&qword_100553B70);
  Dependency.init<A>(satisfying:with:)(v169, sub_10024BDD8, 0, v169, v170);
  v171 = sub_10003F544((uint64_t *)&unk_100553B80);
  Dependency.init<A>(satisfying:with:)(v171, sub_10024BDF4, 0, v171, v172);
  v173 = sub_10003F544((uint64_t *)&unk_100565FD0);
  Dependency.init<A>(satisfying:with:)(v173, sub_10024BE34, 0, v173, v174);
  v175 = sub_10003F544((uint64_t *)&unk_10055C410);
  Dependency.init<A>(satisfying:with:)(v175, sub_10024BE9C, 0, v175, v176);
  v177 = sub_10003F544((uint64_t *)&unk_100553BA0);
  Dependency.init<A>(satisfying:with:)(v177, sub_10024BEE0, 0, v177, v178);
  v179 = type metadata accessor for TranscriptReportConcernURLBuilder();
  Dependency.init<A>(satisfying:with:)(v179, sub_10024BEE4, 0, v179, v180);
  v181 = sub_10003F544((uint64_t *)&unk_10055C420);
  Dependency.init<A>(satisfying:with:)(v181, sub_10024BF18, 0, v181, v182);
  v183 = sub_10003F544((uint64_t *)&unk_100553BC0);
  Dependency.init<A>(satisfying:with:)(v183, sub_10024BF6C, 0, v183, v184);
  v185 = sub_10003F544((uint64_t *)&unk_10055C430);
  Dependency.init<A>(satisfying:with:)(v185, sub_10024BFDC, 0, v185, v186);
  v187 = sub_10003F544((uint64_t *)&unk_100553BD0);
  Dependency.init<A>(satisfying:with:)(v187, sub_10024C06C, 0, v187, v188);
  v189 = type metadata accessor for LibraryActionController();
  Dependency.init<A>(satisfying:with:)(v189, sub_10024C088, 0, v189, v190);
  v191 = sub_10003F544(&qword_100553BE0);
  Dependency.init<A>(satisfying:with:)(v191, sub_10024C0BC, 0, v191, v192);
  v193 = type metadata accessor for ClassKitManager();
  Dependency.init<A>(satisfying:with:)(v193, sub_10024C0D8, 0, v193, v194);
  v195 = type metadata accessor for EpisodeController();
  Dependency.init<A>(satisfying:with:)(v195, sub_10024C128, 0, v195, v196);
  v197 = sub_10003F544((uint64_t *)&unk_100562A90);
  Dependency.init<A>(satisfying:with:)(v197, sub_10024C190, 0, v197, v198);
  v199 = sub_10003F544((uint64_t *)&unk_10055C440);
  Dependency.init<A>(satisfying:with:)(v199, sub_10024C1AC, 0, v199, v200);
  v201 = sub_100005EC8(0, (unint64_t *)&unk_100562AA0, &off_1004A4490);
  Dependency.init<A>(satisfying:with:)(v201, sub_10024C2BC, 0, v201, v202);
  v203 = sub_100005EC8(0, (unint64_t *)&unk_10055C450, &off_1004A4510);
  Dependency.init<A>(satisfying:with:)(v203, sub_10024C2D8, 0, v203, v204);
  v205 = sub_10003F544(&qword_10055B8A8);
  Dependency.init<A>(satisfying:with:)(v205, sub_10024C320, 0, v205, v206);
  v207 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
  Dependency.init<A>(satisfying:with:)(v207, sub_10024C334, 0, v207, v208);
  v209 = sub_10003F544((uint64_t *)&unk_100562AB0);
  Dependency.init<A>(satisfying:with:)(v209, sub_10024C398, 0, v209, v210);
  v211 = sub_10003F544((uint64_t *)&unk_10055C460);
  Dependency.init<A>(satisfying:with:)(v211, sub_10024C420, 0, v211, v212);
  v213 = type metadata accessor for SiriIntentDonator(0);
  Dependency.init<A>(satisfying:with:)(v213, sub_10024C470, 0, v213, v214);
  v215 = sub_10003F544((uint64_t *)&unk_10055B8B0);
  Dependency.init<A>(satisfying:with:)(v215, sub_10024C720, 0, v215, v216);
  v217 = sub_10003F544((uint64_t *)&unk_10055C470);
  v219 = Dependency.init<A>(satisfying:with:)(v217, sub_10024C724, 0, v217, v218);
  if ((static Podcasts.isBlueMoonEnabled()(v219) & 1) != 0)
  {
    v220 = type metadata accessor for UserActivityController();
    v221 = v482;
    Dependency.init<A>(satisfying:with:)(v220, sub_10024C728, 0, v220, v222);
    v223 = type metadata accessor for NowPlayingItemPlayheadSynchronizer(0);
    v224 = v419;
    Dependency.init<A>(satisfying:with:)(v223, sub_10024C820, 0, v223, v225);
    v226 = type metadata accessor for RemoteFollowCommandCenter(0);
    v227 = v420;
    Dependency.init<A>(satisfying:with:)(v226, sub_10024C834, 0, v226, v228);
    type metadata accessor for BaseObjectGraph(0);
    v229 = sub_10003F544((uint64_t *)&unk_10055C480);
    v230 = v433;
    v231 = *(unsigned __int8 *)(v433 + 80);
    v232 = (v231 + 32) & ~v231;
    v233 = swift_allocObject(v229, v232 + *(_QWORD *)(v433 + 72), v231 | 7);
    *(_OWORD *)(v233 + 16) = xmmword_1003CA200;
    v234 = v233 + v232;
    v235 = v224;
    (*(void (**)(uint64_t, char *, uint64_t))(v230 + 16))(v234, v221, v0);
    v236 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v233);
    v237 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v224);
    v421 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v227);
    v238 = v236;
    v239 = v227;
    swift_release(v238);
    swift_release(v237);
    v240 = *(void (**)(char *, uint64_t))(v230 + 8);
    v240(v227, v0);
    v240(v224, v0);
  }
  else
  {
    v241 = sub_100005EC8(0, (unint64_t *)&unk_10055B850, off_1004A44A0);
    v242 = v482;
    Dependency.init<A>(satisfying:with:)(v241, sub_10024C8AC, 0, v241, v243);
    type metadata accessor for BaseObjectGraph(0);
    v244 = sub_10003F544((uint64_t *)&unk_10055C480);
    v245 = v433;
    v246 = *(unsigned __int8 *)(v433 + 80);
    v247 = (v246 + 32) & ~v246;
    v248 = swift_allocObject(v244, v247 + *(_QWORD *)(v433 + 72), v246 | 7);
    *(_OWORD *)(v248 + 16) = xmmword_1003CA200;
    v249 = v248 + v247;
    v235 = v419;
    (*(void (**)(uint64_t, char *, uint64_t))(v245 + 16))(v249, v242, v0);
    v250 = v248;
    v239 = v420;
    v421 = BaseObjectGraph.__allocating_init(name:_:)(0, 0xE000000000000000, v250);
    v240 = *(void (**)(char *, uint64_t))(v245 + 8);
  }
  v240(v482, v0);
  v251 = sub_10003F544(&qword_100562B40);
  Dependency.init<A>(satisfying:with:)(v251, sub_10024C8C0, 0, v251, v252);
  v253 = sub_10003F544(&qword_10055C490);
  Dependency.init<A>(satisfying:with:)(v253, sub_10024C918, 0, v253, v254);
  v255 = sub_100005EC8(0, &qword_1005536C0, MTImageStore_ptr);
  Dependency.init<A>(satisfying:with:)(v255, sub_10024C958, 0, v255, v256);
  v257 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  v258 = v431;
  Dependency.init<A>(satisfying:with:)(v257, sub_10024C974, 0, v257, v259);
  Dependency.init<A>(satisfying:with:)(v177, sub_10024BEE0, 0, v177, v260);
  v261 = sub_100005EC8(0, (unint64_t *)&qword_10055C498, off_1004A4588);
  v262 = v432;
  Dependency.init<A>(satisfying:with:)(v261, sub_10024C9E8, 0, v261, v263);
  v264 = sub_10003F544(&qword_10055C4A0);
  Dependency.init<A>(satisfying:with:)(v264, sub_10024CA38, 0, v264, v265);
  Dependency.init<A>(satisfying:with:)(v197, sub_10024C190, 0, v197, v266);
  v267 = type metadata accessor for BookmarksController(0);
  Dependency.init<A>(satisfying:with:)(v267, sub_10024CAD0, 0, v267, v268);
  v269 = sub_10003F544(&qword_10055C4A8);
  Dependency.init<A>(satisfying:with:)(v269, sub_10024CAE4, 0, v269, v270);
  v271 = sub_10003F544((uint64_t *)&unk_10055C4B0);
  Dependency.init<A>(satisfying:with:)(v271, sub_10024CB54, 0, v271, v272);
  v273 = sub_10003F544(&qword_100565950);
  Dependency.init<A>(satisfying:with:)(v273, sub_10024CB70, 0, v273, v274);
  v275 = type metadata accessor for RecommendationsMetadataProvider(0);
  Dependency.init<A>(satisfying:with:)(v275, sub_10024CC08, 0, v275, v276);
  v277 = type metadata accessor for HomePageProvider(0);
  Dependency.init<A>(satisfying:with:)(v277, sub_10024CC1C, 0, v277, v278);
  v279 = type metadata accessor for EpisodeUpsellBannerDataProvider(0);
  Dependency.init<A>(satisfying:with:)(v279, sub_10024CC78, 0, v279, v280);
  v281 = sub_10003F544(&qword_10055C4C0);
  Dependency.init<A>(satisfying:with:)(v281, sub_10024CCF4, 0, v281, v282);
  v283 = sub_10003F544(&qword_10055C4C8);
  Dependency.init<A>(satisfying:with:)(v283, sub_10024CD6C, 0, v283, v284);
  v285 = type metadata accessor for NowPlayingAlignmentCoordinator(0);
  Dependency.init<A>(satisfying:with:)(v285, sub_10024D220, 0, v285, v286);
  v287 = type metadata accessor for PageContextTracker(0);
  Dependency.init<A>(satisfying:with:)(v287, sub_10024D288, 0, v287, v288);
  v289 = type metadata accessor for OAuthController(0);
  Dependency.init<A>(satisfying:with:)(v289, sub_10024D2B8, 0, v289, v290);
  v291 = type metadata accessor for DebouncedAutoDownloadProcessor();
  v292 = v430;
  Dependency.init<A>(satisfying:with:)(v291, sub_10024D3BC, 0, v291, v293);
  v294 = type metadata accessor for DebouncedAssetRemovalProcessor();
  v295 = v418;
  Dependency.init<A>(satisfying:with:)(v294, sub_10024D3D8, 0, v294, v296);
  v297 = v422;
  swift_retain(v422);
  v298 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v423);
  v417 = v298;
  swift_release(v297);
  swift_retain(v298);
  v299 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v424);
  swift_release(v298);
  v416 = v299;
  swift_retain(v299);
  v300 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v425);
  v415 = v300;
  swift_release(v299);
  swift_retain(v300);
  v301 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v426);
  swift_release(v300);
  v414 = v301;
  swift_retain(v301);
  v302 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v427);
  v413 = v302;
  swift_release(v301);
  swift_retain(v302);
  v303 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v428);
  swift_release(v302);
  v412 = v303;
  swift_retain(v303);
  v304 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v429);
  v411 = v304;
  swift_release(v303);
  swift_retain(v304);
  v305 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v434);
  swift_release(v304);
  v410 = v305;
  swift_retain(v305);
  v306 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v435);
  v409 = v306;
  swift_release(v305);
  swift_retain(v306);
  v307 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v436);
  swift_release(v306);
  v408 = v307;
  swift_retain(v307);
  v308 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v437);
  v407 = v308;
  swift_release(v307);
  swift_retain(v308);
  v309 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v438);
  swift_release(v308);
  v406 = v309;
  swift_retain(v309);
  v310 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v439);
  v405 = v310;
  swift_release(v309);
  swift_retain(v310);
  v311 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v440);
  swift_release(v310);
  v404 = v311;
  swift_retain(v311);
  v312 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v441);
  v403 = v312;
  swift_release(v311);
  swift_retain(v312);
  v313 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v442);
  swift_release(v312);
  v402 = v313;
  swift_retain(v313);
  v314 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v443);
  v401 = v314;
  swift_release(v313);
  swift_retain(v314);
  v315 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v444);
  swift_release(v314);
  v400 = v315;
  swift_retain(v315);
  v316 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v445);
  v399 = v316;
  swift_release(v315);
  swift_retain(v316);
  v317 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v446);
  swift_release(v316);
  v398 = v317;
  swift_retain(v317);
  v318 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v447);
  v397 = v318;
  swift_release(v317);
  swift_retain(v318);
  v319 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v448);
  swift_release(v318);
  v396 = v319;
  swift_retain(v319);
  v320 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v449);
  v395 = v320;
  swift_release(v319);
  swift_retain(v320);
  v321 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v450);
  swift_release(v320);
  v394 = v321;
  swift_retain(v321);
  v322 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v451);
  v393 = v322;
  swift_release(v321);
  swift_retain(v322);
  v323 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v452);
  swift_release(v322);
  v392 = v323;
  swift_retain(v323);
  v324 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v453);
  v391 = v324;
  swift_release(v323);
  swift_retain(v324);
  v325 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v454);
  swift_release(v324);
  v390 = v325;
  swift_retain(v325);
  v326 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v455);
  v389 = v326;
  swift_release(v325);
  swift_retain(v326);
  v327 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v456);
  swift_release(v326);
  v387 = v327;
  swift_retain(v327);
  v328 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v457);
  v386 = v328;
  swift_release(v327);
  swift_retain(v328);
  v329 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v458);
  swift_release(v328);
  v385 = v329;
  swift_retain(v329);
  v330 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v459);
  v384 = v330;
  swift_release(v329);
  swift_retain(v330);
  v331 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v460);
  swift_release(v330);
  v383 = v331;
  swift_retain(v331);
  v332 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v461);
  v382 = v332;
  swift_release(v331);
  swift_retain(v332);
  v333 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v462);
  swift_release(v332);
  v381 = v333;
  swift_retain(v333);
  v334 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v463);
  v380 = v334;
  swift_release(v333);
  swift_retain(v334);
  v335 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v464);
  swift_release(v334);
  v379 = v335;
  swift_retain(v335);
  v336 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v465);
  v378 = v336;
  swift_release(v335);
  swift_retain(v336);
  v337 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v466);
  swift_release(v336);
  v377 = v337;
  swift_retain(v337);
  v338 = dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)(v421);
  v376 = v338;
  swift_release(v337);
  swift_retain(v338);
  v339 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v482);
  swift_release(v338);
  v375 = v339;
  swift_retain(v339);
  v340 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v235);
  v374 = v340;
  swift_release(v339);
  swift_retain(v340);
  v341 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v239);
  swift_release(v340);
  v373 = v341;
  swift_retain(v341);
  v342 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v258);
  v372 = v342;
  swift_release(v341);
  swift_retain(v342);
  v343 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v468);
  swift_release(v342);
  v371 = v343;
  swift_retain(v343);
  v344 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v262);
  v370 = v344;
  swift_release(v343);
  swift_retain(v344);
  v345 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v469);
  swift_release(v344);
  v369 = v345;
  swift_retain(v345);
  v346 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v470);
  v368 = v346;
  swift_release(v345);
  swift_retain(v346);
  v347 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v471);
  swift_release(v346);
  v367 = v347;
  swift_retain(v347);
  v348 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v472);
  v366 = v348;
  swift_release(v347);
  swift_retain(v348);
  v349 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v473);
  swift_release(v348);
  v365 = v349;
  swift_retain(v349);
  v350 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v474);
  v364 = v350;
  swift_release(v349);
  swift_retain(v350);
  v351 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v475);
  swift_release(v350);
  v363 = v351;
  swift_retain(v351);
  v352 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v476);
  v362 = v352;
  swift_release(v351);
  swift_retain(v352);
  v353 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v477);
  swift_release(v352);
  swift_retain(v353);
  v354 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v478);
  swift_release(v353);
  swift_retain(v354);
  v355 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v479);
  swift_release(v354);
  swift_retain(v355);
  v356 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v480);
  swift_release(v355);
  swift_retain(v356);
  v357 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v481);
  swift_release(v356);
  swift_retain(v357);
  v358 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v467);
  swift_release(v357);
  swift_retain(v358);
  v359 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v292);
  swift_release(v358);
  swift_retain(v359);
  v388 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v295);
  swift_release(v417);
  swift_release(v416);
  swift_release(v415);
  swift_release(v414);
  swift_release(v413);
  swift_release(v412);
  swift_release(v411);
  swift_release(v410);
  swift_release(v409);
  swift_release(v408);
  swift_release(v407);
  swift_release(v406);
  swift_release(v405);
  swift_release(v404);
  swift_release(v403);
  swift_release(v402);
  swift_release(v401);
  swift_release(v400);
  swift_release(v399);
  swift_release(v398);
  swift_release(v397);
  swift_release(v396);
  swift_release(v395);
  swift_release(v394);
  swift_release(v393);
  swift_release(v392);
  swift_release(v391);
  swift_release(v390);
  swift_release(v389);
  swift_release(v387);
  swift_release(v386);
  swift_release(v385);
  swift_release(v384);
  swift_release(v383);
  swift_release(v382);
  swift_release(v381);
  swift_release(v380);
  swift_release(v379);
  swift_release(v378);
  swift_release(v377);
  swift_release(v376);
  swift_release(v375);
  swift_release(v374);
  swift_release(v373);
  swift_release(v372);
  swift_release(v371);
  swift_release(v370);
  swift_release(v369);
  swift_release(v368);
  swift_release(v367);
  swift_release(v366);
  swift_release(v365);
  swift_release(v364);
  swift_release(v363);
  swift_release(v362);
  swift_release(v353);
  swift_release(v354);
  swift_release(v355);
  swift_release(v356);
  swift_release(v357);
  swift_release(v358);
  swift_release(v421);
  swift_release_n(v359, 2);
  swift_release_n(v422, 2);
  v360 = *(void (**)(char *, uint64_t))(v433 + 8);
  v360(v295, v0);
  v360(v430, v0);
  v360(v467, v0);
  v360(v481, v0);
  v360(v480, v0);
  v360(v479, v0);
  v360(v478, v0);
  v360(v477, v0);
  v360(v476, v0);
  v360(v475, v0);
  v360(v474, v0);
  v360(v473, v0);
  v360(v472, v0);
  v360(v471, v0);
  v360(v470, v0);
  v360(v469, v0);
  v360(v432, v0);
  v360(v468, v0);
  v360(v431, v0);
  v360(v420, v0);
  v360(v419, v0);
  v360(v482, v0);
  v360(v466, v0);
  v360(v465, v0);
  v360(v464, v0);
  v360(v463, v0);
  v360(v462, v0);
  v360(v461, v0);
  v360(v460, v0);
  v360(v459, v0);
  v360(v458, v0);
  v360(v457, v0);
  v360(v456, v0);
  v360(v455, v0);
  v360(v454, v0);
  v360(v453, v0);
  v360(v452, v0);
  v360(v451, v0);
  v360(v450, v0);
  v360(v449, v0);
  v360(v448, v0);
  v360(v447, v0);
  v360(v446, v0);
  v360(v445, v0);
  v360(v444, v0);
  v360(v443, v0);
  v360(v442, v0);
  v360(v441, v0);
  v360(v440, v0);
  v360(v439, v0);
  v360(v438, v0);
  v360(v437, v0);
  v360(v436, v0);
  v360(v435, v0);
  v360(v434, v0);
  v360(v429, v0);
  v360(v428, v0);
  v360(v427, v0);
  v360(v426, v0);
  v360(v425, v0);
  v360(v424, v0);
  v360(v423, v0);
  return v388;
}

uint64_t sub_10024B9DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024D234((void (*)(_QWORD))&type metadata accessor for PlaybackController, (uint64_t (*)(uint64_t))&PlaybackController.__allocating_init(asPartOf:), a1);
}

uint64_t sub_10024B9F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for ChannelLockupGenerator();
  v3 = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  result = sub_100026844(&qword_10055C6C8, (uint64_t (*)(uint64_t))type metadata accessor for ChannelLockupGenerator, (uint64_t)&protocol conformance descriptor for ChannelLockupGenerator);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_10024BA5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024BC44(&qword_10055C6C0, (uint64_t)&protocol conformance descriptor for LibraryDataProvider, a1);
}

id sub_10024BA70@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  _BYTE v4[24];

  if (qword_1005520B8 != -1)
    swift_once(&qword_1005520B8, sub_10004AB18);
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v4, 0, 0);
  v2 = (void *)static PodcastsStateCoordinator.shared;
  *a1 = static PodcastsStateCoordinator.shared;
  return v2;
}

id sub_10024BAE0@<X0>(_QWORD *a1@<X8>)
{
  id v3;
  _BYTE v4[24];

  if (qword_1005520B8 != -1)
    swift_once(&qword_1005520B8, sub_10004AB18);
  swift_beginAccess(&static PodcastsStateCoordinator.shared, v4, 0, 0);
  v3 = (id)static PodcastsStateCoordinator.shared;
  a1[3] = type metadata accessor for PodcastsStateCoordinator();
  a1[4] = sub_100026844(&qword_100553AE8, (uint64_t (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator, (uint64_t)&protocol conformance descriptor for PodcastsStateCoordinator);
  *a1 = v3;
  return v3;
}

id sub_10024BB84@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id result;
  void *v9;
  uint64_t v10;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = sub_10003F544(&qword_10055E200);
  BaseObjectGraph.inject<A>(_:)(&v10, v3, v3);
  v4 = v10;
  v5 = sub_100005EC8(0, &qword_100553620, MTLegacyDownloadNotifier_ptr);
  BaseObjectGraph.inject<A>(_:)(&v9, v5, v5);
  v6 = v9;
  v7 = objc_allocWithZone((Class)type metadata accessor for LibraryDataProvider(0));
  result = LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(v4, v6, v2);
  *a1 = result;
  return result;
}

uint64_t sub_10024BC30@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024BC44(&qword_100553E60, (uint64_t)&protocol conformance descriptor for LibraryDataProvider, a1);
}

uint64_t sub_10024BC44@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for BaseObjectGraph(0);
  v6 = static BaseObjectGraph.current.getter();
  v7 = type metadata accessor for LibraryDataProvider(0);
  BaseObjectGraph.inject<A>(_:)(&v10, v7, v7);
  swift_release(v6);
  v8 = v10;
  result = sub_100026844(a1, type metadata accessor for LibraryDataProvider, a2);
  *a3 = v8;
  a3[1] = result;
  return result;
}

void sub_10024BCD0(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for LibraryDataProvider(0);
  BaseObjectGraph.inject<A>(_:)(&v6, v3, v3);
  swift_release(v2);
  v4 = v6;
  v5 = *(_QWORD *)&v6[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_hudPresenter];
  swift_retain(v5);

  *a1 = v5;
  a1[1] = &off_1004C4230;
}

void sub_10024BD58(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  char *v6;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for LibraryDataProvider(0);
  BaseObjectGraph.inject<A>(_:)(&v6, v3, v3);
  swift_release(v2);
  v4 = v6;
  v5 = *(id *)&v6[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateControllerProvider];

  *a1 = v5;
}

id sub_10024BDD8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024BE50(&qword_100553B78, &off_1004A43D0, (uint64_t)&off_1004BCA30, a1);
}

id sub_10024BDF4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)MTAddPodcastOrStationController), "init");
  *a1 = result;
  a1[1] = &off_1004B4FA8;
  return result;
}

id sub_10024BE34@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024BE50((unint64_t *)&unk_100553B90, &off_1004A44C8, (uint64_t)&off_1004B81E0, a1);
}

id sub_10024BE50@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  id result;

  v6 = sub_100005EC8(0, a1, a2);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "sharedInstance");
  *a4 = result;
  a4[1] = a3;
  return result;
}

uint64_t sub_10024BE9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for RestrictionsController();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1004B0550;
  *a1 = result;
  return result;
}

uint64_t sub_10024BEE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for TranscriptReportConcernURLBuilder();
  result = swift_allocObject(v2, 16, 7);
  *a1 = result;
  return result;
}

uint64_t sub_10024BF18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for TranscriptReportConcernURLBuilder();
  a1[3] = v3;
  a1[4] = &off_1004B6110;
  BaseObjectGraph.inject<A>(_:)(a1, v3, v3);
  return swift_release(v2);
}

id sub_10024BF6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id result;
  _UNKNOWN **v5;

  if ((static Podcasts.isBlueMoonEnabled()(a1) & 1) != 0)
  {
    v3 = type metadata accessor for BlueMoonStubPlayerController();
    result = (id)swift_allocObject(v3, 16, 7);
    v5 = &off_1004C4880;
  }
  else
  {
    result = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    v5 = &off_1004C18C0;
  }
  *a2 = result;
  a2[1] = v5;
  return result;
}

id sub_10024BFDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  void *v4;

  if ((static Podcasts.isBlueMoonEnabled()(a1) & 1) != 0)
  {
    result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BlueMoonStubPlayerAdapter()), "init");
    *a2 = result;
    a2[1] = &off_1004C2560;
  }
  else
  {
    if (qword_1005520C0 != -1)
      swift_once(&qword_1005520C0, sub_100004A04);
    v4 = (void *)qword_100573030;
    *a2 = qword_100573030;
    a2[1] = &protocol witness table for PodcastsPlayerAdapter;
    return v4;
  }
  return result;
}

id sub_10024C06C@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024BE50((unint64_t *)&unk_10055BCD0, &off_1004A4568, (uint64_t)&off_1004C0040, a1);
}

uint64_t sub_10024C088@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  result = sub_100361558(v2);
  *a1 = result;
  return result;
}

uint64_t sub_10024C0BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024CA4C((uint64_t (*)(uint64_t))type metadata accessor for LibraryActionController, &qword_1005535D0, (uint64_t)&unk_1003D6AF0, a1);
}

id sub_10024C0D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;
  id result;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = objc_allocWithZone((Class)type metadata accessor for ClassKitManager());
  result = sub_10030042C(v2);
  *a1 = result;
  return result;
}

uint64_t sub_10024C128@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for EpisodeController();
  swift_allocObject(v3, 144, 7);
  v4 = sub_10026CA40(v2);
  result = swift_release(v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10024C190@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024CA4C((uint64_t (*)(uint64_t))type metadata accessor for EpisodeController, (unint64_t *)&unk_10055C4E8, (uint64_t)&unk_1003D0CB0, a1);
}

void sub_10024C1AC(_QWORD *a1@<X8>)
{
  objc_class *v2;
  char *v3;
  uint64_t v4;
  id v5;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  id v10;
  objc_super v11;

  v2 = (objc_class *)type metadata accessor for ChapterResultsController(0);
  v3 = (char *)objc_allocWithZone(v2);
  v4 = qword_10055ACA0;
  v5 = objc_allocWithZone((Class)MTChapterResultsController);
  v6 = v3;
  *(_QWORD *)&v3[v4] = objc_msgSend(v5, "init");

  v7 = *(void **)&v3[v4];
  v8 = &v6[qword_10055ABB0];
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(_QWORD *)&v6[qword_10055ABB8] = v7;
  v9 = v7;
  v11.receiver = v6;
  v11.super_class = (Class)sub_10003F544((uint64_t *)&unk_100562B30);
  v10 = objc_msgSendSuper2(&v11, "init");
  objc_msgSend(v9, "setDelegate:", v10);

  a1[3] = v2;
  a1[4] = &off_1004B6780;
  *a1 = v10;
}

id sub_10024C2BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C350((unint64_t *)&unk_100562AA0, &off_1004A4490, (SEL *)&selRef_sharedInstance, a1);
}

id sub_10024C2D8@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(MTReachability), "sharedInstance");
  if (result)
    *a1 = result;
  else
    __break(1u);
  return result;
}

uint64_t sub_10024C320@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C3AC((unint64_t *)&unk_10055C450, &off_1004A4510, a1);
}

id sub_10024C334@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C350((unint64_t *)&unk_10055B1C0, off_1004A42F8, (SEL *)&selRef_sharedInstance, a1);
}

id sub_10024C350@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, SEL *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  id result;

  v6 = sub_100005EC8(0, a1, a2);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), *a3);
  *a4 = result;
  return result;
}

uint64_t sub_10024C398@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C3AC((unint64_t *)&unk_10055B1C0, off_1004A42F8, a1);
}

uint64_t sub_10024C3AC@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  type metadata accessor for BaseObjectGraph(0);
  v6 = static BaseObjectGraph.current.getter();
  v7 = sub_100005EC8(0, a1, a2);
  BaseObjectGraph.inject<A>(_:)(&v9, v7, v7);
  result = swift_release(v6);
  *a3 = v9;
  return result;
}

id sub_10024C420@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id result;

  v2 = sub_100005EC8(0, (unint64_t *)&unk_10055C6B0, off_1004A4438);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "sharedInstance");
  *a1 = result;
  return result;
}

uint64_t sub_10024C470@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CC8C((uint64_t (*)(_QWORD))&type metadata accessor for SiriIntentDonator, (uint64_t (*)(uint64_t))&SiriIntentDonator.init(asPartOf:), a1);
}

uint64_t sub_10024C484@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  __n128 v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[40];
  _QWORD v34[3];
  uint64_t v35;
  void *v36;

  v32 = a1;
  v1 = type metadata accessor for PageIntentInstrumentation(0);
  v30 = *(_QWORD *)(v1 - 8);
  v31 = v1;
  __chkstk_darwin(v1);
  v29 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for IntentDispatchTimeout(0);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NativeIntentDispatcher(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  type metadata accessor for BaseObjectGraph(0);
  v13 = ((uint64_t (*)(void))static BaseObjectGraph.current.getter)();
  v14 = type metadata accessor for LazyJSStack(0);
  BaseObjectGraph.inject<A>(_:)(v34, v14, v14);
  swift_release(v13);
  v15 = v34[0];
  sub_10024D444((uint64_t)v10);
  v35 = v14;
  v36 = (void *)sub_100026844(&qword_10055C578, (uint64_t (*)(uint64_t))&type metadata accessor for LazyJSStack, (uint64_t)&protocol conformance descriptor for LazyJSStack);
  v34[0] = v15;
  v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v16(v12, v10, v6);
  sub_10024FB0C((uint64_t)v34, (uint64_t)v33);
  v17 = swift_retain();
  NativeIntentDispatcher.next.setter(v33, v17);
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v19 = sub_100007A28((uint64_t)v34, (uint64_t *)&unk_10055C580);
  v20 = static BaseObjectGraph.current.getter(v19);
  v35 = v6;
  v36 = &protocol witness table for NativeIntentDispatcher;
  v21 = (char *)sub_1000242A8(v34);
  v16(v21, v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v5, enum case for IntentDispatchTimeout.none(_:), v28);
  v22 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v29, enum case for PageIntentInstrumentation.notInstrumented(_:), v31);
  v23 = type metadata accessor for PodcastsIntentDispatcher(0);
  v24 = v32;
  v32[3] = v23;
  v24[4] = sub_100026844((unint64_t *)&unk_100562AC0, (uint64_t (*)(uint64_t))&type metadata accessor for PodcastsIntentDispatcher, (uint64_t)&protocol conformance descriptor for PodcastsIntentDispatcher);
  sub_1000242A8(v24);
  PodcastsIntentDispatcher.init(asPartOf:intentDispatcher:timeout:instrumentation:)(v20, v34, v5, v22);
  swift_release(v15);
  return ((uint64_t (*)(char *, uint64_t))v18)(v12, v6);
}

uint64_t sub_10024C728@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  objc_super v11;
  uint64_t v12;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for UserActivityController();
  v4 = (_QWORD *)swift_allocObject(v3, 72, 7);
  v4[2] = _swiftEmptyArrayStorage;
  v4[4] = 0;
  v4[6] = 0;
  v4[7] = 0;
  v4[8] = v2;
  v5 = type metadata accessor for PlaybackController(0);
  swift_retain(v2);
  BaseObjectGraph.inject<A>(_:)(&v12, v5, v5);
  v6 = v12;
  v4[3] = v12;
  v7 = (objc_class *)type metadata accessor for PlaybackContinuityActivityDelegate();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = swift_weakInit(&v8[OBJC_IVAR____TtC8Podcasts34PlaybackContinuityActivityDelegate_playbackController], 0);
  swift_weakAssign(v9, v6);
  v11.receiver = v8;
  v11.super_class = v7;
  v4[5] = objc_msgSendSuper2(&v11, "init");
  result = swift_release(v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10024C820@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CC8C((uint64_t (*)(_QWORD))&type metadata accessor for NowPlayingItemPlayheadSynchronizer, (uint64_t (*)(uint64_t))&NowPlayingItemPlayheadSynchronizer.init(asPartOf:), a1);
}

uint64_t sub_10024C834@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = objc_msgSend(objc_allocWithZone((Class)MTSubscribeUtil), "init");
  v4 = objc_allocWithZone((Class)type metadata accessor for RemoteFollowCommandCenter(0));
  result = RemoteFollowCommandCenter.init(asPartOf:subscriptionUtility:)(v2, v3);
  *a1 = result;
  return result;
}

id sub_10024C8AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C9FC(off_1004A44A0, (SEL *)&selRef_defaultInstance, a1);
}

unint64_t sub_10024C8C0@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  unint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  a1[3] = &type metadata for UIAppSettingsBridge;
  result = sub_10024FAC8();
  a1[4] = result;
  *a1 = v2;
  return result;
}

id sub_10024C918@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
  *a1 = result;
  return result;
}

id sub_10024C958@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C350(&qword_1005536C0, MTImageStore_ptr, (SEL *)&selRef_defaultStore, a1);
}

id sub_10024C974@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C350(&qword_100554590, &off_1004A4480, (SEL *)&selRef_sharedInstance, a1);
}

unint64_t sub_10024C990@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;
  unint64_t result;

  v2 = sub_100005EC8(0, &qword_100554590, &off_1004A4480);
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "sharedInstance");
  result = sub_10024FA70();
  *a1 = v3;
  a1[1] = result;
  return result;
}

id sub_10024C9E8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C9FC(off_1004A4588, (SEL *)&selRef_sharedInstance, a1);
}

id sub_10024C9FC@<X0>(_QWORD *a1@<X0>, SEL *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(*a1), *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10024CA38@<X0>(_QWORD *a1@<X8>)
{
  return sub_10024C3AC((unint64_t *)&qword_10055C498, off_1004A4588, a1);
}

uint64_t sub_10024CA4C@<X0>(uint64_t (*a1)(uint64_t)@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for BaseObjectGraph(0);
  v8 = static BaseObjectGraph.current.getter();
  v9 = a1(0);
  a4[3] = v9;
  a4[4] = sub_100026844(a2, a1, a3);
  BaseObjectGraph.inject<A>(_:)(a4, v9, v9);
  return swift_release(v8);
}

uint64_t sub_10024CAD0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CC8C((uint64_t (*)(_QWORD))&type metadata accessor for BookmarksController, (uint64_t (*)(uint64_t))&BookmarksController.init(asPartOf:), a1);
}

uint64_t sub_10024CAE4@<X0>(_QWORD *a1@<X8>)
{
  objc_class *v2;
  id v3;
  uint64_t result;

  v2 = (objc_class *)type metadata accessor for LibraryViewControllerProvider();
  v3 = objc_msgSend(objc_allocWithZone(v2), "init");
  a1[3] = v2;
  result = sub_100026844(&qword_10055C4E0, (uint64_t (*)(uint64_t))type metadata accessor for LibraryViewControllerProvider, (uint64_t)&unk_1003CD210);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_10024CB54@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CB8C((uint64_t (*)(_QWORD))&type metadata accessor for HeaderButtonTipProvider, (uint64_t (*)(uint64_t))&HeaderButtonTipProvider.init(asPartOf:), (uint64_t)&protocol witness table for HeaderButtonTipProvider, a1);
}

uint64_t sub_10024CB70@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CB8C((uint64_t (*)(_QWORD))&type metadata accessor for LibraryRemovalController, (uint64_t (*)(uint64_t))&LibraryRemovalController.init(asPartOf:), (uint64_t)&protocol witness table for LibraryRemovalController, a1);
}

uint64_t sub_10024CB8C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v8 = static BaseObjectGraph.current.getter();
  v9 = a1(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  result = a2(v8);
  a4[3] = v9;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t sub_10024CC08@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CC8C((uint64_t (*)(_QWORD))&type metadata accessor for RecommendationsMetadataProvider, (uint64_t (*)(uint64_t))&RecommendationsMetadataProvider.init(asPartOf:), a1);
}

uint64_t sub_10024CC1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for HomePageProvider(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = HomePageProvider.init(asPartOf:platformContext:)(v2, 0);
  *a1 = result;
  return result;
}

uint64_t sub_10024CC78@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024CC8C((uint64_t (*)(_QWORD))&type metadata accessor for EpisodeUpsellBannerDataProvider, (uint64_t (*)(uint64_t))&EpisodeUpsellBannerDataProvider.init(asPartOf:), a1);
}

uint64_t sub_10024CC8C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v6 = static BaseObjectGraph.current.getter();
  v7 = a1(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  result = a2(v6);
  *a3 = result;
  return result;
}

uint64_t sub_10024CCF4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  v2 = static BaseObjectGraph.current.getter();
  v3 = type metadata accessor for PodcastsContextActionProvider();
  swift_allocObject(v3, 248, 7);
  v4 = sub_10034E128(v2);
  result = swift_release(v2);
  a1[3] = v3;
  a1[4] = &off_1004C4928;
  *a1 = v4;
  return result;
}

void sub_10024CD6C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  NSString v17;
  id v18;
  void (*v19)(char *, char *, uint64_t);
  NSString v20;
  unsigned __int8 v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  unsigned __int8 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v2 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v35 - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "stringForKey:", v13);

  if (!v14)
    goto LABEL_8;
  v15 = a1;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v36 = v16;

  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v12, "URLForKey:", v17);

  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_7;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v19(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_7:
    swift_bridgeObjectRelease(v36);
    sub_100007A28((uint64_t)v4, (uint64_t *)&unk_100553DC0);
    a1 = v15;
    goto LABEL_8;
  }
  v19(v11, v4, v5);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v12, "BOOLForKey:", v20);

  a1 = v15;
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v15[3] = type metadata accessor for KCUTranscriptProvider(0);
    v15[4] = &protocol witness table for KCUTranscriptProvider;
    sub_1000242A8(v15);
    KCUTranscriptProvider.init(bearerToken:basePath:kcuTranscriptPath:kcuSignaturePath:)(v35, v36, v9, 0x697263736E617274, 0xEA00000000007470, 0xD000000000000010, 0x8000000100437850);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  swift_bridgeObjectRelease(v36);
LABEL_8:
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v12, "stringForKey:", v22);

  if (v23)
  {
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v12, "stringForKey:", v27);

    if (v28)
    {
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      v32 = String._bridgeToObjectiveC()();
      v33 = objc_msgSend(v12, "BOOLForKey:", v32);

      if ((v33 & 1) == 0)
      {
        v34 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        a1[3] = type metadata accessor for BundleAssetTranscriptProvider(0);
        a1[4] = &protocol witness table for BundleAssetTranscriptProvider;
        sub_1000242A8(a1);
        BundleAssetTranscriptProvider.init(ttmlFileName:signatureFileName:bundle:)(v24, v26, v29, v31, v34);
        goto LABEL_16;
      }
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v31 = v26;
    }
    swift_bridgeObjectRelease(v31);
  }
  a1[3] = type metadata accessor for TimeBombedTranscriptProvider(0);
  a1[4] = &protocol witness table for TimeBombedTranscriptProvider;
  sub_1000242A8(a1);
  static TimeBombedTranscriptProvider.foreground.getter();
LABEL_16:

}

uint64_t sub_10024D220@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024D234((void (*)(_QWORD))&type metadata accessor for NowPlayingAlignmentCoordinator, (uint64_t (*)(uint64_t))&NowPlayingAlignmentCoordinator.__allocating_init(asPartOf:), a1);
}

uint64_t sub_10024D234@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  a1(0);
  type metadata accessor for BaseObjectGraph(0);
  v5 = static BaseObjectGraph.current.getter();
  result = a2(v5);
  *a3 = result;
  return result;
}

uint64_t sub_10024D288@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for PageContextTracker(0);
  result = static PageContextTracker.shared.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10024D2B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v12[5];

  v2 = type metadata accessor for AMSOAuthEndpointSubscriber(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AMSOAuthEndpointSubscriber.init()(v3);
  type metadata accessor for BaseObjectGraph(0);
  static BaseObjectGraph.current.getter();
  v6 = type metadata accessor for OAuthHUDViewHandler(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = OAuthHUDViewHandler.init(asPartOf:)(v7);
  v12[3] = v6;
  v12[4] = sub_100026844((unint64_t *)&unk_10055C4D0, (uint64_t (*)(uint64_t))&type metadata accessor for OAuthHUDViewHandler, (uint64_t)&protocol conformance descriptor for OAuthHUDViewHandler);
  v12[0] = v8;
  v9 = type metadata accessor for OAuthController(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  result = OAuthController.init(endpointSubscriber:hudViewHandler:)(v5, v12);
  *a1 = result;
  return result;
}

id sub_10024D3BC@<X0>(void **a1@<X8>)
{
  return sub_10024D3F4(&qword_1005520E0, (void **)&static DebouncedAutoDownloadProcessor.sharedInstance, a1);
}

id sub_10024D3D8@<X0>(void **a1@<X8>)
{
  return sub_10024D3F4(&qword_100552010, (void **)&static DebouncedAssetRemovalProcessor.sharedInstance, a1);
}

id sub_10024D3F4@<X0>(_QWORD *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  void *v5;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  *a3 = *a2;
  return v5;
}

ValueMetadata *type metadata accessor for Dependencies()
{
  return &type metadata for Dependencies;
}

uint64_t sub_10024D444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (**v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t (**v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t UpNextEpisodesIntent;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t LocalEpisodeContentIDsIntent;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t EpisodeOfferContentIDsIntentsIntent;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t updated;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t ShowEpisodesIntent;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t ShowLatestCatalogEpisodesIntent;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t MAPIRepresentableIntent;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t PodcastForEpisodeIntent;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  void (*v195)(void);
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v226;
  char *v227;
  uint64_t UpNextEpisodesIntentImplementation;
  char *v229;
  uint64_t LocalEpisodeContentIDsIntentImplementation;
  char *v231;
  uint64_t EpisodeOfferContentIDsIntentsIntentImplementation;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t ShowEpisodesIntentImplementation;
  uint64_t v250;
  char *v251;
  uint64_t ShowLatestCatalogEpisodesIntentImplementation;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t PodcastForEpisodeIntentImplementation;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t (**v276)(char *, uint64_t);
  uint64_t (**v277)(char *, uint64_t);
  uint64_t (**v278)(char *, uint64_t);
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;

  v269 = a1;
  v267 = type metadata accessor for DebugLibraryStorageTipSuggestedLimitIntentImplementation(0);
  v268 = *(_QWORD *)(v267 - 8);
  __chkstk_darwin(v267);
  v266 = (char *)&v226 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  PodcastForEpisodeIntentImplementation = type metadata accessor for FetchPodcastForEpisodeIntentImplementation(0);
  v265 = *(_QWORD *)(PodcastForEpisodeIntentImplementation - 8);
  __chkstk_darwin(PodcastForEpisodeIntentImplementation);
  v263 = (char *)&v226 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_10003F544(&qword_10055C590);
  v262 = *(char **)(v261 - 8);
  __chkstk_darwin(v261);
  v260 = (char *)&v226 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_10003F544(&qword_10055C598);
  v259 = *(char **)(v258 - 8);
  __chkstk_darwin(v258);
  v257 = (char *)&v226 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_10003F544(&qword_10055C5A0);
  v256 = *(char **)(v255 - 8);
  __chkstk_darwin(v255);
  v254 = (char *)&v226 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ShowLatestCatalogEpisodesIntentImplementation = type metadata accessor for FetchShowLatestCatalogEpisodesIntentImplementation(0);
  v253 = *(char **)(ShowLatestCatalogEpisodesIntentImplementation - 8);
  __chkstk_darwin(ShowLatestCatalogEpisodesIntentImplementation);
  v251 = (char *)&v226 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  ShowEpisodesIntentImplementation = type metadata accessor for FindShowEpisodesIntentImplementation(0);
  v250 = *(_QWORD *)(ShowEpisodesIntentImplementation - 8);
  __chkstk_darwin(ShowEpisodesIntentImplementation);
  v248 = (char *)&v226 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for FollowFeedIntentImplementation(0);
  v247 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v245 = (char *)&v226 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for RemoveEpisodesDownloadIntentImplementation(0);
  v244 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v242 = (char *)&v226 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = type metadata accessor for DownloadEpisodesIntentImplementation(0);
  v241 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v239 = (char *)&v226 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = type metadata accessor for UnbookmarkEpisodeIntentImplementation(0);
  v238 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v236 = (char *)&v226 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for BookmarkEpisodeIntentImplementation(0);
  v235 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v233 = (char *)&v226 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  EpisodeOfferContentIDsIntentsIntentImplementation = type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation(0);
  v278 = *(uint64_t (***)(char *, uint64_t))(EpisodeOfferContentIDsIntentsIntentImplementation - 8);
  __chkstk_darwin(EpisodeOfferContentIDsIntentsIntentImplementation);
  v231 = (char *)&v226 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalEpisodeContentIDsIntentImplementation = type metadata accessor for FindOrCreateLocalEpisodeContentIDsIntentImplementation(0);
  v277 = *(uint64_t (***)(char *, uint64_t))(LocalEpisodeContentIDsIntentImplementation - 8);
  __chkstk_darwin(LocalEpisodeContentIDsIntentImplementation);
  v229 = (char *)&v226 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UpNextEpisodesIntentImplementation = type metadata accessor for FetchUpNextEpisodesIntentImplementation(0);
  v276 = *(uint64_t (***)(char *, uint64_t))(UpNextEpisodesIntentImplementation - 8);
  __chkstk_darwin(UpNextEpisodesIntentImplementation);
  v227 = (char *)&v226 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NativeIntentDispatcher(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v226 = (char *)&v226 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v270 = (char *)&v226 - v21;
  v22 = __chkstk_darwin(v20);
  v271 = (char *)&v226 - v23;
  v24 = __chkstk_darwin(v22);
  v280 = (char *)&v226 - v25;
  v26 = __chkstk_darwin(v24);
  v279 = (char *)&v226 - v27;
  v28 = __chkstk_darwin(v26);
  v298 = (char *)&v226 - v29;
  v30 = __chkstk_darwin(v28);
  v297 = (char *)&v226 - v31;
  v32 = __chkstk_darwin(v30);
  v296 = (char *)&v226 - v33;
  v34 = __chkstk_darwin(v32);
  v295 = (char *)&v226 - v35;
  v36 = __chkstk_darwin(v34);
  v294 = (char *)&v226 - v37;
  v38 = __chkstk_darwin(v36);
  v293 = (char *)&v226 - v39;
  v40 = __chkstk_darwin(v38);
  v292 = (char *)&v226 - v41;
  v42 = __chkstk_darwin(v40);
  v291 = (char *)&v226 - v43;
  v44 = __chkstk_darwin(v42);
  v290 = (char *)&v226 - v45;
  v46 = __chkstk_darwin(v44);
  v289 = (char *)&v226 - v47;
  v48 = __chkstk_darwin(v46);
  v288 = (char *)&v226 - v49;
  v50 = __chkstk_darwin(v48);
  v287 = (char *)&v226 - v51;
  v52 = __chkstk_darwin(v50);
  v286 = (char *)&v226 - v53;
  v54 = __chkstk_darwin(v52);
  v285 = (char *)&v226 - v55;
  v56 = __chkstk_darwin(v54);
  v284 = (char *)&v226 - v57;
  v58 = __chkstk_darwin(v56);
  v283 = (char *)&v226 - v59;
  v60 = __chkstk_darwin(v58);
  v282 = (char *)&v226 - v61;
  v62 = __chkstk_darwin(v60);
  v281 = (char *)&v226 - v63;
  v64 = __chkstk_darwin(v62);
  v66 = (uint64_t (**)(char *, uint64_t))((char *)&v226 - v65);
  v67 = __chkstk_darwin(v64);
  v69 = (uint64_t (**)(char *, uint64_t))((char *)&v226 - v68);
  v70 = __chkstk_darwin(v67);
  v72 = (uint64_t (**)(char *, uint64_t))((char *)&v226 - v71);
  v73 = __chkstk_darwin(v70);
  v75 = (char *)&v226 - v74;
  v76 = __chkstk_darwin(v73);
  v78 = (char *)&v226 - v77;
  v79 = __chkstk_darwin(v76);
  v81 = (char *)&v226 - v80;
  v82 = __chkstk_darwin(v79);
  v84 = (char *)&v226 - v83;
  NativeIntentDispatcher.init()(v82);
  v85 = sub_10024FB54();
  v273 = v84;
  NativeIntentDispatcher.registering<A>(_:)(v85, &type metadata for FetchShowEntitiesIntentImplementation, v85);
  v272 = (char *)v17;
  v86 = *(void (**)(char *, uint64_t))(v17 + 8);
  v86(v81, v16);
  v87 = type metadata accessor for OpenTranscriptIntentImplementation(0);
  v88 = sub_100026844(&qword_10055C5B0, type metadata accessor for OpenTranscriptIntentImplementation, (uint64_t)&unk_1003D72E8);
  v274 = v78;
  v89 = static NativeIntentDispatcher.Builder.buildExpression<A>(_:)(v87, v87, v88);
  v90 = v227;
  UpNextEpisodesIntent = FetchUpNextEpisodesIntentImplementation.init()(v89);
  NativeIntentDispatcher.init()(UpNextEpisodesIntent);
  v92 = sub_100026844(&qword_10055C5B8, (uint64_t (*)(uint64_t))&type metadata accessor for FetchUpNextEpisodesIntentImplementation, (uint64_t)&protocol conformance descriptor for FetchUpNextEpisodesIntentImplementation);
  v275 = v75;
  v93 = UpNextEpisodesIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)(v90, UpNextEpisodesIntentImplementation, v92);
  v86(v81, v16);
  v94 = v276[1](v90, v93);
  v95 = v229;
  LocalEpisodeContentIDsIntent = FindOrCreateLocalEpisodeContentIDsIntentImplementation.init()(v94);
  NativeIntentDispatcher.init()(LocalEpisodeContentIDsIntent);
  v97 = sub_100026844(&qword_10055C5C0, (uint64_t (*)(uint64_t))&type metadata accessor for FindOrCreateLocalEpisodeContentIDsIntentImplementation, (uint64_t)&protocol conformance descriptor for FindOrCreateLocalEpisodeContentIDsIntentImplementation);
  v276 = v72;
  v98 = LocalEpisodeContentIDsIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)(v95, LocalEpisodeContentIDsIntentImplementation, v97);
  v86(v81, v16);
  v99 = v277[1](v95, v98);
  v100 = v231;
  EpisodeOfferContentIDsIntentsIntent = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init()(v99);
  NativeIntentDispatcher.init()(EpisodeOfferContentIDsIntentsIntent);
  v102 = sub_100026844(&qword_10055C5C8, (uint64_t (*)(uint64_t))&type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation, (uint64_t)&protocol conformance descriptor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation);
  v277 = v69;
  v103 = EpisodeOfferContentIDsIntentsIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)(v100, EpisodeOfferContentIDsIntentsIntentImplementation, v102);
  v86(v81, v16);
  v104 = v278[1](v100, v103);
  v105 = v233;
  v106 = BookmarkEpisodeIntentImplementation.init()(v104);
  NativeIntentDispatcher.init()(v106);
  v107 = sub_100026844(&qword_10055C5D0, (uint64_t (*)(uint64_t))&type metadata accessor for BookmarkEpisodeIntentImplementation, (uint64_t)&protocol conformance descriptor for BookmarkEpisodeIntentImplementation);
  v278 = v66;
  v108 = v234;
  NativeIntentDispatcher.registering<A>(_:)(v105, v234, v107);
  v86(v81, v16);
  v109 = (*(uint64_t (**)(char *, uint64_t))(v235 + 8))(v105, v108);
  v110 = v236;
  v111 = UnbookmarkEpisodeIntentImplementation.init()(v109);
  NativeIntentDispatcher.init()(v111);
  v112 = sub_100026844(&qword_10055C5D8, (uint64_t (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntentImplementation, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeIntentImplementation);
  v113 = v237;
  NativeIntentDispatcher.registering<A>(_:)(v110, v237, v112);
  v86(v81, v16);
  v114 = (*(uint64_t (**)(char *, uint64_t))(v238 + 8))(v110, v113);
  v115 = v239;
  v116 = DownloadEpisodesIntentImplementation.init()(v114);
  NativeIntentDispatcher.init()(v116);
  v117 = sub_100026844(&qword_10055C5E0, (uint64_t (*)(uint64_t))&type metadata accessor for DownloadEpisodesIntentImplementation, (uint64_t)&protocol conformance descriptor for DownloadEpisodesIntentImplementation);
  v118 = v240;
  NativeIntentDispatcher.registering<A>(_:)(v115, v240, v117);
  v86(v81, v16);
  v119 = (*(uint64_t (**)(char *, uint64_t))(v241 + 8))(v115, v118);
  v120 = v242;
  v121 = RemoveEpisodesDownloadIntentImplementation.init()(v119);
  NativeIntentDispatcher.init()(v121);
  v122 = sub_100026844(&qword_10055C5E8, (uint64_t (*)(uint64_t))&type metadata accessor for RemoveEpisodesDownloadIntentImplementation, (uint64_t)&protocol conformance descriptor for RemoveEpisodesDownloadIntentImplementation);
  v123 = v243;
  NativeIntentDispatcher.registering<A>(_:)(v120, v243, v122);
  v86(v81, v16);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v120, v123);
  updated = type metadata accessor for UpdateEpisodeDownloadBehaviorImplementation(0);
  v125 = sub_100026844(&qword_10055C5F0, (uint64_t (*)(uint64_t))&type metadata accessor for UpdateEpisodeDownloadBehaviorImplementation, (uint64_t)&protocol conformance descriptor for UpdateEpisodeDownloadBehaviorImplementation);
  static NativeIntentDispatcher.Builder.buildExpression<A>(_:)(updated, updated, v125);
  v126 = type metadata accessor for ReevaluateAutoDownloadsIntentImplementation(0);
  v127 = sub_100026844(&qword_10055C5F8, type metadata accessor for ReevaluateAutoDownloadsIntentImplementation, (uint64_t)&unk_1003CC68C);
  v128 = static NativeIntentDispatcher.Builder.buildExpression<A>(_:)(v126, v126, v127);
  NativeIntentDispatcher.init()(v128);
  v129 = sub_10024FB98();
  NativeIntentDispatcher.registering<A>(_:)(v129, &type metadata for UpdateEpisodePlayStateIntentImplementation, v129);
  v130 = ((uint64_t (*)(char *, uint64_t))v86)(v81, v16);
  NativeIntentDispatcher.init()(v130);
  v131 = sub_10024FBDC();
  NativeIntentDispatcher.registering<A>(_:)(v131, &type metadata for FetchShowLatestLocalEpisodesIntentImplementation, v131);
  v132 = ((uint64_t (*)(char *, uint64_t))v86)(v81, v16);
  NativeIntentDispatcher.init()(v132);
  v133 = sub_10024FC20();
  NativeIntentDispatcher.registering<A>(_:)(v133, &type metadata for FetchShowLatestEpisodesIntentImplementation, v133);
  v134 = ((uint64_t (*)(char *, uint64_t))v86)(v81, v16);
  NativeIntentDispatcher.init()(v134);
  v135 = sub_10024FC64();
  NativeIntentDispatcher.registering<A>(_:)(v135, &type metadata for UnfollowShowIntentImplementation, v135);
  v136 = ((uint64_t (*)(char *, uint64_t))v86)(v81, v16);
  v137 = v245;
  v138 = FollowFeedIntentImplementation.init()(v136);
  NativeIntentDispatcher.init()(v138);
  v139 = sub_100026844(&qword_10055C620, (uint64_t (*)(uint64_t))&type metadata accessor for FollowFeedIntentImplementation, (uint64_t)&protocol conformance descriptor for FollowFeedIntentImplementation);
  v140 = v246;
  NativeIntentDispatcher.registering<A>(_:)(v137, v246, v139);
  v86(v81, v16);
  v141 = (*(uint64_t (**)(char *, uint64_t))(v247 + 8))(v137, v140);
  v142 = v248;
  ShowEpisodesIntent = FindShowEpisodesIntentImplementation.init()(v141);
  NativeIntentDispatcher.init()(ShowEpisodesIntent);
  v144 = sub_100026844(&qword_10055C628, (uint64_t (*)(uint64_t))&type metadata accessor for FindShowEpisodesIntentImplementation, (uint64_t)&protocol conformance descriptor for FindShowEpisodesIntentImplementation);
  v145 = ShowEpisodesIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)(v142, ShowEpisodesIntentImplementation, v144);
  v86(v81, v16);
  v146 = (*(uint64_t (**)(char *, uint64_t))(v250 + 8))(v142, v145);
  v147 = v251;
  ShowLatestCatalogEpisodesIntent = FetchShowLatestCatalogEpisodesIntentImplementation.init()(v146);
  NativeIntentDispatcher.init()(ShowLatestCatalogEpisodesIntent);
  v149 = sub_100026844(&qword_10055C630, (uint64_t (*)(uint64_t))&type metadata accessor for FetchShowLatestCatalogEpisodesIntentImplementation, (uint64_t)&protocol conformance descriptor for FetchShowLatestCatalogEpisodesIntentImplementation);
  v150 = ShowLatestCatalogEpisodesIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)(v147, ShowLatestCatalogEpisodesIntentImplementation, v149);
  v86(v81, v16);
  (*((void (**)(char *, uint64_t))v253 + 1))(v147, v150);
  v151 = type metadata accessor for ServerChannel(0);
  v152 = v254;
  MAPIRepresentableIntent = FetchMAPIRepresentableIntentImplementation.init()(v151);
  NativeIntentDispatcher.init()(MAPIRepresentableIntent);
  v154 = sub_10002F9C8(&qword_10055C638, &qword_10055C5A0, (uint64_t)&protocol conformance descriptor for FetchMAPIRepresentableIntentImplementation<A>);
  v155 = v255;
  NativeIntentDispatcher.registering<A>(_:)(v152, v255, v154);
  v86(v81, v16);
  (*((void (**)(char *, uint64_t))v256 + 1))(v152, v155);
  v156 = type metadata accessor for ServerPodcast(0);
  v157 = v257;
  v158 = FetchMAPIRepresentableIntentImplementation.init()(v156);
  NativeIntentDispatcher.init()(v158);
  v159 = sub_10002F9C8(&qword_10055C640, &qword_10055C598, (uint64_t)&protocol conformance descriptor for FetchMAPIRepresentableIntentImplementation<A>);
  v160 = v258;
  NativeIntentDispatcher.registering<A>(_:)(v157, v258, v159);
  v86(v81, v16);
  v161.n128_f64[0] = (*((double (**)(char *, uint64_t))v259 + 1))(v157, v160);
  v162 = type metadata accessor for ServerPodcastEpisode(0, v161);
  v163 = v260;
  v164 = FetchMAPIRepresentableIntentImplementation.init()(v162);
  NativeIntentDispatcher.init()(v164);
  v165 = sub_10002F9C8(&qword_10055C648, &qword_10055C590, (uint64_t)&protocol conformance descriptor for FetchMAPIRepresentableIntentImplementation<A>);
  v166 = v261;
  NativeIntentDispatcher.registering<A>(_:)(v163, v261, v165);
  v86(v81, v16);
  v167 = (*((uint64_t (**)(char *, uint64_t))v262 + 1))(v163, v166);
  v168 = v263;
  PodcastForEpisodeIntent = FetchPodcastForEpisodeIntentImplementation.init()(v167);
  NativeIntentDispatcher.init()(PodcastForEpisodeIntent);
  v170 = sub_100026844(&qword_10055C650, (uint64_t (*)(uint64_t))&type metadata accessor for FetchPodcastForEpisodeIntentImplementation, (uint64_t)&protocol conformance descriptor for FetchPodcastForEpisodeIntentImplementation);
  v171 = PodcastForEpisodeIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)(v168, PodcastForEpisodeIntentImplementation, v170);
  v86(v81, v16);
  v172 = (*(uint64_t (**)(char *, uint64_t))(v265 + 8))(v168, v171);
  v173 = v266;
  v174 = DebugLibraryStorageTipSuggestedLimitIntentImplementation.init()(v172);
  NativeIntentDispatcher.init()(v174);
  v175 = sub_100026844(&qword_10055C658, (uint64_t (*)(uint64_t))&type metadata accessor for DebugLibraryStorageTipSuggestedLimitIntentImplementation, (uint64_t)&protocol conformance descriptor for DebugLibraryStorageTipSuggestedLimitIntentImplementation);
  v176 = v267;
  NativeIntentDispatcher.registering<A>(_:)(v173, v267, v175);
  v86(v81, v16);
  v177 = (*(uint64_t (**)(char *, uint64_t))(v268 + 8))(v173, v176);
  v178 = static Podcasts.isBlueMoonEnabled()(v177);
  LOBYTE(v176) = v178;
  v179 = v279;
  NativeIntentDispatcher.init()(v178);
  if ((v176 & 1) != 0)
  {
    v180 = sub_10024FD74();
    NativeIntentDispatcher.registering<A>(_:)(v180, &type metadata for EnqueueMediaItemForPlaybackIntentImplementation, v180);
    v181 = ((uint64_t (*)(char *, uint64_t))v86)(v179, v16);
    v182 = v280;
    NativeIntentDispatcher.init()(v181);
    v183 = sub_10024FDB8();
    NativeIntentDispatcher.registering<A>(_:)(v183, &type metadata for PlayEpisodeIntentImplementation, v183);
    v184 = ((uint64_t (*)(char *, uint64_t))v86)(v182, v16);
    v185 = v271;
    NativeIntentDispatcher.init()(v184);
    v186 = sub_10024FDFC();
    NativeIntentDispatcher.registering<A>(_:)(v186, &type metadata for PlayStationIntentImplementation, v186);
    v86(v185, v16);
    v187 = sub_10024FE40();
    static NativeIntentDispatcher.Builder.buildExpression<A>(_:)(&type metadata for PlayNextChapterIntentImplementation, &type metadata for PlayNextChapterIntentImplementation, v187);
    v188 = sub_10024FE84();
    static NativeIntentDispatcher.Builder.buildExpression<A>(_:)(&type metadata for PlayPreviousChapterIntentImplementation, &type metadata for PlayPreviousChapterIntentImplementation, v188);
    v189 = sub_10003F544((uint64_t *)&unk_100562B00);
    v190 = v272;
    v191 = *((_QWORD *)v272 + 9);
    v192 = v272[80];
    v193 = (v192 + 32) & ~v192;
    v260 = (char *)(4 * v191);
    PodcastForEpisodeIntentImplementation = 5 * v191;
    v267 = v192 | 7;
    v263 = (char *)swift_allocObject(v189, v193 + 5 * v191, v192 | 7);
    v268 = v193;
    v194 = &v263[v193];
    v195 = (void (*)(void))*((_QWORD *)v190 + 2);
    ((void (*)(char *, char *, uint64_t))v195)(&v263[v193], v81, v16);
    v262 = &v194[v191];
    v195();
    v261 = (uint64_t)&v194[2 * v191];
    v195();
    v266 = (char *)(2 * v191);
    v265 = 3 * v191;
    ((void (*)(char *, char *, uint64_t))v195)(&v194[3 * v191], v271, v16);
    v196 = &v194[4 * v191];
    v197 = ((uint64_t (*)(char *, char *, uint64_t))v195)(v196, v270, v16);
    v198 = v226;
    NativeIntentDispatcher.init()(v197);
    NativeIntentDispatcher.register(contentsOf:)(v194);
    NativeIntentDispatcher.register(contentsOf:)(v262);
    NativeIntentDispatcher.register(contentsOf:)(v261);
    v199 = (uint64_t)v260;
    NativeIntentDispatcher.register(contentsOf:)(&v194[3 * v191]);
    NativeIntentDispatcher.register(contentsOf:)(v196);
    v200 = v263;
    swift_setDeallocating(v263);
    swift_arrayDestroy(v194, 5, v16);
    swift_deallocClassInstance(v200, 32, 7);
    v201 = v198;
    v202 = PodcastForEpisodeIntentImplementation;
    (*((void (**)(char *, char *, uint64_t))v272 + 4))(v298, v201, v16);
    v86(v270, v16);
    v86(v271, v16);
    v86(v280, v16);
    v86(v279, v16);
    v86(v81, v16);
  }
  else
  {
    v203 = sub_10024FCA8();
    NativeIntentDispatcher.registering<A>(_:)(v203, &type metadata for LegacyEnqueueMediaItemForPlaybackIntentImplementation, v203);
    v204 = ((uint64_t (*)(char *, uint64_t))v86)(v179, v16);
    v205 = v280;
    NativeIntentDispatcher.init()(v204);
    v206 = sub_10024FCEC();
    NativeIntentDispatcher.registering<A>(_:)(v206, &type metadata for LegacyPlayEpisodeIntentImplementation, v206);
    v207 = ((uint64_t (*)(char *, uint64_t))v86)(v205, v16);
    v208 = v271;
    NativeIntentDispatcher.init()(v207);
    v209 = sub_10024FD30();
    NativeIntentDispatcher.registering<A>(_:)(v209, &type metadata for LegacyPlayStationIntentImplementation, v209);
    v86(v208, v16);
    v210 = sub_10003F544((uint64_t *)&unk_100562B00);
    v191 = *((_QWORD *)v272 + 9);
    v211 = v272[80];
    v212 = v272;
    v213 = (v211 + 32) & ~v211;
    v265 = 3 * v191;
    v267 = v211 | 7;
    v270 = (char *)swift_allocObject(v210, v213 + 3 * v191, v211 | 7);
    v268 = v213;
    v214 = &v270[v213];
    v195 = (void (*)(void))*((_QWORD *)v212 + 2);
    ((void (*)(char *, char *, uint64_t))v195)(v214, v81, v16);
    ((void (*)(char *, char *, uint64_t))v195)(&v214[v191], v279, v16);
    v266 = (char *)(2 * v191);
    v215 = &v214[2 * v191];
    v216 = ((uint64_t (*)(char *, char *, uint64_t))v195)(v215, v280, v16);
    NativeIntentDispatcher.init()(v216);
    NativeIntentDispatcher.register(contentsOf:)(v214);
    NativeIntentDispatcher.register(contentsOf:)(&v214[v191]);
    NativeIntentDispatcher.register(contentsOf:)(v215);
    v217 = v270;
    swift_setDeallocating(v270);
    swift_arrayDestroy(v214, 3, v16);
    swift_deallocClassInstance(v217, 32, 7);
    (*((void (**)(char *, char *, uint64_t))v272 + 4))(v298, v208, v16);
    v86(v280, v16);
    v86(v279, v16);
    v86(v81, v16);
    v199 = 4 * v191;
    v202 = 5 * v191;
  }
  v218 = type metadata accessor for CategoryPageFromYourShowsShelfIntentImplementation(0);
  v219 = sub_100026844((unint64_t *)&unk_10055C680, (uint64_t (*)(uint64_t))&type metadata accessor for CategoryPageFromYourShowsShelfIntentImplementation, (uint64_t)&protocol conformance descriptor for CategoryPageFromYourShowsShelfIntentImplementation);
  static NativeIntentDispatcher.Builder.buildExpression<A>(_:)(v218, v218, v219);
  v220 = sub_10003F544((uint64_t *)&unk_100562B00);
  v221 = v268;
  v280 = (char *)swift_allocObject(v220, v268 + 25 * v191, v267);
  v222 = &v280[v221];
  ((void (*)(char *, char *, uint64_t))v195)(&v280[v221], v273, v16);
  v279 = &v222[v191];
  v195();
  v272 = &v266[(_QWORD)v222];
  v195();
  v271 = &v222[v265];
  v195();
  v270 = &v222[v199];
  v195();
  v268 = (uint64_t)&v222[v202];
  v195();
  v267 = (uint64_t)&v222[6 * v191];
  v195();
  v266 = &v222[7 * v191];
  v195();
  v265 = (uint64_t)&v222[8 * v191];
  v195();
  PodcastForEpisodeIntentImplementation = (uint64_t)&v222[9 * v191];
  v195();
  v263 = &v222[10 * v191];
  v195();
  v262 = &v222[11 * v191];
  v195();
  v261 = (uint64_t)&v222[12 * v191];
  v195();
  v260 = &v222[13 * v191];
  v195();
  v259 = &v222[14 * v191];
  v195();
  v258 = (uint64_t)&v222[15 * v191];
  v195();
  v257 = &v222[16 * v191];
  v195();
  v256 = &v222[17 * v191];
  v195();
  v255 = (uint64_t)&v222[18 * v191];
  v195();
  v254 = &v222[19 * v191];
  v195();
  v253 = &v222[20 * v191];
  v195();
  ShowLatestCatalogEpisodesIntentImplementation = (uint64_t)&v222[21 * v191];
  v195();
  v251 = &v222[22 * v191];
  v195();
  ((void (*)(char *, char *, uint64_t))v195)(&v222[23 * v191], v298, v16);
  v223 = ((uint64_t (*)(char *, char *, uint64_t))v195)(&v222[24 * v191], v81, v16);
  NativeIntentDispatcher.init()(v223);
  NativeIntentDispatcher.register(contentsOf:)(v222);
  NativeIntentDispatcher.register(contentsOf:)(v279);
  NativeIntentDispatcher.register(contentsOf:)(v272);
  NativeIntentDispatcher.register(contentsOf:)(v271);
  NativeIntentDispatcher.register(contentsOf:)(v270);
  NativeIntentDispatcher.register(contentsOf:)(v268);
  NativeIntentDispatcher.register(contentsOf:)(v267);
  NativeIntentDispatcher.register(contentsOf:)(v266);
  NativeIntentDispatcher.register(contentsOf:)(v265);
  NativeIntentDispatcher.register(contentsOf:)(PodcastForEpisodeIntentImplementation);
  NativeIntentDispatcher.register(contentsOf:)(v263);
  NativeIntentDispatcher.register(contentsOf:)(v262);
  NativeIntentDispatcher.register(contentsOf:)(v261);
  NativeIntentDispatcher.register(contentsOf:)(v260);
  NativeIntentDispatcher.register(contentsOf:)(v259);
  NativeIntentDispatcher.register(contentsOf:)(v258);
  NativeIntentDispatcher.register(contentsOf:)(v257);
  NativeIntentDispatcher.register(contentsOf:)(v256);
  NativeIntentDispatcher.register(contentsOf:)(v255);
  NativeIntentDispatcher.register(contentsOf:)(v254);
  NativeIntentDispatcher.register(contentsOf:)(v253);
  NativeIntentDispatcher.register(contentsOf:)(ShowLatestCatalogEpisodesIntentImplementation);
  NativeIntentDispatcher.register(contentsOf:)(v251);
  NativeIntentDispatcher.register(contentsOf:)(&v222[23 * v191]);
  NativeIntentDispatcher.register(contentsOf:)(&v222[24 * v191]);
  v224 = v280;
  swift_setDeallocating(v280);
  swift_arrayDestroy(v222, 25, v16);
  swift_deallocClassInstance(v224, 32, 7);
  v86(v81, v16);
  v86(v298, v16);
  v86(v297, v16);
  v86(v296, v16);
  v86(v295, v16);
  v86(v294, v16);
  v86(v293, v16);
  v86(v292, v16);
  v86(v291, v16);
  v86(v290, v16);
  v86(v289, v16);
  v86(v288, v16);
  v86(v287, v16);
  v86(v286, v16);
  v86(v285, v16);
  v86(v284, v16);
  v86(v283, v16);
  v86(v282, v16);
  v86(v281, v16);
  v86((char *)v278, v16);
  v86((char *)v277, v16);
  v86((char *)v276, v16);
  v86(v275, v16);
  v86(v274, v16);
  return ((uint64_t (*)(char *, uint64_t))v86)(v273, v16);
}

uint64_t sub_10024EFBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t updated;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;

  v129 = a1;
  v1 = sub_10003F544(&qword_10055C500);
  v2 = *(_QWORD *)(v1 - 8);
  v127 = v1;
  v128 = v2;
  __chkstk_darwin(v1);
  v126 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_10055C508);
  v5 = *(_QWORD *)(v4 - 8);
  v124 = v4;
  v125 = v5;
  __chkstk_darwin(v4);
  v123 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055C510);
  v8 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  v122 = v8;
  __chkstk_darwin(v7);
  v119 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for RemoveAbandonedDownloadsActionImplementation(0);
  v117 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v115 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for DismissPurgedEpisodesActionImplementation(0);
  v114 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v112 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for RestorePurgedEpisodesActionImplementation(0);
  v111 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v109 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for AcceptDanglingDownloadsActionImplementation(0);
  v108 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ApplyEpisodeLimitRecommendationActionImplementation(0);
  v104 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544((uint64_t *)&unk_10055C470);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v120 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v136 = (char *)&v103 - v22;
  v23 = __chkstk_darwin(v21);
  v134 = (char *)&v103 - v24;
  v25 = __chkstk_darwin(v23);
  v135 = (char *)&v103 - v26;
  v27 = __chkstk_darwin(v25);
  v137 = (char *)&v103 - v28;
  v29 = __chkstk_darwin(v27);
  v133 = (char *)&v103 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v103 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v103 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v103 - v38;
  ApplyEpisodeLimitRecommendationActionImplementation.init()(v37);
  v40 = type metadata accessor for BaseObjectGraph(0);
  ((void (*)(void))ActionDispatcher.init())();
  v118 = v18;
  v41 = *(void (**)(void))(v18 + 16);
  v132 = v39;
  ((void (*)(char *, char *, uint64_t))v41)(v39, v36, v17);
  v42 = sub_100026844(&qword_10055C518, (uint64_t (*)(uint64_t))&type metadata accessor for ApplyEpisodeLimitRecommendationActionImplementation, (uint64_t)&protocol conformance descriptor for ApplyEpisodeLimitRecommendationActionImplementation);
  ActionDispatcher.add<A>(_:)(v16, v17, v14, v42);
  v43 = *(void (**)(char *, uint64_t))(v18 + 8);
  v44 = v36;
  v43(v36, v17);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v16, v14);
  v46 = v105;
  AcceptDanglingDownloadsActionImplementation.init()(v45);
  ActionDispatcher.init()(v40);
  v130 = v44;
  v47 = v33;
  ((void (*)(char *, char *, uint64_t))v41)(v44, v33, v17);
  v48 = sub_100026844(&qword_10055C520, (uint64_t (*)(uint64_t))&type metadata accessor for AcceptDanglingDownloadsActionImplementation, (uint64_t)&protocol conformance descriptor for AcceptDanglingDownloadsActionImplementation);
  v49 = v46;
  v50 = v46;
  v51 = v107;
  ActionDispatcher.add<A>(_:)(v49, v17, v107, v48);
  v43(v47, v17);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v50, v51);
  v53 = v109;
  RestorePurgedEpisodesActionImplementation.init()(v52);
  v54 = v133;
  ActionDispatcher.init()(v40);
  v131 = v47;
  ((void (*)(char *, char *, uint64_t))v41)(v47, v54, v17);
  v55 = sub_100026844(&qword_10055C528, (uint64_t (*)(uint64_t))&type metadata accessor for RestorePurgedEpisodesActionImplementation, (uint64_t)&protocol conformance descriptor for RestorePurgedEpisodesActionImplementation);
  v56 = v53;
  v57 = v53;
  v58 = v110;
  ActionDispatcher.add<A>(_:)(v56, v17, v110, v55);
  v59 = v54;
  v43(v54, v17);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v57, v58);
  v61 = v112;
  DismissPurgedEpisodesActionImplementation.init()(v60);
  v62 = v137;
  v63 = v40;
  ActionDispatcher.init()(v40);
  ((void (*)(char *, char *, uint64_t))v41)(v59, v62, v17);
  v64 = sub_100026844(&qword_10055C530, (uint64_t (*)(uint64_t))&type metadata accessor for DismissPurgedEpisodesActionImplementation, (uint64_t)&protocol conformance descriptor for DismissPurgedEpisodesActionImplementation);
  v65 = v113;
  ActionDispatcher.add<A>(_:)(v61, v17, v113, v64);
  v66 = v62;
  v43(v62, v17);
  v67 = (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v61, v65);
  v68 = v115;
  RemoveAbandonedDownloadsActionImplementation.init()(v67);
  v69 = v135;
  ActionDispatcher.init()(v40);
  ((void (*)(char *, char *, uint64_t))v41)(v66, v69, v17);
  v70 = sub_100026844(&qword_10055C538, (uint64_t (*)(uint64_t))&type metadata accessor for RemoveAbandonedDownloadsActionImplementation, (uint64_t)&protocol conformance descriptor for RemoveAbandonedDownloadsActionImplementation);
  v71 = v116;
  ActionDispatcher.add<A>(_:)(v68, v17, v116, v70);
  v72 = v69;
  v43(v69, v17);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v68, v71);
  v73 = type metadata accessor for RemoveEpisodesDownloadAction(0);
  v74 = sub_100026844(&qword_10055C540, (uint64_t (*)(uint64_t))&type metadata accessor for RemoveEpisodesDownloadAction, (uint64_t)&protocol conformance descriptor for RemoveEpisodesDownloadAction);
  v75 = v119;
  IntentDelegatingActionImplementation.init()(v73, v74);
  v76 = v134;
  ActionDispatcher.init()(v63);
  v77 = v72;
  v78 = v76;
  ((void (*)(char *, char *, uint64_t))v41)(v77, v76, v17);
  v79 = sub_10002F9C8(&qword_10055C548, &qword_10055C510, (uint64_t)&protocol conformance descriptor for IntentDelegatingActionImplementation<A>);
  v80 = v121;
  ActionDispatcher.add<A>(_:)(v75, v17, v121, v79);
  v43(v78, v17);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v75, v80);
  v81 = type metadata accessor for DownloadEpisodesAction(0);
  v82 = sub_100026844(&qword_10055C550, (uint64_t (*)(uint64_t))&type metadata accessor for DownloadEpisodesAction, (uint64_t)&protocol conformance descriptor for DownloadEpisodesAction);
  v83 = v123;
  IntentDelegatingActionImplementation.init()(v81, v82);
  v84 = v136;
  v103 = v63;
  ActionDispatcher.init()(v63);
  ((void (*)(char *, char *, uint64_t))v41)(v78, v84, v17);
  v85 = sub_10002F9C8(&qword_10055C558, &qword_10055C508, (uint64_t)&protocol conformance descriptor for IntentDelegatingActionImplementation<A>);
  v86 = v124;
  ActionDispatcher.add<A>(_:)(v83, v17, v124, v85);
  v106 = v43;
  v43(v84, v17);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v83, v86);
  updated = type metadata accessor for UpdateEpisodeDownloadBehaviorAction(0);
  v88 = sub_100026844(&qword_10055C560, (uint64_t (*)(uint64_t))&type metadata accessor for UpdateEpisodeDownloadBehaviorAction, (uint64_t)&protocol conformance descriptor for UpdateEpisodeDownloadBehaviorAction);
  v89 = v126;
  IntentDelegatingActionImplementation.init()(updated, v88);
  v90 = v120;
  ActionDispatcher.init()(v63);
  ((void (*)(char *, char *, uint64_t))v41)(v84, v90, v17);
  v91 = sub_10002F9C8(&qword_10055C568, &qword_10055C500, (uint64_t)&protocol conformance descriptor for IntentDelegatingActionImplementation<A>);
  v92 = v89;
  v93 = v89;
  v94 = v127;
  ActionDispatcher.add<A>(_:)(v92, v17, v127, v91);
  v43(v90, v17);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v93, v94);
  v95 = sub_10003F544(&qword_10055C570);
  v96 = *(_QWORD *)(v118 + 72);
  v97 = *(unsigned __int8 *)(v118 + 80);
  v98 = (v97 + 32) & ~v97;
  v128 = swift_allocObject(v95, v98 + 8 * v96, v97 | 7);
  v99 = v128 + v98;
  ((void (*)(uint64_t, char *, uint64_t))v41)(v128 + v98, v132, v17);
  v127 = v99 + v96;
  v41();
  ((void (*)(uint64_t, char *, uint64_t))v41)(v99 + 2 * v96, v131, v17);
  ((void (*)(uint64_t, char *, uint64_t))v41)(v99 + 3 * v96, v133, v17);
  ((void (*)(uint64_t, char *, uint64_t))v41)(v99 + 4 * v96, v137, v17);
  ((void (*)(uint64_t, char *, uint64_t))v41)(v99 + 5 * v96, v135, v17);
  ((void (*)(uint64_t, char *, uint64_t))v41)(v99 + 6 * v96, v134, v17);
  ((void (*)(uint64_t, char *, uint64_t))v41)(v99 + 7 * v96, v136, v17);
  ActionDispatcher.init()(v103);
  ActionDispatcher.add(contentsOf:)(v99, v17);
  ActionDispatcher.add(contentsOf:)(v127, v17);
  ActionDispatcher.add(contentsOf:)(v99 + 2 * v96, v17);
  ActionDispatcher.add(contentsOf:)(v99 + 3 * v96, v17);
  ActionDispatcher.add(contentsOf:)(v99 + 4 * v96, v17);
  ActionDispatcher.add(contentsOf:)(v99 + 5 * v96, v17);
  ActionDispatcher.add(contentsOf:)(v99 + 6 * v96, v17);
  ActionDispatcher.add(contentsOf:)(v99 + 7 * v96, v17);
  v100 = v128;
  swift_setDeallocating(v128);
  swift_arrayDestroy(v99, 8, v17);
  swift_deallocClassInstance(v100, 32, 7);
  v101 = v106;
  v106(v136, v17);
  v101(v134, v17);
  v101(v135, v17);
  v101(v137, v17);
  v101(v133, v17);
  v101(v131, v17);
  v101(v130, v17);
  return ((uint64_t (*)(char *, uint64_t))v101)(v132, v17);
}

unint64_t sub_10024FA70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100553BB0;
  if (!qword_100553BB0)
  {
    v1 = sub_100005EC8(255, &qword_100554590, &off_1004A4480);
    result = swift_getWitnessTable(&protocol conformance descriptor for MTNotificationManager, v1);
    atomic_store(result, (unint64_t *)&qword_100553BB0);
  }
  return result;
}

unint64_t sub_10024FAC8()
{
  unint64_t result;

  result = qword_10055C4F8;
  if (!qword_10055C4F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UIAppSettingsBridge, &type metadata for UIAppSettingsBridge);
    atomic_store(result, (unint64_t *)&qword_10055C4F8);
  }
  return result;
}

uint64_t sub_10024FB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544((uint64_t *)&unk_10055C580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10024FB54()
{
  unint64_t result;

  result = qword_10055C5A8;
  if (!qword_10055C5A8)
  {
    result = swift_getWitnessTable(&unk_1003D69D8, &type metadata for FetchShowEntitiesIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C5A8);
  }
  return result;
}

unint64_t sub_10024FB98()
{
  unint64_t result;

  result = qword_10055C600;
  if (!qword_10055C600)
  {
    result = swift_getWitnessTable(&unk_1003D4CFC, &type metadata for UpdateEpisodePlayStateIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C600);
  }
  return result;
}

unint64_t sub_10024FBDC()
{
  unint64_t result;

  result = qword_100562AD0;
  if (!qword_100562AD0)
  {
    result = swift_getWitnessTable(&unk_1003D04D4, &type metadata for FetchShowLatestLocalEpisodesIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100562AD0);
  }
  return result;
}

unint64_t sub_10024FC20()
{
  unint64_t result;

  result = qword_10055C610;
  if (!qword_10055C610)
  {
    result = swift_getWitnessTable(&unk_1003D652C, &type metadata for FetchShowLatestEpisodesIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C610);
  }
  return result;
}

unint64_t sub_10024FC64()
{
  unint64_t result;

  result = qword_100562AE0;
  if (!qword_100562AE0)
  {
    result = swift_getWitnessTable(&unk_1003CCAB4, &type metadata for UnfollowShowIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100562AE0);
  }
  return result;
}

unint64_t sub_10024FCA8()
{
  unint64_t result;

  result = qword_10055C660;
  if (!qword_10055C660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LegacyEnqueueMediaItemForPlaybackIntentImplementation, &type metadata for LegacyEnqueueMediaItemForPlaybackIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C660);
  }
  return result;
}

unint64_t sub_10024FCEC()
{
  unint64_t result;

  result = qword_100562AF0;
  if (!qword_100562AF0)
  {
    result = swift_getWitnessTable(&unk_1003D1948, &type metadata for LegacyPlayEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100562AF0);
  }
  return result;
}

unint64_t sub_10024FD30()
{
  unint64_t result;

  result = qword_10055C670;
  if (!qword_10055C670)
  {
    result = swift_getWitnessTable(&unk_1003D2908, &type metadata for LegacyPlayStationIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C670);
  }
  return result;
}

unint64_t sub_10024FD74()
{
  unint64_t result;

  result = qword_100562B10;
  if (!qword_100562B10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EnqueueMediaItemForPlaybackIntentImplementation, &type metadata for EnqueueMediaItemForPlaybackIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100562B10);
  }
  return result;
}

unint64_t sub_10024FDB8()
{
  unint64_t result;

  result = qword_10055C690;
  if (!qword_10055C690)
  {
    result = swift_getWitnessTable(&unk_1003D0400, &type metadata for PlayEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C690);
  }
  return result;
}

unint64_t sub_10024FDFC()
{
  unint64_t result;

  result = qword_100562B20;
  if (!qword_100562B20)
  {
    result = swift_getWitnessTable(&unk_1003D3A80, &type metadata for PlayStationIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_100562B20);
  }
  return result;
}

unint64_t sub_10024FE40()
{
  unint64_t result;

  result = qword_10055C6A0;
  if (!qword_10055C6A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayNextChapterIntentImplementation, &type metadata for PlayNextChapterIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C6A0);
  }
  return result;
}

unint64_t sub_10024FE84()
{
  unint64_t result;

  result = qword_10055C6A8;
  if (!qword_10055C6A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayPreviousChapterIntentImplementation, &type metadata for PlayPreviousChapterIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_10055C6A8);
  }
  return result;
}

uint64_t sub_10024FEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(__n128);
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[3];

  v1 = v0;
  v2 = type metadata accessor for InteractionContext(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v54 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BookmarksControllerEpisodeData(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v45 - v10;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v1 + 16);
  if (v17)
  {
    v51 = result;
    v52 = v3;
    v53 = v6;
    swift_retain();
    static Logger.podcastsStatesCoordination.getter(v18);
    v19 = swift_retain_n(v17, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = v21;
    v23 = os_log_type_enabled(v20, v21);
    v50 = v2;
    if (v23)
    {
      v24 = swift_slowAlloc(22, -1);
      v48 = swift_slowAlloc(64, -1);
      v56[0] = v48;
      *(_DWORD *)v24 = 136315394;
      v49 = v5;
      v47 = v22;
      sub_100367770();
      v25 = String.init<A>(describing:)(v11, v49);
      v27 = v26;
      v55 = sub_10003D274(v25, v26, v56);
      v46 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v24 + 4, v24 + 12);
      swift_release_n(v17, 2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 12) = 2080;
      v45 = v24 + 14;
      v28 = objc_msgSend((id)objc_opt_self(NSThread), "callStackSymbols");
      v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for String);

      v30 = Array.description.getter(v29, &type metadata for String);
      v32 = v31;
      swift_bridgeObjectRelease(v29);
      v55 = sub_10003D274(v30, v32, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v46, v45, v24 + 22);
      v33 = v32;
      v5 = v49;
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v47, "RemoveEpisodeFromBookmarksContextAction.handler() - Unbookmarking episode %s %s", (uint8_t *)v24, 0x16u);
      v34 = v48;
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_release_n(v17, 2);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v51);
    v36 = v52;
    v35 = v53;
    sub_100367770();
    v37 = swift_beginAccess(v1 + 24, v56, 0, 0);
    v38 = *(_QWORD *)(v1 + 24);
    if (v38)
    {
      v39 = *(void (**)(__n128))(*(_QWORD *)v38 + 168);
      v40 = swift_retain();
      v41 = v54;
      v39(v40);
      v42 = swift_release(v38);
      v43 = InteractionContext.view.getter(v42);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v50);
      if ((v43 - 5) > 2u)
        v44 = InteractionContext.EpisodeCellType.showsEpisodeControls.getter(v43) ^ 1;
      else
        LOBYTE(v44) = (((_BYTE)v43 - 5) & 1) == 0;
    }
    else
    {
      LOBYTE(v44) = 1;
    }
    BookmarksController.removeEpisodesFromBookmarks(with:showHUDConfirmation:)(v9, v44 & 1, v37);
    swift_release(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1002502A8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_bookmarksController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100250328()
{
  return type metadata accessor for RemoveEpisodeFromBookmarksContextAction(0);
}

uint64_t type metadata accessor for RemoveEpisodeFromBookmarksContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055C700;
  if (!qword_10055C700)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoveEpisodeFromBookmarksContextAction);
  return result;
}

uint64_t sub_10025036C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003D0350;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = &unk_1003D0368;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_1003D0380;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100250420()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_100250428@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10025046C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_contextActionType);
}

uint64_t sub_10025047C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v1 = type metadata accessor for BookmarksControllerEpisodeData(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  if (v5)
  {
    swift_retain();
    sub_100367770();
    v6 = BookmarksController.containsBookmarkedEpisodes(in:)(v4);
    swift_release(v5);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

double sub_100250540@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_10025057C((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

double sub_10025057C@<D0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  double result;
  Swift::String v8;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemOrangeColor");
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8._object = (void *)0xE600000000000000;
  v4._object = (void *)0x80000001004378C0;
  v4._countAndFlagsBits = 0xD00000000000001ALL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x657661736E55;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v8);

  *(_QWORD *)a1 = v2;
  result = 3.77673152e209;
  *(_OWORD *)(a1 + 8) = xmmword_1003D02C0;
  *(Swift::String *)(a1 + 24) = v6;
  return result;
}

ValueMetadata *type metadata accessor for PlayEpisodeIntentImplementation()
{
  return &type metadata for PlayEpisodeIntentImplementation;
}

unint64_t sub_100250670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055E1E0;
  if (!qword_10055E1E0)
  {
    v1 = type metadata accessor for PlayEpisodeIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayEpisodeIntent, v1);
    atomic_store(result, (unint64_t *)&qword_10055E1E0);
  }
  return result;
}

uint64_t sub_1002506B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10055C878 + dword_10055C878);
  v6 = (_QWORD *)swift_task_alloc(unk_10055C87C);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1001B8890;
  return v8(a2, a3);
}

uint64_t sub_100250728(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1[3] = a1;
  v2 = sub_10003F544(&qword_10055B788);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10003F544(&qword_10055B790);
  v1[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MediaIdentifier(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EpisodeEntity(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v8);
  v1[12] = swift_task_alloc(v8);
  v9 = type metadata accessor for PlaybackIntent(0);
  v1[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[14] = v10;
  v1[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlaybackController(0);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[16] = v12;
  *v12 = v1;
  v12[1] = sub_100250870;
  return BaseObjectGraph.inject<A>(_:)(v1 + 2, v11, v11);
}

uint64_t sub_100250870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100250BA4;
  else
    v3 = sub_1002508D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002508D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = v0[12];
  v2 = v0[9];
  v3 = v0[10];
  v0[18] = v0[2];
  v4 = PlayEpisodeIntent.episode.getter();
  v5 = EpisodeEntity.uuid.getter(v4);
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v8(v1, v2);
  if (v7)
  {
    v9 = sub_10003F544((uint64_t *)&unk_1005588B0);
    v10 = swift_allocObject(v9, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v10 + 32) = v5;
    *(_QWORD *)(v10 + 40) = v7;
    v11 = (unsigned int *)&enum case for MediaIdentifier.localEpisodes(_:);
  }
  else
  {
    v12 = v0[11];
    v13 = v0[9];
    v14 = sub_10003F544(&qword_1005548E0);
    v10 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1003CA200;
    v15 = PlayEpisodeIntent.episode.getter();
    v16 = EpisodeEntity.adamID.getter(v15);
    v8(v12, v13);
    *(_QWORD *)(v10 + 32) = v16;
    v11 = (unsigned int *)&enum case for MediaIdentifier.episodes(_:);
  }
  v17 = v0[7];
  v18 = (uint64_t *)v0[8];
  v20 = v0[5];
  v19 = v0[6];
  v21 = v0[4];
  *v18 = v10;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v17 + 104))(v18, *v11, v19);
  v22 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
  v23 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
  v25 = static Set<>.default.getter(v24);
  PlaybackIntent.init(id:listSettings:initialItem:options:)(v18, v20, v21, v25);
  v26 = (_QWORD *)swift_task_alloc(async function pointer to PlaybackController.performIntent(_:)[1]);
  v0[19] = v26;
  *v26 = v0;
  v26[1] = sub_100250A94;
  return PlaybackController.performIntent(_:)(v0[15]);
}

uint64_t sub_100250A94(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  *(_QWORD *)(*(_QWORD *)v2 + 160) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100250C1C;
  }
  else
  {

    v5 = sub_100250B00;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100250B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100250BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100250C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100250CB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(void))
{
  int64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_100048628(0, v4, 0);
    v7 = *(_QWORD *)(a3(0) - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    do
    {
      v10 = a4();
      v12 = v11;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        sub_100048628(v13 > 1, v14 + 1, 1);
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v8 += v9;
      --v4;
    }
    while (v4);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t UberArtworkResetMigrator.failSilently.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t UberArtworkResetMigrator.failSilently.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*UberArtworkResetMigrator.failSilently.modify())()
{
  return UInt64.int64Representation.getter;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UberArtworkResetMigrator.performMigrationStep()()
{
  sub_10025173C();
}

void sub_100250DEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  id v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v41 = a1;
  v1 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v1);
  v3 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_100554930);
  __chkstk_darwin(v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ArtworkRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v43 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)v39 - v11;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v14 = v13;
  v15 = objc_allocWithZone((Class)NSFetchRequest);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithEntityName:", v16, swift_bridgeObjectRelease(v14).n128_f64[0]);

  v18 = sub_1001F5D3C();
  v19 = v46;
  v20 = NSManagedObjectContext.fetch<A>(_:)(v17, v18);
  if (v19)
  {

    return;
  }
  v40 = v17;
  v42 = v12;
  v46 = v20;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v38 = v20;
    else
      v38 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v21 = _CocoaArrayWrapper.endIndex.getter(v38);
  }
  else
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v20);
  }
  v22 = v41;
  v23 = v43;
  if (!v21)
  {

    v36 = v46;
    swift_bridgeObjectRelease(v46);
    v25 = _swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease(v36);
    v37 = *v22;
    *v22 = (uint64_t)v25;
    swift_bridgeObjectRelease(v37);
    return;
  }
  if (v21 >= 1)
  {
    v39[1] = 0;
    v24 = 0;
    v44 = v46 & 0xC000000000000001;
    v25 = _swiftEmptyArrayStorage;
    v45 = v21;
    do
    {
      if (v44)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v46);
      else
        v26 = *(id *)(v46 + 8 * v24 + 32);
      v27 = v26;
      MTPodcast.uberBackgroundArtworkModel.getter(v26);
      v28 = type metadata accessor for ArtworkModel(0);
      v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v3, 1, v28);
      if ((_DWORD)v29 == 1)
      {
        sub_100007A28((uint64_t)v3, &qword_10055D840);
        v30 = 1;
      }
      else
      {
        ArtworkModel.preferredRequest.getter(v29);
        sub_1001D2CD0((uint64_t)v3);
        v30 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v30, 1, v7);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100007A28((uint64_t)v6, &qword_100554930);
      }
      else
      {
        v31 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v32 = v42;
        v31(v42, v6, v7);
        v31(v23, v32, v7);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
          v25 = (_QWORD *)sub_10027BC08(0, v25[2] + 1, 1, (unint64_t)v25);
        v34 = v25[2];
        v33 = v25[3];
        if (v34 >= v33 >> 1)
          v25 = (_QWORD *)sub_10027BC08(v33 > 1, v34 + 1, 1, (unint64_t)v25);
        v25[2] = v34 + 1;
        v35 = (unint64_t)v25
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v34;
        v23 = v43;
        v31((char *)v35, v43, v7);
      }
      ++v24;
    }
    while (v45 != v24);

    v36 = v46;
    swift_bridgeObjectRelease(v46);
    v22 = v41;
    goto LABEL_24;
  }
  __break(1u);
}

id sub_1002511EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  NSString v5;
  unsigned int v6;
  id v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v5 = String._bridgeToObjectiveC()();
  v27 = 0;
  v6 = objc_msgSend(v4, "removeItemAtPath:error:", v5, &v27);

  v7 = v27;
  if (v6)
    return v27;
  v9 = v27;
  v10 = _convertNSErrorToError(_:)(v7);

  v12 = swift_willThrow(v11);
  static Logger.artwork.getter(v12);
  swift_errorRetain(v10);
  v13 = swift_errorRetain(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (void *)swift_slowAlloc(32, -1);
    v25 = v0;
    v26 = v10;
    v18 = v17;
    v27 = v17;
    *(_DWORD *)v16 = 136315138;
    v24 = v16 + 4;
    swift_errorRetain(v10);
    v19 = sub_10003F544((uint64_t *)&unk_10055A340);
    v20 = String.init<A>(describing:)(&v26, v19);
    v22 = v21;
    v26 = sub_10003D274(v20, v21, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v24, v16 + 12);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to remove uber artwork: %s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v10);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v25);
  }
  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

    return (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_1002514C8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1002514D0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_1002514DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[9];
  _QWORD *v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v3 = a2;
  v4 = 0;
  v34 = a1 + 32;
  v37 = a2 + 56;
  v33 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)(a1 + 16);
  do
  {
    if (v4 <= v2)
      v5 = v2;
    else
      v5 = v4;
    v36 = v5;
    while (1)
    {
      if (v4 == v36)
      {
        __break(1u);
        return;
      }
      v6 = (uint64_t *)(v34 + 16 * v4);
      v7 = *v6;
      v8 = v6[1];
      ++v4;
      v9 = swift_bridgeObjectRetain(v8);
      v10 = static ArtworkRequest.comparablePrefix(from:)(v7, v8, v9);
      v12 = v11;
      v13 = v3;
      if (*(_QWORD *)(v3 + 16))
      {
        v14 = v10;
        Hasher.init(_seed:)(v38, *(_QWORD *)(v3 + 40));
        String.hash(into:)(v38, v14, v12);
        v15 = Hasher._finalize()();
        v16 = -1 << *(_BYTE *)(v3 + 32);
        v17 = v15 & ~v16;
        if (((*(_QWORD *)(v37 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
          break;
      }
LABEL_7:
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v12);
      v3 = v13;
      if (v4 == v35)
        return;
    }
    v18 = *(_QWORD *)(v3 + 48);
    v19 = (_QWORD *)(v18 + 16 * v17);
    v20 = v19[1];
    v21 = *v19 == v14 && v20 == v12;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v14, v12, 0) & 1) == 0)
    {
      v22 = ~v16;
      for (i = v17 + 1; ; i = v24 + 1)
      {
        v24 = i & v22;
        if (((*(_QWORD *)(v37 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0)
          break;
        v25 = (_QWORD *)(v18 + 16 * v24);
        v26 = v25[1];
        v27 = *v25 == v14 && v26 == v12;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v14, v12, 0) & 1) != 0)
          goto LABEL_24;
      }
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease(v12);
    v28 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
    v39 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100048628(0, v33[2] + 1, 1);
      v28 = v39;
    }
    v31 = v28[2];
    v30 = v28[3];
    if (v31 >= v30 >> 1)
    {
      sub_100048628(v30 > 1, v31 + 1, 1);
      v28 = v39;
    }
    v28[2] = v31 + 1;
    v33 = v28;
    v32 = &v28[2 * v31];
    v32[4] = v7;
    v32[5] = v8;
    v2 = v35;
    v3 = v13;
  }
  while (v4 != v35);
}

double sub_10025173C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  double result;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  double v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  int64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  id v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, __n128);
  _QWORD *v66;
  uint64_t v67;
  void **v68;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  id v80[2];
  char v81[8];
  char v82[8];
  _QWORD *v83;

  v0 = type metadata accessor for Logger(0);
  v73 = *(_QWORD *)(v0 - 8);
  v74 = v0;
  __chkstk_darwin(v0);
  v72 = (char *)&v70 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10003F544(&qword_100558EE8);
  v75 = *(char **)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10003F544(&qword_100558EF0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AssetCaches(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for URL(0);
  v79 = *(_QWORD *)(v77 - 8);
  v13 = __chkstk_darwin(v77);
  v71 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v78 = (char *)&v70 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v70 - v18;
  v20 = static AssetCaches.shared.getter(v17);
  AssetCaches.artwork.getter(v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  CacheDomain.disk.getter(v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  CacheDomain.DiskCaches.directory.getter(v2);
  (*((void (**)(char *, uint64_t))v75 + 1))(v4, v2);
  v21 = (void *)objc_opt_self(NSFileManager);
  v22 = objc_msgSend(v21, "defaultManager");
  v23._countAndFlagsBits = URL.path.getter(v22);
  object = v23._object;
  LOBYTE(v12) = NSFileManager.fileExists(at:isDirectory:)(v23, 1);

  swift_bridgeObjectRelease(object);
  if ((v12 & 1) != 0)
  {
    v26 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    v27 = objc_msgSend(v26, "privateQueueContext");

    v28 = _swiftEmptyArrayStorage;
    v83 = _swiftEmptyArrayStorage;
    __chkstk_darwin(v29);
    *(&v70 - 2) = (uint64_t)&v83;
    *(&v70 - 1) = (uint64_t)v27;
    v30 = v76;
    NSManagedObjectContext.performAndWait<A>(_:)(sub_100251ECC);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v79 + 8))(v19, v77);

    }
    else
    {
      v37 = v83;
      swift_bridgeObjectRetain(v83);
      v39 = sub_100250CB4(v38, (uint64_t)v82, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkRequest, (uint64_t (*)(void))&ArtworkRequest.stableFilePrefix.getter);
      v76 = 0;
      swift_bridgeObjectRelease(v37);
      v40 = sub_10002B070((uint64_t)v39);
      v41 = objc_msgSend(v21, "defaultManager", swift_bridgeObjectRelease(v39).n128_f64[0]);
      URL.path.getter(v41);
      v43 = v42;
      v44 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v45 = swift_bridgeObjectRelease(v43).n128_u64[0];
      v80[0] = 0;
      v46 = objc_msgSend(v41, "subpathsOfDirectoryAtPath:error:", v44, v80, v45);

      v47 = v80[0];
      v48 = v77;
      if (v46)
      {
        v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, &type metadata for String);
        v50 = v47;

        v51 = v76;
        sub_1002514DC(v49, v40);
        v53 = v52;
        swift_bridgeObjectRelease(v49);
        v54 = swift_bridgeObjectRelease(v40);
        (*(void (**)(char *, char *, uint64_t, __n128))(v79 + 16))(v78, v19, v48, v54);
        v55 = *(_QWORD *)(v53 + 16);
        if (v55)
        {
          v75 = v51;
          v76 = v19;
          v80[0] = _swiftEmptyArrayStorage;
          sub_10017B340(0, v55, 0);
          v28 = v80[0];
          v74 = v53;
          v56 = (_QWORD *)(v53 + 40);
          v57 = v71;
          do
          {
            v59 = *(v56 - 1);
            v58 = *v56;
            swift_bridgeObjectRetain(*v56);
            URL.appendingPathComponent(_:)(v59, v58);
            swift_bridgeObjectRelease(v58);
            v80[0] = v28;
            v61 = v28[2];
            v60 = v28[3];
            if (v61 >= v60 >> 1)
            {
              sub_10017B340(v60 > 1, v61 + 1, 1);
              v28 = v80[0];
            }
            v56 += 2;
            v28[2] = v61 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))((unint64_t)v28+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v61, v57, v48);
            --v55;
          }
          while (v55);
          v62 = swift_bridgeObjectRelease(v74);
          v19 = v76;
        }
        else
        {
          v62 = swift_bridgeObjectRelease(v53);
        }
        v65 = *(void (**)(char *, uint64_t, __n128))(v79 + 8);
        v65(v78, v48, v62);
        v66 = sub_100250CB4((uint64_t)v28, (uint64_t)v81, (uint64_t (*)(_QWORD))&type metadata accessor for URL, (uint64_t (*)(void))&URL.path.getter);
        swift_bridgeObjectRelease(v28);
        v67 = v66[2];
        if (v67)
        {
          swift_bridgeObjectRetain(v66);
          v68 = (void **)(v66 + 5);
          do
          {
            v69 = *v68;
            v80[0] = *(v68 - 1);
            v80[1] = v69;
            sub_1002511EC();
            v68 += 2;
            --v67;
          }
          while (v67);

          swift_bridgeObjectRelease_n(v66, 2);
        }
        else
        {
          swift_bridgeObjectRelease(v66);

        }
        ((void (*)(char *, uint64_t))v65)(v19, v48);
      }
      else
      {
        v63 = v80[0];
        swift_bridgeObjectRelease(v40);
        _convertNSErrorToError(_:)(v47);

        swift_willThrow(v64);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v19, v48);
      }
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v83).n128_u64[0];
  }
  else
  {
    v31 = v72;
    v32 = static Logger.artwork.getter(v25);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Uber migration unnecessary, artwork cache never created", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v31, v74);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v19, v77);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UberArtworkResetMigrator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UberArtworkResetMigrator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UberArtworkResetMigrator()
{
  return &type metadata for UberArtworkResetMigrator;
}

void sub_100251ECC()
{
  uint64_t v0;

  sub_100250DEC(*(uint64_t **)(v0 + 16));
}

ValueMetadata *type metadata accessor for FetchShowLatestLocalEpisodesIntentImplementation()
{
  return &type metadata for FetchShowLatestLocalEpisodesIntentImplementation;
}

unint64_t sub_100251EF8()
{
  unint64_t result;
  uint64_t ShowLatestLocalEpisodesIntent;

  result = qword_10055C8A0;
  if (!qword_10055C8A0)
  {
    ShowLatestLocalEpisodesIntent = type metadata accessor for FetchShowLatestLocalEpisodesIntent(255);
    result = swift_getWitnessTable(&unk_1003CEFA0, ShowLatestLocalEpisodesIntent);
    atomic_store(result, (unint64_t *)&qword_10055C8A0);
  }
  return result;
}

void sub_100251F40(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t j;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v5 = type metadata accessor for EpisodeEntity(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  v12 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v13 = NSManagedObjectContext.fetch<A>(_:)(a1, v12);
  if (v2)
    return;
  v14 = v13;
  if (!((unint64_t)v13 >> 62))
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease(v14);
    *a2 = _swiftEmptyArrayStorage;
    return;
  }
  if (v13 < 0)
    v24 = v13;
  else
    v24 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v15 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v14);
  if (!v15)
    goto LABEL_20;
LABEL_4:
  v27 = _swiftEmptyArrayStorage;
  sub_10017B36C(0, v15 & ~(v15 >> 63), 0);
  if (v15 < 0)
  {
    __break(1u);
  }
  else
  {
    v25 = 0;
    v26 = a2;
    v16 = v27;
    if ((v14 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v15; ++i)
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
        EpisodeEntity.init(model:)(v18);
        v27 = v16;
        v20 = v16[2];
        v19 = v16[3];
        if (v20 >= v19 >> 1)
        {
          sub_10017B36C(v19 > 1, v20 + 1, 1);
          v16 = v27;
        }
        v16[2] = v20 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v20, v11, v5);
      }
    }
    else
    {
      for (j = 0; j != v15; ++j)
      {
        EpisodeEntity.init(model:)(*(id *)(v14 + 8 * j + 32));
        v27 = v16;
        v23 = v16[2];
        v22 = v16[3];
        if (v23 >= v22 >> 1)
        {
          sub_10017B36C(v22 > 1, v23 + 1, 1);
          v16 = v27;
        }
        v16[2] = v23 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v23, v9, v5);
      }
    }
    swift_bridgeObjectRelease(v14);
    *v26 = v16;
  }
}

uint64_t sub_1002521D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10055C8B0 + dword_10055C8B0);
  v6 = (_QWORD *)swift_task_alloc(unk_10055C8B4);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_100252240;
  return v8(a2, a3);
}

uint64_t sub_100252240(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10025229C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1[4] = a1;
  v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003F544(&qword_10055E200);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[11] = v7;
  *v7 = v1;
  v7[1] = sub_100252368;
  return BaseObjectGraph.inject<A>(_:)(v1 + 2, v6, v6);
}

uint64_t sub_100252368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023BA80;
  else
    v3 = sub_1002523CC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002523CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;

  v3 = v2[2];
  v2[13] = v3;
  ObjectType = swift_getObjectType(v3, a2);
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  v5 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v2[14] = v5;
  *v5 = v2;
  v5[1] = sub_10025244C;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v2[10], ObjectType);
}

uint64_t sub_10025244C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch(sub_1002524C8, 0, 0);
}

uint64_t sub_1002524C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  Class isa;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;

  v1 = v0[4];
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v3 = v2;
  v4 = objc_allocWithZone((Class)NSFetchRequest);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithEntityName:", v5, swift_bridgeObjectRelease(v3).n128_f64[0]);
  v0[16] = v6;

  objc_msgSend(v6, "setFetchLimit:", *(_QWORD *)(v1 + *(int *)(type metadata accessor for FetchShowLatestLocalEpisodesIntent(0) + 20)));
  isa = (Class)objc_msgSend((id)objc_opt_self(MTEpisode), "sortDescriptorsForFirstAvailableAscending:", 0);
  if (!isa)
  {
    v9 = sub_100005EC8(0, (unint64_t *)&qword_1005547A0, NSSortDescriptor_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v9);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v8 = swift_bridgeObjectRelease(v10).n128_u64[0];
  }
  v11 = (void *)v0[15];
  v12 = v0[6];
  v28 = v0[7];
  v13 = v0[5];
  objc_msgSend(v6, "setSortDescriptors:", isa, v8);

  v14 = sub_100005EC8(0, (unint64_t *)&qword_10055FDB0, MTEpisode_ptr);
  v15 = (void *)ShowEntity.preferredIdentifier()(v14);
  v17 = v16;
  v19 = v18;
  v20 = (void *)static MTEpisode.predicateForAllEpisodes(forPodcast:)();
  sub_1001A831C(v15, v17, v19);
  objc_msgSend(v6, "setPredicate:", v20);

  v21 = swift_allocObject(&unk_1004B8778, 32, 7);
  v0[17] = v21;
  *(_QWORD *)(v21 + 16) = v11;
  *(_QWORD *)(v21 + 24) = v6;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v28, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v13);
  v22 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v23 = v11;
  v24 = v6;
  v25 = (_QWORD *)swift_task_alloc(v22);
  v0[18] = v25;
  v26 = sub_10003F544((uint64_t *)&unk_10055C8C0);
  *v25 = v0;
  v25[1] = sub_10025271C;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 3, v0[7], sub_1002528A0, v21, v26);
}

uint64_t sub_10025271C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_10025281C;
  else
    v7 = sub_1002527B0;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002527B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);

  swift_unknownObjectRelease(v2);
  v5 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_10025281C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);

  swift_unknownObjectRelease(v2);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100252874()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002528A0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100251F40(*(_QWORD *)(v1 + 24), a1);
}

id sub_100252968()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformContentController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002529F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100252A18(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD aBlock[5];
  uint64_t v49;

  v40 = a4;
  v37 = *v4;
  v38 = a3;
  v43 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  __chkstk_darwin(v8);
  v39 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v4[5];
  v14 = swift_allocObject(&unk_1004B87F8, 24, 7);
  swift_weakInit(v14 + 16, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1004B8870, v19 + 8, v15 | 7);
  *(_QWORD *)(v20 + 16) = v14;
  *(_QWORD *)(v20 + 24) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20 + v16, v13, v10);
  v21 = v37;
  v22 = v38;
  *(_QWORD *)(v20 + v17) = v38;
  v23 = v40;
  *(_QWORD *)(v20 + v18) = v40;
  *(_QWORD *)(v20 + v19) = v21;
  aBlock[4] = sub_100256648;
  v49 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B8888;
  v24 = _Block_copy(aBlock);
  swift_retain();
  v25 = a1;
  v26 = v22;
  v27 = v23;
  v28 = v39;
  static DispatchQoS.unspecified.getter(v27);
  v47 = _swiftEmptyArrayStorage;
  v29 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10003F544((uint64_t *)&unk_10055B200);
  v31 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  v33 = v42;
  v32 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v30, v31, v43, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v33, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v45);
  v34 = v49;
  swift_release(v14);
  return swift_release(v34);
}

uint64_t sub_100252CFC(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v5 = v4;
  v10 = *v5;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[1] = v5[5];
  v17 = swift_allocObject(&unk_1004B87F8, 24, 7);
  swift_weakInit(v17 + 16, v5);
  v18 = (_QWORD *)swift_allocObject(&unk_1004B8820, 64, 7);
  v18[2] = v17;
  v18[3] = a1;
  v18[4] = a3;
  v18[5] = a4;
  v18[6] = a2;
  v18[7] = v10;
  aBlock[4] = sub_10025644C;
  v35 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100027AF8;
  aBlock[3] = &unk_1004B8838;
  v19 = _Block_copy(aBlock);
  swift_retain();
  v20 = a1;
  v21 = a3;
  v22 = a4;
  v23 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100026844((unint64_t *)&qword_100556BB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10003F544((uint64_t *)&unk_10055B200);
  v26 = sub_10003AEC0((unint64_t *)&qword_100556BC0, (uint64_t *)&unk_10055B200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v11, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v31);
  v27 = v35;
  swift_release(v17);
  return swift_release(v27);
}

uint64_t sub_100252F44(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  void (*v25)(char *, uint64_t, uint64_t);
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  Swift::String v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  id v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  char *v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  os_log_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  id v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  char v82[32];

  v70 = a5;
  v71 = a4;
  v79 = a3;
  v7 = sub_10003F544(&qword_10055AAE8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v75 = (char *)&v62 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v62 - v13;
  v15 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  v74 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v78 = (uint64_t *)((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Logger(0);
  v73 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v82, 0, 0);
  result = swift_weakLoadStrong(a1);
  v76 = result;
  if (result)
  {
    v68 = v21;
    static Logger.downloads.getter(result);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v25(v20, v79, v17);
    v26 = a2;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter(v27);
    v67 = v28;
    v29 = os_log_type_enabled(v27, v28);
    v72 = v17;
    v77 = v26;
    v69 = (void (*)(uint64_t, uint64_t, uint64_t))v25;
    if (v29)
    {
      v30 = swift_slowAlloc(52, -1);
      v65 = swift_slowAlloc(96, -1);
      v81[0] = v65;
      *(_DWORD *)v30 = 136316163;
      v64 = v27;
      v80 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v81);
      v66 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2160;
      v80 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v30 + 14, v30 + 22);
      *(_WORD *)(v30 + 22) = 2081;
      v62 = v30 + 24;
      v31 = objc_msgSend(v26, "description");
      v32 = v14;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v63 = v18;
      v35 = v34;

      v36 = v33;
      v14 = v32;
      v80 = sub_10003D274(v36, v35, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v62, v30 + 32);

      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v30 + 32) = 2160;
      v80 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v30 + 34, v30 + 42);
      *(_WORD *)(v30 + 42) = 2081;
      v37 = URL.path(percentEncoded:)(1);
      v80 = sub_10003D274(v37._countAndFlagsBits, (unint64_t)v37._object, v81);
      v10 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v30 + 44, v30 + 52);
      v38 = swift_bridgeObjectRelease(v37._object);
      v39 = v63;
      (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v20, v72, v38);
      v27 = v64;
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v67, "%s didFinishDownloading %{private,mask.hash}s to %{private,mask.hash}s.", (uint8_t *)v30, 0x34u);
      v40 = v65;
      swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {

      v39 = v18;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v23, v68);
    v41 = (uint64_t)v75;
    v42 = v76;
    v43 = v74;
    v44 = swift_beginAccess(v76 + 32, v81, 32, 0);
    v45 = *(_QWORD *)(v42 + 32);
    if (*(_QWORD *)(v45 + 16))
    {
      v46 = sub_1001CD240((uint64_t)v77);
      if ((v47 & 1) != 0)
      {
        sub_1002564BC(*(_QWORD *)(v45 + 56) + *(_QWORD *)(v43 + 72) * v46, (uint64_t)v14);
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
        v48(v14, 0, 1, v15);
      }
      else
      {
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
        v48(v14, 1, 1, v15);
      }
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v48)(v14, 1, 1, v15, v44);
      v49 = v77;
    }
    sub_10025645C((uint64_t)v14, v41);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v15) == 1)
    {
      v50 = v78;
      v51 = v41;
      v52 = v72;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))((uint64_t)v78 + *(int *)(v15 + 24), 1, 1, v72);
      v54 = v70;
      v53 = v71;
      *v50 = v71;
      v50[1] = v54;
      v55 = (char *)v50 + *(int *)(v15 + 28);
      *(_QWORD *)v55 = 0;
      v55[8] = -1;
      v56 = v53;
      v57 = v54;
      sub_100007A28(v51, &qword_10055AAE8);
    }
    else
    {
      sub_10025653C(v41, (uint64_t)v78);
      v52 = v72;
    }
    v58 = v77;

    swift_endAccess(v81);
    v59 = (uint64_t)v78;
    v60 = (uint64_t)v78 + *(int *)(v15 + 24);
    sub_100007A28(v60, (uint64_t *)&unk_100553DC0);
    v69(v60, v79, v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v60, 0, 1, v52);
    sub_1002564BC(v59, (uint64_t)v10);
    v48(v10, 0, 1, v15);
    swift_beginAccess(v42 + 32, v81, 33, 0);
    v61 = v58;
    sub_1002145D8((uint64_t)v10, v61);
    swift_endAccess(v81);
    sub_1002535A4(v61);
    swift_release(v42);
    return sub_100256500(v59);
  }
  return result;
}

uint64_t sub_1002535A4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t result;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  __n128 v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, _QWORD *, __n128);
  uint64_t v60;
  void (*v61)(void);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  id v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  os_log_t v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  os_log_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  id v94;
  id v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  int v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unsigned __int8 v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  os_log_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t Strong;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  id v128;
  id v129;
  uint64_t v130;
  char *v131;
  os_log_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  id v149;
  _QWORD v150[3];
  char v151[8];
  uint64_t v152;
  uint64_t v153[4];

  v137 = sub_10003F544(&qword_1005533D0);
  v3 = __chkstk_darwin(v137);
  v135 = (uint64_t *)((char *)&v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v6 = (char *)&v129 - v5;
  v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v7);
  v141 = (uint64_t)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v139 = *(_QWORD *)(v9 - 8);
  v140 = v9;
  v10 = __chkstk_darwin(v9);
  v131 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v138 = (uint64_t)&v129 - v12;
  v13 = sub_10003F544(&qword_10055AAE8);
  v14 = __chkstk_darwin(v13);
  v136 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v143 = (uint64_t)&v129 - v16;
  v144 = (_QWORD *)type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  v17 = *(v144 - 1);
  __chkstk_darwin(v144);
  v142 = (id *)((char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Logger(0);
  v145 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v147 = (char *)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v133 = (char *)&v129 - v23;
  v24 = __chkstk_darwin(v22);
  v132 = (os_log_t)((char *)&v129 - v25);
  __chkstk_darwin(v24);
  v27 = (char *)&v129 - v26;
  v28 = type metadata accessor for DispatchPredicate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (id *)((char *)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v146 = v1;
  v32 = *(void **)(v1 + 40);
  *v31 = v32;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v31);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v29 + 8))(v31, v28);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v148 = v19;
  v134 = (uint64_t *)v6;
  static Logger.downloads.getter(result);
  v35 = a1;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v149 = v35;
  if (v38)
  {
    v39 = swift_slowAlloc(32, -1);
    v40 = swift_slowAlloc(64, -1);
    v153[0] = v40;
    *(_DWORD *)v39 = 136315651;
    v152 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2160;
    v152 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v39 + 14, v39 + 22);
    *(_WORD *)(v39 + 22) = 2081;
    v130 = v39 + 24;
    v41 = v17;
    v42 = objc_msgSend(v149, "description");
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v17 = v41;
    v35 = v149;
    v152 = sub_10003D274(v43, v45, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v130, v39 + 32);

    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s Validating download status for %{private,mask.hash}s.", (uint8_t *)v39, 0x20u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

  }
  v46 = *(void (**)(char *, uint64_t))(v145 + 8);
  v47 = v148;
  v46(v27, v148);
  v48 = v146;
  v49 = v144;
  v50 = swift_beginAccess(v146 + 32, v153, 32, 0);
  v51 = *(_QWORD *)(v48 + 32);
  if (!*(_QWORD *)(v51 + 16))
  {
    v59 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, __n128))(v17 + 56);
    v60 = v143;
    v59(v143, 1, 1, v49, v50);
LABEL_11:
    sub_100007A28(v60, &qword_10055AAE8);
    v63 = swift_endAccess(v153);
    goto LABEL_12;
  }
  v52 = v35;
  v53 = sub_1001CD240((uint64_t)v52);
  if ((v54 & 1) != 0)
  {
    v55 = v143;
    sub_1002564BC(*(_QWORD *)(v51 + 56) + *(_QWORD *)(v17 + 72) * v53, v143);
    v56 = v55;
    v58 = v141;
    v57 = v142;
  }
  else
  {
    v58 = v141;
    v57 = v142;
    v56 = v143;
  }
  v61 = *(void (**)(void))(v17 + 56);
  v62 = v17;
  v60 = v56;
  v61();

  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v62 + 48))(v60, 1, v49) == 1)
    goto LABEL_11;
  sub_10025653C(v60, (uint64_t)v57);
  swift_endAccess(v153);
  v74 = (char *)v57 + *((int *)v49 + 7);
  v75 = v49;
  v76 = v74[8];
  if (v76 == 255)
  {
    v63 = sub_100256500((uint64_t)v57);
LABEL_12:
    v64 = v147;
    static Logger.downloads.getter(v63);
    v65 = v149;
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.debug.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = swift_slowAlloc(32, -1);
      v69 = swift_slowAlloc(64, -1);
      v153[0] = v69;
      *(_DWORD *)v68 = 136315651;
      v152 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v153);
      v144 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v68 + 4, v68 + 12);
      *(_WORD *)(v68 + 12) = 2160;
      v152 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v68 + 14, v68 + 22);
      *(_WORD *)(v68 + 22) = 2081;
      v70 = objc_msgSend(v65, "description");
      v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v73 = v72;

      v152 = sub_10003D274(v71, v73, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v68 + 24, v68 + 32);

      swift_bridgeObjectRelease(v73);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s Incomplete download data for %{private,mask.hash}s.", (uint8_t *)v68, 0x20u);
      swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v144)(v147, v148);
    }
    else
    {

      return ((uint64_t (*)(char *, uint64_t))v46)(v64, v47);
    }
  }
  v144 = v46;
  v77 = *(_QWORD *)v74;
  sub_100007A64((uint64_t)v57 + *((int *)v75 + 6), v58, (uint64_t *)&unk_100553DC0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v58, 1, v140) == 1)
  {
    sub_100256500((uint64_t)v57);
    v63 = sub_100007A28(v58, (uint64_t *)&unk_100553DC0);
    v46 = (void (*)(char *, uint64_t))v144;
    goto LABEL_12;
  }
  v149 = *(id *)(v139 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v149)(v138, v58, v140);
  v130 = v48 + 32;
  v129 = v52;
  LODWORD(v143) = v76;
  v141 = v77;
  if ((v76 & 1) != 0)
  {
    sub_1001502B8(v77, 1);
    v92 = sub_1001502B8(v77, 1);
    v93 = v133;
    static Logger.downloads.getter(v92);
    v94 = v52;
    sub_100256580(v77, v76);
    v95 = v94;
    v96 = sub_100256580(v77, v76);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.error.getter(v97);
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = swift_slowAlloc(52, -1);
      v147 = (char *)swift_slowAlloc(96, -1);
      v153[0] = (uint64_t)v147;
      *(_DWORD *)v100 = 136316163;
      LODWORD(v144) = v99;
      v152 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v100 + 4, v100 + 12);
      *(_WORD *)(v100 + 12) = 2160;
      v152 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v100 + 14, v100 + 22);
      *(_WORD *)(v100 + 22) = 2081;
      v101 = objc_msgSend(v95, "description", v129, v130);
      v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
      v132 = v97;
      v103 = v77;
      v104 = v95;
      v105 = v102;
      v106 = v76;
      v108 = v107;

      v109 = v105;
      v95 = v104;
      v152 = sub_10003D274(v109, v108, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v100 + 24, v100 + 32);

      swift_bridgeObjectRelease(v108);
      *(_WORD *)(v100 + 32) = 2160;
      v152 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v100 + 34, v100 + 42);
      *(_WORD *)(v100 + 42) = 2081;
      swift_getErrorValue(v103, v151, v150);
      v110 = Error.localizedDescription.getter(v150[1], v150[2]);
      v112 = v111;
      v152 = sub_10003D274(v110, v111, v153);
      v48 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v100 + 44, v100 + 52);
      swift_bridgeObjectRelease(v112);
      sub_1002564A4(v103, v76);
      sub_1002564A4(v103, v76);
      v113 = v132;
      _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v144, "%s Download for %{private,mask.hash}s failed with %{private,mask.hash}s.", (uint8_t *)v100, 0x34u);
      v114 = v147;
      swift_arrayDestroy(v147, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v100, -1, -1);

      (*(void (**)(char *, uint64_t))(v145 + 8))(v133, v148);
      v115 = v134;
      v116 = (uint64_t)v136;
    }
    else
    {

      sub_1002564A4(v77, v76);
      sub_1002564A4(v77, v76);

      ((void (*)(char *, uint64_t))v144)(v93, v47);
      v115 = v134;
      v106 = v76;
      v116 = (uint64_t)v136;
      v103 = v77;
    }
    v117 = v135;
    *v115 = v103;
    v118 = v137;
    swift_storeEnumTagMultiPayload(v115, v137, 1);
    sub_1001502B8(v103, 1);
    sub_100254CF4(v95, v138);
    sub_1002564A4(v103, v106);
  }
  else
  {
    v78 = sub_1001502B8(v77, 0);
    v79 = v132;
    static Logger.downloads.getter(v78);
    v80 = v52;
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.debug.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(32, -1);
      v84 = swift_slowAlloc(64, -1);
      v153[0] = v84;
      *(_DWORD *)v83 = 136315651;
      v152 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2160;
      v152 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v83 + 14, v83 + 22);
      *(_WORD *)(v83 + 22) = 2081;
      v147 = (char *)(v83 + 24);
      v85 = v47;
      v86 = objc_msgSend(v80, "description", v129, v130);
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      v89 = v88;

      v152 = sub_10003D274(v87, v89, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v147, v83 + 32);

      swift_bridgeObjectRelease(v89);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "%s Download for %{private,mask.hash}s successfully completed.", (uint8_t *)v83, 0x20u);
      swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

      v90 = v132;
      v91 = v85;
    }
    else
    {

      v90 = v79;
      v91 = v47;
    }
    ((void (*)(os_log_t, uint64_t))v144)(v90, v91);
    v115 = v134;
    v116 = (uint64_t)v136;
    v117 = v135;
    v48 = v146;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v139 + 16))(v134, v138, v140);
    v118 = v137;
    swift_storeEnumTagMultiPayload(v115, v137, 0);
  }
  Strong = swift_unknownObjectWeakLoadStrong(v48 + 16);
  if (Strong)
  {
    v120 = Strong;
    v122 = (void *)*v142;
    v121 = (void *)v142[1];
    sub_100007A64((uint64_t)v115, (uint64_t)v117, &qword_1005533D0);
    if (swift_getEnumCaseMultiPayload(v117, v118) == 1)
    {
      v123 = *v117;
      v124 = v122;
      sub_100229874(v121, v123);
      swift_errorRelease(v123);
    }
    else
    {
      v125 = (uint64_t)v131;
      v126 = v117;
      v127 = v140;
      ((void (*)(char *, uint64_t *, uint64_t))v149)(v131, v126, v140);
      v128 = v122;
      sub_1002293B4(v121, v125);
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v125, v127);
    }

    swift_unknownObjectRelease(v120);
  }
  swift_beginAccess(v130, v153, 33, 0);
  sub_100216EF0((uint64_t)v129, v116);
  swift_endAccess(v153);
  sub_1002564A4(v141, v143);
  sub_100007A28(v116, &qword_10055AAE8);
  sub_100007A28((uint64_t)v115, &qword_1005533D0);
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
  return sub_100256500((uint64_t)v142);
}

uint64_t sub_1002544E8(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  os_log_t v60;
  uint64_t v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[3];
  char v92[8];
  uint64_t v93;
  uint64_t v94[3];
  char v95[32];

  v10 = type metadata accessor for Logger(0);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  v11 = __chkstk_darwin(v10);
  v86 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v79 - v13;
  v15 = sub_10003F544(&qword_10055AAE8);
  v16 = __chkstk_darwin(v15);
  v89 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v79 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v79 - v21;
  v23 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  v90 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  a1 += 16;
  swift_beginAccess(a1, v95, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v27 = result;
    v84 = result + 32;
    v28 = swift_beginAccess(result + 32, v94, 32, 0);
    v85 = v27;
    v29 = *(_QWORD *)(v27 + 32);
    if (*(_QWORD *)(v29 + 16))
    {
      v30 = sub_1001CD240((uint64_t)a2);
      if ((v31 & 1) != 0)
      {
        v32 = *(_QWORD *)(v29 + 56);
        v33 = v90;
        sub_1002564BC(v32 + *(_QWORD *)(v90 + 72) * v30, (uint64_t)v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v22, 0, 1, v23);
      }
      else
      {
        v33 = v90;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v22, 1, 1, v23);
      }
    }
    else
    {
      v33 = v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v90 + 56))(v22, 1, 1, v23, v28);
      v34 = a2;
    }
    sub_10025645C((uint64_t)v22, (uint64_t)v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v20, 1, v23) == 1)
    {
      v35 = (char *)v25 + *(int *)(v23 + 24);
      v36 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
      *v25 = a3;
      v25[1] = a4;
      v37 = (char *)v25 + *(int *)(v23 + 28);
      *(_QWORD *)v37 = 0;
      v37[8] = -1;
      v38 = a3;
      v39 = a4;
      sub_100007A28((uint64_t)v20, &qword_10055AAE8);
    }
    else
    {
      sub_10025653C((uint64_t)v20, (uint64_t)v25);
    }

    v40 = swift_endAccess(v94);
    if (a5)
    {
      v41 = swift_errorRetain(a5);
      v42 = v86;
      static Logger.downloads.getter(v41);
      v43 = a2;
      swift_errorRetain(a5);
      v44 = v43;
      v45 = swift_errorRetain(a5);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.error.getter(v46);
      v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        v49 = swift_slowAlloc(52, -1);
        v82 = v46;
        v50 = v49;
        v83 = swift_slowAlloc(96, -1);
        v94[0] = v83;
        *(_DWORD *)v50 = 136316163;
        LODWORD(v81) = v48;
        v93 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v50 + 4, v50 + 12);
        *(_WORD *)(v50 + 12) = 2160;
        v93 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v50 + 14, v50 + 22);
        *(_WORD *)(v50 + 22) = 2081;
        v80 = v50 + 24;
        v51 = objc_msgSend(v44, "description");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v53 = a2;
        v55 = v54;

        v93 = sub_10003D274(v52, v55, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v80, v50 + 32);

        v56 = v55;
        a2 = v53;
        swift_bridgeObjectRelease(v56);
        *(_WORD *)(v50 + 32) = 2160;
        v93 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v50 + 34, v50 + 42);
        *(_WORD *)(v50 + 42) = 2081;
        swift_getErrorValue(a5, v92, v91);
        v57 = Error.localizedDescription.getter(v91[1], v91[2]);
        v59 = v58;
        v93 = sub_10003D274(v57, v58, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v50 + 44, v50 + 52);
        swift_bridgeObjectRelease(v59);
        swift_errorRelease(a5);
        swift_errorRelease(a5);
        v60 = v82;
        _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v81, "%s didCompleteDownload %{private,mask.hash}s with %{private,mask.hash}s.", (uint8_t *)v50, 0x34u);
        v61 = v83;
        swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v50, -1, -1);

        (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
      }
      else
      {

        swift_errorRelease(a5);
        swift_errorRelease(a5);

        (*(void (**)(char *, uint64_t))(v87 + 8))(v42, v88);
      }
      v74 = (char *)v25 + *(int *)(v23 + 28);
      sub_1002564A4(*(_QWORD *)v74, v74[8]);
      *(_QWORD *)v74 = a5;
      v74[8] = 1;
    }
    else
    {
      static Logger.downloads.getter(v40);
      v62 = a2;
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.debug.getter(v63);
      v65 = v64;
      if (os_log_type_enabled(v63, v64))
      {
        v66 = swift_slowAlloc(32, -1);
        LODWORD(v82) = v65;
        v67 = v66;
        v83 = swift_slowAlloc(64, -1);
        v94[0] = v83;
        *(_DWORD *)v67 = 136315651;
        v86 = a2;
        v93 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v67 + 4, v67 + 12);
        *(_WORD *)(v67 + 12) = 2160;
        v93 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v67 + 14, v67 + 22);
        *(_WORD *)(v67 + 22) = 2081;
        v81 = v67 + 24;
        v68 = objc_msgSend(v62, "description");
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

        v93 = sub_10003D274(v69, v71, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v81, v67 + 32);

        v72 = v71;
        a2 = v86;
        swift_bridgeObjectRelease(v72);
        _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v82, "%s didCompleteDownload %{private,mask.hash}s.", (uint8_t *)v67, 0x20u);
        v73 = v83;
        swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v87 + 8))(v14, v88);
      v75 = (char *)v25 + *(int *)(v23 + 28);
      sub_1002564A4(*(_QWORD *)v75, v75[8]);
      *(_QWORD *)v75 = 0;
      v75[8] = 0;
    }
    v76 = v89;
    sub_1002564BC((uint64_t)v25, v89);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v76, 0, 1, v23);
    swift_beginAccess(v84, v94, 33, 0);
    v77 = a2;
    sub_1002145D8(v76, v77);
    swift_endAccess(v94);
    v78 = v85;
    sub_1002535A4(v77);
    swift_release(v78);
    return sub_100256500((uint64_t)v25);
  }
  return result;
}

uint64_t sub_100254CF4(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  Swift::String v52;
  __n128 v53;
  os_log_t v54;
  void *v55;
  void (*v56)(uint64_t (**)(char *, uint64_t), uint64_t);
  char *v57;
  char *v58;
  void *object;
  NSString v60;
  uint64_t v61;
  NSURL *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  id v66;
  id v67;
  char *v68;
  void (*v69)(char *, uint64_t, uint64_t);
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  Swift::String v82;
  __n128 v83;
  char *v84;
  uint64_t v86;
  char *v87;
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  int v91;
  uint64_t v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  Swift::String v101;
  __n128 v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  id v108;
  id v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  Swift::String v120;
  __n128 v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  int v128;
  os_log_t v129;
  void *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  id v135;
  void (*v136)(char *, uint64_t, uint64_t);
  char *v137;
  char *v138;
  uint64_t (**v139)(char *, uint64_t);
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[3];
  char v143[16];
  uint64_t v144;
  id v145;

  v5 = type metadata accessor for URL(0);
  v140 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v132 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v137 = (char *)&v127 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v127 - v11;
  __chkstk_darwin(v10);
  v138 = (char *)&v127 - v13;
  v141 = type metadata accessor for Logger(0);
  v14 = *(char **)(v141 - 8);
  v15 = __chkstk_darwin(v141);
  v133 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v127 - v18;
  v20 = __chkstk_darwin(v17);
  v131 = (char *)&v127 - v21;
  __chkstk_darwin(v20);
  v139 = (uint64_t (**)(char *, uint64_t))((char *)&v127 - v22);
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(void **)(v2 + 40);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  v29 = (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
    __break(1u);
  static Logger.downloads.getter(v29);
  v136 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 16);
  v136(v138, a2, v5);
  v30 = a1;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter(v31);
  v33 = v32;
  v34 = os_log_type_enabled(v31, v32);
  v35 = a2;
  v134 = v19;
  v135 = v30;
  if (v34)
  {
    v36 = v30;
    v37 = swift_slowAlloc(52, -1);
    v130 = (void *)swift_slowAlloc(96, -1);
    v145 = v130;
    *(_DWORD *)v37 = 136316163;
    v129 = v31;
    v144 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, (uint64_t *)&v145);
    v128 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2160;
    v144 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 14, v37 + 22);
    *(_WORD *)(v37 + 22) = 2081;
    v127 = v37 + 24;
    v38 = objc_msgSend(v36, "description");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v40 = v14;
    v41 = a2;
    v42 = v39;
    v43 = v12;
    v44 = v5;
    v45 = v40;
    v47 = v46;

    v48 = v42;
    v35 = v41;
    v144 = sub_10003D274(v48, v47, (uint64_t *)&v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v127, v37 + 32);

    v49 = v47;
    v50 = v141;
    v14 = v45;
    v5 = v44;
    v12 = v43;
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v37 + 32) = 2160;
    v144 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 34, v37 + 42);
    *(_WORD *)(v37 + 42) = 2081;
    v51 = v138;
    v52 = URL.path(percentEncoded:)(1);
    v144 = sub_10003D274(v52._countAndFlagsBits, (unint64_t)v52._object, (uint64_t *)&v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v37 + 44, v37 + 52);
    v53 = swift_bridgeObjectRelease(v52._object);
    v140 = *(_QWORD *)(v140 + 8);
    ((void (*)(char *, uint64_t, __n128))v140)(v51, v5, v53);
    v54 = v129;
    _os_log_impl((void *)&_mh_execute_header, v129, (os_log_type_t)v128, "%s Removing asset %{private,mask.hash}s at %{private,mask.hash}s.", (uint8_t *)v37, 0x34u);
    v55 = v130;
    swift_arrayDestroy(v130, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    v56 = (void (*)(uint64_t (**)(char *, uint64_t), uint64_t))*((_QWORD *)v14 + 1);
    v56(v139, v50);
  }
  else
  {

    v140 = *(_QWORD *)(v140 + 8);
    ((void (*)(char *, uint64_t))v140)(v138, v5);

    v56 = (void (*)(uint64_t (**)(char *, uint64_t), uint64_t))*((_QWORD *)v14 + 1);
    v56(v139, v141);
  }
  v57 = v137;
  v58 = (char *)objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  object = URL.path(percentEncoded:)(0)._object;
  v60 = String._bridgeToObjectiveC()();
  LODWORD(object) = objc_msgSend(v58, "fileExistsAtPath:", v60, swift_bridgeObjectRelease(object).n128_f64[0]);

  if ((_DWORD)object)
  {
    URL._bridgeToObjectiveC()(v62);
    v64 = v63;
    v145 = 0;
    v65 = objc_msgSend(v58, "removeItemAtURL:error:", v63, &v145);

    v66 = v145;
    if (v65)
    {
      v67 = v145;
      v68 = v131;
      static Logger.downloads.getter(v67);
      v136(v12, v35, v5);
      v69 = (void (*)(char *, uint64_t, uint64_t))v12;
      v70 = v135;
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.debug.getter(v71);
      if (os_log_type_enabled(v71, v72))
      {
        v73 = swift_slowAlloc(52, -1);
        v136 = v69;
        v74 = v73;
        v137 = (char *)swift_slowAlloc(96, -1);
        v145 = v137;
        *(_DWORD *)v74 = 136316163;
        v144 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v74 + 4, v74 + 12);
        *(_WORD *)(v74 + 12) = 2160;
        v144 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v74 + 14, v74 + 22);
        *(_WORD *)(v74 + 22) = 2081;
        v75 = objc_msgSend(v70, "description");
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v138 = v58;
        v139 = (uint64_t (**)(char *, uint64_t))v14;
        v77 = v76;
        v78 = v5;
        v80 = v79;

        v144 = sub_10003D274(v77, v80, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v74 + 24, v74 + 32);

        swift_bridgeObjectRelease(v80);
        *(_WORD *)(v74 + 32) = 2160;
        v144 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v74 + 34, v74 + 42);
        *(_WORD *)(v74 + 42) = 2081;
        v81 = v136;
        v82 = URL.path(percentEncoded:)(1);
        v144 = sub_10003D274(v82._countAndFlagsBits, (unint64_t)v82._object, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v74 + 44, v74 + 52);
        v83 = swift_bridgeObjectRelease(v82._object);
        ((void (*)(void (*)(char *, uint64_t, uint64_t), uint64_t, __n128))v140)(v81, v78, v83);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s Removed asset %{private,mask.hash}s at %{private,mask.hash}s.", (uint8_t *)v74, 0x34u);
        v84 = v137;
        swift_arrayDestroy(v137, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        return v139[1](v131, v141);
      }

      ((void (*)(void (*)(char *, uint64_t, uint64_t), uint64_t))v140)(v69, v5);
    }
    else
    {
      v139 = (uint64_t (**)(char *, uint64_t))v14;
      v103 = v145;
      v104 = _convertNSErrorToError(_:)(v66);

      v106 = swift_willThrow(v105);
      v68 = v133;
      static Logger.downloads.getter(v106);
      v107 = v132;
      v136(v132, v35, v5);
      v108 = v135;
      swift_errorRetain(v104);
      v109 = v108;
      v110 = swift_errorRetain(v104);
      v111 = Logger.logObject.getter(v110);
      v112 = static os_log_type_t.error.getter(v111);
      if (os_log_type_enabled(v111, v112))
      {
        v113 = swift_slowAlloc(62, -1);
        v137 = (char *)swift_slowAlloc(128, -1);
        v145 = v137;
        *(_DWORD *)v113 = 136316419;
        v144 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v113 + 4, v113 + 12);
        *(_WORD *)(v113 + 12) = 2160;
        v144 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v113 + 14, v113 + 22);
        *(_WORD *)(v113 + 22) = 2081;
        v114 = objc_msgSend(v109, "description");
        v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
        v138 = v58;
        v116 = v115;
        v136 = (void (*)(char *, uint64_t, uint64_t))v5;
        v118 = v117;

        v144 = sub_10003D274(v116, v118, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v113 + 24, v113 + 32);

        swift_bridgeObjectRelease(v118);
        *(_WORD *)(v113 + 32) = 2160;
        v144 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v113 + 34, v113 + 42);
        *(_WORD *)(v113 + 42) = 2081;
        v119 = v132;
        v120 = URL.path(percentEncoded:)(1);
        v144 = sub_10003D274(v120._countAndFlagsBits, (unint64_t)v120._object, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v113 + 44, v113 + 52);
        v121 = swift_bridgeObjectRelease(v120._object);
        ((void (*)(char *, void (*)(char *, uint64_t, uint64_t), __n128))v140)(v119, v136, v121);
        *(_WORD *)(v113 + 52) = 2080;
        swift_getErrorValue(v104, v143, v142);
        v122 = Error.localizedDescription.getter(v142[1], v142[2]);
        v124 = v123;
        v144 = sub_10003D274(v122, v123, (uint64_t *)&v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v113 + 54, v113 + 62);
        swift_bridgeObjectRelease(v124);
        swift_errorRelease(v104);
        swift_errorRelease(v104);
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "%s Unable to remove %{private,mask.hash}s at %{private,mask.hash}s with %s.", (uint8_t *)v113, 0x3Eu);
        v125 = v137;
        swift_arrayDestroy(v137, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v125, -1, -1);
        swift_slowDealloc(v113, -1, -1);

        swift_errorRelease(v104);
        return v139[1](v133, v141);
      }

      swift_errorRelease(v104);
      ((void (*)(char *, uint64_t))v140)(v107, v5);
      swift_errorRelease(v104);
      swift_errorRelease(v104);

    }
    v126 = v68;
  }
  else
  {
    v86 = v35;
    v87 = v134;
    static Logger.downloads.getter(v61);
    v136(v57, v86, v5);
    v88 = v135;
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.debug.getter(v89);
    v91 = v90;
    if (os_log_type_enabled(v89, v90))
    {
      v92 = swift_slowAlloc(52, -1);
      v93 = (void *)swift_slowAlloc(96, -1);
      v136 = (void (*)(char *, uint64_t, uint64_t))v5;
      v94 = v93;
      v145 = v93;
      *(_DWORD *)v92 = 136316163;
      LODWORD(v135) = v91;
      v144 = sub_10003D274(0xD00000000000001CLL, 0x8000000100437AC0, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v92 + 4, v92 + 12);
      *(_WORD *)(v92 + 12) = 2160;
      v144 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v92 + 14, v92 + 22);
      *(_WORD *)(v92 + 22) = 2081;
      v95 = objc_msgSend(v88, "description");
      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      v138 = v58;
      v139 = (uint64_t (**)(char *, uint64_t))v14;
      v97 = v96;
      v99 = v98;

      v144 = sub_10003D274(v97, v99, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v92 + 24, v92 + 32);

      swift_bridgeObjectRelease(v99);
      *(_WORD *)(v92 + 32) = 2160;
      v144 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v92 + 34, v92 + 42);
      *(_WORD *)(v92 + 42) = 2081;
      v100 = v137;
      v101 = URL.path(percentEncoded:)(1);
      v144 = sub_10003D274(v101._countAndFlagsBits, (unint64_t)v101._object, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v92 + 44, v92 + 52);
      v102 = swift_bridgeObjectRelease(v101._object);
      ((void (*)(char *, void (*)(char *, uint64_t, uint64_t), __n128))v140)(v100, v136, v102);
      _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v135, "%s Unable to remove %{private,mask.hash}s at %{private,mask.hash}s since the file doesn't exist.", (uint8_t *)v92, 0x34u);
      swift_arrayDestroy(v94, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1, -1);
      swift_slowDealloc(v92, -1, -1);

      return v139[1](v87, v141);
    }

    ((void (*)(char *, uint64_t))v140)(v57, v5);
    v126 = v87;
  }
  return ((uint64_t (*)(char *, uint64_t))v56)(v126, v141);
}

uint64_t sub_100255B18()
{
  uint64_t v0;

  sub_100152110(v0 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocClassInstance(v0, 48, 7);
}

char *sub_100255B4C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  int v21;
  char v22;
  uint64_t v23;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    v9 = *(int *)(a3 + 24);
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    v16 = v8;
    if (v14(v11, 1, v12))
    {
      v17 = sub_10003F544((uint64_t *)&unk_100553DC0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = *(int *)(a3 + 28);
    v19 = &v7[v18];
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *((unsigned __int8 *)v20 + 8);
    if (v21 == 255)
    {
      *(_QWORD *)v19 = *v20;
      v19[8] = *((_BYTE *)v20 + 8);
    }
    else
    {
      v22 = v21 & 1;
      v23 = *v20;
      sub_1001502B8(*v20, v21 & 1);
      *(_QWORD *)v19 = v23;
      v19[8] = v22;
    }
  }
  return v7;
}

uint64_t sub_100255CA0(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  int v9;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + *(int *)(a2 + 28);
  v9 = v8[8];
  if (v9 != 255)
    return sub_1001502C4(*(_QWORD *)v8, v9 & 1);
  return result;
}

_QWORD *sub_100255D50(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  int v20;
  char v21;
  uint64_t v22;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v6;
  v15 = v7;
  if (v13(v10, 1, v11))
  {
    v16 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 28);
  v18 = (char *)a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *((unsigned __int8 *)v19 + 8);
  if (v20 == 255)
  {
    *(_QWORD *)v18 = *v19;
    v18[8] = *((_BYTE *)v19 + 8);
  }
  else
  {
    v21 = v20 & 1;
    v22 = *v19;
    sub_1001502B8(*v19, v20 & 1);
    *(_QWORD *)v18 = v22;
    v18[8] = v21;
  }
  return a1;
}

uint64_t sub_100255E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(int *)(a3 + 24);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = *(int *)(a3 + 28);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(unsigned __int8 *)(a1 + v21 + 8);
  v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if (v24 == 255)
  {
    if (v25 == 255)
    {
      v27 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
      *(_QWORD *)v22 = v27;
    }
    else
    {
      v32 = v25 & 1;
      v33 = *(_QWORD *)v23;
      sub_1001502B8(v33, v25 & 1);
      *(_QWORD *)v22 = v33;
      *(_BYTE *)(v22 + 8) = v32;
    }
  }
  else if (v25 == 255)
  {
    sub_100007A28(v22, &qword_10055CAA0);
    v26 = *(_BYTE *)(v23 + 8);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_BYTE *)(v22 + 8) = v26;
  }
  else
  {
    v28 = v25 & 1;
    v29 = *(_QWORD *)v23;
    sub_1001502B8(v29, v25 & 1);
    v30 = *(_QWORD *)v22;
    v31 = *(_BYTE *)(v22 + 8);
    *(_QWORD *)v22 = v29;
    *(_BYTE *)(v22 + 8) = v28;
    sub_1001502C4(v30, v31);
  }
  return a1;
}

_OWORD *sub_100256058(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

uint64_t sub_100256140(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_10003F544((uint64_t *)&unk_100553DC0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(unsigned __int8 *)(a1 + v17 + 8);
  if (v20 != 255)
  {
    v21 = v19[8];
    if (v21 != 255)
    {
      v22 = *(_QWORD *)v18;
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v21 & 1;
      sub_1001502C4(v22, v20 & 1);
      return a1;
    }
    sub_100007A28(v18, &qword_10055CAA0);
  }
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v19[8];
  return a1;
}

uint64_t sub_1002562D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002562E0);
}

uint64_t sub_1002562E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10003F544((uint64_t *)&unk_100553DC0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_100256360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025636C);
}

char *sub_10025636C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10003F544((uint64_t *)&unk_100553DC0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1002563E4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100256408()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_errorRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10025644C()
{
  uint64_t v0;

  return sub_1002544E8(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10025645C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055AAE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002564A4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1001502C4(result, a2 & 1);
  return result;
}

uint64_t sub_1002564BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100256500(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10025653C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FairPlayDownloadsObserver.DownloadState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100256580(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1001502B8(result, a2 & 1);
  return result;
}

uint64_t sub_100256598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100256648()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100252F44(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002566AC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];

  v1 = v0;
  v2 = v0[8];
  v3 = v1[2];
  sub_10000A520((uint64_t)(v1 + 3), (uint64_t)v13);
  v4 = type metadata accessor for EpisodeDeletionActionProvider(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  swift_retain();
  v5 = swift_retain();
  v6 = EpisodeDeletionActionProvider.init(asPartOf:episodeDownloadStateController:libraryActionController:)(v2, v3, v13, v5);
  v7 = v1[12];
  v1[12] = v6;
  result = swift_release(v7);
  v9 = v1[9];
  if (v9)
  {
    v10 = type metadata accessor for EpisodeOfferStateCenter();
    v11 = swift_allocObject(v10, 32, 7);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v3;
    v12 = v1[10];
    v1[10] = v11;
    swift_retain();
    swift_retain();
    return swift_release(v12);
  }
  return result;
}

BOOL sub_100256778()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  _QWORD *v13;

  if (!*(_QWORD *)(v0 + 72))
    return 0;
  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
    return 0;
  swift_retain();
  v2 = sub_1001B57A0();
  v3 = v2[2];
  v13 = v2;
  if (v3)
  {
    v4 = v2 + 6;
    while (1)
    {
      v9 = *((_QWORD *)v4 - 2);
      v8 = *((_QWORD *)v4 - 1);
      v10 = *v4;
      if (!*v4)
        goto LABEL_12;
      if (v10 == 1)
        break;
LABEL_8:
      v4 += 24;
      if (!--v3)
        goto LABEL_15;
    }
    swift_bridgeObjectRetain(*((_QWORD *)v4 - 1));
LABEL_12:
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10017B0F8(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v6 = _swiftEmptyArrayStorage[2];
    v5 = _swiftEmptyArrayStorage[3];
    if (v6 >= v5 >> 1)
      sub_10017B0F8(v5 > 1, v6 + 1, 1);
    _swiftEmptyArrayStorage[2] = v6 + 1;
    v7 = &_swiftEmptyArrayStorage[3 * v6];
    v7[4] = v9;
    v7[5] = v8;
    *((_BYTE *)v7 + 48) = v10;
    goto LABEL_8;
  }
LABEL_15:
  swift_release(v1);
  swift_bridgeObjectRelease(v13);
  v12 = _swiftEmptyArrayStorage[2];
  swift_release(_swiftEmptyArrayStorage);
  return v12 != 0;
}

BOOL sub_1002568C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
    return 0;
  swift_retain();
  v2 = sub_1001B57A0();
  v3 = v2[2];
  v13 = v2;
  if (v3)
  {
    v4 = v2 + 6;
    while (1)
    {
      v9 = *((_QWORD *)v4 - 2);
      v8 = *((_QWORD *)v4 - 1);
      v10 = *v4;
      if (!*v4)
        goto LABEL_11;
      if (v10 == 1)
        break;
LABEL_7:
      v4 += 24;
      if (!--v3)
        goto LABEL_14;
    }
    swift_bridgeObjectRetain(*((_QWORD *)v4 - 1));
LABEL_11:
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10017B0F8(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v6 = _swiftEmptyArrayStorage[2];
    v5 = _swiftEmptyArrayStorage[3];
    if (v6 >= v5 >> 1)
      sub_10017B0F8(v5 > 1, v6 + 1, 1);
    _swiftEmptyArrayStorage[2] = v6 + 1;
    v7 = &_swiftEmptyArrayStorage[3 * v6];
    v7[4] = v9;
    v7[5] = v8;
    *((_BYTE *)v7 + 48) = v10;
    goto LABEL_7;
  }
LABEL_14:
  swift_release(v1);
  swift_bridgeObjectRelease(v13);
  v12 = _swiftEmptyArrayStorage[2];
  swift_release(_swiftEmptyArrayStorage);
  return v12 != 0;
}

double sub_100256A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for EpisodeDeletionActionProvider.Context(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 72);
  if (v6 && !*(_BYTE *)(v6 + 32))
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = swift_bridgeObjectRetain(v7);
    if (v8)
    {
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for EpisodeDeletionActionProvider.Context.action(_:), v1, v9);
      v10 = swift_retain();
      v11 = dispatch thunk of EpisodeDeletionActionProvider.deleteEpisodesOrProvideDeleteActions(episodeUuids:stationUuids:context:noConfirmation:)(v7, _swiftEmptyArrayStorage, v5, 1, v10);
      v13 = v12;
      v15 = v14;
      swift_release(v8);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      if (v13)
      {
        sub_100256B60(v11, v13, v15);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v13);
        v16 = v15;
      }
      else
      {
        v16 = v7;
      }
      *(_QWORD *)&result = swift_bridgeObjectRelease(v16).n128_u64[0];
    }
    else
    {
      *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
    }
  }
  return result;
}

void sub_100256B60(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  __n128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Swift::String v39;
  Swift::String v40;
  void *object;
  NSString v42;
  id v43;
  uint64_t v44;
  void (*v45)(__n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  _QWORD aBlock[5];
  uint64_t v57;
  Swift::String v58;

  v7 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v10 = a1 & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    swift_bridgeObjectRetain(a2);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = 0;
  }
  v55 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v11, 0, 0);

  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v33 = a3;
    else
      v33 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v12 = _CocoaArrayWrapper.endIndex.getter(v33);
    v13 = CPInterfaceController_ptr;
    if (v12)
      goto LABEL_8;
LABEL_22:
    *(_QWORD *)&v32 = swift_bridgeObjectRelease(a3).n128_u64[0];
    goto LABEL_23;
  }
  v12 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  v13 = CPInterfaceController_ptr;
  if (!v12)
    goto LABEL_22;
LABEL_8:
  v14 = objc_opt_self(UIAlertAction);
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  v15 = (void *)v14;
  v53 = v3;
  v54 = v9;
  v16 = 0;
  do
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a3);
    }
    else
    {
      v21 = *(_QWORD *)(a3 + 8 * v16 + 32);
      swift_retain();
    }
    v22 = swift_retain();
    v23 = Action.presentationStyle.getter(v22);
    v24 = swift_release(v21);
    v25 = static Link.Presentation.alertDestructive.getter(v24);
    v26 = v25;
    v27 = Link.Presentation.init(rawValue:)(v25);
    v28 = Link.Presentation.init(rawValue:)(v27 & v23) == v26;
    swift_retain();
    Action.title.getter(v29);
    v31 = v30;
    swift_release(v21);
    swift_retain();
    if (v31)
    {
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v31);
    }
    else
    {
      v17 = 0;
    }
    ++v16;
    v18 = 2 * v28;
    aBlock[4] = sub_10025741C;
    v57 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001AC13C;
    aBlock[3] = &unk_1004B8990;
    v19 = _Block_copy(aBlock);
    swift_release(v57);
    v20 = objc_msgSend(v15, "actionWithTitle:style:handler:", v17, v18, v19);
    _Block_release(v19);

    objc_msgSend(v55, "addAction:", v20);
    swift_release(v21);

  }
  while (v12 != v16);
  *(_QWORD *)&v32 = swift_bridgeObjectRelease(a3).n128_u64[0];
  v3 = v53;
  v9 = v54;
  v13 = CPInterfaceController_ptr;
LABEL_23:
  v34 = objc_msgSend(v55, "actions", v32);
  v35 = sub_100257444();
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

  if ((unint64_t)v36 >> 62)
  {
    if (v36 < 0)
      v51 = v36;
    else
      v51 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v37 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v36);
  if (v37)
  {
    v38 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v58._object = (void *)0xE000000000000000;
    v39._countAndFlagsBits = 0x6C65636E6143;
    v39._object = (void *)0xE600000000000000;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, (NSBundle)v38, v40, v58)._object;

    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v43 = objc_msgSend((id)objc_opt_self(v13[311]), "actionWithTitle:style:handler:", v42, 1, 0);

    objc_msgSend(v55, "addAction:", v43);
    swift_beginAccess(v3 + 88, aBlock, 0, 0);
    v44 = *(_QWORD *)(v3 + 88);
    if (v44)
    {
      v45 = *(void (**)(__n128))(*(_QWORD *)v44 + 120);
      v46 = swift_retain();
      v45(v46);
      swift_release(v44);
      v47 = type metadata accessor for PresentationSource(0);
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v9, 1, v47) != 1)
      {
        v49 = v55;
        PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v55, 1, 15, 1, 0, 0);

        (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v47);
        return;
      }
    }
    else
    {
      v50 = type metadata accessor for PresentationSource(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v9, 1, 1, v50);
    }

    sub_10016E9C8((uint64_t)v9);
  }
  else
  {

  }
}

_QWORD *sub_100257070()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  sub_10003D380(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts27RemoveDownloadContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1002570EC()
{
  uint64_t v0;

  sub_100257070();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100257110()
{
  return type metadata accessor for RemoveDownloadContextAction(0);
}

uint64_t type metadata accessor for RemoveDownloadContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055CB68;
  if (!qword_10055CB68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoveDownloadContextAction);
  return result;
}

uint64_t sub_100257154(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "(";
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_1003D0768;
  v4[4] = &unk_1003D0768;
  v4[5] = &unk_1003D0768;
  v4[6] = &unk_1003D0768;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1002571EC()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1002571F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;
  return swift_release(v2);
}

uint64_t sub_100257204()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x442065766F6D6552;
  v1._object = (void *)0xEF64616F6C6E776FLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1002572A8()
{
  return 0x6873617274;
}

uint64_t sub_1002572BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts27RemoveDownloadContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100257300()
{
  return 3;
}

BOOL sub_100257308()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72) && sub_1002568C4();
}

double sub_100257324@<D0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  double result;
  Swift::String v10;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = v2;
  v5 = objc_msgSend(v3, "mainBundle");
  v10._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0x442065766F6D6552;
  v6._object = (void *)0xEF64616F6C6E776FLL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  *(_QWORD *)a1 = v2;
  *(_QWORD *)&result = 0x6873617274;
  *(_OWORD *)(a1 + 8) = xmmword_1003D06D0;
  *(Swift::String *)(a1 + 24) = v8;
  return result;
}

uint64_t sub_10025741C()
{
  void (*v0)(void);
  uint64_t v1;
  uint64_t v2;

  v0 = (void (*)(void))ClosureAction.closure.getter();
  v2 = v1;
  v0();
  return swift_release(v2);
}

unint64_t sub_100257444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055CD00;
  if (!qword_10055CD00)
  {
    v1 = objc_opt_self(UIAlertAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10055CD00);
  }
  return result;
}

uint64_t sub_100257480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  objc_class *v10;
  unint64_t v11;
  unint64_t v12;
  NSBundle v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t countAndFlagsBits;
  unint64_t v19;
  _BYTE v21[24];

  v1 = sub_10003F544(&qword_100559910);
  v2 = __chkstk_darwin(v1);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v2);
  v6 = &v21[-v5 - 8];
  v7 = v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
  swift_beginAccess(v7, v21, 0, 0);
  sub_100258D5C(v7, (uint64_t)v6);
  v8 = type metadata accessor for EpisodePlayState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
    goto LABEL_6;
  sub_100258D5C((uint64_t)v6, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v8) != 3)
  {
    sub_100199364((uint64_t)v4);
LABEL_6:
    v10 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v19 = 0xEC00000065646F73;
    v12 = 0x8000000100437B80;
    v11 = 0xD000000000000013;
    v13.super.isa = v10;
    v14 = 0;
    v15 = 0xE000000000000000;
    v16 = 0x6970452079616C50;
    goto LABEL_7;
  }
  v9 = v4[16];
  v10 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (v9 == 1)
  {
    v11 = 0xD000000000000015;
    v19 = 0xEE0065646F736970;
    v12 = 0x8000000100437BC0;
    v13.super.isa = v10;
    v14 = 0;
    v15 = 0xE000000000000000;
    v16 = 0x4520656D75736552;
  }
  else
  {
    v11 = 0xD000000000000014;
    v19 = 0xED000065646F7369;
    v12 = 0x8000000100437BA0;
    v13.super.isa = v10;
    v14 = 0;
    v15 = 0xE000000000000000;
    v16 = 0x7045206573756150;
  }
LABEL_7:
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v11, (Swift::String_optional)0, v13, *(Swift::String *)&v14, *(Swift::String *)&v16)._countAndFlagsBits;

  sub_100007A28((uint64_t)v6, &qword_100559910);
  return countAndFlagsBits;
}

uint64_t sub_1002576F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v1 = sub_10003F544(&qword_100559910);
  v2 = __chkstk_darwin(v1);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v2);
  v6 = &v12[-v5 - 8];
  v7 = v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
  swift_beginAccess(v7, v12, 0, 0);
  sub_100258D5C(v7, (uint64_t)v6);
  v8 = type metadata accessor for EpisodePlayState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
    goto LABEL_6;
  sub_100258D5C((uint64_t)v6, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v8) != 3)
  {
    sub_100199364((uint64_t)v4);
    goto LABEL_6;
  }
  if ((v4[16] & 1) != 0)
  {
LABEL_6:
    v9 = 2036427888;
    goto LABEL_7;
  }
  v9 = 0x6573756170;
LABEL_7:
  sub_100007A28((uint64_t)v6, &qword_100559910);
  return v9;
}

uint64_t sub_10025782C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _BYTE v9[24];

  v1 = sub_10003F544(&qword_100559910);
  result = __chkstk_darwin(v1);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(_QWORD *)(v0 + 16);
  if (v5)
  {
    swift_retain();
    sub_100367F44();
    if ((v6 & 1) != 0)
    {
      sub_100257910(v5);
      swift_release(v5);
      v7 = v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
      swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state, v9, 33, 0);
      sub_100258D14((uint64_t)v4, v7);
      return swift_endAccess(v9);
    }
    else
    {
      return swift_release(v5);
    }
  }
  return result;
}

void sub_100257910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003F544(&qword_100555C48);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1002579CC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = sub_100368248(1);
  v2 = v1;
  if (v1[2])
  {
    v3 = v1[4];
    v4 = v1[5];
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v2);
    v5 = EpisodeStateController.stateMachine(for:)(v3, v4);
    swift_bridgeObjectRelease(v4);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v6);
    swift_release(v5);
    v7 = type metadata accessor for EpisodePlayState(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v0, 0, 1, v7);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v9 = type metadata accessor for EpisodePlayState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v0, 1, 1, v9);
  }
}

uint64_t sub_100257FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void (*v8)(__n128);
  __n128 v9;
  uint64_t v10;
  _BYTE v13[24];

  v1 = type metadata accessor for InteractionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(_QWORD *)(v0 + 16);
  if (!v5)
    goto LABEL_7;
  swift_retain();
  sub_100367F44();
  if ((v6 & 1) == 0)
  {
    swift_release(v5);
LABEL_7:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  swift_beginAccess(v0 + 24, v13, 0, 0);
  v7 = *(_QWORD *)(v0 + 24);
  if (v7)
  {
    v8 = *(void (**)(__n128))(*(_QWORD *)v7 + 168);
    v9 = swift_retain();
    v8(v9);
    v10 = swift_release(v7);
    v7 = InteractionContext.view.getter(v10);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    LOBYTE(v7) = static InteractionContext.View.== infix(_:_:)(v7, 3);
  }
  swift_release(v5);
  return v7 & 1;
}

uint64_t sub_1002580C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[6];
  _QWORD v28[3];

  v1 = v0;
  v2 = sub_10003F544(&qword_100555C48);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v3);
  v4 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_100559910);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v27 - v12;
  result = __chkstk_darwin(v11);
  v16 = (char *)v27 - v15;
  v17 = v1[2];
  if (!v17)
    return result;
  v27[5] = v6;
  swift_retain();
  sub_100257910(v18);
  v19 = (uint64_t)v1 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state, v28, 33, 0);
  sub_100258D14((uint64_t)v16, v19);
  swift_endAccess(v28);
  sub_100258D5C(v19, (uint64_t)v13);
  v20 = type metadata accessor for EpisodePlayState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v13, 1, v20) == 1)
LABEL_7:
    __asm { BR              X10 }
  sub_100258D5C((uint64_t)v13, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v20) != 3)
  {
    sub_100199364((uint64_t)v10);
    goto LABEL_7;
  }
  v21 = v17;
  v22 = v10[16];
  v23 = v1 + 4;
  v24 = v1;
  v25 = v1[7];
  v26 = v24[8];
  sub_10003A834(v23, v25);
  if (v22 == 1)
    dispatch thunk of EpisodeControllerProtocol.playPlayer()(v25, v26);
  else
    dispatch thunk of EpisodeControllerProtocol.pausePlayer()(v25, v26);
  swift_release(v21);
  return sub_100007A28((uint64_t)v13, &qword_100559910);
}

uint64_t sub_100258B3C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10003D380(v0 + 4);
  swift_release(v0[9]);
  sub_100007A28((uint64_t)v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state, &qword_100559910);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100258B94()
{
  return type metadata accessor for PlayEpisodeContextAction(0);
}

uint64_t type metadata accessor for PlayEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055CD38;
  if (!qword_10055CD38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayEpisodeContextAction);
  return result;
}

void sub_100258BD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1003D0818;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100258C68(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_100258C68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10055A470)
  {
    v2 = type metadata accessor for EpisodePlayState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10055A470);
  }
}

uint64_t sub_100258CC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for MetricsLabel.playEpisode(_:);
  v3 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_100258D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100559910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100258D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_100559910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100258DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(__n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v17[24];

  v1 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for InteractionContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(v0 + 56);
  if (v8)
  {
    swift_beginAccess(v0 + 64, v17, 0, 0);
    v9 = *(_QWORD *)(v0 + 64);
    if (v9)
    {
      v10 = *(void (**)(__n128))(*(_QWORD *)v9 + 168);
      swift_retain();
      v11 = swift_retain();
      v10(v11);
      v12 = swift_release(v9);
      InteractionContext.page.getter(v12);
      v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v14 = InteractionContext.Page.isEpisodePage.getter(v13);
      sub_10017603C((uint64_t)v3);
      if ((v14 & 1) != 0)
      {
        swift_release(v8);
        return 0;
      }
    }
    else
    {
      swift_retain();
    }
    __asm { BR              X10 }
  }
  return 0;
}

void sub_100258FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(__n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];

  v39 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v39);
  v1 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v2 = __chkstk_darwin(v1);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v41 = (char *)&v30 - v5;
  v6 = __chkstk_darwin(v4);
  v38 = (char *)&v30 - v7;
  __chkstk_darwin(v6);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  v43 = v9;
  v10 = __chkstk_darwin(v8);
  v35 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v36 = (char *)&v30 - v13;
  __chkstk_darwin(v12);
  v37 = (char *)&v30 - v14;
  v15 = type metadata accessor for PreviewingPresentationHint(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(qword_1005542D8);
  __chkstk_darwin(v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 56))
  {
    v44 = *(_QWORD *)(v0 + 56);
    swift_beginAccess(v0 + 64, v45, 0, 0);
    v22 = v44;
    v23 = *(_QWORD **)(v0 + 64);
    if (v23)
    {
      v33 = v15;
      v34 = v18;
      v32 = v16;
      v24 = v23[2];
      v25 = *(void (**)(__n128))(*v23 + 120);
      swift_retain();
      swift_retain();
      v26 = swift_retain();
      v25(v26);
      swift_release(v23);
      v27 = type metadata accessor for PresentationSource(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v21, 1, v27) == 1)
      {
        swift_release(v22);
        swift_release(v24);
        sub_100007A28((uint64_t)v21, qword_1005542D8);
      }
      else
      {
        v31 = v24;
        v29 = PresentationSource.viewController.getter();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v27);
        if (v29)
          __asm { BR              X9 }
        swift_release(v44);
        swift_release(v31);
      }
    }
  }
}

void sub_1002599E4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)MPCPlayerResponseItem.podcastEpisode.getter(v5);
  if (!v8)
    goto LABEL_10;
  v9 = v8;
  v10 = objc_msgSend(v8, "podcast");

  if (!v10)
    goto LABEL_10;
  v12 = MPModelObject.adamID.getter(v11);
  v14 = v13;

  if ((v14 & 1) != 0)
    goto LABEL_10;
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = MPCPlayerResponseItem.podcastEpisode.getter(v15);
  if (!v16 || (v17 = (void *)v16, v18 = MPModelObject.adamID.getter(v16), v20 = v19, v17, (v20 & 1) != 0))
  {
LABEL_10:
    v24 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
    return;
  }
  if (v18 < 0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "episodeUrlForPodcastStoreId:episodeStoreId:", v12, v18);
  if (v21)
  {
    v22 = v21;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v23 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 0, 1, v23);
  }
  else
  {
    v25 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v7, 1, 1, v25);
  }
  sub_1001C9998((uint64_t)v7, a1);
}

uint64_t sub_100259B9C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_10003D380(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[13]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel;
  v2 = type metadata accessor for MetricsLabel(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100259C14()
{
  return type metadata accessor for GoToEpisodeContextAction(0);
}

uint64_t type metadata accessor for GoToEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_10055CE98;
  if (!qword_10055CE98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GoToEpisodeContextAction);
  return result;
}

uint64_t sub_100259C58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "(";
  v4[1] = &unk_1003D08E8;
  v4[2] = &unk_1003D08E8;
  v4[3] = &unk_1003D0900;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_1003D0918;
  result = type metadata accessor for MetricsLabel(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_1003D0930;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100259D04()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 56));
}

uint64_t sub_100259D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  return swift_release(v2);
}

uint64_t sub_100259D1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t sub_100259D48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel;
  v4 = type metadata accessor for MetricsLabel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100259D8C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_contextActionType);
}

uint64_t sub_100259DA4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100259DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 64, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;
  return swift_release(v3);
}

uint64_t (*sub_100259E1C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 64, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_100259E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055CF58;
  if (!qword_10055CF58)
  {
    v1 = objc_opt_self(MTURLResolver);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10055CF58);
  }
  return result;
}

double sub_100259E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(__n128);
  uint64_t v16;
  __n128 v17;
  double result;
  _BYTE v19[16];
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = v2;
  v6 = sub_10003F544(&qword_10055CFC8);
  __chkstk_darwin(v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for EpisodeDownloadState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v25 = v3;
  v20 = a1;
  v21 = v8;
  v22 = a2;
  v23 = v3;
  v24 = &v26;
  v10 = type metadata accessor for DownloadingEpisodeStateDataSource();
  v12 = sub_100005E40(&qword_10055CFC0, v11, (uint64_t (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource, (uint64_t)&unk_1003D0A78);
  SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)(sub_10025AE28, v19, v10, v12);
  v13 = v26;
  if (v26[2])
  {
    v14 = v3 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates;
    v15 = *(void (**)(__n128))(v3
                                        + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 8);
      sub_10002CA20((uint64_t)v15, v16);
      v17 = swift_bridgeObjectRetain(v13);
      v15(v17);
      sub_10002CA30((uint64_t)v15, v16);
      swift_bridgeObjectRelease(v13);
    }
  }
  sub_100007A28((uint64_t)v8, &qword_10055CFC8);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v26).n128_u64[0];
  return result;
}

uint64_t sub_100259FEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __n128 v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  __n128 v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  char v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  int64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v123;
  uint64_t v124;
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v126;
  int64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _BYTE v130[24];
  _QWORD v131[4];

  v111 = a5;
  v128 = a2;
  v118 = sub_10003F544(&qword_10055CFD0);
  __chkstk_darwin(v118);
  v9 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EpisodeDownloadState(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v108 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v117 = (char *)&v107 - v14;
  v15 = sub_10003F544(&qword_10055CFC8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v20 = __chkstk_darwin(v19);
  v110 = (char *)&v107 - v21;
  v22 = __chkstk_darwin(v20);
  v119 = (uint64_t)&v107 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v107 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v107 - v27;
  v121 = v29;
  switch(a1)
  {
    case 0:
    case 3:
    case 5:
      objc_msgSend(a3, "percentComplete");
      *(_QWORD *)v28 = v30;
      v28[8] = 0;
      goto LABEL_5;
    case 1:
    case 2:
      v31 = v128;
      sub_100007A28(v128, &qword_10055CFC8);
      v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v122(v31, 1, 1, v10);
      goto LABEL_6;
    case 4:
      objc_msgSend(a3, "percentComplete");
      *(_QWORD *)v28 = v33;
      v28[8] = 1;
LABEL_5:
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v28, enum case for EpisodeDownloadState.downloading(_:), v10);
      v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v122((uint64_t)v28, 0, 1, v10);
      sub_10025AE80((uint64_t)v28, v128);
LABEL_6:
      swift_getObjectType(a3, v32);
      v34 = sub_10025AAE8();
      v35 = *(_QWORD *)(v34 + 56);
      v112 = v34 + 56;
      v120 = v34;
      v36 = 1 << *(_BYTE *)(v34 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & v35;
      v123 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_expectedEpisodeStates);
      v39 = swift_beginAccess(a4 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_expectedEpisodeStates, v131, 0, 0);
      v40 = 0;
      v113 = (unint64_t)(v36 + 63) >> 6;
      v115 = v18;
      v116 = v10;
      v41 = v11;
      v124 = v11;
      v114 = v26;
      v109 = v9;
      break;
    default:
      goto LABEL_71;
  }
  while (1)
  {
    if (v38)
    {
      v126 = (v38 - 1) & v38;
      v127 = v40;
      v42 = __clz(__rbit64(v38)) | (v40 << 6);
      v43 = v41;
      v44 = v123;
      goto LABEL_28;
    }
    v45 = v40 + 1;
    if (__OFADD__(v40, 1))
      goto LABEL_67;
    v43 = v41;
    v44 = v123;
    if (v45 >= v113)
      return swift_release(v120);
    v46 = *(_QWORD *)(v112 + 8 * v45);
    v47 = v40 + 1;
    if (!v46)
    {
      v47 = v40 + 2;
      if (v40 + 2 >= v113)
        return swift_release(v120);
      v46 = *(_QWORD *)(v112 + 8 * v47);
      if (!v46)
      {
        v47 = v40 + 3;
        if (v40 + 3 >= v113)
          return swift_release(v120);
        v46 = *(_QWORD *)(v112 + 8 * v47);
        if (!v46)
        {
          v48 = v40 + 4;
          if (v40 + 4 >= v113)
            return swift_release(v120);
          v46 = *(_QWORD *)(v112 + 8 * v48);
          if (!v46)
          {
            while (1)
            {
              v47 = v48 + 1;
              if (__OFADD__(v48, 1))
                goto LABEL_69;
              if (v47 >= v113)
                return swift_release(v120);
              v46 = *(_QWORD *)(v112 + 8 * v47);
              ++v48;
              if (v46)
                goto LABEL_27;
            }
          }
          v47 = v40 + 4;
        }
      }
    }
LABEL_27:
    v126 = (v46 - 1) & v46;
    v127 = v47;
    v42 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_28:
    v49 = *(_QWORD *)(v120 + 48) + 24 * v42;
    a1 = *(_QWORD *)v49;
    v50 = *(_QWORD *)(v49 + 8);
    v51 = *(_BYTE *)(v49 + 16);
    v52 = *v44;
    if (*(_QWORD *)(*v44 + 16))
    {
      sub_10003CAD8(a1, v50, v51);
      sub_10003CAD8(a1, v50, v51);
      swift_bridgeObjectRetain(v52);
      v53 = sub_1001CD1C8(a1, v50, v51);
      if ((v54 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v26, *(_QWORD *)(v52 + 56) + *(_QWORD *)(v43 + 72) * v53, v10);
        v55 = v26;
        v56 = 0;
      }
      else
      {
        v55 = v26;
        v56 = 1;
      }
      v122((uint64_t)v55, v56, 1, v10);
      swift_bridgeObjectRelease(v52);
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v122)(v26, 1, 1, v10, v39);
      sub_10003CAD8(a1, v50, v51);
      sub_10003CAD8(a1, v50, v51);
    }
    v57 = v119;
    sub_10025AE38(v128, v119);
    v58 = swift_beginAccess(v44, v130, 33, 0);
    v125 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v43 + 48);
    if (v125(v57, 1, v10, v58) == 1)
    {
      sub_100007A28(v57, &qword_10055CFC8);
      v59 = *v44;
      swift_bridgeObjectRetain(*v44);
      v60 = sub_1001CD1C8(a1, v50, v51);
      v62 = v61;
      v63 = swift_bridgeObjectRelease(v59);
      if ((v62 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v44);
        v65 = *v44;
        v129 = (_QWORD *)*v44;
        *v44 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10021E4D8();
          v65 = (uint64_t)v129;
        }
        sub_10003CA84(*(_QWORD *)(*(_QWORD *)(v65 + 48) + 24 * v60), *(_QWORD *)(*(_QWORD *)(v65 + 48) + 24 * v60 + 8), *(_BYTE *)(*(_QWORD *)(v65 + 48) + 24 * v60 + 16));
        v66 = v110;
        v10 = v116;
        (*(void (**)(char *, unint64_t, uint64_t))(v43 + 32))(v110, *(_QWORD *)(v65 + 56) + *(_QWORD *)(v43 + 72) * v60, v116);
        sub_10021B6BC(v60, v65);
        v67 = *v44;
        *v44 = v65;
        v68 = (uint64_t)v66;
        v69 = swift_bridgeObjectRelease(v67);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t, __n128))v122)(v66, 0, 1, v10, v69);
        v26 = v114;
      }
      else
      {
        v68 = (uint64_t)v110;
        v10 = v116;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v122)(v110, 1, 1, v116, v63);
      }
      sub_10003CA84(a1, v50, v51);
      sub_100007A28(v68, &qword_10055CFC8);
      v82 = v118;
    }
    else
    {
      v70 = v118;
      v71 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
      v71(v117, v57, v10);
      v72 = swift_isUniquelyReferenced_nonNull_native(*v44);
      v129 = (_QWORD *)*v44;
      v73 = v129;
      *v44 = 0x8000000000000000;
      v75 = sub_1001CD1C8(a1, v50, v51);
      v76 = v73[2];
      v77 = (v74 & 1) == 0;
      v78 = v76 + v77;
      if (__OFADD__(v76, v77))
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EpisodeStateIdentifier);
        __break(1u);
LABEL_71:
        type metadata accessor for LegacyDownloadPhase(0);
        v131[0] = a1;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v106, v131, v106, &type metadata for Int);
        __break(1u);
        JUMPOUT(0x10025AAD0);
      }
      v79 = v74;
      if (v73[3] >= v78)
      {
        if ((v72 & 1) == 0)
          sub_10021E4D8();
      }
      else
      {
        sub_100218C84(v78, v72);
        v80 = sub_1001CD1C8(a1, v50, v51);
        if ((v79 & 1) != (v81 & 1))
          goto LABEL_70;
        v75 = v80;
      }
      v10 = v116;
      v83 = v129;
      if ((v79 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v124 + 40))(v129[7] + *(_QWORD *)(v124 + 72) * v75, v117, v116);
      }
      else
      {
        v129[(v75 >> 6) + 8] |= 1 << v75;
        v84 = v83[6] + 24 * v75;
        *(_QWORD *)v84 = a1;
        *(_QWORD *)(v84 + 8) = v50;
        *(_BYTE *)(v84 + 16) = v51;
        v71((char *)(v83[7] + *(_QWORD *)(v124 + 72) * v75), (uint64_t)v117, v10);
        v85 = v83[2];
        v86 = __OFADD__(v85, 1);
        v87 = v85 + 1;
        if (v86)
          goto LABEL_68;
        v83[2] = v87;
        sub_10003CAD8(a1, v50, v51);
      }
      v88 = *v123;
      *v123 = (uint64_t)v129;
      swift_bridgeObjectRelease(v88);
      sub_10003CA84(a1, v50, v51);
      v82 = v70;
      v9 = v109;
      v43 = v124;
      v26 = v114;
    }
    v89 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v125;
    swift_endAccess(v130);
    v90 = v121;
    sub_10025AE38(v128, v121);
    v91 = (uint64_t)&v9[*(int *)(v82 + 48)];
    sub_10025AE38((uint64_t)v26, (uint64_t)v9);
    sub_10025AE38(v90, v91);
    if (v89((uint64_t)v9, 1, v10) == 1)
    {
      sub_100007A28(v90, &qword_10055CFC8);
      if (v89(v91, 1, v10) == 1)
      {
        v41 = v43;
        sub_100007A28((uint64_t)v9, &qword_10055CFC8);
LABEL_10:
        sub_100007A28((uint64_t)v26, &qword_10055CFC8);
        sub_10003CA84(a1, v50, v51);
        goto LABEL_11;
      }
      goto LABEL_57;
    }
    v92 = (uint64_t)v115;
    sub_10025AE38((uint64_t)v9, (uint64_t)v115);
    if (v89(v91, 1, v10) == 1)
    {
      sub_100007A28(v121, &qword_10055CFC8);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v92, v10);
LABEL_57:
      sub_100007A28((uint64_t)v9, &qword_10055CFD0);
      goto LABEL_58;
    }
    v100 = v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v108, v91, v10);
    v101 = sub_100005E40(&qword_10055CFD8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeDownloadState, (uint64_t)&protocol conformance descriptor for EpisodeDownloadState);
    v102 = dispatch thunk of static Equatable.== infix(_:_:)(v115, v100, v10, v101);
    v41 = v43;
    v103 = *(void (**)(char *, uint64_t))(v43 + 8);
    v104 = v100;
    v26 = v114;
    v103(v104, v10);
    sub_100007A28(v121, &qword_10055CFC8);
    v103(v115, v10);
    sub_100007A28((uint64_t)v9, &qword_10055CFC8);
    if ((v102 & 1) != 0)
      goto LABEL_10;
LABEL_58:
    v93 = v111;
    v94 = (_QWORD *)*v111;
    v95 = swift_isUniquelyReferenced_nonNull_native(*v111);
    *v93 = v94;
    v96 = v9;
    if ((v95 & 1) == 0)
    {
      v94 = sub_10003CAE8(0, v94[2] + 1, 1, v94);
      *v111 = v94;
    }
    v98 = v94[2];
    v97 = v94[3];
    if (v98 >= v97 >> 1)
    {
      v94 = sub_10003CAE8((_QWORD *)(v97 > 1), v98 + 1, 1, v94);
      *v111 = v94;
    }
    v94[2] = v98 + 1;
    v99 = &v94[3 * v98];
    v99[4] = a1;
    v99[5] = v50;
    *((_BYTE *)v99 + 48) = v51;
    sub_100007A28((uint64_t)v26, &qword_10055CFC8);
    v41 = v124;
    v9 = v96;
LABEL_11:
    v38 = v126;
    v40 = v127;
  }
}

uint64_t sub_10025AAE8()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = objc_msgSend(v0, "episodeUuid");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = objc_msgSend(v1, "storeItemId");
  v8 = v7;
  if (v7)
  {
    v9 = v7;
    v10 = AdamID.init(rawValue:)(objc_msgSend(v9, "unsignedLongLongValue"));

  }
  else
  {
    v10 = 0;
  }
  v11 = static EpisodeStateIdentifier.generateIdsFrom(uuid:contentId:)(v4, v6, v10, v8 == 0);
  swift_bridgeObjectRelease(v6);
  return v11;
}

id sub_10025ABF0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DownloadingEpisodeStateDataSource();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10025AC8C()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_expectedEpisodeStates);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

id sub_10025ACD8()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_accessQueue);
}

double sub_10025ACEC(uint64_t a1, uint64_t a2)
{
  return sub_100259E94(a1, a2);
}

uint64_t sub_10025AD0C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates);
  v2 = *v1;
  sub_10002CA20(*v1, v1[1]);
  return v2;
}

uint64_t (*sub_10025AD4C(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  a1[2] = *v1;
  v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates);
  v5 = *v4;
  v6 = v4[1];
  *a1 = *v4;
  a1[1] = v6;
  sub_10002CA20(v5, v6);
  return sub_10025AD94;
}

uint64_t sub_10025AD94(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) == 0)
    return sub_1000129F4(*a1, v3);
  sub_10002CA20(*a1, v3);
  sub_1000129F4(v2, v3);
  return sub_10002CA30(v2, v3);
}

uint64_t sub_10025ADFC(uint64_t a1, uint64_t a2)
{
  return sub_100005E40(&qword_100554088, a2, (uint64_t (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource, (uint64_t)&unk_1003D0A04);
}

uint64_t sub_10025AE28()
{
  uint64_t v0;

  return sub_100259FEC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD **)(v0 + 48));
}

uint64_t sub_10025AE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055CFC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10025AE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10003F544(&qword_10055CFC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id MTDebugActionTestCategory.__allocating_init(name:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v11 = &v9[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title];
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, "init");
}

id MTDebugActionTestCase.__allocating_init(category:name:title:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  objc_super v21;

  v15 = (char *)objc_allocWithZone(v7);
  v16 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category];
  *((_QWORD *)v16 + 3) = type metadata accessor for MTDebugActionTestCategory();
  *((_QWORD *)v16 + 4) = sub_10025B704();
  *(_QWORD *)v16 = a1;
  v17 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name];
  *(_QWORD *)v17 = a2;
  *((_QWORD *)v17 + 1) = a3;
  v18 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title];
  *(_QWORD *)v18 = a4;
  *((_QWORD *)v18 + 1) = a5;
  v19 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler];
  *(_QWORD *)v19 = a6;
  *((_QWORD *)v19 + 1) = a7;
  v21.receiver = v15;
  v21.super_class = v7;
  return objc_msgSendSuper2(&v21, "init");
}

uint64_t MTDebugActionTestCategory.name.getter()
{
  return sub_10025B3C8(&OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name);
}

uint64_t MTDebugActionTestCategory.name.setter(uint64_t a1, uint64_t a2)
{
  return sub_10025B580(a1, a2, &OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*MTDebugActionTestCategory.name.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t MTDebugActionTestCategory.title.getter()
{
  return sub_10025B3C8(&OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title);
}

uint64_t MTDebugActionTestCategory.title.setter(uint64_t a1, uint64_t a2)
{
  return sub_10025B580(a1, a2, &OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*MTDebugActionTestCategory.title.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title, a1, 33, 0);
  return j_j__swift_endAccess;
}

id MTDebugActionTestCategory.init(name:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = &v4[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  v6 = &v4[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title];
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for MTDebugActionTestCategory();
  return objc_msgSendSuper2(&v8, "init");
}

void MTDebugActionTestCategory.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.MTDebugActionTestCategory", 34, "init()", 6, 0);
  __break(1u);
}

id MTDebugActionTestCategory.__deallocating_deinit()
{
  return sub_1001B06F4(type metadata accessor for MTDebugActionTestCategory);
}

uint64_t sub_10025B24C(uint64_t a1, uint64_t a2)
{
  return sub_10025BA0C(a1, a2, &OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name);
}

uint64_t sub_10025B258(uint64_t a1, uint64_t a2)
{
  return sub_10025BA0C(a1, a2, &OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title);
}

uint64_t MTDebugActionTestCase.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10000A520(v3, a1);
}

uint64_t MTDebugActionTestCase.category.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category);
  swift_beginAccess(v3, v5, 33, 0);
  sub_10003D380(v3);
  sub_10002099C(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*MTDebugActionTestCase.category.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t MTDebugActionTestCase.testName.getter()
{
  return sub_10025B3C8(&OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name);
}

uint64_t MTDebugActionTestCase.name.setter(uint64_t a1, uint64_t a2)
{
  return sub_10025B580(a1, a2, &OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*MTDebugActionTestCase.name.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t MTDebugActionTestCase.testTitle.getter()
{
  return sub_10025B3C8(&OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title);
}

uint64_t sub_10025B3C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v5, 0, 0);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t MTDebugActionTestCase.title.setter(uint64_t a1, uint64_t a2)
{
  return sub_10025B580(a1, a2, &OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*MTDebugActionTestCase.title.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t MTDebugActionTestCase.categoryName.getter()
{
  return sub_10025B488((uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of DebugActionTestCategoryProtocol.name.getter);
}

uint64_t MTDebugActionTestCase.categoryTitle.getter()
{
  return sub_10025B488((uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of DebugActionTestCategoryProtocol.title.getter);
}

uint64_t sub_10025B488(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category;
  swift_beginAccess(v3, &v8, 0, 0);
  sub_10000A520(v3, (uint64_t)v9);
  v4 = v10;
  v5 = v11;
  sub_10003A834(v9, v10);
  v6 = a1(v4, v5);
  sub_10003D380(v9);
  return v6;
}

uint64_t MTDebugActionTestCase.handler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler, v4, 0, 0);
  v2 = *v1;
  swift_retain(v1[1]);
  return v2;
}

uint64_t MTDebugActionTestCase.handler.setter(uint64_t a1, uint64_t a2)
{
  return sub_10025B580(a1, a2, &OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler, (uint64_t (*)(uint64_t))&_swift_release);
}

uint64_t sub_10025B580(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];

  v8 = (_QWORD *)(v4 + *a3);
  swift_beginAccess(v8, v11, 1, 0);
  v9 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return a4(v9);
}

uint64_t (*MTDebugActionTestCase.handler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler, a1, 33, 0);
  return j_j__swift_endAccess;
}

id MTDebugActionTestCase.init(category:name:title:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  objc_super v20;

  v15 = &v7[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category];
  *((_QWORD *)v15 + 3) = type metadata accessor for MTDebugActionTestCategory();
  *((_QWORD *)v15 + 4) = sub_10025B704();
  *(_QWORD *)v15 = a1;
  v16 = &v7[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name];
  *(_QWORD *)v16 = a2;
  *((_QWORD *)v16 + 1) = a3;
  v17 = &v7[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title];
  *(_QWORD *)v17 = a4;
  *((_QWORD *)v17 + 1) = a5;
  v18 = &v7[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler];
  *(_QWORD *)v18 = a6;
  *((_QWORD *)v18 + 1) = a7;
  v20.receiver = v7;
  v20.super_class = (Class)type metadata accessor for MTDebugActionTestCase();
  return objc_msgSendSuper2(&v20, "init");
}

uint64_t type metadata accessor for MTDebugActionTestCategory()
{
  return objc_opt_self(_TtC8Podcasts25MTDebugActionTestCategory);
}

unint64_t sub_10025B704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100553CE0;
  if (!qword_100553CE0)
  {
    v1 = type metadata accessor for MTDebugActionTestCategory();
    result = swift_getWitnessTable(&protocol conformance descriptor for MTDebugActionTestCategory, v1);
    atomic_store(result, (unint64_t *)&qword_100553CE0);
  }
  return result;
}

uint64_t type metadata accessor for MTDebugActionTestCase()
{
  return objc_opt_self(_TtC8Podcasts21MTDebugActionTestCase);
}

Swift::Void __swiftcall MTDebugActionTestCase.perform()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)();
  _BYTE v4[24];

  v1 = v0 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler, v4, 0, 0);
  v3 = *(void (**)())v1;
  v2 = *(_QWORD *)(v1 + 8);
  swift_retain(v2);
  v3();
  swift_release(v2);
}

void MTDebugActionTestCase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Podcasts.MTDebugActionTestCase", 30, "init()", 6, 0);
  __break(1u);
}

id MTDebugActionTestCase.__deallocating_deinit()
{
  return sub_1001B06F4(type metadata accessor for MTDebugActionTestCase);
}

uint64_t sub_10025B9A0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *v1 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10000A520(v3, a1);
}

uint64_t sub_10025B9F4(uint64_t a1, uint64_t a2)
{
  return sub_10025BA0C(a1, a2, &OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name);
}

uint64_t sub_10025BA00(uint64_t a1, uint64_t a2)
{
  return sub_10025BA0C(a1, a2, &OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title);
}

uint64_t sub_10025BA0C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(*v3 + *a3);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = *v4;
  swift_bridgeObjectRetain(v4[1]);
  return v5;
}

uint64_t sub_10025BA60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  _BYTE v6[24];

  v1 = *v0;
  v2 = *v0 + OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler;
  swift_beginAccess(v2, v6, 0, 0);
  v4 = *(void (**)(uint64_t))v2;
  v3 = *(_QWORD *)(v2 + 8);
  swift_retain(v3);
  v4(v1);
  return swift_release(v3);
}

uint64_t sub_10025BAC8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10025BAF0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MTNotificationSettingsPresentationController()), "init");
  qword_100572F28 = (uint64_t)result;
  return result;
}

Swift::Void __swiftcall MTNotificationSettingsPresentationController.presentModal(highlightedPodcastUuid:)(Swift::String_optional highlightedPodcastUuid)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  id Strong;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  object = highlightedPodcastUuid.value._object;
  countAndFlagsBits = highlightedPodcastUuid.value._countAndFlagsBits;
  v4 = type metadata accessor for FlowPresentationHints(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FlowDestination(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Strong = (id)swift_unknownObjectWeakLoadStrong(v1+ OBJC_IVAR____TtC8Podcasts44MTNotificationSettingsPresentationController_activePresentedSettingsViewController);
  if (Strong)
  {
    if (object)
    {
      v17 = Strong;
      sub_1001A90E8(countAndFlagsBits, (uint64_t)object, 1);

      Strong = v17;
    }

  }
  else
  {
    *v11 = countAndFlagsBits;
    v11[1] = (uint64_t)object;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for FlowDestination.notificationSettings(_:), v8);
    v13 = (void *)UIApp;
    if (UIApp)
    {
      swift_bridgeObjectRetain(object);
      v14 = v13;
      UIResponder.nearestFlowController.getter(v18);

      v15 = v19;
      if (v19)
      {
        v16 = v20;
        sub_10003A834(v18, v19);
        static FlowPresentationHints.modalFormSheet.getter();
        dispatch thunk of FlowController.show(destination:hints:referrer:)(v11, v7, 0, 0, v15, v16);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
        sub_10003D380(v18);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
        sub_1001CA288((uint64_t)v18);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

id MTNotificationSettingsPresentationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTNotificationSettingsPresentationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MTNotificationSettingsPresentationController()
{
  return objc_opt_self(_TtC8Podcasts44MTNotificationSettingsPresentationController);
}

void sub_10025BEB8(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[3];

  v3 = 0;
  v17[2] = a2;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10002B270(v17, v12, v13);
    swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10025C034()
{
  uint64_t (*v0)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  NSURL *v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  NSString v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  double v71;
  NSString v72;
  char *v73;
  id v74;
  uint64_t v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  id v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  NSString v88;
  id v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  NSString v93;
  id v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  NSString v98;
  char *v99;
  id v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, uint64_t);
  NSString v107;
  id v108;
  uint64_t v109;
  Class isa;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  __n128 v126;
  char *v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  __n128 v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  id v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  NSString v165;
  id v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v180;
  void (*v181)(char *, _QWORD, uint64_t, uint64_t);
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (*v198)(_QWORD, _QWORD, _QWORD);
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;

  v1 = v0;
  v2 = sub_10003F544((uint64_t *)&unk_100562BF0);
  __chkstk_darwin(v2);
  v186 = (char *)&v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10003F544(&qword_10055D840);
  __chkstk_darwin(v4);
  v6 = (char *)&v180 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055D198);
  __chkstk_darwin(v7);
  v9 = (char *)&v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v187 = (char *)&v180 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for EpisodeOffer(0);
  v200 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v199 = (char *)&v180 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003F544(&qword_1005522F0);
  v15 = __chkstk_darwin(v14);
  v191 = (char *)&v180 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v202 = (char *)&v180 - v17;
  v18 = type metadata accessor for ShowOffer(0);
  v196 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v194 = (char *)&v180 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v192 = (char *)&v180 - v22;
  v23 = __chkstk_darwin(v21);
  v190 = (char *)&v180 - v24;
  v25 = __chkstk_darwin(v23);
  v188 = (char *)&v180 - v26;
  v27 = __chkstk_darwin(v25);
  v201 = (char *)&v180 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v180 - v29;
  v31 = sub_10003F544((uint64_t *)&unk_100553DC0);
  v32 = __chkstk_darwin(v31);
  v189 = (char *)&v180 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v195 = (char *)&v180 - v35;
  v36 = __chkstk_darwin(v34);
  v193 = (char *)&v180 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v180 - v39;
  v41 = EpisodeOffer.mediaType.getter(v38);
  if (v41 == 3)
    goto LABEL_7;
  v198 = v0;
  v43 = v18;
  v44 = v9;
  v45 = v6;
  v46 = v11;
  v47 = v10;
  v48 = EpisodeMediaType.rawValue.getter(v41);
  v50 = v49;
  v52 = EpisodeMediaType.rawValue.getter(2);
  v53 = v51;
  if (v48 != v52 || v50 != v51)
  {
    v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, v52, v51, 0);
    swift_bridgeObjectRelease(v50);
    v42 = swift_bridgeObjectRelease(v53);
    v10 = v47;
    v11 = v46;
    v6 = v45;
    v9 = v44;
    v18 = v43;
    v1 = v198;
    if ((v54 & 1) != 0)
      return 0;
LABEL_7:
    EpisodeOffer.streamUrl.getter(v42);
    v181 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v181(v40, 0, 1, v10);
    v198 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v11 + 48);
    v55 = v198(v40, 1, v10);
    v185 = v11;
    if (v55 == 1)
    {
      v57 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v56);
      v57 = v58;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v40, v10);
    }
    v59 = objc_msgSend(objc_allocWithZone((Class)MTPlayerItem), "initWithUrl:", v57);

    v60 = v59;
    v61 = EpisodeOffer.priceType.getter();
    v62 = (id)NSPersistentStringForMTEpisodePriceType(v61);
    if (!v62)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v65 = v64;
      v62 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v63 = swift_bridgeObjectRelease(v65).n128_u64[0];
    }
    objc_msgSend(v60, "setPriceType:", v62, v63);

    v66 = v60;
    v67 = EpisodeOffer.showOffer.getter(v66);
    ShowOffer.displayType.getter(v67);
    v69 = v68;
    v70 = *(void (**)(char *, uint64_t))(v196 + 8);
    v70(v30, v18);
    if (v69)
    {
      v72 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v71 = swift_bridgeObjectRelease(v69).n128_u64[0];
    }
    else
    {
      v72 = 0;
    }
    v73 = v202;
    objc_msgSend(v66, "setPodcastDisplayType:", v72, v71);

    v74 = v66;
    v75 = EpisodeOffer.contentId.getter(v74);
    if (v75 < 0)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(v74, "setEpisodeStoreId:", v75);

      v76 = v74;
      v202 = (char *)v70;
      v77 = v201;
      v78 = EpisodeOffer.showOffer.getter(v76);
      v79 = ShowOffer.adamId.getter(v78);
      ((void (*)(char *, uint64_t))v202)(v77, v18);
      if ((v79 & 0x8000000000000000) == 0)
      {
        objc_msgSend(v76, "setPodcastStoreId:", v79);

        v80 = v76;
        EpisodeOffer.title.getter(v80);
        v82 = v81;
        v83 = String._bridgeToObjectiveC()();
        objc_msgSend(v80, "setTitle:", v83, swift_bridgeObjectRelease(v82).n128_f64[0]);

        type metadata accessor for CoreDataFetcher(0);
        v84 = v80;
        static CoreDataFetcher.episodeUuid(for:)(v1);
        if (v85)
        {
          v87 = v85;
          v88 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v86 = swift_bridgeObjectRelease(v87).n128_u64[0];
        }
        else
        {
          v88 = 0;
        }
        objc_msgSend(v84, "setEpisodeUuid:", v88, v86);

        v89 = v84;
        EpisodeOffer.guid.getter();
        if (v90)
        {
          v92 = v90;
          v93 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v91 = swift_bridgeObjectRelease(v92).n128_u64[0];
        }
        else
        {
          v93 = 0;
        }
        objc_msgSend(v89, "setEpisodeGuid:", v93, v91);

        v94 = v89;
        EpisodeOffer.summary.getter();
        v182 = v9;
        if (v95)
        {
          v97 = v95;
          v98 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v96 = swift_bridgeObjectRelease(v97).n128_u64[0];
        }
        else
        {
          v98 = 0;
        }
        v99 = v6;
        objc_msgSend(v94, "setSubtitle:", v98, v96);

        v100 = v94;
        v101 = v201;
        v102 = EpisodeOffer.showOffer.getter(v100);
        ShowOffer.title.getter(v102);
        v104 = v103;
        v105 = v101;
        v106 = (void (*)(char *, uint64_t))v202;
        ((void (*)(char *, uint64_t))v202)(v105, v18);
        v107 = String._bridgeToObjectiveC()();
        objc_msgSend(v100, "setAuthor:", v107, swift_bridgeObjectRelease(v104).n128_f64[0]);

        v108 = v100;
        v109 = EpisodeOffer.releaseDate.getter();
        isa = (Class)v109;
        if (v109)
        {
          LazyDate.value.getter(v109);
          swift_release(isa);
          v111 = type metadata accessor for Date(0);
          v112 = *(_QWORD *)(v111 - 8);
          isa = 0;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v73, 1, v111) != 1)
          {
            isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v112 + 8))(v73, v111);
          }
        }
        else
        {
          v113 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v73, 1, 1, v113);
        }
        objc_msgSend(v108, "setPubDate:", isa);

        v114 = v108;
        v115 = EpisodeOffer.contentRating.getter(v114);
        v184 = v10;
        v183 = v99;
        if (v115 == 2)
        {
          v116 = v197;
          v117 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v200 + 16))(v199, v1, v197);
        }
        else
        {
          v118 = ContentRating.rawValue.getter(v115 & 1);
          v120 = v119;
          v122 = ContentRating.rawValue.getter(1);
          v123 = v121;
          if (v118 == v122 && v120 == v121)
          {
            swift_bridgeObjectRelease_n(v120, 2);
            v116 = v197;
            (*(void (**)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v200 + 16))(v199, v1, v197);
            v124 = 1;
            goto LABEL_44;
          }
          v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v118, v120, v122, v121, 0);
          swift_bridgeObjectRelease(v120);
          v126 = swift_bridgeObjectRelease(v123);
          v116 = v197;
          v117 = (*(uint64_t (**)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t, __n128))(v200 + 16))(v199, v1, v197, v126);
          if ((v125 & 1) != 0)
          {
            v124 = 1;
            goto LABEL_44;
          }
        }
        v127 = v188;
        v128 = EpisodeOffer.showOffer.getter(v117);
        v129 = ShowOffer.contentRating.getter(v128);
        if (v129 == 2)
        {
          v124 = 0;
        }
        else
        {
          v130 = ContentRating.rawValue.getter(v129 & 1);
          v132 = v131;
          v124 = 1;
          v134 = ContentRating.rawValue.getter(1);
          v135 = v133;
          if (v130 != v134 || (v136 = v132, v132 != v133))
          {
            v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v130, v132, v134, v133, 0);
            v136 = v135;
          }
          swift_bridgeObjectRelease(v132);
          swift_bridgeObjectRelease(v136);
          v116 = v197;
          v127 = v188;
        }
        v106(v127, v18);
LABEL_44:
        (*(void (**)(char *, uint64_t))(v200 + 8))(v199, v116);
        objc_msgSend(v114, "setIsExplicit:", v124 & 1);

        v137 = v114;
        objc_msgSend(v137, "setEntitled:", EpisodeOffer.isEntitledOffer.getter() & 1);

        v139 = EpisodeOffer.seasonNumber.getter(v138);
        if ((v140 & 1) != 0)
          v141 = 0;
        else
          v141 = v139;
        v142 = EpisodeOffer.episodeNumber.getter();
        if ((v143 & 1) != 0)
          v144 = 0;
        else
          v144 = v142;
        v145 = v137;
        v146 = v190;
        v147 = EpisodeOffer.showOffer.getter(v145);
        v148 = ShowOffer.showType.getter(v147) & 1;
        v200 = v18;
        v106(v146, v18);
        v149 = ShowType.rawValue.getter(v148);
        v151 = v150;
        v152 = 1;
        v154 = ShowType.rawValue.getter(1);
        v155 = v153;
        if (v149 != v154 || (v156 = v151, v151 != v153))
        {
          v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v149, v151, v154, v153, 0);
          v156 = v155;
        }
        swift_bridgeObjectRelease(v151);
        v157 = objc_msgSend(v145, "pubDate", swift_bridgeObjectRelease(v156).n128_f64[0]);
        if (v157)
        {
          v158 = v157;
          v159 = (uint64_t)v191;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v157);

          v160 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 56))(v159, 0, 1, v160);
        }
        else
        {
          v161 = type metadata accessor for Date(0);
          v159 = (uint64_t)v191;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v191, 1, 1, v161);
        }
        type metadata accessor for AlbumStringBuilder(0);
        static AlbumStringBuilder.albumString(podcastTitle:episodeNumber:seasonNumber:isSerialType:pubDate:)(0, 0, v144, v141, v152 & 1, v159);
        v163 = v162;
        sub_100007A28(v159, &qword_1005522F0);
        if (v163)
        {
          v165 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v164 = swift_bridgeObjectRelease(v163).n128_u64[0];
        }
        else
        {
          v165 = 0;
        }
        objc_msgSend(v145, "setAlbum:", v165, v164);

        objc_msgSend(v145, "setSeasonNumber:", v141);
        objc_msgSend(v145, "setEpisodeNumber:", v144);
        v166 = v145;
        v167 = v192;
        v168 = EpisodeOffer.showOffer.getter(v166);
        v169 = ShowOffer.showType.getter(v168) & 1;
        ((void (*)(char *, uint64_t))v202)(v167, v200);
        v170 = ShowType.rawValue.getter(v169);
        v172 = v171;
        v173 = 1;
        v175 = ShowType.rawValue.getter(1);
        v176 = v174;
        if (v170 != v175 || (v177 = v172, v172 != v174))
        {
          v173 = _stringCompareWithSmolCheck(_:_:expecting:)(v170, v172, v175, v174, 0);
          v177 = v176;
        }
        swift_bridgeObjectRelease(v172);
        objc_msgSend(v166, "setPodcastIsSerial:", v173 & 1, swift_bridgeObjectRelease(v177).n128_f64[0]);

        v178 = (char *)&loc_10025CCF8 + *((int *)qword_10025D220 + EpisodeOffer.episodeType.getter());
        __asm { BR              X10 }
      }
    }
    __break(1u);
    JUMPOUT(0x10025D21CLL);
  }
  swift_bridgeObjectRelease_n(v50, 2);
  return 0;
}

void sub_10025D230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v1 = sub_10003F544((uint64_t *)&unk_10055FF00);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Podcasts.isBlueMoonEnabled()(v2);
  if ((v5 & 1) != 0)
  {
    static TaskPriority.userInitiated.getter(v5);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = (_QWORD *)swift_allocObject(&unk_1004B9390, 48, 7);
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v7;
    v8[5] = v0;
    swift_retain();
    swift_retain();
    v9 = sub_10025E21C((uint64_t)v4, (uint64_t)&unk_10055D268, (uint64_t)v8);
    swift_release(v9);
    sub_100007A28((uint64_t)v4, (uint64_t *)&unk_10055FF00);
  }
  else
  {
    v11 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    objc_msgSend(v11, "playPlayerTarget");

  }
}

uint64_t sub_10025D368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 96) = a5;
  return swift_task_switch(sub_10025D380, 0, 0);
}

uint64_t sub_10025D380()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v5;

  v1 = type metadata accessor for PlaybackController.TransportCommand(0);
  v0[5] = v1;
  v0[6] = &protocol witness table for PlaybackController.TransportCommand;
  v2 = sub_1000242A8(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v2, enum case for PlaybackController.TransportCommand.play(_:), v1);
  v5 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
     + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                  + 1));
  v0[13] = v3;
  *v3 = v0;
  v3[1] = sub_10025D42C;
  return ((uint64_t (*)(_QWORD *, _QWORD))v5)(v0 + 2, 0);
}

uint64_t sub_10025D42C(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 104);
  v5 = *v2;
  *(_QWORD *)(v5 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10025D4B8, 0, 0);

  sub_10003D380((_QWORD *)(v5 + 16));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10025D4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = type metadata accessor for MainActor(0);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_QWORD *)(v0 + 120) = static MainActor.shared.getter((__n128)0);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10025D534, v2, v3);
}

uint64_t sub_10025D534()
{
  uint64_t v0;
  void **v1;

  v1 = *(void ***)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 120));
  sub_10025D5CC(v1, v0 + 56);
  sub_100007A28(v0 + 56, (uint64_t *)&unk_100552300);
  return swift_task_switch(sub_10025D59C, 0, 0);
}

uint64_t sub_10025D59C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10025D5CC(void **a1, uint64_t a2)
{
  void (**v2)(char *, char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (**v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  id v40;
  NSURL *v41;
  void *v42;
  void *v43;
  void (**v44)(char *, char *, uint64_t);
  unint64_t v45;
  Class isa;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  NSString v55;
  void **v56;
  void (**v57)(char *, char *, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  void **v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t (*v81)(char *, uint64_t);
  int v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  NSString v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(uint64_t, char *, uint64_t);
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  char *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  char *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  void (**v137)(char *, uint64_t);
  uint64_t v138;
  _QWORD v139[4];
  _QWORD aBlock[3];
  void *v141;
  uint64_t (*v142)(char);
  uint64_t v143;
  void **v144;

  v130 = *v2;
  v138 = type metadata accessor for PlaybackController.PlayerError(0);
  v136 = *(_QWORD *)(v138 - 8);
  v5 = __chkstk_darwin(v138);
  v135 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v134 = (uint64_t)&v119 - v8;
  __chkstk_darwin(v7);
  v137 = (void (**)(char *, uint64_t))((char *)&v119 - v9);
  v10 = sub_10003F544(&qword_10055B788);
  __chkstk_darwin(v10);
  v123 = (uint64_t)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for PlaybackIntent.PlayerConstraint(0);
  v129 = *(_QWORD *)(v125 - 8);
  v12 = __chkstk_darwin(v125);
  v121 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v124 = (char *)&v119 - v15;
  __chkstk_darwin(v14);
  v131 = (char *)&v119 - v16;
  v128 = type metadata accessor for PlaybackIntent(0);
  v127 = *(_QWORD *)(v128 - 8);
  v17 = *(_QWORD *)(v127 + 64);
  v18 = __chkstk_darwin(v128);
  v122 = (char *)&v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v126 = (char *)&v119 - v19;
  v133 = (_QWORD *)type metadata accessor for URL(0);
  v20 = *(v133 - 1);
  __chkstk_darwin(v133);
  v22 = (char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PlaybackIntent.ValidationError(0);
  v24 = *(void (***)(char *, char *, uint64_t))(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v119 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v119 - v31;
  sub_10026CB44(a1, a2);
  v144 = a1;
  swift_errorRetain(a1);
  v33 = sub_10003F544((uint64_t *)&unk_10055A340);
  if (swift_dynamicCast(v32, &v144, v33, v23, 0))
  {
    v34 = v133;
    v138 = v17;
    v24[4](v30, v32, v23);
    v24[2](v27, v30, v23);
    v35 = ((uint64_t (*)(char *, uint64_t))v24[11])(v27, v23);
    if (v35 == enum case for PlaybackIntent.ValidationError.externalMedia(_:))
    {
      ((void (*)(char *, uint64_t))v24[12])(v27, v23);
      v36 = v20;
      v37 = v22;
      v38 = v22;
      v39 = v34;
      (*(void (**)(char *, char *, _QWORD *))(v20 + 32))(v38, v27, v34);
      v40 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      URL._bridgeToObjectiveC()(v41);
      v43 = v42;
      v44 = v24;
      v45 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_100026844(&qword_10055B800, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9B68);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v40, "openURL:options:completionHandler:", v43, isa, 0, swift_bridgeObjectRelease(v45).n128_f64[0]);

      (*(void (**)(char *, _QWORD *))(v36 + 8))(v37, v39);
      v47 = v44[1];
LABEL_4:
      ((void (*)(char *, uint64_t))v47)(v30, v23);
      goto LABEL_11;
    }
    if (v35 == enum case for PlaybackIntent.ValidationError.unentitled(_:))
    {
      ((void (*)(char *, uint64_t))v24[12])(v27, v23);
      v57 = v24;
      v58 = *(_QWORD *)v27;
      v139[3] = v130;
      v59 = v132;
      v139[0] = v132;
      v60 = v132[8];
      v61 = v132[9];
      sub_10003A834(v132 + 5, v60);
      v62 = swift_retain();
      v63 = dispatch thunk of StoreDataProvider.fetchEpisodeUpsellAction(for:)(v58, v60, v61, v62);
      v64 = swift_allocObject(&unk_1004B8E90, 24, 7);
      swift_weakInit(v64 + 16, v59);
      sub_100007A64((uint64_t)v139, (uint64_t)aBlock, (uint64_t *)&unk_100552300);
      v65 = swift_allocObject(&unk_1004B8FF8, 64, 7);
      *(_QWORD *)(v65 + 16) = v64;
      *(_QWORD *)(v65 + 24) = v58;
      sub_10003DC78((uint64_t)aBlock, v65 + 32, (uint64_t *)&unk_100552300);
      v141 = (void *)type metadata accessor for SyncTaskScheduler(0);
      v142 = (uint64_t (*)(char))&protocol witness table for SyncTaskScheduler;
      sub_1000242A8(aBlock);
      SyncTaskScheduler.init()();
      v66 = sub_10003F544((uint64_t *)&unk_100561280);
      v67 = sub_10002F9C8(&qword_10055D200, (uint64_t *)&unk_100561280, (uint64_t)&protocol conformance descriptor for Promise<A>);
      v68 = Promise.flatMap<A>(on:_:)(aBlock, sub_100270158, v65, v66, v67);
      swift_release(v65);
      swift_release(v63);
      sub_10003D380(aBlock);
      swift_release(v68);
      ((void (*)(char *, uint64_t))v57[1])(v30, v23);
      sub_100007A28((uint64_t)v139, (uint64_t *)&unk_100552300);
LABEL_11:
      v56 = v144;
      goto LABEL_12;
    }
    if (v35 == enum case for PlaybackIntent.ValidationError.localPlaybackRequired(_:))
    {
      v136 = v23;
      v137 = (void (**)(char *, uint64_t))v24;
      ((void (*)(char *, uint64_t))v24[12])(v27, v23);
      v73 = &v27[*(int *)(sub_10003F544(&qword_10055D1F8) + 48)];
      v134 = *(_QWORD *)(v127 + 32);
      ((void (*)(char *, char *, uint64_t))v134)(v126, v27, v128);
      v74 = v129;
      v75 = v131;
      v76 = v125;
      v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v129 + 32))(v131, v73, v125);
      v78 = dispatch thunk of PlaybackController.currentRoute.getter(v77);
      v79 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
      v80 = v124;
      v79(v124, v75, v76);
      v81 = *(uint64_t (**)(char *, uint64_t))(v74 + 88);
      v82 = v81(v80, v76);
      v83 = enum case for PlaybackIntent.PlayerConstraint.currentItemUntransferrable(_:);
      v135 = (char *)v78;
      v130 = v79;
      v84 = v30;
      if (v82 == enum case for PlaybackIntent.PlayerConstraint.currentItemUntransferrable(_:))
      {
        (*(void (**)(char *, uint64_t))(v74 + 96))(v80, v76);
        v85 = (uint64_t)v80;
        v91 = v123;
        sub_10003DC78(v85, v123, &qword_10055B788);
      }
      else
      {
        v89 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
        v90 = v80;
        v91 = v123;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v123, 1, 1, v89);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v90, v76);
      }
      v92 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
      v93 = *(_QWORD *)(v92 - 8);
      v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92);
      v120 = v84;
      if (v94 == 1)
      {
        sub_100007A28(v91, &qword_10055B788);
        v133 = 0;
        v95 = v132;
      }
      else
      {
        PodcastsMediaLibrary.MediaItem.author.getter();
        v98 = v97;
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v91, v92);
        if (v98)
        {
          v133 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v98);
        }
        else
        {
          v133 = 0;
        }
        v95 = v132;
        v76 = v125;
      }
      v99 = v121;
      v100 = (void (*)(uint64_t, char *, uint64_t))v134;
      v130(v121, v131, v76);
      v101 = v81(v99, v76);
      if (v101 == v83)
      {
        v134 = 1;
        v102 = v129;
        v103 = v128;
        v104 = v127;
        v105 = v126;
        v106 = v122;
      }
      else
      {
        if (v101 == enum case for PlaybackIntent.PlayerConstraint.singleItemUntransferrable(_:))
        {
          v134 = 2;
          v102 = v129;
          v103 = v128;
          v104 = v127;
          v105 = v126;
          v106 = v122;
          goto LABEL_38;
        }
        v103 = v128;
        v104 = v127;
        v105 = v126;
        v106 = v122;
        if (v101 == enum case for PlaybackIntent.PlayerConstraint.multipleItemsUntransferrable(_:))
        {
          v134 = 3;
          v102 = v129;
          goto LABEL_38;
        }
        v134 = 4;
        v102 = v129;
        if (v101 == enum case for PlaybackIntent.PlayerConstraint.unknown(_:))
          goto LABEL_38;
      }
      (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v76);
LABEL_38:
      v107 = v76;
      v108 = objc_opt_self(MTEpisodeUnavailableUtil);
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v106, v105, v103);
      v109 = *(unsigned __int8 *)(v104 + 80);
      v110 = (v109 + 24) & ~v109;
      v111 = swift_allocObject(&unk_1004B8FA8, v110 + v138, v109 | 7);
      v112 = v106;
      v113 = v111;
      *(_QWORD *)(v111 + 16) = v95;
      v100(v111 + v110, v112, v103);
      v142 = sub_100270114;
      v143 = v113;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001C290;
      v141 = &unk_1004B8FC0;
      v114 = _Block_copy(aBlock);
      v115 = v143;
      swift_retain();
      swift_release(v115);
      v116 = (void *)v108;
      v117 = v135;
      v118 = v133;
      objc_msgSend(v116, "promptBeforePerformingIntentAsBufferedAirPlayForRoute:provider:queueStatus:completion:", v135, v133, v134, v114);
      _Block_release(v114);

      (*(void (**)(char *, uint64_t))(v102 + 8))(v131, v107);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v103);
      v137[1](v120, v136);
      goto LABEL_11;
    }
    if (v35 == enum case for PlaybackIntent.ValidationError.authenticationRequired(_:))
    {
      v86 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
      v87 = objc_msgSend((id)swift_getObjCClassFromMetadata(v86), "sharedInstance");
      v88 = String._bridgeToObjectiveC()();
      objc_msgSend(v87, "promptAccountAuthenticationWithDebugReason:forced:", v88, 1);

      v47 = v24[1];
      goto LABEL_4;
    }
    v96 = v24[1];
    ((void (*)(char *, uint64_t))v96)(v30, v23);
    ((void (*)(char *, uint64_t))v96)(v27, v23);
    v70 = v144;
  }
  else
  {
    v49 = v134;
    v48 = v135;
    v50 = v136;
    swift_errorRelease(v144);
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v52 = (char *)v137;
    v51 = v138;
    if (swift_dynamicCast(v137, aBlock, v33, v138, 0))
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v49, v52, v51);
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v48, v49, v51);
      if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v48, v51) == enum case for PlaybackController.PlayerError.authenticationRequired(_:))
      {
        v53 = sub_100005EC8(0, (unint64_t *)&unk_10055B1C0, off_1004A42F8);
        v54 = objc_msgSend((id)swift_getObjCClassFromMetadata(v53), "sharedInstance");
        v55 = String._bridgeToObjectiveC()();
        objc_msgSend(v54, "promptAccountAuthenticationWithDebugReason:forced:", v55, 1);

        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
        v56 = (void **)aBlock[0];
LABEL_12:
        swift_errorRelease(v56);
        return;
      }
      v69 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v69(v49, v51);
      v69((uint64_t)v48, v51);
    }
    v70 = (void **)aBlock[0];
  }
  swift_errorRelease(v70);
  v71 = sub_100005EC8(0, &qword_10055D1F0, off_1004A43C0);
  v72 = objc_msgSend((id)swift_getObjCClassFromMetadata(v71), "sharedInstance");
  MTEpisodeUnavailableUtil.showDialog(for:)((uint64_t)a1);

}

uint64_t sub_10025E21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_10003F544((uint64_t *)&unk_10055FF00);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007A64(a1, (uint64_t)v8, (uint64_t *)&unk_10055FF00);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100007A28((uint64_t)v8, (uint64_t *)&unk_10055FF00);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13, v11);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_1004B8F80, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, (char *)&type metadata for () + 8, &unk_100565EE0, v20);
}

void sub_10025E3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v1 = sub_10003F544((uint64_t *)&unk_10055FF00);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Podcasts.isBlueMoonEnabled()(v2);
  if ((v5 & 1) != 0)
  {
    static TaskPriority.userInitiated.getter(v5);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = (_QWORD *)swift_allocObject(&unk_1004B9368, 48, 7);
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v7;
    v8[5] = v0;
    swift_retain();
    swift_retain();
    v9 = sub_10025E21C((uint64_t)v4, (uint64_t)&unk_10055D258, (uint64_t)v8);
    swift_release(v9);
    sub_100007A28((uint64_t)v4, (uint64_t *)&unk_10055FF00);
  }
  else
  {
    v11 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    objc_msgSend(v11, "pausePlayerTargetWithInitiator:", 1);

  }
}

uint64_t sub_10025E4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 96) = a5;
  return swift_task_switch(sub_10025E508, 0, 0);
}

uint64_t sub_10025E508()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v5;

  v1 = type metadata accessor for PlaybackController.TransportCommand(0);
  v0[5] = v1;
  v0[6] = &protocol witness table for PlaybackController.TransportCommand;
  v2 = sub_1000242A8(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v2, enum case for PlaybackController.TransportCommand.pause(_:), v1);
  v5 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
     + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                  + 1));
  v0[13] = v3;
  *v3 = v0;
  v3[1] = sub_10025E5B4;
  return ((uint64_t (*)(_QWORD *, _QWORD))v5)(v0 + 2, 0);
}

uint64_t sub_10025E5B4(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 104);
  v5 = *v2;
  *(_QWORD *)(v5 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10025E640, 0, 0);

  sub_10003D380((_QWORD *)(v5 + 16));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10025E640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = type metadata accessor for MainActor(0);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_QWORD *)(v0 + 120) = static MainActor.shared.getter((__n128)0);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10025E6BC, v2, v3);
}

uint64_t sub_10025E6BC()
{
  uint64_t v0;
  void **v1;

  v1 = *(void ***)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 120));
  sub_10025D5CC(v1, v0 + 56);
  sub_100007A28(v0 + 56, (uint64_t *)&unk_100552300);
  return swift_task_switch(sub_100270644, 0, 0);
}

uint64_t sub_10025E724(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 104) = a6;
  *(double *)(v6 + 96) = a1;
  *(_QWORD *)(v6 + 88) = a5;
  return swift_task_switch(sub_10025E744, 0, 0);
}

uint64_t sub_10025E744()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = v0[12];
  v2 = type metadata accessor for PlaybackController.TransportCommand(0);
  v0[5] = v2;
  v0[6] = &protocol witness table for PlaybackController.TransportCommand;
  *sub_1000242A8(v0 + 2) = v1;
  (*(void (**)(void))(*(_QWORD *)(v2 - 8) + 104))();
  v5 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
     + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                  + 1));
  v0[14] = v3;
  *v3 = v0;
  v3[1] = sub_10025E800;
  return ((uint64_t (*)(_QWORD *, _QWORD))v5)(v0 + 2, 0);
}

uint64_t sub_10025E800(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10025E88C, 0, 0);

  sub_10003D380((_QWORD *)(v5 + 16));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10025E88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10003D380((_QWORD *)(v0 + 16));
  v1 = type metadata accessor for MainActor(0);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_QWORD *)(v0 + 128) = static MainActor.shared.getter((__n128)0);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10025E908, v2, v3);
}

uint64_t sub_10025E908()
{
  uint64_t v0;
  void **v1;

  v1 = *(void ***)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 128));
  sub_10025D5CC(v1, v0 + 56);
  sub_100007A28(v0 + 56, (uint64_t *)&unk_100552300);
  return swift_task_switch(sub_10025E970, 0, 0);
}

uint64_t sub_10025E970()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 96) = a5;
  return swift_task_switch(sub_10025E9B8, 0, 0);
}

uint64_t sub_10025E9B8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v5;

  v1 = type metadata accessor for PlaybackController.TransportCommand(0);
  v0[5] = v1;
  v0[6] = &protocol witness table for PlaybackController.TransportCommand;
  v2 = sub_1000242A8(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v2, enum case for PlaybackController.TransportCommand.jumpBackward(_:), v1);
  v5 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
     + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                  + 1));
  v0[13] = v3;
  *v3 = v0;
  v3[1] = sub_10025E5B4;
  return ((uint64_t (*)(_QWORD *, _QWORD))v5)(v0 + 2, 0);
}

uint64_t sub_10025EA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 96) = a5;
  return swift_task_switch(sub_10025EA7C, 0, 0);
}

uint64_t sub_10025EA7C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v5;

  v1 = type metadata accessor for PlaybackController.TransportCommand(0);
  v0[5] = v1;
  v0[6] = &protocol witness table for PlaybackController.TransportCommand;
  v2 = sub_1000242A8(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v2, enum case for PlaybackController.TransportCommand.jumpForward(_:), v1);
  v5 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
     + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
                                  + 1));
  v0[13] = v3;
  *v3 = v0;
  v3[1] = sub_10025E5B4;
  return ((uint64_t (*)(_QWORD *, _QWORD))v5)(v0 + 2, 0);
}

void sub_10025EB28(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, char a13)
{
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  __n128 v43;
  id v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  int v85;
  char v86[24];
  char v87[32];

  v84 = a6;
  v85 = a5;
  v79 = a3;
  v81 = a11;
  v82 = a4;
  v17 = a8 & 1;
  v80 = a12 & 1;
  v18 = sub_10003F544(&qword_10055B788);
  __chkstk_darwin(v18);
  v78 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MediaIdentifier(0);
  v72 = *(_QWORD *)(v20 - 8);
  v73 = v20;
  __chkstk_darwin(v20);
  v74 = (uint64_t *)((char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for PlaybackIntent(0);
  v76 = *(_QWORD *)(v22 - 8);
  v77 = v22;
  __chkstk_darwin(v22);
  v75 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10003F544(&qword_10055B790);
  v25 = __chkstk_darwin(v24);
  v71 = (uint64_t)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v70 - v27;
  v29 = sub_10003F544(&qword_10055A550);
  __chkstk_darwin(v29);
  v31 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for PendingPlaybackMetadata(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v70 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = swift_bridgeObjectRetain(a2);
  PendingPlaybackMetadata.init(adamId:uuid:)(a7, v17, a1, a2, v36);
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  v83 = v13;
  if (v37 == 1)
  {
    v38 = sub_100007A28((uint64_t)v31, &qword_10055A550);
    if ((static Podcasts.isBlueMoonEnabled()(v38) & 1) == 0)
    {
LABEL_3:
      v39 = swift_allocObject(&unk_1004B9228, 17, 7);
      *(_BYTE *)(v39 + 16) = 0;
      v40 = swift_allocObject(&unk_1004B9228, 17, 7);
      *(_BYTE *)(v40 + 16) = 0;
      v41 = (unsigned __int8 *)(v40 + 16);
      type metadata accessor for CoreDataFetcher(0);
      v42 = swift_allocObject(&unk_1004B9250, 32, 7);
      *(_QWORD *)(v42 + 16) = v40;
      *(_QWORD *)(v42 + 24) = v39;
      swift_retain();
      v43 = swift_retain();
      static CoreDataFetcher.performAndWaitWithSaveOnEpisode(with:block:)(a1, a2, sub_100270344, v42, v43);
      swift_release(v42);
      swift_beginAccess(v39 + 16, v87, 0, 0);
      if ((*(_BYTE *)(v39 + 16) & 1) != 0
        || (swift_beginAccess(v41, v86, 0, 0), (v44 = sub_10026C500(a1, a2, v79, v85 & 1, *v41, v84 & 1)) == 0))
      {
        swift_release(v39);
        swift_release(v40);
      }
      else
      {
        v45 = v44;
        if ((a10 & 1) != 0)
          a9 = 3;
        sub_10025F5DC(v44, a9, 1, a1, a2, v81, v80, v82);
        swift_release(v39);
        swift_release(v40);

      }
      return;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v35, v31, v32);
    v47 = v13[13];
    v48 = v13[14];
    sub_10003A834(v13 + 10, v47);
    dispatch thunk of PendingPlaybackControllerProtocol.preflight(_:)(v35, v47, v48);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    if ((static Podcasts.isBlueMoonEnabled()(v49) & 1) == 0)
      goto LABEL_3;
  }
  v50 = a1;
  v51 = a2;
  if ((v84 & 1) != 0)
  {
    v52 = type metadata accessor for EpisodeListSettings(0);
    v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v28, 1, 1, v52);
  }
  else
  {
    v53 = sub_100007A64(v79, (uint64_t)v28, &qword_10055B790);
  }
  v54 = static Set<>.default.getter(v53);
  if ((v85 & 1) != 0)
  {
    v55 = sub_10003F544(&qword_10055B7A0);
    v56 = type metadata accessor for PlaybackIntent.Option(0);
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(unsigned __int8 *)(v57 + 80);
    v59 = (v58 + 32) & ~v58;
    v60 = swift_allocObject(v55, v59 + *(_QWORD *)(v57 + 72), v58 | 7);
    *(_OWORD *)(v60 + 16) = xmmword_1003CA200;
    v61 = v60 + v59;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v57 + 104))(v61, enum case for PlaybackIntent.Option.smartPlay(_:), v56);
    v54 = sub_10026C93C(v60, v54);
    swift_setDeallocating(v60);
    swift_arrayDestroy(v61, 1, v56);
    swift_deallocClassInstance(v60, 32, 7);
  }
  v62 = sub_10003F544((uint64_t *)&unk_1005588B0);
  v63 = swift_allocObject(v62, 48, 7);
  *(_OWORD *)(v63 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v63 + 32) = v50;
  *(_QWORD *)(v63 + 40) = v51;
  v64 = v73;
  v65 = v74;
  *v74 = v63;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v72 + 104))(v65, enum case for MediaIdentifier.localEpisodes(_:), v64);
  v66 = v71;
  sub_100007A64((uint64_t)v28, v71, &qword_10055B790);
  v67 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
  v68 = v78;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v78, 1, 1, v67);
  swift_bridgeObjectRetain(v51);
  v69 = (uint64_t)v75;
  PlaybackIntent.init(id:listSettings:initialItem:options:)(v65, v66, v68, v54);
  sub_10025F104(v69, v81, v80, a13 & 1, v82);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v69, v77);
  sub_100007A28((uint64_t)v28, &qword_10055B790);
}

uint64_t sub_10025F104(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _BYTE v34[32];
  __int128 v35[2];

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v8 = type metadata accessor for PlaybackIntent(0);
  v9 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544((uint64_t *)&unk_10055FF00);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter(v13);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 0, 1, v16);
  v29 = *(_QWORD *)(v5 + 120);
  v30 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  sub_10000A520(v5 + 80, (uint64_t)v35);
  sub_100007A64(a5, (uint64_t)v34, (uint64_t *)&unk_100552300);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 17) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 47) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1004B8F58, v23 + 32, v17 | 7);
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v18, v11, v28);
  v25 = v24 + v19;
  *(_QWORD *)v25 = v31;
  *(_BYTE *)(v25 + 8) = v32 & 1;
  *(_BYTE *)(v25 + 9) = v33;
  *(_QWORD *)(v24 + v20) = v29;
  sub_10002099C(v35, v24 + v21);
  *(_QWORD *)(v24 + v22) = v30;
  sub_10003DC78((uint64_t)v34, v24 + v23, (uint64_t *)&unk_100552300);
  swift_retain();
  swift_retain();
  v26 = sub_10025E21C((uint64_t)v15, (uint64_t)&unk_10055D1E8, v24);
  swift_release(v26);
  return sub_100007A28((uint64_t)v15, (uint64_t *)&unk_10055FF00);
}

void sub_10025F324(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  id v14;
  void *v15;
  unsigned __int8 v16;
  double v17;
  _BYTE *v18;
  double v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  id v26;
  NSURL *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  Class isa;
  _BYTE v32[24];
  _BYTE v33[24];

  v6 = sub_10003F544((uint64_t *)&unk_100553DC0);
  __chkstk_darwin(v6);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (unsigned __int8 *)(a2 + 16);
  if (a1)
  {
    v14 = objc_msgSend(a1, "podcast");
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, "isSerialShowTypeInFeed");

    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)&v17 = swift_beginAccess(v13, v33, 1, 0).n128_u64[0];
    *v13 = v16;
    if (objc_msgSend(a1, "isExternalType", v17))
    {
      v18 = (_BYTE *)(a3 + 16);
      *(_QWORD *)&v19 = swift_beginAccess(v18, v32, 1, 0).n128_u64[0];
      *v18 = 1;
      v20 = objc_msgSend(a1, "enclosureURL", v19);
      if (v20)
      {
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

        URL.init(string:)(v22, v24);
        v25 = swift_bridgeObjectRelease(v24);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1, v9, v25) == 1)
        {
          sub_100007A28((uint64_t)v8, (uint64_t *)&unk_100553DC0);
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
          v26 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
          URL._bridgeToObjectiveC()(v27);
          v29 = v28;
          v30 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for OpenExternalURLOptionsKey(0);
          sub_100026844(&qword_10055B800, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9B68);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v26, "openURL:options:completionHandler:", v29, isa, 0, swift_bridgeObjectRelease(v30).n128_f64[0]);

          (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
        }
      }
    }
  }
  else
  {
    swift_beginAccess(v13, v33, 1, 0);
    *v13 = 0;
  }
}

void sub_10025F5DC(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t inited;
  id v24;
  unint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  NSString v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  char v53[56];
  _QWORD v54[4];
  void **aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void *v58;
  void *v59;
  _QWORD *v60;
  char v61[64];

  v9 = v8;
  sub_100007A64(a8, (uint64_t)&aBlock, (uint64_t *)&unk_100552300);
  if (v58)
  {
    v18 = sub_100005EC8(0, &qword_10055D218, CPInterfaceController_ptr);
    if ((swift_dynamicCast(v54, &aBlock, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
    {
      v19 = (void *)v54[0];
      v20 = *(void **)(v9 + 128);
      type metadata accessor for AnalyticsEvent(0);
      v21 = (void *)PFAnalyticsEventNamePlaybackReason;
      v22 = sub_10003F544(&qword_10055FF40);
      inited = swift_initStackObject(v22, v53);
      *(_OWORD *)(inited + 16) = xmmword_1003CA200;
      *(_QWORD *)(inited + 32) = 0x6E6F73616572;
      *(_QWORD *)(inited + 40) = 0xE600000000000000;
      v24 = v21;
      *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
      v25 = sub_100048D4C(inited);
      v26 = (void *)AnalyticsEvent.__allocating_init(name:payload:)(v24, v25);
      objc_msgSend(v20, "sendEvent:", v26);

      v27 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
      v28 = swift_allocObject(&unk_1004B8E90, 24, 7);
      swift_weakInit(v28 + 16, v9);
      v29 = (_QWORD *)swift_allocObject(&unk_1004B9138, 40, 7);
      v29[2] = v28;
      v29[3] = a1;
      v29[4] = v19;
      v59 = sub_100270280;
      v60 = v29;
      aBlock = _NSConcreteStackBlock;
      v56 = 1107296256;
      v57 = sub_10001C290;
      v58 = &unk_1004B9150;
      v30 = _Block_copy(&aBlock);
      v31 = v60;
      v32 = a1;
      v33 = v19;
      swift_release(v31);
      objc_msgSend(v27, "playManifest:reason:interactive:completion:", v32, 4, 0, v30);
      _Block_release(v30);

      goto LABEL_10;
    }
    v48 = a4;
    v49 = a5;
    v50 = a6;
    v51 = a7;
    v52 = a1;
  }
  else
  {
    v48 = a4;
    v49 = a5;
    v50 = a6;
    v51 = a7;
    v52 = a1;
    sub_100007A28((uint64_t)&aBlock, (uint64_t *)&unk_100552300);
  }
  v34 = *(void **)(v9 + 128);
  type metadata accessor for AnalyticsEvent(0);
  v35 = (void *)PFAnalyticsEventNamePlaybackReason;
  v36 = sub_10003F544(&qword_10055FF40);
  v37 = swift_initStackObject(v36, v61);
  *(_OWORD *)(v37 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v37 + 32) = 0x6E6F73616572;
  *(_QWORD *)(v37 + 40) = 0xE600000000000000;
  sub_100260274(a2);
  v39 = v38;
  v40 = v35;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(v37 + 48) = v41;
  v42 = sub_100048D4C(v37);
  v43 = (void *)AnalyticsEvent.__allocating_init(name:payload:)(v40, v42);
  objc_msgSend(v34, "sendEvent:", v43);

  v27 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
  if ((a3 & 1) != 0)
  {
    sub_100007A64(a8, (uint64_t)v54, (uint64_t *)&unk_100552300);
    v44 = swift_allocObject(&unk_1004B90E8, 104, 7);
    *(_QWORD *)(v44 + 16) = v9;
    *(_QWORD *)(v44 + 24) = sub_1002604B0;
    *(_QWORD *)(v44 + 32) = 0;
    *(_QWORD *)(v44 + 40) = v50;
    *(_BYTE *)(v44 + 48) = v51 & 1;
    *(_QWORD *)(v44 + 56) = v48;
    *(_QWORD *)(v44 + 64) = v49;
    sub_10003DC78((uint64_t)v54, v44 + 72, (uint64_t *)&unk_100552300);
    v59 = sub_100270218;
    v60 = (_QWORD *)v44;
    aBlock = _NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10001C290;
    v58 = &unk_1004B9100;
    v45 = _Block_copy(&aBlock);
    v46 = v60;
    swift_bridgeObjectRetain(v49);
  }
  else
  {
    v47 = swift_allocObject(&unk_1004B9098, 49, 7);
    *(_QWORD *)(v47 + 16) = v9;
    *(_QWORD *)(v47 + 24) = sub_1002604B0;
    *(_QWORD *)(v47 + 32) = 0;
    *(_QWORD *)(v47 + 40) = v50;
    *(_BYTE *)(v47 + 48) = v51 & 1;
    v59 = sub_1002701C4;
    v60 = (_QWORD *)v47;
    aBlock = _NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10001C290;
    v58 = &unk_1004B90B0;
    v45 = _Block_copy(&aBlock);
    v46 = v60;
  }
  swift_retain();
  swift_release(v46);
  objc_msgSend(v27, "playManifest:reason:interactive:completion:", v52, a2, 1, v45);
  _Block_release(v45);
LABEL_10:

}

uint64_t sub_10025FAB4@<X0>(void *a1@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;

  if (!a1)
    goto LABEL_11;
  v5 = a1;
  v6 = objc_msgSend(v5, "podcastUuid");
  if (!v6)
  {

LABEL_11:
    v18 = type metadata accessor for EpisodeListSettings(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  v11 = objc_msgSend(v5, "podcast");
  if (!v11)
  {

    swift_bridgeObjectRelease(v10);
    goto LABEL_11;
  }
  v12 = v11;
  v13 = (objc_msgSend(v5, "isTrailer") & 1) != 0
     && (uint64_t)objc_msgSend(v5, "seasonNumber") >= 1
     && objc_msgSend(v5, "episodeNumber") == 0;
  *a2 = v13;
  v19[0] = v8;
  v19[1] = v10;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 2;
  v14 = MTPodcast.episodeSortType.getter();
  v15 = MTPodcastHidesPlayedEpisodesResolved(objc_msgSend(v12, "hidesPlayedEpisodes"));
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(v19, v14, 3, v15, 0, 0);

  v16 = type metadata accessor for EpisodeListSettings(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 0, 1, v16);
}

uint64_t sub_10025FC4C@<X0>(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  unsigned int v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  __int128 v39;
  __int128 v40;
  char v41;

  if (a1)
  {
    v5 = a1;
    v6 = objc_msgSend(v5, "podcastUuid");
    if (v6)
    {
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;
      v11 = objc_msgSend(v5, "podcast");
      if (v11)
      {
        v12 = v11;
        if ((objc_msgSend(v11, "hasAtLeastOneSeason") & 1) == 0)
        {
          v37 = v8;
          v24 = (void *)objc_opt_self(MTEpisode);
          v25 = objc_msgSend(v24, "predicateForEpisodesWithEpisodeNumbersGreaterThan:", objc_msgSend(v5, "episodeNumber"));
          v26 = objc_msgSend(v24, "predicateForEntitledEpisodes");
          v27 = objc_msgSend(v25, "AND:", v26);

          v28 = objc_msgSend(v24, "predicateForAllEpisodesOnPodcastUuid:", v7);
          v29 = objc_msgSend(v27, "AND:", v28);

          v30 = *a2;
          *a2 = v29;

          v22 = 0;
          v23 = 2;
          goto LABEL_10;
        }
        if (objc_msgSend(v5, "hasNonZeroSeasonNumber"))
        {
          v37 = v8;
          v13 = (void *)objc_opt_self(MTEpisode);
          v14 = objc_msgSend(v13, "predicateForSeasonNumber:", objc_msgSend(v5, "seasonNumber"));
          v15 = objc_msgSend(v13, "predicateForEpisodesWithEpisodeNumbersGreaterThan:", objc_msgSend(v5, "episodeNumber"));
          v16 = objc_msgSend(v14, "AND:", v15);

          v17 = objc_msgSend(v13, "predicateForEntitledEpisodes");
          v18 = objc_msgSend(v16, "AND:", v17);

          v19 = objc_msgSend(v13, "predicateForAllEpisodesOnPodcastUuid:", v7);
          v20 = objc_msgSend(v18, "AND:", v19);

          v21 = *a2;
          *a2 = v20;

          v22 = objc_msgSend(v5, "seasonNumber");
          v23 = 0;
LABEL_10:
          v38[0] = v37;
          v38[1] = v10;
          v38[2] = v22;
          v38[3] = v23;
          v39 = 0u;
          v40 = 0u;
          v41 = 7;
          v31 = sub_100168F7C((uint64_t)v22, v23);
          v32 = MTPodcast.episodeSortType.getter(v31);
          v33 = MTPodcastHidesPlayedEpisodesResolved(objc_msgSend(v12, "hidesPlayedEpisodes"));
          EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(v38, v32, 3, v33, 0, 0);
          sub_1001691E8((uint64_t)v22, v23);

          v34 = type metadata accessor for EpisodeListSettings(0);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a3, 0, 1, v34);
        }
        swift_bridgeObjectRelease(v10);

      }
      else
      {

        swift_bridgeObjectRelease(v10);
      }
    }
    else
    {
      v7 = v5;
    }

  }
  v36 = type metadata accessor for EpisodeListSettings(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a3, 1, 1, v36);
}

uint64_t sub_100260034(BOOL *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for Logger(0);
  __chkstk_darwin(v5);
  v6 = sub_100005EC8(0, (unint64_t *)&unk_100560F70, NSNumber_ptr);
  result = NSManagedObjectContext.count<A>(for:)(a3, v6);
  *a1 = result > 0;
  return result;
}

unint64_t sub_100260274(uint64_t a1)
{
  unint64_t result;

  result = 1701736302;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x7461726F74736572;
      break;
    case 2:
      result = 0x66666F646E6168;
      break;
    case 3:
      result = 1919251317;
      break;
    case 4:
      result = 0x79616C50726163;
      break;
    case 5:
      result = 0x4D6C61636967616DLL;
      break;
    case 6:
      result = 0x65726F7473;
      break;
    case 7:
      result = 0x6D6552616964656DLL;
      break;
    case 8:
      result = 0xD000000000000013;
      break;
    case 9:
      result = 1769105779;
      break;
    case 10:
      result = 0x7463416B63697571;
      break;
    case 11:
      result = 0x666C656853706F74;
      break;
    case 12:
      result = 0x7551646572616873;
      break;
    case 13:
      result = 0xD000000000000011;
      break;
    case 14:
      result = 0x6F72687479616C70;
      break;
    case 15:
      result = 0x746567646977;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_10026043C(void **a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    sub_10026D0B8(a1, a3, a4);
    return swift_release(v9);
  }
  return result;
}

void sub_1002604B0(uint64_t a1, char a2)
{
  id v3;

  if ((a2 & 1) == 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(MTPlayerController), "defaultInstance");
    objc_msgSend(v3, "seekToTime:", *(double *)&a1);

  }
}

uint64_t sub_100260514(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  if (a1 == 1)
  {
    result = a3(a5, a6 & 1);
    if (!a8)
      return result;
  }
  else
  {
    v14 = a2[13];
    v15 = a2[14];
    sub_10003A834(a2 + 10, v14);
    result = dispatch thunk of PendingPlaybackControllerProtocol.reset()(v14, v15);
    if (!a8)
      return result;
  }
  if (a1 == 9 || a1 == 5)
  {
    type metadata accessor for CoreDataFetcher(0);
    v16 = swift_allocObject(&unk_1004B8E90, 24, 7);
    v17 = swift_weakInit(v16 + 16, a2);
    __chkstk_darwin(v17);
    v18[2] = v16;
    v18[3] = a9;
    static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)(&type metadata for (), a7, a8, sub_1002702B8, v18, &type metadata for () + 1);
    return swift_release(v16);
  }
  return result;
}

void sub_100260630(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  void *v26;
  _BYTE v27[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v27, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = (_QWORD *)Strong;
    if (a1)
    {
      v8 = a1;
      v9 = EpisodeUnavailableReason.rawValue.getter(objc_msgSend(v8, "reasonForNotPlayable"));
      if (v9 == EpisodeUnavailableReason.rawValue.getter(7))
      {
        v10 = (uint64_t)objc_msgSend(v8, "storeTrackId");
        v11 = AdamID.init(rawValue:)(v10 & ~(v10 >> 63));
        v12 = v7[8];
        v13 = v7[9];
        sub_10003A834(v7 + 5, v12);
        v15 = dispatch thunk of StoreDataProvider.fetchEpisodeUpsellAction(for:)(v11, v12, v13, v14);
        v16 = swift_allocObject(&unk_1004B8E90, 24, 7);
        swift_weakInit(v16 + 16, v7);
        sub_100007A64(a3, (uint64_t)v24, (uint64_t *)&unk_100552300);
        v17 = swift_allocObject(&unk_1004B9200, 64, 7);
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = v11;
        sub_10003DC78((uint64_t)v24, v17 + 32, (uint64_t *)&unk_100552300);
        v25 = type metadata accessor for SyncTaskScheduler(0);
        v26 = &protocol witness table for SyncTaskScheduler;
        sub_1000242A8(v24);
        SyncTaskScheduler.init()();
        v18 = sub_10003F544((uint64_t *)&unk_100561280);
        v19 = sub_10002F9C8(&qword_10055D200, (uint64_t *)&unk_100561280, (uint64_t)&protocol conformance descriptor for Promise<A>);
        v20 = Promise.flatMap<A>(on:_:)(v24, sub_100270614, v17, v18, v19);
        swift_release(v15);
        swift_release(v17);
        sub_10003D380(v24);
        v21 = sub_100005EC8(0, (unint64_t *)&qword_100555190, OS_dispatch_queue_ptr);
        v23 = static OS_dispatch_queue.main.getter(v22);
        v25 = v21;
        v26 = &protocol witness table for OS_dispatch_queue;
        v24[0] = v23;
        Promise.then(perform:orCatchError:on:)(sub_100260888, 0, sub_10026098C, 0, v24);

        swift_release(v20);
        swift_release(v7);
        sub_10003D380(v24);
      }
      else
      {
        swift_release(v7);

      }
    }
    else
    {
      swift_release(Strong);
    }
  }
}

void sub_100260888(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v2 = type metadata accessor for ActionOutcome(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  v6 = enum case for ActionOutcome.unsupported(_:);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((_DWORD)a1 == v6)
  {
    v7 = sub_100005EC8(0, &qword_10055D1F0, off_1004A43C0);
    v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "sharedInstance");
    objc_msgSend(v8, "showDialogForReason:podcastTitle:completion:", 5, 0, 0);

  }
}

void sub_10026098C()
{
  uint64_t v0;
  id v1;

  v0 = sub_100005EC8(0, &qword_10055D1F0, off_1004A43C0);
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "sharedInstance");
  objc_msgSend(v1, "showDialogForReason:podcastTitle:completion:", 5, 0, 0);

}

uint64_t sub_1002609F4(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9;
  uint64_t v10;

  if (a1 != 1)
  {
    v9 = a2[13];
    v10 = a2[14];
    sub_10003A834(a2 + 10, v9);
    dispatch thunk of PendingPlaybackControllerProtocol.reset()(v9, v10);
  }
  return a3(a5, a6 & 1);
}

void sub_100260A6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[3];
  _BYTE v27[8];
  uint64_t aBlock[6];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  static OS_os_log.carPlay.getter(v10);
  swift_errorRetain(a3);
  v11 = swift_errorRetain(a3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v23 = v6;
    v14 = swift_slowAlloc(12, -1);
    v24 = a4;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136446210;
    swift_getErrorValue(a3, v27, v26);
    v17 = Error.localizedDescription.getter(v26[1], v26[2]);
    v19 = v18;
    v25 = sub_10003D274(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Playback failed with status %{public}s. Alert was presented.", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v20 = v15;
    a4 = v24;
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  }
  else
  {
    swift_errorRelease(a3);
    swift_errorRelease(a3);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  aBlock[4] = (uint64_t)j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100153D50;
  aBlock[3] = (uint64_t)&unk_1004B9060;
  v21 = _Block_copy(aBlock);
  objc_msgSend(a4, "popTemplateAnimated:completion:", 1, v21);
  _Block_release(v21);
}

void sub_100260CE0(uint64_t a1, uint64_t a2, void **a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  void **aBlock;
  _QWORD v17[5];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005EC8(0, (unint64_t *)&qword_100554A00, OS_os_log_ptr);
  v11 = static OS_os_log.carPlay.getter(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134349056;
    aBlock = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v17, v14 + 4, v14 + 12);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Playback failed with status %{public}ld.  Alert was presented.", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v17[3] = j___ss6UInt64V8PodcastsE19int64Representations5Int64Vvg;
  v17[4] = 0;
  aBlock = _NSConcreteStackBlock;
  v17[0] = 1107296256;
  v17[1] = sub_100153D50;
  v17[2] = &unk_1004B91C8;
  v15 = _Block_copy(&aBlock);
  objc_msgSend(a4, "popTemplateAnimated:completion:", 1, v15);
  _Block_release(v15);
}

uint64_t sub_100260E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  __n128 v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  id *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[4];
  _QWORD v78[3];
  void *v79;
  uint64_t v80;
  char v81[32];

  v74 = a4;
  v76 = a3;
  v71 = a1;
  v5 = type metadata accessor for ActionOutcome(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSLogger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ActionMetricsBehavior(0);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544((uint64_t *)&unk_100554EC0);
  __chkstk_darwin(v17);
  v19 = (id *)((char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v81, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
    goto LABEL_8;
  v21 = Strong;
  v70 = v19;
  v22 = swift_unknownObjectWeakLoadStrong(Strong + 16);
  if (!v22
    || (v24 = v22,
        v25 = *(_QWORD *)(v21 + 24),
        ObjectType = swift_getObjectType(v22, v23),
        v27 = dispatch thunk of ActionRunnerProvider.actionRunner.getter(ObjectType, v25),
        v69 = v28,
        swift_unknownObjectRelease(v24),
        !v27))
  {
    Strong = swift_release(v21);
LABEL_8:
    static OSLogger.actions.getter(Strong);
    v43 = sub_10003F544(&qword_100557CA8);
    v44 = type metadata accessor for LogMessage(0);
    v45 = swift_allocObject(v43, ((*(unsigned __int8 *)(*(_QWORD *)(v44 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v44 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v44 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v44 - 8) + 80) | 7);
    *(_OWORD *)(v45 + 16) = xmmword_1003CA200;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(76, 1);
    v46._countAndFlagsBits = 0xD000000000000032;
    v46._object = (void *)0x80000001004380D0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v46);
    v79 = &type metadata for AdamID;
    v78[0] = v76;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v78);
    sub_100007A28((uint64_t)v78, (uint64_t *)&unk_100552300);
    v47._object = (void *)0x8000000100437FF0;
    v47._countAndFlagsBits = 0xD00000000000001ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v47);
    LogMessage.init(stringInterpolation:)(v11);
    Logger.error(_:)(v45, v12, &protocol witness table for OSLogger);
    v48 = swift_bridgeObjectRelease(v45);
    (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v48);
    sub_10003F544((uint64_t *)&unk_100561280);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ActionOutcome.unsupported(_:), v5);
    return Promise.__allocating_init(value:)(v8);
  }
  type metadata accessor for ActionRunnerOptions(0);
  v29 = swift_retain();
  v30 = BaseObjectGraph.__allocating_init(_:)(v29);
  v31 = v74;
  sub_100007A64(v74, (uint64_t)v78, (uint64_t *)&unk_100552300);
  v68 = v27;
  if (!v79)
  {
    sub_100007A28((uint64_t)v78, (uint64_t *)&unk_100552300);
    goto LABEL_10;
  }
  v32 = sub_100005EC8(0, &qword_10055D208, UIResponder_ptr);
  v33 = swift_dynamicCast(v77, v78, (char *)&type metadata for Any + 8, v32, 6);
  if ((v33 & 1) == 0)
  {
LABEL_10:
    v39 = v75;
    v41 = v72;
    v40 = v73;
    v42 = v71;
    v38 = 0;
    goto LABEL_11;
  }
  v37 = (void *)v77[0];
  v38 = (void *)UIResponder.firstViewInResponderChain.getter(v33, v34, v35, v36);

  v39 = v75;
  v41 = v72;
  v40 = v73;
  v42 = v71;
LABEL_11:
  sub_100007A64(v31, (uint64_t)v77, (uint64_t *)&unk_100552300);
  v50 = v38;
  ActionOrigin.init(sender:view:)(v78, v77, v38);
  v51 = ActionRunnerOptions.withActionOrigin(_:)(v78);
  sub_100007A28((uint64_t)v78, (uint64_t *)&unk_100557CB0);
  swift_release(v30);

  sub_10000A520(v42, (uint64_t)v78);
  v52 = sub_10003F544(&qword_100554920);
  v53 = type metadata accessor for FlowAction(0);
  v54 = swift_dynamicCast(v77, v78, v52, v53, 6);
  if ((v54 & 1) == 0)
  {
    v61 = v68;
    v60 = v69;
LABEL_19:
    v66 = swift_getObjectType(v61, v55);
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for ActionMetricsBehavior.fromAction(_:), v39);
    v49 = ActionRunner.perform(_:withMetrics:asPartOf:)(v42, v41, v51, v66, v60);
    swift_release(v21);
    swift_unknownObjectRelease(v61);
    swift_release(v51);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    return v49;
  }
  v56 = v77[0];
  v57 = v70;
  dispatch thunk of FlowAction.destination.getter(v54);
  v58 = type metadata accessor for FlowDestination(0);
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
  {
    swift_release(v56);
    sub_100007A28((uint64_t)v57, (uint64_t *)&unk_100554EC0);
LABEL_18:
    v61 = v68;
    v60 = v69;
    v39 = v75;
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(id *, uint64_t))(v59 + 88))(v57, v58) != enum case for FlowDestination.upsell(_:))
  {
    swift_release(v56);
    (*(void (**)(id *, uint64_t))(v59 + 8))(v57, v58);
    goto LABEL_18;
  }
  (*(void (**)(id *, uint64_t))(v59 + 96))(v57, v58);

  v62 = v68;
  v64 = swift_getObjectType(v68, v63);
  v79 = (void *)v53;
  v80 = sub_100026844((unint64_t *)&qword_10055B7D0, (uint64_t (*)(uint64_t))&type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  v78[0] = v56;
  v65 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for ActionMetricsBehavior.notProcessed(_:), v75);
  swift_retain();
  v49 = ActionRunner.perform(_:withMetrics:asPartOf:)(v78, v41, v51, v64, v69);
  swift_release(v56);
  swift_release(v21);
  swift_unknownObjectRelease(v62);
  swift_release(v51);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v65);
  sub_10003D380(v78);
  return v49;
}

void sub_1002614F8(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BOOL4 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  id v77;
  char *v78;
  __n128 v79;
  NSURL *v80;
  void *v81;
  void *v82;
  unint64_t v83;
  Class isa;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _OWORD v105[3];

  v6 = v5;
  v100 = a5;
  v102 = a3;
  v104 = a2;
  v101 = a4 & 1;
  v98 = type metadata accessor for EpisodeOffer(0);
  v95 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10003F544(&qword_10055B788);
  __chkstk_darwin(v9);
  v99 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MediaIdentifier(0);
  v92 = *(_QWORD *)(v11 - 8);
  v93 = v11;
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = type metadata accessor for PlaybackIntent(0);
  v94 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ShowOffer(0);
  v90 = *(_QWORD *)(v16 - 8);
  v91 = v16;
  __chkstk_darwin(v16);
  v89 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for URL(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v19);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003F544(&qword_10055A550);
  __chkstk_darwin(v22);
  v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PendingPlaybackMetadata(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = EpisodeOffer.contentId.getter(v27);
  PendingPlaybackMetadata.init(adamId:uuid:)(v30, 0, 0, 0, v31);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25);
  v103 = v6;
  if (v32 == 1)
  {
    v33 = sub_100007A28((uint64_t)v24, &qword_10055A550);
    if ((static Podcasts.isBlueMoonEnabled()(v33) & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v24, v25);
    v39 = v6 + 10;
    v41 = v6[13];
    v40 = v6[14];
    sub_10003A834(v39, v41);
    dispatch thunk of PendingPlaybackControllerProtocol.preflight(_:)(v29, v41, v40);
    v42 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v29, v25);
    if ((static Podcasts.isBlueMoonEnabled()(v42) & 1) == 0)
    {
LABEL_3:
      type metadata accessor for CoreDataFetcher(0);
      v34 = static CoreDataFetcher.episodeUuid(for:)(a1);
      if (v35)
      {
        v36 = v34;
        v37 = v35;
        if (v104)
          v38 = v104[2] == 0;
        else
          v38 = 1;
        v59 = type metadata accessor for EpisodeListSettings(0);
        v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v21, 1, 1, v59);
        memset(v105, 0, 32);
        v61 = EpisodeOffer.contentId.getter(v60);
        sub_10025EB28(v36, v37, (uint64_t)v21, (uint64_t)v105, 0, v38, v61, 0, 0, 1, v102, v101, 0);
        swift_bridgeObjectRelease(v37);
        sub_100007A28((uint64_t)v105, (uint64_t *)&unk_100552300);
        sub_100007A28((uint64_t)v21, &qword_10055B790);
        return;
      }
      v51 = sub_10034FCF0();
      if ((v51 & 1) != 0)
      {
        v52 = sub_100005EC8(0, &qword_10055D1F0, off_1004A43C0);
        v53 = objc_msgSend((id)swift_getObjCClassFromMetadata(v52), "sharedInstance");
        v54 = v89;
        v55 = EpisodeOffer.showOffer.getter(v53);
        ShowOffer.title.getter(v55);
        v57 = v56;
        (*(void (**)(char *, uint64_t))(v90 + 8))(v54, v91);
        v58 = String._bridgeToObjectiveC()();
        objc_msgSend(v53, "showDialogForReason:podcastTitle:completion:", 1, v58, 0, swift_bridgeObjectRelease(v57).n128_f64[0]);

        return;
      }
      v62 = EpisodeOffer.mediaType.getter(v51);
      v64 = v104;
      if (v62 == 3)
        goto LABEL_17;
      v69 = EpisodeMediaType.rawValue.getter(v62);
      v71 = v70;
      v73 = EpisodeMediaType.rawValue.getter(2);
      v74 = v72;
      if (v69 == v73 && v71 == v72)
      {
        swift_bridgeObjectRelease_n(v71, 2);
      }
      else
      {
        v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v71, v73, v72, 0);
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(v74);
        if ((v76 & 1) == 0)
        {
LABEL_17:
          if (v64 && (v62 = MTPlaybackContinuousPlaybackEnabled(v62, v63), (_DWORD)v62))
          {
            v65 = sub_10003F544(&qword_1005548E0);
            v66 = swift_allocObject(v65, 40, 7);
            *(_OWORD *)(v66 + 16) = xmmword_1003CA200;
            *(_QWORD *)(v66 + 32) = EpisodeOffer.contentId.getter(v66);
            *(_QWORD *)&v105[0] = v66;
            swift_bridgeObjectRetain(v64);
            sub_1001731A8(v67);
            v68 = *(_QWORD *)&v105[0];
            sub_100261CEC(*(uint64_t *)&v105[0], v102, v101, v100);
            swift_bridgeObjectRelease(v68);
          }
          else
          {
            v75 = EpisodeOffer.contentId.getter(v62);
            sub_100262274(v75, v102, v101, v100);
          }
          return;
        }
      }
      v77 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v78 = v86;
      EpisodeOffer.streamUrl.getter(v79);
      URL._bridgeToObjectiveC()(v80);
      v82 = v81;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v78, v88);
      v83 = sub_100138698((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_100026844(&qword_10055B800, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1003C9B68);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v77, "openURL:options:completionHandler:", v82, isa, 0, swift_bridgeObjectRelease(v83).n128_f64[0]);

      return;
    }
  }
  v43 = sub_10003F544(&qword_1005548E0);
  v44 = swift_allocObject(v43, 40, 7);
  *(_OWORD *)(v44 + 16) = xmmword_1003CA200;
  *(_QWORD *)(v44 + 32) = EpisodeOffer.contentId.getter(v44);
  if (v104)
    v45 = v104;
  else
    v45 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v105[0] = v44;
  swift_bridgeObjectRetain(v104);
  sub_1001731A8((uint64_t)v45);
  *v13 = *(_QWORD *)&v105[0];
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v92 + 104))(v13, enum case for MediaIdentifier.episodes(_:), v93);
  v46 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v21, 1, 1, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v96, a1, v98);
  v47 = v99;
  sub_1002F7D90(v99);
  v48 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
  v49 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 0, 1, v48);
  v50 = static Set<>.default.getter(v49);
  PlaybackIntent.init(id:listSettings:initialItem:options:)(v13, v21, v47, v50);
  sub_10025F104((uint64_t)v15, v102, v101, 0, v100);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v15, v97);
}

void sub_100261CEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  objc_class *v59;
  _QWORD *v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t ObjectType;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;

  v69 = a3;
  v8 = sub_10003F544(&qword_10055B788);
  __chkstk_darwin(v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v11);
  v74 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MediaIdentifier(0);
  v67 = *(_QWORD *)(v13 - 8);
  v68 = v13;
  __chkstk_darwin(v13);
  v70 = (uint64_t *)((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for PlaybackIntent(0);
  v72 = *(_QWORD *)(v15 - 8);
  v73 = v15;
  __chkstk_darwin(v15);
  v71 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003F544(&qword_10055A550);
  __chkstk_darwin(v17);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PendingPlaybackMetadata(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
    v26 = *(_QWORD *)(a1 + 32);
  else
    v26 = 0;
  PendingPlaybackMetadata.init(adamId:uuid:)(v26, v25 == 0, 0, 0, v22);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  v75 = v4;
  if (v27 == 1)
  {
    v28 = sub_100007A28((uint64_t)v19, &qword_10055A550);
    if ((static Podcasts.isBlueMoonEnabled()(v28) & 1) == 0)
      goto LABEL_6;
LABEL_16:
    v41 = v69 & 1;
    v42 = v70;
    *v70 = a1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v67 + 104))(v42, enum case for MediaIdentifier.episodes(_:), v68);
    v43 = type metadata accessor for EpisodeListSettings(0);
    v44 = v74;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v74, 1, 1, v43);
    v45 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v10, 1, 1, v45);
    swift_bridgeObjectRetain(a1);
    v47 = static Set<>.default.getter(v46);
    v48 = (uint64_t)v71;
    PlaybackIntent.init(id:listSettings:initialItem:options:)(v42, v44, v10, v47);
    sub_10025F104(v48, a2, v41, 0, a4);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v48, v73);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v19, v20);
  v66 = v10;
  v35 = a2;
  v36 = a4;
  v38 = v4[13];
  v37 = v4[14];
  sub_10003A834(v4 + 10, v38);
  v39 = v38;
  a4 = v36;
  a2 = v35;
  v10 = v66;
  dispatch thunk of PendingPlaybackControllerProtocol.preflight(_:)(v24, v39, v37);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  if ((static Podcasts.isBlueMoonEnabled()(v40) & 1) != 0)
    goto LABEL_16;
LABEL_6:
  if (v25)
  {
    v74 = a4;
    swift_bridgeObjectRetain(a1);
    v29 = 0;
    v30 = _swiftEmptyArrayStorage;
    do
    {
      v33 = *(_QWORD *)(a1 + 8 * v29 + 32);
      if ((AdamID.isEmpty.getter(v33) & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
        v76 = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10017B0DC(0, v30[2] + 1, 1);
          v30 = v76;
        }
        v32 = v30[2];
        v31 = v30[3];
        if (v32 >= v31 >> 1)
        {
          sub_10017B0DC(v31 > 1, v32 + 1, 1);
          v30 = v76;
        }
        v30[2] = v32 + 1;
        v30[v32 + 4] = v33;
      }
      ++v29;
    }
    while (v25 != v29);
    swift_bridgeObjectRelease(a1);
    v49 = v30[2];
    if (v49)
    {
      v50 = sub_100030584();
      swift_retain();
      v51 = 0;
      v52 = _swiftEmptyArrayStorage;
      do
      {
        v76 = (_QWORD *)v30[v51 + 4];
        v53 = BinaryInteger.description.getter(&type metadata for UInt64, v50);
        v55 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
          v52 = sub_10027AE00(0, v52[2] + 1, 1, v52);
        v57 = v52[2];
        v56 = v52[3];
        if (v57 >= v56 >> 1)
          v52 = sub_10027AE00((_QWORD *)(v56 > 1), v57 + 1, 1, v52);
        ++v51;
        v52[2] = v57 + 1;
        v58 = &v52[2 * v57];
        v58[4] = v53;
        v58[5] = v55;
      }
      while (v49 != v51);
      swift_release(v30);
    }
    else
    {
      v52 = _swiftEmptyArrayStorage;
    }
    swift_release(v30);
    v59 = (objc_class *)type metadata accessor for NetworkMediaManifest(0);
    v60 = objc_allocWithZone(v59);
    v61 = objc_allocWithZone(v59);
    v62 = (char *)sub_1001B983C(0, 0, (uint64_t)v52, 0, 0, 0, 0);
    ObjectType = swift_getObjectType(v60, v63);
    swift_deallocPartialClassInstance(v60, ObjectType, *(unsigned int *)((swift_isaMask & *v60) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v60) + 0x34));
    *(_QWORD *)&v62[OBJC_IVAR___MTNetworkMediaManifest_forwardItemCount] = v25;
    sub_10025F5DC(v62, 3, 0, 0, 0, 0, 1, v74);

  }
}

void sub_100262274(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  int v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t ObjectType;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;

  v8 = a3 & 1;
  v9 = sub_10003F544(&qword_10055B788);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v12);
  v68 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MediaIdentifier(0);
  v62 = *(_QWORD *)(v14 - 8);
  v63 = v14;
  __chkstk_darwin(v14);
  v64 = (uint64_t *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for PlaybackIntent(0);
  v66 = *(_QWORD *)(v16 - 8);
  v67 = v16;
  __chkstk_darwin(v16);
  v65 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10003F544(&qword_10055A550);
  __chkstk_darwin(v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PendingPlaybackMetadata(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  PendingPlaybackMetadata.init(adamId:uuid:)(a1, 0, 0, 0, v25);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  v69 = v4;
  if (v26 == 1)
  {
    v27 = sub_100007A28((uint64_t)v20, &qword_10055A550);
    if ((static Podcasts.isBlueMoonEnabled()(v27) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    v50 = sub_10003F544(&qword_1005548E0);
    v51 = swift_allocObject(v50, 40, 7);
    *(_OWORD *)(v51 + 16) = xmmword_1003CA200;
    *(_QWORD *)(v51 + 32) = a1;
    v52 = v63;
    v53 = v64;
    *v64 = v51;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v62 + 104))(v53, enum case for MediaIdentifier.episodes(_:), v52);
    v54 = type metadata accessor for EpisodeListSettings(0);
    v55 = v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v68, 1, 1, v54);
    v56 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v11, 1, 1, v56);
    v58 = static Set<>.default.getter(v57);
    v59 = (uint64_t)v65;
    PlaybackIntent.init(id:listSettings:initialItem:options:)(v53, v55, v11, v58);
    sub_10025F104(v59, a2, v8, 0, a4);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v59, v67);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
  v61 = a1;
  v42 = v11;
  v43 = a2;
  v44 = v8;
  v45 = a4;
  v47 = v4[13];
  v46 = v4[14];
  sub_10003A834(v4 + 10, v47);
  v48 = v47;
  a4 = v45;
  v8 = v44;
  a2 = v43;
  v11 = v42;
  a1 = v61;
  dispatch thunk of PendingPlaybackControllerProtocol.preflight(_:)(v24, v48, v46);
  v49 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  if ((static Podcasts.isBlueMoonEnabled()(v49) & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((AdamID.isEmpty.getter(a1) & 1) == 0)
  {
    v28 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", a1);
    if (v28)
    {
      v29 = v28;
      v30 = objc_msgSend(v28, "description");
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v34 = (objc_class *)type metadata accessor for NetworkMediaManifest(0);
      v35 = objc_allocWithZone(v34);
      v36 = sub_10003F544((uint64_t *)&unk_1005588B0);
      v37 = swift_allocObject(v36, 48, 7);
      *(_OWORD *)(v37 + 16) = xmmword_1003CA200;
      *(_QWORD *)(v37 + 32) = v31;
      *(_QWORD *)(v37 + 40) = v33;
      v38 = objc_allocWithZone(v34);
      v39 = (void *)sub_1001B983C(0, 0, v37, 0, 0, 0, 0);
      ObjectType = swift_getObjectType(v35, v40);
      swift_deallocPartialClassInstance(v35, ObjectType, *(unsigned int *)((swift_isaMask & *v35) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v35) + 0x34));
      sub_10025F5DC(v39, 3, 0, 0, 0, a2, v8, a4);

    }
  }
}

void sub_1002626F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t ObjectType;
  void *v34;

  v4 = sub_10003F544(&qword_10055B788);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10003F544(&qword_10055B790);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MediaIdentifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for PlaybackIntent(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static Podcasts.isBlueMoonEnabled()(v16) & 1) != 0)
  {
    *v13 = a1;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for MediaIdentifier.podcast(_:), v10);
    v19 = type metadata accessor for EpisodeListSettings(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
    v20 = type metadata accessor for PodcastsMediaLibrary.MediaItem(0);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
    v22 = static Set<>.default.getter(v21);
    PlaybackIntent.init(id:listSettings:initialItem:options:)(v13, v9, v6, v22);
    sub_10025F104((uint64_t)v18, 0, 1, 0, a2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  else if ((AdamID.isEmpty.getter(a1) & 1) == 0)
  {
    v23 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", a1);
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, "description");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = (objc_class *)type metadata accessor for NetworkMediaManifest(0);
      v30 = objc_allocWithZone(v29);
      v31 = objc_allocWithZone(v29);
      v34 = (void *)sub_1001B983C(v26, v28, 0, 0, 0, 0, 0);
      ObjectType = swift_getObjectType(v30, v32);
      swift_deallocPartialClassInstance(v30, ObjectType, *(unsigned int *)((swift_isaMask & *v30) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v30) + 0x34));
      sub_10025F5DC(v34, 3, 0, 0, 0, 0, 1, a2);

    }
  }
}

