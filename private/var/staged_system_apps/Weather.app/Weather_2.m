uint64_t sub_1000F9854(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25[9];

  v7 = *v3;
  sub_10009E564(*(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v25, a2, a3);
  v8 = sub_10007A148();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_1000C3B30();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (uint64_t *)(v12 + 16 * v10);
    v14 = v13[1];
    v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100099264(*v13, v14, a2, a3) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      sub_10009D2E0();
      v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      sub_1000C3B30();
      if ((v20 & 1) == 0)
        break;
      v21 = (uint64_t *)(v12 + 16 * v10);
      v22 = v21[1];
      v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100099264(*v21, v22, a2, a3) & 1) != 0)
        goto LABEL_7;
    }
  }
  sub_10009D2E0();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v25[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000FB4F0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v25[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_1000F99D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_1000986AC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = sub_1000D91D0();
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  sub_10009D98C();
  __chkstk_darwin(v13);
  v14 = sub_1000BE9F0();
  type metadata accessor for PreprocessedWeatherData(v14);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  v39 = (uint64_t)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C1A18();
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_10007A130();
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_10009883C();
  sub_10009DF40();
  __chkstk_darwin(v19);
  v21 = (char *)v36 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)v36 - v23;
  v42 = v5;
  sub_10009EF94();
  sub_100099360();
  sub_1000EED10(v9, v7, v5);
  swift_bridgeObjectRelease();
  v25 = type metadata accessor for LocationWeatherDataState(0);
  sub_100088FC8((uint64_t)v24, 1, v25);
  if (v26)
    goto LABEL_5;
  sub_10003773C((uint64_t)v24, (uint64_t)v21, &qword_100BC3380);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21);
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    sub_10009BC18(EnumCaseMultiPayload, type metadata accessor for LocationWeatherDataState);
LABEL_5:
    sub_100095B78(v11, v0, type metadata accessor for NewsDataModel);
    swift_storeEnumTagMultiPayload(v0, v25, 0);
    _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v25);
    sub_100099360();
    sub_10011E704();
    goto LABEL_6;
  }
  v28 = sub_1000BA294(&qword_100BC3358);
  v36[1] = v9;
  v29 = v28;
  v30 = *(int *)(v28 + 48);
  v38 = v3;
  v31 = &v21[v30];
  v37 = &v21[*(int *)(v28 + 64)];
  sub_10007C77C((uint64_t)v21, v1, type metadata accessor for WeatherData);
  v32 = (uint64_t)v31;
  v33 = v39;
  sub_10007C77C(v32, v39, type metadata accessor for PreprocessedWeatherData);
  v34 = v0 + *(int *)(v29 + 48);
  v35 = v0 + *(int *)(v29 + 64);
  sub_100095B78(v1, v0, type metadata accessor for WeatherData);
  sub_100095B78(v33, v34, type metadata accessor for PreprocessedWeatherData);
  sub_100095B78(v11, v35, type metadata accessor for NewsDataModel);
  sub_10009525C(v0, v25);
  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v25);
  sub_100099360();
  sub_10011E704();
  sub_1000215BC(v33, type metadata accessor for PreprocessedWeatherData);
  sub_1000215BC(v1, type metadata accessor for WeatherData);
  v3 = v38;
  sub_1000B3B44((uint64_t)v37);
LABEL_6:
  sub_100021A14((uint64_t)v24, &qword_100BC3380);
  swift_bridgeObjectRetain(v3);
  sub_10067187C();
  sub_1000B32C8();
  sub_1000D13D4(v40);
  sub_100098640();
}

void sub_1000F9CD4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for WeatherData.WeatherStatisticsState(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000BCED8();
  sub_100078058(v1, v1, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1);
  if (!(_DWORD)EnumCaseMultiPayload)
  {
    sub_10009BC18(EnumCaseMultiPayload, type metadata accessor for WeatherData.WeatherStatisticsState);
    goto LABEL_5;
  }
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
LABEL_5:
    v9 = type metadata accessor for WeatherStatisticsModel(0);
    v7 = a1;
    v8 = 1;
    goto LABEL_6;
  }
  v6 = type metadata accessor for WeatherStatisticsModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, v1, v6);
  v7 = a1;
  v8 = 0;
  v9 = v6;
LABEL_6:
  _s7Weather24LocationCompositionStateOwst_0(v7, v8, 1, v9);
  sub_100079F70();
}

void sub_1000F9DA4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void (*v5)(uint64_t, uint64_t);

  a3(0);
  sub_10009BC70();
  v5(a2, a1);
  sub_10004A298();
}

void sub_1000F9DDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  sub_10004A2B0(a1, a2, a3);
  sub_10009BC70();
  v5(v3, v4);
  sub_10004A298();
}

uint64_t sub_1000F9E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v6 = *(int *)(v5 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Elevation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BC3370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = *(int *)(v5 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for BackgroundMoonData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BC3378);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_1000F9F68()
{
  return sub_1000EDEDC((uint64_t (*)(void))&Location.id.getter);
}

void sub_1000F9F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v24[6];

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  sub_1000DC4C8();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000986FC();
  v24[3] = v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  sub_100079F7C();
  v24[4] = v8;
  sub_1000C1A18();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v24[5] = v10;
  sub_1000C22D0();
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v24[1] = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v13);
  sub_1000860D0();
  v24[2] = v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  v16 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_10003BC68();
  __chkstk_darwin(v18);
  sub_1000F3FD8();
  __chkstk_darwin(v19);
  sub_1000BA294(&qword_100BFB1C0);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_1000B2634();
  v22 = v0 + v21;
  sub_100095B78(v4, v0, type metadata accessor for LocationWeatherDataState);
  sub_100095B78(v2, v22, type metadata accessor for LocationWeatherDataState);
  v23 = (char *)sub_1000FA104 + 4 * byte_1009BBBA4[swift_getEnumCaseMultiPayload(v0, v16)];
  __asm { BR              X10 }
}

void sub_1000FA104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100095B78(v0, v3, type metadata accessor for LocationWeatherDataState);
  if (sub_1000C6BB0())
  {
    sub_1000215BC(v3, type metadata accessor for NewsDataModel);
    sub_1000B3B00(v4, &qword_100BFB1C0);
  }
  else
  {
    sub_10007C77C(v1, v2, type metadata accessor for NewsDataModel);
    v5 = sub_1000987A8();
    sub_1000FA3BC(v5, v6);
    sub_1000215BC(v2, type metadata accessor for NewsDataModel);
    sub_1000215BC(v3, type metadata accessor for NewsDataModel);
    sub_100098AD4(v7, type metadata accessor for LocationWeatherDataState);
  }
  sub_100098640();
}

uint64_t sub_1000FA3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for News(0);
  v27 = *(_QWORD *)(v4 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  type metadata accessor for NewsDataModel(0);
  sub_10009D98C();
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  sub_1000BA294(&qword_100C16320);
  sub_10009D98C();
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v18[*(int *)(v16 + 48)];
  sub_100080C0C(a1, (uint64_t)v18, type metadata accessor for NewsDataModel);
  sub_100080C0C(a2, (uint64_t)v19, type metadata accessor for NewsDataModel);
  if (sub_10009D644((uint64_t)v18) == 1)
  {
    sub_100080C0C((uint64_t)v18, (uint64_t)v12, type metadata accessor for NewsDataModel);
    if (sub_10009D644((uint64_t)v19) == 1)
    {
      v20 = *(_QWORD *)v19;
      sub_1000FA5E4();
      v22 = v21;
      swift_bridgeObjectRelease(v20);
      sub_1000986C4();
LABEL_9:
      sub_10006BD5C((uint64_t)v18, type metadata accessor for NewsDataModel);
      return v22 & 1;
    }
    sub_1000986C4();
  }
  else
  {
    sub_100080C0C((uint64_t)v18, (uint64_t)v14, type metadata accessor for NewsDataModel);
    if (sub_10009D644((uint64_t)v19) != 1)
    {
      v23 = v27;
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v8, v19, v4);
      v22 = static News.== infix(_:_:)(v14, v8);
      v24 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v24(v8, v4);
      v24((uint64_t)v14, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v4);
  }
  sub_100931D54((uint64_t)v18);
  v22 = 0;
  return v22 & 1;
}

void sub_1000FA5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v121;
  uint64_t v122;
  void (*v123)(uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  v150 = type metadata accessor for UUID(0);
  v153 = *(_QWORD *)(v150 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_1000986FC();
  v152 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_100079F7C();
  v151 = v10;
  v11 = sub_10009876C();
  v12 = type metadata accessor for URL(v11);
  sub_1000BD980();
  __chkstk_darwin(v13);
  sub_100079F58();
  sub_1000BA294(&qword_100BD4280);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_1000986FC();
  v142 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  v18 = (char *)&v124 - v17;
  v147 = sub_1000BA294(&qword_100BCCFF0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v143 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v23 = (char *)&v124 - v22;
  v154 = (int *)type metadata accessor for NewsArticle(0);
  v24 = *((_QWORD *)v154 - 1);
  __chkstk_darwin(v154);
  sub_100094F2C();
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v124 - v26);
  type metadata accessor for NewsArticlePlacement(0);
  sub_1000DBFF8();
  __chkstk_darwin(v28);
  sub_1000BEC0C();
  v146 = v29;
  sub_10009D2A4();
  v31 = __chkstk_darwin(v30);
  v33 = *(_QWORD *)(v6 + 16);
  if (v33 != *(_QWORD *)(v4 + 16) || !v33 || v6 == v4)
    goto LABEL_106;
  v141 = v12;
  v133 = v31;
  v128 = v24;
  v145 = (uint64_t *)((char *)&v124 - v32);
  sub_1000C700C();
  v36 = v6 + v35;
  v37 = v4 + v35;
  v39 = *(_QWORD *)(v38 + 72);
  v137 = v23;
  v40 = v146;
  v132 = v41;
  v131 = v36;
  v130 = v37;
  v129 = v39;
  while (1)
  {
    v140 = v34;
    v42 = v39 * v34;
    v43 = v145;
    sub_1000DC370(v36 + v39 * v34, (uint64_t)v145);
    sub_1000DC370(v37 + v42, v40);
    v44 = *v43;
    v45 = *(_QWORD *)v40;
    v46 = *(_QWORD *)(v44 + 16);
    if (v46 != *(_QWORD *)(*(_QWORD *)v40 + 16))
    {
LABEL_105:
      sub_100079F9C(v40);
      sub_100079F9C((uint64_t)v145);
LABEL_106:
      sub_100098640();
      return;
    }
    if (v46 && v44 != v45)
      break;
LABEL_92:
    type metadata accessor for ArticlePlacementLocation(0);
    sub_10000F1C8(&qword_100BFC658, (uint64_t (*)(uint64_t))&type metadata accessor for ArticlePlacementLocation);
    sub_10011E2B0();
    sub_10011E2B0();
    if (v157 == v155 && v158 == v156)
    {
      sub_100098718(v158);
      sub_100079FB4(v40);
      sub_100079FB4((uint64_t)v145);
    }
    else
    {
      v121 = sub_100099264(v157, v158, v155, v156);
      sub_1000986C4();
      sub_10009934C();
      sub_100079FB4(v40);
      sub_100079FB4((uint64_t)v145);
      if ((v121 & 1) == 0)
        goto LABEL_106;
    }
    v34 = v140 + 1;
    v36 = v131;
    v37 = v130;
    v39 = v129;
    if (v140 + 1 == v132)
      goto LABEL_106;
  }
  v47 = 0;
  v48 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
  v49 = v44 + v48;
  v136 = v45 + v48;
  v50 = *(_QWORD *)(v128 + 72);
  v138 = v0;
  v139 = v1;
  v134 = v18;
  v127 = v45;
  v126 = v46;
  v125 = v49;
  v124 = v50;
  while (1)
  {
    v51 = v47;
    v52 = v50 * v47;
    v53 = (uint64_t *)type metadata accessor for NewsArticle;
    sub_100099904(v49 + v52, (uint64_t)v27);
    v54 = *(_QWORD *)(v45 + 16);
    v135 = v51;
    if (v51 >= v54)
      goto LABEL_108;
    sub_100099904(v136 + v52, (uint64_t)v2);
    v55 = v27[1];
    v56 = v2[1];
    v57 = *v27 == *v2 && v55 == v56;
    if (!v57 && (sub_100099264(*v27, v55, *v2, v56) & 1) == 0)
      goto LABEL_104;
    v58 = v27[2];
    v59 = v27[3];
    v60 = v2[2];
    v61 = v2[3];
    v62 = v58 == v60 && v59 == v61;
    if (!v62 && (sub_100099264(v58, v59, v60, v61) & 1) == 0)
      goto LABEL_104;
    v63 = v154[6];
    v64 = (uint64_t)v2 + v63;
    v65 = (uint64_t)v137;
    v66 = (uint64_t)&v137[*(int *)(v147 + 48)];
    sub_1000CE570((uint64_t)v27 + v63, (uint64_t)v137);
    sub_1000CE570(v64, v66);
    v67 = v141;
    sub_100088FC8(v65, 1, v141);
    if (v57)
    {
      sub_100088FC8(v66, 1, v67);
      if (!v57)
        goto LABEL_103;
      sub_100075DD0(v65);
    }
    else
    {
      sub_1000CE570(v65, (uint64_t)v134);
      sub_100088FC8(v66, 1, v67);
      if (v68)
      {
LABEL_102:
        v122 = sub_100087924();
        v123(v122);
LABEL_103:
        sub_100021A14(v65, &qword_100BCCFF0);
LABEL_104:
        sub_100079F9C((uint64_t)v2);
        sub_100079F9C((uint64_t)v27);
        v40 = v146;
        goto LABEL_105;
      }
      sub_1000DB3FC();
      sub_10000F1C8(qword_100BCCE60, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      sub_1000FDC54(v69);
      sub_1000FC5B0();
      sub_10011E074();
      sub_1000B3B4C(v65);
      if ((v66 & 1) == 0)
        goto LABEL_104;
    }
    if ((static Date.== infix(_:_:)((char *)v27 + v154[7], (char *)v2 + v154[7]) & 1) == 0
      || (static URL.== infix(_:_:)((char *)v27 + v154[8], (char *)v2 + v154[8]) & 1) == 0)
    {
      goto LABEL_104;
    }
    v70 = v154[9];
    v71 = (char *)v27 + v70;
    v72 = (char *)v2 + v70;
    v73 = *(uint64_t *)((char *)v27 + v70);
    v74 = *(uint64_t *)((char *)v27 + v70 + 8);
    v75 = *(uint64_t *)((char *)v2 + v70);
    v76 = *(uint64_t *)((char *)v2 + v70 + 8);
    v77 = v73 == v75 && v74 == v76;
    if (!v77 && (sub_100099264(v73, v74, v75, v76) & 1) == 0)
      goto LABEL_104;
    v78 = *((_QWORD *)v71 + 2);
    v79 = *((_QWORD *)v71 + 3);
    v80 = *((_QWORD *)v72 + 2);
    v81 = *((_QWORD *)v72 + 3);
    v82 = v78 == v80 && v79 == v81;
    if (!v82 && (sub_100099264(v78, v79, v80, v81) & 1) == 0)
      goto LABEL_104;
    v83 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
    v84 = (uint64_t)&v71[v83];
    v85 = (uint64_t)&v72[v83];
    v65 = v143;
    v86 = v143 + *(int *)(v147 + 48);
    sub_1000CE570(v84, v143);
    sub_1000CE570(v85, v86);
    v87 = v141;
    sub_100088FC8(v65, 1, v141);
    if (v57)
    {
      sub_100088FC8(v86, 1, v87);
      if (!v57)
        goto LABEL_103;
      sub_100075DD0(v65);
    }
    else
    {
      sub_1000CE570(v65, v142);
      sub_100088FC8(v86, 1, v87);
      if (v88)
        goto LABEL_102;
      sub_1000DB3FC();
      sub_10000F1C8(qword_100BCCE60, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      sub_1000FDC54(v89);
      sub_1000FC5B0();
      sub_10011E074();
      sub_1000B3B4C(v65);
      if ((v86 & 1) == 0)
        goto LABEL_104;
    }
    sub_100095348();
    if (!v57)
      goto LABEL_104;
    if (v86 && (uint64_t (*)(uint64_t))v87 != type metadata accessor for NewsArticle)
    {
      v90 = *(_QWORD *)(v87 + 32);
      v91 = *(_QWORD *)(v87 + 40);
      v92 = v90 == loc_1000FAF14 && v91 == loc_1000FAF1C;
      if (!v92 && (sub_100099264(v90, v91, loc_1000FAF14, loc_1000FAF1C) & 1) == 0)
        goto LABEL_104;
      if (v86 != 1)
      {
        v53 = (uint64_t *)sub_1000FAF2C;
        v87 += 56;
        do
        {
          v93 = *(_QWORD *)(v87 - 8);
          v94 = *(_QWORD *)v87;
          v95 = v93 == loc_1000FAF24 && v94 == *(_QWORD *)sub_1000FAF2C;
          if (!v95 && (sub_100099264(v93, v94, loc_1000FAF24, *(uint64_t *)sub_1000FAF2C) & 1) == 0)
            goto LABEL_104;
          sub_10009EDD4();
        }
        while (!v57);
      }
    }
    sub_100095348();
    if (!v57)
      goto LABEL_104;
    if (v86 && v87 != (_QWORD)v53)
    {
      v97 = *(_QWORD *)(v87 + 32);
      v98 = *(_QWORD *)(v87 + 40);
      v99 = v53[4];
      v100 = v53[5];
      v101 = v97 == v99 && v98 == v100;
      if (!v101 && (sub_100099264(v97, v98, v99, v100) & 1) == 0)
        goto LABEL_104;
      if (v86 != 1)
        break;
    }
LABEL_85:
    v108 = v154[12];
    v109 = *(uint64_t *)((char *)v27 + v108);
    v148 = *(uint64_t *)((char *)v2 + v108);
    v149 = v109;
    v110 = *(_QWORD *)(v109 + 16);
    if (v110 != *(_QWORD *)(v148 + 16))
      goto LABEL_104;
    if (v110 && v149 != v148)
    {
      sub_10094F864();
      v144 = v111;
      do
      {
        v112 = v151;
        sub_1000DC0B8(v151, (uint64_t)v53 + v149);
        v113 = v2;
        v114 = v152;
        sub_1000DC0B8(v152, (uint64_t)v53 + v148);
        sub_10000F1C8(&qword_100BE4C00, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        v118 = sub_1000ED3C0(v112, v116, v117, v115);
        v119 = v114;
        v2 = v113;
        sub_100117404(v119);
        sub_100117404(v112);
        if ((v118 & 1) == 0)
          goto LABEL_104;
        v53 = (uint64_t *)((char *)v53 + v144);
      }
      while (--v110);
    }
    v47 = v135 + 1;
    sub_100079F9C((uint64_t)v2);
    sub_100079F9C((uint64_t)v27);
    v0 = v138;
    v1 = v139;
    v18 = v134;
    v40 = v146;
    v45 = v127;
    v49 = v125;
    v50 = v124;
    if (v47 == v126)
      goto LABEL_92;
  }
  v53 += 7;
  v102 = (uint64_t *)(v87 + 56);
  while (v86 > 1)
  {
    v103 = *(v102 - 1);
    v104 = *v102;
    v105 = *(v53 - 1);
    v106 = *v53;
    v107 = v103 == v105 && v104 == v106;
    if (!v107 && (sub_100099264(v103, v104, v105, v106) & 1) == 0)
      goto LABEL_104;
    sub_10009EDD4();
    if (v57)
      goto LABEL_85;
  }
  __break(1u);
LABEL_108:
  __break(1u);
}

uint64_t type metadata accessor for NewsArticlePlacement(uint64_t a1)
{
  uint64_t result;

  result = qword_100C06F90;
  if (!qword_100C06F90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsArticlePlacement);
  return result;
}

uint64_t type metadata accessor for NewsArticle(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0BCA0;
  if (!qword_100C0BCA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsArticle);
  return result;
}

void sub_1000FAF2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = type metadata accessor for WeatherData(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009883C();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for Locale(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100079F58();
  v15 = sub_1000BA294(&qword_100BCA0E0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_10009883C();
  v21 = __chkstk_darwin(v20);
  __chkstk_darwin(v21);
  v25 = *a1;
  v26 = a1[1];
  v27 = *a2;
  v28 = a2[1];
  v29 = *a1 == *a2 && v26 == v28;
  if (!v29)
  {
    v49 = v24;
    v50 = (uint64_t)&v43 - v22;
    v44 = v14;
    v45 = v23;
    v43 = v2;
    v47 = v9;
    v48 = v5;
    v46 = v12;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0) & 1) == 0)
    {
      v30 = a1;
      v31 = v48;
      v32 = v50;
      sub_10010A5AC((uint64_t)a1 + *(int *)(v48 + 20), v50);
      v33 = (uint64_t)a2;
      v34 = v49;
      sub_10010A5AC((uint64_t)a2 + *(int *)(v31 + 20), v49);
      v35 = (uint64_t)&v18[*(int *)(v15 + 48)];
      sub_10010A5AC(v32, (uint64_t)v18);
      sub_10010A5AC(v34, v35);
      sub_1000BC008((uint64_t)v18);
      if (v29)
      {
        sub_10009D84C(v34);
        sub_10009D84C(v32);
        sub_1000BC008(v35);
        if (v29)
        {
          sub_100021A14((uint64_t)v18, &qword_100BC3340);
          sub_1000DF9CC((uint64_t)a1);
          sub_1000DD454();
LABEL_17:
          static WeatherDataModel.== infix(_:_:)((char *)a2 + *(int *)(v48 + 24), v33 + *(int *)(v48 + 24));
          goto LABEL_18;
        }
      }
      else
      {
        v36 = v45;
        sub_10010A5AC((uint64_t)v18, v45);
        sub_1000BC008(v35);
        if (!v37)
        {
          v39 = v43;
          v38 = v44;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v43, v35, v13);
          sub_100086DA4(&qword_100BCA0F8, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
          v41 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v39, v13, v40);
          a2 = v30;
          v42 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
          v42(v39, v13);
          sub_10009D84C(v49);
          sub_10009D84C(v50);
          v42(v36, v13);
          sub_10009D84C((uint64_t)v18);
          sub_1000DF9CC((uint64_t)a2);
          sub_1000DD454();
          if ((v41 & 1) == 0)
            goto LABEL_18;
          goto LABEL_17;
        }
        sub_100021A14(v49, &qword_100BC3340);
        sub_100021A14(v50, &qword_100BC3340);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v36, v13);
      }
      sub_100021A14((uint64_t)v18, &qword_100BCA0E0);
      sub_1000DF9CC((uint64_t)a1);
      sub_1000DD454();
LABEL_18:
      sub_1000215BC(v33, type metadata accessor for WeatherData);
      sub_1000215BC((uint64_t)a2, type metadata accessor for WeatherData);
    }
  }
  sub_100098640();
}

void sub_1000FB2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char *v4;
  uint64_t v5;

  sub_1000CF948();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_1000B4B0C(v2, v3, v5);
  v4 = (char *)sub_1000FB308 + 4 * byte_1009BBB9C[sub_10009F7EC(v0)];
  __asm { BR              X10 }
}

void sub_1000FB308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000F4500(v3, a2, type metadata accessor for NewsDataModel);
  v4 = sub_1000C22D0();
  sub_10009926C(v2, 0, v5, v4);
  sub_100079F70();
}

void sub_1000FB3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char *v4;
  uint64_t v5;

  sub_1000CF948();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_1000B4B0C(v2, v3, v5);
  v4 = (char *)sub_1000FB3FC + 4 * byte_1009BBB98[sub_10009F7EC(v0)];
  __asm { BR              X10 }
}

void sub_1000FB3FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10009BC18(a1, type metadata accessor for LocationWeatherDataState);
  v2 = sub_1000DC4C8();
  sub_10009926C(v1, 1, v3, v2);
  sub_100079F70();
}

uint64_t sub_1000FB478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10085E5F4);
}

uint64_t sub_1000FB484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10085E4E4);
}

uint64_t sub_1000FB490(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000FB498(a1, a2, a3, *(double (**)(void))(v3 + 16));
}

uint64_t sub_1000FB498(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  uint64_t v6;
  uint64_t result;
  double v8;
  uint64_t v9;

  v5 = a4();
  v6 = *a1 + 8;
  v8 = v5;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
  *a1 = v6;
  return result;
}

double sub_1000FB4E8()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void sub_1000FB4F0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100601C0C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000FECD0();
      goto LABEL_22;
    }
    sub_1000520AC(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29);
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

char *sub_1000FB688(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  swift_bridgeObjectRetain(v6);
  v10 = sub_1000BA294(&qword_100BC4E68);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v11(&a1[a3[6]], &a2[a3[6]], v10);
  v11(&a1[a3[7]], &a2[a3[7]], v10);
  v12 = a3[8];
  v13 = a3[9];
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = &a1[v13];
  v18 = &a2[v13];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  return a1;
}

void sub_1000FB760(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;

  v3 = sub_1000BA294(&qword_100BCB340);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DailyComponentView(0);
  v9 = sub_1000BA294(&qword_100BDE090);
  State.wrappedValue.getter(v5, v9);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v6) == 1)
  {
    sub_100021A14((uint64_t)v5, &qword_100BCB340);
  }
  else
  {
    sub_10007802C((uint64_t)v5, (uint64_t)v8, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    v10 = *v1;
    swift_bridgeObjectRetain(*v1);
    v11 = sub_100492AF0((uint64_t)v8, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v10);
    sub_1000215BC((uint64_t)v8, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    if ((v13 & 1) == 0 && v11 != a1 && __OFSUB__(a1, 1))
      __break(1u);
  }
}

void sub_1000FB8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  sub_1000986AC();
  v1 = sub_1000D91D0();
  __chkstk_darwin(v1);
  sub_100079FBC();
  sub_1000BA294(&qword_100BC3650);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10004A2E8();
  v3 = sub_1000878D0();
  sub_100095B78(v3, v4, v5);
  v6 = type metadata accessor for LocationAvailableDataSetState(0);
  sub_10009926C(v0, 0, v7, v6);
  sub_1000989F8();
  sub_100099360();
  sub_1000FB9C8();
  sub_10009EF94();
  sub_10067187C();
  sub_1000B32C8();
  v8 = sub_1000987A8();
  v9(v8);
  sub_100098640();
}

void sub_1000FB9C8()
{
  sub_10016B66C();
}

BOOL sub_1000FB9E4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FBA00(a1, *(_QWORD *)(v1 + 16));
}

BOOL sub_1000FBA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = type metadata accessor for Location(0);
  v5 = sub_1000FEBD8();
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

void sub_1000FBA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void (*v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  void (*v74)(char *, uint64_t, double);
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  void *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, uint64_t, uint64_t);
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, char *, uint64_t);
  char *v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t, uint64_t);
  uint64_t v173;
  _QWORD v174[6];
  uint64_t v175;
  uint64_t v176;

  sub_1000986AC();
  a19 = v23;
  a20 = v24;
  v25 = v22;
  v156 = v26;
  LODWORD(v147) = v27;
  v155 = v28;
  v167 = v29;
  v168 = v30;
  v166 = v31;
  v164 = v32;
  v34 = v33;
  v162 = type metadata accessor for DispatchWorkItemFlags(0);
  v161 = *(_QWORD *)(v162 - 8);
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_100088FDC();
  v37 = sub_10009E378(v36);
  sub_1000B43A4(v37, (uint64_t)&a16);
  v158 = v38;
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_100088FDC();
  v157 = v40;
  v41 = sub_1000BAD84();
  sub_1000B43A4(v41, (uint64_t)&a11);
  v153 = v42;
  sub_10011E39C();
  __chkstk_darwin(v43);
  v151 = v44;
  sub_1000DCA60();
  v152 = v45;
  v46 = sub_1000992C4();
  v47 = *(_QWORD **)(v46 - 8);
  v48 = v47[8];
  v49 = __chkstk_darwin(v46);
  v149 = (uint64_t)&v144 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v49);
  v169 = (char *)&v144 - v51;
  v52 = __chkstk_darwin(v50);
  v148 = (uint64_t)&v144 - v53;
  v54 = __chkstk_darwin(v52);
  v56 = (char *)&v144 - v55;
  __chkstk_darwin(v54);
  v58 = (char *)&v144 - v57;
  if (qword_100BC2480 != -1)
    swift_once(&qword_100BC2480, sub_1001597E8);
  v173 = a22;
  v59 = type metadata accessor for Logger(0);
  v60 = sub_1000AECD4(v59, (uint64_t)qword_100CAF168);
  v61 = (void (*)(char *, uint64_t, uint64_t))v47[2];
  v61(v58, v34, v46);
  v172 = v61;
  v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v56, v34, v46);
  v163 = v60;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  v146 = v64;
  v65 = os_log_type_enabled(v63, v64);
  v171 = v34;
  *(_QWORD *)&v170 = v25;
  v150 = v47;
  if (v65)
  {
    v66 = sub_100098710(42);
    v145 = sub_100098710(64);
    v174[0] = v145;
    *(_DWORD *)v66 = 141558787;
    v175 = 1752392040;
    v67 = sub_1000B2F98();
    *(_WORD *)(v66 + 12) = 2081;
    v68 = Location.id.getter(v67);
    v70 = sub_1000AE9F8(v68, v69);
    v71 = sub_10009DDA8(v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72);
    v73 = sub_1000986C4();
    v74 = (void (*)(char *, uint64_t, double))v47[1];
    v74(v58, v46, v73);
    *(_WORD *)(v66 + 22) = 2160;
    v175 = 1752392040;
    sub_1000B2F98();
    *(_WORD *)(v66 + 32) = 2081;
    sub_10000F1C8((unint64_t *)&qword_100BC5FE0, (uint64_t (*)(uint64_t))&type metadata accessor for Location);
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v46);
    v77 = sub_1000AE9F8(v75, v76);
    v78 = sub_10009DDA8(v77);
    v34 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v79);
    v80 = sub_1000986C4();
    v165 = (char *)v74;
    v74(v56, v46, v80);
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v146, "About to check whether we need to refresh available data sets for location.id: %{private,mask.hash}s. location=%{private,mask.hash}s", (uint8_t *)v66, 0x2Au);
    v81 = v145;
    swift_arrayDestroy(v145, 2);
    sub_1000986F0(v81);
    sub_1000986F0(v66);
  }
  else
  {
    v82 = (void (*)(char *, uint64_t))v47[1];
    v82(v58, v46);
    v165 = (char *)v82;
    v82(v56, v46);
  }

  if ((sub_1000FCCF4(v34, (uint64_t)v164, (uint64_t)v166, v167, v168) & 1) != 0)
  {
    LODWORD(v168) = v147 & 1;
    v167 = a21;
    v83 = sub_10011E0B4(v148);
    v84 = (void *)Logger.logObject.getter(v83);
    v85 = static os_log_type_t.default.getter();
    if (sub_1000C51D4(v85))
    {
      v86 = sub_100098710(22);
      v87 = sub_100098710(32);
      v174[0] = v87;
      *(_DWORD *)v86 = 141558275;
      v175 = 1752392040;
      v88 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176);
      *(_WORD *)(v86 + 12) = 2081;
      v89 = Location.id.getter(v88);
      v175 = sub_1000AE9F8(v89, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176);
      sub_1000986C4();
      sub_10011E164();
      sub_1000B4500((void *)&_mh_execute_header, v91, v92, "We need to refresh available data sets for location.id: %{private,mask.hash}s");
      swift_arrayDestroy(v87, 1);
      v93 = v87;
      v34 = v171;
      sub_1000986F0(v93);
      sub_1000986F0(v86);
    }
    else
    {
      sub_10011E164();
    }

    v107 = v169;
    v108 = v172;
    v172(v169, v34, v46);
    v109 = v150;
    v110 = *((unsigned __int8 *)v150 + 80);
    v111 = (v110 + 32) & ~v110;
    v165 = (char *)v111;
    v112 = v110 | 7;
    v113 = v111 + v48;
    v114 = swift_allocObject(&unk_100B95240, v111 + v48, v110 | 7);
    v115 = v170;
    *(_QWORD *)(v114 + 16) = v173;
    *(_QWORD *)(v114 + 24) = v115;
    v116 = v114 + v111;
    v164 = (void (*)(uint64_t, char *, uint64_t))v109[4];
    v117 = v107;
    v118 = v107;
    v119 = v46;
    v144 = v46;
    v164(v116, v117, v46);
    swift_retain();
    swift_retain();
    asyncMain(block:)(sub_10081879C, v114);
    sub_10009925C();
    v166 = sub_1000FDC7C(v168);
    v120 = sub_100098740((uint64_t)&unk_100B94C50, 24);
    v163 = v120;
    swift_weakInit(v120 + 16, v115);
    v148 = *(_QWORD *)(v115 + 56);
    v149 = *(_QWORD *)(v115 + 16);
    v147 = *(_QWORD *)(v115 + 48);
    v150 = *(_QWORD **)(v115 + 40);
    v170 = *(_OWORD *)(v115 + 24);
    v108(v118, v171, v119);
    v121 = v153;
    v122 = v152;
    v123 = v154;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 16))(v152, v155, v154);
    v124 = *(unsigned __int8 *)(v121 + 80);
    v125 = v113;
    v126 = (v113 + v124 + 1) & ~v124;
    v127 = (v151 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    v128 = (v127 + 23) & 0xFFFFFFFFFFFFFFF8;
    v129 = (v128 + 23) & 0xFFFFFFFFFFFFFFF8;
    v130 = swift_allocObject(&unk_100B95268, v129 + 32, v112 | v124);
    *(_QWORD *)(v130 + 16) = v120;
    *(_QWORD *)(v130 + 24) = v173;
    v164((uint64_t)&v165[v130], v169, v144);
    *(_BYTE *)(v130 + v125) = v168;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32))(v130 + v126, v122, v123);
    v131 = (_QWORD *)(v130 + v127);
    v132 = v167;
    *v131 = v156;
    v131[1] = v132;
    v133 = (_QWORD *)(v130 + v128);
    v134 = v148;
    *v133 = v147;
    v133[1] = v134;
    v135 = v130 + v129;
    *(_QWORD *)v135 = v149;
    *(_OWORD *)(v135 + 8) = v170;
    *(_QWORD *)(v135 + 24) = v150;
    v174[4] = sub_10008B2F8;
    v174[5] = v130;
    v174[0] = _NSConcreteStackBlock;
    v174[1] = 1107296256;
    v174[2] = sub_100088F7C;
    v174[3] = &unk_100B95280;
    v136 = _Block_copy(v174);
    sub_10009EF94();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000992A0();
    v137 = v163;
    v138.n128_f64[0] = sub_1000992A0();
    v139 = v157;
    static DispatchQoS.unspecified.getter(v138);
    v175 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v140 = sub_1000BA294(&qword_100BD4F10);
    sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
    v141 = v160;
    sub_10009E5A8((uint64_t)&v175, v140, v142);
    v143 = v166;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v139, v141, v136);
    _Block_release(v136);

    sub_100098820(v141, *(uint64_t (**)(uint64_t, uint64_t))(v161 + 8));
    (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v139, v159);
    swift_release(v137);
    sub_10009880C();
  }
  else
  {
    sub_100081680(0, 0);
    v94 = sub_10011E0B4(v149);
    v95 = (void *)Logger.logObject.getter(v94);
    v96 = static os_log_type_t.default.getter();
    if (sub_1000C51D4(v96))
    {
      v97 = sub_100098710(22);
      v98 = sub_100098710(32);
      v174[0] = v98;
      *(_DWORD *)v97 = 141558275;
      v175 = 1752392040;
      v99 = sub_1000B2F98();
      *(_WORD *)(v97 + 12) = 2081;
      v100 = Location.id.getter(v99);
      v102 = sub_1000AE9F8(v100, v101);
      v103 = sub_10009DDA8(v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v104);
      sub_1000986C4();
      sub_10011E164();
      sub_1000B4500((void *)&_mh_execute_header, v105, v106, "We do NOT need to refresh available data sets for location.id: %{private,mask.hash}s");
      swift_arrayDestroy(v98, 1);
      sub_1000986F0(v98);
      sub_1000986F0(v97);
    }
    else
    {
      sub_10011E164();
    }

  }
  sub_100098640();
}

uint64_t sub_1000FC444()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000FC45C()
{
  return WeatherDataModel.currentWeather.getter();
}

void sub_1000FC468(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100023164(a1, a2, 2, 4, 2, 3, v2);
}

void sub_1000FC490(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 88) = v2;
  *(_DWORD *)(v3 - 72) = a2;
}

void sub_1000FC4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  sub_10007802C(v1, a1 + v3, v2);
}

uint64_t sub_1000FC4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_1000FC4C0(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
}

uint64_t sub_1000FC4D4()
{
  return type metadata accessor for WeatherAlert.Prominence(0);
}

void *sub_1000FC4E4(void *__src, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, __src, 0x48uLL);
}

uint64_t sub_1000FC4F8()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_1000FC508()
{
  return type metadata accessor for LocationEntity(0);
}

uint64_t sub_1000FC530()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000FC53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return v4;
}

void sub_1000FC560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6[2] = v0;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = v3;
  v6[6] = v4;
  v6[7] = v5;
}

uint64_t sub_1000FC570()
{
  uint64_t v0;

  return sub_1000A8278(v0);
}

uint64_t sub_1000FC578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _FrameLayout.init(width:height:alignment:)(a1, a2, v2, 0);
}

uint64_t sub_1000FC584()
{
  return static NSNumberFormatter.percent.getter();
}

uint64_t sub_1000FC58C()
{
  return type metadata accessor for TimeState(0);
}

void sub_1000FC594()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
}

uint64_t sub_1000FC5A8()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_1000FC5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_1000FC5D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(a1, v3, a3);
}

uint64_t sub_1000FC5E0()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v0);
}

uint64_t sub_1000FC5F4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 888);
}

uint64_t sub_1000FC610()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 - 512));
}

uint64_t sub_1000FC61C()
{
  return type metadata accessor for WindComponentCompassViewModel(0);
}

uint64_t sub_1000FC658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 16) & ~v2);
}

uint64_t sub_1000FC674()
{
  return 0;
}

double sub_1000FC684()
{
  uint64_t v0;

  return sub_100176DD4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

void sub_1000FC694(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_100084050(a1, *(_QWORD *)(a2 - 256), v2);
}

double sub_1000FC6B8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 264)).n128_u64[0];
  return result;
}

uint64_t sub_1000FC6C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 192);
}

_QWORD *sub_1000FC6D8()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, v1);
}

uint64_t sub_1000FC700()
{
  return type metadata accessor for VFXTestViewState(0);
}

uint64_t sub_1000FC708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  return a9(v10 + *(int *)(v9 + 56), v11);
}

void sub_1000FC73C(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_10007C75C(a1, *(_QWORD *)(a3 - 256), a2);
}

double sub_1000FC748()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  result = *(double *)(v1 - 104);
  v3 = *(_QWORD *)(v1 - 96);
  *(double *)v0 = result;
  *(_QWORD *)(v0 + 8) = v3;
  return result;
}

uint64_t sub_1000FC75C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_10000F1C8(&qword_100BC3638, v12);
  v14 = v13;
  swift_bridgeObjectRetain(v10);
  v34 = a1;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v18 = ~v16;
    v19 = *(_QWORD *)(v7 + 72);
    v33 = v7;
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20(v9, *(_QWORD *)(v10 + 48) + v19 * v17, v6);
      sub_10000F1C8((unint64_t *)&qword_100BC3640, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v21);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        return _s7Weather24LocationCompositionStateOwst_0(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1006046C0();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v19 * v17;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 32))(v32, v27, v6);
    sub_1000FC9C4(v17);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return _s7Weather24LocationCompositionStateOwst_0(a2, v23, 1, v6);
}

uint64_t sub_1000FC98C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = sub_10003BC38(v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FC9C4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for Location.Identifier(0);
  v36 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v33 = v1;
    v11 = ~v9;
    v12 = swift_retain();
    v13 = _HashTable.previousHole(before:)(a1, v8, v11, v12);
    v35 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v14 = (v13 + 1) & v11;
      v15 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      while (1)
      {
        v16 = v15 * v10;
        v34(v6, *(_QWORD *)(v7 + 48) + v15 * v10, v3);
        v17 = *(_QWORD *)(v7 + 40);
        sub_10000F1C8(&qword_100BC3638, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v3, v18);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v3);
        v20 = v19 & v11;
        if (a1 >= (uint64_t)v14)
        {
          if (v20 < v14 || a1 < (uint64_t)v20)
            goto LABEL_24;
        }
        else if (v20 < v14 && a1 < (uint64_t)v20)
        {
          goto LABEL_24;
        }
        v23 = *(_QWORD *)(v7 + 48);
        v24 = v15 * a1;
        v25 = v23 + v15 * a1;
        v26 = v23 + v16;
        v27 = v23 + v16 + v15;
        if (v15 * a1 < v16 || v25 >= v27)
          break;
        a1 = v10;
        if (v24 != v16)
        {
          swift_arrayInitWithTakeBackToFront(v25, v26, 1, v3);
          goto LABEL_23;
        }
LABEL_24:
        v10 = (v10 + 1) & v11;
        if (((*(_QWORD *)(v35 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_25;
      }
      swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v3);
LABEL_23:
      a1 = v10;
      goto LABEL_24;
    }
LABEL_25:
    *(_QWORD *)(v35 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v7);
    v1 = v33;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v29 = *v1;
  v30 = *(_QWORD *)(*v1 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v29 + 16) = v32;
    ++*(_DWORD *)(v29 + 36);
  }
  return result;
}

uint64_t sub_1000FCC38()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

__n128 *sub_1000FCC4C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_1000FCC58()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

unint64_t sub_1000FCC60()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10029E144();
}

uint64_t sub_1000FCC6C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)v1 = result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

BOOL sub_1000FCC78@<W0>(os_log_type_t a1@<W8>)
{
  uint64_t v1;

  return os_log_type_enabled(*(os_log_t *)(v1 - 224), a1);
}

void sub_1000FCC84()
{
  sub_1000BF3B4();
}

void sub_1000FCCA8(char *a1)
{
  sub_100155934(*a1);
}

double sub_1000FCCC0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000FCCD8()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(v0 + 56) + 16);
}

Swift::Int sub_1000FCCEC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FCCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t updated;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;

  v6 = sub_1000BA294(&qword_100BC3650);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  updated = type metadata accessor for WeatherDataUpdateRequestLog.Event(0);
  __chkstk_darwin(updated);
  v11 = (uint64_t *)((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_storeEnumTagMultiPayload(v11, updated, 31);
  sub_1000C7114((uint64_t)v11);
  sub_1000215BC((uint64_t)v11, type metadata accessor for WeatherDataUpdateRequestLog.Event);
  v13 = Location.id.getter(v12);
  v15 = v14;
  sub_10009A7EC(v13, v14, a5);
  swift_bridgeObjectRelease(v15);
  v16 = type metadata accessor for LocationAvailableDataSetState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v16) == 1)
  {
    v17 = v11;
    v18 = updated;
    v19 = 19;
LABEL_6:
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    sub_1000C7114((uint64_t)v11);
    sub_1000215BC((uint64_t)v11, type metadata accessor for WeatherDataUpdateRequestLog.Event);
    return 1;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v16);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = v8[1];
      *v11 = *v8;
      v11[1] = v21;
      v17 = v11;
      v18 = updated;
      v19 = 0;
      goto LABEL_6;
    }
    swift_storeEnumTagMultiPayload(v11, updated, 17);
    sub_1000C7114((uint64_t)v11);
    v23 = type metadata accessor for WeatherDataUpdateRequestLog.Event;
    v24 = (uint64_t)v11;
  }
  else
  {
    swift_storeEnumTagMultiPayload(v11, updated, 18);
    sub_1000C7114((uint64_t)v11);
    sub_1000215BC((uint64_t)v11, type metadata accessor for WeatherDataUpdateRequestLog.Event);
    v23 = type metadata accessor for LocationAvailableDataSetState;
    v24 = (uint64_t)v8;
  }
  sub_1000215BC(v24, v23);
  return 0;
}

uint64_t sub_1000FCEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void (*a8)(void))
{
  uint64_t *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t updated;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  double v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  void (*v103)(_QWORD, char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(unint64_t, _QWORD, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(_QWORD, _QWORD, _QWORD);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(void);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD aBlock[3];
  _QWORD v142[3];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v135 = a8;
  LODWORD(v127) = a7;
  v126 = a6;
  v138 = a5;
  v139 = a2;
  v122 = *v8;
  v129 = sub_1000BAD84();
  v123 = *(_QWORD *)(v129 - 8);
  sub_10011E39C();
  __chkstk_darwin(v12);
  v125 = v13;
  sub_1000DCA60();
  v130 = v14;
  updated = type metadata accessor for WeatherDataUpdateRequestLog.Event(0);
  sub_1000B43A4(updated, (uint64_t)&v145);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v121 = v17;
  v18 = type metadata accessor for DispatchWorkItemFlags(0);
  sub_1000B43A4(v18, (uint64_t)&v144);
  v118 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v22 = sub_10009E378(v21);
  sub_1000B43A4(v22, (uint64_t)&v143);
  v115 = v23;
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v114 = v25;
  v131 = sub_1000C4F38();
  v133 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  sub_10003BD18();
  v128 = v26;
  v113 = v27;
  __chkstk_darwin(v28);
  v134 = (char *)&v100 - v29;
  v30 = sub_1000992C4();
  v31 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64);
  v32 = __chkstk_darwin(v30);
  v33 = (char *)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v100 - v34;
  v136 = v36;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  sub_10009C898((uint64_t)&v100 - v34);
  v38 = sub_100818F70();
  sub_1000860C4(v38);
  sub_10009EF94();
  v39 = a4;
  sub_1000878DC();
  v40 = v138;
  sub_1000878DC();
  v124 = a3;
  v137 = sub_1000AE388(1, (uint64_t)v35, 0, v139, a3, v39, v40);
  v41 = v37;
  v42 = Location.coordinate.getter(v137);
  v43 = sub_10009C898((uint64_t)v33);
  if (v42 == 0.0)
  {
    sub_100099254((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v136 + 8));
  }
  else
  {
    v44 = v127;
    v109 = v31;
    v112 = v41;
    v111 = v35;
    v46 = v133;
    v45 = v134;
    v110 = v39;
    v47 = v132;
    Location.coordinate.getter(v43);
    v49 = v48;
    sub_100099254((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v136 + 8));
    if (v49 != 0.0)
    {
      LODWORD(v135) = v44 & 1;
      OSSignpostID.init(log:)(*(id *)(v47 + 408));
      v108 = v30;
      v101 = sub_1000FDC7C(v44 & 1);
      v100 = sub_100098740((uint64_t)&unk_100B94C50, 24);
      swift_weakInit(v100 + 16, v47);
      v103 = *(void (**)(_QWORD, char *, uint64_t))(v46 + 16);
      v51 = v128;
      v52 = v131;
      v103(v128, v45, v131);
      v53 = v111;
      v107 = a1;
      sub_100095288((uint64_t)v142);
      v54 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v55 = *(unsigned __int8 *)(v46 + 80);
      v102 = v55;
      v56 = v136;
      v127 = *(unsigned __int8 *)(v136 + 80);
      v104 = v113 + v127;
      v57 = (v113 + v127 + v54) & ~v127;
      v113 = v127 | 7;
      v105 = v127 | 7 | v55;
      v58 = swift_allocObject(&unk_100B95178, v57 + v109, v105);
      v59 = v137;
      *(_QWORD *)(v58 + 16) = v100;
      *(_QWORD *)(v58 + 24) = v59;
      v106 = *(void (**)(unint64_t, _QWORD, uint64_t))(v46 + 32);
      v106(v58 + v54, v51, v52);
      v136 = *(_QWORD *)(v56 + 32);
      v60 = v53;
      v61 = v108;
      ((void (*)(unint64_t, char *, uint64_t))v136)(v58 + v57, v60, v108);
      v142[1] = sub_10008B950;
      v142[2] = v58;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100088F7C;
      v142[0] = &unk_100B95190;
      v62 = _Block_copy(aBlock);
      swift_retain();
      v63.n128_f64[0] = sub_1000992A0();
      v64 = v114;
      static DispatchQoS.unspecified.getter(v63);
      v140 = _swiftEmptyArrayStorage;
      sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      v65 = sub_1000BA294(&qword_100BD4F10);
      sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
      v66 = v117;
      sub_10009E5A8((uint64_t)&v140, v65, v67);
      v68 = v101;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v64, v66, v62);
      _Block_release(v62);

      sub_100098820(v66, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v64, v116);
      sub_1000C5AE8();
      sub_10009925C();
      v69 = (uint64_t)v121;
      swift_storeEnumTagMultiPayload(v121, v120, 24);
      sub_1000C7114(v69);
      sub_1000215BC(v69, type metadata accessor for WeatherDataUpdateRequestLog.Event);
      v70 = v132;
      v71 = sub_1000FDC7C((char)v135);
      v72 = v111;
      v73 = v107;
      v74 = v112;
      v112(v111, v107, v61);
      v75 = v109;
      v76 = swift_allocObject(&unk_100B951C8, ((v127 + 16) & ~v127) + v109, v113);
      v77 = v61;
      sub_100818F48();
      v78 = sub_1000BA294(&qword_100C0B2F8);
      v79 = v70;
      v122 = firstly<A, B>(on:disposeOn:closure:)(v71, v70, sub_100067674, v76, v78, v122);

      sub_100089020();
      sub_100095288((uint64_t)&v135);
      v74(v72, v73, v77);
      v80 = v123;
      v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 16);
      v121(v130, v126, v129);
      v120 = v75 + 7;
      v81 = (v75 + 7 + ((v104 + ((v102 + 24) & ~v102)) & ~v127)) & 0xFFFFFFFFFFFFFFF8;
      v82 = (v81 + 15) & 0xFFFFFFFFFFFFFFF8;
      v118 = *(unsigned __int8 *)(v80 + 80);
      v119 = v118 + 32;
      v83 = (v118 + 32 + v82) & ~v118;
      v117 = v83 + v125;
      v84 = swift_allocObject(&unk_100B951F0, v83 + v125 + 1, v105 | v118);
      *(_QWORD *)(v84 + 16) = v70;
      sub_100095288((uint64_t)&v138);
      sub_100818F48();
      v85 = v137;
      *(_QWORD *)(v84 + v81) = v137;
      v86 = (_QWORD *)(v84 + v82);
      v87 = v138;
      v88 = v124;
      *v86 = v139;
      v86[1] = v88;
      v86[2] = v110;
      v86[3] = v87;
      v128 = *(void (**)(_QWORD, _QWORD, _QWORD))(v80 + 32);
      v128(v84 + v83, v130, v129);
      *(_BYTE *)(v84 + v117) = (_BYTE)v135;
      sub_100095508();
      sub_10009EF94();
      sub_1000989F8();
      v89 = v85;
      swift_retain();
      v90 = sub_100079FA4();
      v91 = (void *)zalgo.getter(v90);
      v123 = Promise.then<A>(on:closure:)(v91, sub_10006BEA8, v84, (char *)&type metadata for () + 8);
      sub_10009880C();
      sub_100089020();

      sub_100095288((uint64_t)v142);
      sub_100095288((uint64_t)&v146);
      v92 = (v120 + ((v127 + 32) & ~v127)) & 0xFFFFFFFFFFFFFFF8;
      v93 = (v119 + v92) & ~v118;
      v94 = v93 + v125;
      v95 = swift_allocObject(&unk_100B95218, v93 + v125 + 1, v113 | v118);
      *(_QWORD *)(v95 + 16) = v89;
      *(_QWORD *)(v95 + 24) = v79;
      sub_100818F48();
      v96 = (_QWORD *)(v95 + v92);
      v97 = v138;
      *v96 = v139;
      v96[1] = v88;
      v96[2] = v110;
      v96[3] = v97;
      v128(v95 + v93, v130, v129);
      *(_BYTE *)(v95 + v94) = (_BYTE)v135;
      sub_100095508();
      sub_1000878DC();
      sub_1000989F8();
      swift_retain();
      v98 = sub_100079FA4();
      v99 = (void *)zalgo.getter(v98);
      Promise.error(on:closure:)(v99, sub_1008186EC, v95);
      sub_10009925C();
      sub_10009880C();
      sub_1000C1354();
      sub_100089020();

      return (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v134, v131);
    }
  }
  sub_1004F148C(0xD000000000000038, 0x8000000100A15DF0);
  if (v135)
    v135();
  return sub_10009925C();
}

uint64_t sub_1000FD8C0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 376), 1, 1, a1);
}

void sub_1000FD8EC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 82) = 1;
}

uint64_t sub_1000FD8F8()
{
  uint64_t v0;

  return Gradient.init(stops:)(v0);
}

uint64_t sub_1000FD900()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

void sub_1000FD930()
{
  uint64_t v0;
  uint64_t v1;

}

void *sub_1000FD93C@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(a1 + 64));
}

uint64_t sub_1000FD94C()
{
  return static os_log_type_t.default.getter();
}

void sub_1000FD954(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_1000FD95C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000FD970()
{
  return 0x6E776F6E6B6E75;
}

void sub_1000FD984(char *a1)
{
  sub_1001B8CB8(*a1);
}

uint64_t sub_1000FD9B0@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000FD9C4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 416))(a1, *(_QWORD *)(v1 - 136));
}

void sub_1000FD9D4()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000FD9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, v2);
}

void sub_1000FD9EC(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_100080C0C(a1, *(_QWORD *)(a3 - 256), a2);
}

unint64_t sub_1000FD9F8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 0;
  return sub_1001F6050();
}

uint64_t sub_1000FDA00()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[147] + 8))(v0[141], v0[148]);
}

void sub_1000FDA14()
{
  sub_1005FEF60();
}

uint64_t sub_1000FDA20()
{
  return type metadata accessor for LocationRowSubheadingView(0);
}

uint64_t sub_1000FDA28()
{
  return type metadata accessor for WeatherStatisticsModel(0);
}

uint64_t sub_1000FDA30()
{
  return type metadata accessor for WeatherData.WeatherStatisticsState(0);
}

void *sub_1000FDA40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __src)
{
  void *v10;

  return memcpy(v10, &__src, 0x48uLL);
}

void sub_1000FDA50(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000979AC(v2, a2);
}

uint64_t sub_1000FDA58(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for Optional(v1, a1);
}

uint64_t sub_1000FDA64()
{
  return static Logger.automation.getter();
}

uint64_t sub_1000FDA70(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

uint64_t sub_1000FDA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v9;

  return sub_1000CEE98(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9);
}

uint64_t sub_1000FDA88()
{
  return 0;
}

_QWORD *sub_1000FDA9C()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, *(_QWORD *)(v1 + 80));
}

void sub_1000FDAA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037794(a1, v2, v1);
}

uint64_t sub_1000FDAB4()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1000FDAC4()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

BOOL sub_1000FDAD4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000FDAE4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 400));
}

void sub_1000FDAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1001EB9B0(*(_QWORD *)(v29 - 88), v25, v28, v27, v26, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
}

uint64_t sub_1000FDB0C()
{
  uint64_t v0;

  return Array<A>.maxValue.getter(*(_QWORD *)(v0 + 1328));
}

uint64_t sub_1000FDB14()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 144) + 8))(*(_QWORD *)(v0 - 224), *(_QWORD *)(v0 - 136));
}

uint64_t sub_1000FDB24()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000FDB38()
{
  return type metadata accessor for WeatherDataOverrides(0);
}

uint64_t sub_1000FDB48()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  *v0 = *v1;
  result = v1[1];
  v0[1] = result;
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  v0[6] = v1[6];
  v0[7] = v1[7];
  return result;
}

void sub_1000FDB8C()
{
  sub_100112494();
}

uint64_t sub_1000FDB94()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000FDB9C()
{
  return dispatch thunk of Column.value.getter();
}

uint64_t sub_1000FDBA8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = v0;
  return sub_100098710(18);
}

unint64_t sub_1000FDBB4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 9;
  return sub_1004FBB28();
}

uint64_t sub_1000FDBC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000FDBE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_1000FDC00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

double sub_1000FDC10()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72)).n128_u64[0];
  return result;
}

uint64_t sub_1000FDC18()
{
  return type metadata accessor for PinnedScrollableViews(0);
}

uint64_t sub_1000FDC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getWitnessTable(v2, a2);
}

unint64_t sub_1000FDC30()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_1007712B8();
}

void sub_1000FDC3C()
{
  void *v0;

}

_QWORD *sub_1000FDC44(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000FDC54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v1, v2, a1);
}

double sub_1000FDC6C(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1)
    *(_QWORD *)&result = swift_retain(a2).n128_u64[0];
  return result;
}

id sub_1000FDC7C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 448;
  if ((a1 & 1) == 0)
    v2 = 440;
  return *(id *)(v1 + v2);
}

void sub_1000FDC94(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  double v33;
  _QWORD *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63[3];

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v61 = *(char **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v56 - v10;
  v12 = *(void (**)(char *, uint64_t))(v2 + 16);
  UnfairLock.lock()();
  v13 = v2 + 48;
  sub_10009922C(v2 + 48, (uint64_t)v63, 32);
  v14 = *(_QWORD *)(v2 + 48);
  sub_100099360();
  sub_1000FE21C(a1, a2, v14);
  v16 = v15;
  sub_100075DF4();
  v60 = v6;
  if (v16)
  {
    v58 = v16;
    v59 = v12;
    sub_1000B4E30();
    if (qword_100BC24E8 != -1)
      swift_once(&qword_100BC24E8, sub_10015982C);
    v17 = sub_100098720();
    sub_1000AECD4(v17, (uint64_t)qword_100CAF2A0);
    v18 = sub_1000CD2B4();
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.error.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = sub_100098710(22);
      v23 = sub_100098710(32);
      v56 = v23;
      *(_DWORD *)v22 = 141558275;
      sub_1000D1B3C(v23);
      v57 = v13;
      v25 = v24 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v24 + 8);
      *(_WORD *)(v22 + 12) = 2081;
      sub_100099360();
      v62 = sub_1000CE1C8(a1, a2, v63);
      v26 = v25;
      v13 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v26);
      sub_1000C5924(a2);
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "Potentially leaked timer, is there a missing call to stopMonitoringLocationLoad? ID=%{private,mask.hash}s", (uint8_t *)v22, 0x16u);
      v27 = v56;
      swift_arrayDestroy(v56, 1);
      v28 = v27;
      v6 = v60;
      sub_1000986F0(v28);
      sub_1000986F0(v22);

    }
    else
    {

      sub_1000E74FC();
    }
    sub_10009922C(v13, (uint64_t)v63, 33);
    sub_100099360();
    v30 = (void *)sub_100086A08();
    sub_1000B4E30();
    sub_100075DF4();

    v31 = v58;
    objc_msgSend(v58, "invalidate");

  }
  else
  {
    v29 = sub_1000B4E30();
  }
  v32 = Date.init()(v29);
  v33 = *(double *)(v3 + 40);
  Date.addingTimeInterval(_:)(v32, v33);
  v59 = (void (*)(char *, uint64_t))*((_QWORD *)v61 + 1);
  v59(v9, v6);
  v34 = (_QWORD *)swift_allocObject(&unk_100B94008, 40, 7);
  v34[2] = a1;
  v34[3] = a2;
  v34[4] = v3;
  v35 = objc_allocWithZone((Class)NSTimer);
  sub_100099360();
  swift_retain();
  v61 = v11;
  v36 = sub_1000FE258((uint64_t)v11, 0, (uint64_t)sub_1007FE1DC, (uint64_t)v34, 0.0);
  sub_10009922C(v13, (uint64_t)v63, 33);
  sub_100099360();
  v37 = v36;
  sub_1000FE4F0((uint64_t)v37, a1, a2, v38, v39, v40, v41, v42, v56, v57);
  sub_1000B4E30();
  sub_100075DF4();
  UnfairLock.unlock()();
  if (qword_100BC24E8 != -1)
    swift_once(&qword_100BC24E8, sub_10015982C);
  v43 = sub_100098720();
  sub_1000AECD4(v43, (uint64_t)qword_100CAF2A0);
  sub_1000CD2B4();
  v44 = swift_retain_n(v3, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = sub_100098710(42);
    v48 = (void *)sub_100098710(64);
    v58 = v48;
    *(_DWORD *)v47 = 141558787;
    sub_1000D1B3C((uint64_t)v48);
    v50 = v49 + 8;
    sub_1000D9994();
    *(_WORD *)(v47 + 12) = 2081;
    sub_100099360();
    v62 = sub_1000DDFB8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v50);
    sub_1000C5924(a2);
    *(_WORD *)(v47 + 22) = 2048;
    v62 = *(_QWORD *)&v33;
    sub_1000D9994();
    v51 = sub_1000DBCA8();
    *(_WORD *)(v47 + 32) = 2080;
    v52 = v61;
    Date.init()(v51);
    sub_100051B90((unint64_t *)&qword_100BC52F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v53 = v60;
    dispatch thunk of CustomStringConvertible.description.getter(v60);
    v59(v52, v53);
    v62 = sub_1000DDFB8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v50);
    sub_100075DF4();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Starting to monitor location load. ID=%{private,mask.hash}s, Timeout=%f (s), Now=%s", (uint8_t *)v47, 0x2Au);
    v54 = (uint64_t)v58;
    sub_1000C62B0();
    sub_1000986F0(v54);
    sub_1000986F0(v47);

  }
  else
  {

    sub_1000DBCA8();
    sub_1000E74FC();
  }
  v55 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v55, "addTimer:forMode:", v37, NSDefaultRunLoopMode);

}

void sub_1000FE21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  id v6;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = sub_1000DDF8C(a1);
    if ((v5 & 1) != 0)
      v6 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  }
  sub_10004A298();
}

id sub_1000FE258(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v5;
  void *v6;
  Class isa;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD v17[5];
  uint64_t v18;

  v6 = v5;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v17[4] = a3;
  v18 = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10021BA7C;
  v17[3] = &unk_100B69B30;
  v13 = _Block_copy(v17);
  v14 = objc_msgSend(v6, "initWithFireDate:interval:repeats:block:", isa, a2 & 1, v13, a5);
  _Block_release(v13);

  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  swift_release(v18);
  return v14;
}

double sub_1000FE344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  void (*v11)(uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;

  sub_10009BBD4();
  v12 = v11;
  sub_1000BD214();
  v13 = sub_1000D0504();
  v12(v13);
  v14 = *v10;
  *v10 = a10;
  return sub_1000BA31C(v14);
}

void sub_1000FE394(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1000991C8(a2);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000BA294(&qword_100BC35C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1000991C8(a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];

    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_1000FE4A8(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

unint64_t sub_1000FE4A8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

double sub_1000FE4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000FE344(a1, a2, a3, (uint64_t)sub_1000FE394, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000FE4FC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t updated;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BOOL8 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  double v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a5;
  v9 = type metadata accessor for CurrentWeather(0);
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  __chkstk_darwin(v9);
  v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v49 = v11;
  v50 = v12;
  v13 = __chkstk_darwin(v11);
  v46 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - v15;
  v17 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BC3460);
  __chkstk_darwin(v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for WeatherDataUpdateRequestLog.Event(0);
  __chkstk_darwin(updated);
  v28 = (double *)((char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v28 = a1;
  swift_storeEnumTagMultiPayload(v28, updated, 8);
  v53 = a7;
  sub_1000C7114((uint64_t)v28);
  sub_1000215BC((uint64_t)v28, type metadata accessor for WeatherDataUpdateRequestLog.Event);
  v30 = Location.id.getter(v29);
  v32 = v31;
  sub_1000EED10(v30, v31, v54);
  swift_bridgeObjectRelease(v32);
  v33 = type metadata accessor for LocationWeatherDataState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v33) == 1)
  {
    sub_100021A14((uint64_t)v19, &qword_100BC3380);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 1, 1, v23);
  }
  else
  {
    v35 = v51;
    v34 = v52;
    sub_1000EADE8();
    sub_1000215BC((uint64_t)v19, type metadata accessor for LocationWeatherDataState);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23) != 1)
    {
      sub_10007802C((uint64_t)v22, (uint64_t)v25, type metadata accessor for WeatherData);
      v38 = WeatherDataModel.isExpired.getter();
      if ((v38 & 1) != 0)
      {
        if ((*(_BYTE *)(v34 + 320) & 1) == 0)
        {
          v39 = Date.init()(v38);
          v40 = WeatherDataModel.currentWeather.getter(v39);
          v41 = v46;
          CurrentWeather.date.getter(v40);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v48);
          v42 = Date.timeIntervalSince(_:)(v41);
          v43 = v49;
          v44 = *(void (**)(char *, uint64_t))(v50 + 8);
          v44(v41, v49);
          v44(v16, v43);
          v36 = v42 >= a1;
          *(_BYTE *)v28 = v36;
          v28[1] = v42;
          swift_storeEnumTagMultiPayload(v28, updated, 9);
          sub_1000C7114((uint64_t)v28);
          sub_1000215BC((uint64_t)v28, type metadata accessor for WeatherDataUpdateRequestLog.Event);
          sub_1000215BC((uint64_t)v25, type metadata accessor for WeatherData);
          return v36;
        }
      }
      else
      {
        swift_storeEnumTagMultiPayload(v28, updated, 27);
        sub_1000C7114((uint64_t)v28);
        sub_1000215BC((uint64_t)v28, type metadata accessor for WeatherDataUpdateRequestLog.Event);
      }
      sub_1000215BC((uint64_t)v25, type metadata accessor for WeatherData);
      return 0;
    }
  }
  sub_100021A14((uint64_t)v22, &qword_100BC3460);
  swift_storeEnumTagMultiPayload(v28, updated, 19);
  sub_1000C7114((uint64_t)v28);
  sub_1000215BC((uint64_t)v28, type metadata accessor for WeatherDataUpdateRequestLog.Event);
  return 1;
}

void sub_1000FE908(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE __src[98];

  v2 = v1;
  v3 = a1;
  v4 = sub_1000BA294(&qword_100BDE188);
  __chkstk_darwin(v4);
  v6 = &__src[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_1000BA294(&qword_100BDE1B0);
  __chkstk_darwin(v7);
  v9 = &__src[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_1000BA294(&qword_100BDE1B8);
  __chkstk_darwin(v10);
  v12 = &__src[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v3 == 6)
  {
    sub_100037768(v2, (uint64_t)v6, &qword_100BDE188);
    sub_100037768((uint64_t)v6, (uint64_t)v9, &qword_100BDE188);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v13 = sub_1003C0C40(&qword_100BDE1C0, &qword_100BDE1B8);
    v14 = sub_1000FEB3C();
    _ConditionalContent<>.init(storage:)(v9, v10, v4, v13, v14);
    v15 = (uint64_t)v6;
    v16 = &qword_100BDE188;
  }
  else
  {
    sub_10043E3D0();
    sub_100037768(v2, (uint64_t)v12, &qword_100BDE188);
    memcpy(&v12[*(int *)(v10 + 36)], __src, 0x62uLL);
    sub_100037768((uint64_t)v12, (uint64_t)v9, &qword_100BDE1B8);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v17 = sub_1003C0C40(&qword_100BDE1C0, &qword_100BDE1B8);
    v18 = sub_1000FEB3C();
    _ConditionalContent<>.init(storage:)(v9, v10, v4, v17, v18);
    v15 = (uint64_t)v12;
    v16 = &qword_100BDE1B8;
  }
  sub_100021A14(v15, v16);
}

unint64_t sub_1000FEB3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDE1C8;
  if (!qword_100BDE1C8)
  {
    v1 = sub_100075EB0(&qword_100BDE188);
    sub_10000F1C8(&qword_100BDE1D0, type metadata accessor for DailyComponentRowView);
    sub_1001CDAD0(&qword_100BD3EB8, &qword_100C0A630);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDE1C8);
  }
  return result;
}

unint64_t sub_1000FEBD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC35B8;
  if (!qword_100BC35B8)
  {
    v1 = type metadata accessor for Location(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Location, v1);
    atomic_store(result, (unint64_t *)&qword_100BC35B8);
  }
  return result;
}

uint64_t destroy for LocationViewerViewVFXEnvironment(uint64_t *a1)
{
  return sub_1000BF398(*a1, a1[1]);
}

uint64_t sub_1000FEC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000FEC34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FEC3C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000FEC44(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(*a1);
}

void sub_1000FEC50(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C77C(a1, v2, v1);
}

uint64_t sub_1000FEC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.write(to:)(a1, a2, a3);
}

uint64_t sub_1000FEC64()
{
  uint64_t v0;

  return v0 - 88;
}

double sub_1000FEC70()
{
  return 0.0;
}

void sub_1000FEC84(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DDC(v3, a2, a3);
}

uint64_t sub_1000FEC8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

void sub_1000FEC9C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_1000FECD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_1000BA294(&qword_100BCCB90);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_1000FEE80(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

#error "1000FEFA0: call analysis failed (funcsize=191)"

#error "1000FF3B4: call analysis failed (funcsize=156)"

void sub_1000FF448(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_1000BA294(a2);
  sub_1000C51C8(*(_QWORD *)(v2 - 8));
  sub_10004A298();
}

uint64_t sub_1000FF478(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = type metadata accessor for SearchViewState.ViewState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease(*v4);
  }
  else if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for CodableError(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
  v8 = a1 + *(int *)(a2 + 28);
  v9 = type metadata accessor for Location(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return result;
}

uint64_t sub_1000FF540(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    __asm { BR              X11 }
  return 0;
}

void sub_1000FF648()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;

  sub_10009E50C();
  v3 = *v2;
  v5 = *v4;
  if (v3 == 5)
  {
    if (v5 != 5)
      goto LABEL_35;
  }
  else if (v3 == 4)
  {
    if (v5 != 4)
      goto LABEL_35;
  }
  else if (v3 != v5 || (v5 & 0xFE) == 4)
  {
    goto LABEL_35;
  }
  v7 = *(unsigned __int8 *)(v1 + 1);
  v8 = *(unsigned __int8 *)(v0 + 1);
  if (v7 >> 6)
  {
    if (v7 >> 6 == 1)
    {
      v9 = v8 & 0xC0;
      v10 = (v8 ^ v7) & 1;
      if (v9 != 64 || v10 != 0)
        goto LABEL_35;
    }
    else if (v8 != 128)
    {
      goto LABEL_35;
    }
LABEL_24:
    v14 = sub_10009E654();
    if ((static WeatherMapOverlayKind.== infix(_:_:)(v1 + *(int *)(v14 + 24), v0 + *(int *)(v14 + 24)) & 1) == 0)
      goto LABEL_35;
    v15 = *(int *)(v14 + 28);
    v16 = (_QWORD *)(v1 + v15);
    v17 = *(_QWORD *)(v1 + v15 + 8);
    v18 = (_QWORD *)(v0 + v15);
    v19 = v18[1];
    if (v17)
    {
      if (!v19)
        goto LABEL_35;
      v20 = *v16 == *v18 && v17 == v19;
      if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, *v18, v19, 0) & 1) == 0)
        goto LABEL_35;
    }
    else if (v19)
    {
      goto LABEL_35;
    }
    sub_1000FF798();
    goto LABEL_35;
  }
  v12 = (v8 ^ v7) & 1;
  if (v8 <= 0x3F && v12 == 0)
    goto LABEL_24;
LABEL_35:
  sub_100079F70();
}

void sub_1000FF798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  sub_1000B4608();
  sub_100098B6C();
  __chkstk_darwin(v0);
  sub_10009883C();
  __chkstk_darwin(v1);
  sub_1000DC694();
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100098694();
  sub_1000BA294(&qword_100BD2538);
  sub_10009D98C();
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FFAB4();
  sub_1000FFAB4();
  v6 = sub_1000BA294(&qword_100BC5FD0);
  v7 = (char *)sub_1000FF8BC
     + 4 * byte_10098E3F8[_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 3, v6)];
  __asm { BR              X10 }
}

uint64_t sub_1000FF8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char v11;
  int v13;
  unsigned __int8 *v14;
  void (*v15)(uint64_t, unsigned __int8 *, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  sub_1000B3B78();
  v9 = *(int *)(v5 + 48);
  v10 = &v4[v9];
  if (sub_1000BD388())
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(&v4[v9], v1);
    sub_100021A14(v0, &qword_100BD2538);
  }
  else
  {
    *(_DWORD *)(v8 - 84) = *v4;
    v13 = *v6;
    v14 = &v6[v9];
    v15 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 32);
    v15(v2, v10, v1);
    v15(v3, v14, v1);
    if (*(_DWORD *)(v8 - 84) == v13)
    {
      v11 = static WeatherMapOverlayKind.== infix(_:_:)(v2, v3);
      v18 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v18(v3, v1);
      v19 = ((uint64_t (*)(uint64_t, uint64_t))v18)(v2, v1);
      sub_100098AD4(v19, type metadata accessor for WeatherMapTrackingState);
      return v11 & 1;
    }
    v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v16(v3, v1);
    v17 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v2, v1);
    sub_100098AD4(v17, type metadata accessor for WeatherMapTrackingState);
  }
  v11 = 0;
  return v11 & 1;
}

void sub_1000FFA0C()
{
  char v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009BCA4();
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_10009BE6C();
  __chkstk_darwin(v3);
  sub_1000999B0();
  if (v1)
  {
    sub_10029FC0C();
    if ((v0 & 0xC0) == 0x40)
      sub_100403B64();
    sub_10009BC18(v5, type metadata accessor for DisplayMetrics);
  }
  sub_100098AD4(v4, type metadata accessor for DisplayMetrics);
  sub_10004A2A0();
}

void sub_1000FFAB4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_10009E50C();
  v1 = v0(0);
  sub_10009D2C8(v1);
  sub_10004A298();
}

void sub_1000FFADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  sub_1000986AC();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  sub_1000FC700();
  sub_1000B42B0();
  __chkstk_darwin(v27);
  v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&a9 - v34;
  sub_1000BA294(&qword_100C04158);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100079F58();
  v38 = (uint64_t *)(v20 + *(int *)(v37 + 48));
  sub_10009F7F4(v26, v20);
  sub_10009F7F4(v24, (uint64_t)v38);
  if (sub_10009F7EC(v20) == 1)
  {
    sub_100095B78(v20, (uint64_t)v33, type metadata accessor for ViewState.SecondaryViewState);
    if (sub_10009F7EC((uint64_t)v38) == 1)
    {
      sub_10007C77C((uint64_t)v38, (uint64_t)v29, type metadata accessor for VFXTestViewState);
      sub_10008805C((uint64_t)v33, (uint64_t)v29);
      sub_1000215BC((uint64_t)v29, type metadata accessor for VFXTestViewState);
      sub_1000215BC((uint64_t)v33, type metadata accessor for VFXTestViewState);
LABEL_9:
      sub_1000215BC(v20, type metadata accessor for ViewState.SecondaryViewState);
      goto LABEL_10;
    }
    sub_1000215BC((uint64_t)v33, type metadata accessor for VFXTestViewState);
  }
  else
  {
    sub_100095B78(v20, (uint64_t)v35, type metadata accessor for ViewState.SecondaryViewState);
    if (sub_10009F7EC((uint64_t)v38) != 1)
    {
      v39 = *v38;
      type metadata accessor for LocationViewerViewState._Storage(0);
      sub_100109190();
      sub_100089020();
      swift_release(v39);
      goto LABEL_9;
    }
    sub_100089020();
  }
  sub_100021A14(v20, &qword_100C04158);
LABEL_10:
  sub_100098640();
}

double sub_1000FFCC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  double result;
  _QWORD v18[8];

  v2 = v1;
  v4 = type metadata accessor for LocationViewComponent(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v18 - v9;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  sub_1001027C4(v11, v2);
  v13 = v12;
  if (*(_QWORD *)(v12 + 16))
  {
    v18[3] = v2;
    v14 = *(_QWORD *)(v2 + 24);
    v18[4] = _swiftEmptyArrayStorage;
    v18[1] = v14;
    swift_bridgeObjectRetain(v14);
    sub_100102798();
    v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v18[2] = v13;
    sub_1001009A4(v13 + v15, (uint64_t)v10);
    sub_1001009A4((uint64_t)v10, (uint64_t)v7);
    v16 = (char *)&loc_1000FFDF8 + 4 * byte_1009A23E4[swift_getEnumCaseMultiPayload(v7)];
    __asm { BR              X9 }
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10010000C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationViewComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100100048(char *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t HourPrecipitationComponent;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  void (*v66)(_QWORD *, uint64_t);
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v3 = type metadata accessor for AirQuality(0);
      goto LABEL_44;
    case 1u:
      v4 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
      v5 = *(int *)(type metadata accessor for DailyForecastComponent(0) + 20);
      goto LABEL_31;
    case 2u:
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 5));
      v6 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v7 = (uint64_t)&v2[*(int *)(v6 + 28)];
      v8 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
        v9 = v7 + *(int *)(v8 + 20);
        v10 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
        v11 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v11 + 32) + 8));
      }
      v12 = *(int *)(v6 + 32);
      goto LABEL_35;
    case 3u:
      v13 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v2, v13);
      v14 = (int *)type metadata accessor for HourlyForecastComponent(0);
      v15 = &v2[v14[5]];
      swift_bridgeObjectRelease(*(_QWORD *)v15);
      v16 = (uint64_t)&v15[*(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20)];
      v17 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
      v18 = &v2[v14[6]];
      v19 = sub_1000BA294(&qword_100BCB9F8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
      v20 = &v2[v14[7]];
      v21 = sub_1000BA294(&qword_100BCB130);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
      v2 += v14[8];
      v22 = type metadata accessor for WeatherChanges(0);
      goto LABEL_40;
    case 4u:
      v3 = type metadata accessor for CurrentWeather(0);
      goto LABEL_44;
    case 5u:
      v23 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v2, v23);
      v24 = &v2[*(int *)(type metadata accessor for MapComponent(0) + 20)];
      swift_bridgeObjectRelease(*((_QWORD *)v24 + 1));
      v25 = (int *)type metadata accessor for WeatherData(0);
      v26 = (uint64_t)&v24[v25[5]];
      v27 = type metadata accessor for Locale(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v26, 1, v27))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
      v28 = &v24[v25[6]];
      v29 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
      v30 = (uint64_t)&v24[v25[7]];
      v31 = sub_1000BA294(&qword_100BC3348);
      if (!_s7Weather24LocationCompositionStateOwet_0(v30, 1, v31))
      {
        v32 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v30, v32);
      }
      v33 = &v24[v25[8]];
      v34 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33, v34);
      if (EnumCaseMultiPayload == 1)
      {
        v80 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v33, v80);
      }
      else if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v33 + 1));
      }
      v81 = (uint64_t)&v24[v25[9]];
      goto LABEL_54;
    case 6u:
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 1));
      v36 = (int *)type metadata accessor for WeatherData(0);
      v37 = (uint64_t)&v2[v36[5]];
      v38 = type metadata accessor for Locale(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
      v39 = &v2[v36[6]];
      v40 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
      v41 = (uint64_t)&v2[v36[7]];
      v42 = sub_1000BA294(&qword_100BC3348);
      if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v42))
      {
        v43 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v41, v43);
      }
      v44 = &v2[v36[8]];
      v45 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v46 = swift_getEnumCaseMultiPayload(v44, v45);
      if (v46 == 1)
      {
        v82 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v44, v82);
      }
      else if (!v46)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v44 + 1));
      }
      v81 = (uint64_t)&v2[v36[9]];
LABEL_54:
      v83 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0(v81, 1, v83))
        return;
      v84 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v81, 1, v84))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v81, v84);
      v85 = v81 + *(int *)(v83 + 20);
      if (_s7Weather24LocationCompositionStateOwet_0(v85, 1, v84))
        return;
      v66 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v84 - 8) + 8);
      v67 = (_QWORD *)v85;
      v68 = v84;
      goto LABEL_45;
    case 7u:
      v47 = type metadata accessor for ArticleModel(0);
      if (swift_getEnumCaseMultiPayload(v2, v47) == 1)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v2 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v2 + 3));
        v48 = (int *)type metadata accessor for NewsArticle(0);
        v49 = (uint64_t)&v2[v48[6]];
        v50 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v49, 1, v50))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
        v51 = &v2[v48[7]];
        v52 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
        v53 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
        v53(&v2[v48[8]], v50);
        v54 = &v2[v48[9]];
        swift_bridgeObjectRelease(*((_QWORD *)v54 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v54 + 3));
        v55 = (uint64_t)&v54[*(int *)(type metadata accessor for NewsChannel(0) + 24)];
        if (!_s7Weather24LocationCompositionStateOwet_0(v55, 1, v50))
          v53((char *)v55, v50);
        swift_bridgeObjectRelease(*(_QWORD *)&v2[v48[10]]);
        swift_bridgeObjectRelease(*(_QWORD *)&v2[v48[11]]);
        v5 = v48[12];
LABEL_31:
        v56 = *(_QWORD *)&v2[v5];
LABEL_48:
        swift_bridgeObjectRelease(v56);
      }
      else
      {
        v3 = type metadata accessor for Article(0);
LABEL_44:
        v68 = v3;
        v66 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
        v67 = v2;
LABEL_45:
        v66(v67, v68);
      }
      return;
    case 8u:
      v57 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v2, v57);
      HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
      v59 = &v2[*(int *)(HourPrecipitationComponent + 20)];
      v60 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v59, v60);
      v2 += *(int *)(HourPrecipitationComponent + 24);
      v61 = &qword_100BCE378;
      goto LABEL_43;
    case 9u:
      v3 = type metadata accessor for Location(0);
      goto LABEL_44;
    case 0xAu:
      v62 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v2, v62);
      v2 += *(int *)(type metadata accessor for PressureComponent(0) + 20);
      v63 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v2, v63);
      v64 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v2[v64[5] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v2[v64[6] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v2[v64[7] + 8]);
      v12 = v64[9];
LABEL_35:
      v56 = *(_QWORD *)&v2[v12 + 8];
      goto LABEL_48;
    case 0xBu:
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v2 + 11));
      v56 = *((_QWORD *)v2 + 13);
      goto LABEL_48;
    case 0xDu:
      swift_bridgeObjectRelease(*(_QWORD *)v2);
      v2 += *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
      v3 = type metadata accessor for Date(0);
      goto LABEL_44;
    case 0xEu:
      v3 = type metadata accessor for SunriseSunsetModel(0);
      goto LABEL_44;
    case 0xFu:
      v22 = type metadata accessor for HistoricalComparisons(0);
LABEL_40:
      v65 = v22;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v22))
        return;
      v66 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v65 - 8) + 8);
      v67 = v2;
      v68 = v65;
      goto LABEL_45;
    case 0x10u:
      v69 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v2, v69);
      v70 = (int *)type metadata accessor for UVIndexComponent(0);
      v71 = &v2[v70[5]];
      v72 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
      v73 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v71[*(int *)(v73 + 20) + 8]);
      v74 = &v2[v70[6]];
      v75 = sub_1000BA294(&qword_100BCB130);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v74, v75);
      v2 += v70[7];
      v61 = &qword_100BCB9F8;
LABEL_43:
      v3 = sub_1000BA294(v61);
      goto LABEL_44;
    case 0x11u:
      v76 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v2, v76);
      v77 = &v2[*(int *)(type metadata accessor for VisibilityComponent(0) + 20)];
      swift_bridgeObjectRelease(*((_QWORD *)v77 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v77 + 3));
      v56 = *((_QWORD *)v77 + 5);
      goto LABEL_48;
    case 0x12u:
      v78 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v2, v78);
      v79 = &v2[*(int *)(type metadata accessor for WindComponent(0) + 20)];
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 23));
      swift_bridgeObjectRelease(*((_QWORD *)v79 + 25));
      v56 = *((_QWORD *)v79 + 28);
      goto LABEL_48;
    default:
      return;
  }
}

uint64_t sub_1001009A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationViewComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LocationViewComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF3B38;
  if (!qword_100BF3B38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewComponent);
  return result;
}

_QWORD *sub_100100A20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t HourPrecipitationComponent;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t, __n128);
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void (*v163)(char *, char *, uint64_t, __n128);
  __n128 v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  int EnumCaseMultiPayload;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  void (*v246)(char *, char *, uint64_t);
  uint64_t v247;
  _QWORD *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;

  v3 = a3;
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for AirQuality(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = v3;
      v9 = 0;
      goto LABEL_84;
    case 1u:
      v10 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(type metadata accessor for DailyForecastComponent(0) + 20);
      v12 = *(_QWORD *)((char *)a2 + v11);
      *(_QWORD *)((char *)a1 + v11) = v12;
      swift_bridgeObjectRetain(v12);
      v7 = a1;
      v8 = v3;
      v9 = 1;
      goto LABEL_84;
    case 2u:
      v276 = v3;
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      v15 = a2[5];
      a1[4] = a2[4];
      a1[5] = v15;
      v16 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v17 = *(int *)(v16 + 28);
      v18 = (_QWORD *)((char *)a1 + v17);
      v19 = (_QWORD *)((char *)a2 + v17);
      v20 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20))
      {
        v21 = sub_1000BA294(&qword_100BC3360);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v158 = v19[1];
        *v18 = *v19;
        v18[1] = v158;
        v159 = *(int *)(v20 + 20);
        v160 = (char *)v18 + v159;
        v161 = (char *)v19 + v159;
        v162 = type metadata accessor for TemperatureScaleConfiguration(0);
        v163 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v162 - 8) + 16);
        v164 = swift_bridgeObjectRetain(v158);
        v163(v160, v161, v162, v164);
        v165 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v160[v165[5]] = *(_QWORD *)&v161[v165[5]];
        *(_QWORD *)&v160[v165[6]] = *(_QWORD *)&v161[v165[6]];
        *(_QWORD *)&v160[v165[7]] = *(_QWORD *)&v161[v165[7]];
        v166 = v165[8];
        v167 = &v160[v166];
        v168 = &v161[v166];
        v170 = *(_QWORD *)v168;
        v169 = *((_QWORD *)v168 + 1);
        *(_QWORD *)v167 = v170;
        *((_QWORD *)v167 + 1) = v169;
        v160[v165[9]] = v161[v165[9]];
        swift_bridgeObjectRetain(v169);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v20);
      }
      v171 = *(int *)(v16 + 32);
      v172 = (_QWORD *)((char *)a1 + v171);
      v173 = (_QWORD *)((char *)a2 + v171);
      v174 = v173[1];
      *v172 = *v173;
      v172[1] = v174;
      swift_bridgeObjectRetain(v174);
      v7 = a1;
      v8 = v276;
      v9 = 2;
      goto LABEL_84;
    case 3u:
      v22 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
      v23 = (int *)type metadata accessor for HourlyForecastComponent(0);
      v24 = v23[5];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = *(_QWORD *)((char *)a2 + v24);
      *(_QWORD *)((char *)a1 + v24) = v27;
      v28 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v29 = &v25[v28];
      v30 = &v26[v28];
      v31 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain(v27);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
      {
        v32 = sub_1000BA294(&qword_100BC3368);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
      }
      v175 = v23[6];
      v176 = (char *)a1 + v175;
      v177 = (char *)a2 + v175;
      v178 = sub_1000BA294(&qword_100BCB9F8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v176, v177, v178);
      v179 = v23[7];
      v180 = (char *)a1 + v179;
      v181 = (char *)a2 + v179;
      v182 = sub_1000BA294(&qword_100BCB130);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v180, v181, v182);
      v183 = v23[8];
      v184 = (char *)a1 + v183;
      v185 = (char *)a2 + v183;
      v186 = type metadata accessor for WeatherChanges(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v185, 1, v186))
      {
        v187 = sub_1000BA294(&qword_100BCCC48);
        memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v184, v185, v186);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v184, 0, 1, v186);
      }
      *((_BYTE *)a1 + v23[9]) = *((_BYTE *)a2 + v23[9]);
      *((_BYTE *)a1 + v23[10]) = *((_BYTE *)a2 + v23[10]);
      v7 = a1;
      v8 = v3;
      v9 = 3;
      goto LABEL_84;
    case 4u:
      v33 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
      v7 = a1;
      v8 = v3;
      v9 = 4;
      goto LABEL_84;
    case 5u:
      v34 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a1, a2, v34);
      v35 = *(int *)(type metadata accessor for MapComponent(0) + 20);
      v36 = (_QWORD *)((char *)a1 + v35);
      v37 = (char *)a2 + v35;
      v38 = *(_QWORD *)((char *)a2 + v35 + 8);
      *v36 = *(_QWORD *)((char *)a2 + v35);
      v36[1] = v38;
      v39 = (int *)type metadata accessor for WeatherData(0);
      v40 = v39[5];
      v41 = (char *)v36 + v40;
      v42 = &v37[v40];
      v43 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v38);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
      {
        v44 = sub_1000BA294(&qword_100BC3340);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
      }
      v188 = v39[6];
      v189 = (char *)v36 + v188;
      v190 = &v37[v188];
      v191 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v189, v190, v191);
      v192 = v39[7];
      v193 = (char *)v36 + v192;
      v194 = &v37[v192];
      v195 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v194, 1, v195))
      {
        v196 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
      }
      else
      {
        v206 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v193, v194, v206);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v193, 0, 1, v195);
      }
      v207 = v39[8];
      v208 = (_QWORD *)((char *)v36 + v207);
      v209 = &v37[v207];
      v210 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v209, v210);
      if (EnumCaseMultiPayload == 1)
      {
        v226 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v226 - 8) + 16))(v208, v209, v226);
        v213 = v208;
        v214 = v210;
        v215 = 1;
        goto LABEL_53;
      }
      if (!EnumCaseMultiPayload)
      {
        v212 = *((_QWORD *)v209 + 1);
        *v208 = *(_QWORD *)v209;
        v208[1] = v212;
        swift_bridgeObjectRetain(v212);
        v213 = v208;
        v214 = v210;
        v215 = 0;
LABEL_53:
        swift_storeEnumTagMultiPayload(v213, v214, v215);
        goto LABEL_55;
      }
      memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
LABEL_55:
      v227 = v39[9];
      v228 = (char *)v36 + v227;
      v229 = &v37[v227];
      v230 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v229, 1, v230))
      {
        v231 = sub_1000BA294(&qword_100BC3350);
        memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
      }
      else
      {
        v232 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v229, 1, v232))
        {
          v233 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v228, v229, v232);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v228, 0, 1, v232);
        }
        v263 = *(int *)(v230 + 20);
        v264 = &v228[v263];
        v265 = &v229[v263];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v265, 1, v232))
        {
          v266 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v264, v265, v232);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v264, 0, 1, v232);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v228, 0, 1, v230);
      }
      v7 = a1;
      v8 = v3;
      v9 = 5;
      goto LABEL_84;
    case 6u:
      v45 = a2[1];
      *a1 = *a2;
      a1[1] = v45;
      v46 = (int *)type metadata accessor for WeatherData(0);
      v47 = v46[5];
      v48 = (char *)a1 + v47;
      v49 = (char *)a2 + v47;
      v50 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v45);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v50))
      {
        v51 = sub_1000BA294(&qword_100BC3340);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v50);
      }
      v197 = v46[6];
      v198 = (char *)a1 + v197;
      v199 = (char *)a2 + v197;
      v200 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(v198, v199, v200);
      v201 = v46[7];
      v202 = (char *)a1 + v201;
      v203 = (char *)a2 + v201;
      v204 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v203, 1, v204))
      {
        v205 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
      }
      else
      {
        v216 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 16))(v202, v203, v216);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v202, 0, 1, v204);
      }
      v217 = v46[8];
      v218 = (_QWORD *)((char *)a1 + v217);
      v219 = (_QWORD *)((char *)a2 + v217);
      v220 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v221 = swift_getEnumCaseMultiPayload(v219, v220);
      if (v221 == 1)
      {
        v234 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v234 - 8) + 16))(v218, v219, v234);
        v223 = v218;
        v224 = v220;
        v225 = 1;
        goto LABEL_60;
      }
      if (!v221)
      {
        v222 = v219[1];
        *v218 = *v219;
        v218[1] = v222;
        swift_bridgeObjectRetain(v222);
        v223 = v218;
        v224 = v220;
        v225 = 0;
LABEL_60:
        swift_storeEnumTagMultiPayload(v223, v224, v225);
        goto LABEL_62;
      }
      memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
LABEL_62:
      v235 = v46[9];
      v236 = (char *)a1 + v235;
      v237 = (char *)a2 + v235;
      v238 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v237, 1, v238))
      {
        v239 = sub_1000BA294(&qword_100BC3350);
        memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
      }
      else
      {
        v240 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v237, 1, v240))
        {
          v241 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 16))(v236, v237, v240);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v240);
        }
        v267 = *(int *)(v238 + 20);
        v268 = &v236[v267];
        v269 = &v237[v267];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v269, 1, v240))
        {
          v270 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 16))(v268, v269, v240);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v268, 0, 1, v240);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v238);
      }
      v7 = a1;
      v8 = v3;
      v9 = 6;
LABEL_84:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      return a1;
    case 7u:
      v52 = type metadata accessor for ArticleModel(0);
      if (swift_getEnumCaseMultiPayload(a2, v52) == 1)
      {
        v277 = v3;
        v53 = a2[1];
        *a1 = *a2;
        a1[1] = v53;
        v54 = a2[3];
        a1[2] = a2[2];
        a1[3] = v54;
        v55 = (int *)type metadata accessor for NewsArticle(0);
        v56 = v55[6];
        v57 = (char *)a1 + v56;
        v58 = (char *)a2 + v56;
        v59 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v54);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v59))
        {
          v60 = sub_1000BA294(&qword_100BD4280);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v59);
        }
        v242 = v55[7];
        v243 = (char *)a1 + v242;
        v244 = (char *)a2 + v242;
        v245 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v245 - 8) + 16))(v243, v244, v245);
        v246 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
        v246((char *)a1 + v55[8], (char *)a2 + v55[8], v59);
        v247 = v55[9];
        v248 = (_QWORD *)((char *)a1 + v247);
        v249 = (char *)a2 + v247;
        v250 = *(_QWORD *)((char *)a2 + v247 + 8);
        *v248 = *(_QWORD *)((char *)a2 + v247);
        v248[1] = v250;
        v251 = *(_QWORD *)((char *)a2 + v247 + 24);
        v248[2] = *(_QWORD *)((char *)a2 + v247 + 16);
        v248[3] = v251;
        v252 = *(int *)(type metadata accessor for NewsChannel(0) + 24);
        v253 = (char *)v248 + v252;
        v254 = &v249[v252];
        swift_bridgeObjectRetain(v250);
        swift_bridgeObjectRetain(v251);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v254, 1, v59))
        {
          v255 = sub_1000BA294(&qword_100BD4280);
          memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v255 - 8) + 64));
        }
        else
        {
          v246(v253, v254, v59);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v253, 0, 1, v59);
        }
        v3 = v277;
        v256 = v55[10];
        v257 = *(_QWORD *)((char *)a2 + v256);
        *(_QWORD *)((char *)a1 + v256) = v257;
        v258 = v55[11];
        v259 = *(_QWORD *)((char *)a2 + v258);
        *(_QWORD *)((char *)a1 + v258) = v259;
        v260 = v55[12];
        v261 = *(_QWORD *)((char *)a2 + v260);
        *(_QWORD *)((char *)a1 + v260) = v261;
        swift_bridgeObjectRetain(v257);
        swift_bridgeObjectRetain(v259);
        swift_bridgeObjectRetain(v261);
        v155 = a1;
        v156 = v52;
        v157 = 1;
      }
      else
      {
        v154 = type metadata accessor for Article(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v154 - 8) + 16))(a1, a2, v154);
        v155 = a1;
        v156 = v52;
        v157 = 0;
      }
      swift_storeEnumTagMultiPayload(v155, v156, v157);
      v262 = type metadata accessor for NewsArticleComponent(0);
      *((_BYTE *)a1 + *(int *)(v262 + 20)) = *((_BYTE *)a2 + *(int *)(v262 + 20));
      v7 = a1;
      v8 = v3;
      v9 = 7;
      goto LABEL_84;
    case 8u:
      v61 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(a1, a2, v61);
      HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(0);
      v63 = *(int *)(HourPrecipitationComponent + 20);
      v64 = (char *)a1 + v63;
      v65 = (char *)a2 + v63;
      v66 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
      v67 = *(int *)(HourPrecipitationComponent + 24);
      v68 = (char *)a1 + v67;
      v69 = (char *)a2 + v67;
      v70 = sub_1000BA294(&qword_100BCE378);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
      v7 = a1;
      v8 = v3;
      v9 = 8;
      goto LABEL_84;
    case 9u:
      v71 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(a1, a2, v71);
      v7 = a1;
      v8 = v3;
      v9 = 9;
      goto LABEL_84;
    case 0xAu:
      v72 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(a1, a2, v72);
      v73 = *(int *)(type metadata accessor for PressureComponent(0) + 20);
      v74 = (char *)a1 + v73;
      v75 = (char *)a2 + v73;
      v76 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
      v77 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      v78 = v77[5];
      v79 = &v74[v78];
      v80 = &v75[v78];
      v82 = *(_QWORD *)v80;
      v81 = *((_QWORD *)v80 + 1);
      *(_QWORD *)v79 = v82;
      *((_QWORD *)v79 + 1) = v81;
      v83 = v77[6];
      v84 = &v74[v83];
      v85 = &v75[v83];
      v86 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = *(_QWORD *)v85;
      *((_QWORD *)v84 + 1) = v86;
      v87 = v77[7];
      v88 = &v74[v87];
      v89 = &v75[v87];
      v90 = *((_QWORD *)v89 + 1);
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *((_QWORD *)v88 + 1) = v90;
      *(_QWORD *)&v74[v77[8]] = *(_QWORD *)&v75[v77[8]];
      v91 = v77[9];
      v92 = &v74[v91];
      v93 = &v75[v91];
      v94 = *((_QWORD *)v93 + 1);
      *(_QWORD *)v92 = *(_QWORD *)v93;
      *((_QWORD *)v92 + 1) = v94;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRetain(v94);
      v7 = a1;
      v8 = v3;
      v9 = 10;
      goto LABEL_84;
    case 0xBu:
      v95 = a2[1];
      *a1 = *a2;
      a1[1] = v95;
      v96 = a2[3];
      a1[2] = a2[2];
      a1[3] = v96;
      v97 = a2[5];
      a1[4] = a2[4];
      a1[5] = v97;
      v98 = a2[7];
      a1[6] = a2[6];
      a1[7] = v98;
      v99 = a2[9];
      a1[8] = a2[8];
      a1[9] = v99;
      v100 = a2[11];
      a1[10] = a2[10];
      a1[11] = v100;
      v101 = a2[12];
      v102 = a2[13];
      a1[12] = v101;
      a1[13] = v102;
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRetain(v96);
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRetain(v100);
      swift_bridgeObjectRetain(v102);
      v7 = a1;
      v8 = v3;
      v9 = 11;
      goto LABEL_84;
    case 0xDu:
      v104 = *a2;
      v103 = a2[1];
      *a1 = *a2;
      a1[1] = v103;
      v105 = *(int *)(type metadata accessor for SevereAlertComponent(0) + 24);
      v106 = (char *)a1 + v105;
      v107 = (char *)a2 + v105;
      v108 = type metadata accessor for Date(0);
      v109 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v108 - 8) + 16);
      v110 = swift_bridgeObjectRetain(v104);
      v109(v106, v107, v108, v110);
      v7 = a1;
      v8 = v3;
      v9 = 13;
      goto LABEL_84;
    case 0xEu:
      v111 = type metadata accessor for SunriseSunsetModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(a1, a2, v111);
      v7 = a1;
      v8 = v3;
      v9 = 14;
      goto LABEL_84;
    case 0xFu:
      v112 = type metadata accessor for HistoricalComparisons(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v112))
      {
        v113 = sub_1000BA294(&qword_100BCB328);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(a1, a2, v112);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v112);
      }
      v7 = a1;
      v8 = v3;
      v9 = 15;
      goto LABEL_84;
    case 0x10u:
      v114 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(a1, a2, v114);
      v115 = (int *)type metadata accessor for UVIndexComponent(0);
      v116 = v115[5];
      v117 = (char *)a1 + v116;
      v118 = (char *)a2 + v116;
      v119 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v117, v118, v119);
      v120 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
      v121 = &v117[v120];
      v122 = &v118[v120];
      v123 = *((_QWORD *)v122 + 1);
      *(_QWORD *)v121 = *(_QWORD *)v122;
      *((_QWORD *)v121 + 1) = v123;
      v124 = v115[6];
      v125 = (char *)a1 + v124;
      v126 = (char *)a2 + v124;
      swift_bridgeObjectRetain(v123);
      v127 = sub_1000BA294(&qword_100BCB130);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
      v128 = v115[7];
      v129 = (char *)a1 + v128;
      v130 = (char *)a2 + v128;
      v131 = sub_1000BA294(&qword_100BCB9F8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
      v7 = a1;
      v8 = v3;
      v9 = 16;
      goto LABEL_84;
    case 0x11u:
      v132 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(a1, a2, v132);
      v133 = *(int *)(type metadata accessor for VisibilityComponent(0) + 20);
      v134 = (_QWORD *)((char *)a1 + v133);
      v135 = (_QWORD *)((char *)a2 + v133);
      v136 = v135[1];
      *v134 = *v135;
      v134[1] = v136;
      v137 = v135[3];
      v134[2] = v135[2];
      v134[3] = v137;
      v138 = v135[5];
      v134[4] = v135[4];
      v134[5] = v138;
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRetain(v137);
      swift_bridgeObjectRetain(v138);
      v7 = a1;
      v8 = v3;
      v9 = 17;
      goto LABEL_84;
    case 0x12u:
      v139 = type metadata accessor for CurrentWeather(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v139 - 8) + 16))(a1, a2, v139);
      v140 = *(int *)(type metadata accessor for WindComponent(0) + 20);
      v141 = (char *)a1 + v140;
      v142 = (char *)a2 + v140;
      v143 = *((_QWORD *)v142 + 1);
      *(_QWORD *)v141 = *(_QWORD *)v142;
      *((_QWORD *)v141 + 1) = v143;
      v144 = *((_QWORD *)v142 + 3);
      *((_QWORD *)v141 + 2) = *((_QWORD *)v142 + 2);
      *((_QWORD *)v141 + 3) = v144;
      v145 = *((_QWORD *)v142 + 5);
      *((_QWORD *)v141 + 4) = *((_QWORD *)v142 + 4);
      *((_QWORD *)v141 + 5) = v145;
      v146 = *((_QWORD *)v142 + 7);
      *((_QWORD *)v141 + 6) = *((_QWORD *)v142 + 6);
      *((_QWORD *)v141 + 7) = v146;
      v147 = *((_QWORD *)v142 + 9);
      *((_QWORD *)v141 + 8) = *((_QWORD *)v142 + 8);
      *((_QWORD *)v141 + 9) = v147;
      v148 = *((_QWORD *)v142 + 11);
      *((_QWORD *)v141 + 10) = *((_QWORD *)v142 + 10);
      *((_QWORD *)v141 + 11) = v148;
      v149 = *((_QWORD *)v142 + 13);
      *((_QWORD *)v141 + 12) = *((_QWORD *)v142 + 12);
      *((_QWORD *)v141 + 13) = v149;
      v278 = v3;
      v150 = *((_QWORD *)v142 + 15);
      *((_QWORD *)v141 + 14) = *((_QWORD *)v142 + 14);
      *((_QWORD *)v141 + 15) = v150;
      v151 = *((_QWORD *)v142 + 17);
      *((_QWORD *)v141 + 16) = *((_QWORD *)v142 + 16);
      *((_QWORD *)v141 + 17) = v151;
      v152 = *((_QWORD *)v142 + 19);
      *((_QWORD *)v141 + 18) = *((_QWORD *)v142 + 18);
      *((_QWORD *)v141 + 19) = v152;
      v275 = *((_QWORD *)v142 + 21);
      *((_QWORD *)v141 + 20) = *((_QWORD *)v142 + 20);
      *((_QWORD *)v141 + 21) = v275;
      v274 = *((_QWORD *)v142 + 23);
      *((_QWORD *)v141 + 22) = *((_QWORD *)v142 + 22);
      *((_QWORD *)v141 + 23) = v274;
      v153 = *((_QWORD *)v142 + 25);
      *((_QWORD *)v141 + 24) = *((_QWORD *)v142 + 24);
      *((_QWORD *)v141 + 25) = v153;
      *((_OWORD *)v141 + 13) = *((_OWORD *)v142 + 13);
      v272 = *((_QWORD *)v142 + 28);
      v273 = v153;
      *((_QWORD *)v141 + 28) = v272;
      swift_bridgeObjectRetain(v143);
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRetain(v146);
      swift_bridgeObjectRetain(v147);
      swift_bridgeObjectRetain(v148);
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRetain(v150);
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRetain(v152);
      swift_bridgeObjectRetain(v275);
      swift_bridgeObjectRetain(v274);
      swift_bridgeObjectRetain(v273);
      swift_bridgeObjectRetain(v272);
      v7 = a1;
      v8 = v278;
      v9 = 18;
      goto LABEL_84;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
      return a1;
  }
}

uint64_t type metadata accessor for HourlyForecastComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100C00340;
  if (!qword_100C00340)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HourlyForecastComponent);
  return result;
}

uint64_t type metadata accessor for DailyForecastComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE7A08;
  if (!qword_100BE7A08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyForecastComponent);
  return result;
}

uint64_t type metadata accessor for WindComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100C15B40;
  if (!qword_100C15B40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WindComponent);
  return result;
}

uint64_t type metadata accessor for MapComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100C07038;
  if (!qword_100C07038)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MapComponent);
  return result;
}

void sub_100101E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  type metadata accessor for WindComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100088FDC();
  type metadata accessor for VisibilityComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  type metadata accessor for UVIndexComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v34 = type metadata accessor for SunriseSunsetModel(0);
  __chkstk_darwin(v34);
  sub_100088FDC();
  v5 = sub_1000987B4(v4);
  type metadata accessor for SevereAlertComponent(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v8 = sub_1000987B4(v7);
  type metadata accessor for PressureComponent(v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v11 = sub_1000987B4(v10);
  type metadata accessor for NotificationsOptInComponent(v11);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v14 = sub_1000987B4(v13);
  type metadata accessor for NextHourPrecipitationComponent(v14);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v17 = sub_1000987B4(v16);
  type metadata accessor for NewsArticleComponent(v17);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v20 = sub_1000987B4(v19);
  type metadata accessor for MoonComponent(v20);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100098728();
  type metadata accessor for MapComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100098728();
  type metadata accessor for HumidityComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100098728();
  type metadata accessor for HourlyForecastComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100098728();
  type metadata accessor for FeelsLikeComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100098728();
  type metadata accessor for DailyForecastComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100098728();
  type metadata accessor for AveragesComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100098728();
  type metadata accessor for AirQualityComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100098728();
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100098728();
  v32 = v31 - v30;
  sub_1001009A4(a1, v31 - v30);
  v33 = (char *)sub_100102100 + 4 * word_1009950B0[swift_getEnumCaseMultiPayload(v32)];
  __asm { BR              X10 }
}

uint64_t sub_100102100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000DD934(v0, v1);
  sub_1000C387C((_QWORD *)(*(_QWORD *)(v2 - 224) + 16), *(_QWORD *)(*(_QWORD *)(v2 - 224) + 40));
  sub_10003FFB0(v3);
  return sub_10006BD20(v1, type metadata accessor for AirQualityComponent);
}

void sub_100102510()
{
  uint64_t v0;

  sub_1000DB418((_QWORD *)(*(_QWORD *)(v0 - 224) + 456), *(_QWORD *)(*(_QWORD *)(v0 - 224) + 480));
  sub_100283E60(*(_QWORD *)(v0 - 216));
  JUMPOUT(0x1001024F0);
}

uint64_t type metadata accessor for VisibilityComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDC610;
  if (!qword_100BDC610)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VisibilityComponent);
  return result;
}

uint64_t type metadata accessor for PressureComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF5C20;
  if (!qword_100BF5C20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PressureComponent);
  return result;
}

uint64_t type metadata accessor for UVIndexComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0F728;
  if (!qword_100C0F728)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UVIndexComponent);
  return result;
}

uint64_t type metadata accessor for NextHourPrecipitationComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF49E0;
  if (!qword_100BF49E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NextHourPrecipitationComponent);
  return result;
}

uint64_t type metadata accessor for NotificationsOptInComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD3260;
  if (!qword_100BD3260)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsOptInComponent);
  return result;
}

uint64_t type metadata accessor for SevereAlertComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD4F70;
  if (!qword_100BD4F70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SevereAlertComponent);
  return result;
}

uint64_t type metadata accessor for NewsArticleComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE8F70;
  if (!qword_100BE8F70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsArticleComponent);
  return result;
}

uint64_t type metadata accessor for AirQualityComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDC708;
  if (!qword_100BDC708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirQualityComponent);
  return result;
}

uint64_t type metadata accessor for HumidityComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100C09228;
  if (!qword_100C09228)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HumidityComponent);
  return result;
}

uint64_t type metadata accessor for AveragesComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0AA20;
  if (!qword_100C0AA20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AveragesComponent);
  return result;
}

uint64_t type metadata accessor for MoonComponent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCF250;
  if (!qword_100BCF250)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonComponent);
  return result;
}

void sub_100102798()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000AD084();
  *v0 = v1;
}

void sub_1001027C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v17 = a2;
  v3 = type metadata accessor for LocationViewComponent(0);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  __chkstk_darwin(v3);
  v14 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v12 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - v9;
  v18 = _swiftEmptyArrayStorage;
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      sub_1001009A4(a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)&v12 - v9);
      sub_1001009A4((uint64_t)v10, (uint64_t)v7);
      v11 = (char *)&loc_1001028E4 + *((int *)qword_10048BCF0 + swift_getEnumCaseMultiPayload(v7));
      __asm { BR              X9 }
    }
    __break(1u);
  }
  else
  {
    swift_release(v17);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100102BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationViewComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100102BF8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

uint64_t sub_100102C2C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = sub_100103744(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_100103180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v8;
  uint64_t v9;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + i;
      sub_1001031FC(&v8, *(_BYTE *)(v5 + 32));
    }
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    v6 = a2;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1001031FC(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v9;
  _QWORD v11[9];

  v4 = *v2;
  Hasher.init(_seed:)(v11);
  sub_100103744(a2);
  sub_10009BD5C();
  sub_10007A078((uint64_t)v11);
  sub_10009934C();
  v5 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    sub_1000D12F4();
    __asm { BR              X9 }
  }
  sub_100075DF4();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v11[0] = *v9;
  *v9 = 0x8000000000000000;
  sub_100103970(a2, v5, isUniquelyReferenced_nonNull_native);
  *v9 = v11[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_100103744(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10010377C + 4 * byte_1009B1E2A[a1]))(0x696C617551726961, 0xEA00000000007974);
}

uint64_t sub_10010377C()
{
  return 0x726F46796C696164;
}

uint64_t sub_1001037A0()
{
  return 0x6B694C736C656566;
}

uint64_t sub_1001037BC()
{
  return 0x6F46796C72756F68;
}

uint64_t sub_1001037E0()
{
  return 0x79746964696D7568;
}

uint64_t sub_1001037F8()
{
  return 7364973;
}

uint64_t sub_100103808()
{
  return 1852796781;
}

uint64_t sub_100103818()
{
  return 0x697472417377656ELL;
}

unint64_t sub_100103838()
{
  return 0xD000000000000015;
}

uint64_t sub_100103880()
{
  return 0x6572757373657270;
}

uint64_t sub_1001038B4()
{
  return 0x655774726F706572;
}

uint64_t sub_1001038D8()
{
  return 0x6C41657265766573;
}

uint64_t sub_1001038F8()
{
  return 0x53657369726E7573;
}

uint64_t sub_10010391C()
{
  return 0x7365676172657661;
}

uint64_t sub_100103934()
{
  return 0x7865646E497675;
}

uint64_t sub_10010394C()
{
  return 0x696C696269736976;
}

uint64_t sub_100103960()
{
  return 1684957559;
}

void sub_100103970(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100602184(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_100103F50(&qword_100BF6538);
        goto LABEL_10;
      }
      sub_10010A5F4(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v18);
    v10 = sub_100103744(a1);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x100103F28);
  }
  *(_QWORD *)(v12 + 16) = v15;
}

uint64_t sub_100103F44(uint64_t a1)
{
  return sub_1001ADDDC(a1, (uint64_t (*)(BOOL))sub_10011EEE4);
}

void sub_100103F50(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v1;
  sub_1000BA294(a1);
  v5 = sub_1000F4108();
  if (*(_QWORD *)(v2 + 16))
  {
    v6 = (void *)sub_1000BDADC();
    if (v9)
      v10 = (unint64_t)v6 >= v8;
    else
      v10 = 1;
    if (v10)
      sub_10011DF30(v6, v7);
    sub_1000BD5B4();
    if (!v13)
      goto LABEL_10;
LABEL_9:
    sub_100075E34();
    while (1)
    {
      *(_BYTE *)(*(_QWORD *)(v5 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
      if (v14)
        goto LABEL_9;
LABEL_10:
      v16 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v16 >= v11)
        goto LABEL_25;
      if (!*(_QWORD *)(v3 + 8 * v16))
      {
        if (v12 + 2 >= v11)
          goto LABEL_25;
        if (!*(_QWORD *)(v3 + 8 * (v12 + 2)))
        {
          if (v12 + 3 >= v11)
            goto LABEL_25;
          if (!*(_QWORD *)(v3 + 8 * (v12 + 3)))
          {
            v17 = v12 + 4;
            if (v12 + 4 >= v11)
              goto LABEL_25;
            if (!*(_QWORD *)(v3 + 8 * v17))
              break;
          }
        }
      }
LABEL_22:
      sub_10011E494();
    }
    while (1)
    {
      v18 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v18 >= v11)
        goto LABEL_25;
      ++v17;
      if (*(_QWORD *)(v3 + 8 * v18))
        goto LABEL_22;
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    sub_100089020();
    *v4 = v5;
    sub_100079F70();
  }
}

uint64_t sub_100104048@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  sub_1000BA76C(0, v4, v5, a1);
  return sub_10008862C(v2 + v6, v4, v5, a2);
}

uint64_t sub_1001040A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_1000D31C4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_1001040D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100104100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000986AC();
  v1 = *(_QWORD *)(sub_1000992C4() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_100098778() - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (((v2 + 40) & ~v2) + v3 + v5) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = v2 | v5 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_1000FCC38();
  sub_1000C0C88();
  sub_100099254(v0 + v6, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return sub_1000BBBC0(v0, v7, v8);
}

uint64_t sub_10010418C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001041B8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)sub_1000D93E4();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v0 + v4, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)v6 + v1[5]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[6]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[7]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001042B0()
{
  uint64_t v0;
  int v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (int *)sub_1000CC8A8();
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  v8 = sub_1000BA294(&qword_100BC4F28);
  sub_100098814(v8);
  sub_1000BD298();
  if (v1 == 1)
  {
    swift_release(*(_QWORD *)(v7 + 8));
    sub_1000BA294(&qword_100BC6510);
    v9 = sub_1000BEDD4();
    sub_1000B2568(v9);
  }
  sub_1000C2470(v2[5]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v7 + v2[6]));
  sub_1000C2470(v2[7]);
  sub_1000DF460();
  return sub_1000B4380(v0, v5 + v6, v4 | 7);
}

uint64_t sub_10010435C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v1 = (int *)sub_1000CC8B0();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v20 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v4;
  sub_1000B15F8(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for TimeZone(0);
  sub_1000B2568(v7);
  v8 = (int *)sub_1000DD788();
  v9 = type metadata accessor for Date(0);
  sub_1000E6ED4();
  sub_1000BA4CC(v8[6]);
  sub_1000BA4CC(v8[7]);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6 + v8[8], 1, v9))
    sub_1000E6ED4();
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8[9]));
  v10 = type metadata accessor for MoonPhase.Hemisphere(0);
  sub_1000B2568(v10);
  v11 = (_QWORD *)(v5 + v1[6]);
  v12 = sub_1000BA294(&qword_100BC68E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for Locale(0);
    sub_1000B2568(v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = v3 | 7;
  v15 = v4 + v20;
  v16 = (int *)sub_1000B4450();
  sub_1000BA4CC(v16[5]);
  v17 = (char *)v11 + v16[6];
  v18 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  sub_1000BA4CC(v16[7]);
  sub_1000BA4CC(v16[8]);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + v16[9]));
  sub_1000BA4CC(v16[10]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v5 + v1[7]));
  return swift_deallocObject(v0, v15, v14);
}

uint64_t sub_100104514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = sub_1000C35EC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (uint64_t)v6 + *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v8 = (int *)sub_1000C5B88();
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, (uint64_t)v8))
  {
    v24 = v5;
    v9 = sub_100098778();
    sub_1000B2568(v9);
    sub_1000BA548(v7 + v8[5]);
    sub_1000BA548(v7 + v8[6]);
    v10 = sub_100099928();
    sub_1000989A0(v10);
    v11 = v7 + v8[8];
    v12 = sub_1000BA294(&qword_100BC4E68);
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    v13(v11, v12);
    v13(v7 + v8[9], v12);
    sub_1000BA548(v7 + v8[10]);
    sub_1000BA548(v7 + v8[11]);
    sub_1000BA548(v7 + v8[14]);
    v14 = sub_1000C51E4();
    if (!sub_1000C24F4(v14))
      sub_1000BBCFC();
    sub_1000BA548(v7 + v8[17]);
    sub_1000BA548(v7 + v8[18]);
    sub_1000BA548(v7 + v8[19]);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[20]));
    v5 = v24;
  }
  v15 = v0 + v4 + *(int *)(v1 + 24);
  sub_100098778();
  sub_1000C092C();
  v16(v15);
  sub_1000BA548(v15 + v8[5]);
  sub_1000BA548(v15 + v8[6]);
  v17 = sub_100099928();
  sub_1000B2568(v17);
  v18 = v15 + v8[8];
  v19 = sub_1000BA294(&qword_100BC4E68);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v20(v15 + v8[9], v19);
  sub_1000BA548(v15 + v8[10]);
  sub_1000BA548(v15 + v8[11]);
  sub_1000BA548(v15 + v8[14]);
  v21 = v15 + v8[15];
  v22 = sub_1000C51E4();
  if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  sub_1000BA548(v15 + v8[17]);
  sub_1000BA548(v15 + v8[18]);
  sub_1000BA548(v15 + v8[19]);
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + v8[20]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001047B8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = (int *)sub_10021A710();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v17 = *(_QWORD *)(v2 + 64);
  v18 = sub_1000DC134();
  v5 = *(_QWORD *)(v18 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  sub_10009C0BC(v1[5]);
  v8 = sub_1000DC68C();
  sub_1000D0C30(*(_QWORD *)(v8 - 8));
  sub_10009C0BC(v1[7]);
  sub_10009C0BC(v1[8]);
  v9 = sub_100099928();
  sub_1000989A0(v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[11]));
  v10 = type metadata accessor for CurrentWeather(0);
  sub_1000989A0(v10);
  v11 = v0 + v4 + v1[13];
  v12 = type metadata accessor for DayWeather(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
    sub_1000BE774(v11, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8));
  v13 = type metadata accessor for ChartViewModelInterpolationMode(0);
  sub_1000AE82C(*(_QWORD *)(v13 - 8));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((v4 + v17 + v6) & ~v6), v18);
  v14 = sub_10011E3D0();
  return swift_deallocObject(v14, v15, v3 | v6 | 7);
}

uint64_t sub_100104940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = sub_1000C4548(a1, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = sub_10009896C();
  if (!sub_1000B4560(v5 + v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v5 + v10, v12);
  sub_1000DB79C();
  sub_1000DD80C();
  v13 = (id *)(v5 + v10 + *(int *)(v7 + 48));

  v15 = type metadata accessor for WeatherAsyncImage.LoadingState(0, v4, v6, v14);
  v16 = (uint64_t)v13 + *(int *)(v15 + 36);
  if (!sub_1000B4560(v16))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v16, v12);
  sub_100230AFC(*(unint64_t *)((char *)v13 + *(int *)(v15 + 40)));
  v17 = type metadata accessor for State(0, v15);
  swift_release(*(id *)((char *)v13 + *(int *)(v17 + 28)));
  return swift_deallocObject(v5, v10 + v11, v9 | 7);
}

uint64_t sub_100104A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for MeasuredConditionDetailLegendView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v7 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + *(int *)(v1 + 32)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100104B30()
{
  _QWORD *v0;

  swift_release(v0[3]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 4);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100104B6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  sub_1000986AC();
  v1 = (int *)sub_1000BBE9C();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_1000E6F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v4 + v5 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v0 + v4;
  sub_10009DA64();
  v12 = sub_1000BA294(&qword_100BC37E0);
  if (sub_1000952AC(v12) == 1)
  {
    sub_10009E908();
    v13 = sub_100099998();
    sub_1000B2568(v13);
  }
  else
  {
    sub_1000F3F48();
  }
  v14 = v9 & ~v8;
  sub_1000C69FC(v1[7]);
  v15 = sub_1000BA294(&qword_100BC37D8);
  if (sub_1000952AC(v15) == 1)
  {
    v16 = sub_1000C6D94();
    sub_1000B2568(v16);
  }
  else
  {
    sub_1000F3F48();
  }
  sub_1000C69FC(v1[9]);
  swift_release(*(_QWORD *)(v11 + v1[10]));
  sub_1000C098C(v1[11]);
  sub_1000C098C(v1[12]);
  swift_release(*(_QWORD *)(v11 + v1[13] + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v11 + v1[14]));
  swift_unknownObjectRelease(*(_QWORD *)(v11 + v1[15]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v11 + v1[16]));
  v17 = v0 + v14;
  v18 = sub_10003BCB8();
  switch(sub_100098814(v18))
  {
    case 0u:
      sub_1000992C4();
      goto LABEL_10;
    case 1u:
      sub_1000AE824();
LABEL_10:
      v19 = sub_1000BCF58();
      goto LABEL_11;
    case 2u:

      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 32));
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 48));
      sub_10009BEBC();
      v21 = sub_1000992C4();
      if (sub_10009E638(v21))
        goto LABEL_15;
      v19 = sub_1000E7BE4();
LABEL_11:
      v20(v19);
LABEL_15:
      v22 = sub_1000EAF50();
      sub_1000B2568(v22);
      v23 = sub_1000D097C();
      v24 = sub_10009DA58(v23);
      if (v24 == 1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
        v26 = (int *)sub_1000EF98C();
        v27 = v6 + v26[6];
        v28 = sub_10009896C();
        if (!sub_1000B4674())
          sub_1000B4684();
        v29 = sub_1000C2150();
        sub_1000989A0(v29);
        v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
        v30(v6 + v26[8], v28);
        sub_1000C1A2C();
        sub_1000CE558();
        v31 = v27 + *(int *)(sub_1000ECF68() + 24);
        if (!sub_1000B4674())
          v30(v31, v28);
        sub_10009D420(v26[10]);
        sub_10009D420(v26[11]);
        sub_10009D420(v26[12]);
      }
      else if (!v24)
      {
        v25 = sub_10009896C();
        sub_10003BC44(v25);
      }
      return sub_1000BBBC0(v0, v14 + v10, v3 | v8 | 7);
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 24));
      goto LABEL_15;
    default:
      goto LABEL_15;
  }
}

uint64_t sub_100104DEC()
{
  uint64_t v0;

  sub_1000B15F8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  sub_1000BF398(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100104E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for WireframeScrollInterestView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 8));
  swift_release(*(_QWORD *)(v12 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12 + *(int *)(v6 + 44), v5);
  v13 = (_QWORD *)(v12 + *(int *)(v6 + 48));
  swift_release(*v13);
  swift_release(v13[1]);
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100104EC8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100104EF4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  char *v13;
  uint64_t v14;

  v1 = (int *)sub_1000BA8B0();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (_QWORD *)(v0 + v4);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(v7[1]);
  swift_release(v7[3]);
  swift_release(v7[4]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v7 + 6);
  v8 = (char *)v7 + v1[7];
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));
  v9 = sub_1000C4748();
  v10 = &v8[*(int *)(v9 + 32)];
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(&v8[*(int *)(v9 + 36)], v11);
  v13 = (char *)v7 + v1[12];
  v14 = sub_1000C537C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release(*(_QWORD *)((char *)v7 + v1[13] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100105018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = type metadata accessor for MoonComponentView(0);
  sub_100099474();
  v5 = sub_1000BA294(&qword_100BC68C8);
  if (sub_100098814(v5) == 1)
  {
    v6 = type metadata accessor for ColorSchemeContrast(0);
    sub_1000987E0(v6);
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000C47A8();
  v7 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    sub_1000987E0(v8);
  }
  else
  {
    sub_1000B4394();
  }
  v9 = sub_1000BA294(&qword_100BD86C0);
  if (sub_100098814(v9) == 1)
  {
    v10 = type metadata accessor for ForegroundEffect(0);
    if (!sub_1000BC04C(v10))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  v11 = v2 + *(int *)(v4 + 40);
  v12 = sub_1000BA294(&qword_100C09EB0);
  if (sub_100098814(v12) == 1)
  {
    v13 = sub_10009D50C();
    sub_1000987E0(v13);
  }
  else
  {
    sub_1000B4394();
  }
  v14 = sub_1000CD700();
  sub_1000987E0(v14);
  sub_100098C18();
  v15 = *(unsigned __int8 *)(v3 + 32);
  if (v15 != 255)
    sub_100121E04(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v15);
  sub_1000BD3D8();
  sub_1000DB8F0();
  v16 = sub_1000D1DA0();
  sub_1000989A0(v16);
  sub_1000D11FC();
  sub_1000D8F34();
  return sub_1000BBBC0(v0, v1, v11);
}

uint64_t sub_10010516C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100105198()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *);

  sub_1000986AC();
  v1 = (int *)sub_1000B25E8();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = sub_10003BC60();
    sub_1000987E0(v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_10009DAA8((uint64_t)v6 + v1[5]);
  swift_unknownObjectRelease(*(_QWORD *)((char *)v6 + v1[6]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)v6 + v1[7]));
  v9 = (char *)v6 + v1[8];
  v10 = sub_1000BE878();
  sub_1000B2568(v10);
  v11 = (int *)sub_1000C53F8();
  sub_1000BA548((uint64_t)&v9[v11[6]]);
  v12 = &v9[v11[7]];
  v13 = sub_1000C1A5C();
  if (sub_10009ED24(v13) == 1)
  {
    v14 = sub_100098778();
    if (!sub_1000BBDB0(v14))
      sub_1000C2190();
  }
  else
  {
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
  }
  sub_1000C5400((uint64_t)&v9[v11[8]]);
  v15 = sub_100098778();
  if (!sub_1000BBDB0(v15))
    sub_1000C2190();
  v16 = sub_100099928();
  if (!sub_1000BBDB0(v16))
    sub_1000C2190();
  v17 = v3 | 7;
  sub_1000BA548((uint64_t)&v9[v11[12]]);
  sub_1000BA548((uint64_t)&v9[v11[13]]);
  sub_1000BA548((uint64_t)&v9[v11[15]]);
  sub_1000BA548((uint64_t)&v9[v11[16]]);
  sub_1000BA548((uint64_t)&v9[v11[17]]);
  sub_1000BA548((uint64_t)&v9[v11[18]]);
  sub_1000BA548((uint64_t)&v9[v11[19]]);
  sub_1000BA548((uint64_t)&v9[v11[20]]);
  v18 = &v9[v11[22]];
  sub_1000BE880();
  sub_1000C092C();
  v19(v18);
  sub_1000BA548((uint64_t)&v9[v11[25]]);
  sub_10009DAA8((uint64_t)v6 + v1[9]);
  sub_10009DAA8((uint64_t)v6 + v1[11]);
  sub_1000C6DD4();
  sub_10009C7AC();
  return sub_1000BBBC0(v0, v4 + v5, v17);
}

uint64_t sub_100105380()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001053B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(type metadata accessor for WeatherWindowGroup(0, v5, *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8, v5);
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_100105420()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t active;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;

  v1 = (int *)sub_1000C5458();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1000B15F8(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_1000BA294(&qword_100BC68C8);
  if (sub_100098814(v8) == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast(0);
    sub_1000987E0(v9);
  }
  else
  {
    swift_release(*v7);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + v1[7]));
  v10 = v6 + v1[8];
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 96));

  v11 = (int *)sub_1000D8F44();
  v12 = sub_1000D1DD0();
  v13 = type metadata accessor for TemperatureScaleConfiguration(v12);
  sub_1000987E0(v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[11]));
  sub_1000D1254(v10 + v11[12]);
  v14 = sub_1000D1DD0();
  v15 = type metadata accessor for TemperatureAveragesHeroChartViewModel.PeakMarkModel(v14);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v15))
  {
    v16 = sub_100098778();
    sub_1000987E0(v16);
  }
  v17 = sub_1000D1DD0();
  v18 = (int *)type metadata accessor for PeakUpperMarkModel(v17);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, (uint64_t)v18))
  {
    v19 = sub_100098778();
    sub_1000987E0(v19);
    sub_1000BA548((uint64_t)v7 + v18[6]);
    sub_1000BA548((uint64_t)v7 + v18[7]);
    sub_1000BA548((uint64_t)v7 + v18[8]);
  }
  v20 = sub_1000D1DD0();
  v21 = type metadata accessor for DetailHeroChartLollipopModel(v20);
  if (sub_100098814(v21) == 1)
  {
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    v23 = sub_100098778();
    sub_1000989A0(v23);
    v7 = (_QWORD *)((char *)v7 + *(int *)(active + 24));
  }
  v24 = sub_1000BA944();
  v25 = sub_100098814(v24);
  switch(v25)
  {
    case 2:
      swift_bridgeObjectRelease(v7[1]);
      v27 = (int *)sub_1000D9580();
      v28 = type metadata accessor for AttributedString(0);
      sub_1000989A0(v28);
      sub_1000BA548((uint64_t)v7 + v27[6]);
      sub_1000BA548((uint64_t)v7 + v27[7]);
      sub_1000BA548((uint64_t)v7 + v27[8]);
      sub_1000BA548((uint64_t)v7 + v27[9]);
      v26 = (_QWORD *)((char *)v7 + v27[10] + 8);
      goto LABEL_16;
    case 1:
      swift_bridgeObjectRelease(v7[1]);
      swift_bridgeObjectRelease(v7[3]);
      swift_bridgeObjectRelease(v7[5]);
      v26 = v7 + 7;
      goto LABEL_16;
    case 0:
      swift_bridgeObjectRelease(v7[1]);
      swift_bridgeObjectRelease(v7[3]);
      v26 = v7 + 5;
LABEL_16:
      swift_bridgeObjectRelease(*v26);
      break;
  }
  v29 = v3 | 7;
  v30 = v4 + v5;
  v31 = v10 + v11[16];
  v32 = sub_100098778();
  v33 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8);
  v33(v31, v32);
  v33(v10 + v11[17], v32);
  v34 = type metadata accessor for DetailChartGradientModel(0);
  sub_10003BC44(v34);
  return swift_deallocObject(v0, v30, v29);
}

uint64_t sub_100105714()
{
  uint64_t v0;

  sub_10009884C();
  sub_1000D176C();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100105738()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)sub_1000B48D0();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v7);
  swift_release(*(_QWORD *)(v0 + v4));
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*(_QWORD *)(v6 + 8));
    v9 = v6 + *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v10 = type metadata accessor for PresentationMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = v3 | 7;
  v12 = v4 + v5;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[5] + 8));
  v13 = v6 + v1[6];
  v14 = sub_1000C28E0();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  swift_release(*(_QWORD *)(v6 + v1[7] + 8));
  v16 = v6 + v1[8];
  v15(v16, v14);
  v17 = sub_1000BA294(&qword_100BDD560);
  swift_release(*(_QWORD *)(v16 + *(int *)(v17 + 28)));
  return swift_deallocObject(v0, v12, v11);
}

uint64_t sub_100105870()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1001058AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for ConditionDetailInnerView(0);
  sub_1000EAFB0();
  sub_1000C21CC();
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
  sub_100099508();
  v5 = sub_10009D59C();
  sub_1000D17B8(v5);
  v6 = sub_100099A94();
  if (!sub_1000BBDB0(v6))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
    sub_1000B4968(v3[5]);
    sub_1000B4968(v3[6]);
    sub_1000B4968(v3[7]);
  }
  sub_1000BD450();
  v7 = sub_1000D9588();
  sub_10009BF1C(v7);
  sub_1000F4444();
  sub_1000D09DC();
  sub_1000C1AB4();
  v8 = sub_1000D05FC();
  sub_10009BF1C(v8);
  v9 = sub_1000CF854();
  sub_1000B2568(v9);
  sub_1000C5EBC();
  sub_1000BEE68();
  return sub_1000C5EA0(v0, v2, v1);
}

uint64_t sub_100105984()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 9);
  swift_release(v0[16]);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_1001059C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)sub_1000C4A18();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v7);
  swift_release(*(_QWORD *)(v0 + v4));
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*(_QWORD *)(v6 + 8));
    v9 = v6 + *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v10 = type metadata accessor for PresentationMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = v3 | 7;
  v12 = v4 + v5;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[5] + 8));
  v13 = v6 + v1[6];
  v14 = sub_1000CCDFC();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  swift_release(*(_QWORD *)(v6 + v1[7] + 8));
  v16 = v6 + v1[8];
  v15(v16, v14);
  v17 = sub_1000BA294(&qword_100BE5730);
  swift_release(*(_QWORD *)(v16 + *(int *)(v17 + 28)));
  return swift_deallocObject(v0, v12, v11);
}

uint64_t sub_100105B00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  void (*v50)(uint64_t, uint64_t, double);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  void (*v66)(uint64_t, uint64_t, double);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, double);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v1 = (int *)type metadata accessor for MoonDetailRootContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v155 = *(unsigned __int8 *)(v2 + 80);
  v156 = v0;
  v153 = *(_QWORD *)(v2 + 64);
  v154 = (v155 + 16) & ~v155;
  v3 = (_QWORD *)(v0 + v154);
  v4 = sub_1000BA294(&qword_100BC4F28);
  v5 = sub_100098814(v4);
  swift_release(*v3);
  if (v5 == 1)
  {
    swift_release(v3[1]);
    sub_1000BA294(&qword_100BC6510);
    v6 = type metadata accessor for PresentationMode(0);
    sub_100094FE8(v6);
  }
  sub_1000C55A8();
  v8 = (char *)v3 + v7;
  v9 = type metadata accessor for MoonDetailSelectedDate(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) <= 2)
  {
    v10 = sub_100098778();
    sub_1000B2568(v10);
  }
  v11 = (int *)sub_1000DF648();
  sub_1000BA548((uint64_t)&v8[v11[5]]);
  sub_1000BA548((uint64_t)&v8[v11[6]]);
  v12 = (uint64_t)&v8[v11[7]];
  v13 = sub_100098778();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  sub_10009BD10(v12);
  v15 = sub_1000C0EC4();
  v16 = v12 + *(int *)(v15 + 24);
  if (!sub_10009D53C(v16))
    sub_10009BD10(v16);
  v17 = v12 + *(int *)(v15 + 28);
  if (!sub_10009D53C(v17))
    sub_10009BD10(v17);
  v18 = &v8[v11[8]];
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v18 + 5));
  v19 = type metadata accessor for MoonScrubberHeaderViewModel(0);
  sub_10009BD10((uint64_t)&v18[*(int *)(v19 + 32)]);
  sub_10009BD10((uint64_t)&v18[*(int *)(v19 + 36)]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v11[9]]);
  v20 = *(_QWORD *)&v8[v11[10]];
  if (v20)
  {
    swift_bridgeObjectRelease(v20);
    sub_1000B3160();
  }
  v150 = v14;
  v21 = &v8[v11[11]];
  sub_10006BD8C(*(_QWORD *)v21, *((_QWORD *)v21 + 1), v21[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v21 + 4));
  v22 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
  v23 = (uint64_t)&v21[v22[6]];
  v24 = type metadata accessor for WeatherDescription(0);
  if (!sub_1000BD480(v23))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v151 = v24;
  v25 = (uint64_t)&v21[v22[7]];
  v26 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
  switch(swift_getEnumCaseMultiPayload(v25, v26))
  {
    case 0u:
      v27 = *(_QWORD *)(v151 - 8);
      goto LABEL_32;
    case 1u:
      v28 = *(_QWORD *)(v25 + 8);
      goto LABEL_37;
    case 2u:
      v29 = type metadata accessor for AttributedString(0);
      goto LABEL_31;
    case 3u:
      v29 = sub_1000BA294(&qword_100BD30F8);
      goto LABEL_31;
    case 4u:
      v30 = *(_QWORD *)(v25 + 8);
      if (v30)
      {
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 24));
      }
      v31 = v25 + *(int *)(sub_1000C1AEC() + 20);
      v32 = sub_1000C21E4();
      if (sub_1000D9E94(v32) == 1)
      {
        sub_1000B3160();
        v145 = (int *)sub_10004A364();
        v141 = v31 + v145[5];
        v143 = sub_10009896C();
        if (!_s7Weather24LocationCompositionStateOwet_0(v141, 1, v143))
          (*(void (**)(uint64_t))(*(_QWORD *)(v143 - 8) + 8))(v141);
        v33 = sub_1000BA548(v31 + v145[6]);
        v140 = v31;
        v139 = *(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v143 - 8) + 8);
        v139(v31 + v145[7], v143, v33);
        v144 = v31 + v145[8];
        if (!sub_1000D01AC(v144))
          ((void (*)(uint64_t, uint64_t))v139)(v144, v143);
      }
      v34 = sub_1000D0A10();
      if (sub_1000C4A70(v34))
        goto LABEL_38;
      sub_10009896C();
      goto LABEL_98;
    case 5u:
      if (*(_QWORD *)(v25 + 24))
      {
        sub_1000D31B4(*(_QWORD *)v25, *(_QWORD *)(v25 + 8), *(_BYTE *)(v25 + 16));
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 24));
      }
      sub_1002387C0(*(_QWORD *)(v25 + 32), *(_QWORD *)(v25 + 40), *(_QWORD *)(v25 + 48), *(_QWORD *)(v25 + 56), *(_QWORD *)(v25 + 64), *(_QWORD *)(v25 + 72), *(_QWORD *)(v25 + 80), *(unsigned __int8 *)(v25 + 88), *(_BYTE *)(v25 + 89));
      goto LABEL_38;
    case 6u:
      v29 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
LABEL_31:
      v27 = *(_QWORD *)(v29 - 8);
LABEL_32:
      v35 = *(void (**)(uint64_t))(v27 + 8);
      v36 = v25;
      goto LABEL_33;
    case 7u:
      v37 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v37);
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
        v72 = type metadata accessor for ConditionDetailMapViewModel(0);
        v146 = v25 + *(int *)(v72 + 20);
        sub_1000992C4();
        sub_1000C092C();
        v73(v146);
        v144 = v72;
        v74 = v25 + *(int *)(v72 + 24);
        v147 = (int *)type metadata accessor for WeatherData(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v74, 1, (uint64_t)v147))
        {
          sub_1000B3160();
          v142 = v74 + v147[5];
          v143 = v74;
          v75 = type metadata accessor for Locale(0);
          if (!sub_1000D01AC(v142))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v142, v75);
          v140 = v143 + v147[6];
          type metadata accessor for WeatherDataModel(0);
          sub_1000C092C();
          v76(v140);
          v77 = sub_1000BA294(&qword_100BC3348);
          v78 = sub_1000C4A70(v77);
          if (!(_DWORD)v78)
            sub_1000C3BB0(v78, v79, v80, v81, v82, v83, v84, v85, v138, (uint64_t)v139, v140, v143, v144, (uint64_t)v147, v150);
          v86 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
          v87 = sub_1000D9E94(v86);
          if (v87 == 1)
          {
            v106 = type metadata accessor for WeatherStatisticsModel(0);
            sub_100094FE8(v106);
          }
          else if (!v87)
          {
            sub_1000B3160();
          }
          v107 = v143 + v147[9];
          v108 = type metadata accessor for WeatherDataOverrides(0);
          v149 = v107;
          v109 = v107;
          v110 = v108;
          if (!_s7Weather24LocationCompositionStateOwet_0(v109, 1, v108))
          {
            if (!sub_10009D53C(v149))
              v150(v149, v13);
            v111 = sub_10009D53C(v149 + *(int *)(v110 + 20));
            if (!(_DWORD)v111)
              sub_1000C3BB0(v111, v112, v113, v114, v115, v116, v117, v118, v138, (uint64_t)v139, v140, v143, v144, v149, v150);
          }
        }
        sub_1000BA548(v25 + *(int *)(v144 + 28));
        type metadata accessor for WeatherMapOverlayKind(0);
LABEL_98:
        v36 = sub_1000E7C68();
LABEL_33:
        v35(v36);
      }
      else if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
        v28 = *(_QWORD *)(v25 + 16);
LABEL_37:
        swift_bridgeObjectRelease(v28);
      }
LABEL_38:
      v39 = (uint64_t)&v21[v22[8]];
      if (!sub_1000BD480(v39))
      {
        switch(swift_getEnumCaseMultiPayload(v39, v26))
        {
          case 0u:
            v40 = *(_QWORD *)(v151 - 8);
            goto LABEL_58;
          case 1u:
            v41 = *(_QWORD *)(v39 + 8);
            goto LABEL_63;
          case 2u:
            v42 = type metadata accessor for AttributedString(0);
            goto LABEL_57;
          case 3u:
            v42 = sub_1000BA294(&qword_100BD30F8);
            goto LABEL_57;
          case 4u:
            v43 = *(_QWORD *)(v39 + 8);
            if (v43)
            {
              swift_bridgeObjectRelease(v43);
              swift_bridgeObjectRelease(*(_QWORD *)(v39 + 24));
            }
            v44 = v39 + *(int *)(sub_1000C1AEC() + 20);
            v45 = sub_1000C21E4();
            if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
            {
              swift_bridgeObjectRelease(*(_QWORD *)(v44 + 8));
              v46 = (int *)sub_10004A364();
              v47 = v44 + v46[5];
              v48 = sub_10009896C();
              if (!sub_1000952CC(v47))
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v47, v48);
              v49 = sub_1000BA548(v44 + v46[6]);
              v50 = *(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v48 - 8) + 8);
              v50(v44 + v46[7], v48, v49);
              v51 = v44 + v46[8];
              if (!sub_1000952CC(v51))
                ((void (*)(uint64_t, uint64_t))v50)(v51, v48);
            }
            v52 = sub_1000D0A10();
            if (sub_1000C4A70(v52))
              break;
            sub_10009896C();
            goto LABEL_106;
          case 5u:
            if (*(_QWORD *)(v39 + 24))
            {
              sub_1000D31B4(*(_QWORD *)v39, *(_QWORD *)(v39 + 8), *(_BYTE *)(v39 + 16));
              swift_bridgeObjectRelease(*(_QWORD *)(v39 + 24));
            }
            sub_1002387C0(*(_QWORD *)(v39 + 32), *(_QWORD *)(v39 + 40), *(_QWORD *)(v39 + 48), *(_QWORD *)(v39 + 56), *(_QWORD *)(v39 + 64), *(_QWORD *)(v39 + 72), *(_QWORD *)(v39 + 80), *(unsigned __int8 *)(v39 + 88), *(_BYTE *)(v39 + 89));
            break;
          case 6u:
            v42 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
LABEL_57:
            v40 = *(_QWORD *)(v42 - 8);
LABEL_58:
            v53 = *(void (**)(uint64_t))(v40 + 8);
            v54 = v39;
            goto LABEL_59;
          case 7u:
            v55 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            v56 = swift_getEnumCaseMultiPayload(v39, v55);
            if (v56 == 1)
            {
              swift_bridgeObjectRelease(*(_QWORD *)(v39 + 8));
              v88 = type metadata accessor for ConditionDetailMapViewModel(0);
              v89 = sub_1000992C4();
              sub_100094FE8(v89);
              v90 = v39 + *(int *)(v88 + 24);
              v91 = type metadata accessor for WeatherData(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v90, 1, v91))
              {
                v152 = v88;
                swift_bridgeObjectRelease(*(_QWORD *)(v90 + 8));
                v92 = v90 + *(int *)(v91 + 20);
                v93 = type metadata accessor for Locale(0);
                v148 = v92;
                if (!sub_1000D01AC(v92))
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 8))(v92, v93);
                v94 = type metadata accessor for WeatherDataModel(0);
                sub_100094FE8(v94);
                v95 = sub_1000BA294(&qword_100BC3348);
                v96 = sub_1000C4A70(v95);
                if (!(_DWORD)v96)
                  sub_1000C3BB0(v96, v97, v98, v99, v100, v101, v102, v103, v138, (uint64_t)v139, v140, v143, v144, v92, v150);
                v104 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                v105 = sub_1000D9E94(v104);
                v88 = v152;
                if (v105 == 1)
                {
                  v119 = type metadata accessor for WeatherStatisticsModel(0);
                  sub_100094FE8(v119);
                }
                else if (!v105)
                {
                  sub_1000B3160();
                }
                v120 = v90 + *(int *)(v91 + 36);
                v121 = type metadata accessor for WeatherDataOverrides(0);
                if (!sub_1000BD480(v120))
                {
                  v122 = sub_10009D53C(v120);
                  if (!(_DWORD)v122)
                    sub_1000C3BB0(v122, v123, v124, v125, v126, v127, v128, v129, v138, (uint64_t)v139, v140, v143, v144, v148, v150);
                  v130 = sub_10009D53C(v120 + *(int *)(v121 + 20));
                  if (!(_DWORD)v130)
                    sub_1000C3BB0(v130, v131, v132, v133, v134, v135, v136, v137, v138, (uint64_t)v139, v140, v143, v144, v148, v150);
                }
              }
              sub_1000BA548(v39 + *(int *)(v88 + 28));
              type metadata accessor for WeatherMapOverlayKind(0);
LABEL_106:
              v54 = sub_1000E7C68();
LABEL_59:
              v53(v54);
            }
            else if (!v56)
            {
              swift_bridgeObjectRelease(*(_QWORD *)(v39 + 8));
              v41 = *(_QWORD *)(v39 + 16);
LABEL_63:
              swift_bridgeObjectRelease(v41);
            }
            break;
          default:
            break;
        }
      }
      swift_bridgeObjectRelease(*(_QWORD *)&v8[v11[12]]);
      v57 = (uint64_t)&v8[v11[13]];
      v58 = sub_1000C1AEC();
      if (!sub_1000952CC(v57))
      {
        v59 = *(_QWORD *)(v57 + 8);
        if (v59)
        {
          swift_bridgeObjectRelease(v59);
          swift_bridgeObjectRelease(*(_QWORD *)(v57 + 24));
        }
        v60 = v57 + *(int *)(v58 + 20);
        v61 = sub_1000C21E4();
        if (sub_1000D9E94(v61) == 1)
        {
          sub_1000B3160();
          v62 = (int *)sub_10004A364();
          v63 = v60 + v62[5];
          v64 = sub_10009896C();
          if (!sub_1000BEE54(v63))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v63, v64);
          v65 = sub_1000BA548(v60 + v62[6]);
          v66 = *(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v64 - 8) + 8);
          v66(v60 + v62[7], v64, v65);
          v67 = v60 + v62[8];
          if (!sub_1000BEE54(v67))
            ((void (*)(uint64_t, uint64_t))v66)(v67, v64);
        }
        v68 = sub_1000D0A10();
        if (!sub_1000C4A70(v68))
        {
          v69 = sub_10009896C();
          sub_100094FE8(v69);
        }
      }
      v70 = sub_1000992C4();
      sub_1000B2568(v70);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)v3 + v1[8]));
      sub_1000C2470(v1[9]);
      sub_1000C2470(v1[10]);
      sub_1000C2470(v1[11]);
      sub_1000C2470(v1[12]);
      sub_1000C2470(v1[13]);
      sub_1000C2470(v1[14]);
      sub_1000C2470(v1[15]);
      sub_1000BA548((uint64_t)v3 + v1[16]);
      return swift_deallocObject(v156, v154 + v153, v155 | 7);
    default:
      goto LABEL_38;
  }
}

uint64_t sub_10010659C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001065C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000992C4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100106624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000BAFA0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_unknownObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001066A8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1001066EC()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10008900C();
  sub_1000CDCDC();
  sub_1000F3FBC();
  v1 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v1) == 1)
  {
    sub_10009E908();
    v2 = sub_1000C1D78();
    sub_1000987E0(v2);
  }
  else
  {
    sub_1000B4394();
  }
  sub_100098E88();
  v3 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v3) == 1)
  {
    v4 = sub_10009EE9C();
    sub_1000987E0(v4);
  }
  else
  {
    sub_1000B4394();
  }
  sub_10011E038();
  v5 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v5) == 1)
  {
    v6 = sub_1000F44BC();
    if (!sub_1000BC04C(v6))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BB004();
  sub_1000DAA48(v0[16]);
  sub_1000CFDC8();
  v7 = sub_1000C6034();
  sub_1000989A0(v7);
  sub_1000DAA48(v0[23]);
  sub_1000CCE9C();
  sub_1000D9F14();
  sub_1000DAA48(v0[28]);
  v8 = sub_1000BD3C8();
  return sub_1000B4380(v8, v9, v10);
}

uint64_t sub_1001067D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_1000CEE98(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_QWORD *)(v0 + v4 + 32), *(_QWORD *)(v0 + v4 + 40), *(_QWORD *)(v0 + v4 + 48), *(_QWORD *)(v0 + v4 + 56), *(_QWORD *)(v0 + v4 + 64), *(_BYTE *)(v0 + v4 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 80));
  v6 = sub_100098AA0();
  sub_1000987E0(v6);
  swift_release(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[9]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (_QWORD *)(v0 + v4 + v1[10]);
  v9 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for LayoutDirection(0);
    sub_1000987E0(v10);
  }
  else
  {
    swift_release(*v8);
  }
  swift_release(*(_QWORD *)(v0 + v4 + v1[11]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001068F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  double v23;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for DetailContainerView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  v12 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4 + v9, v12);
  swift_release(*(_QWORD *)(v4 + v9));
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*(_QWORD *)(v11 + 8));
    v14 = v11 + *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    type metadata accessor for PresentationMode(0);
    sub_1000C092C();
    v15(v14);
  }
  v16 = v8 | 7;
  v17 = v9 + v10;
  v18 = v11 + v6[9];
  v19 = type metadata accessor for DetailType(0);
  sub_10009BF1C(v19);
  v20 = v18 + *(int *)(type metadata accessor for DetailViewVisibilityTrackerModel(0) + 20);
  type metadata accessor for Location(0);
  sub_1000C092C();
  v21(v20);
  v22 = type metadata accessor for DetailViewOrigin(0);
  sub_10009BF1C(v22);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v11 + v6[10]));
  sub_1000BAA84(v6[11]);
  sub_1000BAA84(v6[12]);
  v23 = sub_1000BAA84(v6[14]);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v5 - 8) + 8))(v11 + v6[16], v5, v23);
  return swift_deallocObject(v4, v17, v16);
}

uint64_t sub_100106A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t active;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v1 = sub_1000C3D38();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_1000B15F8(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4 + 16));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  swift_bridgeObjectRelease(v6[7]);
  swift_bridgeObjectRelease(v6[8]);
  swift_bridgeObjectRelease(v6[9]);
  swift_bridgeObjectRelease(v6[10]);
  sub_1000D1900();
  swift_bridgeObjectRelease(v6[17]);
  swift_bridgeObjectRelease(v6[19]);
  v7 = (int *)sub_1000E7200();
  v8 = (uint64_t)v6 + v7[12];
  type metadata accessor for Date(0);
  sub_1000C60B8(v8);
  v9 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  sub_1000BA548(v8 + v9[6]);
  sub_1000BA548(v8 + v9[7]);
  sub_1000BA548(v8 + v9[8]);
  v10 = (uint64_t)v6 + v7[13];
  sub_1000C60B8(v10);
  sub_1000BA548(v10 + v9[6]);
  sub_1000BA548(v10 + v9[7]);
  sub_1000BA548(v10 + v9[8]);
  v11 = (_QWORD *)((char *)v6 + v7[14]);
  v12 = type metadata accessor for DetailHeroChartLollipopModel(0);
  if (sub_1000952AC(v12) == 1)
  {
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    sub_1000C60B8((uint64_t)v11 + *(int *)(active + 20));
    v11 = (_QWORD *)((char *)v11 + *(int *)(active + 24));
  }
  v14 = type metadata accessor for LollipopDetailViewModel(0);
  v15 = sub_1000952AC(v14);
  switch(v15)
  {
    case 2:
      swift_bridgeObjectRelease(v11[1]);
      v17 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v18 = v0;
      v19 = v5;
      v20 = (char *)v11 + v17[5];
      v21 = type metadata accessor for AttributedString(0);
      v22 = v20;
      v5 = v19;
      v0 = v18;
      v4 = (v3 + 16) & ~v3;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v22, v21);
      sub_1000BA548((uint64_t)v11 + v17[6]);
      sub_1000BA548((uint64_t)v11 + v17[7]);
      sub_1000BA548((uint64_t)v11 + v17[8]);
      sub_1000BA548((uint64_t)v11 + v17[9]);
      v16 = (_QWORD *)((char *)v11 + v17[10] + 8);
      goto LABEL_9;
    case 1:
      swift_bridgeObjectRelease(v11[1]);
      swift_bridgeObjectRelease(v11[3]);
      swift_bridgeObjectRelease(v11[5]);
      v16 = v11 + 7;
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease(v11[1]);
      swift_bridgeObjectRelease(v11[3]);
      v16 = v11 + 5;
LABEL_9:
      swift_bridgeObjectRelease(*v16);
      break;
  }
  sub_1000C60B8((uint64_t)v6 + v7[15]);
  sub_1000C60B8((uint64_t)v6 + v7[16]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100106D0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100106D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for SlowDeviceGridView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  swift_unknownObjectRelease(*(_QWORD *)(v4 + v9));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12 + v6[9], v5);
  swift_release(*(_QWORD *)(v12 + v6[10] + 72));
  v13 = v12 + v6[11];
  sub_1000CEE98(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), *(_BYTE *)(v13 + 72));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100106E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for ChartView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (int *)sub_1000995F0();
  v8 = sub_1000D0DA4();
  v9 = type metadata accessor for ChartKind(v8);
  sub_1000B2568(v9);
  sub_1000DAFCC(v7[6]);
  v10 = sub_1000D0DA4();
  v11 = type metadata accessor for DetailChartExtrema(v10);
  sub_1000B2568(v11);
  sub_1000DAFCC(v7[8]);
  sub_1000DAFCC(v7[9]);
  sub_1000D1254(v0 + v4 + v7[11]);
  sub_1000BA294(&qword_100BCB978);
  v12 = sub_100098778();
  if (!sub_1000B4674())
    sub_1000B4684();
  v13 = (_QWORD *)(v6 + v7[14]);
  v14 = sub_1000BA294(&qword_100BCB988);
  if (!sub_1000C24F4(v14))
  {
    swift_release(*v13);
    if (!sub_1000B4674())
      sub_1000B4684();
  }
  v15 = sub_1000CF8BC();
  sub_1000989A0(v15);
  sub_1000DAFCC(v7[17]);
  sub_1000BC644(v6 + v7[18]);
  sub_1000BC644(v6 + v7[19]);
  sub_1000BC644(v6 + v7[20]);
  v16 = sub_1000D0DA4();
  v17 = type metadata accessor for DetailChartDataElement(v16);
  if (!sub_10007A06C(v12))
    sub_1000BDD1C(v12, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8));
  sub_1000DAFCC(v7[22]);
  v18 = sub_1000D0DA4();
  v19 = type metadata accessor for ChartPeakMarkStyle(v18);
  sub_1000B2568(v19);
  sub_1000DAFCC(v7[25]);
  v20 = sub_1000D0DA4();
  v21 = type metadata accessor for ChartViewModelInterpolationMode(v20);
  sub_1000B2568(v21);
  v22 = sub_1000D0DA4();
  v23 = type metadata accessor for ChartPastDataTreatment(v22);
  sub_1000B2568(v23);
  sub_1000BA548(v6 + v7[28]);
  sub_1000BA548(v6 + v7[29]);
  sub_1000BA548(v6 + v7[30]);
  sub_1000BA548(v6 + v7[31]);
  sub_1000BA548(v6 + v7[32]);
  sub_10009DAA8(v6 + v7[33]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v6 + *(int *)(v1 + 28)));
  sub_1000B15F8(*(_QWORD *)(v6 + *(int *)(v1 + 32)), *(_BYTE *)(v6 + *(int *)(v1 + 32) + 8));
  v24 = sub_1000BA294(&qword_100BC68C8);
  if (sub_100098814(v24) == 1)
  {
    v25 = sub_1000BF1F0();
    sub_1000987E0(v25);
  }
  else
  {
    sub_1000B4394();
  }
  v26 = sub_1000BA294(&qword_100BC2908);
  if (sub_100098814(v26) == 1)
  {
    v27 = sub_1000E7C40();
    sub_1000987E0(v27);
  }
  else
  {
    sub_1000B4394();
  }
  v28 = sub_1000BCF7C();
  sub_10003BC44(v28);
  return sub_1000BBBC0(v0, v4 + v5, v3 | 7);
}

void sub_1001070C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v26 = v0[2];
  v2 = v26;
  v27 = v1;
  v28 = v3;
  v29 = v4;
  v5 = (int *)type metadata accessor for AnimatableTabView(0, (uint64_t)&v26);
  sub_1000D0A64();
  v7 = (char *)v0 + v6;
  sub_1000EB098();
  sub_1000DAD14();
  v8 = sub_100110274();
  sub_1000B48E0((uint64_t)&v7[*(int *)(v8 + 32)]);
  sub_1000B48E0((uint64_t)&v7[v5[13]]);
  v9 = sub_100099644();
  sub_1000C4CCC(v9);
  sub_1000C6F00(v5[14]);
  sub_10009C9A4(v5[15]);
  sub_10009C9A4(v5[16]);
  sub_1000B3004(v5[17]);
  v10 = sub_1000B3004(v5[18]);
  v11 = &v7[v5[19]];
  v26 = v2;
  v27 = v1;
  v28 = v3;
  v29 = v4;
  if (!sub_1000BB234(v10, (uint64_t)&v26))
  {
    sub_1000C6150();
    v26 = v2;
    v27 = v1;
    v28 = v3;
    v29 = v24;
    v12 = type metadata accessor for Page(0, (uint64_t)&v26);
    v13 = sub_1000B48E0((uint64_t)&v11[*(int *)(v12 + 52)]);
    sub_1000CFE8C(v13, v14, v15, v16, v17, v18, v19, v20, v23, v24, v25);
    sub_1000B48E0(v4 + *(int *)(v12 + 52));
  }
  v21 = sub_1000CD8E0();
  v22 = sub_1000C3DC4(v21);
  sub_1000C4CCC(v22);
  sub_1000B3004(v5[20]);
  sub_1000BC760();
  sub_1000BDA2C();
}

uint64_t sub_1001071EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)sub_1000C617C();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4));
  v6 = sub_10009D6D0();
  sub_1000B2568(v6);
  v7 = sub_1000B4C0C();
  sub_1000B2568(v7);
  v8 = v0 + v4 + v1[7];
  v9 = sub_100098778();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v0 + v4 + v1[8], v9);
  v11 = (_QWORD *)(v0 + v4 + v1[10]);
  v12 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for LayoutDirection(0);
    sub_10003BC44(v13);
  }
  else
  {
    swift_release(*v11);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001072EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)sub_1000C3E04();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_1000B15F8(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = v7 + v1[6];
  v9 = sub_100098778();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[7], v9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v7 + v1[10]));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001073A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000BC7E0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  v6 = v0 + v4 + *(int *)(v1 + 28);
  v7 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = sub_1000BA294(&qword_100BDD670);
  swift_release(*(_QWORD *)(v6 + *(int *)(v8 + 28)));
  swift_release(*(_QWORD *)(v0 + v4 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100107474()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1001074A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v4 = v0;
  v5 = (int *)sub_1000BF234();
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 16) & ~v7;
  v29 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v8;
  v10 = type metadata accessor for Location.Identifier(0);
  sub_1000BDB14(v10);
  v11 = sub_1000DC250();
  if (!sub_1000BCFF8(v11))
    sub_10011E7F8();
  v12 = (_QWORD *)(v9 + v1[6]);
  sub_1000B3160();
  sub_1000FC684();
  swift_bridgeObjectRelease(v12[8]);
  swift_bridgeObjectRelease(v12[10]);
  swift_bridgeObjectRelease(v12[12]);
  swift_bridgeObjectRelease(v12[14]);
  swift_bridgeObjectRelease(v12[16]);
  swift_bridgeObjectRelease(v12[19]);
  sub_100094FCC(v1[7]);
  sub_1000ED018();
  v13 = sub_1000ED300();
  if (!sub_10009D53C(v2))
  {
    v28 = v4;
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
    v14 = sub_1000F426C();
    if (!sub_1000E7864(v14))
      sub_1000890F4();
    v15 = v2 + *(int *)(v13 + 36);
    sub_1000B3160();
    v16 = type metadata accessor for LearnMoreAttributorViewModel(0);
    v17 = v15 + *(int *)(v16 + 24);
    if (!sub_1000952CC(v17))
      sub_100098B40(v17, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8));
    sub_1000BA548(v15 + *(int *)(v16 + 28));
    sub_100110750();
    v18 = sub_1000BE7C8();
    v4 = v28;
    if (!sub_1000E7864(v18))
      sub_1000890F4();
    v19 = sub_10011DD00();
    v8 = (v7 + 16) & ~v7;
    if (!sub_10009D53C(v2))
    {
      sub_1000992C4();
      v20 = sub_1000FD95C();
      v8 = (v7 + 16) & ~v7;
      v21(v20);
      sub_100098B40(v2 + *(int *)(v19 + 24), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8));
    }
  }
  sub_1000BECF0();
  v22 = v9 + v1[19];
  v23 = sub_100098778();
  sub_1000989A0(v23);
  v24 = sub_1000ED46C();
  if (!sub_10009D53C(v22))
    sub_1000BE774(v22, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8));
  sub_100094FCC(v1[22]);
  v25 = sub_1000FC508();
  sub_1000B2568(v25);
  sub_1000DC924(v5[5]);
  sub_1000DC924(v5[6]);
  sub_1000DC924(v5[7]);
  sub_10011AC04();
  sub_100089170();
  v26 = sub_1000CE60C();
  sub_1000B2568(v26);
  sub_1000DC924(v5[12]);
  sub_1000C0FDC();
  return swift_deallocObject(v4, v8 + v29, v7 | 7);
}

uint64_t sub_1001076DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v22;
  uint64_t v23;

  v1 = sub_1000C4A10();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_1000DD1A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for DetailViewOriginationData(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v13 + v9 + 1) & ~v13;
  v22 = v14 + *(_QWORD *)(v12 + 64);
  v23 = v11;
  v15 = v3 | v8 | v13 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  type metadata accessor for DetailType(0);
  sub_1000C092C();
  v16(v0 + v9);
  v17 = v0 + v9 + *(int *)(v6 + 20);
  type metadata accessor for Location(0);
  sub_1000C092C();
  v18(v17);
  v19 = v0 + v9 + *(int *)(v6 + 24);
  type metadata accessor for DetailViewOrigin(0);
  sub_1000C092C();
  v20(v19);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v14, v23);
  return swift_deallocObject(v0, v22, v15);
}

uint64_t sub_10010780C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100107838()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(_QWORD *);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int *v20;
  char *v21;
  void (*v22)(char *);
  uint64_t v23;

  sub_1000986AC();
  v1 = (int *)sub_1000DA1D0();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = sub_100098778();
  if (!sub_1000B4560(v0 + v4))
    sub_100098748(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8));
  v8 = sub_1000BA294(&qword_100BDD670);
  swift_release(*(_QWORD *)(v6 + *(int *)(v8 + 28)));
  v9 = v6 + v1[5];
  sub_1000891C8();
  swift_release(*(_QWORD *)(v9 + 8));
  v10 = v6 + v1[6];
  if (!sub_1000B4560(v10))
    sub_100098748(v10, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8));
  swift_release(*(_QWORD *)(v10 + *(int *)(v8 + 28)));
  swift_release(*(_QWORD *)(v6 + v1[7] + 8));
  v11 = (_QWORD *)(v6 + v1[8]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = (uint64_t)v11 + *(int *)(sub_1000BA294(&qword_100C02ED0) + 32);
  v13 = sub_1000BD520();
  if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
    sub_100098B40(v12, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8));
  v14 = (_QWORD *)(v6 + v1[9]);
  v15 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    type metadata accessor for LayoutDirection(0);
    sub_1000C092C();
    v16(v14);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = v3 | 7;
  v18 = v4 + v5;

  v19 = (_QWORD *)(v6 + v1[11]);
  swift_bridgeObjectRelease(*v19);
  v20 = (int *)sub_1000C0B8C();
  sub_100098B40((uint64_t)v19 + v20[5], *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8));
  v21 = (char *)v19 + v20[6];
  type metadata accessor for Location(0);
  sub_1000C092C();
  v22(v21);
  sub_1000C6F00(v20[7]);
  sub_1000C6F00(v20[8]);
  sub_1000C6F00(v20[9]);
  sub_1000C6F00(v20[10]);
  sub_100098748((uint64_t)v19 + v20[11], *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8));
  sub_1000C6F00(v20[12]);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12]));
  swift_release(*(_QWORD *)(v6 + v1[15]));
  v23 = sub_1000D95F0();
  sub_10003BC44(v23);
  return swift_deallocObject(v0, v18, v17);
}

uint64_t sub_100107A88()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  char *v44;
  __n128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  _QWORD *v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v98)(char *);
  uint64_t v99;
  void (*v100)(uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;

  v1 = (int *)sub_10009DF90();
  v2 = *((_QWORD *)v1 - 1);
  v103 = *(_QWORD *)(v2 + 64);
  v104 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v105 = *(unsigned __int8 *)(v2 + 80);
  v3 = v0 + v104;
  v4 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v104, v4);
  swift_release(*(_QWORD *)(v0 + v104));
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*(_QWORD *)(v3 + 8));
    sub_1000BA294(&qword_100BC6510);
    v6 = type metadata accessor for PresentationMode(0);
    sub_10003BC44(v6);
  }
  v7 = sub_1000BE878();
  sub_10003BC44(v7);
  v8 = (uint64_t *)(v3 + v1[7]);
  v9 = sub_10003BDE0();
  v10 = sub_1000952AC(v9);
  v106 = v0;
  v107 = v1;
  if (v10 == 2)
  {
    v12 = v8[1];
    goto LABEL_9;
  }
  if (v10 == 1)
  {
    swift_bridgeObjectRelease(v8[1]);
    v13 = sub_1000C2148();
    v14 = (uint64_t)v8 + *(int *)(v13 + 20);
    type metadata accessor for Locale(0);
    if (!sub_10007A06C(v14))
      sub_10011DD6C();
    v15 = sub_1000B2F08();
    sub_10003BC44(v15);
    v16 = sub_1000BA294(&qword_100BC3348);
    if (!sub_10007A0D8(v16))
    {
      v17 = sub_100098778();
      sub_1000989A0(v17);
    }
    v18 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v19 = sub_100094FAC(v18);
    if (v19 == 1)
    {
      v21 = type metadata accessor for WeatherStatisticsModel(0);
      sub_1000989A0(v21);
    }
    else if (!v19)
    {
      sub_1000B3B94();
    }
    v22 = (uint64_t)v8 + *(int *)(v13 + 36);
    v23 = type metadata accessor for WeatherDataOverrides(0);
    if (!sub_10007A06C(v22))
    {
      sub_100098778();
      if (!sub_10009D53C(v22))
        sub_1000C0210();
      if (!sub_10009D53C(v22 + *(int *)(v23 + 20)))
        sub_1000F4020();
    }
    v101 = sub_1000BA294(&qword_100BC3358);
    v24 = (char *)v8 + *(int *)(v101 + 48);
    v25 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    v26 = (int *)sub_1000BE800();
    swift_bridgeObjectRelease(*(_QWORD *)&v24[v26[5]]);
    v27 = &v24[v26[6]];
    swift_bridgeObjectRelease(*((_QWORD *)v27 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v27 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v27 + 5));
    v28 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v29 = (uint64_t)&v27[*(int *)(v28 + 28)];
    type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    if (!sub_100086130(v29))
    {
      sub_1000B3B94();
      v30 = type metadata accessor for TemperatureScaleConfiguration(0);
      sub_10003BC44(v30);
      v31 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      sub_1000C613C(*(int *)(v31 + 32));
    }
    swift_bridgeObjectRelease(*(_QWORD *)&v27[*(int *)(v28 + 32) + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v24[v26[7]]);
    type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
    v32 = sub_10004A428();
    if (!sub_1000ED4B8(v32))
      sub_1000CFA3C();
    v33 = &v24[v26[8]];
    sub_1000CDC68();
    sub_1000C6E50();
    sub_1000C22D8();
    sub_1000DAD58();
    v34 = &v33[*(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32)];
    v35 = sub_100098778();
    v98 = *(void (**)(char *))(*(_QWORD *)(v35 - 8) + 8);
    v99 = v35;
    v98(v34);
    v36 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v37 = (uint64_t)&v34[*(int *)(v36 + 20)];
    v38 = type metadata accessor for Elevation(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
      sub_1000891D0();
    v39 = (uint64_t)&v34[*(int *)(v36 + 24)];
    v40 = type metadata accessor for BackgroundMoonData(0);
    if (!sub_10007A06C(v39))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
    sub_1000CDC68();
    sub_1000C6E50();
    sub_1000C22D8();
    sub_1000DAD58();
    sub_1000FDC10();
    sub_10007A0D0();
    sub_10009EF40();
    sub_1000CFA3C();
    v41 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
    sub_1000C613C(*(int *)(v41 + 20));
    sub_1000CDC68();
    sub_1000C6E50();
    sub_1000C22D8();
    v42 = type metadata accessor for PressureTrend(0);
    sub_10003BC44(v42);
    v43 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    sub_1000C613C(v43[5]);
    sub_1000C613C(v43[6]);
    sub_1000C613C(v43[7]);
    sub_1000C613C(v43[9]);
    v44 = &v24[v26[13]];
    sub_1000CDC68();
    sub_1000C6E50();
    sub_1000C22D8();
    sub_1000DAD58();
    sub_1000FDC10();
    sub_10007A0D0();
    sub_10009EF40();
    swift_bridgeObjectRelease(*((_QWORD *)v44 + 15));
    swift_bridgeObjectRelease(*((_QWORD *)v44 + 17));
    swift_bridgeObjectRelease(*((_QWORD *)v44 + 19));
    swift_bridgeObjectRelease(*((_QWORD *)v44 + 21));
    swift_bridgeObjectRelease(*((_QWORD *)v44 + 23));
    swift_bridgeObjectRelease(*((_QWORD *)v44 + 25));
    v45 = swift_bridgeObjectRelease(*((_QWORD *)v44 + 28));
    v46 = &v24[v26[14]];
    ((void (*)(char *, uint64_t, __n128))v98)(v46, v99, v45);
    v47 = sub_1000EFA9C(*(int *)(v36 + 20));
    if (!_s7Weather24LocationCompositionStateOwet_0(v47, v48, v38))
      sub_1000891D0();
    if (!sub_10007A06C((uint64_t)&v46[*(int *)(v36 + 24)]))
      sub_10011DD6C();
    sub_1000CDC68();
    sub_1000C6E50();
    sub_1000C22D8();
    sub_1000DAD58();
    sub_1000FDC10();
    sub_10007A0D0();
    sub_10009EF40();
    v49 = (uint64_t *)((char *)v8 + *(int *)(v101 + 64));
    v50 = sub_1000AE9DC();
    if (sub_1000D9E94(v50) == 1)
    {
      swift_bridgeObjectRelease(*v49);
    }
    else
    {
      v51 = sub_10009E6C0();
      sub_100094FE8(v51);
    }
    v1 = v107;
  }
  else
  {
    if (v10)
      goto LABEL_40;
    v11 = sub_1000AE9DC();
    if (sub_1000952AC(v11) == 1)
    {
      v12 = *v8;
LABEL_9:
      swift_bridgeObjectRelease(v12);
      goto LABEL_40;
    }
    v20 = sub_10009E6C0();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v8, v20);
  }
LABEL_40:
  v52 = v3 + v1[8];
  swift_bridgeObjectRelease(*(_QWORD *)(v52 + 8));
  v53 = (int *)sub_1000C2148();
  v54 = v52 + v53[5];
  v55 = type metadata accessor for Locale(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v54, 1, v55))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
  v56 = v52 + v53[6];
  v57 = sub_1000B2F08();
  v100 = *(void (**)(uint64_t))(*(_QWORD *)(v57 - 8) + 8);
  v102 = v57;
  v100(v56);
  v58 = sub_1000BA294(&qword_100BC3348);
  if (!sub_10007A0D8(v58))
  {
    v59 = sub_100098778();
    sub_1000989A0(v59);
  }
  v60 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v61 = sub_100094FAC(v60);
  if (v61 == 1)
  {
    v62 = type metadata accessor for WeatherStatisticsModel(0);
    sub_1000989A0(v62);
  }
  else if (!v61)
  {
    sub_1000B3B94();
  }
  v63 = v52 + v53[9];
  v64 = type metadata accessor for WeatherDataOverrides(0);
  if (!sub_10007A06C(v63))
  {
    sub_100098778();
    if (!sub_10009D53C(v63))
      sub_1000C0210();
    if (!sub_10009D53C(v63 + *(int *)(v64 + 20)))
      sub_1000F4020();
  }
  v65 = v3 + v1[9];
  v66 = type metadata accessor for UUID(0);
  sub_1000989A0(v66);
  v67 = (int *)sub_1000BE800();
  swift_bridgeObjectRelease(*(_QWORD *)(v65 + v67[5]));
  v68 = (_QWORD *)(v65 + v67[6]);
  swift_bridgeObjectRelease(v68[1]);
  swift_bridgeObjectRelease(v68[3]);
  swift_bridgeObjectRelease(v68[5]);
  v69 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v70 = (uint64_t)v68 + *(int *)(v69 + 28);
  type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (!sub_100086130(v70))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v70 + 8));
    v71 = type metadata accessor for TemperatureScaleConfiguration(0);
    sub_10003BC44(v71);
    v72 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    sub_1000C613C(*(int *)(v72 + 32));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v68 + *(int *)(v69 + 32) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v65 + v67[7]));
  type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
  v73 = sub_10004A428();
  if (!sub_1000ED4B8(v73))
    sub_1000CFA3C();
  v74 = v65 + v67[8];
  sub_1000CDC68();
  sub_1000C6E50();
  sub_1000C22D8();
  sub_1000DAD58();
  v75 = v74 + *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v76 = sub_100098778();
  v77 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8);
  v77(v75, v76);
  v78 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v79 = v75 + *(int *)(v78 + 20);
  v80 = type metadata accessor for Elevation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v79, 1, v80))
    sub_1000F3EC8();
  v81 = v75 + *(int *)(v78 + 24);
  v82 = type metadata accessor for BackgroundMoonData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v81, 1, v82))
    sub_10009BDCC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8));
  sub_1000CDC68();
  sub_1000C6E50();
  sub_1000C22D8();
  sub_1000DAD58();
  sub_1000FDC10();
  sub_10007A0D0();
  sub_10009EF40();
  sub_1000CFA3C();
  v83 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  sub_1000C613C(*(int *)(v83 + 20));
  sub_1000CDC68();
  sub_1000C6E50();
  sub_1000C22D8();
  v84 = type metadata accessor for PressureTrend(0);
  sub_10003BC44(v84);
  v85 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  sub_1000C613C(v85[5]);
  sub_1000C613C(v85[6]);
  sub_1000C613C(v85[7]);
  sub_1000C613C(v85[9]);
  v86 = (_QWORD *)(v65 + v67[13]);
  sub_1000CDC68();
  sub_1000C6E50();
  sub_1000C22D8();
  sub_1000DAD58();
  sub_1000FDC10();
  sub_10007A0D0();
  sub_10009EF40();
  swift_bridgeObjectRelease(v86[15]);
  swift_bridgeObjectRelease(v86[17]);
  swift_bridgeObjectRelease(v86[19]);
  swift_bridgeObjectRelease(v86[21]);
  swift_bridgeObjectRelease(v86[23]);
  swift_bridgeObjectRelease(v86[25]);
  v87 = swift_bridgeObjectRelease(v86[28]);
  ((void (*)(uint64_t, uint64_t, __n128))v77)(v65 + v67[14], v76, v87);
  v88 = sub_1000EFA9C(*(int *)(v78 + 20));
  if (!_s7Weather24LocationCompositionStateOwet_0(v88, v89, v80))
    sub_1000F3EC8();
  v90 = sub_1000EFA9C(*(int *)(v78 + 24));
  if (!_s7Weather24LocationCompositionStateOwet_0(v90, v91, v82))
    sub_10009BDCC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8));
  sub_1000CDC68();
  sub_1000C6E50();
  sub_1000C22D8();
  sub_1000DAD58();
  sub_1000FDC10();
  sub_10007A0D0();
  sub_10009EF40();
  v92 = (_QWORD *)(v3 + v107[10]);
  v93 = sub_1000AE9DC();
  if (sub_1000D9E94(v93) == 1)
  {
    swift_bridgeObjectRelease(*v92);
  }
  else
  {
    v94 = sub_10009E6C0();
    sub_100094FE8(v94);
  }
  swift_release(*(_QWORD *)(v3 + v107[11] + 8));
  v95 = v3 + v107[12];
  ((void (*)(uint64_t, uint64_t))v100)(v95, v102);
  v96 = sub_1000BA294(&qword_100C06160);
  swift_release(*(_QWORD *)(v95 + *(int *)(v96 + 28)));
  return swift_deallocObject(v106, v104 + v103, v105 | 7);
}

uint64_t sub_10010846C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)sub_1000C4E8C();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = sub_1000BA294(&qword_100BC4F28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v7);
  swift_release(*(_QWORD *)(v0 + v4));
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*(_QWORD *)(v6 + 8));
    v9 = v6 + *(int *)(sub_1000BA294(&qword_100BC6510) + 32);
    v10 = type metadata accessor for PresentationMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = v3 | 7;
  v12 = v4 + v5;
  v13 = v6 + v1[5];
  v14 = sub_1000BF2C4();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  swift_release(*(_QWORD *)(v6 + v1[6] + 8));
  v16 = v6 + v1[7];
  v15(v16, v14);
  v17 = sub_1000BA294(&qword_100C06D30);
  swift_release(*(_QWORD *)(v16 + *(int *)(v17 + 28)));
  return swift_deallocObject(v0, v12, v11);
}

uint64_t sub_100108594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for LearnMoreAttributorView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (int *)sub_1000B4DE4();
  v8 = v0 + v4 + v7[6];
  v9 = type metadata accessor for URL(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[7] + 8));
  swift_release(*(_QWORD *)(v6 + v7[8]));
  swift_unknownObjectWeakDestroy(v6 + *(int *)(v1 + 20));
  v10 = v6 + *(int *)(v1 + 24);
  sub_1000D31B4(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100108694()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (int *)sub_1000D206C();
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  swift_release(*(_QWORD *)(v0 + v5));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v5 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v5 + 48));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v5 + 88));
  v8 = v0 + v5 + v2[8];
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v9) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    sub_1000B4394();
  }
  v11 = v7 + v2[9];
  v12 = sub_1000BA294((uint64_t *)&unk_100C09CC0);
  if (sub_100098814(v12) == 1)
  {
    v13 = type metadata accessor for LegibilityWeight(0);
    if (!sub_1000BC04C(v13))
      sub_100098748(v11, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  }
  else
  {
    sub_1000B4394();
  }
  v14 = v7 + v2[10];
  v15 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v15) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!sub_1000BC04C(v16))
      sub_100098748(v14, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000B15F8(*(_QWORD *)(v7 + v2[11]), *(_BYTE *)(v7 + v2[11] + 8));
  swift_release(*(_QWORD *)(v7 + v2[14]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v7 + v2[15]));
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

uint64_t sub_10010881C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100108850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000992C4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  v2 = sub_1000DE288();
  return swift_deallocObject(v2, v3, v4);
}

uint64_t sub_1001088A4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (_QWORD *)sub_1000C41A8();
  v3 = *(v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  sub_1000CDE38();
  swift_release(v1[3]);
  swift_unknownObjectRelease(v1[4]);
  swift_unknownObjectRelease(v1[6]);
  v6 = sub_1000CDA5C();
  sub_1000987E0(v6);
  sub_10009D874();
  v7 = sub_1000997A8();
  if (!sub_1000BC04C(v7))
    sub_100098C04();
  v8 = sub_1000BA294(&qword_100C0BFC0);
  sub_1000CDE2C(v8);
  sub_1000C6CD8();
  v9 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v9) == 1)
  {
    type metadata accessor for DisplayMetrics(0);
    v10 = sub_1000C1D78();
    sub_1000987E0(v10);
  }
  else
  {
    sub_1000B4394();
  }
  v11 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!sub_1000BC04C(v12))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000D037C();
  v13 = sub_1000BA294(&qword_100BD4338);
  if (sub_10009DA58(v13) == 1)
  {
    v14 = sub_1000C1158();
    sub_10003BC44(v14);
  }
  else
  {
    swift_release(*v2);
  }
  return sub_1000B4380(v0, ((v4 + 16) & ~v4) + v5, v4 | 7);
}

uint64_t sub_1001089E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_10009D898();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_1000C2034();
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 56));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v7 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v8))
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100108ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000B4E80();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v7 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_1000D1B64();
    if (!sub_1000C1D58(v8))
      sub_1000CCA08();
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100108B6C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 11);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100108BB0(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[3]);
  swift_release(v1[4]);
  swift_release(v1[5]);
  swift_unknownObjectRelease(v1[6]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v1 + 9);
  swift_unknownObjectRelease(v1[14]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v1 + 16);
  swift_bridgeObjectRelease(v1[22]);
  swift_release(v1[23]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100108C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000C4FF0();
  sub_1000B2650();
  v7 = sub_1000BA294(&qword_100BC4F28);
  sub_100098814(v7);
  sub_1000BD298();
  if (v3 == 1)
  {
    swift_release(*(_QWORD *)(v2 + 8));
    sub_1000BA294(&qword_100BC6510);
    v8 = sub_1000BEDD4();
    sub_1000B2568(v8);
  }
  v9 = sub_1000BA294(&qword_100BCB130);
  sub_1000BA9C0(v9);
  v10 = sub_100099928();
  sub_1000BA9C0(v10);
  sub_1000C5EBC();
  sub_1000CD420();
  swift_release(*(_QWORD *)(v0 + 8));
  return sub_1000B4380(v1, v5 + v6, v4 | 7);
}

uint64_t sub_100108CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for WeatherComponentButton(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  sub_1000B15F8(*(_QWORD *)(v4 + v9), *(_BYTE *)(v4 + v9 + 8));
  sub_100098820(v4 + v9 + v6[10], *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8));
  sub_1000C0C0C(v6[11]);
  v11 = v4 + v9 + v6[12];
  sub_1000D31B4(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
  sub_1000C0C0C(v6[13]);
  v12 = v4 + v9 + v6[14];
  v13 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = sub_1000BA294(&qword_100BDD670);
  swift_release(*(_QWORD *)(v12 + *(int *)(v14 + 28)));
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_100108DDC()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000986AC();
  sub_1000C4238();

  sub_1000DABCC();
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
  sub_1000D03E0();
  v7 = sub_1000C68FC();
  sub_1000987E0(v7);
  sub_1000BB830(v0[11]);
  sub_1000C59A8(v0[12]);
  v8 = v6 + v0[13];
  sub_100098778();
  sub_1000DFA84();
  v9 = sub_1000BA294(&qword_100C11218);
  sub_1000CD3F8(v9);
  sub_1000BB830(v0[14]);
  sub_1000C59A8(v0[15]);
  sub_1000BB830(v0[16]);
  sub_1000BB830(v0[17]);
  sub_10009D908();
  swift_release(*(_QWORD *)(v8 + 8));
  sub_1000BA294(&qword_100BF7B00);
  v10 = sub_1000CFF84();
  if (!sub_1000C18DC(v10) && !sub_1000C1198())
    sub_1000DFA84();
  v11 = (_QWORD *)(v6 + v0[19]);
  v12 = sub_1000BA294(&qword_100BC2908);
  if (sub_10009DA58(v12) == 1)
  {
    v13 = type metadata accessor for LayoutDirection(0);
    sub_10003BC44(v13);
  }
  else
  {
    swift_release(*v11);
  }
  return sub_1000BBBC0(v1, v4 + v5, v3 | 7);
}

uint64_t sub_100108EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for TemperatureChartPickerView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = sub_1000C33EC();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v4 + *(int *)(v1 + 20)));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v6))
    v7(v8, v6);
  v9 = sub_1000BA294(&qword_100C15310);
  swift_release(*(_QWORD *)(v8 + *(int *)(v9 + 28)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100108FC4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100108FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t type metadata accessor for AnimatableTabView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AnimatableTabView);
}

uint64_t sub_100109030(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(_DWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v7 + 64) + v12;
  if (v11 >= a2)
  {
    if (v11)
    {
      if (v8 >= v10)
      {
        v10 = *(unsigned int *)(v7 + 84);
      }
      else
      {
        a1 = (v13 + a1) & ~(unint64_t)v12;
        v5 = v6;
      }
      return _s7Weather24LocationCompositionStateOwet_0(a1, v10, v5);
    }
    return 0;
  }
  v14 = *(unsigned __int8 *)(v7 + 80) | v12;
  if ((((((v13 & ~(unint64_t)v12)
         + *(_QWORD *)(v9 + 64)
         + (((v13 & ~(unint64_t)v12) + *(_QWORD *)(v9 + 64) + v14) & ~v14)
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8) & 0xFFFFFFF8) != 0)
    v15 = 2;
  else
    v15 = a2 - v11 + 1;
  if (v15 >= 0x10000)
    v16 = 4;
  else
    v16 = 2;
  if (v15 < 0x100)
    v16 = 1;
  if (v15 >= 2)
    v17 = v16;
  else
    v17 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1001090E8 + 4 * byte_1009B819E[v17]))();
}

uint64_t type metadata accessor for WireframeScrollInterestView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WireframeScrollInterestView);
}

uint64_t type metadata accessor for TransitionContext(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for TransitionContext);
}

uint64_t type metadata accessor for LocationViewerViewState._Storage(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC8B48, (uint64_t)&nominal type descriptor for LocationViewerViewState._Storage);
}

void sub_100109190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v4 = sub_1000BD2A4();
  type metadata accessor for LocationViewerActiveLocationState(v4);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000C24A0();
  __chkstk_darwin(v6);
  sub_10009C838();
  sub_100099904(v1 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, v3);
  sub_100099904(v0 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, v2);
  v7 = sub_1000F0BB4(v3, v2);
  sub_1000B3B44(v2);
  sub_1000B3B44(v3);
  if ((v7 & 1) != 0)
  {
    sub_1000BA538();
    if (v8)
    {
      sub_1000BA538();
      if (v8)
      {
        sub_1000BA538();
        if (v8)
        {
          sub_1000BA538();
          if (v8)
            sub_1000BA538();
        }
      }
    }
  }
  sub_10004A2A0();
}

uint64_t sub_100109284()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 120));
}

uint64_t sub_100109290()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 512);
}

void sub_1001092A4()
{
  sub_1000BF3B4();
}

void sub_1001092AC()
{
  sub_1006AFED0();
}

uint64_t sub_1001092E4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

uint64_t sub_1001092F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 >= 2)
  {
    *(_QWORD *)(a1 + 8) = *v7;
    *(_QWORD *)(a1 + 16) = v8;
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    *v6 = *(_OWORD *)v7;
  }
  v9 = *(int *)(a3 + 24);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  return a1;
}

uint64_t sub_1001093D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  void (*v29)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  BOOL v51;
  BOOL v52;
  char v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v1 = v0;
  v2 = type metadata accessor for Locale.Language(0);
  v60 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  __chkstk_darwin(v2);
  v59 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC39D8);
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContentSizeCategory(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v56 - v15;
  v17 = *(_QWORD *)(v0 + 16);
  v18 = *(_BYTE *)(v1 + 24);
  sub_10008D47C(v17, v18);
  sub_100109D8C();
  v20 = v19;
  sub_1000B15F8(v17, v18);
  if ((v20 & 1) == 0)
    goto LABEL_57;
  v21 = type metadata accessor for LocationHeaderView(0);
  sub_100109D64();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v22 == enum case for ContentSizeCategory.extraSmall(_:)
    || v22 == enum case for ContentSizeCategory.small(_:)
    || v22 == enum case for ContentSizeCategory.medium(_:)
    || v22 == enum case for ContentSizeCategory.large(_:)
    || v22 == enum case for ContentSizeCategory.extraLarge(_:)
    || v22 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v22 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v11 + 8);
    if (v22 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v22 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v22 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v22 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v22 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v29(v16, v10);
LABEL_57:
      v54 = 0;
      return v54 & 1;
    }
    v29(v14, v10);
    v29(v16, v10);
  }
  v34 = v1 + *(int *)(v21 + 32);
  v35 = *(_QWORD *)v34;
  v36 = *(_BYTE *)(v34 + 8);
  sub_10008D47C(*(_QWORD *)v34, v36);
  sub_100109B54();
  v38 = v37;
  v39 = sub_1000B15F8(v35, v36);
  if ((v38 & 1) != 0)
    goto LABEL_57;
  v40 = static Locale.current.getter(v39);
  v41 = v59;
  Locale.language.getter(v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v6, v58);
  Locale.Language.languageCode.getter(v42);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v61);
  v43 = type metadata accessor for Locale.LanguageCode(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v43) == 1)
  {
    sub_100021A14((uint64_t)v9, &qword_100BC39D8);
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v44 = Locale.LanguageCode.identifier.getter();
    v45 = v46;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v9, v43);
  }
  v47 = *(_QWORD *)v1;
  v48 = *(_BYTE *)(v1 + 8);
  sub_10008D47C(v47, v48);
  sub_100109B54();
  v50 = v49;
  sub_1000B15F8(v47, v48);
  if ((v50 & 1) == 0)
  {
    swift_bridgeObjectRelease(v45);
    goto LABEL_55;
  }
  if (!v45)
  {
LABEL_55:
    v54 = 1;
    return v54 & 1;
  }
  v51 = v44 == 29281 && v45 == 0xE200000000000000;
  if (v51
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, 29281, 0xE200000000000000, 0) & 1) != 0
    || (v44 == 26984 ? (v52 = v45 == 0xE200000000000000) : (v52 = 0), v52))
  {
    swift_bridgeObjectRelease(v45);
    goto LABEL_57;
  }
  v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, 26984, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v45);
  v54 = v53 ^ 1;
  return v54 & 1;
}

uint64_t _s7Weather27LocalSearchCompleterManagerC8delegateAA0bcdE8Delegate_pSgvpfi_0()
{
  return 0;
}

unint64_t sub_100109840(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

void sub_100109860(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100037768(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_100109880(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 376), 1, 1, a1);
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 384), 1, 1, *(_QWORD *)(v1 - 528));
}

void sub_1001098C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1001098C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 1088));
}

uint64_t sub_1001098D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 120));
}

void *sub_1001098E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = a1;
  return _Block_copy((const void *)(v2 - 136));
}

uint64_t sub_1001098EC()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 56)));
  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 60)));
}

uint64_t sub_10010990C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_100109918()
{
  return 0;
}

uint64_t sub_100109928(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t sub_100109934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a9 - 8) + 8))();
}

uint64_t destroy for TabViewTransition(_QWORD *a1)
{
  return swift_release(*a1);
}

unint64_t sub_100109950()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 10;
  return sub_1003B8660();
}

uint64_t sub_10010995C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void sub_100109964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 344) = v1;
  *(_QWORD *)(v2 - 336) = v0;
}

uint64_t sub_100109978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 152))(v1, v0);
}

Swift::Int sub_100109988()
{
  return Hasher._finalize()();
}

uint64_t sub_100109990()
{
  return swift_willThrow();
}

uint64_t sub_1001099B4(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE400000000000000);
}

void sub_1001099BC()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1001099E0()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1001099E8()
{
  return Location.sanitizedSecondaryName.getter();
}

uint64_t sub_100109A04(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for VStack(255, v1, a1);
}

uint64_t sub_100109A14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1005A1770(v2 + a1, v1);
}

uint64_t sub_100109A20()
{
  return type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
}

uint64_t sub_100109A3C()
{
  return 0x6F4C686372616573;
}

void sub_100109A60()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 2;
}

uint64_t sub_100109A6C()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100109A74()
{
  return 0;
}

void sub_100109A8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1007204D0(a1, v1, v2);
}

uint64_t sub_100109A98()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 176), v1);
}

uint64_t sub_100109AA4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_1000CE1C8(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

double sub_100109AAC()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10006BD8C(v2, v1, v0);
}

uint64_t sub_100109ABC(char a1)
{
  return Location.Identifier.Kind.rawValue.getter(a1 & 1);
}

void sub_100109AC4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - a1;
}

uint64_t sub_100109AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
}

void sub_100109AE8(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_10007802C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_100109AF4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 232);
}

uint64_t sub_100109B0C()
{
  return type metadata accessor for ListLocationViewModel(0);
}

void sub_100109B14(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10007C75C(*(_QWORD *)(a2 - 256), *(_QWORD *)(v2 - 352), a1);
}

uint64_t sub_100109B28@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(_QWORD *)(v2 - 256), *(_QWORD *)(v3 - 248));
}

uint64_t sub_100109B34()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 3);
}

uint64_t type metadata accessor for LocationHeaderView(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BC3870, (uint64_t)&nominal type descriptor for LocationHeaderView);
}

void sub_100109B54()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  sub_1000986AC();
  v3 = v2;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v4);
  sub_100099864();
  if ((v3 & 1) == 0)
  {
    sub_10009D4E0();
    static os_log_type_t.fault.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v13 = sub_1000F4190();
    if (sub_1000D0EB0(v13))
    {
      v14 = (uint8_t *)sub_100098710(12);
      v15 = sub_100098710(32);
      sub_1000ED358(v15);
      sub_1000BF2A0(4.8149e-34);
      v17 = sub_1000CE1C8(1819242306, 0xE400000000000000, v16);
      sub_1000C58D0(v17);
      sub_10009D7A0((void *)&_mh_execute_header, v3, v0, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14);
      sub_1000988D8(v1);
      sub_1000986F0(v1);
      sub_1000986F0((uint64_t)v14);
    }

    sub_1000C10E0();
    sub_1000DB10C();
    sub_1000DF95C();
  }
  sub_100098640();
}

void sub_100109C50(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_10006BD8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      break;
    case 1:
      v5 = type metadata accessor for AutomationCellInfo(0);
      switch(swift_getEnumCaseMultiPayload(a1, v5))
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 0xAu:
LABEL_7:
          v6 = *(_QWORD *)(a1 + 8);
          goto LABEL_8;
        case 6u:
LABEL_10:
          v7 = type metadata accessor for WeatherMapOverlayKind(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
          return;
        case 8u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
          v6 = *(_QWORD *)(a1 + 40);
          goto LABEL_8;
        case 9u:
        case 0xBu:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          v6 = *(_QWORD *)(a1 + 24);
LABEL_8:
          swift_bridgeObjectRelease(v6);
          break;
        default:
          return;
      }
      break;
    case 0:
      v4 = type metadata accessor for AutomationViewInfo(0);
      switch(swift_getEnumCaseMultiPayload(a1, v4))
      {
        case 0u:
        case 1u:
        case 3u:
          goto LABEL_7;
        case 2u:
          goto LABEL_10;
        default:
          return;
      }
  }
}

void sub_100109D64()
{
  sub_1000CFF38();
}

void sub_100109D8C()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  sub_1000986AC();
  v3 = v2;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v4);
  sub_100099864();
  if ((v3 & 1) == 0)
  {
    sub_10009D4E0();
    static os_log_type_t.fault.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v13 = sub_1000F4190();
    if (sub_1000D0EB0(v13))
    {
      v14 = (uint8_t *)sub_100098710(12);
      v15 = sub_100098710(32);
      sub_1000ED358(v15);
      *(_DWORD *)v14 = 136315138;
      sub_100099CBC();
      v18 = sub_100109AA4(23, v16, v17);
      sub_1000C58D0(v18);
      sub_10009D7A0((void *)&_mh_execute_header, v3, v0, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14);
      sub_1000988D8(v1);
      sub_1000986F0(v1);
      sub_1000986F0((uint64_t)v14);
    }

    sub_1000C10E0();
    sub_1000DB10C();
    sub_1000DF95C();
  }
  sub_100098640();
}

uint64_t type metadata accessor for VFXTestViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE4488;
  if (!qword_100BE4488)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VFXTestViewState);
  return result;
}

#error "10010A014: call analysis failed (funcsize=160)"

uint64_t sub_10010A1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1000986AC();
  v14 = v13;
  v16 = v15;
  type metadata accessor for CodableError(0);
  sub_100099300();
  __chkstk_darwin(v17);
  sub_10009883C();
  __chkstk_darwin(v18);
  sub_1000BA294(&qword_100BD0378);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100094EC4();
  v21 = v12 + *(int *)(v20 + 48);
  sub_10000AB54(v16, v12, type metadata accessor for SearchViewState.ViewState);
  sub_10000AB54(v14, v21, type metadata accessor for SearchViewState.ViewState);
  v22 = type metadata accessor for SearchViewState.ViewState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v22);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_10010A2A0 + 4 * byte_10098C914[EnumCaseMultiPayload]))(EnumCaseMultiPayload, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
}

void sub_10010A2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  if (sub_1000DCC3C())
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v0);
    sub_1000215BC(v1, type metadata accessor for SearchViewState.ViewState);
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    v6(v3, v4, v0);
    v7 = sub_1000C0108();
    v8 = ((uint64_t (*)(uint64_t))v6)(v7);
    v9 = CodableError.errorCode.getter(v8);
    CodableError.errorCode.getter(v9);
    v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v10(v2, v0);
    v10(v3, v0);
  }
  sub_100098640();
}

uint64_t *sub_10010A3B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v11);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for CodableError(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t type metadata accessor for ListViewState._Storage()
{
  return objc_opt_self(_TtCV7Weather13ListViewState8_Storage);
}

void sub_10010A47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10009E50C();
  v4 = *(_BYTE *)(v2 + 24);
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    if ((*(_BYTE *)(v2 + 24) & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    if (*(_QWORD *)(v1 + 16) != *(_QWORD *)(v0 + 16))
      v4 = 1;
    if ((v4 & 1) != 0)
      goto LABEL_24;
  }
  if (*(unsigned __int8 *)(v1 + 25) == *(unsigned __int8 *)(v0 + 25)
    && *(unsigned __int8 *)(v1 + 26) == *(unsigned __int8 *)(v0 + 26))
  {
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v1 + 40);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = v5 == v7 && v6 == v8;
    if (v9 || (sub_100099264(v5, v6, v7, v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(v1 + 56);
      v11 = *(_QWORD *)(v0 + 56);
      if (v10)
      {
        if (!v11)
          goto LABEL_24;
        v12 = *(_QWORD *)(v1 + 48);
        v13 = *(_QWORD *)(v0 + 48);
        v14 = v12 == v13 && v10 == v11;
        if (!v14 && (sub_100099264(v12, v10, v13, v11) & 1) == 0)
          goto LABEL_24;
      }
      else if (v11)
      {
        goto LABEL_24;
      }
      if (*(unsigned __int8 *)(v1 + 64) == *(unsigned __int8 *)(v0 + 64))
      {
        v15 = *(_QWORD *)(v1 + 80);
        v16 = *(_QWORD *)(v0 + 80);
        if (v15)
        {
          if (v16)
          {
            v17 = *(_QWORD *)(v1 + 72);
            v18 = *(_QWORD *)(v0 + 72);
            if (v17 != v18 || v15 != v16)
              sub_100099264(v17, v15, v18, v16);
          }
        }
      }
    }
  }
LABEL_24:
  sub_10004A298();
}

uint64_t sub_10010A5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10010A5F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF6538);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 <= 1)
    goto LABEL_24;
  v11 = *(_QWORD *)(v3 + 64);
  v12 = 1;
  if (v11)
  {
LABEL_22:
    v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
    v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
    Hasher.init(_seed:)(v15);
    __asm { BR              X8 }
  }
  v12 = 2;
  if (v9 <= 2)
  {
LABEL_24:
    swift_release_n(v3, 2);
LABEL_26:
    *v2 = v5;
    return;
  }
  v11 = *(_QWORD *)(v3 + 72);
  if (v11)
    goto LABEL_22;
  v12 = 3;
  if (v9 <= 3)
    goto LABEL_24;
  v11 = *(_QWORD *)(v3 + 80);
  if (v11)
    goto LABEL_22;
  v13 = 4;
  if (v9 <= 4)
    goto LABEL_24;
  v11 = *(_QWORD *)(v3 + 88);
  if (v11)
  {
    v12 = 4;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v9)
      goto LABEL_24;
    v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_10010AAB8(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_10010AAC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000BA294(a2);
  sub_1000C51C8(*(_QWORD *)(v3 - 8));
  return a1;
}

uint64_t sub_10010AAF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (uint64_t)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Font.Leading(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

double sub_10010AB6C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v5 = a1 + a2[7];
  v6 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[8];
  v8 = sub_1000BA294(&qword_100BC4E68);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(a1 + a2[9], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  v10 = a1 + a2[15];
  v11 = type metadata accessor for Precipitation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20])).n128_u64[0];
  return result;
}

_QWORD *sub_10010ACDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Font.Leading(0);
  swift_retain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BCCDA8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t type metadata accessor for DailyComponentForecastRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDD6D0;
  if (!qword_100BDD6D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyComponentForecastRowView);
  return result;
}

uint64_t sub_10010ADF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v4 = sub_1000BA294(&qword_100BCCDA8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for Font.Leading(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v28 - v15;
  v17 = sub_1000BA294(&qword_100BE0BA0);
  __chkstk_darwin(v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FontWithSmallVariantModifier(0);
  if (*((_BYTE *)v2 + *(int *)(v20 + 28)) == 1)
  {
    v21 = v2[1];
    sub_10010B0C4((uint64_t)v2 + *(int *)(v20 + 24), (uint64_t)v9);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v16, enum case for Font.Leading.standard(_:), v10);
      sub_10040BFF4((uint64_t)v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    }
    v23 = Font.leading(_:)(v16, v21);
  }
  else
  {
    v22 = *v2;
    sub_10010B0C4((uint64_t)v2 + *(int *)(v20 + 24), (uint64_t)v7);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v10) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for Font.Leading.standard(_:), v10);
      sub_10040BFF4((uint64_t)v7);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v7, v10);
    }
    v23 = Font.leading(_:)(v14, v22);
    v16 = v14;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  KeyPath = swift_getKeyPath(&unk_10099E398);
  v25 = sub_1000BA294(&qword_100BE0BA8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v19, a1, v25);
  v26 = (uint64_t *)&v19[*(int *)(v17 + 36)];
  *v26 = KeyPath;
  v26[1] = v23;
  return sub_10010B10C((uint64_t)v19, v29);
}

uint64_t type metadata accessor for FontWithSmallVariantModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE0B58;
  if (!qword_100BE0B58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FontWithSmallVariantModifier);
  return result;
}

uint64_t sub_10010B0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCCDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BE0BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10010B154(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[3];

  v28 = a1;
  v2 = sub_1000BA294(&qword_100BDD800);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BDD808);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v6);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v9 = sub_1000BA294(&qword_100BDD810);
  sub_10010B384(v1, (uint64_t)&v4[*(int *)(v9 + 44)]);
  v10 = v1 + *(int *)(type metadata accessor for DailyComponentForecastRowView(0) + 72);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_10008D47C(*(_QWORD *)v10, v12);
  sub_10010BCB4();
  v14 = v13;
  v15 = v13 & 1;
  v16 = (_QWORD *)sub_1000B15F8(v11, v12);
  v17 = 0;
  if ((v14 & 1) == 0)
  {
    v18 = sub_1000BA294(&qword_100BD3380);
    v16 = ScaledMetric.wrappedValue.getter(v29, v18);
    v17 = *(_QWORD *)&v29[0];
  }
  static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(0, 1, v17, v15);
  sub_100037768((uint64_t)v4, (uint64_t)v8, &qword_100BDD800);
  v19 = &v8[*(int *)(v5 + 36)];
  v20 = v29[1];
  *(_OWORD *)v19 = v29[0];
  *((_OWORD *)v19 + 1) = v20;
  *((_OWORD *)v19 + 2) = v29[2];
  sub_100021A14((uint64_t)v4, &qword_100BDD800);
  v21 = *(_QWORD *)v10;
  v22 = *(_BYTE *)(v10 + 8);
  sub_10008D47C(*(_QWORD *)v10, v22);
  sub_10010BCB4();
  v24 = v23;
  sub_1000B15F8(v21, v22);
  v25 = v28;
  sub_100037768((uint64_t)v8, v28, &qword_100BDD808);
  v26 = (_BYTE *)(v25 + *(int *)(sub_1000BA294(&qword_100BDD7E8) + 36));
  *v26 = 1;
  v26[1] = (v24 & 1) == 0;
  sub_100021A14((uint64_t)v8, &qword_100BDD808);
}

void sub_10010B384(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(_QWORD);
  char *v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char v100;
  char *v101;
  uint64_t (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t, uint64_t);
  unsigned int v123;
  void (*v124)(char *, _QWORD, uint64_t);
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[3];

  v4 = type metadata accessor for Font.Leading(0);
  v143 = *(_QWORD *)(v4 - 8);
  v144 = v4;
  __chkstk_darwin(v4);
  v134 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.TextStyle(0);
  v132 = *(_QWORD *)(v6 - 8);
  v133 = v6;
  __chkstk_darwin(v6);
  v131 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for FontWithSmallVariantModifier(0);
  __chkstk_darwin(v137);
  v9 = (uint64_t *)((char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000BA294(&qword_100BCCDA8);
  __chkstk_darwin(v10);
  v136 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for ColorSchemeContrast(0);
  v12 = *(_QWORD *)(v142 - 8);
  v13 = __chkstk_darwin(v142);
  v141 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v140 = (char *)&v122 - v15;
  v16 = sub_1000BA294(&qword_100BDD818);
  __chkstk_darwin(v16);
  v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_1000BA294(&qword_100BDD820);
  v19 = __chkstk_darwin(v135);
  v139 = (uint64_t)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v122 - v22;
  __chkstk_darwin(v21);
  v145 = (uint64_t)&v122 - v24;
  v25 = sub_1000BA294(&qword_100BDD828);
  v26 = __chkstk_darwin(v25);
  v147 = (uint64_t)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v122 - v28;
  v30 = (int *)type metadata accessor for DailyComponentForecastRowView(0);
  v31 = a1 + v30[18];
  v32 = *(_QWORD *)v31;
  v138 = v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_10008D47C(v32, v33);
  sub_10010BCB4();
  v146 = v34;
  sub_1000B15F8(v32, v33);
  v35 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v36 = *(int *)(v35 + 40);
  v148 = a1;
  v37 = (uint64_t *)(a1 + v36);
  v38 = v37[1];
  if (v38)
  {
    v129 = v29;
    v130 = a2;
    v39 = *v37;
    v128 = v35;
    swift_bridgeObjectRetain(v38);
    v40 = Image.init(systemName:)(v39, v38);
    v41 = v148 + v30[20];
    v127 = (uint64_t *)v23;
    v42 = v148;
    v43 = v140;
    v125 = v41;
    sub_100114A94();
    v44 = *(void (**)(_QWORD))(v12 + 104);
    v45 = v141;
    v123 = enum case for ColorSchemeContrast.increased(_:);
    v46 = v142;
    v124 = (void (*)(char *, _QWORD, uint64_t))v44;
    v44(v141);
    v47 = static ColorSchemeContrast.== infix(_:_:)(v43, v45);
    v48 = *(void (**)(char *, uint64_t))(v12 + 8);
    v48(v45, v46);
    v126 = v48;
    v48(v43, v46);
    v49 = type metadata accessor for Image.TemplateRenderingMode(0);
    v50 = (unsigned int *)&enum case for Image.TemplateRenderingMode.template(_:);
    if ((v47 & 1) == 0)
      v50 = (unsigned int *)&enum case for Image.TemplateRenderingMode.original(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v18, *v50, v49);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v49);
    v51 = Image.renderingMode(_:)(v18, v40);
    swift_release(v40);
    sub_100021A14((uint64_t)v18, &qword_100BDD818);
    v53 = static Font.title3.getter(v52);
    v54 = static Font.body.getter(v53);
    v55 = v42 + v30[17];
    v56 = *(_QWORD *)v55;
    v57 = *(_BYTE *)(v55 + 8);
    sub_10008D47C(*(_QWORD *)v55, v57);
    sub_100109B54();
    v59 = v58;
    sub_1000B15F8(v56, v57);
    v60 = enum case for Font.Leading.tight(_:);
    v61 = v144;
    v62 = (uint64_t)v136;
    v122 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 104);
    v122(v136, enum case for Font.Leading.tight(_:), v144);
    _s7Weather24LocationCompositionStateOwst_0(v62, 0, 1, v61);
    v63 = v137;
    sub_100037768(v62, (uint64_t)v9 + *(int *)(v137 + 24), &qword_100BCCDA8);
    *v9 = v53;
    v9[1] = v54;
    *((_BYTE *)v9 + *(int *)(v63 + 28)) = v59 & 1;
    v64 = v127;
    sub_100080C0C((uint64_t)v9, (uint64_t)v127 + *(int *)(v135 + 36), type metadata accessor for FontWithSmallVariantModifier);
    *v64 = v51;
    swift_retain();
    sub_1000215BC((uint64_t)v9, type metadata accessor for FontWithSmallVariantModifier);
    sub_100021A14(v62, &qword_100BCCDA8);
    swift_release(v51);
    v65 = (uint64_t)v64;
    v66 = v145;
    sub_1000787D4(v65, v145, &qword_100BDD820);
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    if ((*(_BYTE *)(v148 + *(int *)(v128 + 52)) & 1) != 0)
    {
      v71 = (_QWORD *)(v148 + *(int *)(v128 + 56));
      v72 = v71[1];
      v149[0] = *v71;
      v149[1] = v72;
      v73 = sub_100114EF8();
      swift_bridgeObjectRetain(v72);
      v74 = Text.init<A>(_:)(v149, &type metadata for String, v73);
      v76 = v75;
      v78 = v77;
      v80 = v79 & 1;
      v82 = v132;
      v81 = v133;
      v83 = v131;
      v84 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v132 + 104))(v131, enum case for Font.TextStyle.caption(_:), v133);
      static Font.Weight.bold.getter(v84);
      v85 = static Font.system(_:weight:)(v83);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v81);
      v86 = v134;
      v87 = v144;
      v122(v134, v60, v144);
      v88 = Font.leading(_:)(v86, v85);
      v89 = swift_release(v85);
      (*(void (**)(char *, uint64_t, __n128))(v143 + 8))(v86, v87, v89);
      v90 = Text.font(_:)(v88, v74, v76, v80, v78);
      v92 = v91;
      v94 = v93;
      v96 = v95;
      swift_release(v88);
      sub_1000D31B4(v74, v76, v80);
      swift_bridgeObjectRelease(v78);
      v97 = v140;
      sub_100114A94();
      v99 = v141;
      v98 = v142;
      v124(v141, v123, v142);
      v100 = static ColorSchemeContrast.== infix(_:_:)(v97, v99);
      v101 = v99;
      v102 = (uint64_t (*)(char *, uint64_t))v126;
      v126(v101, v98);
      v103 = v102(v97, v98);
      if ((v100 & 1) != 0)
        v104 = static Color.white.getter(v103);
      else
        v104 = static Color.cyan.getter(v103);
      v107 = v104;
      v108 = v94 & 1;
      v67 = Text.foregroundColor(_:)(v104, v90, v92, v94 & 1, v96);
      v68 = v109;
      v111 = v110;
      v70 = v112;
      swift_release(v107);
      v69 = v111 & 1;
      sub_1000D31B4(v90, v92, v108);
      swift_bridgeObjectRelease(v96);
      v66 = v145;
    }
    v113 = v139;
    sub_100037768(v66, v139, &qword_100BDD820);
    v106 = v147;
    sub_100037768(v113, v147, &qword_100BDD820);
    v114 = (uint64_t *)(v106 + *(int *)(sub_1000BA294(&qword_100BDD840) + 48));
    *v114 = v67;
    v114[1] = v68;
    v114[2] = v69;
    v114[3] = v70;
    sub_10010F980(v67, v68, v69, v70);
    sub_100021A14(v66, &qword_100BDD820);
    sub_10010F9B0(v67, v68, v69, v70);
    sub_100021A14(v113, &qword_100BDD820);
    v115 = sub_1000BA294(&qword_100BDD830);
    _s7Weather24LocationCompositionStateOwst_0(v106, 0, 1, v115);
    v29 = v129;
    sub_1000787D4(v106, (uint64_t)v129, &qword_100BDD828);
    v32 = *(_QWORD *)v138;
    v33 = *(_BYTE *)(v138 + 8);
    a2 = v130;
  }
  else
  {
    v105 = sub_1000BA294(&qword_100BDD830);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 1, 1, v105);
    v106 = v147;
  }
  v116 = 0x4020000000000000;
  if ((v146 & 1) != 0)
    v117 = 0;
  else
    v117 = 0x4020000000000000;
  sub_10008D47C(v32, v33);
  sub_10010BCB4();
  v119 = v118;
  sub_1000B15F8(v32, v33);
  if ((v119 & 1) != 0)
    v116 = 0;
  sub_100037768((uint64_t)v29, v106, &qword_100BDD828);
  *(_QWORD *)a2 = v117;
  *(_BYTE *)(a2 + 8) = 0;
  v120 = sub_1000BA294(&qword_100BDD838);
  sub_100037768(v106, a2 + *(int *)(v120 + 48), &qword_100BDD828);
  v121 = a2 + *(int *)(v120 + 64);
  *(_QWORD *)v121 = v116;
  *(_BYTE *)(v121 + 8) = 0;
  sub_100021A14((uint64_t)v29, &qword_100BDD828);
  sub_100021A14(v106, &qword_100BDD828);
}

void sub_10010BCB4()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  sub_1000986AC();
  v3 = v2;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v4);
  sub_100099864();
  if ((v3 & 1) == 0)
  {
    sub_10009D4E0();
    static os_log_type_t.fault.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v13 = sub_1000F4190();
    if (sub_1000D0EB0(v13))
    {
      v14 = (uint8_t *)sub_100098710(12);
      v15 = sub_100098710(32);
      sub_1000ED358(v15);
      sub_1000BF2A0(4.8149e-34);
      v17 = sub_1000CE1C8(0x6542676E697A6953, 0xEE00726F69766168, v16);
      sub_1000C58D0(v17);
      sub_10009D7A0((void *)&_mh_execute_header, v3, v0, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14);
      sub_1000988D8(v1);
      sub_1000986F0(v1);
      sub_1000986F0((uint64_t)v14);
    }

    sub_1000C10E0();
    sub_1000DB10C();
    sub_1000DF95C();
  }
  sub_100098640();
}

void sub_10010BDC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  void (*v55)(_BYTE *, char *, uint64_t);
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  double v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t *v79;
  char v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  uint64_t v89;
  Swift::String v90;
  void *object;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  unint64_t v100;
  unint64_t v101;
  _BYTE v102[12];
  int v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  Swift::String v129;
  Swift::String v130;

  v125 = a1;
  v111 = a3;
  v109 = type metadata accessor for AutomationInfo(0);
  __chkstk_darwin(v109);
  v110 = (uint64_t *)&v102[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1000BA294(&qword_100BCD380);
  __chkstk_darwin(v15);
  v123 = (uint64_t *)&v102[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v122 = sub_1000BA294(&qword_100BCB330);
  __chkstk_darwin(v122);
  v124 = &v102[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v126 = sub_1000BA294(&qword_100BCB410);
  v18 = __chkstk_darwin(v126);
  v121 = &v102[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  v112 = &v102[-v20];
  v21 = sub_1000BA294(&qword_100BCB340);
  v22 = __chkstk_darwin(v21);
  v106 = &v102[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __chkstk_darwin(v22);
  v114 = &v102[-v25];
  v26 = __chkstk_darwin(v24);
  v115 = &v102[-v27];
  v28 = __chkstk_darwin(v26);
  v104 = &v102[-v29];
  v30 = __chkstk_darwin(v28);
  v32 = &v102[-v31];
  __chkstk_darwin(v30);
  v34 = &v102[-v33];
  v35 = sub_1000BA294(qword_100BC4E80);
  __chkstk_darwin(v35);
  v119 = &v102[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = sub_1000BA294(&qword_100BC4E68);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v41 = &v102[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v43 = &v102[-v42];
  v44 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v45 = __chkstk_darwin(v44);
  v105 = &v102[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v45);
  v48 = &v102[-v47];
  v49 = type metadata accessor for DailyComponentForecastRowView(0);
  __chkstk_darwin(v49);
  v120 = &v102[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v107 = sub_1000BA294(&qword_100BD9488);
  __chkstk_darwin(v107);
  v108 = &v102[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v116 = v48;
  sub_100080C0C(a2, (uint64_t)v48, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  v52 = type metadata accessor for DailyForecastComponentViewModel(0);
  v53 = v127;
  v54 = (char *)v127 + *(int *)(v52 + 24);
  v55 = *(void (**)(_BYTE *, char *, uint64_t))(v38 + 16);
  v117 = v43;
  v56 = v43;
  v57 = v37;
  v58 = v52;
  v55(v56, v54, v57);
  v59 = (char *)v53 + *(int *)(v58 + 28);
  v118 = v41;
  v55(v41, v59, v57);
  v60 = a2;
  v61 = (uint64_t)v112;
  v113 = v60;
  sub_100080C0C(v60, (uint64_t)v34, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v44);
  sub_10010CDD0(*v53, (uint64_t)v32);
  v62 = v61 + *(int *)(v126 + 48);
  sub_100037768((uint64_t)v34, v61, &qword_100BCB340);
  sub_100037768((uint64_t)v32, v62, &qword_100BCB340);
  if (_s7Weather24LocationCompositionStateOwet_0(v61, 1, v44) == 1)
  {
    sub_100021A14((uint64_t)v32, &qword_100BCB340);
    sub_100021A14((uint64_t)v34, &qword_100BCB340);
    v63 = _s7Weather24LocationCompositionStateOwet_0(v62, 1, v44);
    v64 = (uint64_t)v114;
    if (v63 == 1)
    {
      sub_100021A14(v61, &qword_100BCB340);
      v65 = v121;
      v66 = (uint64_t)v119;
LABEL_8:
      v55((_BYTE *)v66, (char *)v127 + *(int *)(v58 + 20), v57);
      v68 = 0;
      goto LABEL_10;
    }
LABEL_6:
    sub_100021A14(v61, &qword_100BCB410);
    v68 = 1;
    v65 = v121;
    v66 = (uint64_t)v119;
    goto LABEL_10;
  }
  v67 = v104;
  sub_100037768(v61, (uint64_t)v104, &qword_100BCB340);
  if (_s7Weather24LocationCompositionStateOwet_0(v62, 1, v44) == 1)
  {
    sub_100021A14((uint64_t)v32, &qword_100BCB340);
    sub_100021A14((uint64_t)v34, &qword_100BCB340);
    sub_1000215BC((uint64_t)v67, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    v64 = (uint64_t)v114;
    goto LABEL_6;
  }
  v69 = v62;
  v70 = v105;
  sub_10007802C(v69, (uint64_t)v105, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  v103 = sub_10010C890((uint64_t)v67, (uint64_t)v70);
  sub_1000215BC((uint64_t)v70, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  sub_100021A14((uint64_t)v32, &qword_100BCB340);
  sub_100021A14((uint64_t)v34, &qword_100BCB340);
  sub_1000215BC((uint64_t)v67, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  sub_100021A14(v61, &qword_100BCB340);
  v65 = v121;
  v66 = (uint64_t)v119;
  v64 = (uint64_t)v114;
  if ((v103 & 1) != 0)
    goto LABEL_8;
  v68 = 1;
LABEL_10:
  _s7Weather24LocationCompositionStateOwst_0(v66, v68, 1, v57);
  v71 = type metadata accessor for DailyComponentRowView(0);
  v72 = *(int *)(v71 + 24);
  v73 = v127;
  v74 = (char *)v127 + *(int *)(v71 + 20);
  v75 = *((_QWORD *)v74 + 1);
  v121 = *(_BYTE **)v74;
  v76 = *(double *)((char *)v127 + v72);
  v77 = v115;
  sub_100080C0C(v113, (uint64_t)v115, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v77, 0, 1, v44);
  sub_10010CE80(*v73, v64);
  v78 = (uint64_t)&v65[*(int *)(v126 + 48)];
  v79 = &qword_100BCB340;
  sub_100037768((uint64_t)v77, (uint64_t)v65, &qword_100BCB340);
  sub_100037768(v64, v78, &qword_100BCB340);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, v44) == 1)
  {
    swift_retain();
    sub_100021A14(v64, &qword_100BCB340);
    sub_100021A14((uint64_t)v77, &qword_100BCB340);
    if (_s7Weather24LocationCompositionStateOwet_0(v78, 1, v44) == 1)
    {
      v80 = -1;
    }
    else
    {
      v79 = &qword_100BCB410;
      v80 = 0;
    }
  }
  else
  {
    v81 = v106;
    sub_100037768((uint64_t)v65, (uint64_t)v106, &qword_100BCB340);
    if (_s7Weather24LocationCompositionStateOwet_0(v78, 1, v44) == 1)
    {
      swift_retain();
      sub_100021A14(v64, &qword_100BCB340);
      sub_100021A14((uint64_t)v77, &qword_100BCB340);
      sub_1000215BC((uint64_t)v81, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
      v80 = 0;
      v79 = &qword_100BCB410;
    }
    else
    {
      v82 = v105;
      sub_10007802C(v78, (uint64_t)v105, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
      swift_retain();
      v80 = sub_10010C890((uint64_t)v81, (uint64_t)v82);
      sub_1000215BC((uint64_t)v82, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
      v83 = v64;
      v84 = (uint64_t)v81;
      v79 = &qword_100BCB340;
      sub_100021A14(v83, &qword_100BCB340);
      sub_100021A14((uint64_t)v77, &qword_100BCB340);
      sub_1000215BC(v84, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    }
  }
  v85 = (uint64_t)v120;
  sub_100021A14((uint64_t)v65, v79);
  v86 = (uint64_t)v124;
  Binding.projectedValue.getter(v122);
  KeyPath = swift_getKeyPath(&unk_10099B608);
  v88 = (uint64_t)v123;
  *v123 = KeyPath;
  v89 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v88, v89, 0);
  sub_10010CE8C((uint64_t)v116, (uint64_t)v117, (uint64_t)v118, v66, (uint64_t)v121, v75, v80 & 1, v86, v85, a5, a6, a7, a8, a4, v76, 4.0, v88);
  v129._countAndFlagsBits = 1601790308;
  v129._object = (void *)0xE400000000000000;
  if (__OFADD__(v125, 1))
  {
    __break(1u);
  }
  else
  {
    v128 = v125 + 1;
    v90._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
    object = v90._object;
    String.append(_:)(v90);
    swift_bridgeObjectRelease(object);
    v92 = v129._object;
    v93 = (uint64_t)v110;
    *v110 = v129._countAndFlagsBits;
    *(_QWORD *)(v93 + 8) = v92;
    v94 = type metadata accessor for AutomationCellInfo(0);
    swift_storeEnumTagMultiPayload(v93, v94, 5);
    swift_storeEnumTagMultiPayload(v93, v109, 1);
    v95 = (uint64_t)v108;
    sub_1003352AC();
    sub_1000215BC(v93, type metadata accessor for AutomationInfo);
    sub_1000215BC(v85, type metadata accessor for DailyComponentForecastRowView);
    v96 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v130._countAndFlagsBits = 0xD00000000000004FLL;
    v130._object = (void *)0x80000001009FE860;
    v97._object = (void *)0x80000001009FE840;
    v97._countAndFlagsBits = 0xD00000000000001ALL;
    v98._countAndFlagsBits = 0;
    v98._object = (void *)0xE000000000000000;
    v99 = NSLocalizedString(_:tableName:bundle:value:comment:)(v97, (Swift::String_optional)0, (NSBundle)v96, v98, v130);

    v129 = v99;
    v100 = sub_1003C0B70();
    v101 = sub_100114EF8();
    View.accessibilityHint<A>(_:)(&v129, v107, &type metadata for String, v100, v101);
    swift_bridgeObjectRelease(v99._object);
    sub_100021A14(v95, &qword_100BD9488);
  }
}

uint64_t sub_10010C884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005FB978);
}

uint64_t sub_10010C890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v7 = type metadata accessor for Precipitation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v11 = v10 - v9;
  v12 = sub_1000BA294(&qword_100BF62D0);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100098694();
  sub_1000BA294(&qword_100BCB338);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100089068();
  __chkstk_darwin(v15);
  sub_10009E3CC();
  __chkstk_darwin(v16);
  v18 = (char *)&v83 - v17;
  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_51;
  v85 = v11;
  v86 = v8;
  v19 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v20 = sub_100099430();
  v24 = v24 && v21 == v23;
  if (!v24)
  {
    sub_100099264(v20, v21, v22, v23);
    v25 = sub_10007A150();
    if ((v26 & 1) == 0)
      return v25 & 1;
  }
  v27 = sub_100099430();
  if (!v24 || v28 != v30)
  {
    sub_100099264(v27, v28, v29, v30);
    v25 = sub_10007A150();
    if ((v32 & 1) == 0)
      return v25 & 1;
  }
  if ((static TimeZone.== infix(_:_:)(a1 + v19[7], a2 + v19[7]) & 1) == 0)
    goto LABEL_51;
  v83 = v2;
  v84 = v7;
  v33 = v19[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  sub_1000C22BC();
  if ((sub_1000E7298(v34, v35) & 1) == 0 || (sub_1000E7298(a1 + v19[9], a2 + v19[9]) & 1) == 0)
    goto LABEL_51;
  v36 = v19;
  sub_1000BDD60();
  if (v37)
  {
    v42 = v83;
    v41 = v84;
    if (!v38)
      goto LABEL_51;
    if (*v39 != *v40 || v37 != v38)
    {
      sub_100099264(*v39, v37, *v40, v38);
      v25 = sub_10007A150();
      if ((v44 & 1) == 0)
        return v25 & 1;
    }
  }
  else
  {
    v42 = v83;
    v41 = v84;
    if (v38)
      goto LABEL_51;
  }
  sub_1000BDD60();
  if (!v45)
  {
    if (!v46)
      goto LABEL_33;
LABEL_51:
    v25 = 0;
    return v25 & 1;
  }
  if (!v46)
    goto LABEL_51;
  if (*v47 != *v48 || v45 != v46)
  {
    sub_100099264(*v47, v45, *v48, v46);
    v25 = sub_10007A150();
    if ((v50 & 1) == 0)
      return v25 & 1;
  }
LABEL_33:
  if (*(double *)(a1 + v36[12]) != *(double *)(a2 + v36[12])
    || *(unsigned __int8 *)(a1 + v36[13]) != *(unsigned __int8 *)(a2 + v36[13]))
  {
    goto LABEL_51;
  }
  v51 = sub_100099430();
  if (!v24 || v52 != v54)
  {
    sub_100099264(v51, v52, v53, v54);
    v25 = sub_10007A150();
    if ((v56 & 1) == 0)
      return v25 & 1;
  }
  sub_1000CFAE0(a1 + v36[15], (uint64_t)v18);
  sub_1000CFAE0(a2 + v36[15], v4);
  v57 = v42 + *(int *)(v12 + 48);
  sub_1000CFAE0((uint64_t)v18, v42);
  sub_1000CFAE0(v4, v57);
  sub_1000BBCA0(v42);
  if (!v24)
  {
    sub_1000CFAE0(v42, v3);
    sub_1000BBCA0(v57);
    if (!v58)
    {
      v59 = v85;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 32))(v85, v57, v41);
      sub_10000F1C8(&qword_100BCE778, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation);
      LODWORD(v84) = dispatch thunk of static Equatable.== infix(_:_:)(v3, v59, v41, v60);
      v61 = v42;
      v62 = v36;
      v63 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v63(v85, v41);
      sub_100098854(v4);
      sub_100098854((uint64_t)v18);
      v63(v3, v41);
      v36 = v62;
      sub_100098854(v61);
      if ((v84 & 1) == 0)
        goto LABEL_51;
      goto LABEL_50;
    }
    sub_100021A14(v4, &qword_100BCB338);
    sub_100021A14((uint64_t)v18, &qword_100BCB338);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v3, v41);
    goto LABEL_48;
  }
  sub_100021A14(v4, &qword_100BCB338);
  sub_100021A14((uint64_t)v18, &qword_100BCB338);
  sub_1000BBCA0(v57);
  if (!v24)
  {
LABEL_48:
    sub_100021A14(v42, &qword_100BF62D0);
    goto LABEL_51;
  }
  sub_100021A14(v42, &qword_100BCB338);
LABEL_50:
  if (*(unsigned __int8 *)(a1 + v36[16]) != *(unsigned __int8 *)(a2 + v36[16]))
    goto LABEL_51;
  v65 = sub_100099430();
  v69 = v24 && v66 == v68;
  if (v69 || (sub_100099264(v65, v66, v67, v68), v25 = sub_10007A150(), (v70 & 1) != 0))
  {
    v71 = sub_100099430();
    v75 = v24 && v72 == v74;
    if (v75 || (sub_100099264(v71, v72, v73, v74), v25 = sub_10007A150(), (v76 & 1) != 0))
    {
      v77 = sub_100099430();
      v81 = v24 && v78 == v80;
      if (v81 || (sub_100099264(v77, v78, v79, v80), v25 = sub_10007A150(), (v82 & 1) != 0))
        v25 = sub_10010CD10(*(_QWORD *)(a1 + v36[20]), *(_QWORD *)(a2 + v36[20]));
    }
  }
  return v25 & 1;
}

uint64_t sub_10010CD10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  float64x2_t *v5;
  double *v6;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  if (!v2 || a1 == a2)
    return 1;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 64) == *(double *)(a2 + 64))
  {
    v5 = (float64x2_t *)(a2 + 104);
    v6 = (double *)(a1 + 104);
    do
    {
      result = --v2 == 0;
      if (!v2)
        break;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v6 - 4), v5[-2]), (int32x4_t)vceqq_f64(*(float64x2_t *)(v6 - 2), v5[-1]))), 0xFuLL))) & 1) == 0)break;
      v7 = v5->f64[0];
      v5 = (float64x2_t *)((char *)v5 + 40);
      v8 = v7;
      v9 = *v6;
      v6 += 5;
    }
    while (v9 == v8);
  }
  return result;
}

uint64_t sub_10010CDD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010CDDC(a1, (void (*)(_QWORD))type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel, a2);
}

uint64_t sub_10010CDDC@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = ((uint64_t (*)(_QWORD))a2)(0);
  if (v6)
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
    sub_10010CE48(a1 + ((v8 + 32) & ~v8), a3, a2);
  }
  v9 = sub_1000D9538();
  return sub_1000C4750(v9, v10, v11, v12);
}

void sub_10010CE48(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  a3(0);
  v4 = sub_1000D11C8();
  v5(v4, a1);
  sub_10004A298();
}

uint64_t sub_10010CE80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10020CC48(a1, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel, a2);
}

void sub_10010CE8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, uint64_t a17)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  double *v39;
  double *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;

  v56 = a7;
  v55 = a6;
  v57 = a8;
  v58 = a17;
  v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v59 = v31;
  __chkstk_darwin(v32);
  v34 = (char *)&v54 - v33;
  sub_10007802C(a1, a9, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  v35 = (int *)sub_1000D1774();
  v36 = a9 + v35[5];
  v37 = sub_1000BA294(&qword_100BC4E68);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
  v38(v36, a2, v37);
  v38(a9 + v35[6], a3, v37);
  sub_1000787D4(a4, a9 + v35[7], qword_100BC4E80);
  v39 = (double *)(a9 + v35[8]);
  *v39 = a10;
  v39[1] = a11;
  v40 = (double *)(a9 + v35[9]);
  *v40 = a12;
  v40[1] = a13;
  *(double *)(a9 + v35[10]) = a14;
  v41 = (_QWORD *)(a9 + v35[11]);
  v42 = v55;
  *v41 = a5;
  v41[1] = v42;
  *(double *)(a9 + v35[12]) = a15;
  *(_BYTE *)(a9 + v35[13]) = v56;
  sub_1000787D4(v57, a9 + v35[14], &qword_100BCB330);
  v61[0] = 0x4049000000000000;
  v43 = sub_10010FE84();
  ScaledMetric.init(wrappedValue:)(v61, &type metadata for CGFloat, v43);
  *(double *)v61 = a16;
  v62 = 0x3FF0000000000000;
  v44 = sub_10010D1D0();
  ScaledValue.init(wrappedValue:step:)(v61, &v62, &type metadata for Double, v44);
  v45 = a9 + v35[17];
  *(_QWORD *)v45 = swift_getKeyPath(&unk_100999CD0);
  *(_BYTE *)(v45 + 8) = 0;
  v46 = a9 + v35[18];
  *(_QWORD *)v46 = swift_getKeyPath(&unk_100999CF8);
  *(_BYTE *)(v46 + 8) = 0;
  v47 = a9 + v35[19];
  *(_QWORD *)v47 = swift_getKeyPath(&unk_100999D20);
  *(_BYTE *)(v47 + 8) = 0;
  sub_1000787D4(v58, a9 + v35[20], &qword_100BCD380);
  v48 = (_QWORD *)(a9 + v35[21]);
  v49 = type metadata accessor for FrameContainer(0);
  v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  *(_OWORD *)(v50 + 16) = 0u;
  *(_OWORD *)(v50 + 32) = 0u;
  ObservationRegistrar.init()(v50);
  v62 = v50;
  State.init(wrappedValue:)(&v62, v49);
  v51 = v61[1];
  *v48 = v61[0];
  v48[1] = v51;
  v52 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 1, 1, v52);
  v53 = v59;
  sub_100037768((uint64_t)v34, v59, (uint64_t *)&unk_100BD35A0);
  State.init(wrappedValue:)(v53, v60);
  sub_100021A14((uint64_t)v34, (uint64_t *)&unk_100BD35A0);
}

unint64_t sub_10010D1D0()
{
  unint64_t result;

  result = qword_100BC37F0;
  if (!qword_100BC37F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100BC37F0);
  }
  return result;
}

void sub_10010D20C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81[16];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = v1;
  v80 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v77 = v5;
  v6 = type metadata accessor for DailyForecastRowViewButtonStyle(0);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = (_BYTE *)(v9 - v8);
  v11 = sub_1000D1774();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BDD770);
  v70 = *(_QWORD *)(v15 - 8);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  v20 = sub_1000BA294(&qword_100BDD778);
  v21 = *(_QWORD *)(v20 - 8);
  v71 = v20;
  v72 = v21;
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v66 = v23;
  v24 = sub_1000BA294(&qword_100BDD780);
  v25 = *(_QWORD *)(v24 - 8);
  v74 = v24;
  v75 = v25;
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100088FDC();
  v68 = v27;
  v76 = sub_1000BA294(&qword_100BDD788);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_1000986FC();
  v69 = v29;
  __chkstk_darwin(v30);
  v73 = (char *)&v65 - v31;
  sub_100080C0C(v2, (uint64_t)v14, type metadata accessor for DailyComponentForecastRowView);
  v32 = *(unsigned __int8 *)(v12 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject(&unk_100B70BA0, v33 + v13, v32 | 7);
  sub_10007802C((uint64_t)v14, v34 + v33, type metadata accessor for DailyComponentForecastRowView);
  v82 = v2;
  v35 = sub_1000BA294(&qword_100BDD790);
  sub_10003D2DC(&qword_100BDD798, &qword_100BDD790);
  Button.init(action:label:)(sub_1003B0D20, v34, sub_1003B0D48, v81, v35, v36);
  LOBYTE(v35) = *(_BYTE *)(v2 + *(int *)(v11 + 52));
  v67 = v2;
  v37 = sub_1000BA294(&qword_100BCB330);
  Binding.projectedValue.getter(v37);
  sub_100080C0C(v2, (uint64_t)&v10[*(int *)(v6 + 24)], type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  *v10 = v35;
  sub_10003D2DC(&qword_100BDD7A0, &qword_100BDD770);
  v39 = v38;
  sub_10000F1C8(&qword_100BDD7A8, type metadata accessor for DailyForecastRowViewButtonStyle);
  v41 = v40;
  v42 = v66;
  View.buttonStyle<A>(_:)(v10, v15, v6, v39, v40);
  sub_1000215BC((uint64_t)v10, type metadata accessor for DailyForecastRowViewButtonStyle);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v19, v15);
  v44 = v77;
  v45 = static AccessibilityChildBehavior.ignore.getter(v43);
  v83 = v15;
  v84 = v6;
  v85 = v39;
  v86 = v41;
  v46 = sub_1000C6674(v45, (uint64_t)&opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>);
  v47 = v68;
  v48 = v71;
  View.accessibilityElement(children:)(v44, v71, v46);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v44, v79);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v42, v48);
  v83 = v48;
  v84 = v46;
  v50 = sub_1000C6674(v49, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
  v51 = v69;
  v52 = v74;
  View.accessibilityRespondsToUserInteraction(_:)(1, v74, v50);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v47, v52);
  v53 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v54 = v67;
  v55 = (uint64_t *)(v67 + *(int *)(v53 + 76));
  v57 = *v55;
  v56 = v55[1];
  v83 = v57;
  v84 = v56;
  v58 = sub_100114EF8();
  v59 = (uint64_t)v73;
  v60 = v76;
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v83, v76, &type metadata for String, v58);
  sub_100021A14(v51, &qword_100BDD788);
  v61 = sub_1000BA294(&qword_100BC6A10);
  v62 = swift_allocObject(v61, 48, 7);
  *(_OWORD *)(v62 + 16) = xmmword_10097CA50;
  v63 = (_QWORD *)(v54 + *(int *)(v53 + 24));
  v64 = v63[1];
  *(_QWORD *)(v62 + 32) = *v63;
  *(_QWORD *)(v62 + 40) = v64;
  swift_bridgeObjectRetain(v64);
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v62, v60, &type metadata for String, v58);
  swift_bridgeObjectRelease(v62);
  sub_100021A14(v59, &qword_100BDD788);
}

uint64_t type metadata accessor for FrameContainer(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFE488;
  if (!qword_100BFE488)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FrameContainer);
  return result;
}

double sub_10010D6FC(_QWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v4 = type metadata accessor for CurrentLocation(0);
      if (swift_getEnumCaseMultiPayload(a1, v4) <= 2)
        goto LABEL_3;
      break;
    case 1u:
LABEL_3:
      v5 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 2u:
      swift_bridgeObjectRelease(*a1);
      v6 = a1[1];
      goto LABEL_7;
    case 5u:
      v6 = *a1;
LABEL_7:
      *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
      break;
    case 6u:
      result = sub_1001639C8(*a1, a1[1], *((_BYTE *)a1 + 16));
      break;
    default:
      return result;
  }
  return result;
}

void sub_10010D7C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(_QWORD, _QWORD, _QWORD);
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (**v134)();
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (**v147)(uint64_t);
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (**v152)(uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(_QWORD, _QWORD, _QWORD);
  id v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;

  v200 = a1;
  v190 = a2;
  v189 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v187 = *(_QWORD *)(v189 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v188 = v5;
  v196 = (id)sub_1000BA294(&qword_100C0A0A0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v173 = v7;
  v8 = sub_10003BC60();
  sub_1000B43A4(v8, (uint64_t)&v198);
  v167 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100088FDC();
  v161 = v11;
  v12 = sub_1000ED3B8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v12;
  v15 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v16 = sub_1000BE880();
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100098728();
  v20 = v19 - v18;
  v158 = sub_1000BA294(&qword_100C13EB8);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_10004A2E8();
  v22 = sub_1000BA294(&qword_100C13EC0);
  sub_1000B43A4(v22, (uint64_t)&v192);
  v162 = v23;
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_1000BEA84(v25, v156);
  v26 = sub_1000BA294(&qword_100C13EC8);
  sub_1000B43A4(v26, (uint64_t)&v197);
  v164 = v27;
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100088FDC();
  sub_10009511C(v29);
  v193 = sub_1000BA294(&qword_100C13ED0);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100088FDC();
  sub_10009511C(v31);
  v32 = sub_1000BA294(&qword_100C13ED8);
  sub_1000B43A4(v32, (uint64_t)&v201);
  v170 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v194 = v35;
  v36 = sub_1000BA294(&qword_100C13EE0);
  sub_1000B43A4(v36, (uint64_t)&v203);
  v172 = v37;
  sub_10009D98C();
  __chkstk_darwin(v38);
  sub_100088FDC();
  sub_10009511C(v39);
  v40 = sub_1000BA294(&qword_100C13EE8);
  sub_1000B43A4(v40, (uint64_t)&v207);
  v175 = v41;
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_100088FDC();
  v195 = v43;
  v44 = sub_1000BA294(&qword_100C13EF0);
  sub_1000B43A4(v44, (uint64_t)&v208);
  v179 = v45;
  sub_10009D98C();
  __chkstk_darwin(v46);
  sub_100088FDC();
  sub_10009511C(v47);
  v174 = sub_1000BA294(&qword_100C13EF8);
  sub_1000B42B0();
  __chkstk_darwin(v48);
  sub_100088FDC();
  sub_10009511C(v49);
  v178 = sub_1000BA294(&qword_100C13F00);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100088FDC();
  sub_10009511C(v51);
  v182 = sub_1000BA294(&qword_100C13F08);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  sub_100088FDC();
  sub_10009511C(v53);
  v184 = sub_1000BA294(&qword_100C13E80);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_100088FDC();
  sub_10009511C(v55);
  v197 = (uint64_t *)v2;
  v56 = sub_10010E958();
  v57 = v56;
  *v3 = static Alignment.top.getter(v56);
  v3[1] = v58;
  v59 = sub_1000BA294(&qword_100C13F10);
  sub_10010EAF4(v2, v57 & 1, v200, (uint64_t)v3 + *(int *)(v59 + 44));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20, v2 + *(int *)(v14 + 40), v16);
  v157 = (uint64_t)&v156 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AB54(v2, v157, type metadata accessor for WeatherConditionBackgroundModifier);
  v60 = *(unsigned __int8 *)(v13 + 80);
  v198 = (v60 + 16) & ~v60;
  v199 = v198 + v15;
  v61 = v198;
  v200 = v60 | 7;
  v62 = swift_allocObject(&unk_100B9ACA8, v198 + v15, v60 | 7);
  sub_10010E534((uint64_t)&v156 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v62 + v61);
  sub_10003D2DC(&qword_100C13F18, &qword_100C13EB8);
  v64 = v63;
  sub_10000F1C8((unint64_t *)&qword_100BC4698, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherConditionBackgroundModel);
  v66 = v65;
  v67 = v158;
  View.onChange<A>(of:initial:_:)(v20, 0, sub_100150BA8, v62, v158, v16, v64, v65);
  v68 = swift_release(v62);
  v69 = v20;
  v70 = (void *)v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(v17 + 8))(v69, v16, v68);
  sub_100021A14((uint64_t)v3, &qword_100C13EB8);
  v71 = v14;
  v191 = v14;
  v72 = (uint64_t)v197;
  v73 = v161;
  sub_10010FD3C();
  v74 = v157;
  sub_10000AB54(v72, v157, type metadata accessor for WeatherConditionBackgroundModifier);
  v75 = swift_allocObject(&unk_100B9ACD0, v199, v200);
  sub_1000EFAF8(v75);
  v203 = v67;
  v204 = v70;
  v205 = v64;
  v206 = v66;
  v76 = sub_10009885C((uint64_t)&v203, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  v77 = v159;
  View.onChange<A>(of:initial:_:)(v73, 0, sub_100900080, v75, v160, v166, v76, v78);
  swift_release(v75);
  sub_100098748(v73, *(uint64_t (**)(uint64_t, uint64_t))(v167 + 8));
  sub_1000BDBEC((uint64_t)&v194);
  v79 = (uint64_t)v197;
  v80 = (char *)v197 + *(int *)(v71 + 96);
  v81 = *(_QWORD *)v80;
  v82 = *((_QWORD *)v80 + 1);
  v83 = v80[16];
  v84 = type metadata accessor for AnimatedBackgroundsUserDefaultsMonitor(0);
  sub_10000F1C8(&qword_100C13F20, type metadata accessor for AnimatedBackgroundsUserDefaultsMonitor);
  v86 = StateObject.wrappedValue.getter(v81, v82, v83, v84, v85);
  LODWORD(v192) = sub_10010E658();
  swift_release(v86);
  v87 = v74;
  sub_10000AB54(v79, v74, type metadata accessor for WeatherConditionBackgroundModifier);
  v88 = v199;
  v89 = sub_1000BED60((uint64_t)&unk_100B9ACF8, v199);
  v90 = v198;
  sub_10010E534(v87, v89 + v198);
  v91 = v164;
  v92 = v163;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 16))(v163, v77, v165);
  v93 = v193;
  v94 = v92 + *(int *)(v193 + 36);
  *(_BYTE *)v94 = v192 & 1;
  *(_QWORD *)(v94 + 8) = sub_100900090;
  *(_QWORD *)(v94 + 16) = v89;
  sub_100098748(v77, *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8));
  v95 = v191;
  v96 = v197;
  LOBYTE(v203) = *((_BYTE *)v197 + *(int *)(v191 + 64));
  v97 = v87;
  sub_10000AB54((uint64_t)v197, v87, type metadata accessor for WeatherConditionBackgroundModifier);
  v98 = sub_1000BED60((uint64_t)&unk_100B9AD20, v88);
  v99 = v97;
  sub_10010E534(v97, v98 + v90);
  v100 = sub_10010FB34();
  View.onChange<A>(of:initial:_:)(&v203, 0, sub_1009000B0, v98, v93, &type metadata for Bool, v100, &protocol witness table for Bool);
  sub_10009925C();
  sub_100021A14(v92, &qword_100C13ED0);
  v101 = (char *)v96 + *(int *)(v95 + 100);
  v102 = *(_QWORD *)v101;
  LOBYTE(v97) = v101[8];
  sub_10008D47C(*(_QWORD *)v101, v97);
  sub_100109B54();
  LOBYTE(v93) = v103;
  sub_1000B15F8(v102, v97);
  LOBYTE(v201) = v93 & 1;
  sub_10000AB54((uint64_t)v96, v99, type metadata accessor for WeatherConditionBackgroundModifier);
  v104 = v199;
  v105 = sub_1000BED60((uint64_t)&unk_100B9AD48, v199);
  sub_1000C6934(v105);
  v203 = v193;
  v204 = &type metadata for Bool;
  v205 = v100;
  v206 = &protocol witness table for Bool;
  v106 = sub_10009885C((uint64_t)&v203, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v107 = v168;
  v108 = v169;
  View.onChange<A>(of:initial:_:)(&v201, 0, sub_1009000C0, v105, v169, &type metadata for Bool, v106, &protocol witness table for Bool);
  sub_10009925C();
  v109 = sub_1000BDBEC((uint64_t)&v202);
  v110 = v173;
  sub_10010FD70(v109);
  sub_10000AB54((uint64_t)v96, v99, type metadata accessor for WeatherConditionBackgroundModifier);
  v111 = swift_allocObject(&unk_100B9AD70, v104, v200);
  sub_1000C6934(v111);
  v203 = v108;
  v204 = &type metadata for Bool;
  v205 = v106;
  v112 = (uint64_t)v96;
  v206 = &protocol witness table for Bool;
  v113 = sub_10009885C((uint64_t)&v203, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v114 = sub_10010E5DC();
  v115 = v171;
  v194 = v113;
  View.onChange<A>(of:initial:_:)(v110, 0, sub_1009000D0, v111, v171, v196, v113, v114);
  sub_10009925C();
  sub_100021A14(v110, &qword_100C0A0A0);
  (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v107, v115);
  v116 = *v96;
  if (*v96)
  {
    swift_retain();
    v117 = sub_10010E6C8();
    v119 = v118;
    v120 = v117;
    swift_release(v116);
    v201 = v119;
    v202 = v120;
    sub_10000AB54((uint64_t)v96, v99, type metadata accessor for WeatherConditionBackgroundModifier);
    v121 = swift_allocObject(&unk_100B9AD98, v199, v200);
    sub_1000C6934(v121);
    v203 = v115;
    v204 = v196;
    v205 = v194;
    v206 = (void *)v114;
    v122 = sub_10009885C((uint64_t)&v203, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
    v123 = sub_10010E73C();
    v124 = v177;
    v125 = v176;
    v126 = v122;
    v127 = v195;
    View.onChange<A>(of:initial:_:)(&v201, 0, sub_100150968, v121, v176, &type metadata for LocationViewCollisionOptions.PublishedValue, v126, v123);
    swift_release(v121);
    v128 = swift_bridgeObjectRelease(v202);
    (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, __n128))(v175 + 8))(v127, v125, v128);
    sub_10000AB54((uint64_t)v96, v99, type metadata accessor for WeatherConditionBackgroundModifier);
    v129 = v199;
    v130 = sub_1000DC830((uint64_t)&unk_100B9ADC0);
    sub_1000C6934(v130);
    v131 = v179;
    v132 = v181;
    v133 = v180;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 16))(v181, v124, v180);
    v134 = (uint64_t (**)())(v132 + *(int *)(v174 + 36));
    *v134 = sub_1001505C0;
    v134[1] = (uint64_t (*)())v130;
    v134[2] = 0;
    v134[3] = 0;
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v124, v133);
    sub_10000AB54(v112, v99, type metadata accessor for WeatherConditionBackgroundModifier);
    v135 = sub_1000DC830((uint64_t)&unk_100B9ADE8);
    sub_1000C6934(v135);
    v136 = v183;
    sub_100037794(v132, v183, &qword_100C13EF8);
    v137 = (_QWORD *)(v136 + *(int *)(v178 + 36));
    *v137 = 0;
    v137[1] = 0;
    v137[2] = sub_1009000E8;
    v137[3] = v135;
    sub_100021A14(v132, &qword_100C13EF8);
    v196 = (id)objc_opt_self(NSNotificationCenter);
    v138 = objc_msgSend(v196, "defaultCenter");
    v139 = v188;
    sub_1000F3F18((uint64_t)UIApplicationDidBecomeActiveNotification);

    sub_10000AB54(v112, v99, type metadata accessor for WeatherConditionBackgroundModifier);
    v140 = sub_1000DC830((uint64_t)&unk_100B9AE10);
    sub_1000C6934(v140);
    v141 = v186;
    sub_100037794(v136, v186, &qword_100C13F00);
    v142 = v99;
    v143 = v182;
    v144 = v141 + *(int *)(v182 + 52);
    v195 = *(void (**)(_QWORD, _QWORD, _QWORD))(v187 + 16);
    v145 = v129;
    v146 = v189;
    v195(v144, v139, v189);
    v147 = (uint64_t (**)(uint64_t))(v141 + *(int *)(v143 + 56));
    *v147 = sub_1001509E0;
    v147[1] = (uint64_t (*)(uint64_t))v140;
    sub_10003BE08();
    sub_100021A14(v136, &qword_100C13F00);
    v148 = objc_msgSend(v196, "defaultCenter");
    sub_1000F3F18((uint64_t)UIApplicationWillResignActiveNotification);

    sub_10000AB54((uint64_t)v197, v142, type metadata accessor for WeatherConditionBackgroundModifier);
    v149 = swift_allocObject(&unk_100B9AE38, v145, v200);
    sub_1000EFAF8(v149);
    v150 = v185;
    sub_100037794(v141, v185, &qword_100C13F08);
    v151 = v184;
    v195(v150 + *(int *)(v184 + 52), v139, v146);
    v152 = (uint64_t (**)(uint64_t))(v150 + *(int *)(v151 + 56));
    *v152 = sub_1009000FC;
    v152[1] = (uint64_t (*)(uint64_t))v149;
    sub_10003BE08();
    sub_100021A14(v141, &qword_100C13F08);
    sub_1000F111C(v150, v190, &qword_100C13E80);
  }
  else
  {
    v153 = v96[1];
    v154 = type metadata accessor for LocationViewCollisionOptions(0);
    sub_10000F1C8(&qword_100BCCB38, type metadata accessor for LocationViewCollisionOptions);
    EnvironmentObject.error()(0, v153, v154, v155);
    __break(1u);
  }
}

uint64_t sub_10010E534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for WeatherConditionBackgroundModifier(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C13DB0, (uint64_t)&nominal type descriptor for WeatherConditionBackgroundModifier);
}

uint64_t sub_10010E58C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for AnimatedBackgroundsUserDefaultsMonitor(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for AnimatedBackgroundsUserDefaultsMonitor(uint64_t a1)
{
  return sub_100098190(a1, qword_100C13B88, (uint64_t)&nominal type descriptor for AnimatedBackgroundsUserDefaultsMonitor);
}

unint64_t sub_10010E5DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC5BA8;
  if (!qword_100BC5BA8)
  {
    v1 = sub_100075EB0(&qword_100C0A0A0);
    sub_100086DA4(&qword_100BC5BB0, (uint64_t (*)(uint64_t))&type metadata accessor for TargetWindowSizeClass, (uint64_t)&protocol conformance descriptor for TargetWindowSizeClass);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BC5BA8);
  }
  return result;
}

uint64_t sub_10010E658()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1009D8BD8);
  v2 = swift_getKeyPath(&unk_1009D8C00);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10010E6C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[2];

  KeyPath = swift_getKeyPath(&unk_1009D0810);
  v2 = swift_getKeyPath(&unk_1009D0838);
  static Published.subscript.getter(v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4[1];
}

unint64_t sub_10010E73C()
{
  unint64_t result;

  result = qword_100C13F40;
  if (!qword_100C13F40)
  {
    result = swift_getWitnessTable(&unk_1009D075C, &type metadata for LocationViewCollisionOptions.PublishedValue);
    atomic_store(result, (unint64_t *)&qword_100C13F40);
  }
  return result;
}

void sub_10010E778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1000986AC();
  v29 = v2;
  sub_1000BA294(&qword_100C13E80);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000BA294(&qword_100C13E88);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  v12 = sub_1000BA294(&qword_100C13E90);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_10004A2E8();
  v14 = sub_1000ED3B8();
  v15 = v0 + *(int *)(v14 + 32);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_10008D47C(*(_QWORD *)v15, v17);
  sub_100109B54();
  v19 = v18;
  sub_1000B15F8(v16, v17);
  if ((v19 & 1) != 0)
  {
    v20 = *(_QWORD *)(v0 + *(int *)(v14 + 56));
    swift_retain();
    v22 = static Edge.Set.all.getter(v21);
    v23 = sub_1000BA294(&qword_100C13EA8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v1, v29, v23);
    v24 = v1 + *(int *)(v12 + 36);
    *(_QWORD *)v24 = v20;
    *(_BYTE *)(v24 + 8) = v22;
    v25 = &qword_100C13E90;
    sub_1000FDAA8(v1);
    swift_storeEnumTagMultiPayload(v11, v7, 0);
    sub_10010FCA0();
    sub_10003D2DC(&qword_100C13EB0, &qword_100C13E80);
    sub_1000BF058(v26);
    v27 = v1;
  }
  else
  {
    sub_10010D7C0(v29, v6);
    v25 = &qword_100C13E80;
    sub_1000FDAA8(v6);
    swift_storeEnumTagMultiPayload(v11, v7, 1);
    sub_10010FCA0();
    sub_10003D2DC(&qword_100C13EB0, &qword_100C13E80);
    sub_1000BF058(v28);
    v27 = v6;
  }
  sub_100021A14(v27, v25);
  sub_100098640();
}

uint64_t sub_10010E958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;

  v0 = type metadata accessor for WeatherConditionBackgroundOptions(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BackgroundAnimationData(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BackgroundAnimationData.Model(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  WeatherConditionBackgroundModel.animationData.getter(v12);
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == enum case for BackgroundAnimationData.loaded(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    v14 = BackgroundAnimationData.Model.options.getter(v13);
    v15 = WeatherConditionBackgroundOptions.applyLegibilityScrim.getter(v14);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v15 = 0;
  }
  return v15 & 1;
}

void sub_10010EAF4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE v28[4];
  int v29;
  uint64_t v30;

  v30 = a3;
  v29 = a2;
  v6 = sub_1000BA294(&qword_100C13FA0);
  v7 = __chkstk_darwin(v6);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v28[-v10];
  v12 = sub_1000BA294(&qword_100C13FA8);
  __chkstk_darwin(v12);
  v14 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1000BA294(&qword_100C13FB0);
  v16 = __chkstk_darwin(v15);
  v18 = &v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v20 = &v28[-v19];
  sub_10010ED90(a1, v14);
  sub_100037794((uint64_t)v14, (uint64_t)v18, &qword_100C13FA8);
  *(_QWORD *)&v18[*(int *)(v15 + 36)] = 0x409F400000000000;
  sub_100021A14((uint64_t)v14, &qword_100C13FA8);
  sub_1000F111C((uint64_t)v18, (uint64_t)v20, &qword_100C13FB0);
  v22 = static Color.black.getter(v21);
  v23 = 0.07;
  if ((v29 & 1) == 0)
    v23 = 0.0;
  v24 = Color.opacity(_:)(v23);
  swift_release(v22);
  v25 = sub_1000BA294(&qword_100C13EA8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v11, v30, v25);
  *(_QWORD *)&v11[*(int *)(v6 + 36)] = 0x409F480000000000;
  sub_100037794((uint64_t)v20, (uint64_t)v18, &qword_100C13FB0);
  sub_100037794((uint64_t)v11, (uint64_t)v9, &qword_100C13FA0);
  sub_100037794((uint64_t)v18, a4, &qword_100C13FB0);
  v26 = sub_1000BA294(&qword_100C13FB8);
  v27 = (uint64_t *)(a4 + *(int *)(v26 + 48));
  *v27 = v24;
  v27[1] = 0x409F440000000000;
  sub_100037794((uint64_t)v9, a4 + *(int *)(v26 + 64), &qword_100C13FA0);
  swift_retain();
  sub_100021A14((uint64_t)v11, &qword_100C13FA0);
  sub_100021A14((uint64_t)v20, &qword_100C13FB0);
  sub_100021A14((uint64_t)v9, &qword_100C13FA0);
  swift_release(v24);
  sub_100021A14((uint64_t)v18, &qword_100C13FB0);
}

uint64_t sub_10010ED90@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;

  v121 = a2;
  v111 = sub_1000BA294(&qword_100C13FC0);
  __chkstk_darwin(v111);
  v109 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1000BA294(&qword_100C13FC8);
  __chkstk_darwin(v118);
  v120 = (uint64_t)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_1000BA294(&qword_100C13FD0);
  __chkstk_darwin(v110);
  v116 = (uint64_t)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_1000BA294(&qword_100C13FD8);
  __chkstk_darwin(v119);
  v112 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100C13FE0);
  __chkstk_darwin(v7);
  v108 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100C13FE8);
  __chkstk_darwin(v9);
  v107 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1000BA294(&qword_100C13FF0);
  v11 = __chkstk_darwin(v106);
  v103 = (uint64_t)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (uint64_t)&v102 - v13;
  v14 = sub_1000BA294(&qword_100C13F58);
  __chkstk_darwin(v14);
  v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WeatherVFXViewModel(0);
  v113 = *(_QWORD *)(v17 - 8);
  v114 = v17;
  __chkstk_darwin(v17);
  v105 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1000BA294(&qword_100C13FF8);
  __chkstk_darwin(v115);
  v20 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BackgroundAnimationKind(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000BA294(&qword_100C14000);
  v26 = __chkstk_darwin(v25);
  v124 = (char *)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v123 = (char *)&v102 - v28;
  v29 = type metadata accessor for AnimatedGradient(0);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v102 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = type metadata accessor for AnimatedLinearGradient(0);
  v126 = *(_QWORD *)(v117 - 8);
  v32 = __chkstk_darwin(v117);
  v122 = (char *)&v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v102 - v34;
  v36 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  v37 = sub_1000BA294(&qword_100C13D28);
  State.wrappedValue.getter(v31, v37);
  v125 = v35;
  v38 = a1;
  v39 = AnimatedLinearGradient.init(gradient:)(v31);
  WeatherConditionBackgroundModel.animationKind.getter(v39);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v24, v21);
  if (v40 == enum case for BackgroundAnimationKind.vfx(_:))
  {
    v41 = (uint64_t)v105;
    v42 = v113;
    v43 = v108;
    v44 = (uint64_t)v107;
    v109 = v20;
    v45 = v106;
    WeatherVFXConditionBackground.backgroundEffectModel.getter();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v114) == 1)
    {
      sub_100021A14((uint64_t)v16, &qword_100C13F58);
      v46 = (uint64_t)v109;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v109, 1, 1, v45);
    }
    else
    {
      v66 = v16;
      v67 = v114;
      v68 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v41, v66, v114);
      *v43 = static Alignment.center.getter(v68);
      v43[1] = v69;
      v70 = sub_1000BA294(&qword_100C14048);
      sub_1000325B8(v38, v41, (uint64_t)v43 + *(int *)(v70 + 44));
      sub_100037794((uint64_t)v43, v44, &qword_100C13FE0);
      sub_100021A14((uint64_t)v43, &qword_100C13FE0);
      if ((WeatherVFXConditionBackground.isLoaded.getter() & 1) != 0)
        v71 = 1.0;
      else
        v71 = 0.0;
      v72 = v103;
      sub_100037794(v44, v103, &qword_100C13FE8);
      *(double *)(v72 + *(int *)(v45 + 36)) = v71;
      sub_100021A14(v44, &qword_100C13FE8);
      v73 = v104;
      sub_1000F111C(v72, v104, &qword_100C13FF0);
      v46 = (uint64_t)v109;
      sub_1000F111C(v73, (uint64_t)v109, &qword_100C13FF0);
      _s7Weather24LocationCompositionStateOwst_0(v46, 0, 1, v45);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v41, v67);
    }
    v74 = v120;
    v57 = v121;
    v76 = v118;
    v75 = v119;
    v78 = v111;
    v77 = (uint64_t)v112;
    v79 = v110;
    v80 = v46;
    v81 = v46;
    v82 = v116;
    v58 = v117;
    sub_100037794(v80, v116, &qword_100C13FF8);
    swift_storeEnumTagMultiPayload(v82, v79, 0);
    v83 = sub_10010FA4C();
    v84 = sub_10010F744();
    _ConditionalContent<>.init(storage:)(v82, v115, v78, v83, v84);
    sub_100037794(v77, v74, &qword_100C13FD8);
    swift_storeEnumTagMultiPayload(v74, v76, 0);
    v85 = sub_10010F9E0();
    v86 = (uint64_t)v123;
    _ConditionalContent<>.init(storage:)(v74, v75, &type metadata for EmptyView, v85, &protocol witness table for EmptyView);
    sub_100021A14(v77, &qword_100C13FD8);
    sub_100021A14(v81, &qword_100C13FF8);
    v87 = (uint64_t)v124;
    v65 = v125;
    v88 = v122;
    v64 = v126;
  }
  else
  {
    v47 = (uint64_t)v109;
    if (v40 == enum case for BackgroundAnimationKind.mica(_:))
    {
      v48 = a1 + *(int *)(v36 + 108);
      v49 = *(_QWORD *)v48;
      v50 = *(_QWORD *)(v48 + 8);
      v51 = *(unsigned __int8 *)(v48 + 16);
      v52 = type metadata accessor for WeatherMicaConditionBackground(0);
      sub_10000F1C8(&qword_100C13F48, type metadata accessor for WeatherMicaConditionBackground);
      v54 = v53;
      v55 = StateObject.wrappedValue.getter(v49, v50, v51, v52, v53);
      v56 = sub_1002EFF10();
      swift_release(v55);
      v57 = v121;
      v58 = v117;
      if ((v56 & 1) != 0)
      {
        v59 = StateObject.wrappedValue.getter(v49, v50, v51, v52, v54);
        v60 = sub_1002EFE64();
        v61 = swift_release(v59);
        v62 = v47;
        MicaView.init(animation:)(v60, v61);
        v63 = 0;
        v65 = v125;
        v64 = v126;
      }
      else
      {
        v63 = 1;
        v65 = v125;
        v64 = v126;
        v62 = v47;
      }
      v91 = type metadata accessor for MicaView(0);
      _s7Weather24LocationCompositionStateOwst_0(v62, v63, 1, v91);
      v92 = v116;
      sub_100037794(v62, v116, &qword_100C13FC0);
      swift_storeEnumTagMultiPayload(v92, v110, 1);
      v93 = sub_10010FA4C();
      v94 = sub_10010F744();
      v95 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v92, v115, v111, v93, v94);
      v96 = v120;
      sub_100037794(v95, v120, &qword_100C13FD8);
      swift_storeEnumTagMultiPayload(v96, v118, 0);
      v97 = sub_10010F9E0();
      v86 = (uint64_t)v123;
      _ConditionalContent<>.init(storage:)(v96, v119, &type metadata for EmptyView, v97, &protocol witness table for EmptyView);
      sub_100021A14(v95, &qword_100C13FD8);
      sub_100021A14(v62, &qword_100C13FC0);
      v87 = (uint64_t)v124;
      v88 = v122;
    }
    else
    {
      v89 = v120;
      swift_storeEnumTagMultiPayload(v120, v118, 1);
      v90 = sub_10010F9E0();
      v86 = (uint64_t)v123;
      _ConditionalContent<>.init(storage:)(v89, v119, &type metadata for EmptyView, v90, &protocol witness table for EmptyView);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      v57 = v121;
      v88 = v122;
      v87 = (uint64_t)v124;
      v65 = v125;
      v64 = v126;
      v58 = v117;
    }
  }
  v98 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v98(v88, v65, v58);
  sub_100037794(v86, v87, &qword_100C14000);
  v98(v57, v88, v58);
  v99 = sub_1000BA294(&qword_100C14040);
  sub_100037794(v87, (uint64_t)&v57[*(int *)(v99 + 48)], &qword_100C14000);
  sub_100021A14(v86, &qword_100C14000);
  v100 = *(void (**)(char *, uint64_t))(v64 + 8);
  v100(v65, v58);
  sub_100021A14(v87, &qword_100C14000);
  return ((uint64_t (*)(char *, uint64_t))v100)(v88, v58);
}

unint64_t sub_10010F744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C14030;
  if (!qword_100C14030)
  {
    v1 = sub_100075EB0(&qword_100C13FC0);
    sub_10000F1C8(&qword_100C14038, (uint64_t (*)(uint64_t))&type metadata accessor for MicaView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100C14030);
  }
  return result;
}

uint64_t sub_10010F7C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    sub_10010F94C();
    v8 = enum case for Color.RGBColorSpace.sRGB(_:);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
    v22 = a1;
    v10 = a1 + 64;
    do
    {
      v11 = *(double *)(v10 - 32);
      v12 = *(double *)(v10 - 24);
      v13 = *(double *)(v10 - 16);
      v14 = *(double *)(v10 - 8);
      v9(v6, v8, v2);
      v15 = Color.init(_:red:green:blue:opacity:)(v6, v11, v12, v13, v14);
      v16 = Gradient.Stop.init(color:location:)(v15);
      v18 = v17;
      v19 = _swiftEmptyArrayStorage[2];
      if (v19 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10010F94C();
      _swiftEmptyArrayStorage[2] = v19 + 1;
      v20 = &_swiftEmptyArrayStorage[2 * v19];
      v20[4] = v16;
      v20[5] = v18;
      v10 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }
  return Gradient.init(stops:)(_swiftEmptyArrayStorage);
}

void sub_10010F94C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10009AAE4();
  *v0 = v1;
}

double sub_10010F980(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_1000D55D4(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

double sub_10010F9B0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_1000D31B4(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

unint64_t sub_10010F9E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C14008;
  if (!qword_100C14008)
  {
    v1 = sub_100075EB0(&qword_100C13FD8);
    sub_10010FA4C();
    sub_10010F744();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C14008);
  }
  return result;
}

unint64_t sub_10010FA4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C14010;
  if (!qword_100C14010)
  {
    v1 = sub_100075EB0(&qword_100C13FF8);
    sub_1001561A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100C14010);
  }
  return result;
}

unint64_t sub_10010FAB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDD7F0;
  if (!qword_100BDD7F0)
  {
    v1 = sub_100075EB0(&qword_100BDD7C0);
    sub_100157390();
    sub_10000F1C8(&qword_100BDD7F8, type metadata accessor for FontWithSmallVariantModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDD7F0);
  }
  return result;
}

unint64_t sub_10010FB34()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = qword_100C13F28;
  if (!qword_100C13F28)
  {
    v1 = sub_100075EB0(&qword_100C13ED0);
    v2 = sub_100075EB0(&qword_100C13EC0);
    v3 = type metadata accessor for DynamicTypeSize(255);
    v4 = sub_100075EB0(&qword_100C13EB8);
    v5 = type metadata accessor for WeatherConditionBackgroundModel(255);
    sub_10003D2DC(&qword_100C13F18, &qword_100C13EB8);
    v7 = v6;
    sub_10000F1C8((unint64_t *)&qword_100BC4698, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherConditionBackgroundModel);
    v11 = v4;
    v12 = v5;
    v13 = v7;
    v14 = v8;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    v11 = v2;
    v12 = v3;
    v13 = OpaqueTypeConformance2;
    v14 = v10;
    swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10003D2DC(&qword_100C13F30, &qword_100C13F38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C13F28);
  }
  return result;
}

unint64_t sub_10010FCA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C13E98;
  if (!qword_100C13E98)
  {
    v1 = sub_100075EB0(&qword_100C13E90);
    sub_10003D2DC(&qword_100C13EA0, &qword_100C13EA8);
    sub_10003D2DC(&qword_100BE1E58, &qword_100BE1E60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C13E98);
  }
  return result;
}

void sub_10010FD3C()
{
  sub_1000BFEE4();
}

#error "10010FDE0: call analysis failed (funcsize=64)"

unint64_t sub_10010FE84()
{
  unint64_t result;

  result = qword_100BC53F0;
  if (!qword_100BC53F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100BC53F0);
  }
  return result;
}

void sub_10010FEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  sub_1000986AC();
  v5 = v4;
  v7 = v6;
  v8 = type metadata accessor for WeatherCondition(0);
  v40 = *(_QWORD *)(v8 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098694();
  sub_1000BA294(&qword_100BC3660);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BD8AA8);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v15 = sub_1000992A8();
  type metadata accessor for ConditionPickerMenuViewModel.Row(v15);
  sub_1000DBFF8();
  __chkstk_darwin(v16);
  sub_1000DABE8();
  __chkstk_darwin(v17);
  sub_1000BDE34();
  v19 = *(_QWORD *)(v7 + 16);
  if (v19 == *(_QWORD *)(v5 + 16))
  {
    v45 = v13;
    v46 = v12;
    if (v19)
    {
      if (v7 != v5)
      {
        v44 = v18;
        v39 = v0;
        sub_10003BE14();
        v22 = v21 & ~v20;
        v42 = *(_QWORD *)(v23 + 72);
        v24 = (uint64_t)v46;
        v43 = v7;
        v41 = v5;
        while (1)
        {
          sub_1000C018C(v7 + v22, (uint64_t)v3);
          sub_1000C018C(v5 + v22, (uint64_t)v2);
          v25 = v3[1];
          v26 = v2[1];
          v27 = *v3 == *v2 && v25 == v26;
          if (!v27 && (sub_100099264(*v3, v25, *v2, v26) & 1) == 0)
            break;
          v28 = (uint64_t)v2 + *(int *)(v44 + 20);
          sub_100095248();
          sub_1000C091C(v29, v30);
          sub_1000C091C(v28, v5);
          v31 = sub_1000DC638();
          sub_100088FC8(v31, v32, v8);
          if (v27)
          {
            v33 = sub_100088FC8(v5, 1, v8);
            if (!v27)
              goto LABEL_20;
            sub_10011E018();
          }
          else
          {
            sub_1000C091C(v1, v24);
            sub_100088FC8(v5, 1, v8);
            if (v34)
            {
              v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v24, v8);
LABEL_20:
              sub_1000988A0(v33, &qword_100BD8AA8);
              break;
            }
            v35 = v39;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v39, v5, v8);
            sub_10000F1C8((unint64_t *)&qword_100BC9EC8, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherCondition);
            v37 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v35, v8, v36);
            v38 = v35;
            v24 = (uint64_t)v46;
            sub_100117404(v38);
            sub_100117404(v24);
            sub_10011E018();
            if ((v37 & 1) == 0)
              break;
          }
          sub_100098DB8((uint64_t)v2);
          sub_100098DB8((uint64_t)v3);
          v5 = v41;
          v22 += v42;
          --v19;
          v7 = v43;
          if (!v19)
            goto LABEL_22;
        }
        sub_100079F9C((uint64_t)v2);
        sub_100079F9C((uint64_t)v3);
      }
    }
  }
LABEL_22:
  sub_100098640();
}

uint64_t sub_100110164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return swift_storeEnumTagMultiPayload(v3, v4, a3);
}

uint64_t sub_100110170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_release(a15);
}

uint64_t sub_100110178(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100110184(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

uint64_t sub_100110198(_QWORD *a1)
{
  uint64_t v1;

  sub_1000DB418(a1, v1);
  return v1;
}

uint64_t sub_1001101D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, a2, v3);
}

unint64_t sub_1001101E8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000DB418(v0, v1);
  return sub_100269E2C();
}

uint64_t sub_100110204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = v3;
  return dispatch thunk of Collection.subscript.read(v4 - 112, v2, v0, v1);
}

uint64_t sub_100110220()
{
  return type metadata accessor for DebugIncomingMessageViewController(0);
}

uint64_t sub_100110228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v4);
  return swift_allocObject(*(_QWORD *)(v5 - 216), v2, v3);
}

uint64_t sub_10011024C()
{
  return type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
}

id sub_100110268()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_100110274()
{
  uint64_t v0;

  return type metadata accessor for Binding(0, v0);
}

unint64_t sub_100110280()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1003B8840();
}

uint64_t sub_10011028C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void sub_100110298()
{
  void *v0;

}

double sub_1001102A8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56)).n128_u64[0];
  return result;
}

unint64_t sub_1001102B0()
{
  return sub_100483224();
}

uint64_t sub_1001102B8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 120));
}

uint64_t sub_1001102C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for WeatherAvailability(0);
}

uint64_t sub_1001102D8()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_1001102E0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 688) = a1;
  *(_QWORD *)(v3 - 696) = a2;

}

unint64_t sub_1001102F8()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10011030C()
{
  uint64_t v0;

  return sub_100410484(v0);
}

uint64_t sub_100110314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100110324()
{
  return dispatch thunk of Column.value.getter();
}

double sub_100110330()
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(0x8000000000000000).n128_u64[0];
  return result;
}

double sub_10011033C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

void sub_10011034C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000A3908(v3, v4, a3);
}

uint64_t sub_100110358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10011037C()
{
  uint64_t v0;

  return v0;
}

void sub_10011039C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

void sub_1001103A8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  unint64_t *v3;

  sub_100086DA4(v3, a2, v2);
}

uint64_t sub_1001103B4()
{
  return type metadata accessor for ViewState(0);
}

uint64_t sub_1001103BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 88) = result;
  return result;
}

uint64_t sub_1001103CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0, 0, 0, 1, a7, a7);
}

uint64_t sub_1001103E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

double sub_1001103F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 36))).n128_u64[0];
  return result;
}

__n128 sub_100110400(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __n128 a11, __int128 a12)
{
  __n128 result;

  a1[2] = a9;
  a1[3] = a10;
  result = a11;
  a1[4] = a11;
  a1[5] = a12;
  return result;
}

uint64_t sub_100110414()
{
  return type metadata accessor for ConditionUnits(0);
}

uint64_t sub_10011041C(uint64_t a1)
{
  uint64_t v1;

  return sub_10006BE60(a1, v1);
}

uint64_t sub_100110424(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 248));
}

uint64_t sub_100110434()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 84)));
}

void sub_100110444(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(v3, a2, a3);
}

uint64_t sub_10011044C()
{
  return DetailChartExtrema.maxValue.getter();
}

uint64_t sub_10011046C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 76)), *(_BYTE *)(v1 + *(int *)(v0 + 76) + 8));
  return sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 80)), *(_BYTE *)(v1 + *(int *)(v0 + 80) + 8));
}

void sub_1001104A8(char *a1)
{
  sub_10015574C(*a1);
}

uint64_t sub_1001104B4()
{
  uint64_t v0;

  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_1001104D0(uint64_t a1)
{
  return Location.id.getter(a1);
}

void sub_1001104D8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100488174(v1, *(_QWORD *)(a1 - 256));
}

uint64_t type metadata accessor for ConditionPickerMenuViewModel.Row(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD8B18, (uint64_t)&nominal type descriptor for ConditionPickerMenuViewModel.Row);
}

uint64_t sub_1001104FC()
{
  return type metadata accessor for Tips.Status(0);
}

uint64_t sub_100110510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 112), v1);
}

uint64_t sub_100110520()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10024F308(v0, v1);
}

void sub_100110538()
{
  sub_100549FE0();
}

uint64_t sub_100110550()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

uint64_t sub_100110574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v5, *(_QWORD *)(v6 - 176), a3, a4, a5);
}

uint64_t sub_100110580()
{
  return EnvironmentValues.init()();
}

uint64_t sub_100110588()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001105A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for WeatherCondition(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *sub_100110610(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for WeatherCondition(0);
  swift_bridgeObjectRetain(v4);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8))
  {
    v9 = sub_1000BA294(&qword_100BC3660);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_1001106CC()
{
  return CurrentWeather.date.getter();
}

uint64_t sub_1001106D8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 456), 1, 1, a1);
}

void sub_100110704(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000FF448(v2, a2);
}

__n128 *sub_10011070C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

unint64_t sub_100110718()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10029DEB0();
}

double sub_100110724()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104)).n128_u64[0];
  return result;
}

double sub_100110738(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return sub_100030DF0((uint64_t)va);
}

void sub_100110748(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000979AC(a1, v1);
}

uint64_t sub_100110750()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v0 + *(int *)(v1 + 32)));
}

uint64_t sub_10011075C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 128) + a1;
}

uint64_t sub_100110768(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

unint64_t sub_100110778()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 5;
  return sub_100731D14();
}

void sub_1001107A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;

  v3 = type metadata accessor for LocationComponentHeaderViewModel(0);
  v4 = (char *)sub_100110800 + 4 * byte_1009D7A11[swift_getEnumCaseMultiPayload(a2, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100110800()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t HourPrecipitationChartViewModel;
  int *v77;
  void (*v78)(char *, char *, uint64_t, __n128);
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t, __n128);
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t, __n128);
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  int *v165;
  void (*v166)(char *, char *, uint64_t, __n128);
  __n128 v167;
  int *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  void (*v192)(char *, char *, uint64_t, __n128);
  __n128 v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  void (*v201)(char *, char *, uint64_t, __n128);
  __n128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  int EnumCaseMultiPayload;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  _BYTE *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE *v257;
  _BYTE *v258;
  uint64_t v259;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(char *, char *, uint64_t, __n128);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  int *v290;
  int *v291;
  int *v292;
  int *v293;
  int *v294;
  int *v295;

  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v5;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v6;
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 48) = v7;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_storeEnumTagMultiPayload(v0, v3, 0);
  v8 = v2[5];
  v9 = (_QWORD *)(v0 + v8);
  v10 = (_QWORD *)(v1 + v8);
  v11 = type metadata accessor for LocationComponentViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
      *v9 = *v10;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
      *(_OWORD *)(v9 + 3) = *(_OWORD *)(v10 + 3);
      v12 = v10[5];
      v13 = v10[6];
      v9[5] = v12;
      v9[6] = v13;
      v15 = v10[7];
      v14 = v10[8];
      v9[7] = v15;
      v9[8] = v14;
      v17 = v10[9];
      v16 = v10[10];
      v9[9] = v17;
      v9[10] = v16;
      v18 = v10[11];
      v9[11] = v18;
      *((_WORD *)v9 + 48) = *((_WORD *)v10 + 48);
      v19 = v10[13];
      v9[13] = v19;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v20 = v9;
      v21 = v11;
      v22 = 0;
      goto LABEL_60;
    case 1u:
      v23 = *v10;
      *v9 = *v10;
      v24 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
      v25 = v24[5];
      v26 = (char *)v9 + v25;
      *(_QWORD *)(v4 - 88) = v11;
      v27 = (char *)v10 + v25;
      swift_bridgeObjectRetain(v23);
      v28 = sub_1000BA294(&qword_100BC4E68);
      v29 = v2;
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v30(v26, v27, v28);
      v30((char *)v9 + v24[6], (char *)v10 + v24[6], v28);
      v30((char *)v9 + v24[7], (char *)v10 + v24[7], v28);
      v2 = v29;
      v31 = v24[8];
      v32 = (_QWORD *)((char *)v9 + v31);
      v33 = (_QWORD *)((char *)v10 + v31);
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      v35 = v24[9];
      v36 = (_QWORD *)((char *)v9 + v35);
      v37 = (_QWORD *)((char *)v10 + v35);
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v38);
      v20 = v9;
      v21 = *(_QWORD *)(v4 - 88);
      v22 = 1;
      goto LABEL_60;
    case 2u:
      *(_QWORD *)(v4 - 88) = v11;
      v39 = v10[1];
      *v9 = *v10;
      v9[1] = v39;
      v40 = v10[3];
      v9[2] = v10[2];
      v9[3] = v40;
      v284 = type metadata accessor for FeelsLikeComponentViewModel(0);
      v41 = *(int *)(v284 + 24);
      v42 = (_QWORD *)((char *)v9 + v41);
      v43 = (_QWORD *)((char *)v10 + v41);
      v44 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v40);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
      {
        v45 = sub_1000BA294(&qword_100BC3360);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v160 = v43[1];
        *v42 = *v43;
        v42[1] = v160;
        v282 = v44;
        v161 = *(int *)(v44 + 20);
        v162 = (char *)v42 + v161;
        v163 = (char *)v43 + v161;
        v164 = type metadata accessor for TemperatureScaleConfiguration(0);
        v276 = (uint64_t)v42;
        v165 = v2;
        v166 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v164 - 8) + 16);
        v167 = swift_bridgeObjectRetain(v160);
        v166(v162, v163, v164, v167);
        v2 = v165;
        v168 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v162[v168[5]] = *(_QWORD *)&v163[v168[5]];
        *(_QWORD *)&v162[v168[6]] = *(_QWORD *)&v163[v168[6]];
        *(_QWORD *)&v162[v168[7]] = *(_QWORD *)&v163[v168[7]];
        v169 = v168[8];
        v170 = &v162[v169];
        v171 = &v163[v169];
        v173 = *(_QWORD *)v171;
        v172 = *((_QWORD *)v171 + 1);
        *(_QWORD *)v170 = v173;
        *((_QWORD *)v170 + 1) = v172;
        v162[v168[9]] = v163[v168[9]];
        swift_bridgeObjectRetain(v172);
        _s7Weather24LocationCompositionStateOwst_0(v276, 0, 1, v282);
      }
      v174 = *(_QWORD *)(v4 - 88);
      v175 = *(int *)(v284 + 28);
      v176 = (_QWORD *)((char *)v9 + v175);
      v177 = (_QWORD *)((char *)v10 + v175);
      v178 = v177[1];
      *v176 = *v177;
      v176[1] = v178;
      swift_bridgeObjectRetain(v178);
      v20 = v9;
      v21 = v174;
      v22 = 2;
      goto LABEL_60;
    case 3u:
      v46 = *v10;
      *v9 = *v10;
      swift_bridgeObjectRetain(v46);
      v20 = v9;
      v21 = v11;
      v22 = 3;
      goto LABEL_60;
    case 4u:
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v47 = v10[2];
      v9[2] = v47;
      swift_bridgeObjectRetain(v47);
      v20 = v9;
      v21 = v11;
      v22 = 4;
      goto LABEL_60;
    case 5u:
      *(_QWORD *)(v4 - 88) = v11;
      v48 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v9, v10, v48);
      v49 = (int *)type metadata accessor for MapComponentViewModel(0);
      v50 = v49[5];
      v51 = (char *)v9 + v50;
      v52 = (char *)v10 + v50;
      v53 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v54 = v49[6];
      v55 = (_QWORD *)((char *)v9 + v54);
      v56 = (_QWORD *)((char *)v10 + v54);
      v57 = type metadata accessor for WeatherData(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
      {
        v58 = sub_1000BA294(&qword_100BC3460);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        v59 = *(_QWORD *)(v4 - 88);
        goto LABEL_59;
      }
      v277 = v49;
      v283 = v55;
      v179 = (int *)v57;
      v180 = v56[1];
      *v55 = *v56;
      v55[1] = v180;
      v289 = v179;
      v181 = v179[5];
      v182 = (char *)v55 + v181;
      v183 = (char *)v56 + v181;
      v184 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v180);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v183, 1, v184))
      {
        v185 = sub_1000BA294(&qword_100BC3340);
        memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v182, v183, v184);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v182, 0, 1, v184);
      }
      v207 = v289[6];
      v208 = (char *)v283 + v207;
      v209 = (char *)v56 + v207;
      v210 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v210 - 8) + 16))(v208, v209, v210);
      v211 = v289[7];
      v212 = (char *)v283 + v211;
      v213 = (char *)v56 + v211;
      v214 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v213, 1, v214))
      {
        v215 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
      }
      else
      {
        v216 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v216 - 8) + 16))(v212, v213, v216);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v212, 0, 1, v214);
      }
      v217 = v289[8];
      v218 = (_QWORD *)((char *)v283 + v217);
      v219 = (_QWORD *)((char *)v56 + v217);
      v220 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v219, v220);
      if (EnumCaseMultiPayload == 1)
      {
        v226 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v226 - 8) + 16))(v218, v219, v226);
        v223 = v218;
        v224 = v220;
        v225 = 1;
        goto LABEL_47;
      }
      if (!EnumCaseMultiPayload)
      {
        v222 = v219[1];
        *v218 = *v219;
        v218[1] = v222;
        swift_bridgeObjectRetain(v222);
        v223 = v218;
        v224 = v220;
        v225 = 0;
LABEL_47:
        swift_storeEnumTagMultiPayload(v223, v224, v225);
        goto LABEL_49;
      }
      memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
LABEL_49:
      v49 = v277;
      v227 = (uint64_t)v283;
      v228 = v289[9];
      v229 = (char *)v283 + v228;
      v230 = (char *)v56 + v228;
      v231 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v230, 1, v231))
      {
        v232 = sub_1000BA294(&qword_100BC3350);
        memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
        v59 = *(_QWORD *)(v4 - 88);
      }
      else
      {
        v233 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v230, 1, v233))
        {
          v234 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(v229, v230, v233);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v229, 0, 1, v233);
        }
        v272 = v231;
        v278 = (uint64_t)v229;
        v235 = *(int *)(v231 + 20);
        v236 = &v229[v235];
        v237 = &v230[v235];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v230[v235], 1, v233))
        {
          v238 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(v236, v237, v233);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v233);
        }
        v59 = *(_QWORD *)(v4 - 88);
        _s7Weather24LocationCompositionStateOwst_0(v278, 0, 1, v272);
        v227 = (uint64_t)v283;
      }
      _s7Weather24LocationCompositionStateOwst_0(v227, 0, 1, (uint64_t)v289);
LABEL_59:
      v239 = v49[7];
      v240 = (_QWORD *)((char *)v9 + v239);
      v241 = (_QWORD *)((char *)v10 + v239);
      v242 = v241[1];
      *v240 = *v241;
      v240[1] = v242;
      swift_bridgeObjectRetain(v242);
      v20 = v9;
      v21 = v59;
      v22 = 5;
LABEL_60:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
LABEL_61:
      v243 = v2[7];
      *(_WORD *)(v0 + v2[6]) = *(_WORD *)(v1 + v2[6]);
      v244 = (_BYTE *)(v0 + v243);
      v245 = (_BYTE *)(v1 + v243);
      v246 = type metadata accessor for LocationComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v245, 1, v246))
      {
        v247 = sub_1000BA294(&qword_100BDA950);
        memcpy(v244, v245, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v245, v246))
        {
          case 0u:
            v248 = type metadata accessor for URL(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v248 - 8) + 16))(v244, v245, v248);
            v249 = sub_1000BA294(&qword_100BC5FE8);
            v244[*(int *)(v249 + 48)] = v245[*(int *)(v249 + 48)];
            v250 = v244;
            v251 = v246;
            v252 = 0;
            goto LABEL_69;
          case 1u:
            v253 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v253 - 8) + 16))(v244, v245, v253);
            v250 = v244;
            v251 = v246;
            v252 = 1;
            goto LABEL_69;
          case 2u:
            v254 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v254 - 8) + 16))(v244, v245, v254);
            v255 = sub_1000BA294(&qword_100BC5FF8);
            v244[*(int *)(v255 + 48)] = v245[*(int *)(v255 + 48)];
            v250 = v244;
            v251 = v246;
            v252 = 2;
            goto LABEL_69;
          case 4u:
            *v244 = *v245;
            v256 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
            v257 = &v244[v256];
            v258 = &v245[v256];
            v259 = type metadata accessor for Location(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v257, v258, v259);
            v250 = v244;
            v251 = v246;
            v252 = 4;
LABEL_69:
            swift_storeEnumTagMultiPayload(v250, v251, v252);
            break;
          default:
            memcpy(v244, v245, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v244, 0, 1, v246);
      }
      return v0;
    case 6u:
      v60 = v10[1];
      *v9 = *v10;
      v9[1] = v60;
      v61 = *((unsigned __int8 *)v10 + 32);
      swift_bridgeObjectRetain(v60);
      v290 = v2;
      *(_QWORD *)(v4 - 88) = v11;
      if (v61 == 255)
      {
        *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
        *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
      }
      else
      {
        v62 = v10[2];
        v63 = v10[3];
        sub_100121DEC(v62, v63, v61);
        v9[2] = v62;
        v9[3] = v63;
        *((_BYTE *)v9 + 32) = v61;
      }
      v186 = v10[5];
      v9[5] = v186;
      v187 = (int *)type metadata accessor for MoonComponentViewModel(0);
      v188 = v187[7];
      v189 = (char *)v9 + v188;
      v190 = (char *)v10 + v188;
      v191 = type metadata accessor for Date(0);
      v192 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v191 - 8) + 16);
      v193 = swift_bridgeObjectRetain(v186);
      v192(v189, v190, v191, v193);
      *((_BYTE *)v9 + v187[8]) = *((_BYTE *)v10 + v187[8]);
      *(_QWORD *)((char *)v9 + v187[9]) = *(_QWORD *)((char *)v10 + v187[9]);
      swift_storeEnumTagMultiPayload(v9, *(_QWORD *)(v4 - 88), 6);
      v2 = v290;
      goto LABEL_61;
    case 7u:
      v64 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v10, v64) == 1)
      {
        v285 = v64;
        *(_QWORD *)(v4 - 88) = v11;
        v65 = v10[1];
        *v9 = *v10;
        v9[1] = v65;
        v66 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v67 = v66[5];
        v68 = (char *)v9 + v67;
        v69 = (char *)v10 + v67;
        v70 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v65);
        v291 = v2;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
        {
          v71 = sub_1000BA294(&qword_100BD4280);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
        }
        v194 = v66[6];
        v195 = (_QWORD *)((char *)v9 + v194);
        v196 = (_QWORD *)((char *)v10 + v194);
        v197 = v196[1];
        *v195 = *v196;
        v195[1] = v197;
        v198 = v66[7];
        v199 = (char *)v9 + v198;
        v200 = (char *)v10 + v198;
        v201 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v70 - 8) + 16);
        v202 = swift_bridgeObjectRetain(v197);
        v201(v199, v200, v70, v202);
        v203 = v66[8];
        v204 = (char *)v9 + v203;
        v205 = (char *)v10 + v203;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10 + v203, 1, v70))
        {
          v206 = sub_1000BA294(&qword_100BD4280);
          memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v201)(v204, v205, v70);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v70);
        }
        v2 = v291;
        *((_BYTE *)v9 + v66[9]) = *((_BYTE *)v10 + v66[9]);
        swift_storeEnumTagMultiPayload(v9, v285, 1);
        v11 = *(_QWORD *)(v4 - 88);
      }
      else
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      v20 = v9;
      v21 = v11;
      v22 = 7;
      goto LABEL_60;
    case 8u:
      v72 = v10[1];
      *v9 = *v10;
      v9[1] = v72;
      v73 = *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      v74 = (char *)v9 + v73;
      v75 = (char *)v10 + v73;
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      v77 = v2;
      v78 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(HourPrecipitationChartViewModel - 8)
                                                                   + 16);
      v79 = swift_bridgeObjectRetain(v72);
      v78(v74, v75, HourPrecipitationChartViewModel, v79);
      v2 = v77;
      v20 = v9;
      v21 = v11;
      v22 = 8;
      goto LABEL_60;
    case 9u:
      v80 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v9, v10, v80);
      v81 = type metadata accessor for NotificationsOptInComponentViewModel(0);
      *((_BYTE *)v9 + *(int *)(v81 + 20)) = *((_BYTE *)v10 + *(int *)(v81 + 20));
      v20 = v9;
      v21 = v11;
      v22 = 9;
      goto LABEL_60;
    case 0xAu:
      v82 = v10[1];
      *v9 = *v10;
      v9[1] = v82;
      v83 = v10[3];
      v9[2] = v10[2];
      v9[3] = v83;
      v84 = v10[5];
      v9[4] = v10[4];
      v9[5] = v84;
      v85 = v10[7];
      v9[6] = v10[6];
      v9[7] = v85;
      v86 = v10[9];
      v9[8] = v10[8];
      v9[9] = v86;
      v87 = v10[10];
      v88 = v10[11];
      v9[10] = v87;
      v9[11] = v88;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v88);
      v20 = v9;
      v21 = v11;
      v22 = 10;
      goto LABEL_60;
    case 0xBu:
      v89 = type metadata accessor for PressureTrend(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v9, v10, v89);
      v90 = (int *)type metadata accessor for PressureComponentViewModel(0);
      v91 = v90[5];
      v92 = (_QWORD *)((char *)v9 + v91);
      v93 = (_QWORD *)((char *)v10 + v91);
      v95 = *v93;
      v94 = v93[1];
      *v92 = v95;
      v92[1] = v94;
      v96 = v90[6];
      v97 = (_QWORD *)((char *)v9 + v96);
      v98 = (_QWORD *)((char *)v10 + v96);
      v99 = v98[1];
      *v97 = *v98;
      v97[1] = v99;
      v100 = v90[7];
      v101 = (_QWORD *)((char *)v9 + v100);
      v102 = (_QWORD *)((char *)v10 + v100);
      v103 = v102[1];
      *v101 = *v102;
      v101[1] = v103;
      *(_QWORD *)((char *)v9 + v90[8]) = *(_QWORD *)((char *)v10 + v90[8]);
      v104 = v90[9];
      v105 = (_QWORD *)((char *)v9 + v104);
      v106 = (_QWORD *)((char *)v10 + v104);
      v107 = v106[1];
      *v105 = *v106;
      v105[1] = v107;
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v107);
      v20 = v9;
      v21 = v11;
      v22 = 11;
      goto LABEL_60;
    case 0xDu:
      v108 = v10[1];
      *v9 = *v10;
      v9[1] = v108;
      v109 = v10[3];
      v9[2] = v10[2];
      v9[3] = v109;
      v111 = v10[4];
      v110 = v10[5];
      v9[4] = v111;
      v9[5] = v110;
      v113 = v10[6];
      v112 = v10[7];
      v9[6] = v113;
      v9[7] = v112;
      *(_QWORD *)(v4 - 88) = v11;
      v114 = v10[8];
      v9[8] = v114;
      v115 = type metadata accessor for SevereAlertComponentViewModel(0);
      v116 = *(int *)(v115 + 36);
      v279 = (char *)v9 + v116;
      v286 = v115;
      v273 = (char *)v10 + v116;
      v292 = v2;
      v117 = type metadata accessor for WeatherAlert.Prominence(0);
      v269 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v117 - 8) + 16);
      swift_bridgeObjectRetain(v108);
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRetain(v111);
      swift_bridgeObjectRetain(v113);
      v118 = swift_bridgeObjectRetain(v114);
      v119 = v117;
      v2 = v292;
      v269(v279, v273, v119, v118);
      *(_QWORD *)((char *)v9 + *(int *)(v286 + 40)) = *(_QWORD *)((char *)v10 + *(int *)(v286 + 40));
      v20 = v9;
      v21 = *(_QWORD *)(v4 - 88);
      v22 = 13;
      goto LABEL_60;
    case 0xEu:
      v120 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v9, v10, v120);
      v20 = v9;
      v21 = v11;
      v22 = 14;
      goto LABEL_60;
    case 0xFu:
      v121 = v10[1];
      *v9 = *v10;
      v9[1] = v121;
      v293 = v2;
      v122 = v10[3];
      v9[2] = v10[2];
      v9[3] = v122;
      v123 = v10[5];
      v9[4] = v10[4];
      v9[5] = v123;
      v124 = v10[7];
      v9[6] = v10[6];
      v9[7] = v124;
      v125 = v10[9];
      v9[8] = v10[8];
      v9[9] = v125;
      v126 = v10[11];
      v9[10] = v10[10];
      v9[11] = v126;
      *(_QWORD *)(v4 - 88) = v11;
      v127 = v10[13];
      v9[12] = v10[12];
      v9[13] = v127;
      v287 = v10[15];
      v9[14] = v10[14];
      v9[15] = v287;
      v280 = v10[17];
      v9[16] = v10[16];
      v9[17] = v280;
      v274 = v10[19];
      v9[18] = v10[18];
      v9[19] = v274;
      v270 = v10[21];
      v9[20] = v10[20];
      v9[21] = v270;
      v267 = v10[23];
      v9[22] = v10[22];
      v9[23] = v267;
      v128 = v10[24];
      v129 = v10[25];
      v9[24] = v128;
      v9[25] = v129;
      swift_bridgeObjectRetain(v121);
      v130 = v122;
      v2 = v293;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRetain(v123);
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRetain(v126);
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRetain(v287);
      swift_bridgeObjectRetain(v280);
      swift_bridgeObjectRetain(v274);
      swift_bridgeObjectRetain(v270);
      swift_bridgeObjectRetain(v267);
      swift_bridgeObjectRetain(v129);
      v20 = v9;
      v21 = *(_QWORD *)(v4 - 88);
      v22 = 15;
      goto LABEL_60;
    case 0x10u:
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v294 = v2;
      v131 = v10[3];
      v9[2] = v10[2];
      v9[3] = v131;
      v132 = type metadata accessor for UVIndexComponentViewModel(0);
      v133 = *(int *)(v132 + 28);
      v134 = (char *)v9 + v133;
      v135 = (char *)v10 + v133;
      v136 = type metadata accessor for WeatherDescription(0);
      v137 = *(_QWORD *)(v136 - 8);
      *(_QWORD *)(v4 - 88) = v11;
      v138 = *(void (**)(char *, char *, uint64_t, __n128))(v137 + 16);
      v139 = v131;
      v2 = v294;
      v140 = swift_bridgeObjectRetain(v139);
      v138(v134, v135, v136, v140);
      v141 = *(int *)(v132 + 32);
      v142 = *(_QWORD *)((char *)v10 + v141);
      *(_QWORD *)((char *)v9 + v141) = v142;
      swift_bridgeObjectRetain(v142);
      v20 = v9;
      v21 = *(_QWORD *)(v4 - 88);
      v22 = 16;
      goto LABEL_60;
    case 0x11u:
      v143 = v10[1];
      *v9 = *v10;
      v9[1] = v143;
      v144 = v2;
      v145 = v10[3];
      v9[2] = v10[2];
      v9[3] = v145;
      v146 = v10[5];
      v9[4] = v10[4];
      v9[5] = v146;
      swift_bridgeObjectRetain(v143);
      v147 = v145;
      v2 = v144;
      swift_bridgeObjectRetain(v147);
      swift_bridgeObjectRetain(v146);
      v20 = v9;
      v21 = v11;
      v22 = 17;
      goto LABEL_60;
    case 0x12u:
      v148 = v10[1];
      *v9 = *v10;
      v9[1] = v148;
      v149 = v10[3];
      v9[2] = v10[2];
      v9[3] = v149;
      *(_QWORD *)(v4 - 88) = v11;
      v150 = v10[5];
      v9[4] = v10[4];
      v9[5] = v150;
      v151 = v10[7];
      v9[6] = v10[6];
      v9[7] = v151;
      v281 = v10[9];
      v9[8] = v10[8];
      v9[9] = v281;
      v275 = v10[11];
      v9[10] = v10[10];
      v9[11] = v275;
      v271 = v10[13];
      v9[12] = v10[12];
      v9[13] = v271;
      v268 = v10[15];
      v9[14] = v10[14];
      v9[15] = v268;
      v266 = v10[17];
      v9[16] = v10[16];
      v9[17] = v266;
      v265 = v10[19];
      v9[18] = v10[18];
      v9[19] = v265;
      v152 = v10[21];
      v9[20] = v10[20];
      v9[21] = v152;
      *((_OWORD *)v9 + 11) = *((_OWORD *)v10 + 11);
      v263 = v10[24];
      v264 = v152;
      v9[24] = v263;
      v288 = type metadata accessor for WindComponentViewModel(0);
      v153 = *(int *)(v288 + 68);
      v261 = (char *)v10 + v153;
      v262 = (char *)v9 + v153;
      v295 = v2;
      v154 = type metadata accessor for WindComponentCompassViewModel(0);
      v155 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v154 - 8) + 16);
      swift_bridgeObjectRetain(v148);
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRetain(v150);
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRetain(v281);
      swift_bridgeObjectRetain(v275);
      swift_bridgeObjectRetain(v271);
      swift_bridgeObjectRetain(v268);
      swift_bridgeObjectRetain(v266);
      swift_bridgeObjectRetain(v265);
      swift_bridgeObjectRetain(v264);
      v156 = swift_bridgeObjectRetain(v263);
      v157 = v154;
      v2 = v295;
      v155(v262, v261, v157, v156);
      v158 = *(int *)(v288 + 72);
      v159 = *(_QWORD *)((char *)v10 + v158);
      *(_QWORD *)((char *)v9 + v158) = v159;
      swift_bridgeObjectRetain(v159);
      v20 = v9;
      v21 = *(_QWORD *)(v4 - 88);
      v22 = 18;
      goto LABEL_60;
    default:
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      goto LABEL_61;
  }
}

uint64_t sub_100111BAC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  int v37;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  void (*v44)(char *, uint64_t, __n128);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;

  v4 = type metadata accessor for LocationComponentHeaderViewModel(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 4u:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      v5 = a1 + 6;
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      v5 = a1 + 10;
      goto LABEL_6;
    case 2u:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      swift_bridgeObjectRelease(a1[9]);
      swift_bridgeObjectRelease(a1[11]);
      v5 = a1 + 14;
      goto LABEL_6;
    case 3u:
      v6 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = (_QWORD *)((char *)a1
                    + *(int *)(type metadata accessor for LocationComponentHeaderViewModel.Description(0) + 20));
      swift_bridgeObjectRelease(v7[1]);
      swift_bridgeObjectRelease(v7[3]);
      v5 = v7 + 6;
LABEL_6:
      swift_bridgeObjectRelease(*v5);
      break;
    default:
      break;
  }
  v8 = (char *)a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for LocationComponentViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v8, v9))
  {
    case 0u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 11));
      v10 = *((_QWORD *)v8 + 13);
      goto LABEL_51;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)v8);
      v11 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
      v12 = &v8[v11[5]];
      v13 = sub_1000BA294(&qword_100BC4E68);
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v14(v12, v13);
      v14(&v8[v11[6]], v13);
      v14(&v8[v11[7]], v13);
      v15 = v11[8];
      goto LABEL_34;
    case 2u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      v16 = (int *)type metadata accessor for FeelsLikeComponentViewModel(0);
      v17 = (uint64_t)&v8[v16[6]];
      v18 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
        v19 = v17 + *(int *)(v18 + 20);
        v20 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
        v21 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v21 + 32) + 8));
      }
      goto LABEL_49;
    case 3u:
      v10 = *(_QWORD *)v8;
      goto LABEL_51;
    case 4u:
      v10 = *((_QWORD *)v8 + 2);
      goto LABEL_51;
    case 5u:
      v22 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v8, v22);
      v16 = (int *)type metadata accessor for MapComponentViewModel(0);
      v23 = &v8[v16[5]];
      v24 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      v25 = (uint64_t)&v8[v16[6]];
      v26 = (int *)type metadata accessor for WeatherData(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, (uint64_t)v26))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v25 + 8));
        v27 = v25 + v26[5];
        v28 = type metadata accessor for Locale(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v27, 1, v28))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
        v29 = v25 + v26[6];
        v30 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
        v31 = v25 + v26[7];
        v32 = sub_1000BA294(&qword_100BC3348);
        if (!_s7Weather24LocationCompositionStateOwet_0(v31, 1, v32))
        {
          v33 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v31, v33);
        }
        v34 = v25 + v26[8];
        v35 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34, v35);
        if (EnumCaseMultiPayload == 1)
        {
          v55 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v34, v55);
        }
        else if (!EnumCaseMultiPayload)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v34 + 8));
        }
        v56 = v25 + v26[9];
        v57 = type metadata accessor for WeatherDataOverrides(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v56, 1, v57))
        {
          v58 = type metadata accessor for Date(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v56, 1, v58))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v56, v58);
          v59 = v56 + *(int *)(v57 + 20);
          if (!_s7Weather24LocationCompositionStateOwet_0(v59, 1, v58))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v59, v58);
        }
      }
LABEL_49:
      v47 = v16[7];
      goto LABEL_50;
    case 6u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      v37 = v8[32];
      if (v37 != 255)
        sub_100121E04(*((_QWORD *)v8 + 2), *((_QWORD *)v8 + 3), v37);
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));
      v8 += *(int *)(type metadata accessor for MoonComponentViewModel(0) + 28);
      HourPrecipitationChartViewModel = type metadata accessor for Date(0);
      goto LABEL_37;
    case 7u:
      v39 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v8, v39) == 1)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
        v40 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v41 = (uint64_t)&v8[v40[5]];
        v42 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
        v43 = swift_bridgeObjectRelease(*(_QWORD *)&v8[v40[6] + 8]);
        v44 = *(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v42 - 8) + 8);
        v44(&v8[v40[7]], v42, v43);
        v45 = (uint64_t)&v8[v40[8]];
        if (!_s7Weather24LocationCompositionStateOwet_0(v45, 1, v42))
          ((void (*)(uint64_t, uint64_t))v44)(v45, v42);
      }
      break;
    case 8u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      v8 += *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      goto LABEL_37;
    case 9u:
      HourPrecipitationChartViewModel = type metadata accessor for Location(0);
      goto LABEL_37;
    case 0xAu:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 9));
      v10 = *((_QWORD *)v8 + 11);
      goto LABEL_51;
    case 0xBu:
      v46 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v8, v46);
      v11 = (int *)type metadata accessor for PressureComponentViewModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v8[v11[5] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v8[v11[6] + 8]);
      v15 = v11[7];
LABEL_34:
      swift_bridgeObjectRelease(*(_QWORD *)&v8[v15 + 8]);
      v47 = v11[9];
LABEL_50:
      v10 = *(_QWORD *)&v8[v47 + 8];
      goto LABEL_51;
    case 0xDu:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 4));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 6));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 8));
      v8 += *(int *)(type metadata accessor for SevereAlertComponentViewModel(0) + 36);
      HourPrecipitationChartViewModel = type metadata accessor for WeatherAlert.Prominence(0);
      goto LABEL_37;
    case 0xEu:
      HourPrecipitationChartViewModel = type metadata accessor for SunriseSunsetViewModel(0);
LABEL_37:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v8, HourPrecipitationChartViewModel);
      break;
    case 0xFu:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 23));
      v10 = *((_QWORD *)v8 + 25);
      goto LABEL_51;
    case 0x10u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      v48 = type metadata accessor for UVIndexComponentViewModel(0);
      v49 = &v8[*(int *)(v48 + 28)];
      v50 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
      v51 = *(int *)(v48 + 32);
      goto LABEL_42;
    case 0x11u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      v10 = *((_QWORD *)v8 + 5);
      goto LABEL_51;
    case 0x12u:
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 24));
      v52 = type metadata accessor for WindComponentViewModel(0);
      v53 = &v8[*(int *)(v52 + 68)];
      v54 = type metadata accessor for WindComponentCompassViewModel(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
      v51 = *(int *)(v52 + 72);
LABEL_42:
      v10 = *(_QWORD *)&v8[v51];
LABEL_51:
      swift_bridgeObjectRelease(v10);
      break;
    default:
      break;
  }
  v60 = (uint64_t)a1 + *(int *)(a2 + 28);
  v61 = type metadata accessor for LocationComponentAction(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v60, 1, v61);
  if (!(_DWORD)result)
  {
    result = swift_getEnumCaseMultiPayload(v60, v61);
    switch((int)result)
    {
      case 0:
        v63 = type metadata accessor for URL(0);
        goto LABEL_58;
      case 1:
        v63 = type metadata accessor for WeatherMapOverlayKind(0);
        goto LABEL_58;
      case 2:
        v63 = type metadata accessor for DetailCondition(0);
        goto LABEL_58;
      case 4:
        v60 += *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v63 = type metadata accessor for Location(0);
LABEL_58:
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v60, v63);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100112494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD);
  int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v79[4];
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;

  sub_1000986AC();
  v95 = v4;
  v96 = v5;
  v92 = v6;
  v88 = v7;
  v84 = v8;
  v80 = v9;
  v83 = v10;
  v12 = v11;
  v100 = v13;
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v98 = v15;
  v94 = sub_10009E654();
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100099864();
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v91 = v18;
  v90 = sub_10009E908();
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v99 = v20;
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_1000986FC();
  v87 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  v97 = &v79[-v24];
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  v26 = sub_100099720();
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v102 = v28;
  v29 = (int *)sub_1001103B4();
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v93 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v89 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v86 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v85 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  sub_1000860D0();
  v82 = v39;
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_1000B2688();
  v42 = __chkstk_darwin(v41);
  v44 = &v79[-v43];
  __chkstk_darwin(v42);
  v46 = (uint64_t *)&v79[-v45];
  v47 = v0;
  sub_100095B78(v0, (uint64_t)&v79[-v45], v48);
  v101 = v1;
  if (v12)
  {
    v81 = v12;
  }
  else
  {
    v81 = *v46;
    swift_retain();
  }
  v49 = v80;
  swift_retain();
  sub_1000215BC((uint64_t)v46, type metadata accessor for ViewState);
  sub_10003773C(v83, v2, &qword_100BC5F80);
  sub_100095B78(v0, (uint64_t)v44, type metadata accessor for ViewState);
  v50 = sub_100088FC8(v2, 1, v26);
  if (v51)
  {
    sub_100095B78((uint64_t)&v44[v29[5]], v102, type metadata accessor for ViewState.SecondaryViewState);
    sub_1000878B4(v52, type metadata accessor for ViewState);
    sub_100021A14(v2, &qword_100BC5F80);
  }
  else
  {
    sub_1000878B4(v50, type metadata accessor for ViewState);
    sub_10007C77C(v2, v102, type metadata accessor for ViewState.SecondaryViewState);
  }
  v53 = v98;
  v54 = v84;
  sub_100095B78(v47, v3, type metadata accessor for ViewState);
  v55 = v87;
  v56 = v82;
  if (v49 == 2)
    v57 = *(unsigned __int8 *)(v3 + v29[6]);
  else
    v57 = v49 & 1;
  LODWORD(v98) = v57;
  v58 = v100;
  sub_1000215BC(v3, type metadata accessor for ViewState);
  sub_10007A0C4(v47);
  v59 = v101;
  if (v54 == 2)
  {
    v60 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v61 = objc_msgSend(v60, "userInterfaceIdiom");

    v62 = (uint64_t)v97;
    if (v61 && *(_QWORD *)(v56 + v29[9] + 8) == 2)
      v63 = 1;
    else
      v63 = *(_BYTE *)(v56 + v29[7]);
  }
  else
  {
    v63 = v54 & 1;
    v62 = (uint64_t)v97;
  }
  sub_1000215BC(v56, type metadata accessor for ViewState);
  sub_10003773C(v88, v55, &qword_100BC5F78);
  v64 = v85;
  sub_10007A0C4(v47);
  v65 = sub_1000CE64C();
  sub_100088FC8(v55, 1, v65);
  if (v51)
  {
    sub_10003773C(v64 + v29[8], v62, &qword_100BC5F78);
    sub_1000215BC(v64, type metadata accessor for ViewState);
    sub_100075DD0(v55);
  }
  else
  {
    sub_1000215BC(v64, type metadata accessor for ViewState);
    sub_10007C77C(v55, v62, type metadata accessor for SearchViewState);
    _s7Weather24LocationCompositionStateOwst_0(v62, 0, 1, v65);
  }
  v66 = v99;
  v67 = v91;
  sub_10003773C(v92, v91, &qword_100BC5F70);
  v68 = v86;
  sub_100095B78(v47, v86, type metadata accessor for ViewState);
  v69 = sub_100088FC8(v67, 1, v90);
  if (v51)
  {
    sub_100095B78(v68 + v29[9], v66, type metadata accessor for DisplayMetrics);
    sub_1000878B4(v70, type metadata accessor for ViewState);
    sub_100021A14(v67, &qword_100BC5F70);
  }
  else
  {
    sub_1000878B4(v69, type metadata accessor for ViewState);
    sub_10007C77C(v67, v66, type metadata accessor for DisplayMetrics);
  }
  v71 = v95;
  sub_10003773C(v96, v53, &qword_100BC5F68);
  v72 = v89;
  sub_100095B78(v47, v89, type metadata accessor for ViewState);
  v73 = sub_100088FC8(v53, 1, v94);
  if (v51)
  {
    sub_100095B78(v72 + v29[10], v59, type metadata accessor for WeatherMapPresentationState);
    sub_1000878B4(v74, type metadata accessor for ViewState);
    sub_100021A14(v53, &qword_100BC5F68);
  }
  else
  {
    sub_1000878B4(v73, type metadata accessor for ViewState);
    sub_10007C77C(v53, v59, type metadata accessor for WeatherMapPresentationState);
  }
  v75 = v47;
  v76 = v93;
  sub_100095B78(v75, v93, type metadata accessor for ViewState);
  if (v71 == 2)
    v78 = *(_BYTE *)(v76 + v29[11]);
  else
    v78 = v71 & 1;
  sub_1000998DC(v77, type metadata accessor for ViewState);
  *v58 = v81;
  sub_10007C77C(v102, (uint64_t)v58 + v29[5], type metadata accessor for ViewState.SecondaryViewState);
  *((_BYTE *)v58 + v29[6]) = v98;
  *((_BYTE *)v58 + v29[7]) = v63;
  sub_100145174(v62, (uint64_t)v58 + v29[8]);
  sub_10007C77C(v66, (uint64_t)v58 + v29[9], type metadata accessor for DisplayMetrics);
  sub_10007C77C(v59, (uint64_t)v58 + v29[10], type metadata accessor for WeatherMapPresentationState);
  *((_BYTE *)v58 + v29[11]) = v78;
  sub_100098640();
}

uint64_t type metadata accessor for MainView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C09D38, (uint64_t)&nominal type descriptor for MainView);
}

uint64_t sub_100112B60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v45;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a2 + 8;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v7 - 8);
  v10 = swift_retain();
  v9(a1 + 8, v6, v8, v10);
  v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, a2 + 48);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 88, a2 + 88);
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    *v14 = *v15;
    swift_retain();
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = sub_1000BA294((uint64_t *)&unk_100C09CC0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for LegibilityWeight(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v23))
    {
      v24 = sub_1000BA294(&qword_100C04B78);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      v25 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v25 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v23);
    }
  }
  else
  {
    *v20 = *v21;
    swift_retain();
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v22, v25);
  v26 = a3[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v30))
    {
      v31 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      v32 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v32 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v30);
    }
  }
  else
  {
    *v27 = *v28;
    swift_retain();
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v32);
  v33 = a3[11];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_QWORD *)v35;
  v37 = *(_BYTE *)(v35 + 8);
  sub_10008D47C(*(_QWORD *)v35, v37);
  *(_QWORD *)v34 = v36;
  *(_BYTE *)(v34 + 8) = v37;
  v38 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
  v39 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = *(_OWORD *)(v41 + 24);
  *(_OWORD *)(a1 + v39 + 24) = v42;
  v43 = v42;
  v44 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v42 - 8);
  v45 = swift_retain();
  v44(v40, v41, v43, v45);
  return a1;
}

void sub_100112E9C(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  void (*v129)(uint64_t, uint64_t, __n128);
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t);
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __n128 v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  void (*v193)(char *, uint64_t, uint64_t);
  int *v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t);
  uint64_t v197;
  _QWORD *v198;

  sub_1000BA294(&qword_100BCB340);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v178 = v8;
  v176 = type metadata accessor for WeatherFormatPlaceholder(0);
  v184 = *(_QWORD *)(v176 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v11 = sub_1000987B4(v10);
  v174 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v11);
  v172 = *(_QWORD *)(v174 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v173 = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_100079F7C();
  v16 = sub_1000987B4(v15);
  v17 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(v16);
  v197 = *((_QWORD *)v17 - 1);
  sub_10009D98C();
  __chkstk_darwin(v18);
  sub_1000986FC();
  v189 = v19;
  sub_10009D2A4();
  __chkstk_darwin(v20);
  sub_10009E3CC();
  __chkstk_darwin(v21);
  sub_1000860D0();
  v195 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_1000860D0();
  v180 = v24;
  sub_10009D2A4();
  __chkstk_darwin(v25);
  sub_1000860D0();
  v168 = v26;
  sub_10009D2A4();
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v167 - v29;
  __chkstk_darwin(v28);
  sub_1000860D0();
  v171 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v169 = v33;
  sub_10009D2A4();
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v167 - v36;
  v38 = __chkstk_darwin(v35);
  v40 = (char *)&v167 - v39;
  __chkstk_darwin(v38);
  sub_100079F7C();
  v170 = v41;
  sub_1000BA294(qword_100BC4E80);
  sub_10009D98C();
  __chkstk_darwin(v42);
  sub_1000986FC();
  v186 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_100079F7C();
  v183 = v45;
  v46 = sub_1000BA294(&qword_100BC4E68);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  sub_1000986FC();
  v177 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  sub_1000860D0();
  v185 = v50;
  sub_10009D2A4();
  __chkstk_darwin(v51);
  sub_1000860D0();
  v179 = v52;
  sub_10009D2A4();
  __chkstk_darwin(v53);
  sub_1000860D0();
  v196 = v54;
  sub_10009D2A4();
  __chkstk_darwin(v55);
  sub_1000860D0();
  v181 = v56;
  sub_10009D2A4();
  __chkstk_darwin(v57);
  sub_100079F7C();
  v182 = v58;
  *a3 = a1;
  v194 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
  v59 = (char *)a3 + v194[5];
  v188 = v47;
  v193 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  v193(v59, a2, v46);
  v60 = a1[2];
  v198 = a1;
  v190 = v46;
  v191 = a2;
  v192 = a3;
  v187 = v3;
  if (v60)
  {
    sub_100098AC8();
    v62 = (uint64_t)a1 + v61;
    sub_100084050((uint64_t)a1 + v61, (uint64_t)v40, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    swift_bridgeObjectRetain_n(a1, 2);
    if (v60 != 1)
    {
      v63 = 1;
      while (v63 < v198[2])
      {
        sub_100084050(v62 + *(_QWORD *)(v197 + 72) * v63, (uint64_t)v37, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        v64 = v17[9];
        v65 = (uint64_t)&v40[v64];
        v66 = (uint64_t)&v37[v64];
        v67 = sub_1000C22BC();
        if ((sub_1000ED004(v65, v66, v67) & 1) != 0)
        {
          sub_1000215BC((uint64_t)v40, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
          sub_1000DC488((uint64_t)v37);
        }
        else
        {
          sub_1000215BC((uint64_t)v37, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        }
        if (v60 == ++v63)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_61;
    }
LABEL_9:
    swift_bridgeObjectRelease(v198);
    v68 = (uint64_t)v40;
    v69 = v170;
    sub_1000DC488(v68);
    v70 = v183;
    v46 = v190;
    v71 = (void (*)(uint64_t, uint64_t, uint64_t))v193;
    v72 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v193)(v183, v69 + v17[9], v190);
    sub_10004A2E0(v72, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    sub_1000988B8(v70, 0);
    v73 = v191;
    v3 = v187;
  }
  else
  {
    v74 = v183;
    sub_1000988B8(v183, 1);
    swift_bridgeObjectRetain(a1);
    v71 = (void (*)(uint64_t, uint64_t, uint64_t))v193;
    v73 = a2;
    v70 = v74;
  }
  v75 = v181;
  v71(v181, v73, v46);
  v76 = _s7Weather24LocationCompositionStateOwet_0(v70, 1, v46);
  v77 = v189;
  if (v76 == 1)
  {
    v78 = v75;
    v79 = *(_QWORD *)(v188 + 32);
    v80 = v182;
    sub_1000B3288(v182, v78);
    sub_100021A14(v70, qword_100BC4E80);
  }
  else
  {
    v81 = v188;
    (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v75, v46);
    v79 = *(_QWORD *)(v81 + 32);
    v80 = v182;
    sub_1000B3288(v182, v70);
  }
  sub_1000B3288((uint64_t)v192 + v194[6], v80);
  v82 = v186;
  v183 = v79;
  if (v60)
  {
    if (!v198[2])
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    v83 = v198;
    sub_100098AC8();
    v85 = (uint64_t)v83 + v84;
    v86 = v171;
    sub_100084050((uint64_t)v83 + v84, v171, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    swift_bridgeObjectRetain(v83);
    v87 = (uint64_t)v196;
    if (v60 != 1)
    {
      v88 = 1;
      while (v88 < v198[2])
      {
        sub_100084050(v85 + *(_QWORD *)(v197 + 72) * v88, (uint64_t)v30, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        v89 = v17[8];
        v90 = (uint64_t)&v30[v89];
        v91 = v86 + v89;
        v92 = sub_1000C22BC();
        if ((sub_1000ED004(v90, v91, v92) & 1) != 0)
        {
          sub_1000BD95C(v86);
          sub_100128208((uint64_t)v30, v86);
        }
        else
        {
          sub_1000BD95C((uint64_t)v30);
        }
        v87 = (uint64_t)v196;
        if (v60 == ++v88)
          goto LABEL_23;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
LABEL_23:
    swift_bridgeObjectRelease(v198);
    v93 = v169;
    sub_100128208(v86, v169);
    v82 = v186;
    v46 = v190;
    v193((char *)v186, v93 + v17[8], v190);
    sub_1000215BC(v93, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    v94 = 0;
    v95 = v191;
    v77 = v189;
    v3 = v187;
  }
  else
  {
    v94 = 1;
    v87 = (uint64_t)v196;
    v95 = v191;
  }
  sub_1000988B8(v82, v94);
  v96 = v82;
  v97 = v179;
  sub_1000B3288(v179, v95);
  v98 = _s7Weather24LocationCompositionStateOwet_0(v96, 1, v46);
  v99 = v180;
  if (v98 == 1)
  {
    sub_10008915C(v87, v97);
    sub_100021A14(v96, qword_100BC4E80);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v97, v46);
    sub_10008915C(v87, v96);
  }
  v100 = v87;
  v101 = v198;
  sub_1000B3288((uint64_t)v192 + v194[7], v100);
  if (v60)
  {
    v102 = v197;
    if (!v101[2])
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    sub_100098AC8();
    v104 = (uint64_t)v101 + v103;
    sub_100084050((uint64_t)v101 + v103, v99, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    swift_bridgeObjectRetain(v101);
    v105 = v195;
    if (v60 != 1)
    {
      v106 = 1;
      while (v106 < v101[2])
      {
        sub_100084050(v104 + *(_QWORD *)(v102 + 72) * v106, v105, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        v107 = sub_1000BF210((_QWORD *)(v99 + v17[18]));
        if (v107 >= sub_1000BF210((_QWORD *)(v105 + v17[18])))
        {
          sub_1000BD95C(v105);
        }
        else
        {
          sub_1000BD95C(v99);
          sub_100128208(v105, v99);
        }
        ++v106;
        v105 = v195;
        if (v60 == v106)
          goto LABEL_37;
      }
      goto LABEL_62;
    }
LABEL_37:
    sub_100098738();
    v108 = v168;
    sub_1000DC488(v99);
    v109 = v108 + v17[18];
    v110 = *(_QWORD *)(v109 + 8);
    v196 = *(void (**)(uint64_t, uint64_t))v109;
    swift_bridgeObjectRetain(v110);
    sub_10004A2E0(v111, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    v77 = v189;
    v112 = v190;
    v113 = v185;
    v3 = v187;
  }
  else
  {
    v112 = v46;
    v196 = 0;
    v110 = 0;
    v102 = v197;
    v113 = v185;
  }
  v193((char *)v113, v191, v112);
  if (v110)
  {
    v114 = *(void (**)(uint64_t, uint64_t))(v188 + 8);
    sub_10009554C(v113);
    v115 = v192;
    v116 = (uint64_t)v196;
  }
  else
  {
    v117 = sub_1000EB074();
    v118 = v173;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v117);
    sub_1000988C4();
    v196 = v119;
    v120 = v174;
    v119(0, v174);
    v121 = v184;
    v122 = v175;
    v123 = v176;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v184 + 104))(v175, enum case for WeatherFormatPlaceholder.none(_:), v176);
    sub_1000BCF94();
    v124 = sub_1000B314C();
    sub_10000F1C8((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v116 = Measurement.formatted<A>(_:placeholder:unitManager:)(v118, v122, v124, &protocol witness table for UnitManager, v190, v120, v125);
    v110 = v126;
    v127 = v124;
    v77 = v189;
    v128 = swift_release(v127);
    v129 = *(void (**)(uint64_t, uint64_t, __n128))(v121 + 8);
    v101 = v198;
    v129(v122, v123, v128);
    v130 = v118;
    v102 = v197;
    v131 = v120;
    v3 = v187;
    v115 = v192;
    v196(v130, v131);
    v114 = *(void (**)(uint64_t, uint64_t))(v188 + 8);
    v114(v185, v190);
  }
  v132 = (_QWORD *)((char *)v115 + v194[8]);
  *v132 = v116;
  v132[1] = v110;
  v196 = v114;
  if (v60)
  {
    if (!v101[2])
    {
LABEL_66:
      __break(1u);
      return;
    }
    sub_100098AC8();
    v134 = (uint64_t)v101 + v133;
    sub_100084050((uint64_t)v101 + v133, v3, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
    swift_bridgeObjectRetain(v101);
    if (v60 != 1)
    {
      v135 = 1;
      while (v135 < v101[2])
      {
        sub_100084050(v134 + *(_QWORD *)(v102 + 72) * v135, v77, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        v136 = v3;
        v137 = sub_1000BF210((_QWORD *)(v3 + v17[17]));
        if (v137 >= sub_1000BF210((_QWORD *)(v77 + v17[17])))
        {
          sub_1000215BC(v77, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        }
        else
        {
          sub_1000215BC(v136, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
          sub_100128208(v77, v136);
        }
        v3 = v136;
        if (v60 == ++v135)
          goto LABEL_51;
      }
      goto LABEL_63;
    }
LABEL_51:
    sub_100098738();
    v138 = v178;
    sub_1000DC488(v3);
    v139 = 0;
  }
  else
  {
    v139 = 1;
    v138 = v178;
  }
  v140 = (void (*)(uint64_t, uint64_t, uint64_t))v193;
  _s7Weather24LocationCompositionStateOwst_0(v138, v139, 1, (uint64_t)v17);
  sub_100098738();
  if (_s7Weather24LocationCompositionStateOwet_0(v138, 1, (uint64_t)v17) == 1)
  {
    sub_100021A14(v138, &qword_100BCB340);
    v141 = 0;
    v142 = 0;
  }
  else
  {
    v143 = (uint64_t *)(v138 + v17[17]);
    v141 = *v143;
    v142 = v143[1];
    swift_bridgeObjectRetain(v142);
    sub_10004A2E0(v144, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  }
  v146 = v190;
  v145 = v191;
  v147 = v177;
  v140(v177, v191, v190);
  if (v142)
  {
    v148 = v145;
    v149 = v196;
    v196(v148, v146);
    v149(v147, v146);
    v150 = v192;
  }
  else
  {
    v151 = sub_1000EB074();
    v152 = v173;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v151);
    sub_1000988C4();
    v198 = v153;
    v154 = v145;
    v155 = v174;
    ((void (*)(_QWORD, uint64_t))v153)(0, v174);
    v156 = v175;
    v157 = v146;
    v158 = v176;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v184 + 104))(v175, enum case for WeatherFormatPlaceholder.none(_:), v176);
    sub_1000BCF94();
    v159 = v147;
    v160 = sub_1000B314C();
    sub_10000F1C8((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
    v141 = Measurement.formatted<A>(_:placeholder:unitManager:)(v152, v156, v160, &protocol witness table for UnitManager, v157, v155, v161);
    v142 = v162;
    v163 = swift_release(v160);
    v164 = v154;
    v165 = v196;
    ((void (*)(uint64_t, uint64_t, __n128))v196)(v164, v157, v163);
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v156, v158);
    v150 = v192;
    ((void (*)(uint64_t, uint64_t))v198)(v152, v155);
    v165(v159, v157);
  }
  v166 = (_QWORD *)((char *)v150 + v194[9]);
  *v166 = v141;
  v166[1] = v142;
}

unint64_t sub_100113B0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC5658;
  if (!qword_100BC5658)
  {
    v1 = objc_opt_self(NSUnitTemperature);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BC5658);
  }
  return result;
}

uint64_t sub_100113B48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  v20 = swift_bridgeObjectRetain(v14);
  v19(v16, v17, v18, v20);
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_1000BA294(&qword_100BC4E68);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v25(v22, v23, v24);
  v25(a1 + a3[9], a2 + a3[9], v24);
  v26 = a3[10];
  v27 = a3[11];
  v28 = (_QWORD *)(a1 + v26);
  v29 = (_QWORD *)(a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = (_QWORD *)(a1 + v27);
  v32 = (_QWORD *)(a2 + v27);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  v35 = a3[14];
  v36 = a3[15];
  v37 = (_QWORD *)(a1 + v35);
  v38 = (_QWORD *)(a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = (void *)(a1 + v36);
  v41 = (const void *)(a2 + v36);
  v42 = type metadata accessor for Precipitation(0);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v39);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v42))
  {
    v43 = sub_1000BA294(&qword_100BCB338);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v42);
  }
  v44 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = a3[18];
  v49 = a3[19];
  v50 = (_QWORD *)(a1 + v48);
  v51 = (_QWORD *)(a2 + v48);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = (_QWORD *)(a1 + v49);
  v54 = (_QWORD *)(a2 + v49);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = a3[20];
  v57 = *(_QWORD *)(a2 + v56);
  *(_QWORD *)(a1 + v56) = v57;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v57);
  return a1;
}

uint64_t sub_100113DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  char v129;
  char v130;
  char v131;
  char v132;
  uint64_t (*v134)(uint64_t);
  uint64_t v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137;
  uint64_t (*v138)(_QWORD);
  uint64_t v139[2];
  int *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v140 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v145 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  sub_1000B42B0();
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  sub_1000F4430(v13, v14, v15, v16, v17, v18, v19, v20, v139[0]);
  v154 = sub_1000BA294(&qword_100BE55B8);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  v22 = sub_1000C1E78();
  v23 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(v22);
  v24 = __chkstk_darwin(v23);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)v139 - v26;
  v28 = __chkstk_darwin(v25);
  __chkstk_darwin(v28);
  v33 = (char *)v139 - v30;
  v147 = *(_QWORD *)(a2 + 16);
  if (!v147)
    return 0;
  v148 = (char *)v31;
  v149 = v32;
  v34 = 0;
  v153 = a2 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  v152 = *(_QWORD *)(v29 + 72);
  v143 = v8;
  v144 = a1;
  v142 = v12;
  v150 = v27;
  v151 = (char *)v139 - v30;
  v35 = v147;
  v146 = v23;
  while (1)
  {
    sub_1000C018C(v153 + v152 * v34, (uint64_t)v33);
    v36 = (uint64_t)v33;
    v37 = v2 + *(int *)(v154 + 48);
    sub_1000C018C(v36, v2);
    sub_1000C018C(a1, v37);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v23);
    if (!EnumCaseMultiPayload)
      break;
    if (EnumCaseMultiPayload != 1)
    {
      v27 = v148;
      sub_100080C0C(v2, (uint64_t)v148, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      if (sub_1000DA9F0() == 2)
      {
        sub_10007802C(v37, v8, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
        if (*(_QWORD *)v27 == *(_QWORD *)v8)
        {
          v57 = *((_QWORD *)v27 + 2);
          v58 = *(_QWORD *)(v8 + 16);
          if (v57)
          {
            if (!v58)
              goto LABEL_123;
            v59 = *((_QWORD *)v27 + 1);
            v60 = *(_QWORD *)(v8 + 8);
            if (v59 != v60 || v57 != v58)
            {
              v62 = sub_100099264(v59, v57, v60, v58);
              v27 = v148;
              if ((v62 & 1) == 0)
                goto LABEL_123;
            }
LABEL_60:
            v79 = *((_QWORD *)v27 + 3);
            v80 = *((_QWORD *)v27 + 4);
            v81 = *(_QWORD *)(v8 + 24);
            v82 = *(_QWORD *)(v8 + 32);
            v83 = v79 == v81 && v80 == v82;
            if (v83 || (v84 = sub_100099264(v79, v80, v81, v82), v27 = v148, (v84 & 1) != 0))
            {
              if (*((double *)v27 + 5) == *(double *)(v8 + 40) && v27[48] == *(_BYTE *)(v8 + 48))
              {
                v139[1] = v8 + v140[9];
                type metadata accessor for Precipitation(0);
                sub_100086DA4(&qword_100BCE780, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, (uint64_t)&protocol conformance descriptor for Precipitation);
                sub_1000B30FC();
                sub_1000B30FC();
                v85 = v156;
                if (v157 == v155 && v158 == v156)
                {
                  swift_bridgeObjectRelease_n(v158, 2);
                  v27 = v148;
                }
                else
                {
                  v87 = sub_100099264(v157, v158, v155, v156);
                  sub_1000986C4();
                  swift_bridgeObjectRelease(v85);
                  v27 = v148;
                  if ((v87 & 1) == 0)
                    goto LABEL_123;
                }
                v112 = sub_1000D9018(v140[10]);
                v116 = v45 && v113 == v115;
                if (v116 || (v117 = sub_100099264(v112, v113, v114, v115), v27 = v148, (v117 & 1) != 0))
                {
                  v118 = sub_1000D9018(v140[11]);
                  v122 = v45 && v119 == v121;
                  if (v122 || (v123 = sub_100099264(v118, v119, v120, v121), v27 = v148, (v123 & 1) != 0))
                  {
                    v124 = sub_1000D9018(v140[12]);
                    v128 = v45 && v125 == v127;
                    if (v128 || (v129 = sub_100099264(v124, v125, v126, v127), v27 = v148, (v129 & 1) != 0))
                    {
                      v130 = static Date.== infix(_:_:)(&v27[v140[13]], v8 + v140[13]);
                      v27 = v148;
                      if ((v130 & 1) != 0)
                      {
                        v131 = static TimeZone.== infix(_:_:)(&v148[v140[14]], v8 + v140[14]);
                        v27 = v148;
                        if ((v131 & 1) != 0 && v148[v140[15]] == *(_BYTE *)(v8 + v140[15]))
                        {
                          sub_10009B4AC(*(_QWORD **)&v148[v140[16]], *(_QWORD **)(v8 + v140[16]));
                          v27 = v148;
                          if ((v132 & 1) != 0)
                            goto LABEL_133;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else if (!v58)
          {
            goto LABEL_60;
          }
        }
LABEL_123:
        sub_100098DB8(v8);
        sub_100098DB8((uint64_t)v27);
        sub_100098DB8(v2);
        v27 = v150;
        goto LABEL_124;
      }
      sub_1000215BC((uint64_t)v27, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
      v27 = v150;
      goto LABEL_39;
    }
    sub_100080C0C(v2, (uint64_t)v27, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    if (sub_1000DA9F0() != 1)
    {
      sub_1000215BC((uint64_t)v27, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
      goto LABEL_39;
    }
    sub_10007802C(v37, (uint64_t)v12, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    v39 = static Date.== infix(_:_:)(v27, v12);
    v40 = (uint64_t)v27;
    v27 = v12;
    if ((v39 & 1) != 0
      && (static TimeZone.== infix(_:_:)(v40 + *(int *)(v145 + 20), &v12[*(int *)(v145 + 20)]) & 1) != 0)
    {
      v41 = *(int *)(v145 + 24);
      v42 = *(_QWORD **)(v40 + v41);
      v43 = *(_QWORD **)&v27[v41];
      v44 = v42[2];
      if (v44 == v43[2])
      {
        if (v44)
          v45 = v42 == v43;
        else
          v45 = 1;
        if (v45)
          goto LABEL_14;
        v88 = v42[4];
        v89 = v42[5];
        v90 = v43[4];
        v91 = v43[5];
        v92 = v88 == v90 && v89 == v91;
        v27 = v142;
        v40 = (uint64_t)v150;
        if (v92 || (sub_100099264(v88, v89, v90, v91) & 1) != 0)
        {
          if (v44 != 1)
          {
            v93 = v43 + 7;
            v94 = v42 + 7;
            v8 = 1;
            while (v8 < v44)
            {
              v95 = *(v94 - 1);
              v96 = *v94;
              v97 = *(v93 - 1);
              v98 = *v93;
              v99 = v95 == v97 && v96 == v98;
              v27 = v142;
              v40 = (uint64_t)v150;
              if (!v99 && (sub_100099264(v95, v96, v97, v98) & 1) == 0)
                goto LABEL_24;
              ++v8;
              v93 += 2;
              v94 += 2;
              if (v44 == v8)
                goto LABEL_14;
            }
            __break(1u);
            goto LABEL_132;
          }
LABEL_14:
          v40 = (uint64_t)v150;
          v27 = v142;
          sub_100099534();
          v50 = v45 && v47 == v49;
          if (v50 || (sub_100099264(v46, v47, v48, v49) & 1) != 0)
          {
            sub_100099534();
            v55 = v45 && v52 == v54;
            if (v55 || (sub_100099264(v51, v52, v53, v54) & 1) != 0)
            {
              v134 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
              sub_100079F9C((uint64_t)v27);
              v135 = v40;
              goto LABEL_128;
            }
          }
        }
      }
    }
LABEL_24:
    sub_1000B3B44((uint64_t)v27);
    sub_1000B3B44(v40);
    sub_100098DB8(v2);
    v8 = v143;
    a1 = v144;
    v12 = v27;
    v27 = (char *)v40;
LABEL_124:
    v33 = v151;
    sub_100098DB8((uint64_t)v151);
    if (++v34 == v35)
      return 0;
  }
  v56 = v149;
  sub_100080C0C(v2, v149, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  if (sub_1000DA9F0())
  {
    sub_1000215BC(v56, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    v23 = v146;
    v35 = v147;
LABEL_39:
    sub_100021A14(v2, &qword_100BE55B8);
    goto LABEL_124;
  }
  v63 = v141;
  sub_10007802C(v37, v141, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
  if ((static Date.== infix(_:_:)(v56, v63) & 1) == 0)
    goto LABEL_58;
  if ((static TimeZone.== infix(_:_:)(v56 + *(int *)(v145 + 20), v63 + *(int *)(v145 + 20)) & 1) == 0)
    goto LABEL_58;
  v64 = *(int *)(v145 + 24);
  v65 = *(_QWORD **)(v56 + v64);
  v66 = *(_QWORD **)(v63 + v64);
  v67 = v65[2];
  if (v67 != v66[2])
    goto LABEL_58;
  if (v67)
    v68 = v65 == v66;
  else
    v68 = 1;
  if (v68)
    goto LABEL_48;
  v100 = v65[4];
  v101 = v65[5];
  v102 = v66[4];
  v103 = v66[5];
  v104 = v100 == v102 && v101 == v103;
  v56 = v149;
  if (!v104 && (sub_100099264(v100, v101, v102, v103) & 1) == 0)
    goto LABEL_58;
  if (v67 != 1)
  {
    v105 = v66 + 7;
    v106 = v65 + 7;
    v8 = 1;
    while (v8 < v67)
    {
      v107 = *(v106 - 1);
      v108 = *v106;
      v109 = *(v105 - 1);
      v110 = *v105;
      v111 = v107 == v109 && v108 == v110;
      v56 = v149;
      if (!v111 && (sub_100099264(v107, v108, v109, v110) & 1) == 0)
        goto LABEL_58;
      ++v8;
      v105 += 2;
      v106 += 2;
      if (v67 == v8)
        goto LABEL_48;
    }
LABEL_132:
    __break(1u);
LABEL_133:
    v134 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
    sub_100079F9C(v8);
    v135 = (uint64_t)v27;
LABEL_128:
    v136 = v134;
    goto LABEL_130;
  }
LABEL_48:
  v56 = v149;
  sub_100099534();
  v73 = v45 && v70 == v72;
  if (!v73 && (sub_100099264(v69, v70, v71, v72) & 1) == 0
    || ((sub_100099534(), v45) ? (v78 = v75 == v77) : (v78 = 0), !v78 && (sub_100099264(v74, v75, v76, v77) & 1) == 0))
  {
LABEL_58:
    sub_1000215BC(v63, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    sub_1000215BC(v56, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    sub_100098DB8(v2);
    v8 = v143;
    a1 = v144;
    v12 = v142;
    v23 = v146;
    v35 = v147;
    goto LABEL_124;
  }
  v137 = sub_10007A04C();
  sub_1000215BC(v137, v138);
  v135 = v56;
  v136 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
LABEL_130:
  sub_1000215BC(v135, v136);
  sub_100079F9C(v2);
  sub_100079F9C((uint64_t)v151);
  return v34;
}

double destroy for ExternalSearchQuery(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for HourlyForecastComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C057F0;
  if (!qword_100C057F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HourlyForecastComponentView);
  return result;
}

double sub_100114658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  sub_1000B15F8(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  v7 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_10011470C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  v8 = *((_BYTE *)a2 + 16);
  swift_bridgeObjectRetain(v6);
  sub_10008D47C(v7, v8);
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    *v14 = *v15;
    swift_retain();
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

void sub_100114808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  NSBundle v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_10011E488();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000C6B70();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000C0F18(v4, v5, v18);
  v6 = sub_10009D644(v0);
  if (v6)
  {
    if (v6 != 1)
    {
      sub_10007C77C(v0, v1, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
      sub_1000878DC();
      v17 = v1;
      v16 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
      goto LABEL_7;
    }
    v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_1000BE788();
    sub_1000C29F4();
    v15 = 0xD00000000000001ALL;
  }
  else
  {
    v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_1000BE788();
    sub_1000C29F4();
  }
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, *(Swift::String_optional *)&v10, v12, *(Swift::String *)&v13, *(Swift::String *)(&v19 - 1));

  v16 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem;
  v17 = v0;
LABEL_7:
  sub_1000979AC(v17, v16);
  sub_10004A2A0();
}

void sub_100114974()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000B4B0C(v4, v5, v11);
  v6 = sub_1000B2670();
  if (v6 > 1)
  {
    v7 = sub_1000C1A00();
    sub_10007C77C(v7, v8, v9);
    swift_bridgeObjectRetain(*((_QWORD *)v2 + 2));
    sub_10009C968(v10, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
  }
  else
  {
    sub_1000FDA50(v6, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  }
  sub_100079F70();
}

void sub_100114A94()
{
  sub_1000CFF38();
}

void sub_100114ABC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000B4B0C(v4, v5, v9);
  v6 = sub_1000B2670();
  if (v6 > 1)
  {
    v7 = sub_1000C1A00();
    sub_1000B2F40(v7, v8);
    swift_bridgeObjectRetain(*((_QWORD *)v2 + 4));
    sub_1000952E8();
  }
  else
  {
    sub_1000FDA50(v6, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  }
  sub_1000B3154();
  sub_100079F70();
}

void sub_100114B78()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000B4B0C(v4, v5, v9);
  v6 = sub_1000B2670();
  if (v6 > 1)
  {
    v7 = sub_1000C1A00();
    sub_10009BD30(v7, v8);
    sub_1000979AC((uint64_t)v2, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
  }
  else
  {
    sub_1000FDA50(v6, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  }
  sub_100079F70();
}

void sub_100114C30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v42 = a2;
  v39 = type metadata accessor for Text.Sizing(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100C05948);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000BA294(&qword_100C05950);
  __chkstk_darwin(v36);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000BA294(&qword_100C05958);
  v10 = __chkstk_darwin(v38);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  v13 = sub_100114F34(v10);
  v15 = v14;
  v16 = sub_10011514C();
  v17 = sub_100115264(v13, v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease(v15);
  v24 = swift_bridgeObjectRelease(v16);
  v43 = v17;
  v44 = v19;
  v45 = v21 & 1;
  v46 = v23;
  static Text.Sizing.adjustsForOversizedCharacters.getter(v24);
  View.textSizing(_:)(v4, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v39);
  sub_1000D31B4(v43, v44, v45);
  swift_bridgeObjectRelease(v46);
  KeyPath = swift_getKeyPath(&unk_1009C9928);
  v27 = v40;
  v26 = v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v9, v7, v41);
  v28 = &v9[*(int *)(v36 + 36)];
  *(_QWORD *)v28 = KeyPath;
  *((_QWORD *)v28 + 1) = 1;
  v28[16] = 0;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
  sub_100037794((uint64_t)v9, (uint64_t)v12, &qword_100C05950);
  v29 = v38;
  *(_WORD *)&v12[*(int *)(v38 + 36)] = 257;
  sub_100021A14((uint64_t)v9, &qword_100C05950);
  v30 = sub_100115040();
  v32 = v31;
  v43 = v30;
  v44 = v31;
  v33 = sub_100115420();
  v34 = sub_100114EF8();
  View.accessibilityLabel<A>(_:)(&v43, v29, &type metadata for String, v33, v34);
  swift_bridgeObjectRelease(v32);
  sub_100021A14((uint64_t)v12, &qword_100C05958);
}

unint64_t sub_100114EF8()
{
  unint64_t result;

  result = qword_100BC3978;
  if (!qword_100BC3978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100BC3978);
  }
  return result;
}

#error "100114FC8: call analysis failed (funcsize=64)"

#error "1001150D4: call analysis failed (funcsize=64)"

uint64_t sub_10011514C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v18[8];
  uint64_t v19;
  uint64_t v20;

  sub_10008900C();
  v19 = v1;
  v20 = v2;
  v3 = sub_10009C160();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BEEC4();
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000C2C2C(v12, v13, v18[0]);
  if (sub_1000CF8B0() > 1)
  {
    sub_10009BD30(v0, (uint64_t)v6);
    v14 = *(_QWORD *)&v6[*(int *)(v3 + 64)];
    sub_10009EF94();
    v15 = sub_1000B3154();
  }
  else
  {
    sub_1000D0D68(v0, (uint64_t)v10);
    v14 = *(_QWORD *)&v10[*(int *)(v7 + 24)];
    sub_10009EF94();
    v15 = (uint64_t)v10;
    v16 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
  }
  sub_1000979AC(v15, v16);
  return v14;
}

uint64_t sub_100115264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = type metadata accessor for TimeStyle(0);
  v6 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Font.Leading(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 8);
  v14 = *(_BYTE *)(v3 + 16);
  sub_10008D47C(v13, v14);
  sub_100109B54();
  v16 = v15;
  v17 = sub_1000B15F8(v13, v14);
  if ((v16 & 1) != 0)
    v18 = static Font.footnote.getter(v17);
  else
    v18 = static Font.subheadline.getter(v17);
  v19 = v18;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Font.Leading.tight(_:), v9);
  v20 = Font.leading(_:)(v12, v19);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = Font.bold()(v20);
  swift_release(v20);
  type metadata accessor for Style(0);
  static Style.componentTime.getter();
  v22 = TimeStyle.formatTime(_:periodSymbols:font:)(a1, a2, v25, v21);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
  return v22;
}

unint64_t sub_100115420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05960;
  if (!qword_100C05960)
  {
    v1 = sub_100075EB0(&qword_100C05958);
    sub_1001572E8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05960);
  }
  return result;
}

unint64_t sub_10011548C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C05928;
  if (!qword_100C05928)
  {
    v1 = sub_100075EB0(&qword_100BDD820);
    sub_10000F1C8(&qword_100BDD7F8, type metadata accessor for FontWithSmallVariantModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05928);
  }
  return result;
}

unint64_t sub_100115510()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100C05930;
  if (!qword_100C05930)
  {
    v1 = sub_100075EB0(&qword_100C05918);
    v2[0] = sub_100075EB0(&qword_100BDD820);
    v2[1] = sub_10011548C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
    sub_100123E50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05930);
  }
  return result;
}

uint64_t sub_1001155A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t (*v7)(_QWORD);
  char v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for LocationHeaderView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_BYTE *)(v1 + *(int *)(v3 + 64) + 138);
  sub_100080C0C(v1, (uint64_t)v5, v7);
  if ((v6 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v9 = &v5[*(int *)(v2 + 44)];
    v10 = *(_QWORD *)v9;
    v11 = v9[8];
    sub_10008D47C(*(_QWORD *)v9, v11);
    sub_100109B54();
    v8 = v12;
    sub_1000B15F8(v10, v11);
  }
  sub_10006BCFC((uint64_t)v5, type metadata accessor for LocationHeaderView);
  return v8 & 1;
}

void sub_10011567C()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  sub_1000986AC();
  v3 = v2;
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v4);
  sub_100099864();
  if ((v3 & 1) == 0)
  {
    sub_10009D4E0();
    static os_log_type_t.fault.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v13 = sub_1000F4190();
    if (sub_1000D0EB0(v13))
    {
      v14 = (uint8_t *)sub_100098710(12);
      v15 = sub_100098710(32);
      sub_1000ED358(v15);
      *(_DWORD *)v14 = 136315138;
      sub_100099CBC();
      v18 = sub_100109AA4(27, v16, v17);
      sub_1000C58D0(v18);
      sub_10009D7A0((void *)&_mh_execute_header, v3, v0, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14);
      sub_1000988D8(v1);
      sub_1000986F0(v1);
      sub_1000986F0((uint64_t)v14);
    }

    sub_1000C10E0();
    sub_1000DB10C();
    sub_1000DF95C();
  }
  sub_100098640();
}

void sub_100115780(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[4];
  int v34;
  uint64_t v35;
  _QWORD v36[4];
  unsigned __int8 v37;

  v35 = a4;
  v10 = type metadata accessor for AutomationInfoViewModifier(0);
  __chkstk_darwin(v10);
  v12 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AutomationInfo(0);
  v14 = __chkstk_darwin(v13);
  v16 = &v33[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v33[-v18];
  __chkstk_darwin(v17);
  v21 = &v33[-v20];
  sub_100174158(v5, a1, a2, a3 & 1, v35, (uint64_t)v36);
  v22 = v36[1];
  v35 = v36[0];
  v23 = v36[2];
  v24 = v36[3];
  v34 = v37;
  v25 = sub_10013E7B4();
  v26 = v5 + *(int *)(type metadata accessor for LocationHeaderView(0) + 64);
  v27 = *(_QWORD *)(v26 + 80);
  *v21 = *(_QWORD *)(v26 + 72);
  v21[1] = v27;
  v28 = type metadata accessor for AutomationCellInfo(0);
  swift_storeEnumTagMultiPayload(v21, v28, 7);
  swift_storeEnumTagMultiPayload(v21, v13, 1);
  sub_100080C0C((uint64_t)v21, (uint64_t)v19, type metadata accessor for AutomationInfo);
  sub_100080C0C((uint64_t)v19, (uint64_t)v16, type metadata accessor for AutomationInfo);
  swift_bridgeObjectRetain(v27);
  sub_10006BCFC((uint64_t)v19, type metadata accessor for AutomationInfo);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0xE000000000000000;
  *((_QWORD *)v12 + 2) = swift_getKeyPath(&unk_10097E260);
  v12[24] = 0;
  v29 = type metadata accessor for AutomationInfoProperty(0);
  sub_10007802C((uint64_t)v16, (uint64_t)&v12[*(int *)(v29 + 24)], type metadata accessor for AutomationInfo);
  v30 = sub_1000BA294(&qword_100BC3B48);
  sub_100080C0C((uint64_t)v12, a5 + *(int *)(v30 + 36), type metadata accessor for AutomationInfoViewModifier);
  v31 = v35;
  *(_QWORD *)a5 = v35;
  *(_QWORD *)(a5 + 8) = v22;
  *(_QWORD *)(a5 + 16) = v23;
  *(_QWORD *)(a5 + 24) = v24;
  *(_BYTE *)(a5 + 32) = v34;
  *(double *)(a5 + 40) = v25;
  *(_QWORD *)(a5 + 48) = 0;
  v32 = v31;
  sub_100177CCC(v31, v22, v23, v24);
  sub_10006BCFC((uint64_t)v12, type metadata accessor for AutomationInfoViewModifier);
  sub_10006BCFC((uint64_t)v21, type metadata accessor for AutomationInfo);
  sub_100177CF4(v32, v22, v23, v24);
}

void sub_1001159F8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t KeyPath;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t OpaqueTypeConformance2;
  uint64_t v145;
  uint64_t inited;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  int *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _OWORD *v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  int *v278;
  char v279[4];
  int v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD v295[2];
  char v296[8];
  char v297[8];
  _BYTE v298[12];
  char v299[4];
  char v300[8];
  __int128 v301;
  _OWORD v302[2];
  char v303[8];

  v274 = a1;
  v2 = type metadata accessor for OpacityTransition(0);
  sub_1000B43A4(v2, (uint64_t)v297);
  v272 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v270 = v5;
  __chkstk_darwin(v6);
  v8 = sub_1000987B4((uint64_t)&v228 - v7);
  v268 = type metadata accessor for AutomationInfo(v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v11 = sub_1000987B4(v10);
  v257 = type metadata accessor for TranslationModifier(v11);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v14 = sub_1000987B4(v13);
  v15 = type metadata accessor for AccessibilityChildBehavior(v14);
  sub_1000B43A4(v15, (uint64_t)v279);
  v248 = v16;
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  sub_10009511C(v18);
  sub_1000BA294(&qword_100BC3918);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  sub_10009511C(v20);
  v247 = sub_1000BA294(&qword_100BC3920);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  sub_10009511C(v22);
  v23 = sub_1000BA294(&qword_100BC3928);
  sub_1000B43A4(v23, (uint64_t)&v278);
  v246 = v24;
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_100088FDC();
  sub_10009511C(v26);
  v251 = sub_1000BA294(&qword_100BC3930);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_1000986FC();
  v281 = v28;
  __chkstk_darwin(v29);
  sub_10009511C((uint64_t)&v228 - v30);
  v252 = sub_1000BA294(&qword_100BC3938);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100088FDC();
  sub_10009511C(v32);
  v254 = sub_1000BA294(&qword_100BC3940);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_100088FDC();
  sub_10009511C(v34);
  v256 = sub_1000BA294(&qword_100BC3948);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100088FDC();
  sub_10009511C(v36);
  sub_1000BA294(&qword_100BC3950);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_100088FDC();
  sub_10009511C(v38);
  v258 = sub_1000BA294(&qword_100BC3958);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_100088FDC();
  sub_10009511C(v40);
  v262 = sub_1000BA294(&qword_100BC3960);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_100088FDC();
  sub_10009511C(v42);
  v263 = sub_1000BA294(&qword_100BC3968);
  sub_1000B42B0();
  __chkstk_darwin(v43);
  sub_100088FDC();
  sub_10009511C(v44);
  v265 = sub_1000BA294(&qword_100BC3970);
  sub_1000B42B0();
  __chkstk_darwin(v45);
  sub_100088FDC();
  v47 = sub_1000987B4(v46);
  v48 = type metadata accessor for Text.Measurements(v47);
  sub_1000B43A4(v48, (uint64_t)v298);
  v243 = v49;
  sub_10009D98C();
  __chkstk_darwin(v50);
  sub_100088FDC();
  v52 = sub_1000987B4(v51);
  type metadata accessor for DisplayMetrics(v52);
  sub_1000B42B0();
  __chkstk_darwin(v53);
  sub_100088FDC();
  v55 = sub_1000987B4(v54);
  type metadata accessor for LocationHeaderViewMeasurements(v55);
  sub_1000B42B0();
  __chkstk_darwin(v56);
  sub_100088FDC();
  v58 = sub_1000987B4(v57);
  v59 = (int *)type metadata accessor for LocationHeaderView(v58);
  v60 = (_QWORD *)(v1 + v59[16]);
  v61 = v60[10];
  *(_QWORD *)&v301 = v60[9];
  *((_QWORD *)&v301 + 1) = v61;
  v62 = sub_100114EF8();
  swift_bridgeObjectRetain(v61);
  v63 = Text.init<A>(_:)(&v301, &type metadata for String, v62);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  v70 = sub_100173FD0((double (*)(void))&static Font.Weight.thin.getter);
  v291 = Text.font(_:)(v70, v63, v65, v69, v67);
  v290 = v71;
  v280 = v72;
  v292 = v73;
  sub_10009880C();
  sub_1000D31B4(v63, v65, v69);
  swift_bridgeObjectRelease(v67);
  v75 = v60[7];
  v74 = v60[8];
  v283 = v60;
  *(_QWORD *)&v301 = v75;
  *((_QWORD *)&v301 + 1) = v74;
  swift_bridgeObjectRetain(v74);
  v241 = v62;
  v76 = Text.init<A>(_:)(&v301, &type metadata for String, v62);
  v78 = v77;
  v80 = v79;
  v82 = v81 & 1;
  v83 = sub_10003D9A0();
  v288 = Text.font(_:)(v83, v76, v78, v82, v80);
  v287 = v84;
  v86 = v85;
  v289 = v87;
  sub_10009880C();
  sub_1000D31B4(v76, v78, v82);
  swift_bridgeObjectRelease(v80);
  v285 = sub_10007CFFC();
  v284 = v88;
  LODWORD(v277) = v89;
  v286 = v90;
  sub_100117228(v285);
  v91 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v243 + 16))(v276, v1 + v59[21], v278);
  v92 = v1 + v59[18];
  v93 = *(_QWORD *)v92;
  v94 = *(_QWORD *)(v92 + 8);
  v95 = *(unsigned __int8 *)(v92 + 16);
  v96 = *(_QWORD *)(v92 + 24);
  v97 = static Font.largeTitle.getter(v91);
  v235 = Text.font(_:)(v97, v93, v94, v95, v96);
  v238 = v98;
  v236 = v99;
  v237 = v100;
  swift_release(v97);
  v278 = v59;
  v101 = (uint64_t *)(v1 + v59[19]);
  v102 = *v101;
  v103 = v101[1];
  v104 = v101[2];
  v105 = v101[3];
  v239 = v1;
  if (v105)
  {
    v106 = sub_10016F8E0();
    LOBYTE(v301) = v104 & 1;
    v234 = Text.font(_:)(v106, v102, v103, v104 & 1, v105);
    v233 = v107;
    v109 = v108;
    v232 = v110;
    swift_release(v106);
    v231 = v109 & 1;
  }
  else
  {
    v232 = 0;
    v234 = v102;
    v233 = v103;
    v231 = v104;
  }
  swift_bridgeObjectRetain(v292);
  v111 = v289;
  swift_bridgeObjectRetain(v289);
  v112 = v286;
  swift_bridgeObjectRetain(v286);
  v113 = v280 & 1;
  v114 = v290;
  v229 = v280 & 1;
  sub_1000D55D4(v291, v290, v280 & 1);
  LODWORD(v243) = v86;
  v115 = v86 & 1;
  v116 = v288;
  v117 = v287;
  v230 = v86 & 1;
  sub_1000D55D4(v288, v287, v86 & 1);
  v118 = v277 & 1;
  v119 = v285;
  v120 = v284;
  sub_1000D55D4(v285, v284, v277 & 1);
  v226 = v115;
  v121 = v116;
  v225 = v113;
  v122 = v291;
  sub_10016FC40(v275, v276, v235, v238, v236 & 1, v237, v234, v233, v282, v231, v232, v291, v114, v225, v292, v116, v117, v226, v111,
    v119,
    v120,
    v118,
    v112);
  v124 = static VerticalAlignment.center.getter(v123);
  v125 = (uint64_t)v240;
  *v240 = v124;
  *(_QWORD *)(v125 + 8) = 0;
  *(_BYTE *)(v125 + 16) = 1;
  v126 = sub_1000BA294(&qword_100BC3980);
  v227 = v119;
  v127 = v239;
  sub_10017009C(v239, v122, v114, v229, v292, v121, v117, v230, v125 + *(int *)(v126 + 44), v111, v227, v120, v118, v112);
  LOBYTE(v114) = sub_10016FB08();
  v128 = type metadata accessor for LocationHeaderViewFrameCoordinator(0);
  sub_10007A100((uint64_t)&unk_100BC3988);
  v276 = v128;
  v275 = v129;
  v130 = Environment.init<A>(_:)(v128, v128, v129);
  v132 = v131;
  KeyPath = swift_getKeyPath(&unk_10097E0E8);
  v134 = v242;
  sub_100037768(v125, v242, &qword_100BC3918);
  v135 = v247;
  v136 = v134 + *(int *)(v247 + 36);
  *(_BYTE *)v136 = v114 & 1;
  *(_QWORD *)(v136 + 8) = v130;
  *(_BYTE *)(v136 + 16) = v132 & 1;
  *(_QWORD *)(v136 + 24) = KeyPath;
  *(_QWORD *)(v136 + 32) = 0;
  *(_QWORD *)(v136 + 40) = 0;
  *(_QWORD *)(v136 + 48) = 0;
  *(_BYTE *)(v136 + 56) = 0;
  sub_100021A14(v125, &qword_100BC3918);
  v137 = v245;
  static AccessibilityChildBehavior.combine.getter();
  v138 = sub_100177A1C();
  v139 = v244;
  View.accessibilityElement(children:)(v137, v135, v138);
  (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v137, v250);
  sub_100021A14(v134, &qword_100BC3920);
  sub_1000C6538();
  v141 = v127 + v140;
  v142 = *(_QWORD *)v141;
  LOBYTE(v137) = *(_BYTE *)(v141 + 8);
  sub_10008D47C(*(_QWORD *)v141, v137);
  sub_100109B54();
  LOBYTE(KeyPath) = v143;
  sub_1000B15F8(v142, v137);
  *(_QWORD *)&v301 = v135;
  *((_QWORD *)&v301 + 1) = v138;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v301, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityRespondsToUserInteraction(_:)(KeyPath & 1, v249, OpaqueTypeConformance2);
  sub_100098820(v139, *(uint64_t (**)(uint64_t, uint64_t))(v246 + 8));
  v145 = sub_1000BA294(&qword_100BC39A8);
  inited = swift_initStackObject(v145, v296);
  *(_OWORD *)(inited + 16) = xmmword_10097DA20;
  v147 = v283;
  v149 = *v283;
  v148 = v283[1];
  *(_QWORD *)(inited + 32) = *v283;
  *(_QWORD *)(inited + 40) = v148;
  v150 = *((unsigned __int8 *)v147 + 48);
  v151 = v127;
  if (v150)
  {
    v152 = 0;
    v153 = 0;
    if (v150 != 1)
      goto LABEL_9;
    v154 = v283 + 5;
    v155 = v283 + 4;
  }
  else
  {
    v155 = v283 + 2;
    v154 = v283 + 3;
  }
  v153 = *v154;
  v152 = *v155;
  swift_bridgeObjectRetain(*v154);
LABEL_9:
  *(_QWORD *)(inited + 48) = v152;
  *(_QWORD *)(inited + 56) = v153;
  swift_bridgeObjectRetain_n(v148, 2);
  sub_1000B2E08();
  v157 = v156;
  v158 = *(_QWORD *)(v156 + 16);
  v159 = v158 + 1;
  if (v158 >= *(_QWORD *)(v156 + 24) >> 1)
  {
    sub_10009BE44();
    v157 = v223;
  }
  *(_QWORD *)(v157 + 16) = v159;
  v160 = v157 + 16 * v158;
  *(_QWORD *)(v160 + 32) = v149;
  *(_QWORD *)(v160 + 40) = v148;
  if (v153)
  {
    v161 = *(_QWORD *)(v157 + 24);
    swift_bridgeObjectRetain(v153);
    if (v159 >= v161 >> 1)
    {
      sub_10009BE44();
      v157 = v224;
    }
    *(_QWORD *)(v157 + 16) = v158 + 2;
    v162 = v157 + 16 * v159;
    *(_QWORD *)(v162 + 32) = v152;
    *(_QWORD *)(v162 + 40) = v153;
  }
  sub_10009880C();
  v163 = v253;
  v164 = v281;
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v157, v251, &type metadata for String, v241);
  swift_bridgeObjectRelease(v157);
  sub_100021A14(v164, &qword_100BC3930);
  LOBYTE(v164) = sub_10016FB08();
  v165 = v151 + v278[13];
  v166 = *(_QWORD *)v165;
  v167 = *(_BYTE *)(v165 + 8);
  sub_10008D47C(*(_QWORD *)v165, v167);
  sub_10006A9A8();
  v169 = v168;
  sub_1000B15F8(v166, v167);
  v170 = v276;
  v171 = Environment.init<A>(_:)(v276, v276, v275);
  v172 = (uint64_t)v259;
  *v259 = v171;
  *(_BYTE *)(v172 + 8) = v173 & 1;
  v174 = (int *)v257;
  v175 = (_QWORD *)(v172 + *(int *)(v257 + 20));
  *v175 = swift_getKeyPath(&unk_10097E238);
  v176 = sub_1000BA294(&qword_100BC39B0);
  swift_storeEnumTagMultiPayload(v175, v176, 0);
  *(_BYTE *)(v172 + v174[6]) = v164 & 1;
  *(_QWORD *)(v172 + v174[7]) = v169;
  v177 = (_QWORD *)(v172 + v174[8]);
  v294 = 0;
  sub_1000CE4E0(v178, (uint64_t)&type metadata for CGFloat);
  v179 = *((_QWORD *)&v301 + 1);
  *v177 = v301;
  v177[1] = v179;
  v180 = v255;
  sub_100037768(v163, v255, &qword_100BC3930);
  sub_1000C6538();
  sub_10007802C(v172, v180 + v181, type metadata accessor for TranslationModifier);
  sub_100021A14(v163, &qword_100BC3930);
  v182 = sub_100171CDC();
  LOBYTE(v163) = v183;
  LODWORD(v281) = v277 & 1;
  v184 = v280 & 1;
  LODWORD(v278) = v280 & 1;
  v280 = v243 & 1;
  v185 = v291;
  sub_10006AAB8(v291, v290, v184, v292, v288, v287, v243 & 1, v289, v285, v284, v277 & 1, v286);
  v187 = v186;
  v188 = *(_QWORD *)v165;
  LOBYTE(v165) = *(_BYTE *)(v165 + 8);
  sub_10008D47C(v188, v165);
  sub_10006A9A8();
  v190 = v189;
  v191 = sub_1000B15F8(v188, v165);
  v295[0] = 0;
  v294 = 0;
  v295[1] = 0;
  sub_1000CE4E0(v191, (uint64_t)&type metadata for LocationHeaderViewGradientBackgroundViewModifier.LocationHeaderViewGradientBackgroundGeometry);
  v277 = v301;
  v192 = v302[0];
  sub_100109860(v180, (uint64_t)&v289);
  sub_1000C6538();
  v194 = v172 + v193;
  *(_QWORD *)v194 = v182;
  *(_BYTE *)(v194 + 8) = v163 & 1;
  *(_QWORD *)(v194 + 16) = v187;
  *(_QWORD *)(v194 + 24) = v190;
  *(_OWORD *)(v194 + 32) = v277;
  *(_OWORD *)(v194 + 48) = v192;
  sub_100099298(v180);
  v195 = sub_100116C38();
  v197 = v196 & 1;
  static Alignment.center.getter(v195);
  _FrameLayout.init(width:height:alignment:)(0, 1, v195, v197);
  v198 = v261;
  sub_100037768(v172, v261, &qword_100BC3940);
  sub_1000C6538();
  v200 = (_OWORD *)(v198 + v199);
  v201 = v302[0];
  *v200 = v301;
  v200[1] = v201;
  v200[2] = v302[1];
  sub_100099298(v172);
  v202 = (uint64_t)v269;
  *v269 = 0;
  *(_QWORD *)(v202 + 8) = 0;
  *(_BYTE *)(v202 + 16) = 2;
  swift_storeEnumTagMultiPayload(v202, v268, 2);
  v203 = v260;
  sub_100335188();
  sub_10006BCFC(v202, type metadata accessor for AutomationInfo);
  sub_100021A14(v198, &qword_100BC3948);
  LOBYTE(v202) = *((_BYTE *)v283 + 137);
  sub_100109860(v203, (uint64_t)v295);
  *(_BYTE *)(v172 + *(int *)(v258 + 52)) = v202;
  sub_100099298(v203);
  v204 = v271;
  OpacityTransition.init()();
  v205 = v272;
  v206 = v270;
  v207 = v273;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 16))(v270, v204, v273);
  sub_10007A100((uint64_t)&unk_100BC39B8);
  v209 = AnyTransition.init<A>(_:)(v206, v207, v208);
  v210 = v264;
  sub_100037768(v172, v264, &qword_100BC3958);
  sub_1000C6538();
  *(_QWORD *)(v210 + v211) = v209;
  (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v204, v207);
  sub_100021A14(v172, &qword_100BC3958);
  v212 = swift_getKeyPath(&unk_10097E238);
  sub_1000C6538();
  v213 = v267;
  v215 = (uint64_t *)(v267 + v214);
  v216 = sub_1000BA294(&qword_100BC39C0);
  v217 = v282;
  sub_100080C0C(v282, (uint64_t)v215 + *(int *)(v216 + 28), type metadata accessor for LocationHeaderViewMeasurements);
  *v215 = v212;
  sub_1000787D4(v210, v213, &qword_100BC3960);
  swift_allocObject(v170, *(unsigned int *)(v170 + 48), *(unsigned __int16 *)(v170 + 52));
  v293 = sub_1001761FC();
  State.init(wrappedValue:)(&v293, v170);
  sub_1000BCF08(v185, v290, (uint64_t)v298);
  sub_10009D9A8((uint64_t)v303);
  sub_1000BCF08(v288, v287, (uint64_t)v299);
  sub_10009D9A8((uint64_t)v302 + 8);
  sub_1000BCF08(v285, v284, (uint64_t)v300);
  sub_10009D9A8((uint64_t)&v301);
  v218 = v294;
  v219 = v295[0];
  v220 = v266;
  sub_100037768(v213, v266, &qword_100BC3968);
  sub_1000C6538();
  v222 = (_QWORD *)(v220 + v221);
  *v222 = v218;
  v222[1] = v219;
  sub_100021A14(v213, &qword_100BC3968);
  sub_10006BCFC(v217, type metadata accessor for LocationHeaderViewMeasurements);
  sub_1000787D4(v220, v274, &qword_100BC3970);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A38, (uint64_t)&unk_100B5C120);
}

void sub_100116BA4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A30, (uint64_t)&unk_100B5C0A0);
}

unint64_t sub_100116BFC()
{
  unint64_t result;

  result = qword_100BC5A80;
  if (!qword_100BC5A80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100BC5A80);
  }
  return result;
}

uint64_t sub_100116C38()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  _OWORD v11[3];
  char v12;
  _BYTE v13[56];

  v1 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 == (id)1)
  {
    *(double *)&result = 0.0;
  }
  else
  {
    v4 = type metadata accessor for LocationHeaderView(0);
    v5 = *(int *)(v4 + 60);
    if (*(_BYTE *)(v0 + *(int *)(v4 + 64) + 136))
      v6 = 0.4;
    else
      v6 = 0.36;
    v7 = *(_OWORD *)(v0 + v5 + 16);
    v11[0] = *(_OWORD *)(v0 + v5);
    v11[1] = v7;
    v11[2] = *(_OWORD *)(v0 + v5 + 32);
    v12 = *(_BYTE *)(v0 + v5 + 48);
    sub_1000787D4((uint64_t)v11, (uint64_t)v13, &qword_100BC39C8);
    sub_100116DB4((uint64_t)v13);
    sub_100116E74();
    sub_100116DB4((uint64_t)v11);
    sub_100116DB4((uint64_t)v13);
    sub_100116E74();
    sub_100116DB4((uint64_t)v11);
    sub_100116DB4((uint64_t)v13);
    sub_100116E74();
    sub_100116DB4((uint64_t)v11);
    *(double *)&result = v6 * (v8 + v9 + v10);
  }
  return result;
}

void sub_100116DB4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = sub_1000F41D4(a1);
  v2(v1);
  sub_10004A298();
}

void sub_100116DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v2 = sub_10009987C(a1);
  v3(v2, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
  sub_10004A298();
}

void sub_100116E14(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = sub_10011E7D8(a1);
  v2(v1);
  sub_10004A298();
}

void sub_100116E3C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  sub_10004A298();
}

void sub_100116E74()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  sub_1000986AC();
  v5 = v4;
  sub_1000D9280();
  sub_100099300();
  __chkstk_darwin(v6);
  sub_100079FBC();
  v7 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    v8 = *(_QWORD *)(v0 + 40);
    v9 = *(_OWORD *)(v0 + 24);
    v10 = *(_QWORD *)v0;
    v11 = *(_OWORD *)(v0 + 8);
  }
  else
  {
    swift_retain();
    static os_log_type_t.fault.getter(v12, v13, v14, v15, v16, v17, v18, v19);
    v20 = sub_10009F814();
    if (sub_1000BD064(v20))
    {
      v21 = (uint8_t *)sub_100098710(12);
      v22 = sub_100098710(32);
      v24 = v22;
      sub_10009C068(4.8149e-34);
      v23 = sub_1000CE1C8(0x74654D656E656353, 0xEC00000073636972, &v24);
      sub_10011AC64((uint64_t)&v23, (uint64_t)&v24);
      sub_10009D7A0((void *)&_mh_execute_header, v20, v2, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v21);
      sub_1000DA204();
      sub_1000986F0(v22);
      sub_1000986F0((uint64_t)v21);
    }

    sub_100110580();
    swift_getAtKeyPath(v1, v7);
    sub_1007A6848(v0);
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v10 = v24;
    v11 = v25;
    v9 = v26;
    v8 = v27;
  }
  *(_QWORD *)v5 = v10;
  *(_OWORD *)(v5 + 8) = v11;
  *(_OWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 40) = v8;
  sub_100098640();
}

double sub_100116FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  __int128 *v5;
  __int128 v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  double v15;
  double v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _OWORD v22[2];
  char v23;
  _BYTE v24[40];
  _BYTE v25[56];

  v1 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v1);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for LocationHeaderView(0);
  v5 = (__int128 *)(v0 + v4[14]);
  v6 = v5[1];
  if (*(_BYTE *)(v0 + v4[16] + 138) == 1)
  {
    v18 = *v5;
    v19 = v6;
    LOBYTE(v20) = *((_BYTE *)v5 + 32);
    sub_1000787D4((uint64_t)&v18, (uint64_t)v25, &qword_100BC3BB0);
    sub_1001171CC((uint64_t)v25);
    sub_10011740C();
    v8 = v7;
    sub_1001171CC((uint64_t)&v18);
  }
  else
  {
    v22[0] = *v5;
    v22[1] = v6;
    v23 = *((_BYTE *)v5 + 32);
    sub_1000787D4((uint64_t)v22, (uint64_t)v24, &qword_100BC3BB0);
    sub_1001171CC((uint64_t)v24);
    sub_10011740C();
    v11 = v10;
    sub_1001171CC((uint64_t)v22);
    v12 = (__int128 *)(v0 + v4[15]);
    v13 = v12[1];
    v18 = *v12;
    v19 = v13;
    v20 = v12[2];
    v21 = *((_BYTE *)v12 + 48);
    sub_1000787D4((uint64_t)&v18, (uint64_t)v25, &qword_100BC39C8);
    sub_100116DB4((uint64_t)v25);
    sub_100116E74();
    sub_100116DB4((uint64_t)&v18);
    v8 = v11 - v17[2];
  }
  sub_100117228(v9);
  v14 = *((_QWORD *)v3 + 1);
  sub_10006BCFC((uint64_t)v3, type metadata accessor for DisplayMetrics);
  v15 = 0.0;
  if (v14 == 1)
    v15 = sub_100419520();
  return v8 + v15;
}

void sub_1001171CC(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = sub_1000F41D4(a1);
  v2(v1);
  sub_10004A298();
}

void sub_1001171F4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  sub_10004A298();
}

#error "100117298: call analysis failed (funcsize=64)"

uint64_t sub_100117350()
{
  return 2;
}

BOOL sub_10011736C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100094184(v1, v0);
}

uint64_t sub_100117378()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100117380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Date.== infix(_:_:)(v2 + a1, v1 + a1);
}

uint64_t sub_10011738C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100117398()
{
  return type metadata accessor for LocationComponentViewModel(0);
}

uint64_t sub_1001173A0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = result;
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_1001173B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + a3);
  *v4 = result;
  v4[1] = a2;
  return result;
}

unint64_t sub_1001173DC()
{
  return sub_100665358();
}

uint64_t sub_1001173E4()
{
  return sub_1000191E4();
}

uint64_t sub_1001173F0()
{
  return type metadata accessor for Elevation(0);
}

uint64_t sub_100117404(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10011740C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[4];

  sub_1000986AC();
  sub_1000D9280();
  sub_100098B6C();
  __chkstk_darwin(v3);
  sub_100099864();
  if (*(_BYTE *)(v0 + 32) != 1)
  {
    swift_retain();
    static os_log_type_t.fault.getter(v4, v5, v6, v7, v8, v9, v10, v11);
    v12 = sub_1000C6CA4();
    if (sub_1000C624C(v12))
    {
      v13 = (_DWORD *)sub_100098710(12);
      v14 = sub_100098710(32);
      v18[0] = v14;
      *v13 = 136315138;
      v17 = sub_1000CE1C8(0x65736E4965676445, 0xEA00000000007374, v18);
      sub_1000C0B94((uint64_t)&v17, (uint64_t)v18);
      sub_1000DDF48((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.");
      sub_1000B4DBC();
      sub_1000986F0(v14);
      sub_1000986F0((uint64_t)v13);
    }

    sub_1000C10E0();
    sub_1000D2024();
    sub_1007A6880(v0);
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_100098640();
}

uint64_t sub_100117558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t (*v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char *v91;
  char v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t active;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v145 = a4;
  v146 = a3;
  v149 = (int *)a2;
  v151 = a5;
  v152 = a1;
  v5 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v5);
  v138 = (uint64_t)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v7);
  v139 = (uint64_t)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v9);
  v140 = (uint64_t)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC5F40);
  __chkstk_darwin(v11);
  v135 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v13);
  v137 = (uint64_t *)((char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v141 = (uint64_t)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v148 = (uint64_t)&v128 - v17;
  v150 = type metadata accessor for Location.Identifier(0);
  v143 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v142 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v128 - v20;
  v22 = type metadata accessor for SavedLocation(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v130 = (uint64_t)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v147 = (uint64_t)&v128 - v26;
  v27 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  __chkstk_darwin(v27);
  v131 = (uint64_t)&v128 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v128 - v30;
  v144 = type metadata accessor for CurrentLocation(0);
  __chkstk_darwin(v144);
  v129 = (uint64_t)&v128 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v132 = (uint64_t)&v128 - v34;
  v35 = type metadata accessor for LocationsAction(0);
  __chkstk_darwin(v35);
  v37 = (unint64_t *)((char *)&v128 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v38);
  v40 = (uint64_t *)((char *)&v128 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = (int *)type metadata accessor for ViewState(0);
  __chkstk_darwin(v41);
  v136 = (uint64_t)&v128 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v45 = (char *)&v128 - v44;
  v133 = v152 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  sub_100080C0C(v152 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)&v128 - v44, v46);
  sub_100080C0C((uint64_t)&v45[v41[5]], (uint64_t)v40, type metadata accessor for ViewState.SecondaryViewState);
  v152 = v38;
  if (swift_getEnumCaseMultiPayload(v40) == 1)
  {
    sub_1000215BC((uint64_t)v40, type metadata accessor for ViewState.SecondaryViewState);
LABEL_3:
    sub_1000215BC((uint64_t)v45, type metadata accessor for ViewState);
LABEL_4:
    v47 = 1;
    v48 = v151;
    return _s7Weather24LocationCompositionStateOwst_0(v48, v47, 1, (uint64_t)v41);
  }
  v49 = *v40;
  if (*(_QWORD *)&v45[v41[9] + 8] == 1)
  {
    v50 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v50, "userInterfaceIdiom");

    if ((v45[v41[7]] & 1) == 0)
    {
      swift_release(v49);
      goto LABEL_3;
    }
  }
  sub_1000215BC((uint64_t)v45, type metadata accessor for ViewState);
  sub_100080C0C((uint64_t)v149, (uint64_t)v37, type metadata accessor for LocationsAction);
  if (swift_getEnumCaseMultiPayload(v37) != 4)
  {
    sub_1000215BC((uint64_t)v37, type metadata accessor for LocationsAction);
    v66 = v145;
    v67 = v49;
    v68 = sub_10060C1C4(v49, v145);
    sub_10009C514(v66, (uint64_t)v31);
    v69 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v144);
    v70 = v150;
    if (v69 != 1)
    {
      v71 = (uint64_t)v31;
      v72 = v132;
      sub_10007802C(v71, v132, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v48 = v151;
      if ((v68 & 1) != 0)
      {
        v73 = v136;
        sub_100080C0C(v133, v136, type metadata accessor for ViewState);
        v74 = (uint64_t)v135;
        v75 = v72;
        CurrentLocation.identifier.getter(v76);
        _s7Weather24LocationCompositionStateOwst_0(v74, 0, 1, v70);
        _s7Weather24LocationCompositionStateOwst_0(v74, 0, 1, active);
        sub_100023164(v74, 3, 2, 4, 2, 3, v67);
        v78 = v77;
        sub_100021A14(v74, &qword_100BC5F40);
        v79 = (uint64_t)v137;
        *v137 = v78;
        v80 = v152;
        swift_storeEnumTagMultiPayload(v79, v152, 0);
        _s7Weather24LocationCompositionStateOwst_0(v79, 0, 1, v80);
        v81 = type metadata accessor for SearchViewState(0);
        v82 = v140;
        _s7Weather24LocationCompositionStateOwst_0(v140, 1, 1, v81);
        v83 = type metadata accessor for DisplayMetrics(0);
        v84 = v41;
        v85 = v139;
        _s7Weather24LocationCompositionStateOwst_0(v139, 1, 1, v83);
        v86 = type metadata accessor for WeatherMapPresentationState(0);
        v87 = v138;
        _s7Weather24LocationCompositionStateOwst_0(v138, 1, 1, v86);
        sub_100112494();
        swift_release(v67);
        sub_100021A14(v87, &qword_100BC5F68);
        v88 = v85;
        v41 = v84;
        sub_100021A14(v88, &qword_100BC5F70);
        sub_100021A14(v82, &qword_100BC5F78);
        sub_100021A14(v79, &qword_100BC5F80);
        sub_1000215BC(v73, type metadata accessor for ViewState);
        sub_1000215BC(v75, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        v47 = 0;
      }
      else
      {
        sub_1000215BC(v72, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        swift_release(v67);
        v47 = 1;
      }
      return _s7Weather24LocationCompositionStateOwst_0(v48, v47, 1, (uint64_t)v41);
    }
    swift_release(v67);
    sub_100021A14((uint64_t)v31, (uint64_t *)&unk_100C0D170);
    goto LABEL_4;
  }
  v51 = *v37;
  result = type metadata accessor for LocationsState(0);
  v53 = v150;
  if ((v51 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v54 = result;
  v149 = v41;
  v55 = *(int *)(result + 20);
  v56 = *(_QWORD *)(v146 + v55);
  if (v51 >= *(_QWORD *)(v56 + 16))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v57 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v58 = *(_QWORD *)(v23 + 72);
  sub_100080C0C(v56 + v57 + v58 * v51, v147, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
  SavedLocation.identifier.getter(v59);
  v60 = v148;
  sub_100080C0C(v49 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, v148, type metadata accessor for LocationViewerActiveLocationState);
  v61 = v60;
  v62 = v141;
  sub_100080C0C(v61, v141, type metadata accessor for LocationViewerActiveLocationState);
  v63 = _s7Weather24LocationCompositionStateOwet_0(v62, 1, v53);
  if ((_DWORD)v63 == 1)
  {
    v64 = v142;
    static CurrentLocation.placeholderIdentifier.getter(v63);
    v65 = v143;
  }
  else
  {
    v89 = v62;
    v64 = v142;
    v65 = v143;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 32))(v142, v89, v53);
  }
  sub_1000215BC(v148, type metadata accessor for LocationViewerActiveLocationState);
  v90 = static Location.Identifier.== infix(_:_:)(v21, v64);
  v91 = v64;
  v92 = v90;
  v93 = *(void (**)(char *, uint64_t))(v65 + 8);
  v93(v91, v53);
  result = ((uint64_t (*)(char *, uint64_t))v93)(v21, v53);
  if ((v92 & 1) == 0)
  {
    sub_1000215BC(v147, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    swift_release(v49);
    goto LABEL_24;
  }
  v94 = *(_QWORD *)(*(_QWORD *)(v146 + v55) + 16);
  if (!v51 && v94 == 1)
  {
    v95 = v131;
    sub_10009C514(v146, v131);
    if (_s7Weather24LocationCompositionStateOwet_0(v95, 1, v144) == 1)
    {
      sub_1000215BC(v147, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
      swift_release(v49);
      sub_100021A14(v95, (uint64_t *)&unk_100C0D170);
LABEL_24:
      v47 = 1;
      v48 = v151;
LABEL_32:
      v41 = v149;
      return _s7Weather24LocationCompositionStateOwst_0(v48, v47, 1, (uint64_t)v41);
    }
    v114 = v129;
    sub_10007802C(v95, v129, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    v115 = v136;
    sub_100080C0C(v133, v136, type metadata accessor for ViewState);
    v116 = (uint64_t)v135;
    CurrentLocation.identifier.getter(v117);
    _s7Weather24LocationCompositionStateOwst_0(v116, 0, 1, v53);
    _s7Weather24LocationCompositionStateOwst_0(v116, 0, 1, active);
    sub_100023164(v116, 3, 2, 4, 2, 3, v49);
    v119 = v118;
    sub_100021A14(v116, &qword_100BC5F40);
    v120 = (uint64_t)v137;
    *v137 = v119;
    v121 = v152;
    swift_storeEnumTagMultiPayload(v120, v152, 0);
    _s7Weather24LocationCompositionStateOwst_0(v120, 0, 1, v121);
    v122 = type metadata accessor for SearchViewState(0);
    v123 = v140;
    _s7Weather24LocationCompositionStateOwst_0(v140, 1, 1, v122);
    v124 = type metadata accessor for DisplayMetrics(0);
    v125 = v139;
    _s7Weather24LocationCompositionStateOwst_0(v139, 1, 1, v124);
    v126 = type metadata accessor for WeatherMapPresentationState(0);
    v127 = v138;
    _s7Weather24LocationCompositionStateOwst_0(v138, 1, 1, v126);
    v48 = v151;
    sub_100112494();
    swift_release(v49);
    sub_100021A14(v127, &qword_100BC5F68);
    sub_100021A14(v125, &qword_100BC5F70);
    sub_100021A14(v123, &qword_100BC5F78);
    sub_100021A14(v120, &qword_100BC5F80);
    sub_1000215BC(v115, type metadata accessor for ViewState);
    sub_1000215BC(v114, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    v113 = v147;
LABEL_31:
    sub_1000215BC(v113, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v47 = 0;
    goto LABEL_32;
  }
  v96 = v94 - 2;
  if (v96 >= (uint64_t)(v51 - 1))
    v96 = v51 - 1;
  v97 = v96 & ~(v96 >> 63);
  v98 = *(_QWORD *)(v145 + *(int *)(v54 + 20));
  if (v97 < *(_QWORD *)(v98 + 16))
  {
    v99 = v130;
    sub_100080C0C(v98 + v57 + v97 * v58, v130, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v100 = v136;
    sub_100080C0C(v133, v136, type metadata accessor for ViewState);
    v101 = (uint64_t)v135;
    SavedLocation.identifier.getter(v102);
    _s7Weather24LocationCompositionStateOwst_0(v101, 0, 1, v53);
    _s7Weather24LocationCompositionStateOwst_0(v101, 0, 1, active);
    sub_100023164(v101, 3, 2, 4, 2, 3, v49);
    v104 = v103;
    sub_100021A14(v101, &qword_100BC5F40);
    v105 = (uint64_t)v137;
    *v137 = v104;
    v106 = v152;
    swift_storeEnumTagMultiPayload(v105, v152, 0);
    _s7Weather24LocationCompositionStateOwst_0(v105, 0, 1, v106);
    v107 = type metadata accessor for SearchViewState(0);
    v108 = v140;
    _s7Weather24LocationCompositionStateOwst_0(v140, 1, 1, v107);
    v109 = type metadata accessor for DisplayMetrics(0);
    v110 = v139;
    _s7Weather24LocationCompositionStateOwst_0(v139, 1, 1, v109);
    v111 = type metadata accessor for WeatherMapPresentationState(0);
    v112 = v138;
    _s7Weather24LocationCompositionStateOwst_0(v138, 1, 1, v111);
    v48 = v151;
    sub_100112494();
    swift_release(v49);
    sub_100021A14(v112, &qword_100BC5F68);
    sub_100021A14(v110, &qword_100BC5F70);
    sub_100021A14(v108, &qword_100BC5F78);
    sub_100021A14(v105, &qword_100BC5F80);
    sub_1000215BC(v100, type metadata accessor for ViewState);
    sub_1000215BC(v99, (uint64_t (*)(_QWORD))&type metadata accessor for SavedLocation);
    v113 = v147;
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
  return result;
}

void sub_1001182B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(_QWORD);
  char *v34;
  _QWORD v35[4];
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v47 = a3;
  v43 = a2;
  v48 = a1;
  v46 = a4;
  v4 = sub_1000BA294(&qword_100BC61F0);
  __chkstk_darwin(v4);
  v50 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Location.Identifier(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v51 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v52 = (char *)v35 - v9;
  v54 = type metadata accessor for SavedLocation(0);
  v41 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v49 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v57 = (char *)v35 - v12;
  __chkstk_darwin(v13);
  v53 = (char *)v35 - v14;
  __chkstk_darwin(v15);
  v17 = __chkstk_darwin(v16);
  v35[2] = (char *)v35 - v18;
  v40 = type metadata accessor for IndexSet(0, v17);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v38 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v35[3] = (char *)v35 - v21;
  v22 = sub_1000BA294(&qword_100BC3628);
  __chkstk_darwin(v22);
  v37 = (char *)v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Location(0);
  __chkstk_darwin(v36);
  v24 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  v25 = __chkstk_darwin(v24);
  v26 = type metadata accessor for WeatherCoalescedLocationResult(0, v25);
  v44 = *(_QWORD *)(v26 - 8);
  v45 = v26;
  __chkstk_darwin(v26);
  __chkstk_darwin(v27);
  v42 = (char *)v35 - v28;
  v29 = type metadata accessor for CurrentLocation(0);
  __chkstk_darwin(v29);
  v30 = type metadata accessor for LocationsAction(0);
  __chkstk_darwin(v30);
  v32 = (char *)v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(v48, (uint64_t)v32, v33);
  v34 = (char *)&loc_100118674 + *((int *)qword_10060C1A8 + swift_getEnumCaseMultiPayload(v32));
  __asm { BR              X10 }
}

void sub_100118684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  sub_10007802C(v2, v3, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  v5 = *(_QWORD **)(v4 - 264);
  v6 = v5[5];
  v7 = v5[6];
  sub_1000DB418(v5 + 2, v6);
  sub_100080C0C(v3, v0, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
  v8 = (int *)type metadata accessor for LocationsState(0);
  v9 = *(_QWORD *)(v4 - 272);
  dispatch thunk of WeatherLocationCoalescenceManagerType.coalesceLocations(currentLocation:locationList:locationsOfInterest:displayContextByLocation:)(v0, *(_QWORD *)(*(_QWORD *)(v4 - 232) + v8[5]), *(_QWORD *)(*(_QWORD *)(v4 - 232) + v8[7]), *(_QWORD *)(*(_QWORD *)(v4 - 232) + v8[13]), v6, v7);
  sub_100021A14(v0, (uint64_t *)&unk_100C0D170);
  v10 = ((uint64_t (*)(void))WeatherCoalescedLocationResult.coalescedLocations.getter)();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 256) + 8))(v9, *(_QWORD *)(v4 - 248));
  sub_100080C0C(v3, v0, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
  sub_1006E96DC();
  swift_bridgeObjectRelease(v10);
  sub_100021A14(v0, (uint64_t *)&unk_100C0D170);
  sub_1000215BC(v3, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
}

void sub_100119640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000DF434();
  type metadata accessor for Location.Identifier(v0);
  sub_1000C1960(&qword_100BC3638, v1, (uint64_t)&protocol conformance descriptor for Location.Identifier);
  sub_1000C5174(v2);
  sub_1000C5AB8();
  sub_10004A2A0();
}

uint64_t sub_1001196A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001196E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1000D93C4();
  v26 = v1;
  v27 = v2;
  v24 = v3;
  v25 = v4;
  v5 = v0;
  v7 = v6;
  v22 = v8;
  v23 = v9;
  v10 = v9(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - v12;
  v14 = -1 << *(_BYTE *)(v5 + 32);
  v15 = v7 & ~v14;
  if (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v11 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    do
    {
      v18(v13, *(_QWORD *)(v5 + 48) + v17 * v15, v10);
      sub_100086DA4(v24, v23, v25);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v22, v10, v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v20 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  return v15;
}

uint64_t *sub_100119810(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for CurrentLocation(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      if (EnumCaseMultiPayload == 2)
      {
        v23 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v9 = a1;
        v10 = v6;
        v11 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v24 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v9 = a1;
        v10 = v6;
        v11 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          goto LABEL_15;
        }
        v8 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v6;
        v11 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, v10, v11);
LABEL_15:
      v14 = a1;
      v15 = a3;
      v16 = 0;
      goto LABEL_16;
    case 1u:
      v12 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = sub_1000BA294(&qword_100BDEBF8);
      *((_BYTE *)a1 + *(int *)(v13 + 48)) = a2[*(int *)(v13 + 48)];
      v14 = a1;
      v15 = a3;
      v16 = 1;
      goto LABEL_16;
    case 2u:
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      *a1 = v17;
      a1[1] = v18;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v14 = a1;
      v15 = a3;
      v16 = 2;
      goto LABEL_16;
    case 5u:
      v19 = *(_QWORD *)a2;
      *a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v19);
      v14 = a1;
      v15 = a3;
      v16 = 5;
      goto LABEL_16;
    case 6u:
      v20 = *(_QWORD *)a2;
      v21 = *((_QWORD *)a2 + 1);
      v22 = a2[16];
      sub_100163980(v20, v21, v22);
      *a1 = v20;
      a1[1] = v21;
      *((_BYTE *)a1 + 16) = v22;
      v14 = a1;
      v15 = a3;
      v16 = 6;
LABEL_16:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      return a1;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

void sub_100119A2C()
{
  sub_1005FEB88();
}

void sub_100119A40()
{
  _QWORD *v0;
  _QWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  sub_1000986AC();
  v1 = v0;
  LODWORD(v75) = v2;
  v76 = v3;
  v68 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v81 = v11;
  v13 = v12;
  v67 = *(_QWORD *)(sub_1000FC58C() - 8);
  sub_10011E39C();
  __chkstk_darwin(v14);
  v66 = v15;
  sub_1000DCA60();
  v80 = v16;
  v79 = sub_1000992C4();
  v69 = *(_QWORD *)(v79 - 8);
  v17 = *(_QWORD *)(v69 + 64);
  __chkstk_darwin(v79);
  v78 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000BAD84();
  v71 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  sub_10003BD18();
  v77 = v18;
  v65 = v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v56 - v21;
  v24 = v1[18];
  v23 = v1[19];
  sub_1000DB418(v1 + 15, v24);
  v70 = v22;
  dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v24, v23);
  v26 = *(_QWORD *)(v13 + 16);
  if (v26)
  {
    v64 = v75 & 1;
    v27 = *(unsigned __int8 *)(v69 + 80);
    v28 = v13 + ((v27 + 32) & ~v27);
    v62 = *(_QWORD *)(v69 + 72);
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
    v63 = v27;
    v60 = (v27 + 24) & ~v27;
    v59 = (v17 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
    v58 = v59 + 32;
    v76 &= 1u;
    v56 = v13;
    sub_10009EF94();
    v57 = &type metadata for () + 1;
    do
    {
      v74 = v28;
      v75 = v26;
      v30 = (uint64_t)v78;
      v29 = v79;
      v31 = v61;
      v61((uint64_t)v78, v28, v79);
      v32 = sub_100818F70();
      sub_1000860C4(v32);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v8);
      sub_10003BCC8();
      v72 = sub_1000AE388(0, v30, v76, v81, v10, v8, v6);
      __chkstk_darwin(v72);
      *(&v56 - 2) = (uint64_t)v1;
      *(&v56 - 1) = v28;
      v33 = sub_1000BA294(&qword_100BC5AA8);
      v73 = firstly<A>(closure:)(sub_100038D68, &v56 - 4, v33);
      v31(v30, v28, v29);
      sub_100080C0C(v68, v80, type metadata accessor for TimeState);
      v34 = v71;
      (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v77, v70, v82);
      v35 = *(unsigned __int8 *)(v67 + 80);
      v36 = (v58 + v35) & ~v35;
      v37 = *(unsigned __int8 *)(v34 + 80);
      v38 = v10;
      v39 = v1;
      v40 = (v66 + v37 + v36) & ~v37;
      v41 = v40 + v65;
      v42 = v8;
      v43 = v6;
      v44 = (v40 + v65 + 9) & 0xFFFFFFFFFFFFFFF8;
      v45 = swift_allocObject(&unk_100B95330, v44 + 8, v63 | v35 | v37 | 7);
      *(_QWORD *)(v45 + 16) = v39;
      (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v45 + v60, v78, v79);
      v46 = (_QWORD *)(v45 + v59);
      v47 = v80;
      *v46 = v81;
      v46[1] = v38;
      v46[2] = v42;
      v46[3] = v43;
      sub_10007802C(v47, v45 + v36, type metadata accessor for TimeState);
      v48 = v45 + v40;
      v1 = v39;
      v10 = v38;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32))(v48, v77, v82);
      v49 = (_BYTE *)(v45 + v41);
      *v49 = v76;
      v49[1] = v64;
      v50 = v72;
      *(_QWORD *)(v45 + v44) = v72;
      v6 = v43;
      v8 = v42;
      v51 = v74;
      sub_1000989F8();
      swift_bridgeObjectRetain(v8);
      sub_10003BCC8();
      swift_retain();
      v52 = sub_100079FA4();
      v53 = (void *)zalgo.getter(v52);
      v54 = Promise.then<A>(on:closure:)(v53, sub_100061CF8, v45, v57);
      v55 = v75;
      swift_release(v54);
      sub_10009880C();
      sub_100089020();

      swift_release(v50);
      v28 = v51 + v62;
      v26 = v55 - 1;
    }
    while (v26);
    v25 = swift_bridgeObjectRelease(v56);
  }
  (*(void (**)(char *, uint64_t, __n128))(v71 + 8))(v70, v82, v25);
  sub_100098640();
}

uint64_t type metadata accessor for WeatherDataUpdateRequestLog(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEA218, (uint64_t)&nominal type descriptor for WeatherDataUpdateRequestLog);
}

uint64_t sub_100119E84@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD __dst[10];

  v2 = v1;
  v59 = a1;
  type metadata accessor for ActiveLocationModel(0);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v52 = v4;
  v53 = sub_1000BA294(&qword_100BCD680);
  sub_10009D98C();
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1000BA294(&qword_100BEEFE0);
  v56 = *(_QWORD *)(v55 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v60 = v13;
  v57 = sub_1000BA294(&qword_100BEEFE8);
  v58 = *(_QWORD *)(v57 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v54 = v15;
  v17 = static Color.clear.getter(v16);
  sub_1000C2C4C();
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ((v18 + 16) & ~v18) + v10;
  v20 = v18 | 7;
  v21 = sub_1000B4B40((uint64_t)&unk_100B7F4E0);
  sub_1000BB0B4(v21);
  sub_1000C2C4C();
  v51 = v20;
  v22 = swift_allocObject(&unk_100B7F508, v19, v20);
  sub_1000BB0B4(v22);
  __dst[0] = v17;
  __dst[1] = sub_10015306C;
  memset(&__dst[3], 0, 32);
  __dst[2] = v21;
  __dst[7] = sub_100153078;
  __dst[8] = v22;
  v23 = *(_QWORD *)&v2[*(int *)(v8 + 32) + 8];
  swift_retain();
  v24 = v52;
  sub_10006BDA4();
  swift_release(v23);
  sub_100019258(v24, (uint64_t)v7);
  sub_1000C2C4C();
  v25 = sub_1000B4B40((uint64_t)&unk_100B7F530);
  sub_1000BB0B4(v25);
  v26 = sub_1000BA294(&qword_100BEEFF0);
  v52 = v26;
  v27 = sub_10015631C();
  v28 = sub_10015A110();
  v29 = v26;
  v30 = (void *)v53;
  View.onChange<A>(of:initial:_:)(v7, 0, sub_1001530EC, v25, v29, v53, v27, v28);
  swift_release(v25);
  sub_100021A68((uint64_t)v7, &qword_100BCD680);
  swift_release(__dst[0]);
  sub_1000BF8D0(__dst[1], __dst[2]);
  sub_1000BF8D0(__dst[3], __dst[4]);
  sub_1000BF8D0(__dst[5], __dst[6]);
  sub_1000BF8D0(__dst[7], __dst[8]);
  v50 = v2;
  memcpy(__dst, v2, 0x49uLL);
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
  sub_10008CF58();
  sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
  sub_10007689C();
  v65 = v31;
  sub_1000C2C4C();
  v32 = v19;
  v33 = v19;
  v34 = v51;
  v35 = swift_allocObject(&unk_100B7F558, v33, v51);
  sub_1000BB0B4(v35);
  v61 = v52;
  v62 = v30;
  v63 = v27;
  v64 = v28;
  v36 = sub_10009885C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v37 = sub_100116BFC();
  v38 = v54;
  v39 = v55;
  v40 = v60;
  View.onChange<A>(of:initial:_:)(&v65, 0, sub_10054CCD0, v35, v55, &type metadata for CGFloat, v36, v37);
  v41 = swift_release(v35);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v40, v39, v41);
  v65 = v50[10];
  v42 = v65;
  sub_10011A3DC((uint64_t)v50, (uint64_t)v11);
  v43 = swift_allocObject(&unk_100B7F580, v32, v34);
  sub_1000BB0B4(v43);
  swift_bridgeObjectRetain(v42);
  v44 = sub_1000BA294(&qword_100BEF000);
  v61 = v39;
  v62 = &type metadata for CGFloat;
  v63 = v36;
  v64 = v37;
  v45 = sub_10009885C((uint64_t)&v61, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v46 = sub_100121C78(&qword_100BEF008, &qword_100BEF000, (void (*)(void))sub_100120FF0, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  v47 = v57;
  View.onChange<A>(of:initial:_:)(&v65, 0, sub_10054CCE0, v43, v57, v44, v45, v46);
  swift_release(v43);
  v48 = swift_bridgeObjectRelease(v65);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v38, v47, v48);
}

uint64_t sub_10011A398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011A3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011A420(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 64);
  v41 = *(_BYTE *)(a2 + 72);
  sub_1000D4FF4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v40, v41);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v40;
  *(_BYTE *)(a1 + 72) = v41;
  v13 = *(_QWORD *)(a2 + 80);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + 80) = v13;
  v17 = type metadata accessor for Location.Identifier(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
  v19 = swift_bridgeObjectRetain(v13);
  v18(v15, v16, v17, v19);
  v20 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[9];
  v25 = a3[10];
  v26 = (_QWORD *)(a1 + v24);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_QWORD *)(a1 + v25);
  v30 = (_QWORD *)(a2 + v25);
  swift_retain();
  swift_retain();
  swift_retain();
  v31 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    v33 = 1;
  }
  else
  {
    *v29 = *v30;
    swift_retain();
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v31, v33);
  v34 = a3[11];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  v38 = v36[1];
  *v35 = v37;
  v35[1] = v38;
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for LocationViewCollisionOptionsUpdatingView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEEF90, (uint64_t)&nominal type descriptor for LocationViewCollisionOptionsUpdatingView);
}

void sub_10011A604()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000986AC();
  v3 = v2;
  sub_1000ECF70();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100094F2C();
  __chkstk_darwin(v5);
  sub_1000CDF04();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000CFC7C();
  sub_1000BDCC4();
  *v1 = 0;
  v1[1] = 0xE000000000000000;
  KeyPath = swift_getKeyPath(&unk_100995FA8);
  v8 = sub_1000DC69C(KeyPath);
  sub_1000C21A4(v8);
  v9 = sub_1000BA294(v3);
  sub_10009D2C8(v9);
  v10 = sub_100079FD4();
  sub_10007802C((uint64_t)v1, v0 + *(int *)(v10 + 36), type metadata accessor for AutomationInfoViewModifier);
  sub_100098640();
}

uint64_t type metadata accessor for AutomationInfoViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE1018;
  if (!qword_100BE1018)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AutomationInfoViewModifier);
  return result;
}

uint64_t *sub_10011A6F4(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = *a2;
    v13 = a2[1];
    v14 = *((_BYTE *)a2 + 16);
    sub_1000B2044(v12, v13, v14);
    *a1 = v12;
    a1[1] = v13;
    *((_BYTE *)a1 + 16) = v14;
    v15 = a1;
    v16 = a3;
    v17 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for AutomationCellInfo(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_26;
      case 1u:
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        swift_bridgeObjectRetain(v26);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_26;
      case 2u:
        v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        swift_bridgeObjectRetain(v27);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_26;
      case 3u:
        v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        swift_bridgeObjectRetain(v28);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_26;
      case 4u:
        v29 = a2[1];
        *a1 = *a2;
        a1[1] = v29;
        swift_bridgeObjectRetain(v29);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_26;
      case 5u:
        v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        swift_bridgeObjectRetain(v30);
        v9 = a1;
        v10 = v7;
        v11 = 5;
        goto LABEL_26;
      case 6u:
        v31 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(a1, a2, v31);
        v9 = a1;
        v10 = v7;
        v11 = 6;
        goto LABEL_26;
      case 7u:
        v32 = a2[1];
        *a1 = *a2;
        a1[1] = v32;
        swift_bridgeObjectRetain(v32);
        v9 = a1;
        v10 = v7;
        v11 = 7;
        goto LABEL_26;
      case 8u:
        v33 = a2[1];
        *a1 = *a2;
        a1[1] = v33;
        v34 = a2[3];
        a1[2] = a2[2];
        a1[3] = v34;
        v35 = a2[4];
        v36 = a2[5];
        a1[4] = v35;
        a1[5] = v36;
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v36);
        v9 = a1;
        v10 = v7;
        v11 = 8;
        goto LABEL_26;
      case 9u:
        v37 = a2[1];
        *a1 = *a2;
        a1[1] = v37;
        v38 = a2[2];
        v39 = a2[3];
        a1[2] = v38;
        a1[3] = v39;
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v39);
        v9 = a1;
        v10 = v7;
        v11 = 9;
        goto LABEL_26;
      case 0xAu:
        v40 = a2[1];
        *a1 = *a2;
        a1[1] = v40;
        swift_bridgeObjectRetain(v40);
        v9 = a1;
        v10 = v7;
        v11 = 10;
        goto LABEL_26;
      case 0xBu:
        v41 = a2[1];
        *a1 = *a2;
        a1[1] = v41;
        v42 = a2[2];
        v43 = a2[3];
        a1[2] = v42;
        a1[3] = v43;
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v43);
        v9 = a1;
        v10 = v7;
        v11 = 11;
LABEL_26:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v15 = a1;
    v16 = a3;
    v17 = 1;
  }
  else
  {
    v18 = type metadata accessor for AutomationViewInfo(0);
    switch(swift_getEnumCaseMultiPayload(a2, v18))
    {
      case 0u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        swift_bridgeObjectRetain(v19);
        v20 = a1;
        v21 = v18;
        v22 = 0;
        goto LABEL_12;
      case 1u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        swift_bridgeObjectRetain(v23);
        v20 = a1;
        v21 = v18;
        v22 = 1;
        goto LABEL_12;
      case 2u:
        v24 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v20 = a1;
        v21 = v18;
        v22 = 2;
        goto LABEL_12;
      case 3u:
        v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        swift_bridgeObjectRetain(v25);
        v20 = a1;
        v21 = v18;
        v22 = 3;
LABEL_12:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        break;
    }
    v15 = a1;
    v16 = a3;
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v16, v17);
  return a1;
}

#error "10011AAD8: call analysis failed (funcsize=64)"

uint64_t sub_10011AB7C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_10011AB88(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_100080C0C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_10011AB94()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[171] + 8))(v0[158], v0[175]);
}

void sub_10011ABB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100321224(a1, a2, v2);
}

uint64_t sub_10011ABD0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_10011ABDC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2[19] = result;
  v2[20] = a2;
  v2[17] = 44;
  v2[18] = 0xE100000000000000;
  return result;
}

void sub_10011ABF8()
{
  sub_10054A1D0();
}

uint64_t sub_10011AC04()
{
  uint64_t v0;
  uint64_t v1;

  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 32)));
}

uint64_t sub_10011AC10()
{
  uint64_t v0;

  return v0;
}

void sub_10011AC20(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_100084050(v3, *(_QWORD *)(v4 - 200), a3);
}

uint64_t sub_10011AC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return Array<A>.write(to:)(v2, v1, v3, v4, a1);
}

uint64_t sub_10011AC4C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011AC58()
{
  uint64_t v0;
  uint64_t v1;

  return State.init(wrappedValue:)(v1, v0);
}

uint64_t sub_10011AC64(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_10011AC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwet_0(v2 + *(int *)(v0 + 24), 1, v1);
}

uint64_t sub_10011AC9C()
{
  return Date.init()();
}

uint64_t sub_10011ACA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v13 + *(int *)(v12 + 104)));
  return a12;
}

uint64_t sub_10011ACC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011ACE4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t type metadata accessor for Store(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Store);
}

uint64_t sub_10011AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EE574);
}

uint64_t sub_10011AD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10054CB94);
}

uint64_t sub_10011AD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t type metadata accessor for ModuleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModuleView);
}

double sub_10011ADB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011ADC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011ADD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011ADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011ADF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AF90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011AFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B000(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_10011B160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for WireframeContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WireframeContent);
}

__n128 initializeWithTake for ConfiguredUnitsState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10011B190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10054CC2C);
}

uint64_t type metadata accessor for LocationFooterView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD5D00, (uint64_t)&nominal type descriptor for LocationFooterView);
}

void sub_10011B1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10003BCA4(*(_QWORD *)(a1 + 16));
    sub_100079F70();
  }
  else
  {
    v6 = sub_1000BA294(&qword_100BC3808);
    sub_1000B250C(a1 + *(int *)(a3 + 32), a2, v6);
  }
}

void sub_10011B20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA8C4();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    sub_1000B250C(a1, a2, v4);
  else
    sub_100079F70();
}

void sub_10011B270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;

  v7 = a4(0);
  if (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(a1, a2, v7);
  }
  else
  {
    sub_10003BCA4(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 24));
    sub_100079F70();
  }
}

uint64_t sub_10011B2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BC3660);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10011B348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100098778();
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
}

void sub_10011B378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000BA294(&qword_100BD8F08);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(a1, a2, v6);
  }
  else
  {
    sub_1000B2FAC(a1 + *(int *)(a3 + 20));
    sub_100079F70();
  }
}

uint64_t sub_10011B3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032E908);
}

uint64_t sub_10011B3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D162C);
}

uint64_t sub_10011B3F0()
{
  return sub_100082C68(sub_100082C80);
}

uint64_t sub_10011B3FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B404(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B40C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B414(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B41C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B424(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B42C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B434(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B43C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B444(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B44C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B454(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B45C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B464(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B46C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B474(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B47C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B484(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B48C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B494(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B49C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B4FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B504(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B50C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B514(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B51C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B524(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B52C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B534(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B53C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B544(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B54C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B554(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B55C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B564(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B56C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B574(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B57C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B584(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B58C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B594(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B59C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011B5D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for RowModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BE2638, (uint64_t)&nominal type descriptor for RowModifier);
}

_DWORD *initializeBufferWithCopyOfBuffer for PerformanceTestFeatures(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for NotificationSettingsViewState(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10011B610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t sub_10011B62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100177804);
}

ValueMetadata *type metadata accessor for LocationViewRowViewModel()
{
  return &type metadata for LocationViewRowViewModel;
}

ValueMetadata *type metadata accessor for LocationComponentWidthKey()
{
  return &type metadata for LocationComponentWidthKey;
}

uint64_t type metadata accessor for LocationGridView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFA928;
  if (!qword_100BFA928)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationGridView);
  return result;
}

uint64_t sub_10011B690(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (!a2)
  {
    v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0x7E)
  {
    if (a2 + 130 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 130) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 131;
    return v5 + 1;
  }
LABEL_17:
  v5 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v5 >= 0x7D)
    v5 = -1;
  return v5 + 1;
}

uint64_t sub_10011B728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100539C44);
}

__n128 initializeWithTake for LocationHeaderViewGradientBackgroundViewModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AppStateTransitionModifier()
{
  return &type metadata for AppStateTransitionModifier;
}

uint64_t sub_10011B758(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;

  v4 = a1->n128_u64[0];
  v5 = a1->n128_i64[1];
  v6 = a2->n128_i64[1];
  if (v4 != a2->n128_u64[0] || v5 != v6)
  {
    v8 = sub_100099264(v4, v5, a2->n128_u64[0], v6);
    result = 0;
    if ((v8 & 1) == 0)
      return result;
  }
  v10 = a1[1].n128_i64[1];
  v11 = a2[1].n128_i64[1];
  if (!v10)
  {
    if (v11)
      return 0;
    goto LABEL_15;
  }
  if (!v11)
    return 0;
  v12 = a1[1].n128_i64[0];
  v13 = a2[1].n128_i64[0];
  v14 = v12 == v13 && v10 == v11;
  if (v14 || (v15 = sub_100099264(v12, v10, v13, v11), result = 0, (v15 & 1) != 0))
  {
LABEL_15:
    v16 = a1[2].n128_i64[1];
    v17 = a2[2].n128_i64[1];
    if (v16)
    {
      if (!v17)
        return 0;
      v18 = a1[2].n128_i64[0];
      v19 = a2[2].n128_i64[0];
      if (v18 != v19 || v16 != v17)
      {
        v21 = sub_100099264(v18, v16, v19, v17);
        result = 0;
        if ((v21 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    sub_10011B8B8(a1 + 3, &v35);
    sub_10011B8B8(a2 + 3, &v34);
    v22 = sub_10011B8B8(&v35, &v36);
    v31 = v36.n128_i64[1];
    if (v36.n128_u64[1] == 1)
    {
      sub_1000BA8FC((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, v30);
      if (v38 == 1)
        return 1;
    }
    else if (v36.n128_u64[1])
    {
      v32 = v36.n128_u64[0];
      sub_1000BA8FC((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, v30);
      if (v38 >= 2)
      {
        v33 = v32 == v37 && v31 == v38;
        if (v33 || (sub_100099264(v32, v31, v37, v38) & 1) != 0)
          return 1;
      }
    }
    else
    {
      sub_1000BA8FC((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, v30);
      if (!v38)
        return 1;
    }
    return 0;
  }
  return result;
}

__n128 *sub_10011B8B8(__n128 *a1, __n128 *a2)
{
  initializeWithTake for ExternalSearchQuery(a2, a1);
  return a2;
}

__n128 initializeWithTake for ExternalSearchQuery(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 sub_10011B900@<Q0>(uint64_t a1@<X8>)
{
  _BYTE *v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = sub_10011B930();
  v3 = v2[32];
  result = *(__n128 *)v2;
  v5 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v3;
  return result;
}

void *sub_10011B930()
{
  return &unk_100BE1EE8;
}

_BYTE *sub_10011B93C(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_10011B94C(_BYTE *result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
    v2 = *result & 1 | ((_BYTE)a2 << 6);
  else
    v2 = a2 & 1 | 0x80;
  *result = v2;
  return result;
}

uint64_t sub_10011B974(_BYTE *a1)
{
  int v1;

  v1 = (char)*a1;
  if (v1 >= 0)
    return *a1 >> 6;
  else
    return v1 & 1 | 2u;
}

uint64_t sub_10011B990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  return Configurable.setting<A>(_:defaultValue:)(a1, a2, *v6, a6);
}

uint64_t sub_10011B9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10011B9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100539C7C);
}

uint64_t storeEnumTagSinglePayload for NextHourPrecipitationLeadingValueRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationView()
{
  return &type metadata for LocationView;
}

uint64_t getEnumTagSinglePayload for NextHourPrecipitationLeadingValueRule(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void sub_10011BA58(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  sub_1000F52E0(a1, a2, v3, a3);
}

void type metadata accessor for MainState()
{
  sub_100098884();
}

uint64_t sub_10011BA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EE5E0);
}

uint64_t type metadata accessor for Selector.ModelState(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Selector.ModelState);
}

uint64_t type metadata accessor for LocationPreviewView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD05A8;
  if (!qword_100BD05A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationPreviewView);
  return result;
}

uint64_t sub_10011BAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017942C);
}

uint64_t type metadata accessor for HighLowModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC3F38, (uint64_t)&nominal type descriptor for HighLowModifier);
}

uint64_t destroy for LocationHeaderViewGradientBackground(uint64_t a1)
{
  return sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t getEnumTagSinglePayload for PerformanceTestFeatures(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[4])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t type metadata accessor for ConditionModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC3E90, (uint64_t)&nominal type descriptor for ConditionModifier);
}

uint64_t sub_10011BB50(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

uint64_t sub_10011BB5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

_BYTE *sub_10011BB64(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

uint64_t sub_10011BB74(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HostsLocationHeaderFrameCoordinatorViewModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

__n128 initializeWithTake for UVIDescriptorViewModelFactory(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10011BBD8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 130 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 130) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7D)
    return ((uint64_t (*)(void))((char *)&loc_10011BC24 + 4 * byte_10098E3E5[v4]))();
  *a1 = a2 - 126;
  return ((uint64_t (*)(void))((char *)sub_10011BC58 + 4 * byte_10098E3E0[v4]))();
}

uint64_t sub_10011BC58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011BC60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011BC68);
  return result;
}

uint64_t sub_10011BC80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011BC88);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_10011BC8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011BC94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for LocationHeaderViewLargeText(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFB570;
  if (!qword_100BFB570)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationHeaderViewLargeText);
  return result;
}

uint64_t sub_10011BCE0(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t getEnumTagSinglePayload for SunriseSunsetDetailViewAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for SceneMetrics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10011BD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008E5858);
}

ValueMetadata *type metadata accessor for ListView()
{
  return &type metadata for ListView;
}

uint64_t type metadata accessor for ConditionPickerMenuView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD4960;
  if (!qword_100BD4960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionPickerMenuView);
  return result;
}

ValueMetadata *type metadata accessor for NewsHeaderGradient()
{
  return &type metadata for NewsHeaderGradient;
}

ValueMetadata *type metadata accessor for LocationViewerView()
{
  return &type metadata for LocationViewerView;
}

ValueMetadata *type metadata accessor for CollisionModifier()
{
  return &type metadata for CollisionModifier;
}

ValueMetadata *type metadata accessor for RoundedRectangle()
{
  return &type metadata for RoundedRectangle;
}

ValueMetadata *type metadata accessor for ListMenuView()
{
  return &type metadata for ListMenuView;
}

uint64_t sub_10011BE3C(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 72))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t initializeBufferWithCopyOfBuffer for LocationHeaderViewGradientBackgroundViewModifier.ScrollAdjustments(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

__n128 initializeWithTake for NotificationsState(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConditionsChartID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for LocationViewCollisionOptions.PublishedValue()
{
  return &type metadata for LocationViewCollisionOptions.PublishedValue;
}

ValueMetadata *type metadata accessor for BottomBarButtonStyle()
{
  return &type metadata for BottomBarButtonStyle;
}

uint64_t getEnumTagSinglePayload for HostsLocationHeaderFrameCoordinatorViewModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t type metadata accessor for VFXTestView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCCAD8;
  if (!qword_100BCCAD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VFXTestView);
  return result;
}

void type metadata accessor for WeatherMapPresentationStyle()
{
  sub_100098884();
}

uint64_t type metadata accessor for Selector(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Selector);
}

ValueMetadata *type metadata accessor for LocationTipOverlayModifier()
{
  return &type metadata for LocationTipOverlayModifier;
}

uint64_t type metadata accessor for TemperatureModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC3FE0, (uint64_t)&nominal type descriptor for TemperatureModifier);
}

uint64_t sub_10011BFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100179428);
}

ValueMetadata *type metadata accessor for HairlineView()
{
  return &type metadata for HairlineView;
}

uint64_t storeEnumTagSinglePayload for SizingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10011C028 + 4 * byte_1009954D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10011C05C + 4 * byte_1009954D0[v4]))();
}

uint64_t sub_10011C05C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011C064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011C06CLL);
  return result;
}

uint64_t sub_10011C078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011C080);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10011C084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011C08C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityImageDescriptionDisabledModifier()
{
  return &type metadata for AccessibilityImageDescriptionDisabledModifier;
}

uint64_t type metadata accessor for ConditionSummaryModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC3DE8, (uint64_t)&nominal type descriptor for ConditionSummaryModifier);
}

uint64_t type metadata accessor for WireframeContentManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF00B8;
  if (!qword_100BF00B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WireframeContentManager);
  return result;
}

uint64_t type metadata accessor for HeaderModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BE3840, (uint64_t)&nominal type descriptor for HeaderModifier);
}

ValueMetadata *type metadata accessor for LocationViewerViewWeatherConditionBackground()
{
  return &type metadata for LocationViewerViewWeatherConditionBackground;
}

uint64_t storeEnumTagSinglePayload for ResizeMacWindow(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ResizeMacWindow(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10011C180@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100068EDC(*(uint64_t (**)(_BYTE *))(v1 + 16), a1);
}

uint64_t type metadata accessor for Debounced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Debounced);
}

ValueMetadata *type metadata accessor for LocationComponentForegroundEffectViewMaskPreferenceKey()
{
  return &type metadata for LocationComponentForegroundEffectViewMaskPreferenceKey;
}

ValueMetadata *type metadata accessor for ContentStatusBannerPresentationMetricsPreferenceKey()
{
  return &type metadata for ContentStatusBannerPresentationMetricsPreferenceKey;
}

void sub_10011C1B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v12))
      {
        v10 = &dword_100000004;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v13 = v11 & ~(-1 << v9);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_10011C3A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = v12 + v13;
  v15 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_23;
  v16 = (v14 & ~v13) + *(_QWORD *)(v9 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v19 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v8 >= v10)
        {
          v10 = v8;
        }
        else
        {
          a1 = (v14 + a1) & ~v13;
          v5 = v6;
        }
        return _s7Weather24LocationCompositionStateOwet_0(a1, v10, v5);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_23;
LABEL_14:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if (!(_DWORD)v16)
    return v11 + v20 + 1;
  if (v16 <= 3)
    v21 = v16;
  else
    v21 = 4;
  return ((uint64_t (*)(void))((char *)&loc_10011C484 + 4 * byte_1009B8190[v21 - 1]))();
}

uint64_t type metadata accessor for NextHourPrecipitationComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD33E0;
  if (!qword_100BD33E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NextHourPrecipitationComponentView);
  return result;
}

uint64_t type metadata accessor for PrecipitationTotalComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFD360;
  if (!qword_100BFD360)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrecipitationTotalComponentView);
  return result;
}

uint64_t type metadata accessor for NotificationsOptInComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEAC10;
  if (!qword_100BEAC10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsOptInComponentView);
  return result;
}

ValueMetadata *type metadata accessor for NextHourPrecipitationDetailView()
{
  return &type metadata for NextHourPrecipitationDetailView;
}

uint64_t type metadata accessor for SunriseSunsetComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFFE30;
  if (!qword_100BFFE30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunriseSunsetComponentView);
  return result;
}

uint64_t type metadata accessor for SevereAlertComponentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD6788, (uint64_t)&nominal type descriptor for SevereAlertComponentView);
}

uint64_t type metadata accessor for NewsArticleComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF5F98;
  if (!qword_100BF5F98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsArticleComponentView);
  return result;
}

ValueMetadata *type metadata accessor for ManagedWireframeModifier()
{
  return &type metadata for ManagedWireframeModifier;
}

uint64_t sub_10011C658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100178FE4);
}

uint64_t type metadata accessor for SunriseSunsetDetailView(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C034F0, (uint64_t)&nominal type descriptor for SunriseSunsetDetailView);
}

uint64_t type metadata accessor for AirQualityComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C17C40;
  if (!qword_100C17C40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirQualityComponentView);
  return result;
}

ValueMetadata *type metadata accessor for WireframedContentStyle()
{
  return &type metadata for WireframedContentStyle;
}

uint64_t type metadata accessor for FeelsLikeComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCCCB0;
  if (!qword_100BCCCB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeelsLikeComponentView);
  return result;
}

uint64_t sub_10011C6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

uint64_t type metadata accessor for PressureComponentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF9640, (uint64_t)&nominal type descriptor for PressureComponentView);
}

uint64_t type metadata accessor for PinningHeaderModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BE37A8, (uint64_t)&nominal type descriptor for PinningHeaderModifier);
}

ValueMetadata *type metadata accessor for HumidityComponentView()
{
  return &type metadata for HumidityComponentView;
}

uint64_t type metadata accessor for AveragesComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE58B8;
  if (!qword_100BE58B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AveragesComponentView);
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationNameModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationNameModifier()
{
  return &type metadata for LocationNameModifier;
}

ValueMetadata *type metadata accessor for AirQualityDetailView()
{
  return &type metadata for AirQualityDetailView;
}

uint64_t sub_10011C7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100178C58);
}

uint64_t sub_10011C7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100179480);
}

ValueMetadata *type metadata accessor for ConditionDetailView()
{
  return &type metadata for ConditionDetailView;
}

uint64_t sub_10011C814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100177904);
}

ValueMetadata *type metadata accessor for AveragesDetailView()
{
  return &type metadata for AveragesDetailView;
}

uint64_t sub_10011C830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10011C880();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

unint64_t sub_10011C880()
{
  unint64_t result;

  result = qword_100BC5AC0;
  if (!qword_100BC5AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EdgeInsets, &type metadata for EdgeInsets);
    atomic_store(result, (unint64_t *)&qword_100BC5AC0);
  }
  return result;
}

uint64_t type metadata accessor for MoonComponentView(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BD8728, (uint64_t)&nominal type descriptor for MoonComponentView);
}

uint64_t sub_10011C8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100179424);
}

uint64_t type metadata accessor for MapComponentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C10A40, (uint64_t)&nominal type descriptor for MapComponentView);
}

ValueMetadata *type metadata accessor for MoonDetailView()
{
  return &type metadata for MoonDetailView;
}

void type metadata accessor for GridGeometry()
{
  sub_100098884();
}

uint64_t type metadata accessor for SearchView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE09A0;
  if (!qword_100BE09A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchView);
  return result;
}

uint64_t type metadata accessor for WeatherComponentButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeatherComponentButton);
}

ValueMetadata *type metadata accessor for ReportWeatherComponentView()
{
  return &type metadata for ReportWeatherComponentView;
}

uint64_t storeEnumTagSinglePayload for LocationHeaderViewGradientBackgroundViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationComponentContainerViewFramePreferenceKey()
{
  return &type metadata for LocationComponentContainerViewFramePreferenceKey;
}

ValueMetadata *type metadata accessor for MainViewFullscreenMapOverlayModifier()
{
  return &type metadata for MainViewFullscreenMapOverlayModifier;
}

ValueMetadata *type metadata accessor for MainViewModelEnvironmentModifier()
{
  return &type metadata for MainViewModelEnvironmentModifier;
}

uint64_t type metadata accessor for UpArrowPopoverBackgroundView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpArrowPopoverBackgroundView);
}

uint64_t sub_10011CA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005EEAA0);
}

ValueMetadata *type metadata accessor for NotificationSettingsView()
{
  return &type metadata for NotificationSettingsView;
}

ValueMetadata *type metadata accessor for VisibilityComponentView()
{
  return &type metadata for VisibilityComponentView;
}

ValueMetadata *type metadata accessor for UnitsConfigurationSheet()
{
  return &type metadata for UnitsConfigurationSheet;
}

ValueMetadata *type metadata accessor for PerformanceTestFeatures()
{
  return &type metadata for PerformanceTestFeatures;
}

ValueMetadata *type metadata accessor for NotificationsOptInView()
{
  return &type metadata for NotificationsOptInView;
}

uint64_t type metadata accessor for UVIndexComponentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEA688;
  if (!qword_100BEA688)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UVIndexComponentView);
  return result;
}

void sub_10011CAA0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = ((*(_QWORD *)(v5 + 64) + *(_DWORD *)(v6 + 80)) & ~(unint64_t)*(_DWORD *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80) | v7;
  v11 = ((v9 + ((v9 + v10) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    v14 = 0;
  }
  else
  {
    if ((((_DWORD)v9 + (((_DWORD)v9 + (_DWORD)v10) & ~(_DWORD)v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = a3 - v8 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
  }
  if (a2 > v8)
  {
    if ((_DWORD)v11)
    {
      v15 = ~v8 + a2;
      bzero(a1, v11);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_10011CBC8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v7 + v8) = 0;
  if ((_DWORD)a1)
  {
    if (v4 >= a2)
    {
      v9 = v7;
      a2 = v4;
    }
    else
    {
      v9 = (v6 + v7) & v5;
      a3 = a4;
    }
    _s7Weather24LocationCompositionStateOwst_0(v9, a1, a2, a3);
  }
}

void sub_10011CC20(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x10011CC28);
  JUMPOUT(0x10011CBECLL);
}

_QWORD *sub_10011CC40(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t sub_10011CC60(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_10011CC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

ValueMetadata *type metadata accessor for NamespaceWrapper()
{
  return &type metadata for NamespaceWrapper;
}

uint64_t type metadata accessor for ActivityModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_100C166D8;
  if (!qword_100C166D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityModifier);
  return result;
}

uint64_t type metadata accessor for TipCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFC4F0;
  if (!qword_100BFC4F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TipCoordinator);
  return result;
}

ValueMetadata *type metadata accessor for SizingBehavior()
{
  return &type metadata for SizingBehavior;
}

ValueMetadata *type metadata accessor for ModuleContext()
{
  return &type metadata for ModuleContext;
}

uint64_t sub_10011CD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10011CD2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10011CD38(*a1, *a2);
}

uint64_t sub_10011CD38(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 >> 6)
  {
    if (a1 >> 6 == 1)
    {
      if ((a2 & 0xC0) != 0x40)
        return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
      return sub_10029FC24();
    }
    if (a2 == 128)
      return 1;
  }
  else if (a2 < 0x40u)
  {
    return sub_10029FC24();
  }
  return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
}

uint64_t type metadata accessor for ReportWeatherView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BC6578;
  if (!qword_100BC6578)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReportWeatherView);
  return result;
}

uint64_t sub_10011CDC0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 initializeWithTake for HomeAndWorkRefinementView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10011CDE8(char *a1)
{
  uint64_t v1;

  return sub_10004DB00(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 16));
}

void sub_10011CDF0(uint64_t a1, uint64_t a2)
{
  char v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (a1 == a2)
    return;
  sub_1001FB110();
  if (!v4)
    return;
  v5 = 0;
  v22 = a1 + 64;
  sub_10009DFD4();
  v8 = v7 & v6;
  v10 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      sub_1001FBB38();
      v12 = v11 | (v5 << 6);
LABEL_7:
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
      sub_10014B4C4((_QWORD *)(*(_QWORD *)(a1 + 56) + 48 * v12), (_QWORD *)&v24 + 1);
      *(_QWORD *)&v24 = v13;
      goto LABEL_25;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v14 < v10)
    {
      if (*(_QWORD *)(v22 + 8 * v14))
        goto LABEL_11;
      v16 = v5 + 2;
      ++v5;
      if (v14 + 1 < v10)
      {
        if (*(_QWORD *)(v22 + 8 * v16))
          goto LABEL_11;
        v5 = v14 + 1;
        if (v14 + 2 < v10)
        {
          if (*(_QWORD *)(v22 + 8 * (v14 + 2)))
            goto LABEL_11;
          v17 = v14 + 3;
          v5 = v14 + 2;
          if (v14 + 3 < v10)
            break;
        }
      }
    }
LABEL_24:
    v8 = 0;
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
LABEL_25:
    sub_1000787D4((uint64_t)&v24, (uint64_t)&v28, &qword_100BCA120);
    if (!*((_QWORD *)&v30 + 1))
      return;
    v24 = v29;
    v25 = v30;
    v26 = v31;
    v19 = sub_10011EA4C(v28);
    if ((v20 & 1) == 0)
    {
      sub_10014B490(&v24);
      return;
    }
    sub_10014B4C4((_QWORD *)(*(_QWORD *)(a2 + 56) + 48 * v19), v23);
    v21 = ((uint64_t (*)(__int128 *))v23[4])(&v24);
    sub_10014B490(v23);
    sub_10014B490(&v24);
    if ((v21 & 1) == 0)
      return;
  }
  if (*(_QWORD *)(v22 + 8 * v17))
  {
LABEL_11:
    sub_1001FB8F8();
    v5 = v15;
    goto LABEL_7;
  }
  while (!__OFADD__(v17, 1))
  {
    if (v17 + 1 >= v10)
    {
      v5 = v10 - 1;
      goto LABEL_24;
    }
    sub_1000DE250();
    if (v18)
      goto LABEL_11;
  }
LABEL_32:
  __break(1u);
}

void type metadata accessor for WindTip()
{
  sub_100098884();
}

void type metadata accessor for MapTip()
{
  sub_100098884();
}

uint64_t type metadata accessor for DailyComponentForecastRowViewLargeText(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE3F68;
  if (!qword_100BE3F68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyComponentForecastRowViewLargeText);
  return result;
}

uint64_t initializeWithCopy for MainViewFullscreenMapOverlayModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t sub_10011D0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F8A0C);
}

ValueMetadata *type metadata accessor for ContentStatusHeaderBackground()
{
  return &type metadata for ContentStatusHeaderBackground;
}

uint64_t type metadata accessor for LocationViewerTransitionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationViewerTransitionView);
}

uint64_t type metadata accessor for InteractiveMapTransitionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InteractiveMapTransitionView);
}

uint64_t sub_10011D0EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    if ((v6 & 0x80000000) != 0)
    {
      return _s7Weather24LocationCompositionStateOwet_0(((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 32) & ~v8, v6, v4);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v5 + 64) + ((v8 + 32) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10011D178 + 4 * byte_100991720[v11]))();
  }
}

uint64_t type metadata accessor for MainStateProcessingContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEC480;
  if (!qword_100BEC480)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainStateProcessingContext);
  return result;
}

uint64_t type metadata accessor for LocationRegularViewLayout(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0E900;
  if (!qword_100C0E900)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationRegularViewLayout);
  return result;
}

uint64_t sub_10011D26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100178FE0);
}

uint64_t getEnumTagSinglePayload for LocationNameModifier(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10011D2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100178C0C);
}

uint64_t sub_10011D2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100179430);
}

uint64_t type metadata accessor for SafariSheetModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD42E8, (uint64_t)&nominal type descriptor for SafariSheetModifier);
}

uint64_t type metadata accessor for InteractiveMapView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0C020;
  if (!qword_100C0C020)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InteractiveMapView);
  return result;
}

uint64_t sub_10011D330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BE938);
}

ValueMetadata *type metadata accessor for BackgroundModifier()
{
  return &type metadata for BackgroundModifier;
}

uint64_t type metadata accessor for WindComponentView(uint64_t a1)
{
  return sub_100098190(a1, qword_100C11B10, (uint64_t)&nominal type descriptor for WindComponentView);
}

uint64_t sub_10011D360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100179420);
}

uint64_t getEnumTagSinglePayload for CollisionModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void type metadata accessor for DailyForecastTip()
{
  sub_100098884();
}

uint64_t sub_10011D3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10011D408();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

unint64_t sub_10011D408()
{
  unint64_t result;

  result = qword_100BC5A98;
  if (!qword_100BC5A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Alignment, &type metadata for Alignment);
    atomic_store(result, (unint64_t *)&qword_100BC5A98);
  }
  return result;
}

void sub_10011D444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10011D454(a1, *(_QWORD *)(a1 + 8), a3, *(_QWORD *)(a2 + 8));
}

void sub_10011D454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10011CDF0(a2, a4);
}

void type metadata accessor for AirQualityTip()
{
  sub_100098884();
}

uint64_t storeEnumTagSinglePayload for SceneMetrics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SceneMetrics()
{
  return &type metadata for SceneMetrics;
}

uint64_t sub_10011D4B4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

void sub_10011D508(uint64_t a1@<X8>)
{
  char *v1;

  sub_10005EE6C(*v1, a1);
}

void type metadata accessor for WindMapTip()
{
  sub_100098884();
}

void type metadata accessor for UVIndexTip()
{
  sub_100098884();
}

uint64_t type metadata accessor for ModuleView.Cache(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ModuleView.Cache);
}

ValueMetadata *type metadata accessor for CircleMask()
{
  return &type metadata for CircleMask;
}

uint64_t storeEnumTagSinglePayload for WeatherTip(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10011D594 + 4 * byte_1009D1451[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10011D5C8 + 4 * byte_1009D144C[v4]))();
}

uint64_t sub_10011D5C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011D5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011D5D8);
  return result;
}

uint64_t sub_10011D5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011D5ECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10011D5F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011D5F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for NotificationsOptInViewAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for LocationHeaderViewGradientBackgroundViewModifier(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 56);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

void sub_10011D6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000993A8();
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    v4 = v2;
    v5 = sub_1000BA294(&qword_100BC3808);
    sub_1000987C4(v1 + *(int *)(v4 + 32), v0, v0, v5);
  }
}

void sub_10011D734(uint64_t a1, char a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_DWORD *)(*(_QWORD *)(sub_1000BA8C4() - 8) + 84) == a3)
  {
    v7 = sub_1000B4784();
    sub_1000987C4(v7, v8, v9, v10);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -a2;
    sub_100079F70();
  }
}

void sub_10011D78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v8;
  char v9;

  a5(0);
  sub_10009D2E8();
  if (v9)
  {
    sub_1000987C4(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
    sub_100079F70();
  }
}

uint64_t sub_10011D7EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC3660);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10011D85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100098778();
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, v4);
}

void sub_10011D890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_1000994F4();
  sub_1000BA294(&qword_100BD8F08);
  sub_10009D2E8();
  if (v4)
  {
    sub_1000987C4(v1, v0, v0, v3);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
    sub_100079F70();
  }
}

void sub_10011D8E8(uint64_t a1@<X8>)
{
  double *v1;
  int v2;

  if (*((_BYTE *)v1 + 1))
    v2 = 256;
  else
    v2 = 0;
  sub_10005D0C4(v2 | *(unsigned __int8 *)v1, a1, v1[1], v1[2]);
}

uint64_t initializeBufferWithCopyOfBuffer for LocationViewerViewVFXEnvironment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10003704C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_100037094);
}

uint64_t type metadata accessor for ForegroundEffectConfigurationView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFFB88;
  if (!qword_100BFFB88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ForegroundEffectConfigurationView);
  return result;
}

uint64_t sub_10011D95C(uint64_t a1, uint64_t a2)
{
  return sub_10011D970(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(float *)a1, *(float *)a2);
}

uint64_t sub_10011D970(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (a3 == a4)
    return sub_100121188(a1, a2);
  else
    return 0;
}

uint64_t sub_10011D984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032E90C);
}

ValueMetadata *type metadata accessor for WireframeContentManager.ContentLoadState()
{
  return &type metadata for WireframeContentManager.ContentLoadState;
}

uint64_t storeEnumTagSinglePayload for PerformanceTestFeatures(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_10011D9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D168C);
}

ValueMetadata *type metadata accessor for PagingContentOffsets()
{
  return &type metadata for PagingContentOffsets;
}

void sub_10011DA00()
{
  sub_10004EF5C();
}

uint64_t type metadata accessor for TranslationModifier(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BC3D40, (uint64_t)&nominal type descriptor for TranslationModifier);
}

uint64_t getEnumTagSinglePayload for LocationHeaderViewGradientBackgroundViewModifier.ScrollAdjustments(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1000C3E74();
  sub_10000F1C8(&qword_100BFB8A0, type metadata accessor for WeatherApp);
  static App.main()(v3, v4);
  return 0;
}

const char *sub_10011DA90()
{
  return "weather_vfx_animatedBackgrounds_enabled";
}

const char *sub_10011DA9C()
{
  return "frame";
}

void *initializeWithTake for SearchViewModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

__n128 initializeWithCopy for PagingContentOffsets(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 initializeWithTake for LocationHeaderSecondaryLabel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10011DAE0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10048B70C(v1, v0);
}

uint64_t sub_10011DB00@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

id sub_10011DB24(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 + 1152), a2);
}

uint64_t sub_10011DB2C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10024F370(v0, v1);
}

void sub_10011DB38(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10000F1C8(a1, v1);
}

uint64_t sub_10011DB40()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 208);
}

uint64_t sub_10011DB50()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10011DB60()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

void sub_10011DB6C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8285;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10011DB78()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011DB90()
{
  return type metadata accessor for Measurement(0);
}

uint64_t sub_10011DBBC()
{
  return type metadata accessor for UnitsConfigurationViewModel.Representation(0);
}

uint64_t sub_10011DBD0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_10011DBDC()
{
  return AttributeContainer.init()();
}

uint64_t sub_10011DBE8()
{
  return type metadata accessor for RectangleMark(255);
}

void sub_10011DC1C()
{
  sub_1005FF0DC();
}

uint64_t sub_10011DC28()
{
  return type metadata accessor for ScrollToActiveLocationModifier(0);
}

uint64_t sub_10011DC30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(a1 - 256), 1, 1, v1);
}

uint64_t sub_10011DC48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v1, v2);
}

uint64_t sub_10011DC54()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_10011DC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_100037768(a1, v1, v2);
}

uint64_t sub_10011DC78@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t sub_10011DC84()
{
  return type metadata accessor for UnitConfiguration.Temperature(0);
}

__n128 sub_10011DC8C@<Q0>(unint64_t a1@<X1>, unsigned __int8 a2@<W2>, __n128 *a3@<X8>)
{
  unint64_t v3;
  __n128 *v4;
  __n128 result;

  result = v4[3];
  a3[3] = result;
  a3[4].n128_u64[0] = v3;
  a3[4].n128_u64[1] = a1;
  a3[5].n128_u8[0] = a2;
  return result;
}

uint64_t sub_10011DCA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 216))();
}

uint64_t sub_10011DCBC()
{
  return sub_100098710(32);
}

double sub_10011DCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  return sub_10010F9B0(v1, v2, v3, v0);
}

void sub_10011DCD8()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000979AC(v1, v0);
}

_QWORD *sub_10011DCE8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10011DD00()
{
  return type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
}

uint64_t sub_10011DD10()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011DD20@<X0>(uint64_t (*a1)(_QWORD, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v2 - 424), v1);
}

void sub_10011DD50()
{
  sub_100112494();
}

uint64_t sub_10011DD6C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_10011DDAC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_10011DDB8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

void sub_10011DDC4(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 288) = a1;
}

uint64_t sub_10011DDD0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 440);
}

uint64_t sub_10011DE18()
{
  return sub_100076118();
}

uint64_t sub_10011DE24(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_10011DE38()
{
  uint64_t v0;

  return v0;
}

double sub_10011DE48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  double result;

  v2 = *v1;
  *v0 = *v1;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10011DE54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for ApparentPrecipitationIntensity(0);
}

uint64_t sub_10011DE64()
{
  return 0;
}

double sub_10011DE74()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168)).n128_u64[0];
  return result;
}

uint64_t sub_10011DE7C()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(*(_QWORD *)(v0 - 72));
}

uint64_t sub_10011DE90()
{
  return type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
}

uint64_t sub_10011DE98@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_10011DEA4()
{
  return Location.write(to:)();
}

double sub_10011DEAC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_10011DEC0()
{
  return DetailChartExtrema.maxSecondValue.getter();
}

uint64_t sub_10011DECC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BF398(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10011DEDC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 160) = result;
  return result;
}

void sub_10011DEF0()
{
  sub_1001F1CC8();
}

void sub_10011DEFC(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100214794(a1, a2, a3, v3);
}

void *sub_10011DF30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

uint64_t sub_10011DF3C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_10011DF48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v4 - 72, a2, v3, v2, a1);
}

uint64_t sub_10011DF64()
{
  uint64_t v0;

  return Array<A>.minValue.getter(*(_QWORD *)(v0 + 1328));
}

uint64_t sub_10011DF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_10011DF78()
{
  return type metadata accessor for WindComponentViewModel(0);
}

uint64_t sub_10011DFA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 944))();
}

uint64_t sub_10011DFA8()
{
  return type metadata accessor for NextHourPrecipitationChartViewModel(0);
}

void sub_10011DFBC(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_10011DFC4()
{
  return type metadata accessor for OSSignpostID(0);
}

void sub_10011DFD4()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 120) = 0;
}

uint64_t sub_10011DFF8()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 256));
}

uint64_t sub_10011E004()
{
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_10011E00C()
{
  return 0;
}

void sub_10011E018()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100021A14(v1, v0);
}

uint64_t sub_10011E024()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 744);
}

uint64_t sub_10011E050()
{
  return type metadata accessor for PressureTrend(0);
}

uint64_t sub_10011E060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 256) = a2;
  return Measurement.init(value:unit:)(a1, a2);
}

uint64_t sub_10011E068(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 17);
}

uint64_t sub_10011E074()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_10011E094()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100021A14(v1, v0);
}

uint64_t sub_10011E0A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

size_t sub_10011E0AC(const void *ptr)
{
  return j__malloc_size(ptr);
}

uint64_t sub_10011E0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 160))(a1, v1, v2);
}

uint64_t sub_10011E0C4()
{
  uint64_t v0;

  return sub_100878F40(*(_QWORD *)(v0 - 256));
}

uint64_t sub_10011E0CC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1104);
}

double sub_10011E0DC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_10011E0E8()
{
  return type metadata accessor for MoonComponentViewModel(0);
}

uint64_t sub_10011E0F0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)v1 = result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_10011E110()
{
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_10011E118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  return swift_getEnumCaseMultiPayload(v12 + v13, a12);
}

uint64_t sub_10011E128()
{
  return static PrecipitationAmountByType.mock()();
}

uint64_t sub_10011E130()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011E144()
{
  return Logger.logObject.getter();
}

uint64_t sub_10011E14C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000BF8D0(v1, v0);
}

uint64_t sub_10011E158()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_10011E164()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 232))();
}

uint64_t sub_10011E16C()
{
  return static PrecipitationAmountByType.mock()();
}

uint64_t sub_10011E174()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_10011E180()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 272));
}

uint64_t sub_10011E198()
{
  return EnvironmentValues.accessibilityVoiceOverEnabled.getter();
}

void sub_10011E1A4()
{
  static PrecipitationAmountByType.read(from:)();
}

uint64_t sub_10011E1B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011E1C4()
{
  return static PrecipitationAmountByType.mock()();
}

uint64_t sub_10011E1E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 232) = a1;
  return v1 - 232;
}

uint64_t sub_10011E1F4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v0, v1);
}

uint64_t sub_10011E210()
{
  return type metadata accessor for FeelsLikeComponentViewModel(0);
}

BOOL sub_10011E218()
{
  return sub_1000764C8();
}

uint64_t sub_10011E224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static Namespace.ID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v0), v2);
}

uint64_t sub_10011E234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 96, v6 - 65, v5, a4, a5);
}

uint64_t sub_10011E25C()
{
  return type metadata accessor for PressureComponentViewModel(0);
}

uint64_t sub_10011E264()
{
  return sub_10015580C();
}

uint64_t sub_10011E270()
{
  return 0;
}

uint64_t sub_10011E27C()
{
  return type metadata accessor for Locale(0);
}

uint64_t sub_10011E28C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 344));
}

uint64_t sub_10011E2B0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_10011E2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10011E2F4()
{
  return type metadata accessor for NextHourPrecipitationComponentViewModel(0);
}

double sub_10011E2FC()
{
  return sub_1006D0434();
}

uint64_t sub_10011E308()
{
  return LocationEntity.placemark.getter();
}

uint64_t sub_10011E32C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 920));
}

void sub_10011E378(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(*(_QWORD *)(v2 - 400), a2);
}

uint64_t sub_10011E384()
{
  return type metadata accessor for WeatherStatisticsModel(0);
}

uint64_t sub_10011E38C()
{
  return type metadata accessor for LocationEntity(0);
}

uint64_t sub_10011E394(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_10011E3A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DDC(v3, a2, a3);
}

uint64_t sub_10011E3B0()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t sub_10011E3BC()
{
  return 0;
}

uint64_t sub_10011E3D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011E3DC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 208);
}

void sub_10011E3F0()
{
  uint64_t v0;

  static NSUnitLength.read(from:)(v0);
}

uint64_t sub_10011E404()
{
  return 0;
}

uint64_t sub_10011E41C(uint64_t a1)
{
  uint64_t v1;

  return Date.wc_addMinutes(_:calendar:)(a1, v1);
}

double sub_10011E428()
{
  uint64_t v0;

  return sub_1000FFCC8(v0);
}

uint64_t sub_10011E434()
{
  return EnvironmentValues.font.getter();
}

_QWORD *sub_10011E458(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000DB418(a1, v1);
}

unint64_t sub_10011E470()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_10029E504();
}

uint64_t sub_10011E47C()
{
  return type metadata accessor for WeatherData(0);
}

uint64_t sub_10011E488()
{
  return type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
}

uint64_t sub_10011E4AC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10011E4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return ShortDescription.init(name:_:)(a1, a2, v4, a4);
}

uint64_t sub_10011E4D8(uint64_t a1)
{
  uint64_t v1;

  return static Array._allocateBufferUninitialized(minimumCapacity:)(v1, a1);
}

uint64_t sub_10011E4E4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 2);
}

double sub_10011E4F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  double result;

  *v2 = v1;
  v2[1] = v0;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v2, 0, 1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

unint64_t sub_10011E51C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 1;
  return sub_10029E450();
}

uint64_t sub_10011E528()
{
  return type metadata accessor for Locale(0);
}

uint64_t sub_10011E53C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
  return 30067;
}

uint64_t sub_10011E550@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return 0;
}

unint64_t sub_10011E560()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 70) = 1;
  return sub_100670A98();
}

uint64_t sub_10011E56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return Optional<A>.write(to:)(v0, v1, v2);
}

uint64_t sub_10011E588()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 48));
}

unint64_t sub_10011E590()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 70) = 2;
  return sub_100731DC8();
}

uint64_t sub_10011E59C()
{
  return type metadata accessor for WeatherDataOverrides(0);
}

uint64_t sub_10011E5B0()
{
  uint64_t v0;

  return v0;
}

void sub_10011E5C8()
{
  sub_1001E6064();
}

uint64_t sub_10011E5D4()
{
  return type metadata accessor for DetailChartDataElement.ValueLabel(0);
}

unint64_t sub_10011E5F4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return sub_10029E018();
}

double sub_10011E614()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168)).n128_u64[0];
  return result;
}

uint64_t sub_10011E61C(double *a1)
{
  return sub_1006D046C(*a1);
}

uint64_t sub_10011E628()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

unint64_t sub_10011E644()
{
  return sub_1006653F4();
}

uint64_t sub_10011E660@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X8>)
{
  return a2(a1);
}

unint64_t sub_10011E66C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 4;
  return sub_100731D50();
}

void sub_10011E678()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + *(int *)(v2 + 24)) = v3;
  *(_BYTE *)(v1 + *(int *)(v2 + 28)) = v0;
}

uint64_t sub_10011E69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

unint64_t sub_10011E6AC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return sub_10029E414();
}

uint64_t sub_10011E6B8()
{
  return 255;
}

uint64_t sub_10011E6C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10011E6CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = v0;
}

uint64_t sub_10011E6E0@<X0>(unsigned int a1@<W8>)
{
  if (a1 > 1)
    return (a1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10011E6F0()
{
  return type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
}

unint64_t sub_10011E6FC()
{
  return sub_10066570C();
}

void sub_10011E704()
{
  sub_1000EDE8C();
}

uint64_t sub_10011E70C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

double sub_10011E718()
{
  return sub_10043A068();
}

uint64_t sub_10011E724@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for WeatherMetadata(0);
}

_QWORD *sub_10011E734()
{
  uint64_t v0;

  return Hasher.init(_seed:)((_QWORD *)(v0 + 568));
}

uint64_t sub_10011E744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 - 256);
  _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, *(_QWORD *)(v1 - 1016));
  return v2;
}

id sub_10011E79C(void *a1)
{
  return objc_msgSend(a1, "mainBundle");
}

uint64_t sub_10011E7AC()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 112, 0);
}

unint64_t sub_10011E7B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return sub_10029E054();
}

uint64_t sub_10011E7C4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 20)));
}

uint64_t sub_10011E7D0()
{
  return LocationModel.timeZone.getter();
}

uint64_t sub_10011E7D8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_10011E7F0()
{
  return type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
}

uint64_t sub_10011E7F8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10011E82C()
{
  return WeatherDataModel.currentWeather.getter();
}

_OWORD *sub_10011E834(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10011E844()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[8];
  v2 = v0[9];
  v3 = type metadata accessor for ContinuousClock(0);
  sub_100086DA4(&qword_100BFC638, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  v5 = v4;
  dispatch thunk of Clock.now.getter(v3, v4);
  sub_100086DA4(&qword_100BFC640, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v1, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v0[12] = v7;
  sub_1000B3BDC(v7);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_10068E978;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v3, v5);
}

uint64_t sub_10011E954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  sub_10003BC90();
  return sub_1000BBE68();
}

uint64_t sub_10011E9F0(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind, &qword_100BDFE98, (uint64_t)&protocol conformance descriptor for Settings.VFX.AnimatedBackgrounds.AnimationKind);
}

uint64_t sub_10011EA0C(uint64_t a1, uint64_t a2)
{
  return sub_10068A5D4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherAvailability.AvailabilityKind, &qword_100BFC680, (uint64_t)&protocol conformance descriptor for WeatherAvailability.AvailabilityKind);
}

uint64_t sub_10011EA28()
{
  return sub_100081440(&qword_100BC5AA8);
}

uint64_t sub_10011EA34()
{
  return sub_1000F5474((uint64_t (*)(_QWORD))&type metadata accessor for Location);
}

uint64_t sub_10011EA40()
{
  return sub_1000F5474((uint64_t (*)(_QWORD))&type metadata accessor for ArticlePlacementLocation);
}

void sub_10011EA50()
{
  sub_1000BBD10();
  sub_10011EA60();
}

void sub_10011EA60()
{
  sub_10009AAE4();
}

char *sub_10011EA7C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BF6800);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100600678(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100120160((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

_OWORD *sub_10011EB5C(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10011E834(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

void sub_10011EBD4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v9 = sub_1000B4340(a1, a2, a3, a4, a5);
  v10(v9);
  sub_1000C6954();
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v8 + v11 * v7, v6);
  sub_1000DC65C();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v13;
    sub_100079F70();
  }
}

void sub_10011EC1C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10009AAE4();
  *v0 = v1;
}

char *sub_10011EC50(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_10011EA7C(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10011EC6C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_10011ECA0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10001B80C();
  *v0 = v1;
}

void sub_10011ECD4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_10011ED08()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10003709C();
  *v0 = v1;
}

void sub_10011ED3C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_10011ED70()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

void sub_10011EDA4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10003709C();
  *v0 = v1;
}

void sub_10011EDD8()
{
  sub_100849C74();
}

char *sub_10011EDFC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000BA294(&qword_100BD79A0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100323F94(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10012001C(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void sub_10011EED0()
{
  sub_1005FEB88();
}

void sub_10011EEE4()
{
  sub_10001F148();
}

void sub_10011EF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008148C(a1, a2, a3, a4, &qword_100BF6620, (uint64_t)&type metadata for MoonComponentViewModel.Row, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))sub_10011F040, (void (*)(uint64_t, uint64_t, _QWORD *))sub_10011FDD8);
}

void sub_10011EF24()
{
  sub_100050898();
}

void sub_10011EF38()
{
  sub_100050898();
}

void sub_10011EF4C()
{
  sub_100050898();
}

void sub_10011EF60()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  sub_10009E2DC();
  if ((v4 & 1) != 0)
  {
    sub_1000DD15C();
    if (v5 != v6)
    {
      sub_1000C572C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000F3E6C();
  if (v3)
  {
    v7 = sub_1000BA294(&qword_100BF67C8);
    v8 = (_QWORD *)sub_100098740(v7, v3 + 32);
    v9 = j__malloc_size(v8);
    v8[2] = v2;
    v8[3] = 2 * v9 - 64;
  }
  if ((v1 & 1) != 0)
  {
    v10 = (char *)sub_10011E158();
    sub_100600454(v10, v11, v12);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    v13 = sub_1000FC674();
    sub_1005FFE64(v13, v14, v15, v16);
  }
  sub_100079F70();
}

void sub_10011F004()
{
  sub_1005FEB88();
}

void sub_10011F018()
{
  sub_1005FEF9C();
}

void sub_10011F02C()
{
  sub_1005FEF9C();
}

uint64_t sub_10011F040(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_1000BA698();
    sub_1000C36A8();
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_1000986E8();
    return v6;
  }
  sub_1000BA698();
  sub_1000C25D8();
LABEL_11:
  result = sub_1000BBE5C(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10011F104(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 8 * a1 + 32;
  v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

void sub_10011F1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_1000BA698();
    sub_1000C36A8();
    goto LABEL_11;
  }
  sub_10011DB9C();
  if (v8)
    v9 = 0;
  else
    v9 = v7 > v4;
  if (!v9)
  {
    sub_1000DBBEC(v2, v3, v4, v5, v6);
    sub_1000DAD00();
    sub_1000986E8();
    sub_1000BBF54();
    return;
  }
  sub_1000BA698();
  sub_1000C25D8();
LABEL_11:
  sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
}

uint64_t sub_10011F298(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_10011F394(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10011F3C8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

void sub_10011F404(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100603054(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_1006048AC();
      goto LABEL_14;
    }
    sub_10011F55C(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17);
  Namespace.ID.hash(into:)(v17, a1);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    if ((static Namespace.ID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2), a1) & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Namespace.ID);
      __break(1u);
    }
    else
    {
      v12 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if ((static Namespace.ID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2), a1) & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = a1;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
}

void sub_10011F55C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000BA294(&qword_100BF67F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_37:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v30);
    Namespace.ID.hash(into:)(v30, v19);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) == 0)
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      while (++v23 != v26 || (v25 & 1) == 0)
      {
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
        if (v28 != -1)
        {
          v24 = __clz(__rbit64(~v28)) + (v23 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v24) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v11)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v11)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v11)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_35:
    swift_release_n(v3, 2);
    v2 = v29;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

void sub_10011F7DC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  Swift::Int v19;
  Swift::Int v20;
  __int128 *v21;
  __int128 v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  Swift::Int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100121B38(0, v3, 1, a1);
      return;
    }
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  v5 = v4;
  sub_10087B744(v3 / 2);
  v89 = a1;
  v90 = v6;
  v94 = v7;
  v92 = v3;
  if (v3 > 0)
  {
    v8 = 0;
    v9 = *a1;
    v87 = *a1 - 16;
    v88 = *a1 + 32;
    v10 = (char *)_swiftEmptyArrayStorage;
    v91 = v5;
    v93 = *a1;
    while (1)
    {
      v11 = v8++;
      if (v8 < v3)
      {
        v12 = *(_QWORD *)(v9 + 16 * v8);
        v13 = *(_QWORD *)(v9 + 16 * v11);
        v8 = v11 + 2;
        if (v11 + 2 < v3)
        {
          v14 = (uint64_t *)(v88 + 16 * v11);
          v15 = v12;
          while (1)
          {
            v17 = *v14;
            v14 += 2;
            v16 = v17;
            if (v12 < v13 == v17 >= v15)
              break;
            ++v8;
            v15 = v16;
            if (v8 >= v3)
            {
              v8 = v3;
              break;
            }
          }
        }
        if (v12 < v13)
        {
          if (v8 < v11)
            goto LABEL_127;
          if (v11 < v8)
          {
            v18 = (__int128 *)(v87 + 16 * v8);
            v19 = v8;
            v20 = v11;
            v21 = (__int128 *)(v9 + 16 * v11);
            do
            {
              if (v20 != --v19)
              {
                if (!v9)
                  goto LABEL_133;
                v22 = *v21;
                *v21 = *v18;
                *v18 = v22;
              }
              ++v20;
              --v18;
              ++v21;
            }
            while (v20 < v19);
          }
        }
      }
      if (v8 < v3)
      {
        if (__OFSUB__(v8, v11))
          goto LABEL_124;
        if (v8 - v11 < v5)
        {
          v23 = v11 + v5;
          if (__OFADD__(v11, v5))
            goto LABEL_128;
          if (v23 >= v3)
            v23 = v3;
          if (v23 < v11)
          {
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return;
          }
          if (v8 != v23)
          {
            v24 = v87 + 16 * v8;
            do
            {
              v25 = *(_QWORD *)(v9 + 16 * v8);
              v26 = v11;
              v27 = v24;
              do
              {
                if (v25 >= *(_QWORD *)v27)
                  break;
                if (!v9)
                  goto LABEL_131;
                v28 = *(_QWORD *)(v27 + 24);
                *(_OWORD *)(v27 + 16) = *(_OWORD *)v27;
                *(_QWORD *)v27 = v25;
                *(_QWORD *)(v27 + 8) = v28;
                v27 -= 16;
                ++v26;
              }
              while (v8 != v26);
              ++v8;
              v24 += 16;
            }
            while (v8 != v23);
            v8 = v23;
          }
        }
      }
      if (v8 < v11)
        goto LABEL_123;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_10021A398(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v30 = *((_QWORD *)v10 + 2);
      v29 = *((_QWORD *)v10 + 3);
      v31 = v30 + 1;
      v9 = v93;
      if (v30 >= v29 >> 1)
      {
        v80 = sub_10021A398((char *)(v29 > 1), v30 + 1, 1, v10);
        v9 = v93;
        v10 = v80;
      }
      *((_QWORD *)v10 + 2) = v31;
      v32 = v10 + 32;
      v33 = &v10[16 * v30 + 32];
      *(_QWORD *)v33 = v11;
      *((_QWORD *)v33 + 1) = v8;
      if (v30)
      {
        while (1)
        {
          v34 = v31 - 1;
          if (v31 >= 4)
          {
            v39 = &v32[16 * v31];
            v40 = *((_QWORD *)v39 - 8);
            v41 = *((_QWORD *)v39 - 7);
            v45 = __OFSUB__(v41, v40);
            v42 = v41 - v40;
            if (v45)
              goto LABEL_108;
            v44 = *((_QWORD *)v39 - 6);
            v43 = *((_QWORD *)v39 - 5);
            v45 = __OFSUB__(v43, v44);
            v37 = v43 - v44;
            v38 = v45;
            if (v45)
              goto LABEL_109;
            v46 = v31 - 2;
            v47 = &v32[16 * v31 - 32];
            v49 = *(_QWORD *)v47;
            v48 = *((_QWORD *)v47 + 1);
            v45 = __OFSUB__(v48, v49);
            v50 = v48 - v49;
            if (v45)
              goto LABEL_110;
            v45 = __OFADD__(v37, v50);
            v51 = v37 + v50;
            if (v45)
              goto LABEL_112;
            if (v51 >= v42)
            {
              v69 = &v32[16 * v34];
              v71 = *(_QWORD *)v69;
              v70 = *((_QWORD *)v69 + 1);
              v45 = __OFSUB__(v70, v71);
              v72 = v70 - v71;
              if (v45)
                goto LABEL_118;
              v62 = v37 < v72;
              goto LABEL_70;
            }
          }
          else
          {
            if (v31 != 3)
            {
              v63 = *((_QWORD *)v10 + 4);
              v64 = *((_QWORD *)v10 + 5);
              v45 = __OFSUB__(v64, v63);
              v56 = v64 - v63;
              v57 = v45;
              goto LABEL_64;
            }
            v36 = *((_QWORD *)v10 + 4);
            v35 = *((_QWORD *)v10 + 5);
            v45 = __OFSUB__(v35, v36);
            v37 = v35 - v36;
            v38 = v45;
          }
          if ((v38 & 1) != 0)
            goto LABEL_111;
          v46 = v31 - 2;
          v52 = &v32[16 * v31 - 32];
          v54 = *(_QWORD *)v52;
          v53 = *((_QWORD *)v52 + 1);
          v55 = __OFSUB__(v53, v54);
          v56 = v53 - v54;
          v57 = v55;
          if (v55)
            goto LABEL_113;
          v58 = &v32[16 * v34];
          v60 = *(_QWORD *)v58;
          v59 = *((_QWORD *)v58 + 1);
          v45 = __OFSUB__(v59, v60);
          v61 = v59 - v60;
          if (v45)
            goto LABEL_115;
          if (__OFADD__(v56, v61))
            goto LABEL_117;
          if (v56 + v61 >= v37)
          {
            v62 = v37 < v61;
LABEL_70:
            if (v62)
              v34 = v46;
            goto LABEL_72;
          }
LABEL_64:
          if ((v57 & 1) != 0)
            goto LABEL_114;
          v65 = &v32[16 * v34];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v45 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v45)
            goto LABEL_116;
          if (v68 < v56)
            goto LABEL_81;
LABEL_72:
          v73 = v10;
          v74 = v34 - 1;
          if (v34 - 1 >= v31)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          if (!v9)
            goto LABEL_132;
          v75 = &v32[16 * v74];
          v76 = *(_QWORD *)v75;
          v77 = &v32[16 * v34];
          v78 = *((_QWORD *)v77 + 1);
          sub_10054CD04((char *)(v9 + 16 * *(_QWORD *)v75), (char *)(v9 + 16 * *(_QWORD *)v77), v9 + 16 * v78, v94);
          if (v1)
          {
            v10 = v73;
LABEL_87:
            swift_bridgeObjectRelease(v10);
            if (v92 >= -1)
            {
              *(_QWORD *)(v90 + 16) = 0;
              swift_bridgeObjectRelease(v90);
              return;
            }
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }
          if (v78 < v76)
            goto LABEL_105;
          if (v34 > *((_QWORD *)v73 + 2))
            goto LABEL_106;
          *(_QWORD *)v75 = v76;
          *(_QWORD *)&v32[16 * v74 + 8] = v78;
          v79 = *((_QWORD *)v73 + 2);
          if (v34 >= v79)
            goto LABEL_107;
          v10 = v73;
          v31 = v79 - 1;
          memmove(&v32[16 * v34], v77 + 16, 16 * (v79 - 1 - v34));
          *((_QWORD *)v73 + 2) = v79 - 1;
          v9 = v93;
          if (v79 <= 2)
            goto LABEL_81;
        }
      }
      v31 = 1;
LABEL_81:
      v5 = v91;
      v3 = v92;
      if (v8 >= v92)
        goto LABEL_91;
    }
  }
  v10 = (char *)_swiftEmptyArrayStorage;
  v31 = _swiftEmptyArrayStorage[2];
LABEL_91:
  if (v31 >= 2)
  {
    v81 = *v89;
    while (1)
    {
      v82 = v31 - 2;
      if (v31 < 2)
        break;
      if (!v81)
        goto LABEL_134;
      v83 = *(_QWORD *)&v10[16 * v82 + 32];
      v84 = *(_QWORD *)&v10[16 * v31 + 24];
      sub_10054CD04((char *)(v81 + 16 * v83), (char *)(v81 + 16 * *(_QWORD *)&v10[16 * v31 + 16]), v81 + 16 * v84, v94);
      if (v1)
        goto LABEL_87;
      if (v84 < v83)
        goto LABEL_120;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_10021A488();
      if (v82 >= *((_QWORD *)v10 + 2))
        goto LABEL_121;
      v85 = &v10[16 * v82 + 32];
      *(_QWORD *)v85 = v83;
      *((_QWORD *)v85 + 1) = v84;
      v86 = *((_QWORD *)v10 + 2);
      if (v31 > v86)
        goto LABEL_122;
      memmove(&v10[16 * v31 + 16], &v10[16 * v31 + 32], 16 * (v86 - v31));
      *((_QWORD *)v10 + 2) = v86 - 1;
      v31 = v86 - 1;
      if (v86 <= 2)
        goto LABEL_102;
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
LABEL_102:
  swift_bridgeObjectRelease(v10);
  if (v92 < -1)
    goto LABEL_130;
  *(_QWORD *)(v90 + 16) = 0;
  swift_bridgeObjectRelease(v90);
}

char *sub_10011FDD8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000BA698();
    result = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1000C2D8C(a3, result);
  }
  return result;
}

char *sub_10011FE34(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_10011FEB8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_1000BA698();
    result = (char *)sub_1000BC728((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000C2D8C(a3, result);
  }
  return result;
}

char *sub_10011FF10(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void sub_10011FF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000BC728((uint64_t)"Fatal error", v10, v11, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v12, v13, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else
  {
    sub_10009E354();
    if (v4 && (sub_1000878AC(), sub_10009DE24(), !v5 & v4))
    {
      if (v3 == v2)
      {
        sub_10003BCFC();
      }
      else
      {
        sub_1000EB084();
        sub_1000B317C();
      }
    }
    else
    {
      sub_1000878AC();
      v6 = sub_1000EB084();
      sub_1000F425C(v6, v7, v8, v9);
    }
  }
}

void *sub_10012001C(char *__src, size_t __n, char *__dst)
{
  void *result;
  const char *v5;
  uint64_t v6;

  if ((__n & 0x8000000000000000) != 0)
  {
    v5 = "UnsafeMutablePointer.initialize with negative count";
    v6 = 51;
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    v5 = "UnsafeMutablePointer.initialize overlapping range";
    v6 = 49;
  }
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

void *sub_1001200E0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000D1D14();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)sub_1000D1668();
      return sub_1000DCC24(v6, v7, v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = (void *)sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

void *sub_100120160(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    v3 = a1 + 4 * a2;
    if (a3 + 4 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)sub_1000D1668();
      return sub_1000DCC24(v6, v7, v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = (void *)sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_1001201F0(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_1001201FC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000B4628();
  if (v0 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000D8E60();
    if (!v4 && v3)
    {
      v3 = v2 >= v1;
      v4 = v2 == v1;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    if (v4 || !v3)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
  return result;
}

uint64_t sub_100120284(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_100120290(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_10012029C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_1001202A8(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_1001202B4(uint64_t a1, uint64_t a2)
{
  return sub_1001202C0(a1, a2);
}

uint64_t sub_1001202C0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000DF4C4();
    sub_1000BA294(v3);
    sub_1000C141C();
    if (!v6 && v5)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      v7 = sub_1000E6F44();
      return sub_1000DD83C(v7);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

unint64_t sub_100120350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC2998;
  if (!qword_100BC2998)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BC2998);
  }
  return result;
}

unint64_t sub_10012038C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC3088;
  if (!qword_100BC3088)
  {
    v1 = objc_opt_self(NSRunLoop);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BC3088);
  }
  return result;
}

unint64_t sub_1001203C8()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100BC3098;
  if (!qword_100BC3098)
  {
    v1 = sub_10012038C();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_100BC3098);
  }
  return result;
}

void sub_100120408(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = sub_1000A0794(255, a2, a3);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4), a1);
  }
  sub_10004A298();
}

unint64_t sub_100120444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD2098;
  if (!qword_100BD2098)
  {
    v1 = objc_opt_self(UIImage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BD2098);
  }
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A28, (uint64_t)&unk_100B5C020);
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A48, (uint64_t)&unk_100B5C1C8);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A50, (uint64_t)&unk_100B5C1E8);
}

uint64_t sub_1001204BC(unsigned int a1)
{
  if (a1 >= 5)
    return 0;
  else
    return (0x102030400uLL >> (8 * a1));
}

id sub_1001204DC(double a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  NSString v7;
  id v8;

  if (a3)
  {
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a1 = swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(v4, "initWithName:sessionRole:", v7, a4, a1);

  return v8;
}

void type metadata accessor for State(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2B20, (uint64_t)&unk_100B5C288);
}

unint64_t sub_10012055C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC29A8;
  if (!qword_100BC29A8)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100BC29A8);
  }
  return result;
}

unint64_t sub_10012059C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC6A08;
  if (!qword_100BC6A08)
  {
    v1 = objc_opt_self(NSNumberFormatter);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BC6A08);
  }
  return result;
}

unint64_t sub_1001205D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCEF38;
  if (!qword_100BCEF38)
  {
    v1 = sub_1000A0794(255, &qword_100BCEF30, UISceneSession_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100BCEF38);
  }
  return result;
}

unint64_t sub_100120628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD4508;
  if (!qword_100BD4508)
  {
    v1 = sub_1000A0794(255, (unint64_t *)&qword_100BD4500, NSUserActivity_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100BD4508);
  }
  return result;
}

unint64_t sub_100120678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD4500;
  if (!qword_100BD4500)
  {
    v1 = objc_opt_self(NSUserActivity);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BD4500);
  }
  return result;
}

void sub_1001206B4(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[40];
  uint64_t v13;

  v2 = v1;
  v13 = sub_1000D1D64();
  if (v13)
  {
    sub_1000CCAC0();
    *(_QWORD *)&v10 = v4;
    *((_QWORD *)&v10 + 1) = v5;
    AnyHashable.init<A>(_:)(&v10);
    if (a1 == 2)
    {
      v10 = 0u;
      v11 = 0u;
    }
    else
    {
      v6 = 0x6174654479746963;
      if ((a1 & 1) == 0)
        v6 = 0x7473694C79746963;
      v7 = 0xEE00776569566C69;
      *((_QWORD *)&v11 + 1) = &type metadata for String;
      if ((a1 & 1) == 0)
        v7 = 0xEC00000077656956;
      *(_QWORD *)&v10 = v6;
      *((_QWORD *)&v10 + 1) = v7;
    }
    v8 = &v13;
    sub_100121BA4((uint64_t)&v10, (uint64_t)v12);
    if (v13)
    {
      sub_1000CFC14();
      sub_1000DB8A0();
    }
    else
    {
      v8 = 0;
    }
    sub_100098A10(v9, "setUserInfo:");

  }
  else
  {
    objc_msgSend(v2, "setUserInfo:", 0);
  }
}

void sub_1001207F8(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setTitle:", v5, swift_bridgeObjectRelease(a2).n128_f64[0]);

}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2CF0, (uint64_t)&unk_100B5C438);
}

unint64_t sub_10012085C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB0D8;
  if (!qword_100BCB0D8)
  {
    v1 = objc_opt_self(NSUnitLength);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BCB0D8);
  }
  return result;
}

unint64_t sub_100120898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEF020;
  if (!qword_100BEF020)
  {
    v1 = sub_100075EB0(&qword_100BDF688);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEF020);
  }
  return result;
}

uint64_t sub_1001208DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BDAE28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100120924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDAE38;
  if (!qword_100BDAE38)
  {
    v1 = sub_100075EB0(&qword_100BDAE28);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDAE38);
  }
  return result;
}

uint64_t sub_100120968(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_1000BA294(a3);
  v4 = sub_1000BCF4C();
  v5(v4);
  return a2;
}

uint64_t sub_1001209A8(uint64_t a1, uint64_t a2)
{
  return sub_1000F55C4(a1, a2, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t))sub_1000F59FC, (void (*)(_QWORD))type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
}

void sub_1001209BC()
{
  sub_10001AA9C();
}

uint64_t sub_1001209D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010CDDC(a1, (void (*)(_QWORD))type metadata accessor for LocationComponentContainerViewModel, a2);
}

uint64_t sub_1001209DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F7224(a1, (uint64_t (*)(_QWORD))&type metadata accessor for NWInterface, a2);
}

uint64_t sub_1001209E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F7224(a1, (uint64_t (*)(_QWORD))&type metadata accessor for LocationModel, a2);
}

uint64_t sub_1001209F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F7224(a1, (uint64_t (*)(_QWORD))&type metadata accessor for URL, a2);
}

uint64_t sub_100120A00(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_10084B104(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Location.Identifier);
}

uint64_t sub_100120A1C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_10084B104(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for LocationModel);
}

void sub_100120A38(uint64_t a1, int a2, char a3, uint64_t a4, void *a5)
{
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;
  id v19;
  char v20;
  uint64_t v21;
  char v22;
  id v23;
  char v24;
  id v25;
  uint64_t v26;
  void *v27;

  v8 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if ((a3 & 1) != 0)
    {
      v9 = sub_1000C0108();
      v10 = __CocoaSet.element(at:)(v9);
      v11 = sub_1000C5384();
      swift_unknownObjectRetain(v10);
      swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
      swift_unknownObjectRelease(v10);
      return;
    }
    goto LABEL_22;
  }
  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    goto LABEL_17;
  __break(1u);
LABEL_10:
  v12 = sub_1000C0108();
  if (__CocoaSet.Index.age.getter(v12) != *(_DWORD *)(a4 + 36))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = sub_1000C0108();
  v14 = __CocoaSet.Index.element.getter(v13);
  v15 = sub_1000C5384();
  swift_unknownObjectRetain(v14);
  swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
  a5 = v27;
  swift_unknownObjectRelease(v14);
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
  v17 = -1 << *(_BYTE *)(a4 + 32);
  v8 = v16 & ~v17;
  sub_1000C1DD0();
  if ((v18 & 1) != 0)
  {
    v19 = sub_100110268();
    v20 = sub_1000C14A8((uint64_t)v19);

    if ((v20 & 1) == 0)
    {
      v21 = ~v17;
      do
      {
        v8 = (v8 + 1) & v21;
        sub_1000C1DD0();
        if ((v22 & 1) == 0)
          goto LABEL_21;
        v23 = sub_100110268();
        v24 = sub_1000C14A8((uint64_t)v23);

      }
      while ((v24 & 1) == 0);
    }

LABEL_17:
    v25 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v8);
    return;
  }
LABEL_21:

  __break(1u);
LABEL_22:
  __break(1u);
}

void sub_100120C2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[3];

  v6[2] = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      sub_1000F9854(v6, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    sub_1000986E8();
  }
  else
  {
    sub_1000986E8();
  }
  sub_1000BBF54();
}

uint64_t sub_100120CC4(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return 1 << *(_BYTE *)(a1 + 32);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaSet.endIndex.getter(a1);
}

void sub_100120D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v20;
  _QWORD v21[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21);
    String.hash(into:)(v21, a1, a2);
    v6 = sub_10007A148();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    sub_1000C3B30();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (uint64_t *)(v10 + 16 * v8);
      v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_1000B49F4(*v11, v12) & 1) == 0)
      {
        v14 = ~v7;
        v15 = (v8 + 1) & v14;
        sub_1000C3B30();
        if ((v16 & 1) != 0)
        {
          do
          {
            v17 = (uint64_t *)(v10 + 16 * v15);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((sub_1000B49F4(*v17, v18) & 1) != 0)
              break;
            v15 = (v15 + 1) & v14;
            sub_1000C3B30();
          }
          while ((v20 & 1) != 0);
        }
      }
    }
  }
}

uint64_t sub_100120E08(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[9];

  v5 = *v2;
  sub_10009E564(*(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  Namespace.ID.hash(into:)(v23, a2);
  v6 = sub_10007A148();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  sub_1000C3B30();
  if ((v9 & 1) == 0)
  {
LABEL_7:
    sub_100075DF4();
    swift_isUniquelyReferenced_nonNull_native(*v2);
    sub_1000B3BB4();
    sub_10011F404(a2, v8, v13);
    sub_100607114(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23[0]);
    result = 1;
    goto LABEL_8;
  }
  if ((sub_10009F7FC() & 1) == 0)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      sub_1000C3B30();
      if ((v11 & 1) == 0)
        goto LABEL_7;
    }
    while ((sub_10009F7FC() & 1) == 0);
  }
  sub_100075DF4();
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100120EF0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
      return static __CocoaSet.Index.== infix(_:_:)(result, a2, a4, a5);
  }
  else if ((a6 & 1) == 0)
  {
    if ((_DWORD)a2 == (_DWORD)a5)
      return result == a4;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100120F24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC30C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100120F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC30C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100120FAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC29B8;
  if (!qword_100BC29B8)
  {
    v1 = sub_100075EB0(&qword_100BC29B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BC29B8);
  }
  return result;
}

uint64_t sub_100120FF0()
{
  return sub_100121C78(&qword_100BEF010, &qword_100BEF018, (void (*)(void))sub_100120898, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_100121014()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFA30;
  if (!qword_100BFFA30)
  {
    v1 = sub_100075EB0(&qword_100BD4F10);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFFA30);
  }
  return result;
}

unint64_t sub_100121058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFACC0;
  if (!qword_100BFACC0)
  {
    v1 = sub_100075EB0(&qword_100BFA9A0);
    sub_1001540C8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BFACC0);
  }
  return result;
}

unint64_t sub_1001210BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE5588;
  if (!qword_100BE5588)
  {
    v1 = sub_100075EB0(&qword_100BE5580);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BE5588);
  }
  return result;
}

unint64_t sub_100121100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC2900;
  if (!qword_100BC2900)
  {
    v1 = sub_100075EB0(&qword_100BC28F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BC2900);
  }
  return result;
}

unint64_t sub_100121144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD1440;
  if (!qword_100BD1440)
  {
    v1 = sub_100075EB0(&qword_100BD1438);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BD1440);
  }
  return result;
}

uint64_t sub_100121188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

void sub_1001211F0(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_10011EED0, type metadata accessor for ConditionPickerMenuViewModel.Row);
}

void sub_100121204()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000C5BEC();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000DB814() || (sub_1000CFBDC(), !(v6 ^ v4 | v5)))
  {
    sub_1000BD35C();
    sub_1005FEEA0(v7, v8, v9, v10);
    v2 = v11;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000D94AC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_1000D1168();
  sub_10025E8B8(v12, v13);
  if (!v3)
  {
LABEL_11:
    sub_1000986E8();
    *v1 = v2;
    sub_10004A2A0();
    return;
  }
  sub_1000D004C();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v14;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_10012129C(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_10009AD98, (uint64_t (*)(_QWORD))&type metadata accessor for LocationModel);
}

void sub_1001212B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000C5BEC();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000DB814() || (sub_1000CFBDC(), !(v6 ^ v4 | v5)))
  {
    sub_1000BD35C();
    sub_10011F02C();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v2 + 24) >> 1) - *(_QWORD *)(v2 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_1000BA294(&qword_100BCF2D0);
  v9 = sub_1000C525C(v8);
  sub_1001202C0(v9, v10);
  if (!v3)
  {
LABEL_11:
    sub_1000986E8();
    *v1 = v2;
    sub_10004A2A0();
    return;
  }
  sub_1000D004C();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_10012135C(uint64_t a1)
{
  return sub_1001ADDDC(a1, (uint64_t (*)(BOOL))sub_10011EF38);
}

uint64_t sub_100121368(uint64_t a1)
{
  return sub_1001ADDDC(a1, (uint64_t (*)(BOOL))sub_10011F018);
}

void sub_100121374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v5 < 0)
    v17 = v5;
  else
    v17 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v5);
LABEL_4:
  if (v7 < v2)
  {
    __break(1u);
    goto LABEL_35;
  }
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_37:
  if (v5 < 0)
    v18 = v5;
  else
    v18 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v5);
LABEL_9:
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_42:
    if (v5 < 0)
      v19 = v5;
    else
      v19 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v5);
    goto LABEL_17;
  }
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  v13 = v11 + 32 + 8 * v4;
  type metadata accessor for WireframeContentManager(0);
  v14 = swift_arrayDestroy(v13, v7);
  if (!v6)
  {
LABEL_28:
    specialized Array._endMutation()(v14);
    return;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v20 = v5;
    else
      v20 = v11;
    swift_bridgeObjectRetain(v5);
    v15 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v15 = *(_QWORD *)(v11 + 16);
  }
  if (__OFSUB__(v15, v2))
  {
    __break(1u);
  }
  else
  {
    v14 = sub_1006001D8(v11 + 32 + 8 * v2, v15 - v2, v13);
    if (!((unint64_t)v5 >> 62))
    {
      v16 = *(_QWORD *)(v11 + 16);
      goto LABEL_26;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v11;
  swift_bridgeObjectRetain(v5);
  v16 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
LABEL_26:
  if (!__OFADD__(v16, v6))
  {
    *(_QWORD *)(v11 + 16) = v16 + v6;
    goto LABEL_28;
  }
  __break(1u);
}

unint64_t sub_1001215C8(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1001215EC()
{
  sub_10048BDF0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10011EF38);
}

void sub_1001215F8()
{
  sub_10048BDF0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10011F018);
}

void sub_100121604(void (*a1)(uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_13;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v8 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3);
      }
      else
      {
        v9 = *(_QWORD *)(a3 + 8 * v8);
        v10 = swift_retain(v9);
      }
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v13 = v9;
      a1(&v13, v10);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v9);
        return;
      }
      swift_release(v9);
      ++v8;
      if (v11 == v7)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_10:
  swift_bridgeObjectRelease(a3);
}

void sub_100121718(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;

  v4 = &qword_100BC3620;
  v5 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v5);
  v7 = (unsigned __int8 *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006C17D4(&v45, a1);
  v9 = v45;
  v8 = v46;
  v10 = v48;
  v11 = v49;
  v42 = (unint64_t)(v47 + 64) >> 6;
  v40 = _swiftEmptyArrayStorage;
  v41 = v46;
  while (1)
  {
    if (v11)
    {
      v44 = (v11 - 1) & v11;
      v12 = __clz(__rbit64(v11)) | (v10 << 6);
      goto LABEL_20;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v13 >= v42)
      goto LABEL_35;
    v14 = *(_QWORD *)(v8 + 8 * v13);
    v15 = v10 + 1;
    if (!v14)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v42)
        goto LABEL_35;
      v14 = *(_QWORD *)(v8 + 8 * v15);
      if (!v14)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v42)
          goto LABEL_35;
        v14 = *(_QWORD *)(v8 + 8 * v15);
        if (!v14)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v42)
            goto LABEL_35;
          v14 = *(_QWORD *)(v8 + 8 * v15);
          if (!v14)
          {
            v15 = v10 + 5;
            if (v10 + 5 >= v42)
              goto LABEL_35;
            v14 = *(_QWORD *)(v8 + 8 * v15);
            if (!v14)
            {
              v16 = v10 + 6;
              while (v16 < v42)
              {
                v14 = *(_QWORD *)(v8 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_19;
                }
              }
LABEL_35:
              swift_release(v9);
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v44 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v10 = v15;
LABEL_20:
    v17 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v12);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for BannerStateComputer(0) + 24));
    if (*(_QWORD *)(v20 + 16))
    {
      v43 = v10;
      sub_10013BB0C(v18, v19);
      sub_10013BB0C(v18, v19);
      v21 = sub_1000F9020(v18, v19);
      if ((v22 & 1) != 0)
      {
        v23 = v21;
        v24 = v7;
        v25 = v9;
        v26 = v4;
        v27 = a2;
        v28 = *(_QWORD *)(v20 + 56);
        v29 = type metadata accessor for ContentStatusBanner(0);
        v30 = v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v23;
        a2 = v27;
        v4 = v26;
        v9 = v25;
        v7 = v24;
        v8 = v41;
        sub_100080C0C(v30, (uint64_t)v7, type metadata accessor for ContentStatusBanner);
        v31 = (uint64_t)v7;
        v32 = 0;
      }
      else
      {
        v29 = type metadata accessor for ContentStatusBanner(0);
        v31 = (uint64_t)v7;
        v32 = 1;
      }
      _s7Weather24LocationCompositionStateOwst_0(v31, v32, 1, v29);
      sub_1000F9174(v18, v19);
      v10 = v43;
    }
    else
    {
      v29 = type metadata accessor for ContentStatusBanner(0);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 1, 1, v29);
      sub_10013BB0C(v18, v19);
    }
    type metadata accessor for ContentStatusBanner(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v29))
    {
      sub_100021A14((uint64_t)v7, v4);
      goto LABEL_29;
    }
    v33 = *v7;
    sub_100021A14((uint64_t)v7, v4);
    if (v33 == 1)
    {
      v34 = v40;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
      v50 = v34;
      v43 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100606120();
        v34 = v50;
      }
      v36 = v34[2];
      v37 = (_QWORD *)(v36 + 1);
      if (v36 >= v34[3] >> 1)
      {
        v40 = (_QWORD *)(v36 + 1);
        sub_100606120();
        v37 = v40;
        v34 = v50;
      }
      v34[2] = v37;
      v40 = v34;
      v38 = &v34[2 * v36];
      v38[4] = v18;
      v38[5] = v19;
      v10 = v43;
      v11 = v44;
    }
    else
    {
LABEL_29:
      sub_1000F9174(v18, v19);
      v11 = v44;
    }
  }
  __break(1u);
}

uint64_t sub_100121AA8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_100121AD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10011EA50();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10011F7DC(v5);
  *a1 = v2;
}

uint64_t sub_100121B38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3 - 16;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 16 * a3);
      v7 = result;
      v8 = v5;
      do
      {
        if (v6 >= *(_QWORD *)v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
        *(_QWORD *)v8 = v6;
        *(_QWORD *)(v8 + 8) = v9;
        v8 -= 16;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

void sub_100121BA4(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10011E834((_OWORD *)a1, v3);
    sub_100121CDC(v3, a2);
    sub_10011F394(a2);
  }
  else
  {
    sub_10009E47C(a1);
    sub_10016D1AC(a2, v3);
    sub_10011F394(a2);
    sub_10009E47C((uint64_t)v3);
  }
}

void sub_100121C20()
{
  sub_100012124();
}

void sub_100121C3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = sub_1000D0374(a1);
    if ((v3 & 1) != 0)
      sub_1000DA808(v2);
  }
  sub_10004A298();
}

uint64_t sub_100121C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1007D4A98(a1, a2, a3, type metadata accessor for ContentStatusBanner);
}

uint64_t sub_100121C78(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100075EB0(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

double sub_100121CDC(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  double result;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_100006840(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

unint64_t sub_100121D48()
{
  unint64_t result;

  result = qword_100BCE750;
  if (!qword_100BCE750)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100BCE750);
  }
  return result;
}

uint64_t sub_100121D84(uint64_t a1)
{
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100121DB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_1000BA294(a3);
  v3 = sub_1000BCF4C();
  v4(v3);
  sub_10004A298();
}

uint64_t sub_100121DEC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

double sub_100121E04(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  double result;

  if (a3 <= 2u)
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

uint64_t sub_100121E1C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_100121DEC(a1, a2, a3);
  return a1;
}

double sub_100121E30(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  double result;

  if (a3 != 0xFF)
    return sub_100121E04(a1, a2, a3);
  return result;
}

void sub_100121E44(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BDD6F0)
  {
    v2 = sub_10010D1D0();
    v3 = type metadata accessor for ScaledValue(a1, &type metadata for Double, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BDD6F0);
  }
}

uint64_t sub_100121E9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100121EA4(*(void (**)(void))(v1 + 16), a1);
}

uint64_t sub_100121EA4@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;

  a1();
  v3 = type metadata accessor for WeatherConditionBackgroundModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, v3);
}

unint64_t sub_100121EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0C2E8;
  if (!qword_100C0C2E8)
  {
    v1 = type metadata accessor for WeatherConditionBackgroundManager(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WeatherConditionBackgroundManager, v1);
    atomic_store(result, (unint64_t *)&qword_100C0C2E8);
  }
  return result;
}

Swift::Void __swiftcall WeatherConditionBackgroundManager.windowDidBecomeFocused()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_log_type_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _WORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;

  if ((WeatherConditionBackgroundManager.isVfxSceneLoaded.getter() & 1) != 0)
  {
    if (qword_100BC2438 != -1)
      swift_once(&qword_100BC2438, sub_100159690);
    v0 = sub_100098720();
    v1 = sub_1000C34E4(v0, (uint64_t)qword_100CAF0A0);
    v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)sub_10009D340();
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Window did become focused. VFXScene is loaded and will be played.", v3, 2u);
      sub_1000986F0((uint64_t)v3);
    }

    WeatherConditionBackgroundManager.play(_:)(1);
  }
  else
  {
    if (qword_100BC2438 != -1)
      swift_once(&qword_100BC2438, sub_100159690);
    v4 = sub_100098720();
    v22 = sub_1000C34E4(v4, (uint64_t)qword_100CAF0A0);
    v5 = static os_log_type_t.default.getter();
    if (sub_1000C455C(v5, v6, v7, v8, v9, v10, v11, v12, v20, v22))
    {
      v13 = (_WORD *)sub_10009D340();
      *v13 = 0;
      sub_1000C2540((void *)&_mh_execute_header, v14, v15, "Window did become focused. VFXScene is not loaded yet.", v16, v17, v18, v19, v21, v23);
      sub_1000986F0((uint64_t)v13);
    }

  }
}

uint64_t sub_100122068(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC4678);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001220A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC4678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001220F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC4678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100122138(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C0D500)
  {
    v2 = type metadata accessor for WeatherConditionBackgroundModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C0D500);
  }
}

void sub_10012218C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD8E88)
  {
    v2 = type metadata accessor for WeatherDescription(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD8E88);
  }
}

unint64_t sub_1001221E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFFA20;
  if (!qword_100BFFA20)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFA20);
  }
  return result;
}

void sub_100122220(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v10[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for ViewState.SecondaryViewState(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v10[2] = &unk_1009C6E30;
    v10[3] = &unk_1009C6E30;
    sub_1001451BC(319);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for DisplayMetrics(319);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for WeatherMapPresentationState(319);
        if (v9 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(v8 - 8) + 64;
          v10[7] = &unk_1009C6E30;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1001222F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for WeatherCondition(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10012236C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001223B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100122418()
{
  unint64_t result;

  result = qword_100C10FB8;
  if (!qword_100C10FB8)
  {
    result = swift_getWitnessTable(&unk_1009D5AA8, &unk_100B61740);
    atomic_store(result, (unint64_t *)&qword_100C10FB8);
  }
  return result;
}

uint64_t sub_100122454(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[13];

  v10[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[1] = &unk_100981A78;
  result = type metadata accessor for AppConfiguration(319);
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for EnvironmentState(319);
    if (v4 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for LocationsState(319);
      if (v5 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(result - 8) + 64;
        v10[5] = &unk_100981AD0;
        result = type metadata accessor for NotificationsOptInState(319);
        if (v6 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for Date(319);
          if (v7 <= 0x3F)
          {
            v10[7] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for ViewState(319);
            if (v8 <= 0x3F)
            {
              v10[8] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for ModalViewState(319);
              if (v9 <= 0x3F)
              {
                v10[9] = *(_QWORD *)(result - 8) + 64;
                v10[10] = &unk_100981AE8;
                v10[11] = &unk_100981B00;
                v10[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
                return swift_updateClassMetadata2(a1, 256, 13, v10, a1 + 80);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001225A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for ActualListInput(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ListInput(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BDE730, (uint64_t)&nominal type descriptor for ListInput);
}

void *sub_100122608()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100122614(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Published(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 3, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001226A4(char *a1)
{
  uint64_t v1;

  return sub_1001226AC(a1, v1);
}

uint64_t sub_1001226AC(char *a1, uint64_t a2)
{
  return sub_100026F1C(*a1, a2);
}

unint64_t sub_1001226B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4658;
  if (!qword_100BC4658)
  {
    v1 = sub_100075EB0(&qword_100BC4650);
    result = swift_getWitnessTable(&unk_1009D9950, v1);
    atomic_store(result, (unint64_t *)&qword_100BC4658);
  }
  return result;
}

void sub_1001226F8()
{
  sub_1000A2930();
}

uint64_t sub_100122714(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  a3(&v10);
  a1(&v8, &v10);
  sub_1000C5AE8();
  result = v8;
  if (!v8)
  {
    v8 = 0;
    v9 = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v5._object = (void *)0x80000001009F12E0;
    v5._countAndFlagsBits = 0xD00000000000004BLL;
    String.append(_:)(v5);
    sub_1000BF090();
    sub_10009DE78();
    sub_1000FD9D4();
    sub_10003BC84();
    result = sub_1000BD924((uint64_t)"Fatal error", v6, v7, v8, v9, (uint64_t)"Weather/Selector.swift");
    __break(1u);
  }
  return result;
}

uint64_t sub_100122808@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100122814(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), (void (**)(uint64_t *__return_ptr))(v1 + 32), a1);
}

uint64_t sub_100122814@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X1>, void (**a3)(uint64_t *__return_ptr)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = sub_100122714(a1, a2, *a3);
  *a4 = result;
  return result;
}

void sub_100122864(void (*a1)(uint64_t *)@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_1000BA294(&qword_100BC46C8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(&v17, v7);
  v10 = v17;
  a1(&v17);
  swift_release(v10);
  v11 = type metadata accessor for LocationViewerInput(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11) == 1)
  {
    sub_100021A14((uint64_t)v9, &qword_100BC46C8);
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v12._countAndFlagsBits = 0xD00000000000004BLL;
    v12._object = (void *)0x80000001009F12E0;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001009F1640;
    v13._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 8236;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 0xD000000000000017;
    v15._object = (void *)0x80000001009F1660;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "Weather/Selector.swift", 22, 2);
    __break(1u);
  }
  else
  {
    sub_10007802C((uint64_t)v9, a3, type metadata accessor for LocationViewerInput);
  }
}

void sub_100122A14(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100122A20(*(void (**)(uint64_t *))(v1 + 16), (void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32), a1);
}

void sub_100122A20(void (*a1)(uint64_t *)@<X0>, void (**a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  sub_100122864(a1, *a2, a3);
}

void sub_100122A30(void (*a1)(uint64_t *)@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t active;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_1000BA294(&qword_100BC4610);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(&v17, v7);
  v10 = v17;
  a1(&v17);
  swift_release(v10);
  active = type metadata accessor for ActiveLocationInput(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, active) == 1)
  {
    sub_100021A14((uint64_t)v9, &qword_100BC4610);
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v12._countAndFlagsBits = 0xD00000000000004BLL;
    v12._object = (void *)0x80000001009F12E0;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001009F1590;
    v13._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 8236;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    v15._object = (void *)0x80000001009F15B0;
    v15._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "Weather/Selector.swift", 22, 2);
    __break(1u);
  }
  else
  {
    sub_10007802C((uint64_t)v9, a3, type metadata accessor for ActiveLocationInput);
  }
}

void sub_100122BE4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100122BF0(*(void (**)(uint64_t *))(v1 + 16), (void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32), a1);
}

void sub_100122BF0(void (*a1)(uint64_t *)@<X0>, void (**a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  sub_100122A30(a1, *a2, a3);
}

void sub_100122C00(void (*a1)(uint64_t *)@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_1000BA294(&qword_100BC4640);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(&v17, v7);
  v10 = v17;
  a1(&v17);
  swift_release(v10);
  v11 = type metadata accessor for LocationInput(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11) == 1)
  {
    sub_100021A14((uint64_t)v9, &qword_100BC4640);
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v12._countAndFlagsBits = 0xD00000000000004BLL;
    v12._object = (void *)0x80000001009F12E0;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0x6E6F697461636F4CLL;
    v13._object = (void *)0xED00007475706E49;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 8236;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    v15._object = (void *)0x80000001009F15D0;
    v15._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "Weather/Selector.swift", 22, 2);
    __break(1u);
  }
  else
  {
    sub_10007802C((uint64_t)v9, a3, type metadata accessor for LocationInput);
  }
}

void sub_100122DBC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100122DC8(*(void (**)(uint64_t *))(v1 + 16), (void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32), a1);
}

void sub_100122DC8(void (*a1)(uint64_t *)@<X0>, void (**a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  sub_100122C00(a1, *a2, a3);
}

uint64_t sub_100122DD8@<X0>(void (*a1)(uint64_t *)@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;

  v6 = sub_1000BA294(&qword_100BC4688);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(&v18, v7);
  v10 = v18;
  a1(&v18);
  swift_release(v10);
  v11 = type metadata accessor for WeatherConditionBackgroundModelFactoryInput(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a3, v9, v11);
  sub_100021A14((uint64_t)v9, &qword_100BC4688);
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(82);
  v13._countAndFlagsBits = 0xD00000000000004BLL;
  v13._object = (void *)0x80000001009F12E0;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD00000000000002BLL;
  v14._object = (void *)0x80000001009F15F0;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 8236;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v16._object = (void *)0x80000001009F1620;
  v16._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v18, v19, "Weather/Selector.swift", 22, 2);
  __break(1u);
  return result;
}

uint64_t sub_100122F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100122F9C(*(void (**)(uint64_t *))(v1 + 16), (void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32), a1);
}

uint64_t sub_100122F9C@<X0>(void (*a1)(uint64_t *)@<X0>, void (**a2)(uint64_t *__return_ptr, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  return sub_100122DD8(a1, *a2, a3);
}

void sub_100122FAC()
{
  sub_100122FB4();
}

void sub_100122FB4()
{
  sub_100186E24();
}

void sub_100122FFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100123004(a1, *(void (**)(uint64_t))(v2 + 16), a2);
}

void sub_100123004(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;

  v6 = sub_1000BA294(&qword_100BC46B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  v9 = type metadata accessor for LocationViewerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021A14((uint64_t)v8, &qword_100BC46B8);
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v10._countAndFlagsBits = 0xD000000000000050;
    v10._object = (void *)0x80000001009F1280;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001009F1640;
    v11._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 8236;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0xD000000000000017;
    v13._object = (void *)0x80000001009F1660;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "Weather/Selector.swift", 22, 2);
    __break(1u);
  }
  else
  {
    sub_10007802C((uint64_t)v8, a3, type metadata accessor for LocationViewerViewModel);
  }
}

void sub_100123194(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10012319C(a1, *(void (**)(uint64_t))(v2 + 16), a2);
}

void sub_10012319C(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t active;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;

  v6 = sub_1000BA294(&qword_100BC4600);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  active = type metadata accessor for ActiveLocationModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, active) == 1)
  {
    sub_100021A14((uint64_t)v8, &qword_100BC4600);
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v10._countAndFlagsBits = 0xD000000000000050;
    v10._object = (void *)0x80000001009F1280;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001009F1590;
    v11._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 8236;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001009F15B0;
    v13._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "Weather/Selector.swift", 22, 2);
    __break(1u);
  }
  else
  {
    sub_10007802C((uint64_t)v8, a3, type metadata accessor for ActiveLocationModel);
  }
}

void sub_100123330(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100123338(a1, *(void (**)(uint64_t))(v2 + 16), a2);
}

void sub_100123338(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;

  v6 = sub_1000BA294(&qword_100BC4630);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  v9 = type metadata accessor for LocationViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021A14((uint64_t)v8, &qword_100BC4630);
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v10._countAndFlagsBits = 0xD000000000000050;
    v10._object = (void *)0x80000001009F1280;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0x6E6F697461636F4CLL;
    v11._object = (void *)0xED00007475706E49;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 8236;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001009F15D0;
    v13._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "Weather/Selector.swift", 22, 2);
    __break(1u);
  }
  else
  {
    sub_10007802C((uint64_t)v8, a3, type metadata accessor for LocationViewModel);
  }
}

uint64_t sub_1001234D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001234DC(a1, *(void (**)(uint64_t))(v2 + 16), a2);
}

uint64_t sub_1001234DC@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;

  v6 = sub_1000BA294(&qword_100BC4678);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  v9 = type metadata accessor for WeatherConditionBackgroundModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a3, v8, v9);
  sub_100021A14((uint64_t)v8, &qword_100BC4678);
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(87);
  v11._countAndFlagsBits = 0xD000000000000050;
  v11._object = (void *)0x80000001009F1280;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xD00000000000002BLL;
  v12._object = (void *)0x80000001009F15F0;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._object = (void *)0x80000001009F1620;
  v14._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 46;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v16, v17, "Weather/Selector.swift", 22, 2);
  __break(1u);
  return result;
}

uint64_t sub_100123678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for Resolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Resolved);
}

void sub_10012368C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[12];

  v8[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[1] = "(";
  v8[2] = "(";
  v8[3] = "(";
  sub_100158D70(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v8[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158BE8(319, qword_100C09D50, &qword_100C04B78);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158BE8(319, (unint64_t *)&qword_100BC5C88, &qword_100BC5A68);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = "\t";
        v8[8] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[9] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[10] = (char *)&value witness table for Builtin.NativeObject + 64;
        v8[11] = "(";
        swift_initStructMetadata(a1, 256, 12, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1001237A0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, __int128 *a10)
{
  int *v17;
  char *v18;

  *a9 = a1;
  sub_10003C800(a2, (uint64_t)(a9 + 1));
  sub_10003C800(a3, (uint64_t)(a9 + 6));
  sub_10003C800(a4, (uint64_t)(a9 + 11));
  v17 = (int *)sub_1000D206C();
  sub_1000787D4(a5, (uint64_t)a9 + v17[8], (uint64_t *)&unk_100C09CA0);
  sub_1000787D4(a6, (uint64_t)a9 + v17[9], &qword_100C04B70);
  sub_1000787D4(a7, (uint64_t)a9 + v17[10], (uint64_t *)&unk_100C09CB0);
  v18 = (char *)a9 + v17[11];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1009CE330);
  v18[8] = 0;
  *(_QWORD *)((char *)a9 + v17[12]) = 0;
  *(_QWORD *)((char *)a9 + v17[13]) = 0;
  *(_QWORD *)((char *)a9 + v17[14]) = a8;
  return sub_10003C800(a10, (uint64_t)a9 + v17[15]);
}

uint64_t sub_1001238B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC220C, 1);
}

unint64_t sub_1001238C0()
{
  unint64_t result;

  result = qword_100BDE500;
  if (!qword_100BDE500)
  {
    result = swift_getWitnessTable(&unk_10099BB7C, &unk_100B71590);
    atomic_store(result, (unint64_t *)&qword_100BDE500);
  }
  return result;
}

unint64_t sub_1001238FC()
{
  unint64_t result;

  result = qword_100BDE530;
  if (!qword_100BDE530)
  {
    result = swift_getWitnessTable(&unk_10099BBB4, &unk_100B71590);
    atomic_store(result, (unint64_t *)&qword_100BDE530);
  }
  return result;
}

void sub_100123938(uint64_t a1)
{
  sub_1000BC0F8(a1, (uint64_t)&unk_100CAE828, (uint64_t)&unk_100B71590);
}

uint64_t sub_10012394C()
{
  return sub_10005EFBC();
}

uint64_t sub_100123954()
{
  return sub_10005EFBC();
}

void sub_10012395C(uint64_t a1)
{
  sub_1000BAB08(a1, (uint64_t)&unk_100CAE840, (uint64_t)&unk_100B71590);
}

void sub_100123970()
{
  sub_10001F5A4();
}

void sub_10012398C()
{
  sub_100013BE4();
}

uint64_t storeEnumTagSinglePayload for TipView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A6FA0);
}

uint64_t getEnumTagSinglePayload for TipView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A6F44);
}

void sub_1001239B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100999A58;
  v4[1] = &unk_100999A70;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for TipView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BDD260, (uint64_t)&nominal type descriptor for TipView);
}

unint64_t sub_100123A60()
{
  unint64_t result;

  result = qword_100BDE4E8;
  if (!qword_100BDE4E8)
  {
    result = swift_getWitnessTable(&unk_10099B9B4, &unk_100B71658);
    atomic_store(result, (unint64_t *)&qword_100BDE4E8);
  }
  return result;
}

unint64_t sub_100123A9C()
{
  unint64_t result;

  result = qword_100BDE548;
  if (!qword_100BDE548)
  {
    result = swift_getWitnessTable(&unk_10099B9EC, &unk_100B71658);
    atomic_store(result, (unint64_t *)&qword_100BDE548);
  }
  return result;
}

void sub_100123AD8(uint64_t a1)
{
  sub_1000BC0F8(a1, (uint64_t)&unk_100CAE780, (uint64_t)&unk_100B71658);
}

void sub_100123AEC(uint64_t a1)
{
  sub_1000BAB08(a1, (uint64_t)&unk_100CAE798, (uint64_t)&unk_100B71658);
}

void sub_100123B00()
{
  sub_10001D67C();
}

uint64_t sub_100123B1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = swift_getWitnessTable(&unk_1009DEE24, a2);
  result = swift_getWitnessTable(&unk_1009DEE5C, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100123B60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Published(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 5, v4, a1 + 104);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100123BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Event);
}

void sub_100123C10(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_100123C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED508;
  if (!qword_100BED508)
  {
    v1 = sub_100075EB0(&qword_100BED500);
    result = swift_getWitnessTable(&unk_100998808, v1);
    atomic_store(result, (unint64_t *)&qword_100BED508);
  }
  return result;
}

uint64_t sub_100123C5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FeatureFlagSensitiveNextHourPrecipitationLeadingValueRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureFlagSensitiveNextHourPrecipitationLeadingValueRule);
}

uint64_t sub_100123CD8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

uint64_t sub_100123CE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v5, a1 + 48);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100123D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_100123D74()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v0, "setDoesRelativeDateFormatting:", 1);
  objc_msgSend(v0, "setTimeStyle:", 1);

  qword_100BD6F88 = (uint64_t)v0;
}

ValueMetadata *type metadata accessor for NeedsVisibilityDetectionComputationPreferenceKey()
{
  return &type metadata for NeedsVisibilityDetectionComputationPreferenceKey;
}

double sub_100123DF0()
{
  double result;

  result = 0.0;
  xmmword_100BE1EC8 = 0u;
  unk_100BE1ED8 = 0u;
  return result;
}

uint64_t type metadata accessor for NextHourPrecipitationComponentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather46NextHourPrecipitationComponentViewModelFactory);
}

ValueMetadata *type metadata accessor for InvertedColorSchemeStatusBarCorrectionModifier()
{
  return &type metadata for InvertedColorSchemeStatusBarCorrectionModifier;
}

void sub_100123E34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100014A48(a1, *(_BYTE *)v2, *(_QWORD *)(v2 + 8), a2);
}

uint64_t sub_100123E40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABCB48, 1);
}

unint64_t sub_100123E50()
{
  unint64_t result;

  result = qword_100C05938;
  if (!qword_100C05938)
  {
    result = swift_getWitnessTable(&unk_1009D27C0, &type metadata for AccessibilityImageDescriptionDisabledModifier);
    atomic_store(result, (unint64_t *)&qword_100C05938);
  }
  return result;
}

uint64_t sub_100123E8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000413BC(*v1, v1[1], a1);
}

uint64_t sub_100123E94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC3A5C, 1);
}

uint64_t sub_100123EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100016884(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t type metadata accessor for RemotelyConfiguredSlowLocationLoadingMonitor()
{
  return objc_opt_self(_TtC7Weather44RemotelyConfiguredSlowLocationLoadingMonitor);
}

uint64_t sub_100123ECC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for WeatherDescription(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t *sub_100123F38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for WeatherDescription(0);
  swift_bridgeObjectRetain(v4);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8))
  {
    v9 = sub_1000BA294(&qword_100BC3368);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

void sub_100123FF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10012218C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for DebugNotificationSubscriptionsViewController()
{
  return objc_opt_self(_TtC7Weather44DebugNotificationSubscriptionsViewController);
}

uint64_t type metadata accessor for NotificationsOptInComponentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather43NotificationsOptInComponentViewModelFactory);
}

ValueMetadata *type metadata accessor for FullscreenMapPresentationSourceViewModifier()
{
  return &type metadata for FullscreenMapPresentationSourceViewModifier;
}

unint64_t sub_1001240BC()
{
  unint64_t result;

  result = qword_100BEE6A0;
  if (!qword_100BEE6A0)
  {
    result = swift_getWitnessTable(&unk_100991A3C, &type metadata for FullscreenMapPresentationSourceViewModifier);
    atomic_store(result, (unint64_t *)&qword_100BEE6A0);
  }
  return result;
}

double sub_1001240F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100124118(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_100124108(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAFC24, 1);
}

double sub_100124118@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v11 = a5 & 1;
  sub_10008D47C(a4, a5 & 1);
  sub_10011567C();
  v13 = v12;
  sub_1000B15F8(a4, v11);
  v14 = sub_1000BA294(&qword_100BD3C18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a6, a1, v14);
  v15 = a6 + *(int *)(sub_1000BA294(&qword_100BD3C20) + 36);
  *(_BYTE *)v15 = (v13 & 0xC0) == 64;
  *(_QWORD *)(v15 + 8) = a2;
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)&result = swift_bridgeObjectRetain(a3).n128_u64[0];
  return result;
}

void sub_1001241D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_1009AB690;
  sub_100158C7C(319, (unint64_t *)&qword_100BCD708, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158C7C(319, (unint64_t *)&unk_100BEE658, type metadata accessor for ContentStatusBannerPresentationMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_10012429C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB89AC, 1);
}

void sub_1001242AC()
{
  uint64_t v0;

  sub_1001242C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1001242C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v10 - v7;
  sub_100080C0C(a2, (uint64_t)&v10 - v7, type metadata accessor for ContentStatusBannerPresentationMetrics);
  type metadata accessor for ContentStatusBannerPresentationViewModifier(0);
  sub_100080C0C((uint64_t)v8, (uint64_t)v6, type metadata accessor for ContentStatusBannerPresentationMetrics);
  v9 = sub_1000BA294(&qword_100BEE5E8);
  State.wrappedValue.setter(v6, v9);
  sub_1000BF3B4();
}

uint64_t sub_1001243AC()
{
  uint64_t v0;
  double *v1;
  uint64_t v2;

  v0 = sub_1000BDD30();
  type metadata accessor for ContentStatusBannerPresentationViewModifier(v0);
  v1 = (double *)sub_10009DACC();
  return sub_10000C2E4(v1, v2);
}

uint64_t type metadata accessor for AlternativeLocationViewConfigurationFactory()
{
  return objc_opt_self(_TtC7Weather43AlternativeLocationViewConfigurationFactory);
}

uint64_t type metadata accessor for StandardLocationViewConfigurationFactory()
{
  return objc_opt_self(_TtC7Weather40StandardLocationViewConfigurationFactory);
}

unint64_t sub_100124410()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C12AD0;
  if (!qword_100C12AD0)
  {
    v1 = type metadata accessor for StandardLocationViewConfigurationFactory();
    result = swift_getWitnessTable(&unk_1009D785C, v1);
    atomic_store(result, (unint64_t *)&qword_100C12AD0);
  }
  return result;
}

uint64_t sub_10012444C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WeatherData(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[3] = &unk_1009D0F20;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NextHourPrecipitationComponentParameters(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0B9F8;
  if (!qword_100C0B9F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NextHourPrecipitationComponentParameters);
  return result;
}

uint64_t sub_100124520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044B35C);
}

uint64_t sub_10012452C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10044B2B8);
}

void sub_100124538(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[11];

  sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_1009A00D0;
    v10[2] = &unk_1009A00D0;
    v4 = type metadata accessor for LocationComponentViewModel(319);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      v10[4] = &unk_1009A00D0;
      sub_100158B48(319, (unint64_t *)&unk_100BE24F8, type metadata accessor for LocationComponentHeaderMetrics);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v10[6] = &unk_1009A0058;
        v8 = type metadata accessor for Location.Identifier(319);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          v10[8] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[9] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[10] = "!";
          swift_initStructMetadata(a1, 256, 11, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100124650(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB50EC, 1);
}

uint64_t sub_100124660(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009CB778;
  result = type metadata accessor for NextHourPrecipitationChartViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1001246D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v8 = sub_1000BA294(&qword_100BC3368);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WeatherDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for HourlyForecastComponent(0);
  if (*(_BYTE *)(a1 + *(int *)(v15 + 36)) == 1 && (*(_BYTE *)(a1 + *(int *)(v15 + 40)) & 1) == 0)
  {
    v16 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
    sub_10003773C(a2 + *(int *)(v16 + 20), (uint64_t)v10, &qword_100BC3368);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11) != 1)
    {
      v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v21(v14, v10, v11);
      v21((char *)a4, v14, v11);
      v22 = type metadata accessor for LocationComponentHeaderViewModel.Description(0);
      v23 = a4 + *(int *)(v22 + 20);
      v24 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v23 = *(_OWORD *)a3;
      *(_OWORD *)(v23 + 16) = v24;
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v23 + 48) = *(_QWORD *)(a3 + 48);
      *(_BYTE *)(a4 + *(int *)(v22 + 24)) = 1;
      v17 = 3;
      goto LABEL_6;
    }
    sub_100021A14((uint64_t)v10, &qword_100BC3368);
  }
  v17 = 0;
  v18 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 16) = v18;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(a3 + 48);
LABEL_6:
  v19 = type metadata accessor for LocationComponentHeaderViewModel(0);
  swift_storeEnumTagMultiPayload(a4, v19, v17);
  return sub_100126910((_QWORD *)a3);
}

ValueMetadata *type metadata accessor for DailyComponentForecastRowBackgroundView()
{
  return &type metadata for DailyComponentForecastRowBackgroundView;
}

uint64_t sub_1001248A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AACB54, 1);
}

uint64_t sub_1001248B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for SunriseSunsetEventCalculator(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SunriseSunsetComponentViewModelFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD1158;
  if (!qword_100BD1158)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunriseSunsetComponentViewModelFactory);
  return result;
}

double sub_10012495C(uint64_t a1, int *a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1001249D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100124A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100124A54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PressureTrend(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100991FE8;
    v4[2] = &unk_100991FE8;
    v4[3] = &unk_100991FE8;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100991FE8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *assignWithCopy for LocationViewerViewVFXEnvironment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_10000F52C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_100037094, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000BF398);
}

ValueMetadata *type metadata accessor for LocationViewerViewCollisionEnvironment()
{
  return &type metadata for LocationViewerViewCollisionEnvironment;
}

unint64_t sub_100124AFC()
{
  unint64_t result;

  result = qword_100BED8E0;
  if (!qword_100BED8E0)
  {
    result = swift_getWitnessTable(&unk_1009AC280, &type metadata for LocationViewerViewCollisionEnvironment);
    atomic_store(result, (unint64_t *)&qword_100BED8E0);
  }
  return result;
}

uint64_t sub_100124B38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100124B54(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_100124B44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB87B4, 1);
}

uint64_t sub_100124B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;

  v9 = a4 & 1;
  v10 = type metadata accessor for LocationViewCollisionOptions(0);
  sub_10007A100((uint64_t)&qword_100BCCB38);
  v12 = v11;
  v13 = StateObject.wrappedValue.getter(a2, a3, v9, v10, v11);
  v14 = static ObservableObject.environmentStore.getter(v10, v12);
  v15 = sub_1000BA294(&qword_100BEE268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a5, a1, v15);
  result = sub_1000BA294(&qword_100BEE270);
  v17 = (uint64_t *)(a5 + *(int *)(result + 36));
  *v17 = v14;
  v17[1] = v13;
  return result;
}

void sub_100124C30()
{
  sub_100534434(type metadata accessor for LocationViewCollisionOptions, (void (*)(void))sub_10012AAD4);
}

ValueMetadata *type metadata accessor for InteractiveMapColorSchemePreferenceKey()
{
  return &type metadata for InteractiveMapColorSchemePreferenceKey;
}

uint64_t sub_100124C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000BA294((uint64_t *)&unk_100C09DB0);
  sub_10004037C(v0, qword_100CAF580);
  v1 = sub_1000AECD4(v0, (uint64_t)qword_100CAF580);
  v2 = type metadata accessor for ColorScheme(0);
  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v2);
}

ValueMetadata *type metadata accessor for FullscreenMapPresentationPreferenceKey()
{
  return &type metadata for FullscreenMapPresentationPreferenceKey;
}

double sub_100124CC8@<D0>(uint64_t a1@<X8>)
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = sub_100124CF8();
  v3 = *v2;
  v5 = *((_QWORD *)v2 + 1);
  v4 = *((_QWORD *)v2 + 2);
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

char *sub_100124CF8()
{
  return &byte_100BD3AE8;
}

void sub_100124D04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v2 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158B94(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      v8[3] = "\t";
      v8[4] = (char *)&value witness table for () + 64;
      v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[6] = &unk_1009A14E0;
      v8[7] = &unk_1009A14F8;
      sub_100154330(319);
      if (v7 <= 0x3F)
      {
        v8[8] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_100124DE0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  size_t v10;
  void *v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = (uint64_t)a1 + v4;
  v6 = (uint64_t)a2 + v4;
  v7 = type metadata accessor for ContentStatusBanner(0);
  v8 = _s7Weather24LocationCompositionStateOwet_0(v5, 1, v7);
  v9 = _s7Weather24LocationCompositionStateOwet_0(v6, 1, v7);
  if (v8)
  {
    if (!v9)
    {
      *(_BYTE *)v5 = *(_BYTE *)v6;
      if (*(_QWORD *)(v6 + 16) >= 2uLL)
      {
        *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
        v16 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v5 + 16) = v16;
        swift_bridgeObjectRetain(v16);
      }
      else
      {
        *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
      }
      v17 = *(int *)(v7 + 24);
      v18 = (void *)(v5 + v17);
      v19 = (const void *)(v6 + v17);
      v20 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20))
      {
        v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v20);
      }
      v22 = v5;
      v23 = v7;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v9)
  {
    sub_1000BF3B4();
LABEL_7:
    v10 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v11 = (void *)v5;
    v12 = (const void *)v6;
    goto LABEL_8;
  }
  *(_BYTE *)v5 = *(_BYTE *)v6;
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v6 + 16);
  if (v13 >= 2)
  {
    if (v14 >= 2)
    {
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
      v25 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v5 + 16) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v13);
      goto LABEL_23;
    }
    sub_1001A27B4(v5 + 8);
    goto LABEL_21;
  }
  if (v14 < 2)
  {
LABEL_21:
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
    goto LABEL_23;
  }
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
  v15 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v5 + 16) = v15;
  swift_bridgeObjectRetain(v15);
LABEL_23:
  v26 = *(int *)(v7 + 24);
  v27 = v5 + v26;
  v28 = v6 + v26;
  v29 = type metadata accessor for Date(0);
  v30 = _s7Weather24LocationCompositionStateOwet_0(v27, 1, v29);
  v31 = _s7Weather24LocationCompositionStateOwet_0(v28, 1, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      v22 = v27;
      v23 = v29;
LABEL_17:
      _s7Weather24LocationCompositionStateOwst_0(v22, 0, 1, v23);
      return a1;
    }
  }
  else
  {
    v32 = *(_QWORD *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 24))(v27, v28, v29);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v27, v29);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v11 = (void *)v27;
  v12 = (const void *)v28;
LABEL_8:
  memcpy(v11, v12, v10);
  return a1;
}

void sub_1001250A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009ABD38;
  sub_100158C7C(319, (unint64_t *)&qword_100BC4B10, type metadata accessor for ContentStatusBanner, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100125134(uint64_t a1)
{
  sub_10053445C(a1, qword_100BED580);
}

void sub_100125140(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1001594F0();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

double sub_1001251C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10012520C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100125274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001252B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for WeatherDescription(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10098AE58;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NextHourPrecipitationLeadingValueRule()
{
  return &type metadata for NextHourPrecipitationLeadingValueRule;
}

uint64_t sub_100125338(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1009A00D0;
  v4[1] = &unk_1009A00D0;
  result = type metadata accessor for LocationComponentContainerViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1009A0028;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = &unk_1009A0028;
    v4[6] = "!";
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001253D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB504C, 1);
}

uint64_t sub_1001253E4()
{
  return sub_100455B58(type metadata accessor for DailyForecastComponentViewModel);
}

uint64_t sub_1001253F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v22;

  v6 = type metadata accessor for DailyForecastComponentViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1, (uint64_t)v8, v9);
  v10 = type metadata accessor for LocationComponentContainerContentView(0);
  v11 = *(int *)(v10 + 32);
  v12 = (uint64_t *)(a2 + *(int *)(v10 + 28));
  v14 = *v12;
  v13 = v12[1];
  v15 = *(_QWORD *)(a2 + v11);
  v16 = *(_QWORD *)(a2 + v11 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  LOBYTE(a2) = *(_BYTE *)(a2 + 24);
  swift_unknownObjectRetain(*v12);
  swift_retain();
  sub_10008D47C(v17, a2);
  sub_100109B54();
  v19 = v18;
  sub_1000B15F8(v17, a2);
  if ((v19 & 1) != 0)
  {
    if (qword_100BC1EB0 != -1)
      swift_once(&qword_100BC1EB0, sub_1002425A4);
    v20 = &qword_100CAE530;
  }
  else
  {
    if (qword_100BC1EB8 != -1)
      swift_once(&qword_100BC1EB8, sub_100129188);
    v20 = &qword_100CAE538;
  }
  return sub_1003BD788((uint64_t)v8, v14, v13, v15, v16, a3, *(double *)v20);
}

void sub_10012556C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100125574(*(_QWORD *)(v1 + 16), a1);
}

void sub_100125574(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;

  v4 = sub_1000BA294(&qword_100BCD380);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = swift_getKeyPath(&unk_1009A0A28);
  v7 = sub_1000BA294(&qword_100BC68C8);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = swift_getKeyPath(&unk_10099FD38);
  *(_BYTE *)(a2 + 16) = 0;
  v8 = type metadata accessor for HourlyForecastComponentView(0);
  v9 = swift_bridgeObjectRetain(a1);
  Text.Measurements.init()(v9);
  sub_1001A7244((uint64_t)v6, a2 + *(int *)(v8 + 28), &qword_100BCD380);
}

void sub_100125664()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_10004A298();
}

uint64_t type metadata accessor for CellularRadioAccessTechnologyProvider()
{
  return objc_opt_self(_TtC7Weather37CellularRadioAccessTechnologyProvider);
}

void sub_1001256A0()
{
  sub_10001EF38();
}

uint64_t type metadata accessor for SevereAlertComponentViewModelFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100C06310;
  if (!qword_100C06310)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SevereAlertComponentViewModelFactory);
  return result;
}

uint64_t sub_1001256F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (sub_100099264(v4, v5, *a2, v6), result = sub_10007A150(), (v9 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14 || (sub_100099264(v10, v11, v12, v13), result = sub_10007A150(), (v15 & 1) != 0))
    {
      v16 = a1[4];
      v17 = a1[5];
      v18 = a2[4];
      v19 = a2[5];
      v20 = v16 == v18 && v17 == v19;
      if (v20 || (sub_100099264(v16, v17, v18, v19), result = sub_10007A150(), (v21 & 1) != 0))
      {
        v22 = a1[6];
        v23 = a1[7];
        v24 = a2[6];
        v25 = a2[7];
        v26 = v22 == v24 && v23 == v25;
        if (v26 || (sub_100099264(v22, v23, v24, v25), result = sub_10007A150(), (v27 & 1) != 0))
        {
          v28 = a1[8];
          v29 = a1[9];
          v30 = a2[8];
          v31 = a2[9];
          v32 = v28 == v30 && v29 == v31;
          if (v32 || (sub_100099264(v28, v29, v30, v31), result = sub_10007A150(), (v33 & 1) != 0))
          {
            v34 = a1[10];
            v35 = a1[11];
            v36 = a2[10];
            v37 = a2[11];
            if (v34 == v36 && v35 == v37)
              return 1;
            else
              return _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v36, v37, 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001257E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100988CB8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NotificationSettingsViewStateReducer()
{
  return objc_opt_self(_TtC7Weather36NotificationSettingsViewStateReducer);
}

uint64_t type metadata accessor for NotificationSettingsViewModelFactory()
{
  return objc_opt_self(_TtC7Weather36NotificationSettingsViewModelFactory);
}

uint64_t sub_100125894(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "!";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NewsArticleComponentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather36NewsArticleComponentViewModelFactory);
}

void sub_100125924(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[6];

  v7[0] = &unk_10098B918;
  sub_10015BC08(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[1] = v4;
    v7[2] = &unk_10098B918;
    v5 = type metadata accessor for URL(319);
    if (v6 <= 0x3F)
    {
      v7[3] = *(_QWORD *)(v5 - 8) + 64;
      v7[4] = v4;
      v7[5] = &unk_10098B930;
      swift_initStructMetadata(a1, 256, 6, v7, a1 + 16);
    }
  }
}

uint64_t type metadata accessor for NewsArticleComponentContentViewModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCE9D0, (uint64_t)&nominal type descriptor for NewsArticleComponentContentViewModel);
}

uint64_t sub_1001259DC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MainViewFullscreenMapOverlayModifier(a2, a1);
  return a2;
}

unint64_t sub_100125A10()
{
  unint64_t result;

  result = qword_100C09E90;
  if (!qword_100C09E90)
  {
    result = swift_getWitnessTable(&unk_1009918A8, &type metadata for MainViewFullscreenMapOverlayModifier);
    atomic_store(result, (unint64_t *)&qword_100C09E90);
  }
  return result;
}

uint64_t sub_100125A50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAFB64, 1);
}

void sub_100125A60()
{
  uint64_t (*v0)@<X0>(char *@<X0>, uint64_t@<X8>);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)@<X0>(char *@<X0>, uint64_t@<X8>);
  uint64_t (*v16)@<X0>(char *@<X0>, uint64_t@<X8>);
  uint64_t v17;
  uint64_t (**v18)@<X0>(char *@<X0>, uint64_t@<X8>);
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v2 = sub_100098B88();
  sub_1001259DC(v2, v3);
  v4 = (_OWORD *)swift_allocObject(&unk_100B6AC50, 65, 7);
  sub_1000C5C78(v4, v5, v6, v7, v8, v9, v10, v11, v19, v20, v21, v12);
  *(_BYTE *)(v13 + 64) = v22;
  v14 = static Alignment.center.getter(v13);
  v16 = v15;
  v17 = sub_1000BA294(&qword_100BD3B00);
  sub_1000CCA7C(v17);
  v18 = (uint64_t (**)@<X0>(char *@<X0>, uint64_t@<X8>))(v1 + *(int *)(sub_1000BA294(&qword_100BD3B08) + 36));
  *v18 = sub_1002BFB34;
  v18[1] = v0;
  v18[2] = (uint64_t (*)@<X0>(char *@<X0>, uint64_t@<X8>))v14;
  v18[3] = v16;
  sub_1000C013C();
}

ValueMetadata *type metadata accessor for LocationHeaderViewGradientBackground()
{
  return &type metadata for LocationHeaderViewGradientBackground;
}

double sub_100125AF8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012994(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t sub_100125B04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA9524, 1);
}

uint64_t type metadata accessor for SunriseSunsetDetailViewStateReducer()
{
  return objc_opt_self(_TtC7Weather35SunriseSunsetDetailViewStateReducer);
}

uint64_t type metadata accessor for NextHourPrecipitationDetailAssembly()
{
  return objc_opt_self(_TtC7Weather35NextHourPrecipitationDetailAssembly);
}

double sub_100125B54()
{
  return sub_100006F44();
}

uint64_t sub_100125B68(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 != *a2 || v5 != v6)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
    result = 0;
    if ((v8 & 1) == 0)
      return result;
  }
  v10 = a1[3];
  v11 = a2[3];
  if (!v10)
  {
    if (!v11)
    {
LABEL_16:
      v16 = a1[4];
      v17 = a1[5];
      v18 = a2[4];
      v19 = a2[5];
      if (v16 == v18 && v17 == v19)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
    }
    return 0;
  }
  if (!v11)
    return 0;
  v12 = a1[2];
  v13 = a2[2];
  if (v12 == v13 && v10 == v11)
    goto LABEL_16;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0);
  result = 0;
  if ((v15 & 1) != 0)
    goto LABEL_16;
  return result;
}

void sub_100125C24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for LocationComponentHeaderViewModel(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for LocationComponentViewModel(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1009D7B18;
      sub_100133620(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_100125CCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C12E40;
  if (!qword_100C12E40)
  {
    v1 = type metadata accessor for AirQualityComponentViewModelFactory();
    result = swift_getWitnessTable(&unk_1009D7C24, v1);
    atomic_store(result, (unint64_t *)&qword_100C12E40);
  }
  return result;
}

uint64_t type metadata accessor for UnitsConfigurationViewStateReducer()
{
  return objc_opt_self(_TtC7Weather34UnitsConfigurationViewStateReducer);
}

uint64_t type metadata accessor for NotificationsOptInViewStateReducer()
{
  return objc_opt_self(_TtC7Weather34NotificationsOptInViewStateReducer);
}

uint64_t type metadata accessor for NotificationsOptInViewModelFactory()
{
  return objc_opt_self(_TtC7Weather34NotificationsOptInViewModelFactory);
}

void sub_100125D68(uint64_t a1)
{
  uint64_t HourPrecipitationComponentViewModel;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  HourPrecipitationComponentViewModel = type metadata accessor for NextHourPrecipitationComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(HourPrecipitationComponentViewModel - 8) + 64;
    v6[1] = "\t";
    v6[2] = "\t";
    sub_10015892C(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for LocationHeaderViewBackgroundLayout()
{
  return &type metadata for LocationHeaderViewBackgroundLayout;
}

unint64_t sub_100125E08()
{
  unint64_t result;

  result = qword_100BC42C0;
  if (!qword_100BC42C0)
  {
    result = swift_getWitnessTable(&unk_10097E954, &type metadata for LocationHeaderViewBackgroundLayout);
    atomic_store(result, (unint64_t *)&qword_100BC42C0);
  }
  return result;
}

uint64_t sub_100125E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100125E78(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100125E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_100125EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100125E78(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

void sub_100125EE0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  sub_10001BFE8(a1, a2, a3, a4);
}

double sub_100125EF8(uint64_t a1, char a2)
{
  return sub_100125F18(a1, a2 & 1);
}

double sub_100125F18(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    result = 10.0;
  if (result > 256.0)
    return 256.0;
  return result;
}

uint64_t sub_100125F58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for WeatherNetworkActivity.Label(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = "\b";
    v4[6] = "\b";
    v4[7] = &unk_1009D1CC0;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for InteractiveMapNetworkActivityFlow(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0C808;
  if (!qword_100C0C808)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InteractiveMapNetworkActivityFlow);
  return result;
}

_QWORD *sub_100126024(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v46 = *v1;
  sub_1000BA294(&qword_100C0A988);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v45 = v5;
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - v10;
  v12 = sub_1000C591C();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000C4D1C(v14, v44);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - v19;
  type metadata accessor for UnfairLock.Options(0);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100098728();
  v24 = v23 - v22;
  v25 = OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_lock;
  static UnfairLock.Options.dataSynchronization.getter(v26);
  v27 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = UnfairLock.init(options:)(v24);
  v47 = v25;
  *(_QWORD *)((char *)v2 + v25) = v28;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_rootActivity) = 0;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_tilesActivity) = 0;
  v29 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_locationId);
  *v29 = 0;
  v29[1] = 0;
  sub_10015B810();
  sub_1000B4744((uint64_t)v11);
  if (v31)
  {
    v30 = v13;
  }
  else
  {
    sub_1000C2440((uint64_t)v20, (uint64_t)v11);
    sub_10015B90C();
    sub_1000B4744((uint64_t)v8);
    if (v31)
    {
      v30 = v13;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
    }
    else
    {
      sub_1000C2440((uint64_t)v17, (uint64_t)v8);
      v8 = v45;
      sub_10015B93C();
      sub_1000B4744((uint64_t)v8);
      if (!v32)
      {
        v43 = v44;
        sub_1000C2440(v44, (uint64_t)v8);
        sub_1000C2440((uint64_t)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_label, a1);
        sub_1000C2440((uint64_t)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_metadataLabel, (uint64_t)v20);
        sub_1000C2440((uint64_t)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_tilesLabel, (uint64_t)v17);
        sub_1000C2440((uint64_t)v2 + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_overlayTileLabel, v43);
        return v2;
      }
      v33 = *(void (**)(char *, uint64_t))(v13 + 8);
      v34 = v17;
      v30 = v13;
      v33(v34, v12);
      v33(v20, v12);
    }
    v11 = v8;
  }
  v35 = v46;
  sub_1007FBB64((uint64_t)v11);
  if (qword_100BC2468 != -1)
    swift_once(&qword_100BC2468, sub_100159724);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_1000AECD4(v36, (uint64_t)qword_100CAF120);
  v38 = Logger.logObject.getter(v37);
  v40 = static os_log_type_t.error.getter(v38, v39);
  if (os_log_type_enabled(v38, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v40, "InteractiveMapNetworkActivityFlow couldn't be created", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a1, v12);
  sub_1000D949C(v47);
  sub_1000D949C(OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_rootActivity);
  sub_1000D949C(OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_tilesActivity);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v2
                                      + OBJC_IVAR____TtC7Weather33InteractiveMapNetworkActivityFlow_locationId
                                      + 8));
  swift_deallocPartialClassInstance(v2, v35, *(unsigned int *)(*v2 + 48), *(unsigned __int16 *)(*v2 + 52));
  return 0;
}

uint64_t type metadata accessor for HumidityComponentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather33HumidityComponentViewModelFactory);
}

uint64_t sub_1001263F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ForegroundEffectConfigurationView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100126438(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for LocationViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009C0D38;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001264AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABE3AC, 1);
}

double sub_1001264BC@<D0>(_QWORD *a1@<X8>)
{
  double result;

  CompressedLocationHeaderHeightKey.defaultValue.unsafeMutableAddressor();
  result = *(double *)&static CompressedLocationHeaderHeightKey.defaultValue;
  *a1 = static CompressedLocationHeaderHeightKey.defaultValue;
  return result;
}

void sub_1001264E8()
{
  static CompressedLocationHeaderHeightKey.defaultValue = 0;
}

uint64_t *CompressedLocationHeaderHeightKey.defaultValue.unsafeMutableAddressor()
{
  if (qword_100BC1E60 != -1)
    swift_once(&qword_100BC1E60, sub_1001264E8);
  return &static CompressedLocationHeaderHeightKey.defaultValue;
}

uint64_t type metadata accessor for NotificationAuthorizationMonitor()
{
  return objc_opt_self(_TtC7Weather32NotificationAuthorizationMonitor);
}

unint64_t sub_100126554()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF93C0;
  if (!qword_100BF93C0)
  {
    v1 = type metadata accessor for NotificationAuthorizationMonitor();
    result = swift_getWitnessTable(&unk_1009B9DAC, v1);
    atomic_store(result, (unint64_t *)&qword_100BF93C0);
  }
  return result;
}

void sub_100126590()
{
  unint64_t v0;

  v0 = sub_1000BC7BC();
  sub_1000BB290(v0);
  sub_10004A2A0();
}

double sub_1001265B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  double result;

  v6 = swift_allocObject(&unk_100B85F80, 33, 7);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = a2;
  a3 &= 1u;
  *(_BYTE *)(v6 + 32) = a3;
  swift_retain();
  sub_1001599D0(a2, a3);
  asyncMain(block:)(sub_100634A98, v6);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_100126628()
{
  sub_100126590();
}

void sub_100126644(Swift::OpaquePointer_optional a1)
{
  _QWORD *v1;

  *(_QWORD *)&a1.is_nil = *v1;
  ApplicationStateMonitor.applicationDidFinishLaunching(withOptions:)(a1);
}

uint64_t sub_10012664C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 72) = 4;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  sub_10003C800(a3, v3 + 32);
  return v3;
}

double sub_100126678(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001265B4(a1, a2, a3 & 1);
}

unint64_t sub_100126680()
{
  unint64_t result;

  result = qword_100C09E98;
  if (!qword_100C09E98)
  {
    result = swift_getWitnessTable(&unk_1009B5034, &type metadata for MainViewModelEnvironmentModifier);
    atomic_store(result, (unint64_t *)&qword_100C09E98);
  }
  return result;
}

void sub_1001266BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_10002A11C(a1, *v2, v2[1], a2);
}

uint64_t sub_1001266C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA828, 1);
}

ValueMetadata *type metadata accessor for LocationViewerViewVFXEnvironment()
{
  return &type metadata for LocationViewerViewVFXEnvironment;
}

unint64_t sub_1001266E4()
{
  unint64_t result;

  result = qword_100BED8F0;
  if (!qword_100BED8F0)
  {
    result = swift_getWitnessTable(&unk_1009AC230, &type metadata for LocationViewerViewVFXEnvironment);
    atomic_store(result, (unint64_t *)&qword_100BED8F0);
  }
  return result;
}

uint64_t sub_100126720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100019B2C(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_10012672C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB87DC, 1);
}

void sub_10012673C()
{
  sub_100534434((uint64_t (*)(_QWORD))&type metadata accessor for WeatherVFXConditionBackground, (void (*)(void))&WeatherVFXConditionBackground.init());
}

uint64_t type metadata accessor for LocationViewConfigurationFactory()
{
  return objc_opt_self(_TtC7Weather32LocationViewConfigurationFactory);
}

uint64_t sub_100126770(__int128 *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;

  sub_10003C800(a1, v3 + 16);
  sub_10003C800(a2, v3 + 56);
  sub_10003C800(a3, v3 + 96);
  return v3;
}

uint64_t sub_1001267BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t type metadata accessor for LocationViewConfigurationBuilder()
{
  return objc_opt_self(_TtC7Weather32LocationViewConfigurationBuilder);
}

uint64_t sub_100126800(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationComponentHeaderViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100126844(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "8";
  v4[1] = "Y";
  v4[2] = &unk_10098BE30;
  result = type metadata accessor for LocationComponentHeaderViewModel.Description(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = "8";
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v4);
    return 0;
  }
  return result;
}

_QWORD *sub_1001268C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[6];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

_QWORD *sub_100126910(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[3];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *sub_100126958(uint64_t *a1)
{
  sub_10000EE00(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

void type metadata accessor for LocationComponentHeaderViewModel.Regular()
{
  sub_100098884();
}

void sub_100126998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;

  sub_1000986AC();
  v1 = v0;
  v3 = v2;
  v4 = *v2;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = *((unsigned __int8 *)v3 + 32);
  v10 = v3[5];
  v9 = v3[6];
  v11 = *(_QWORD *)(v1 + 8);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = *(unsigned __int8 *)(v1 + 32);
  v16 = *(_QWORD *)(v1 + 40);
  v15 = *(_QWORD *)(v1 + 48);
  v17 = v4 == *(_QWORD *)v1 && v5 == v11;
  if (v17 || (sub_100099264(v4, v5, *(_QWORD *)v1, v11) & 1) != 0)
  {
    v18 = v6 == v12 && v7 == v13;
    if ((v18 || (sub_100099264(v6, v7, v12, v13) & 1) != 0)
      && ((v8 ^ v14) & 1) == 0
      && v9
      && v15
      && (v10 != v16 || v9 != v15))
    {
      sub_100099264(v10, v9, v16, v15);
    }
  }
  sub_100098640();
}

uint64_t sub_100126A60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationComponentHeaderViewModel.Description(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100126A9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for WeatherDescription(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "8";
    v4[2] = &unk_10098BDD0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InteractionDonationStoreObserver()
{
  return objc_opt_self(_TtC7Weather32InteractionDonationStoreObserver);
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel()
{
  return &type metadata for HourlyForecastComponentViewModel;
}

void *sub_100126B48()
{
  return &protocol witness table for String;
}

uint64_t sub_100126B54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    result = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100126BD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = &unk_1009ACF90;
  v6[2] = &unk_1009ACF68;
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[4] = &unk_1009ACFA8;
  result = type metadata accessor for Precipitation(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(result - 8) + 64;
    v6[6] = &unk_1009ACF68;
    v6[7] = &unk_1009ACF68;
    v6[8] = &unk_1009ACF68;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v6[9] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for TimeZone(319);
      if (v5 <= 0x3F)
      {
        v6[10] = *(_QWORD *)(result - 8) + 64;
        v6[11] = &unk_1009ACFA8;
        v6[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100126CC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimeZone(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[3] = &unk_1009ACF68;
      v5[4] = &unk_1009ACF68;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100126D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C11BC);
}

uint64_t sub_100126D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C11B8);
}

void sub_100126D74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100991978;
  v4[1] = &unk_100991990;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_1009919A8;
  sub_100158E04(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_1009919C0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for FullscreenMapTransitionContainer(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD3B68, (uint64_t)&nominal type descriptor for FullscreenMapTransitionContainer);
}

uint64_t sub_100126E28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAFBFC, 1);
}

uint64_t sub_100126E38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  char v91;

  v2 = v1;
  v4 = type metadata accessor for AccessibilityTraits(0);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for FullscreenMapView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BD3BD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BD3BD8);
  __chkstk_darwin(v13);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BD3BE0);
  __chkstk_darwin(v16);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000BA294(&qword_100BD3BE8);
  v20 = __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  if (*(_BYTE *)v2 != 1)
    return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v21);
  v77 = v13;
  v78 = v12;
  v79 = v16;
  v80 = (uint64_t)&v77 - v22;
  v81 = v23;
  v82 = v15;
  v84 = v21;
  v85 = a1;
  v24 = (char *)(v2 + *(int *)(type metadata accessor for FullscreenMapTransitionContainer(0) + 36));
  v25 = *v24;
  v26 = *((_QWORD *)v24 + 1);
  LOBYTE(v89) = *v24;
  v90 = v26;
  v27 = sub_1000BA294(&qword_100BD3BF0);
  v28 = State.wrappedValue.getter(v88, v27);
  v83 = v18;
  if (LOBYTE(v88[0]) == 4)
  {
    if (qword_100BC20C8 != -1)
      v28 = (_QWORD *)swift_once(&qword_100BC20C8, sub_1004174C8);
    v29 = &qword_100CAEB58;
  }
  else
  {
    if (qword_100BC20D0 != -1)
      v28 = (_QWORD *)swift_once(&qword_100BC20D0, sub_1004174D8);
    v29 = &qword_100CAEB60;
  }
  v31 = *v29;
  sub_100117228(v28);
  LOBYTE(v88[0]) = v25;
  v88[1] = v26;
  State.projectedValue.getter(v27);
  v32 = v89;
  v33 = v90;
  v34 = v91;
  sub_100043CA8(v2 + 24, (uint64_t)v9);
  v35 = &v9[v7[6]];
  *(_QWORD *)v35 = v32;
  *((_QWORD *)v35 + 1) = v33;
  v35[16] = v34;
  v36 = &v9[v7[7]];
  *(_QWORD *)v36 = swift_getKeyPath(&unk_100991B28);
  v37 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  swift_storeEnumTagMultiPayload(v36, v37, 0);
  v38 = &v9[v7[8]];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_100991B58);
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_OWORD *)(v38 + 33) = 0u;
  v39 = sub_1000BA294(&qword_100BD3BF8);
  v40 = v86;
  v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72), *(unsigned __int8 *)(v86 + 80) | 7);
  *(_OWORD *)(v41 + 16) = xmmword_10097CA50;
  static AccessibilityTraits.isModal.getter();
  v89 = v41;
  sub_10007A100((uint64_t)&unk_100C0A5F0);
  v43 = v42;
  v44 = sub_1000BA294(&qword_100BD3C00);
  sub_10007AB60((uint64_t)&qword_100C0A600);
  v45 = v44;
  v46 = v87;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v45, v47, v87, v43);
  sub_10007A100((uint64_t)&unk_100BD3C08);
  v48 = (uint64_t)v78;
  View.accessibilityAddTraits(_:)(v6, v7, v49);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v46);
  sub_1000215BC((uint64_t)v9, type metadata accessor for FullscreenMapView);
  v50 = sub_1002C0A9C();
  if (qword_100BC20D8 != -1)
    swift_once(&qword_100BC20D8, sub_1004174E8);
  v89 = v31;
  v88[0] = qword_100CAEB68;
  v51 = sub_1002C2BC4();
  v52 = static AnyTransition.modifier<A>(active:identity:)(&v89, v88, &type metadata for InteractiveMapTransitionModifier, v51);
  v53 = AnyTransition.combined(with:)(v52, v50);
  swift_release(v50);
  swift_release(v52);
  v54 = (uint64_t)v82;
  sub_100037768(v48, (uint64_t)v82, &qword_100BD3BD0);
  *(_QWORD *)(v54 + *(int *)(v77 + 36)) = v53;
  sub_100021A14(v48, &qword_100BD3BD0);
  v56 = *(_QWORD *)(v2 + 8);
  v55 = *(_QWORD *)(v2 + 16);
  v58 = *(_QWORD *)(v2 + 64);
  v57 = *(_QWORD *)(v2 + 72);
  LOBYTE(v53) = *(_BYTE *)(v2 + 80);
  swift_bridgeObjectRetain(v55);
  sub_10008D47C(v57, v53);
  sub_100109B54();
  v60 = v59;
  v61 = sub_1000B15F8(v57, v53);
  if ((v60 & 1) != 0)
  {
    v61 = static MatchedGeometryProperties.frame.getter(v61);
    v62 = v61;
  }
  else
  {
    v62 = 0;
  }
  v63 = static UnitPoint.center.getter(v61);
  v65 = v64;
  v66 = (uint64_t)v83;
  sub_100037768(v54, (uint64_t)v83, &qword_100BD3BD8);
  v67 = v66 + *(int *)(v79 + 36);
  *(_QWORD *)v67 = v56;
  *(_QWORD *)(v67 + 8) = v55;
  *(_QWORD *)(v67 + 16) = v58;
  *(_DWORD *)(v67 + 24) = v62;
  *(double *)(v67 + 32) = v63;
  *(_QWORD *)(v67 + 40) = v65;
  *(_BYTE *)(v67 + 48) = 1;
  sub_100021A14(v54, &qword_100BD3BD8);
  v69 = static SafeAreaRegions.all.getter(v68);
  v70 = static Edge.Set.all.getter(v69);
  v71 = v81;
  sub_100037768(v66, v81, &qword_100BD3BE0);
  v72 = v84;
  v73 = v71 + *(int *)(v84 + 36);
  *(_QWORD *)v73 = v69;
  *(_BYTE *)(v73 + 8) = v70;
  sub_100021A14(v66, &qword_100BD3BE0);
  v74 = v80;
  sub_1000787D4(v71, v80, &qword_100BD3BE8);
  v75 = v74;
  v76 = v85;
  sub_1000787D4(v75, v85, &qword_100BD3BE8);
  return _s7Weather24LocationCompositionStateOwst_0(v76, 0, 1, v72);
}

uint64_t type metadata accessor for WireframeContentInterestManager()
{
  return objc_opt_self(_TtC7Weather31WireframeContentInterestManager);
}

uint64_t sub_1001274D0(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  uint64_t v6;
  _UNKNOWN **v7;

  v6 = type metadata accessor for WireframeInterestManager();
  v7 = &off_100B98AE8;
  *(_QWORD *)&v5 = a1;
  swift_allocObject(v6, 48, 7);
  *(_QWORD *)(a2 + 56) = sub_100130ED0(0x746E65746E6F43, 0xE700000000000000);
  sub_10003C800(&v5, a2 + 16);
  return a2;
}

uint64_t sub_10012754C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[16];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = "(";
  v4[5] = "(";
  v4[6] = "(";
  v4[7] = "(";
  v4[8] = "(";
  v4[9] = "(";
  v4[10] = "(";
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[12] = &unk_100994228;
  result = type metadata accessor for StartMethod(319);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(result - 8) + 64;
    v4[14] = &unk_100994240;
    v4[15] = &unk_100994258;
    return swift_updateClassMetadata2(a1, 256, 16, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for SessionEventsAndDataCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD6528;
  if (!qword_100BD6528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionEventsAndDataCoordinator);
  return result;
}

uint64_t sub_100127650()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];

  v1 = type metadata accessor for FollowingLocationListData(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CoarseLocationData(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = AccessTracker.diagnosticSubmissionAllowed.getter(v7);
  if ((result & 1) != 0)
  {
    v25 = v2;
    v26 = v6;
    v11 = v0[29];
    v12 = v0[30];
    sub_1000DB418(v0 + 26, v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    v14 = v0[29];
    v13 = v0[30];
    sub_1000DB418(v0 + 26, v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v14, v13);
    v15 = sub_1000BA294(&qword_100BCDC68);
    v16 = type metadata accessor for DataEventTrait(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject(v15, v19 + *(_QWORD *)(v17 + 72), v18 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_10097CA50;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v20 + v19, enum case for DataEventTrait.onlyOnce(_:), v16);
    sub_10000F1C8(&qword_100BD6650, (uint64_t (*)(uint64_t))&type metadata accessor for CoarseLocationData);
    AccessTracker.push<A>(data:traits:file:line:)(v9, v20, 0xD000000000000065, 0x80000001009FA420, 509, v5, v21);
    swift_bridgeObjectRelease(v20);
    sub_10000F1C8(&qword_100BD6658, (uint64_t (*)(uint64_t))&type metadata accessor for FollowingLocationListData);
    AccessTracker.push<A>(data:traits:file:line:)(v4, _swiftEmptyArrayStorage, 0xD000000000000065, 0x80000001009FA420, 510, v1, v22);
    v23 = type metadata accessor for FollowingLocationListEvent(0);
    sub_10000F1C8(&qword_100BD6660, (uint64_t (*)(uint64_t))&type metadata accessor for FollowingLocationListEvent);
    memset(v27, 0, sizeof(v27));
    AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v23, 0, v27, 0, 0, v23, v24);
    sub_100021A14((uint64_t)v27, &qword_100C0B800);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v5);
  }
  return result;
}

void sub_100127904()
{
  SceneStateMonitor.sceneWillEnterForeground()();
}

void sub_100127914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100023D50(a1, a2, (_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100127924()
{
  return SessionEventsAndDataCoordinator.updateTypes.getter();
}

void SessionEventsAndDataCoordinator.sceneWillConnectToSession(withOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t countAndFlagsBits;
  void *object;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[7];
  uint64_t v26;

  sub_1000986AC();
  v2 = v0;
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100079FBC();
  if ((SceneConnectionOptions.isEmpty.getter() & 1) == 0)
  {
    v5 = (void *)SceneConnectionOptions.connectionOptions.getter();
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "URLContexts");

      v8 = sub_1000A0794(0, &qword_100BD64C8, UIOpenURLContext_ptr);
      sub_100120408(&qword_100BD64D0, &qword_100BD64C8, UIOpenURLContext_ptr);
      v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, v8, v9);

      sub_10001AA9C();
      v12 = v11;
      *(_QWORD *)&v13 = swift_bridgeObjectRelease(v10).n128_u64[0];
      if (v12)
      {
        sub_1002F91F8(objc_msgSend(v12, "options", v13));
        if (v15)
        {
          v16 = String.lowercased()();
          countAndFlagsBits = v16._countAndFlagsBits;
          object = v16._object;
          v14 = sub_1000986C4();
        }
        else
        {
          object = (void *)0xE700000000000000;
          countAndFlagsBits = 0x6E776F6E6B6E75;
        }
        v19 = objc_msgSend(v12, "URL", v14);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v20 = URL.absoluteString.getter();
        v22 = v21;
        v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
        v26 = *(_QWORD *)(v2 + 328);
        __chkstk_darwin(v23);
        v25[2] = v2;
        v25[3] = countAndFlagsBits;
        v25[4] = object;
        v24 = sub_1000CD6E8();
        sub_100094EE4();
        Lock.sync<A>(_:)(&type metadata for (), sub_1002F9264, v25, v24, &type metadata for () + 1, &protocol witness table for UnfairLock);
        swift_release(v26);
        sub_1002F7A50(countAndFlagsBits, (uint64_t)object, v20, v22);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(object);
        sub_10006ADEC();

      }
    }
  }
  sub_100098640();
}

uint64_t sub_100127B64(uint64_t a1, uint64_t a2, void (*a3)(__n128))
{
  __n128 v5;

  v5 = swift_retain(a1);
  a3(v5);
  return swift_release(a1);
}

void sub_100127B9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100158DB0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1009BEDB8;
    v4[3] = &unk_1009BEDB8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for NotificationsOptInStoreObserver()
{
  return objc_opt_self(_TtC7Weather31NotificationsOptInStoreObserver);
}

void sub_100127C3C(unint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!*a1)
  {
    type metadata accessor for NotificationsOptInStoreObserver();
    v2 = sub_1000DA8D4();
    atomic_store(swift_getWitnessTable(v2, v3), a1);
  }
  sub_10004A298();
}

_QWORD *sub_100127C70(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v11 = type metadata accessor for LocationViewDescriptor();
  v12 = &off_100B978D8;
  *(_QWORD *)&v10 = a1;
  a4[2] = 0;
  a4[3] = 0;
  v8 = sub_1000BA294(&qword_100BF7628);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  a4[19] = OnlyOnceDeferredPromise.init()();
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  a4[20] = OnlyOnceDeferredPromise.init()();
  sub_10003C800(&v10, (uint64_t)(a4 + 4));
  sub_10003C800(a2, (uint64_t)(a4 + 9));
  sub_10003C800(a3, (uint64_t)(a4 + 14));
  return a4;
}

_QWORD *sub_100127D38(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;

  v17 = type metadata accessor for LocationViewDescriptor();
  v18 = &off_100B978D8;
  v16[0] = a1;
  v6 = type metadata accessor for NotificationsOptInStoreObserver();
  v7 = (_QWORD *)swift_allocObject(v6, 168, 7);
  v8 = sub_100068EB4((uint64_t)v16, v17);
  v9 = __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v12 + 16))(v11, v9);
  v13 = sub_100127C70(*v11, a2, a3, v7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v16);
  return v13;
}

void sub_100127E18()
{
  sub_100127C3C(&qword_100BCB610);
}

uint64_t sub_100127E3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for NotificationsOptInComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009A9920;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NotificationSubscriptionMonitor()
{
  return objc_opt_self(_TtC7Weather31NotificationSubscriptionMonitor);
}

uint64_t type metadata accessor for LocationPreviewViewStateReducer()
{
  return objc_opt_self(_TtC7Weather31LocationPreviewViewStateReducer);
}

uint64_t type metadata accessor for LocationContentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather31LocationContentViewModelFactory);
}

void sub_100127F14()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v0 = type metadata accessor for SettingReader(0);
  v1 = static SettingReader.shared.getter(v0);
  if (qword_100BC2660 != -1)
    swift_once(&qword_100BC2660, sub_10015A684);
  v2 = SettingReader.isEnabled(_:with:)(qword_100CAF4C8, 2);
  swift_release(v1);
  byte_100C11930 = v2 & 1;
}

unint64_t sub_100127F90()
{
  unint64_t result;

  result = qword_100BC5B00;
  if (!qword_100BC5B00)
  {
    result = swift_getWitnessTable(&unk_10098017C, &type metadata for IsLocationPreviewEnvironmentKey);
    atomic_store(result, (unint64_t *)&qword_100BC5B00);
  }
  return result;
}

void sub_100127FCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCF390)
  {
    v2 = type metadata accessor for DetailHeroChartLollipopPosition(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCF390);
  }
}

uint64_t sub_100128020(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DetailHeroChartLollipopPosition(uint64_t a1)
{
  return sub_100098190(a1, qword_100BDF0D0, (uint64_t)&nominal type descriptor for DetailHeroChartLollipopPosition);
}

uint64_t type metadata accessor for DailyForecastRowViewButtonStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCB3A0;
  if (!qword_100BCB3A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DailyForecastRowViewButtonStyle);
  return result;
}

uint64_t sub_1001280E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DailyForecastComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100128124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DailyForecastComponentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100128168(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v4 = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100158C7C(319, (unint64_t *)&qword_100BDD6E0, (uint64_t (*)(uint64_t))sub_100113B0C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Measurement);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = &unk_1009B72F0;
    v9 = &unk_1009B72F0;
    swift_initStructMetadata(a1, 256, 6, &v4, a1 + 16);
  }
}

uint64_t sub_100128208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10012824C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char *v23;

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_1009B72F0;
    v10[2] = &unk_1009B72F0;
    v4 = type metadata accessor for TimeZone(319);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158C7C(319, (unint64_t *)&qword_100BDD6E0, (uint64_t (*)(uint64_t))sub_100113B0C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Measurement);
      if (v7 <= 0x3F)
      {
        v11 = *(_QWORD *)(v6 - 8) + 64;
        v12 = v11;
        v13 = &unk_1009B73A8;
        v14 = &unk_1009B73A8;
        v15 = (char *)&value witness table for Builtin.Int64 + 64;
        v16 = &unk_1009B73C0;
        v17 = &unk_1009B72F0;
        sub_100158C7C(319, (unint64_t *)&unk_100BF6390, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
        if (v9 <= 0x3F)
        {
          v18 = *(_QWORD *)(v8 - 8) + 64;
          v19 = &unk_1009B73C0;
          v20 = &unk_1009B72F0;
          v21 = &unk_1009B72F0;
          v22 = &unk_1009B72F0;
          v23 = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_initStructMetadata(a1, 256, 17, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t type metadata accessor for CountryCodeConfigurationMonitor()
{
  return objc_opt_self(_TtC7Weather31CountryCodeConfigurationMonitor);
}

unint64_t sub_1001283A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C11E00;
  if (!qword_100C11E00)
  {
    v1 = type metadata accessor for CountryCodeConfigurationMonitor();
    result = swift_getWitnessTable(&unk_1009D6DF8, v1);
    atomic_store(result, (unint64_t *)&qword_100C11E00);
  }
  return result;
}

uint64_t sub_1001283E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = v0[7];
  v2 = v0[8];
  sub_1000DB418(v0 + 4, v1);
  v3 = sub_1001283A8();
  return dispatch thunk of LocationMetadataManagerType.addObserver(_:)(v0, v3, v1, v2);
}

void sub_100128434()
{
  ApplicationStateMonitor.applicationWillEnterForeground()();
}

uint64_t type metadata accessor for ConditionDetailViewStateReducer()
{
  return objc_opt_self(_TtC7Weather31ConditionDetailViewStateReducer);
}

uint64_t type metadata accessor for StateProcessingContextProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateProcessingContextProvider);
}

ValueMetadata *type metadata accessor for NotificationAuthorizationState()
{
  return &type metadata for NotificationAuthorizationState;
}

unint64_t sub_10012847C()
{
  unint64_t result;

  result = qword_100BDD870;
  if (!qword_100BDD870)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotificationAuthorizationState, &type metadata for NotificationAuthorizationState);
    atomic_store(result, (unint64_t *)&qword_100BDD870);
  }
  return result;
}

void NotificationAuthorizationState.shortDescription.getter(char a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BDD858);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_10012852C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  ShortDescription.init(name:_:)(0x7265746544746F6ELL, 0xED000064656E696DLL, v4, &type metadata for NotificationAuthorizationState);
  v1[3] = v0;
  v1[4] = sub_100159B84();
  v5 = sub_10005F164(v1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 32))(v5, v2, v0);
}

void sub_1001286B4()
{
  char *v0;

  NotificationAuthorizationState.shortDescription.getter(*v0);
}

void sub_1001286C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10015B460(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t type metadata accessor for LocationViewerViewStateReducer()
{
  return objc_opt_self(_TtC7Weather30LocationViewerViewStateReducer);
}

_QWORD *sub_100128780(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[3];
  ValueMetadata *v28;
  _UNKNOWN **v29;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  _QWORD v33[5];

  v6 = type metadata accessor for NotificationsOptInViewModelFactory();
  v33[3] = v6;
  v33[4] = &off_100B88480;
  v33[0] = a1;
  v7 = type metadata accessor for LocationViewDescriptor();
  v31 = v7;
  v32 = &off_100B978D8;
  v30[0] = a2;
  v28 = &type metadata for MapOverlayKindProvider;
  v29 = &off_100B75C88;
  v27[0] = swift_allocObject(&unk_100B7FB78, 96, 7);
  memcpy((void *)(v27[0] + 16), a3, 0x50uLL);
  v8 = type metadata accessor for LocationViewerViewStateReducer();
  v9 = (_QWORD *)swift_allocObject(v8, 136, 7);
  v10 = sub_100068EB4((uint64_t)v33, v6);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_100068EB4((uint64_t)v30, v31);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)&v27[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_100068EB4((uint64_t)v27, (uint64_t)v28);
  __chkstk_darwin(v18);
  v20 = (char *)&v27[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  v22 = *v12;
  v23 = *v16;
  v9[5] = v6;
  v9[6] = &off_100B88480;
  v9[2] = v22;
  v9[10] = v7;
  v9[11] = &off_100B978D8;
  v9[7] = v23;
  v9[15] = &type metadata for MapOverlayKindProvider;
  v9[16] = &off_100B75C88;
  v24 = swift_allocObject(&unk_100B7FB78, 96, 7);
  v9[12] = v24;
  memcpy((void *)(v24 + 16), v20, 0x50uLL);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  return v9;
}

void sub_1001289C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1001332D4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_1009B0B48;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for LocationViewerViewModelFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF1F00;
  if (!qword_100BF1F00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewerViewModelFactory);
  return result;
}

unint64_t sub_100128A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1FB8;
  if (!qword_100BF1FB8)
  {
    v1 = type metadata accessor for LocationViewerViewModelFactory(255);
    result = swift_getWitnessTable(&unk_1009B0B60, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1FB8);
  }
  return result;
}

uint64_t sub_100128ABC()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unsigned __int8 v7;

  v1 = OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory____lazy_storage___conditionBackgroundOverridden;
  v2 = *((unsigned __int8 *)v0
       + OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory____lazy_storage___conditionBackgroundOverridden);
  if (v2 != 2)
    return v2 & 1;
  v3 = *v0;
  v4 = static Settings.VFX.overrideConditionBackground.getter();
  v5 = sub_100128A7C();
  Configurable.setting<A>(_:)(v4, v3, v5);
  swift_release(v4);
  result = v7;
  *((_BYTE *)v0 + v1) = v7;
  return result;
}

uint64_t sub_100128B34(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory_lastViewModel;
  v4 = type metadata accessor for LocationViewerViewModel(0);
  _s7Weather24LocationCompositionStateOwst_0(v3, 1, 1, v4);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory____lazy_storage___conditionBackgroundOverridden) = 2;
  sub_10003C800(a1, v1 + OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory_appConfigurationManager);
  return v1;
}

uint64_t sub_100128BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t active;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;

  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(a1, (uint64_t)v6, v7);
  v8 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v8) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, v6, v8);
  sub_1000215BC((uint64_t)v6, type metadata accessor for LocationViewerActiveLocationState);
  return static CurrentLocation.placeholderIdentifier.getter();
}

ValueMetadata *type metadata accessor for LocationListTransitionModifier()
{
  return &type metadata for LocationListTransitionModifier;
}

unint64_t sub_100128C84()
{
  unint64_t result;

  result = qword_100BCDD40;
  if (!qword_100BCDD40)
  {
    result = swift_getWitnessTable(&unk_10098AD70, &type metadata for LocationListTransitionModifier);
    atomic_store(result, (unint64_t *)&qword_100BCDD40);
  }
  return result;
}

uint64_t sub_100128CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_100128CDC(a1, a2, *v2, v2[1]);
}

uint64_t sub_100128CCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD940, 1);
}

uint64_t sub_100128CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v15;

  v8 = sub_1000BA294(&qword_100BCDDD0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BCDDD8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a1, v11);
  *(double *)&v10[*(int *)(v8 + 36)] = a4;
  KeyPath = swift_getKeyPath(&unk_10098ADC0);
  sub_100157A50((uint64_t)v10, a2);
  v13 = a2 + *(int *)(sub_1000BA294(&qword_100BCDDE0) + 36);
  *(_QWORD *)v13 = KeyPath;
  *(double *)(v13 + 8) = a3;
  return sub_100157A10((uint64_t)v10);
}

void sub_100128DC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[27];

  v2 = type metadata accessor for LocationComponentContainerViewModel(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = &unk_1009A0028;
    v12[2] = &unk_1009A0040;
    v12[3] = &unk_1009A0058;
    v4 = type metadata accessor for Location.Identifier(319);
    if (v5 <= 0x3F)
    {
      v12[4] = *(_QWORD *)(v4 - 8) + 64;
      v12[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v12[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v12[7] = &unk_1009A0058;
      v12[8] = &unk_1009A0070;
      v12[9] = &unk_1009A0088;
      v12[10] = &unk_1009A00A0;
      v12[11] = &unk_1009A00A0;
      v12[12] = &unk_1009A00A0;
      v12[13] = &unk_1009A00B8;
      sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
      if (v7 <= 0x3F)
      {
        v12[14] = *(_QWORD *)(v6 - 8) + 64;
        v12[15] = &unk_1009A00D0;
        v12[16] = &unk_1009A00D0;
        sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
        if (v9 <= 0x3F)
        {
          v12[17] = *(_QWORD *)(v8 - 8) + 64;
          v12[18] = &unk_1009A00D0;
          v12[19] = &unk_1009A00D0;
          v12[20] = &unk_1009A00D0;
          v12[21] = &unk_1009A00D0;
          v12[22] = &unk_1009A00D0;
          v12[23] = &unk_1009A00D0;
          sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
          if (v11 <= 0x3F)
          {
            v12[24] = *(_QWORD *)(v10 - 8) + 64;
            v12[25] = &unk_1009A00B8;
            v12[26] = &unk_1009A0028;
            swift_initStructMetadata(a1, 256, 27, v12, a1 + 16);
          }
        }
      }
    }
  }
}

void sub_100128F58()
{
  double *v0;
  uint64_t v1;

  type metadata accessor for LocationComponentContainerView(0);
  v0 = (double *)sub_10009DACC();
  sub_100128F80(v0, v1);
}

void sub_100128F80(double *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[3];
  v10 = (uint64_t *)(a2 + *(int *)(type metadata accessor for LocationComponentContainerView(0) + 56));
  v11 = *v10;
  v12 = v10[1];
  v13 = *((unsigned __int8 *)v10 + 16);
  v14 = type metadata accessor for LocationComponentActionState();
  sub_10007A100((uint64_t)&unk_100BE2378);
  v16 = v15;
  v17 = StateObject.wrappedValue.getter(v11, v12, v13, v14, v15);
  v18 = *(unsigned __int8 *)(v17 + 16);
  swift_release(v17);
  if (v18 == 1 && v7 > 0.0 && v8 > -v9)
  {
    v20 = StateObject.wrappedValue.getter(v11, v12, v13, v14, v16);
    *(_BYTE *)(v20 + 16) = 0;
    swift_release(v20);
    v21 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 1, 1, v21);
    sub_10042D724();
    sub_100021A14((uint64_t)v6, (uint64_t *)&unk_100BD35A0);
  }
}

uint64_t sub_1001290F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB4DF0, 1);
}

uint64_t sub_100129104()
{
  uint64_t v0;

  v0 = type metadata accessor for PagingContentOffsetsStorage(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_10012C880();
}

uint64_t sub_100129138()
{
  uint64_t v0;

  return sub_10001D5BC(*(_BYTE *)(v0 + 16));
}

uint64_t sub_100129140()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LocationComponentActionState();
  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

void sub_100129168()
{
  qword_100CAE528 = 0x4026000000000000;
}

void sub_100129178()
{
  qword_100CAE520 = 0x4026000000000000;
}

void sub_100129188()
{
  qword_100CAE538 = 0x4030000000000000;
}

void sub_100129198(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _OWORD v10[4];

  v4 = type metadata accessor for ContentStatusBanner(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v10 - v8;
  sub_10013B9CC(a1, (uint64_t)v10 - v8);
  sub_10013B9CC((uint64_t)v9, (uint64_t)v7);
  if (qword_100BC1F70 != -1)
    swift_once(&qword_100BC1F70, sub_100123D74);
  sub_100040E88((uint64_t)v7, (uint64_t)(id)qword_100BD6F88);
  sub_10013B990((uint64_t)v9);
  sub_1000134B4(v10, a2);
}

uint64_t type metadata accessor for AveragesDetailViewStateReducer()
{
  return objc_opt_self(_TtC7Weather30AveragesDetailViewStateReducer);
}

unint64_t sub_1001292A8()
{
  unint64_t result;

  result = qword_100BC5B60;
  if (!qword_100BC5B60)
  {
    result = swift_getWitnessTable(&unk_1009802FC, &unk_100B60930);
    atomic_store(result, (unint64_t *)&qword_100BC5B60);
  }
  return result;
}

uint64_t sub_1001292E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

_QWORD *sub_1001292F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for WireframeInterestManager();
  sub_100098740(v1, 48);
  v2 = sub_100130ED0(0xD000000000000013, 0x8000000100A14EB0);
  v0[5] = v1;
  v0[6] = &off_100B98AE8;
  v0[2] = v2;
  v3 = type metadata accessor for WireframeContentInterestManager();
  v4 = sub_100098740(v3, 64);
  swift_retain();
  v0[7] = sub_1001274D0(v5, v4);
  return v0;
}

_QWORD *sub_100129388()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for WireframeLevelInterestManager();
  v1 = sub_100098740(v0, 64);
  result = sub_1001292F0();
  qword_100CAF410 = v1;
  return result;
}

uint64_t sub_1001293BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1009A1190;
  v4[1] = &unk_1009A11A8;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1009A1190;
  v4[4] = &unk_1009A11A8;
  result = type metadata accessor for WeatherAlert.Prominence(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ReverseGeocodingStoreObserver()
{
  return objc_opt_self(_TtC7Weather29ReverseGeocodingStoreObserver);
}

void sub_100129478()
{

}

uint64_t sub_1001294A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001294C0(a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_1001294C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD **)a1;
  if (*(uint64_t *)(a1 + 8) < 1)
    static DispatchQoS.userInitiated.getter(v7);
  else
    static DispatchQoS.utility.getter(v7);
  v11 = sub_100048E38(v10, a3 & 1, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v11;
}

uint64_t sub_100129588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, char a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  sub_10003C800(a5, v7 + 48);
  sub_10003C800(a6, v7 + 96);
  *(_BYTE *)(v7 + 88) = a7;
  return v7;
}

uint64_t sub_1001295DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10098B930;
  result = type metadata accessor for NewsArticleComponentContentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10012964C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v8 = ~(_BYTE)a3;
  v9 = sub_1000BA294(&qword_100BFE5C0);
  __chkstk_darwin(v9);
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)&v25 - v11;
  if (!v8)
    return 0;
  sub_100033A34(a4, (uint64_t)&v25 - v11, &qword_100BFE5C0);
  v13 = type metadata accessor for MoonRiseSetEvent(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13) == 1)
  {
    sub_100021A14((uint64_t)v12, &qword_100BFE5C0);
    return 0;
  }
  sub_1008C0374();
  v15 = v14;
  v17 = v16;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  if (!v17)
    return 0;
  v18 = sub_1000BA294(&qword_100BC3C38);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10097CA50;
  v20 = TemporalString.string.getter(a1, a2, a3);
  v22 = v21;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_1000B2E24();
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v22;
  v23 = String.init(format:_:)(v15, v17, v19);
  swift_bridgeObjectRelease(v17);
  return v23;
}

uint64_t sub_1001297D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v8 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v8 - 8);
  v23 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BFE5C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MoonRiseSetEvent(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033A34(a1, (uint64_t)v13, &qword_100BFE5C0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14) == 1)
  {
    sub_100021A14((uint64_t)v13, &qword_100BFE5C0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v19 = a2[10];
    v20 = a2[11];
    sub_1000DB418(a2 + 7, v19);
    MoonRiseSetEvent.date.getter();
    v18 = dispatch thunk of MoonStringBuilderType.nextMoonRiseSetString(_:now:timeZone:)(v10, a3, a4, v19, v20);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v18;
}

uint64_t sub_1001299A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[9];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ConditionDetailViewState(319);
    if (v4 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for AirQualityDetailViewState(319);
      if (v5 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for NextHourPrecipitationDetailViewState(319);
        if (v6 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for SunriseSunsetDetailViewState(319);
          if (v7 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for MoonDetailViewState(319);
            if (v8 <= 0x3F)
            {
              v12[5] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for NewsArticle(319);
              if (v9 <= 0x3F)
              {
                v12[6] = *(_QWORD *)(result - 8) + 64;
                result = type metadata accessor for AveragesDetailViewState(319);
                if (v10 <= 0x3F)
                {
                  v12[7] = *(_QWORD *)(result - 8) + 64;
                  result = type metadata accessor for HomeAndWorkRefinementViewState(319);
                  if (v11 <= 0x3F)
                  {
                    v12[8] = *(_QWORD *)(result - 8) + 64;
                    swift_initEnumMetadataMultiPayload(a1, 256, 9, v12);
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for LocationPreviewModalViewState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BDBB48, (uint64_t)&nominal type descriptor for LocationPreviewModalViewState);
}

uint64_t sub_100129AFC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100ABA230, 1);
}

unint64_t sub_100129B30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF4770;
  if (!qword_100BF4770)
  {
    v1 = sub_100075EB0(&qword_100BF4768);
    result = swift_getWitnessTable(&unk_1009B1998, v1);
    atomic_store(result, (unint64_t *)&qword_100BF4770);
  }
  return result;
}

uint64_t sub_100129B74(_QWORD *a1, uint64_t a2)
{
  swift_unknownObjectRelease(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

__int128 *sub_100129BB8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_unknownObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t sub_100129C2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009B1970;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LocationGridDeterminationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationGridDeterminationView);
}

uint64_t sub_100129CB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for AvailableDataSets(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009BBC00;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100129D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DispatchQoS(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100129D64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_100129DD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for DispatchQoS(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100129E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GCDSerialDispatchQueueFactory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100129EB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009BECD0;
  result = type metadata accessor for DispatchQoS(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for GCDSerialDispatchQueueFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFD2D0;
  if (!qword_100BFD2D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GCDSerialDispatchQueueFactory);
  return result;
}

uint64_t sub_100129F60@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v8 = sub_100099984();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3[1];
  v19 = *v3;
  v20 = v12;
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v15 = v19;
  v16 = v20;
  v17 = type metadata accessor for GCDSerialDispatchQueueFactory(0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, (char *)v4 + *(int *)(v17 + 20), v8);
  result = sub_100135BB4(v15, v16, (uint64_t)v11);
  a3[3] = (uint64_t)&type metadata for GCDSerialDispatchQueue;
  a3[4] = (uint64_t)&off_100B999E0;
  *a3 = result;
  return result;
}

void sub_10012A050(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  v2 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(319);
  if (v3 <= 0x3F)
  {
    v18 = *(_QWORD *)(v2 - 8) + 64;
    sub_100158CD4(319, (unint64_t *)&qword_100BDD6E0, (uint64_t (*)(uint64_t))sub_100113B0C);
    if (v5 <= 0x3F)
    {
      v19 = *(_QWORD *)(v4 - 8) + 64;
      v20 = v19;
      sub_100158AA8(319, (unint64_t *)&qword_100BDD6E8, &qword_100BC4E68);
      if (v7 <= 0x3F)
      {
        v21 = *(_QWORD *)(v6 - 8) + 64;
        v22 = &unk_100999D70;
        v23 = &unk_100999D70;
        v24 = (char *)&value witness table for Builtin.Int64 + 64;
        v25 = (char *)&value witness table for () + 64;
        v26 = (char *)&value witness table for Builtin.Int64 + 64;
        v27 = &unk_100999D88;
        sub_100158AA8(319, (unint64_t *)&qword_100BCB3B0, &qword_100BCB340);
        if (v9 <= 0x3F)
        {
          v28 = *(_QWORD *)(v8 - 8) + 64;
          sub_1001588D8(319, (unint64_t *)&qword_100BD33F0, (uint64_t (*)(void))sub_10010FE84, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ScaledMetric);
          if (v11 <= 0x3F)
          {
            v29 = *(_QWORD *)(v10 - 8) + 64;
            sub_1001588D8(319, (unint64_t *)&qword_100BDD6F0, (uint64_t (*)(void))sub_10010D1D0, (uint64_t)&type metadata for Double, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ScaledValue);
            if (v13 <= 0x3F)
            {
              v30 = *(_QWORD *)(v12 - 8) + 64;
              v31 = &unk_100999DA0;
              v32 = &unk_100999DA0;
              v33 = &unk_100999DA0;
              sub_100158CD4(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
              if (v15 <= 0x3F)
              {
                v34 = *(_QWORD *)(v14 - 8) + 64;
                v35 = &unk_100999DB8;
                sub_100158AA8(319, (unint64_t *)&qword_100BDD6F8, (uint64_t *)&unk_100BD35A0);
                if (v17 <= 0x3F)
                {
                  v36 = *(_QWORD *)(v16 - 8) + 64;
                  swift_initStructMetadata(a1, 256, 19, &v18, a1 + 16);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10012A27C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB2D84, 1);
}

uint64_t sub_10012A290(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC6170, 1);
}

uint64_t sub_10012A2A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t IsSlow;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Material(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100C14488);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  IsSlow = DeviceIsSlow(v7);
  if ((_DWORD)IsSlow)
  {
    v11 = static Color.black.getter(IsSlow);
    v12 = Color.opacity(_:)(0.3);
    v13 = swift_release(v11);
    v19 = v12;
    v14 = &type metadata for Color;
    v15 = &protocol witness table for Color;
    v16 = &v19;
  }
  else
  {
    static Material.thin.getter();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
    *(_WORD *)&v9[*(int *)(v6 + 56)] = 256;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v15 = (void *)sub_100159374();
    v16 = v9;
    v14 = (void *)v6;
  }
  result = AnyView.init<A>(_:)(v16, v14, v15, v13);
  *a1 = result;
  return result;
}

void sub_10012A3DC(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = WindowHorizontalSizeClassKey.defaultValue.unsafeMutableAddressor();
  sub_10007EBC8(v2, a1, &qword_100BC5A68);
}

uint64_t sub_10012A40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1001546F8();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10012A45C(uint64_t a1)
{
  return sub_100150E78(a1, &qword_100BC5A68, static WindowHorizontalSizeClassKey.defaultValue, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t WindowHorizontalSizeClassKey.defaultValue.unsafeMutableAddressor()
{
  return sub_100150EF4(&qword_100BC1E50, &qword_100BC5A68, (uint64_t)static WindowHorizontalSizeClassKey.defaultValue, (uint64_t)sub_10012A45C);
}

void sub_10012A49C(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 0xFFFF) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (v6 < a2)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18);
    if (v7 > 3)
      *a1 = v11;
    else
      *(_WORD *)a1 = v11;
    __asm { BR              X11 }
  }
  __asm { BR              X11 }
}

void sub_10012A5B4(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
}

void sub_10012A5BC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10012A5C4);
}

void sub_10012A608(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
}

void sub_10012A610(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
}

uint64_t sub_10012A618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!(_DWORD)a2)
LABEL_2:
    JUMPOUT(0x10012A620);
  if (a3 < 0xFE)
  {
    *(_BYTE *)(((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) = a2 + 1;
    goto LABEL_2;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v6, a2, a3, a4);
}

uint64_t sub_10012A638(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 >= 0xFE)
      return _s7Weather24LocationCompositionStateOwet_0(a1, v6, v4);
    v15 = *(unsigned __int8 *)(((((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 0x11);
    if (v15 >= 2)
      return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v9 = ((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 18;
  v10 = (a2 - v7 + 0xFFFF) >> (8 * v9);
  if (v9 <= 3)
    v11 = v10 + 1;
  else
    v11 = 2;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v12 = 1;
  if (v11 >= 2)
    v13 = v12;
  else
    v13 = 0;
  return ((uint64_t (*)(void))((char *)&loc_10012A6CC + 4 * byte_1009C8E90[v13]))();
}

uint64_t sub_10012A760(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_1009C8EC0;
    v4[3] = &unk_1009C8ED8;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

void type metadata accessor for TemperatureGradientColorStop()
{
  sub_100098884();
}

uint64_t sub_10012A7F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "!";
    v4[2] = &unk_1009DA828;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NotificationSettingsAssembly()
{
  return objc_opt_self(_TtC7Weather28NotificationSettingsAssembly);
}

uint64_t sub_10012A894@<X0>(uint64_t (*a1)(_QWORD)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1(0);
  result = swift_allocObject(v5, 16, 7);
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t sub_10012A8DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for NotificationSettingsViewStateReducer, (uint64_t)&off_100B72FA0, a1);
}

uint64_t sub_10012A8F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for NotificationSettingsViewModelFactory, (uint64_t)&off_100B9CCB8, a1);
}

double sub_10012A904(__n128 a1)
{
  return sub_100015D54(a1);
}

uint64_t type metadata accessor for MapComponentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather28MapComponentViewModelFactory);
}

uint64_t sub_10012A938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000A000(*(_QWORD *)v2, *(void (**)(uint64_t, double))(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10012A958(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AAD968, 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewPresentationKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10012A9D8 + 4 * byte_10098D395[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012AA0C + 4 * byte_10098D390[v4]))();
}

uint64_t sub_10012AA0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012AA14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012AA1CLL);
  return result;
}

uint64_t sub_10012AA28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012AA30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10012AA34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012AA3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012AA48()
{
  return sub_10012AC04() & 1;
}

void sub_10012AA68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10015958C();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

uint64_t sub_10012AAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v7;
  _QWORD *v8;

  v1 = sub_1000BA294(&qword_100C0B100);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC7Weather28LocationViewCollisionOptions__value;
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  Published.init(initialValue:)(&v7, &type metadata for LocationViewCollisionOptions.PublishedValue);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  return v0;
}

uint64_t sub_10012AB88(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  float v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1009D0810);
  v6 = swift_getKeyPath(&unk_1009D0838);
  v8 = a2;
  v9 = a1;
  swift_retain(v2);
  return static Published.subscript.setter(&v8, v2, KeyPath, v6);
}

uint64_t sub_10012AC04()
{
  uint64_t v0;
  float v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  char v6;

  v0 = sub_10010E6C8();
  v2 = v1;
  v3 = v0;
  v4 = sub_10010E6C8();
  if (v2 == v5)
    v6 = sub_100121188(v3, v4);
  else
    v6 = 0;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return v6 & 1;
}

uint64_t storeEnumTagSinglePayload for ConditionsChartID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

float sub_10012ACBC(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 <= 1)
    v3 = 1;
  v4 = v3 - 1;
  Array<A>.total.getter(&v6);
  return *(float *)&v6 + (float)((float)v4 * a2);
}

uint64_t sub_10012AD20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for LocationComponentActionState();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for LocationAuthorizationReducer()
{
  return objc_opt_self(_TtC7Weather28LocationAuthorizationReducer);
}

uint64_t type metadata accessor for LocationAuthorizationMonitor()
{
  return objc_opt_self(_TtC7Weather28LocationAuthorizationMonitor);
}

unint64_t sub_10012AD9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C15540;
  if (!qword_100C15540)
  {
    v1 = type metadata accessor for LocationAuthorizationMonitor();
    result = swift_getWitnessTable(&unk_1009D9D18, v1);
    atomic_store(result, (unint64_t *)&qword_100C15540);
  }
  return result;
}

double sub_10012ADDC(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v4;
  id v5;
  double result;

  v4 = swift_allocObject(&unk_100B9B810, 28, 7);
  *(_QWORD *)(v4 + 16) = v2;
  *(_DWORD *)(v4 + 24) = a2;
  v5 = v2;
  asyncMain(block:)(sub_100920AC8, v4);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

void sub_10012AE38()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD aBlock[5];
  uint64_t v16;
  char v17[24];

  v1 = v0;
  v2 = type metadata accessor for EnvironmentState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DB418(&v0[OBJC_IVAR____TtC7Weather28LocationAuthorizationMonitor_locationManager], *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather28LocationAuthorizationMonitor_locationManager + 24]);
  sub_10012AD9C();
  v5 = dispatch thunk of LocationManagerType.addObserver(_:)(v0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))&v0[OBJC_IVAR____TtC7Weather28LocationAuthorizationMonitor_stateReader])(aBlock, v5);
  v6 = aBlock[0];
  v7 = aBlock[0] + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(aBlock[0] + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v17, 0, 0);
  sub_10006A788(v7, (uint64_t)v4);
  swift_release(v6);
  LODWORD(v6) = v4[*(int *)(v2 + 48)];
  sub_10006BD20((uint64_t)v4, type metadata accessor for EnvironmentState);
  if ((_DWORD)v6 == 1)
  {
    v8 = (void *)objc_opt_self(NSTimer);
    v9 = swift_allocObject(&unk_100B9B838, 24, 7);
    *(_QWORD *)(v9 + 16) = v1;
    aBlock[4] = sub_100920AF8;
    v16 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10021BA7C;
    aBlock[3] = &unk_100B9B850;
    v10 = _Block_copy(aBlock);
    v11 = v16;
    v12 = v1;
    swift_release(v11);
    v13 = objc_msgSend(v8, "scheduledTimerWithTimeInterval:repeats:block:", 0, v10, 60.0);
    _Block_release(v10);

  }
}

void sub_10012B010(void *a1)
{
  uint64_t v1;
  Swift::OpaquePointer_optional v3;

  v3.is_nil = swift_getObjectType(v1);
  v3.value._rawValue = a1;
  ApplicationStateMonitor.applicationDidFinishLaunching(withOptions:)(v3);
}

uint64_t sub_10012B050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v4);
  return LocationManagerObserver.currentLocationDidUpdate(_:location:)(a1, a2, ObjectType, a4);
}

double sub_10012B094(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[8])).n128_u64[0];
  return result;
}

uint64_t sub_10012B118(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v6);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BD4280);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRetain(v16);
  swift_retain();
  return a1;
}

void sub_10012B214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1009B69A0;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10015BC08(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1009B69B8;
    v4[4] = &unk_1009B69D0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_10012B2A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100154650(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10099E330;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_10012B328(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB42D4, 1);
}

ValueMetadata *type metadata accessor for DefaultBackgroundButtonStyle()
{
  return &type metadata for DefaultBackgroundButtonStyle;
}

unint64_t sub_10012B348()
{
  unint64_t result;

  result = qword_100C11070;
  if (!qword_100C11070)
  {
    result = swift_getWitnessTable(&unk_1009D5DC0, &type metadata for DefaultBackgroundButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100C11070);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentStatusBannerViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentStatusBannerViewStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t *assignWithCopy for ContentStatusBannerViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ContentStatusBannerViewStyle()
{
  return &type metadata for ContentStatusBannerViewStyle;
}

BOOL sub_10012B4AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC5A68);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v23 - v16;
  if (a2 < 2)
    return 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))((char *)&v23 - v16, enum case for UserInterfaceSizeClass.compact(_:), v5);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v5);
  v18 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100037794(a3, (uint64_t)v11, &qword_100BC5A68);
  sub_100037794((uint64_t)v17, v18, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v5) == 1)
  {
    sub_100021AA4((uint64_t)v17, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v18, 1, v5) == 1)
    {
      sub_100021AA4((uint64_t)v11, &qword_100BC5A68);
      return 1;
    }
    goto LABEL_7;
  }
  sub_100037794((uint64_t)v11, (uint64_t)v15, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v18, 1, v5) == 1)
  {
    sub_100021AA4((uint64_t)v17, &qword_100BC5A68);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
LABEL_7:
    sub_100021AA4((uint64_t)v11, &qword_100BC5E60);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v18, v5);
  sub_10000F1C8(&qword_100BC5AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v8, v5, v19);
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v8, v5);
  sub_100021AA4((uint64_t)v17, &qword_100BC5A68);
  v21(v15, v5);
  sub_100021AA4((uint64_t)v11, &qword_100BC5A68);
  return (v20 & 1) != 0;
}

uint64_t sub_10012B768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC5A68);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v30 - v17;
  if (!a2)
  {
    v20 = static Font.body.getter(v16);
    static Font.Weight.semibold.getter(v20);
    v21 = Font.weight(_:)(v20);
    swift_release(v20);
    return v21;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))((char *)&v30 - v17, enum case for UserInterfaceSizeClass.compact(_:), v5);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v5);
  v19 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100037794(a3, (uint64_t)v11, &qword_100BC5A68);
  sub_100037794((uint64_t)v18, v19, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v5) != 1)
  {
    sub_100037794((uint64_t)v11, (uint64_t)v15, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v5) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v19, v5);
      sub_10000F1C8(&qword_100BC5AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v8, v5, v24);
      v26 = *(void (**)(char *, uint64_t))(v6 + 8);
      v26(v8, v5);
      sub_100021AA4((uint64_t)v18, &qword_100BC5A68);
      v26(v15, v5);
      sub_100021AA4((uint64_t)v11, &qword_100BC5A68);
      if ((v25 & 1) != 0)
        goto LABEL_10;
LABEL_11:
      v27 = static Font.body.getter(v23);
      goto LABEL_12;
    }
    sub_100021AA4((uint64_t)v18, &qword_100BC5A68);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
LABEL_8:
    sub_100021AA4((uint64_t)v11, &qword_100BC5E60);
    goto LABEL_11;
  }
  sub_100021AA4((uint64_t)v18, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v5) != 1)
    goto LABEL_8;
  sub_100021AA4((uint64_t)v11, &qword_100BC5A68);
LABEL_10:
  v27 = static Font.caption.getter();
LABEL_12:
  v28 = v27;
  static Font.Weight.medium.getter(v27);
  v29 = Font.weight(_:)(v28);
  swift_release(v28);
  return v29;
}

uint64_t sub_10012BA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC5A68);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v24 - v17;
  if (!a2)
    return static Font.footnote.getter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))((char *)&v24 - v17, enum case for UserInterfaceSizeClass.compact(_:), v5);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v5);
  v19 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100037794(a3, (uint64_t)v11, &qword_100BC5A68);
  sub_100037794((uint64_t)v18, v19, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v5) == 1)
  {
    sub_100021AA4((uint64_t)v18, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v5) == 1)
    {
      sub_100021AA4((uint64_t)v11, &qword_100BC5A68);
      return static Font.caption.getter();
    }
    goto LABEL_8;
  }
  sub_100037794((uint64_t)v11, (uint64_t)v15, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v5) == 1)
  {
    sub_100021AA4((uint64_t)v18, &qword_100BC5A68);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
LABEL_8:
    sub_100021AA4((uint64_t)v11, &qword_100BC5E60);
    return static Font.footnote.getter(v16);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v19, v5);
  sub_10000F1C8(&qword_100BC5AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v8, v5, v20);
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v22(v8, v5);
  sub_100021AA4((uint64_t)v18, &qword_100BC5A68);
  v22(v15, v5);
  sub_100021AA4((uint64_t)v11, &qword_100BC5A68);
  if ((v21 & 1) != 0)
    return static Font.caption.getter();
  return static Font.footnote.getter(v16);
}

uint64_t sub_10012BD40(__n128 *a1, __n128 *a2)
{
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v7[4];
  __n128 v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_10011B758(v7, v8) & 1;
}

ValueMetadata *type metadata accessor for ContentStatusBannerViewModel()
{
  return &type metadata for ContentStatusBannerViewModel;
}

void sub_10012BD98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009959B0;
  sub_10015B6D0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_10012BE18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009959B0;
  sub_10015B6D0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for AppStoreReviewPrivacySampler()
{
  return objc_opt_self(_TtC7Weather28AppStoreReviewPrivacySampler);
}

ValueMetadata *type metadata accessor for AirQualityComponentViewModel()
{
  return &type metadata for AirQualityComponentViewModel;
}

void sub_10012BEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Font.TextStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v8 - v7, enum case for Font.TextStyle.title3(_:), v5);
  static Font.Weight.semibold.getter(v10);
  v11 = static Font.system(_:weight:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Font.Leading.tight(_:), v0);
  Font.leading(_:)(v4, v11);
  swift_release(v11);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  static Font.footnote.getter(v12);
  sub_10009D300();
}

double sub_10012BFD0(char a1, char a2)
{
  uint64_t v2;
  double result;

  if ((*(_BYTE *)(v2 + 97) & 1) == 0 || (result = 16.0, (a2 & 1) == 0))
  {
    result = -6.0;
    if ((a1 & 1) != 0)
      result = -3.0;
    if ((*(_BYTE *)(v2 + 96) & 1) == 0)
      return 0.0;
  }
  return result;
}

void sub_10012C008(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Font.Leading(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100098728();
  v7 = v6 - v5;
  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098728();
  v12 = v11 - v10;
  if ((*(_BYTE *)(v1 + 96) & 1) == 0 || (*(_BYTE *)(v1 + 97) & 1) != 0 && (a1 & 1) != 0)
  {
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v12, enum case for Font.TextStyle.title3(_:), v8);
    static Font.Weight.semibold.getter(v13);
    v14 = static Font.system(_:weight:)(v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v7, enum case for Font.Leading.tight(_:), v3);
    Font.leading(_:)(v7, v14);
    swift_release(v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    static Font.headline.getter(v15);
  }
  else
  {
    static Font.largeTitle.getter();
    static Font.title2.getter();
  }
  sub_10009D300();
}

uint64_t sub_10012C140(char a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 96) & 1) != 0 && ((a1 & 1) == 0 || (*(_BYTE *)(v1 + 97) & 1) == 0))
    sub_1000C4BE4();
  return sub_1000BCF4C();
}

uint64_t sub_10012C180(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v16;

  if ((v1[12] & 1) != 0)
  {
    if ((a1 & 1) != 0 && (*((_BYTE *)v1 + 97) & 1) != 0)
    {
      v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v16._object = (void *)0x8000000100A0C550;
      v7._countAndFlagsBits = 0x4025202D206425;
      v7._object = (void *)0xE700000000000000;
      v8._countAndFlagsBits = 0;
      v8._object = (void *)0xE000000000000000;
      v16._countAndFlagsBits = 0xD000000000000049;
      v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v16);

      v10 = sub_1000BA294(&qword_100BC3C38);
      v11 = swift_allocObject(v10, 112, 7);
      *(_OWORD *)(v11 + 16) = xmmword_10097DA20;
      v12 = *v1;
      *(_QWORD *)(v11 + 56) = &type metadata for Int;
      *(_QWORD *)(v11 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v11 + 32) = v12;
      v14 = v1[4];
      v13 = v1[5];
      *(_QWORD *)(v11 + 96) = &type metadata for String;
      *(_QWORD *)(v11 + 104) = sub_1000B2E24();
      *(_QWORD *)(v11 + 72) = v14;
      *(_QWORD *)(v11 + 80) = v13;
      swift_bridgeObjectRetain(v13);
      static String.localizedStringWithFormat(_:_:)(v9._countAndFlagsBits, v9._object, v11);
      swift_bridgeObjectRelease(v9._object);
      v5 = v11;
    }
    else
    {
      v2 = sub_1000BA294(&qword_100BC3C38);
      v3 = swift_allocObject(v2, 72, 7);
      *(_OWORD *)(v3 + 16) = xmmword_10097CA50;
      v4 = *v1;
      *(_QWORD *)(v3 + 56) = &type metadata for Int;
      *(_QWORD *)(v3 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v3 + 32) = v4;
      static String.localizedStringWithFormat(_:_:)(25637, 0xE200000000000000, v3);
      v5 = v3;
    }
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    sub_1000C4BE4();
  }
  return sub_1000BCF4C();
}

uint64_t sub_10012C33C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AAFA40, 1);
}

void sub_10012C370(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~*(unsigned __int8 *)(v5 + 80)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (a2 > v6)
  {
    if ((_DWORD)v7)
    {
      v11 = ~v6 + a2;
      bzero(a1, v7);
      *a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_10012C470@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a1)
  {
    if ((a2 & 0x80000000) != 0)
    {
      return _s7Weather24LocationCompositionStateOwst_0(((v5 & 0xFFFFFFFFFFFFFFF8) + v4 + 32) & a4, a1, a2, a3);
    }
    else if ((a1 & 0x80000000) != 0)
    {
      *(_QWORD *)v5 = a1 ^ 0x80000000;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 8) = (a1 - 1);
    }
  }
  return result;
}

uint64_t sub_10012C4F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100991750;
  v4[1] = &unk_100991768;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100991780;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_10012C590(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = a1;
  v1 = sub_1000BA294(&qword_100BD3A30);
  State.init(wrappedValue:)(v3, v1);
  return v3[1];
}

uint64_t sub_10012C5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  sub_1000BA76C(0, v5, v6, a4);
  return sub_10012C60C(v4 + v7, v5, v6, v8);
}

uint64_t sub_10012C60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for WireframeScrollInterestView(0, a2, a3, a4);
  return sub_10012C634();
}

uint64_t sub_10012C634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = sub_1000BA294(&qword_100BD3A38);
  State.wrappedValue.getter(&v3, v0);
  v1 = v3;
  if (v3)
  {
    sub_1008C1194();
    swift_release(v1);
  }
  v3 = 0;
  return State.wrappedValue.setter(&v3, v0);
}

uint64_t type metadata accessor for SunriseSunsetDetailAssembly()
{
  return objc_opt_self(_TtC7Weather27SunriseSunsetDetailAssembly);
}

uint64_t sub_10012C6D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for SunriseSunsetDetailViewStateReducer, (uint64_t)&off_100B88470, a1);
}

double sub_10012C6E8(__n128 a1)
{
  return sub_10000BC28(a1);
}

uint64_t type metadata accessor for SavedLocationsStoreObserver()
{
  return objc_opt_self(_TtC7Weather27SavedLocationsStoreObserver);
}

void sub_10012C71C(_QWORD *a1)
{
  if ((sub_10012C754() & 1) != 0)
    sub_100042C60(a1);
  else
    sub_10076A4C8(a1);
}

uint64_t sub_10012C754()
{
  uint64_t *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 v7;

  v1 = *((unsigned __int8 *)v0 + 112);
  if (v1 != 2)
    return v1 & 1;
  v2 = *v0;
  v3 = static Settings.SavedLocations.useCoherence.getter();
  sub_10005329C(&qword_100C03F30, v4, (uint64_t (*)(uint64_t))type metadata accessor for SavedLocationsStoreObserver, (uint64_t)&unk_1009C6CBC);
  Configurable.setting<A>(_:)(v3, v2, v5);
  swift_release(v3);
  result = v7;
  *((_BYTE *)v0 + 112) = v7;
  return result;
}

void sub_10012C7DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001595D4();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

uint64_t type metadata accessor for PagingContentOffsetsStorage(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCB4B0;
  if (!qword_100BCB4B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PagingContentOffsetsStorage);
  return result;
}

uint64_t sub_10012C880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __int128 v7;
  char v8;
  __int128 v9;
  char v10;

  v1 = sub_1000BA294(&qword_100BCB540);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC7Weather27PagingContentOffsetsStorage__offsets;
  v7 = xmmword_100BCB450;
  v8 = byte_100BCB460;
  v9 = unk_100BCB468;
  v10 = byte_100BCB478;
  Published.init(initialValue:)(&v7, &type metadata for PagingContentOffsets);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  return v0;
}

uint64_t sub_10012C94C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NewsArticleComponentFactory()
{
  return objc_opt_self(_TtC7Weather27NewsArticleComponentFactory);
}

void sub_10012C9D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10015A1D4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for LocationViewerStoreObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_100C02C30;
  if (!qword_100C02C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewerStoreObserver);
  return result;
}

void sub_10012CA88()
{
  sub_100086DA4(&qword_100C02CC0, type metadata accessor for LocationViewerStoreObserver, (uint64_t)&unk_1009C53EC);
}

void sub_10012CAB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100158C7C(319, (unint64_t *)&qword_100BC4B10, type metadata accessor for ContentStatusBanner, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "(";
    v8[2] = &unk_1009AB690;
    sub_100158C7C(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158C7C(319, (unint64_t *)&unk_100BEE1F0, type metadata accessor for ContentStatusBanner, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10012CBB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB895C, 1);
}

void sub_10012CBC4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v2 = v1;
  v35 = a1;
  v3 = sub_1000BA294(&qword_100BC3620);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BEE470);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BEE478);
  v33 = *(_QWORD *)(v15 - 8);
  v34 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BEE480);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v22 = sub_1000BA294(&qword_100BEE488);
  sub_1005345F0(v2, (uint64_t)&v14[*(int *)(v22 + 44)]);
  v30 = v2;
  sub_100037768(v2, (uint64_t)v8, &qword_100BC3620);
  v23 = type metadata accessor for ContentStatusBanner(0);
  LODWORD(v2) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v23);
  sub_100021A14((uint64_t)v8, &qword_100BC3620);
  if ((_DWORD)v2 == 1)
    static AccessibilityChildBehavior.ignore.getter(v24);
  else
    static AccessibilityChildBehavior.contain.getter(v24);
  sub_10007AB60((uint64_t)&unk_100BEE490);
  v26 = v25;
  View.accessibilityElement(children:)(v11, v12, v25);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
  sub_100021A14((uint64_t)v14, &qword_100BEE470);
  sub_100037768(v30, (uint64_t)v6, &qword_100BC3620);
  v27 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v23) == 1;
  sub_100021A14((uint64_t)v6, &qword_100BC3620);
  v36[0] = v12;
  v36[1] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v29 = v34;
  View.accessibilityHidden(_:)(v27, v34, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v29);
  sub_1000787D4((uint64_t)v21, v35, &qword_100BEE480);
}

void sub_10012CEBC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for LocationViewBannerContainer(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037768(v2, (uint64_t)v9, &qword_100BC3620);
  sub_100080C0C(v2, (uint64_t)v6, type metadata accessor for LocationViewBannerContainer);
  v10 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10) == 1)
  {
    v11 = sub_1000BA294(&qword_100BEE180);
    State.wrappedValue.getter(a1, v11);
    sub_1000BF3B4();
    sub_100021A14((uint64_t)v9, &qword_100BC3620);
  }
  else
  {
    sub_1000BF3B4();
    sub_10007802C((uint64_t)v9, (uint64_t)a1, type metadata accessor for ContentStatusBanner);
  }
}

uint64_t sub_10012D018(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for WeatherNetworkActivity.Label(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = v4[0];
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = "\b";
    v4[8] = "\b";
    v4[9] = "\b";
    v4[10] = &unk_1009CEF98;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10012D0B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10000F1FC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), a1);
}

uint64_t sub_10012D0C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v7 = sub_1000D2074();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = (_QWORD *)(v10 - v9);
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Weather27LocationNetworkActivityFlow_lock);
  v15 = v3;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v12 = sub_1000CD6E8();
  swift_retain();
  Lock.sync<A>(_:)(v11, sub_10012D0B4, v14, v12, v7, &protocol witness table for UnfairLock);
  swift_release(v19);
  sub_1000166C0();
  return sub_10013053C((uint64_t)v11);
}

double sub_10012D198@<D0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_10012D1A4(v1[2], v1[3], v1[4], v1[5], a1);
}

double sub_10012D1A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;

  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7Weather27LocationNetworkActivityFlow_rootActivity);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7Weather27LocationNetworkActivityFlow_rootActivity) = a2;
  swift_release(v10);
  v11 = (_QWORD *)(a1 + OBJC_IVAR____TtC7Weather27LocationNetworkActivityFlow_locationId);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7Weather27LocationNetworkActivityFlow_locationId + 8);
  *v11 = a3;
  v11[1] = a4;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v12);
  v13 = sub_1000BA294(&qword_100BCB640);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1009898A0;
  *(_QWORD *)(v14 + 32) = a2;
  v18 = v14;
  specialized Array._endMutation()(v14);
  v15 = (uint64_t)a5 + *(int *)(type metadata accessor for NetworkActivityCompletion(0) + 24);
  v16 = type metadata accessor for NWActivity.CompletionReason(0);
  _s7Weather24LocationCompositionStateOwst_0(v15, 1, 1, v16);
  *a5 = v18;
  a5[1] = (uint64_t)_swiftEmptyArrayStorage;
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

void sub_10012D29C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[9];
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for LocationComponentHeaderViewModel(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = "\t";
    sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        v12[4] = "\t";
        v12[5] = "\t";
        v12[6] = "\t";
        sub_100158B48(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
        if (v9 <= 0x3F)
        {
          v12[7] = *(_QWORD *)(v8 - 8) + 64;
          v12[8] = &unk_1009DD6E8;
          sub_100158880(319);
          if (v11 <= 0x3F)
          {
            v13 = *(_QWORD *)(v10 - 8) + 64;
            v14 = v13;
            swift_initStructMetadata(a1, 256, 11, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_10012D3BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC74F0, 1);
}

void sub_10012D3CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_1000BA294(&qword_100C175A0);
  sub_100082DA8(v2, a2 + *(int *)(v4 + 44));
}

void sub_10012D414(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1009A0028;
    v6[2] = &unk_1009A0058;
    v6[3] = "!";
    v6[4] = &unk_1009A0058;
    v6[5] = &unk_1009A00D0;
    v6[6] = &unk_1009A00D0;
    v6[7] = &unk_1009A00B8;
    sub_100158E58(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

uint64_t sub_10012D4D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB5200, 1);
}

unint64_t sub_10012D4E0()
{
  unint64_t result;

  result = qword_100C0E430;
  if (!qword_100C0E430)
  {
    result = swift_getWitnessTable(&unk_1009D369C, &type metadata for LocationAuthorizationAction);
    atomic_store(result, (unint64_t *)&qword_100C0E430);
  }
  return result;
}

uint64_t sub_10012D51C@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v4, &v8);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 28532;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for LocationAuthorizationState;
  *(_BYTE *)(inited + 48) = a1;
  v6 = Dictionary.init(dictionaryLiteral:)(inited);
  a2[3] = sub_1000BA294(&qword_100BCEAE0);
  a2[4] = sub_100159BC8();
  sub_10005F164(a2);
  return ShortDescription.init(name:_:)(0x6843737574617473, 0xED00006465676E61, v6, &type metadata for LocationAuthorizationState);
}

uint64_t sub_10012D5FC@<X0>(_QWORD *a1@<X8>)
{
  char *v1;

  return sub_10012D51C(*v1, a1);
}

uint64_t sub_10012D608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10078DC54);
}

uint64_t *sub_10012D614(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = *((_BYTE *)a2 + 16);
  sub_10008D47C(v8, v9);
  v10 = a1[1];
  v11 = *((_BYTE *)a1 + 16);
  a1[1] = v8;
  *((_BYTE *)a1 + 16) = v9;
  sub_1000B15F8(v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  if (a1 != a2)
  {
    v16 = *(int *)(a3 + 28);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    sub_100021A14((uint64_t)a1 + v16, &qword_100BC68C8);
    v19 = sub_1000BA294(&qword_100BC68C8);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for ColorSchemeContrast(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      *v17 = *v18;
      swift_retain();
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
  }
  return a1;
}

void sub_10012D744(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = "\t";
  v2 = type metadata accessor for Text.Measurements(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158B94(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_10012D7E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = sub_1000CD250();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10012DD04();
  v19 = *v0;
  v6 = v19;
  sub_10000AB54((uint64_t)v0, (uint64_t)v4, type metadata accessor for HourlyForecastComponentView);
  v7 = *(unsigned __int8 *)(v2 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v3 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_100B902C8, v9 + 8, v7 | 7);
  sub_10078F658((uint64_t)v4, v10 + v8);
  *(double *)(v10 + v9) = v5;
  swift_bridgeObjectRetain(v6);
  v11 = sub_1000BA294(&qword_100BEECC0);
  v12 = sub_1000BA294(&qword_100BD9AC0);
  sub_10003D2DC(&qword_100C058A8, &qword_100BEECC0);
  v14 = v13;
  v15 = sub_10078F42C();
  sub_10000F1C8(&qword_100C058B0, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  return ForEach<>.init(_:content:)(&v19, sub_10078F69C, v10, v11, &type metadata for String, v12, v14, v15, v16);
}

void sub_10012D960()
{
  qword_100C05790 = 0x403C000000000000;
}

void sub_10012D970(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10012D998(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10012D978()
{
  return sub_10012D7E0();
}

void sub_10012D998(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v36 = a2;
  v3 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000BA294(&qword_100C05868);
  v6 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000BA294(&qword_100C05850);
  v9 = __chkstk_darwin(v34);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC25D0 != -1)
    v9 = swift_once(&qword_100BC25D0, sub_10012D960);
  v12 = qword_100C05790;
  v13 = __chkstk_darwin(v9);
  *(&v34 - 2) = a1;
  v14 = static VerticalAlignment.center.getter(v13);
  v37 = 0;
  sub_10000F1C8(&qword_100BE18E8, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(&v37, v3, v15);
  v16 = sub_1000BA294(&qword_100C05878);
  v17 = sub_10078F3C8();
  v18 = LazyHStack.init(alignment:spacing:pinnedViews:content:)(v14, v12, 0, v5, sub_10012D978, &v34 - 4, v16, v17);
  v19 = static Edge.Set.horizontal.getter(v18);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_BYTE *)(a1 + 16);
  sub_10008D47C(v20, v21);
  sub_100109B54();
  v23 = v22;
  sub_1000B15F8(v20, v21);
  if ((v23 & 1) != 0)
  {
    if (qword_100BC1EB0 != -1)
      swift_once(&qword_100BC1EB0, sub_1002425A4);
    v24 = &qword_100CAE530;
  }
  else
  {
    if (qword_100BC1EB8 != -1)
      swift_once(&qword_100BC1EB8, sub_100129188);
    v24 = &qword_100CAE538;
  }
  v25 = EdgeInsets.init(_all:)(*(double *)v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = v35;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v35);
  v33 = &v11[*(int *)(v34 + 36)];
  *v33 = v19;
  *((double *)v33 + 1) = v25;
  *((_QWORD *)v33 + 2) = v27;
  *((_QWORD *)v33 + 3) = v29;
  *((_QWORD *)v33 + 4) = v31;
  v33[40] = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v32);
  sub_1000F111C((uint64_t)v11, v36, &qword_100C05850);
}

uint64_t sub_10012DC88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC0BA0, 1);
}

uint64_t sub_10012DC98()
{
  uint64_t v0;

  type metadata accessor for SettingReader(0);
  v0 = static SettingReader.shared.getter();
  if (qword_100BC26D0 != -1)
    swift_once(&qword_100BC26D0, sub_10015A978);
  SettingReader.read<A>(_:)(&byte_100C05788);
  return swift_release(v0);
}

double sub_10012DD04()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v23;
  uint64_t v24;

  v0 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012764(0xD000000000000013, 0x8000000100A137D0);
  v24 = v3;
  v5 = v4;
  v7 = v6;
  HIDWORD(v23) = v8 & 1;
  v9 = sub_100017E70(623915057, 0xE400000000000000);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  type metadata accessor for HourlyForecastComponentView(0);
  v16 = type metadata accessor for Text.WritingMode(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v2, 1, 1, v16);
  v17 = v3;
  LOBYTE(v3) = BYTE4(v23);
  Text.Measurements.size(of:in:writingMode:)(v17, v5, HIDWORD(v23), v7, v2, INFINITY, INFINITY);
  v19 = v18;
  sub_100021A14((uint64_t)v2, &qword_100BC39D0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v2, 1, 1, v16);
  Text.Measurements.size(of:in:writingMode:)(v9, v11, v15, v13, v2, INFINITY, INFINITY);
  v21 = v20;
  sub_1000D31B4(v9, v11, v15);
  swift_bridgeObjectRelease(v13);
  sub_1000D31B4(v24, v5, v3);
  swift_bridgeObjectRelease(v7);
  sub_100021A14((uint64_t)v2, &qword_100BC39D0);
  return v19 + v21;
}

unint64_t sub_10012DEC4()
{
  unint64_t result;

  result = qword_100BCEED0;
  if (!qword_100BCEED0)
  {
    result = swift_getWitnessTable(&unk_1009C1EAC, &type metadata for ContentStatusBannerAssembly);
    atomic_store(result, (unint64_t *)&qword_100BCEED0);
  }
  return result;
}

void sub_10012DF00(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ContentStatusBannerViewFactory;
  *(_QWORD *)(a1 + 32) = &off_100B99BA0;
}

double sub_10012DF18(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BE6650);
  v5 = sub_1000BA3CC(v2, v3, v4, (uint64_t)sub_10012DF00);
  swift_release(v5);
  v6 = swift_release(v1);
  v7 = ProxyContainer.public.getter(v6);
  v10 = sub_1000BA3CC((uint64_t)&type metadata for ContentStatusBannerReducer, v8, v9, (uint64_t)LocationSearchEntityFromStringResolver.init());
  swift_release(v10);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_10012DF90()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));

  return v0;
}

uint64_t sub_10012DFBC()
{
  uint64_t v0;

  sub_10012DF90();
  return swift_deallocClassInstance(v0, 73, 7);
}

uint64_t type metadata accessor for WireframeContentPrefetcher()
{
  return objc_opt_self(_TtC7Weather26WireframeContentPrefetcher);
}

uint64_t sub_10012DFFC()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 72) == 1)
    return sub_10012E06C();
  return result;
}

uint64_t sub_10012E010(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1000BA294(&qword_100C16660);
  v4 = swift_allocObject(v3, 28, 7);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 56) = v4;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 0;
  sub_10003C800(a1, v1 + 16);
  return v1;
}

uint64_t sub_10012E06C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void (*)(), _QWORD *, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10009FFE0();
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    result = sub_10012E174();
    if ((result & 1) != 0)
    {
      v9 = v1[5];
      v10 = v1[6];
      sub_1000DB418(v1 + 2, v9);
      v11 = *(void (**)(void (*)(), _QWORD *, uint64_t, uint64_t, __n128))(v10 + 24);
      v12 = swift_retain();
      v11(sub_1009381E8, v1, v9, v10, v12);
      return swift_release(v1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10012E174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10009FFE0();
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + 72) == 1 && !*(_QWORD *)(v1 + 64))
    {
      v10 = *(_QWORD *)(v1 + 56);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v10 + 24));
      sub_100937B04((uint64_t *)(v10 + 16), &v13);
      os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 24));
      v11 = v13;
      swift_release(v10);
      return !v11;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10012E29C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_1009376D0((uint64_t *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  return swift_release(v1);
}

uint64_t type metadata accessor for UnitsConfigurationAssembly()
{
  return objc_opt_self(_TtC7Weather26UnitsConfigurationAssembly);
}

uint64_t sub_10012E31C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for UnitsConfigurationViewStateReducer, (uint64_t)&off_100B96730, a1);
}

double sub_10012E330(__n128 a1)
{
  return sub_100009E90(a1);
}

void sub_10012E344(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v2 = type metadata accessor for SunriseSunsetViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158DB0(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      v6[3] = "\t";
      v6[4] = "\t";
      v6[5] = "\t";
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

__n128 sub_10012E3D8@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __n128 result;

  v2 = sub_10012E4B0();
  v3 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)v2[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_10012E408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1001493F8();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

double sub_10012E458()
{
  double result;

  if (qword_100BC1F30 != -1)
    swift_once(&qword_100BC1F30, sub_100149434);
  xmmword_100BD3198 = xmmword_100CAE5F0;
  unk_100BD31A8 = xmmword_100CAE600;
  result = *(double *)&xmmword_100CAE610;
  xmmword_100BD31B8 = xmmword_100CAE610;
  return result;
}

__int128 *sub_10012E4B0()
{
  if (qword_100BC1F38 != -1)
    swift_once(&qword_100BC1F38, sub_10012E458);
  return &xmmword_100BD3198;
}

uint64_t sub_10012E4F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PressureTrend(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009D0DA0;
    v4[2] = &unk_1009D0DA0;
    v4[3] = &unk_1009D0DA0;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_1009D0DA0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10012E574(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;

  if ((sub_100087A7C(a1, a2) & 1) == 0)
    goto LABEL_23;
  v4 = (int *)type metadata accessor for PressureComponentViewModel(0);
  v5 = sub_1000BA7EC(v4[5]);
  v9 = v9 && v6 == v8;
  if ((v9 || (sub_100099264(v5, v6, v7, v8) & 1) != 0)
    && ((v10 = sub_1000BA7EC(v4[6]), v9) ? (v14 = v11 == v13) : (v14 = 0),
        (v14 || (sub_100099264(v10, v11, v12, v13) & 1) != 0)
     && ((v15 = sub_1000BA7EC(v4[7]), v9) ? (v19 = v16 == v18) : (v19 = 0),
         (v19 || (sub_100099264(v15, v16, v17, v18) & 1) != 0)
      && *(double *)(a1 + v4[8]) == *(double *)(a2 + v4[8])
      && ((v20 = sub_1000BA7EC(v4[9]), v9) ? (v24 = v21 == v23) : (v24 = 0), !v24))))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0);
  }
  else
  {
LABEL_23:
    sub_100079F70();
  }
}

void sub_10012E64C(_DWORD *a1@<X8>)
{
  *a1 = 16843009;
}

uint64_t type metadata accessor for NotificationsStoreObserver()
{
  return objc_opt_self(_TtC7Weather26NotificationsStoreObserver);
}

void sub_10012E67C(char a1)
{
  __asm { BR              X10 }
}

void sub_10012E6A8(uint64_t a1, uint64_t a2)
{
  sub_10001AB7C(a2);
}

uint64_t sub_10012E6B4()
{
  sub_100502568();
  return sub_1005025A4();
}

void sub_10012E6C0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10012E6E4()
{
  sub_100502568();
  return sub_1005025A4();
}

void sub_10012E6F0(uint64_t a1, uint64_t a2)
{
  sub_10001AB7C(a2);
}

uint64_t sub_10012E704(__int128 *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = sub_10009FFE0();
  static OS_dispatch_queue.main.getter(v7);
  v8 = type metadata accessor for Debouncer(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = sub_1000E7150();
  *(_QWORD *)(v3 + 136) = v9;
  static OS_dispatch_queue.main.getter(v9);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v3 + 144) = sub_1000E7150();
  sub_10003C800(a1, v3 + 16);
  sub_10003C800(a2, v3 + 56);
  sub_10003C800(a3, v3 + 96);
  return v3;
}

void sub_10012E7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  _QWORD v11[6];
  uint64_t v12;

  v11[1] = a2;
  v3 = type metadata accessor for Location.Identifier(0);
  v11[4] = *(_QWORD *)(v3 - 8);
  v11[5] = v3;
  __chkstk_darwin(v3);
  v4 = type metadata accessor for Location(0);
  v11[2] = *(_QWORD *)(v4 - 8);
  v11[3] = v4;
  __chkstk_darwin(v4);
  v12 = type metadata accessor for NotificationSubscription.Kind(0);
  __chkstk_darwin(v12);
  v5 = type metadata accessor for NotificationSubscription.Location(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for NotificationsAction(0);
  __chkstk_darwin(v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(a1, (uint64_t)v8, v9);
  v10 = (char *)sub_10012E948 + 4 * byte_1009A9E66[swift_getEnumCaseMultiPayload(v8, v6)];
  __asm { BR              X10 }
}

void sub_10012E948()
{
  uint64_t v0;

  sub_1000215BC(v0, type metadata accessor for NotificationsAction);
}

uint64_t type metadata accessor for NotificationsOptInAssembly()
{
  return objc_opt_self(_TtC7Weather26NotificationsOptInAssembly);
}

uint64_t sub_10012EB1C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for NotificationsOptInViewStateReducer, (uint64_t)&off_100B60E08, a1);
}

uint64_t sub_10012EB30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for NotificationsOptInViewModelFactory();
  result = swift_allocObject(v2, 17, 7);
  *(_BYTE *)(result + 16) = 6;
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B88480;
  *a1 = result;
  return result;
}

uint64_t sub_10012EB7C()
{
  return sub_10000C09C();
}

uint64_t type metadata accessor for NetworkConnectivityMonitor()
{
  return objc_opt_self(_TtC7Weather26NetworkConnectivityMonitor);
}

uint64_t sub_10012EBB4(uint64_t a1)
{
  uint64_t v1;

  return sub_10012EBBC(a1, v1);
}

uint64_t sub_10012EBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for NWPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_100B9E690, v10 + 8, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v9, v7, v4);
  *(_QWORD *)(v11 + v10) = a2;
  swift_retain();
  asyncMain(block:)(sub_100967510, v11);
  return swift_release(v11);
}

void sub_10012ECAC()
{
  uint64_t v0;

  sub_10002EFF4(v0);
}

_QWORD *sub_10012ECB8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v25;

  v3 = v2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  sub_10009FFE0();
  v3[4] = 0;
  v3[5] = 0;
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BC29A8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = v18;
  v20 = sub_1000BA294(&qword_100BC29B0);
  sub_100081288((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v9, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  v3[6] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000032, 0x80000001009F0D40, v16, v12, v8, 0);
  v3[2] = a1;
  v3[3] = a2;
  return v3;
}

uint64_t type metadata accessor for MoonDetailViewStateReducer()
{
  return objc_opt_self(_TtC7Weather26MoonDetailViewStateReducer);
}

uint64_t sub_10012EE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100536D40);
}

uint64_t sub_10012EEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100536C90);
}

void sub_10012EEAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[25];

  v10[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[1] = "\t";
  sub_100158C7C(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(v2 - 8) + 64;
    v10[3] = &unk_1009AB678;
    sub_100158C7C(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158AF0(319);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v10[6] = "\t";
        v10[7] = "\t";
        v10[8] = "\t";
        v10[9] = &unk_1009AB690;
        v10[10] = "\t";
        v10[11] = &unk_1009AB6A8;
        v10[12] = (char *)&value witness table for Builtin.NativeObject + 64;
        v10[13] = "(";
        v10[14] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[15] = &unk_1009AB6A8;
        v10[16] = "(";
        v10[17] = "(";
        v8 = type metadata accessor for Text.Measurements(319);
        if (v9 <= 0x3F)
        {
          v10[18] = *(_QWORD *)(v8 - 8) + 64;
          v10[19] = "\t";
          v10[20] = &unk_1009AB6C0;
          v10[21] = &unk_1009AB6D8;
          v10[22] = &unk_1009AB6F0;
          v10[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
          v10[24] = (char *)&value witness table for Builtin.NativeObject + 64;
          swift_initStructMetadata(a1, 256, 25, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10012F03C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8704, 1);
}

uint64_t sub_10012F04C()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for SettingReader(0);
  v0 = static SettingReader.shared.getter();
  v1 = static Settings.VFX.overrideConditionBackground.getter();
  SettingReader.read<A>(_:)(&byte_100BED560);
  swift_release(v0);
  return swift_release(v1);
}

uint64_t sub_10012F098(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10012F100(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009AADF0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LocationViewerInputFactory()
{
  return objc_opt_self(_TtC7Weather26LocationViewerInputFactory);
}

void sub_10012F190(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE __dst[98];

  memcpy(__dst, v2, sizeof(__dst));
  sub_10003ECC0(a1, a2);
}

uint64_t sub_10012F1E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB4DA0, 1);
}

void sub_10012F1F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  v4[1] = "\t";
  sub_100158B94(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for LocationFooterViewRowStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_100C048A8;
  if (!qword_100C048A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationFooterViewRowStyle);
  return result;
}

ValueMetadata *type metadata accessor for LocationContentOfflineView()
{
  return &type metadata for LocationContentOfflineView;
}

unint64_t sub_10012F2B0()
{
  unint64_t result;

  result = qword_100C00C78;
  if (!qword_100C00C78)
  {
    result = swift_getWitnessTable(&unk_1009C2E94, &type metadata for LocationContentOfflineView);
    atomic_store(result, (unint64_t *)&qword_100C00C78);
  }
  return result;
}

uint64_t sub_10012F2F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[19];

  v15[0] = "p";
  result = type metadata accessor for DailyForecastComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v15[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for FeelsLikeComponentViewModel(319);
    if (v4 <= 0x3F)
    {
      v15[2] = *(_QWORD *)(result - 8) + 64;
      v15[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v15[4] = &unk_1009CBA38;
      result = type metadata accessor for MapComponentViewModel(319);
      if (v5 <= 0x3F)
      {
        v15[5] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for MoonComponentViewModel(319);
        if (v6 <= 0x3F)
        {
          v15[6] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for NewsArticleComponentViewModel(319);
          if (v7 <= 0x3F)
          {
            v15[7] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for NextHourPrecipitationComponentViewModel(319);
            if (v8 <= 0x3F)
            {
              v15[8] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for NotificationsOptInComponentViewModel(319);
              if (v9 <= 0x3F)
              {
                v15[9] = *(_QWORD *)(result - 8) + 64;
                v15[10] = &unk_1009CBA50;
                result = type metadata accessor for PressureComponentViewModel(319);
                if (v10 <= 0x3F)
                {
                  v15[11] = *(_QWORD *)(result - 8) + 64;
                  v15[12] = &unk_1009CBA68;
                  result = type metadata accessor for SevereAlertComponentViewModel(319);
                  if (v11 <= 0x3F)
                  {
                    v15[13] = *(_QWORD *)(result - 8) + 64;
                    result = type metadata accessor for SunriseSunsetViewModel(319);
                    if (v12 <= 0x3F)
                    {
                      v15[14] = *(_QWORD *)(result - 8) + 64;
                      v15[15] = &unk_1009CBA80;
                      result = type metadata accessor for UVIndexComponentViewModel(319);
                      if (v13 <= 0x3F)
                      {
                        v15[16] = *(_QWORD *)(result - 8) + 64;
                        v15[17] = &unk_1009CBA98;
                        result = type metadata accessor for WindComponentViewModel(319);
                        if (v14 <= 0x3F)
                        {
                          v15[18] = *(_QWORD *)(result - 8) + 64;
                          swift_initEnumMetadataMultiPayload(a1, 256, 19, v15);
                          return 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationAuthorizationState()
{
  return &type metadata for LocationAuthorizationState;
}

unint64_t sub_10012F4DC()
{
  unint64_t result;

  result = qword_100BCEAF8;
  if (!qword_100BCEAF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationAuthorizationState, &type metadata for LocationAuthorizationState);
    atomic_store(result, (unint64_t *)&qword_100BCEAF8);
  }
  return result;
}

void LocationAuthorizationState.shortDescription.getter(char a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCEAE0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_10012F58C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  ShortDescription.init(name:_:)(0x7265746544746F6ELL, 0xED000064656E696DLL, v4, &type metadata for LocationAuthorizationState);
  v1[3] = v0;
  v1[4] = sub_100159BC8();
  v5 = sub_10005F164(v1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 32))(v5, v2, v0);
}

void sub_10012F764()
{
  char *v0;

  LocationAuthorizationState.shortDescription.getter(*v0);
}

void sub_10012F770(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = " ";
  sub_10015A1D4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for InteractionDonationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE8C78;
  if (!qword_100BE8C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InteractionDonationManager);
  return result;
}

void sub_10012F82C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = type metadata accessor for ScenePhase(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100099864();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, a2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v3, v5);
  if (v7 == enum case for ScenePhase.active(_:))
  {
    sub_1000168EC(v2);
  }
  else if (v7 != enum case for ScenePhase.inactive(_:) && v7 != enum case for ScenePhase.background(_:))
  {
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }
}

_QWORD *sub_10012F8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v31;

  v6 = v4;
  v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100099234();
  sub_100099984();
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_100098728();
  v16 = v15 - v14;
  v17 = (uint64_t)v6 + OBJC_IVAR____TtC7Weather26InteractionDonationManager_previousDonatedLocationIdentifier;
  v18 = sub_100098AA0();
  _s7Weather24LocationCompositionStateOwst_0(v17, 1, 1, v18);
  v25 = OBJC_IVAR____TtC7Weather26InteractionDonationManager_queue;
  v19 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  static DispatchQoS.utility.getter(v19);
  v31 = _swiftEmptyArrayStorage;
  sub_100086DA4((unint64_t *)&qword_100BC29A8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = v20;
  v22 = sub_1000BA294(&qword_100BC29B0);
  sub_100081288((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v22, v23, v11, v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  *(_QWORD *)((char *)v6 + v25) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100A08220, v16, v5, v10, 0);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  return v6;
}

ValueMetadata *type metadata accessor for FixedBackgroundButtonStyle()
{
  return &type metadata for FixedBackgroundButtonStyle;
}

unint64_t sub_10012FB00()
{
  unint64_t result;

  result = qword_100C11078;
  if (!qword_100C11078)
  {
    result = swift_getWitnessTable(&unk_1009D5D88, &type metadata for FixedBackgroundButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100C11078);
  }
  return result;
}

uint64_t sub_10012FB3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ButtonStyleConfiguration.label.getter(v4);
  v8 = static Color.clear.getter(v7);
  v9 = static Edge.Set.all.getter(v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v6, v2);
  v10 = a1 + *(int *)(sub_1000BA294(&qword_100C110E8) + 36);
  *(_QWORD *)v10 = v8;
  *(_BYTE *)(v10 + 8) = v9;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10012FC04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC50AC, 1);
}

uint64_t sub_10012FC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v2 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_10012FC58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v4 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10012FCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v4 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_10012FD58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for DisplayMetrics(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t type metadata accessor for DisplayMetricsChangeAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0BEC0;
  if (!qword_100C0BEC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DisplayMetricsChangeAction);
  return result;
}

ValueMetadata *type metadata accessor for DefaultButtonStyleModifier()
{
  return &type metadata for DefaultButtonStyleModifier;
}

uint64_t type metadata accessor for DebugOfflineViewController()
{
  return objc_opt_self(_TtC7Weather26DebugOfflineViewController);
}

uint64_t sub_10012FE1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 != *a2 || v5 != v6)
  {
    sub_100099264(v4, v5, *a2, v6);
    result = sub_10007A150();
    if ((v9 & 1) == 0)
      return result;
  }
  v10 = a1[3];
  v11 = a2[3];
  if (v10)
  {
    if (!v11)
      return 0;
    v12 = a1[2];
    v13 = a2[2];
    if (v12 != v13 || v10 != v11)
    {
      sub_100099264(v12, v10, v13, v11);
      result = sub_10007A150();
      if ((v15 & 1) == 0)
        return result;
    }
  }
  else if (v11)
  {
    return 0;
  }
  v16 = a1[4];
  v17 = a1[5];
  v18 = a2[4];
  v19 = a2[5];
  if (v16 != v18 || v17 != v19)
  {
    sub_100099264(v16, v17, v18, v19);
    result = sub_10007A150();
    if ((v21 & 1) == 0)
      return result;
  }
  v22 = a1[6];
  v23 = a1[7];
  v24 = a2[6];
  v25 = a2[7];
  if (v22 != v24 || v23 != v25)
  {
    sub_100099264(v22, v23, v24, v25);
    result = sub_10007A150();
    if ((v27 & 1) == 0)
      return result;
  }
  v28 = a1[8];
  v29 = a1[9];
  v30 = a2[8];
  v31 = a2[9];
  if (v28 != v30 || v29 != v31)
  {
    sub_100099264(v28, v29, v30, v31);
    result = sub_10007A150();
    if ((v33 & 1) == 0)
      return result;
  }
  v34 = a1[10];
  v35 = a1[11];
  v36 = a2[10];
  v37 = a2[11];
  if (v34 != v36 || v35 != v37)
  {
    sub_100099264(v34, v35, v36, v37);
    result = sub_10007A150();
    if ((v39 & 1) == 0)
      return result;
  }
  v40 = a1[13];
  v41 = a2[13];
  if (v40)
  {
    if (!v41)
      return 0;
    v42 = a1[12];
    v43 = a2[12];
    if (v42 != v43 || v40 != v41)
    {
      sub_100099264(v42, v40, v43, v41);
      result = sub_10007A150();
      if ((v45 & 1) == 0)
        return result;
    }
  }
  else if (v41)
  {
    return 0;
  }
  v46 = a1[14];
  v47 = a1[15];
  v48 = a2[14];
  v49 = a2[15];
  if (v46 != v48 || v47 != v49)
  {
    sub_100099264(v46, v47, v48, v49);
    result = sub_10007A150();
    if ((v51 & 1) == 0)
      return result;
  }
  v52 = a1[16];
  v53 = a1[17];
  v54 = a2[16];
  v55 = a2[17];
  if (v52 != v54 || v53 != v55)
  {
    sub_100099264(v52, v53, v54, v55);
    result = sub_10007A150();
    if ((v57 & 1) == 0)
      return result;
  }
  v58 = a1[18];
  v59 = a1[19];
  v60 = a2[18];
  v61 = a2[19];
  if (v58 != v60 || v59 != v61)
  {
    sub_100099264(v58, v59, v60, v61);
    result = sub_10007A150();
    if ((v63 & 1) == 0)
      return result;
  }
  v64 = a1[21];
  v65 = a2[21];
  if (v64)
  {
    if (v65)
    {
      v66 = a1[20];
      v67 = a2[20];
      if (v66 != v67 || v64 != v65)
      {
        sub_100099264(v66, v64, v67, v65);
        result = sub_10007A150();
        if ((v69 & 1) == 0)
          return result;
      }
      goto LABEL_70;
    }
    return 0;
  }
  if (v65)
    return 0;
LABEL_70:
  v70 = a1[22];
  v71 = a1[23];
  v72 = a2[22];
  v73 = a2[23];
  v74 = v70 == v72 && v71 == v73;
  if (v74 || (sub_100099264(v70, v71, v72, v73), result = sub_10007A150(), (v75 & 1) != 0))
  {
    v76 = a1[24];
    v77 = a1[25];
    v78 = a2[24];
    v79 = a2[25];
    if (v76 == v78 && v77 == v79)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v78, v79, 0);
  }
  return result;
}

uint64_t sub_100130038(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for AutomationInfoProperty(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001300A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB44D0, 1);
}

unint64_t sub_1001300B0()
{
  unint64_t result;

  result = qword_100BEDAB8;
  if (!qword_100BEDAB8)
  {
    result = swift_getWitnessTable(&unk_1009CF91C, &type metadata for AppStateTransitionModifier);
    atomic_store(result, (unint64_t *)&qword_100BEDAB8);
  }
  return result;
}

uint64_t type metadata accessor for ActiveUserAnalyticsManager()
{
  return objc_opt_self(_TtC7Weather26ActiveUserAnalyticsManager);
}

uint64_t sub_10013010C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_100098778();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for TaskPriority(0);
  _s7Weather24LocationCompositionStateOwst_0(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (v5 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_100B85690, v14 + 8, v12 | 7);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v15 + v13, v6, v3);
  *(_QWORD *)(v15 + v14) = v1;
  swift_retain();
  v16 = sub_100966894(v10, (uint64_t)&unk_100BF8300, v15);
  return swift_release(v16);
}

uint64_t type metadata accessor for ActiveLocationModelFactory()
{
  return objc_opt_self(_TtC7Weather26ActiveLocationModelFactory);
}

uint64_t type metadata accessor for ActiveLocationInputFactory()
{
  return objc_opt_self(_TtC7Weather26ActiveLocationInputFactory);
}

uint64_t type metadata accessor for WidgetReloadStoreObserver()
{
  return objc_opt_self(_TtC7Weather25WidgetReloadStoreObserver);
}

double sub_1001302A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32))).n128_u64[0];
  return result;
}

uint64_t sub_100130300(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_1009D78D0;
  result = type metadata accessor for WeatherDescription(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SessionScenePhaseObserver()
{
  return objc_opt_self(_TtC7Weather25SessionScenePhaseObserver);
}

uint64_t type metadata accessor for NotificationsOptInReducer()
{
  return objc_opt_self(_TtC7Weather25NotificationsOptInReducer);
}

uint64_t type metadata accessor for NotificationsOptInMonitor()
{
  return objc_opt_self(_TtC7Weather25NotificationsOptInMonitor);
}

_QWORD *sub_1001303F8(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  v7[13] = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0x6163696669746F4ELL, 0xED0000736E6F6974);
  v7[2] = a1;
  v7[3] = a2;
  sub_10003C800(a3, (uint64_t)(v7 + 4));
  v7[9] = a4;
  v7[10] = a5;
  v7[11] = a6;
  v7[12] = a7;
  return v7;
}

uint64_t sub_1001304C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v4 = (uint64_t)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for NWActivity.CompletionReason(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t sub_10013053C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NetworkActivityCompletion(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100130578(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10015949C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for NetworkActivityCompletion(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCC7C8;
  if (!qword_100BCC7C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NetworkActivityCompletion);
  return result;
}

uint64_t sub_100130628(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000290CC(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100130640()
{
  unint64_t result;

  result = qword_100BC5AE0;
  if (!qword_100BC5AE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MapTransitionNamespaceKey, &type metadata for MapTransitionNamespaceKey);
    atomic_store(result, (unint64_t *)&qword_100BC5AE0);
  }
  return result;
}

uint64_t sub_10013067C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  _BYTE v4[24];

  result = swift_beginAccess(&static MapTransitionNamespaceKey.defaultValue, v4, 0, 0);
  v3 = byte_100BC5A48;
  *(_QWORD *)a1 = static MapTransitionNamespaceKey.defaultValue;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_1001306CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100142D90();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_10013071C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_1009AAE90;
  sub_100154418(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10013079C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LocationViewerPageControl(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001307DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10013079C(&qword_100BED050, (uint64_t)&unk_1009AAEF8);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10013083C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10013079C(&qword_100BED050, (uint64_t)&unk_1009AAEF8);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001308A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1001308F0();
  *a1 = result;
  return result;
}

uint64_t sub_1001308CC()
{
  return sub_10013079C(&qword_100BED040, (uint64_t)&unk_1009AAEA8);
}

uint64_t sub_1001308F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_1000BA294(&qword_100BECFA0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100098728();
  v4 = v3 - v2;
  type metadata accessor for LocationViewerPageControl(0);
  Binding.projectedValue.getter(v0);
  v5 = type metadata accessor for LocationViewerPageControl.Coordinator(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v6 + OBJC_IVAR____TtCV7Weather25LocationViewerPageControl11Coordinator_pages) = _swiftEmptyArrayStorage;
  sub_1001543D0(v4, v6 + OBJC_IVAR____TtCV7Weather25LocationViewerPageControl11Coordinator_selection);
  return v6;
}

uint64_t sub_1001309A0()
{
  return sub_100029908() & 1;
}

void sub_1001309BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100154418(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for LocationViewerPageControl.Coordinator(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BECF08, (uint64_t)&nominal type descriptor for LocationViewerPageControl.Coordinator);
}

ValueMetadata *type metadata accessor for LocationViewConfiguration()
{
  return &type metadata for LocationViewConfiguration;
}

unint64_t sub_100130A58()
{
  unint64_t result;

  result = qword_100C15C38;
  if (!qword_100C15C38)
  {
    result = swift_getWitnessTable(&unk_1009DB760, &type metadata for LocationViewConfiguration);
    atomic_store(result, (unint64_t *)&qword_100C15C38);
  }
  return result;
}

unint64_t sub_100130A94()
{
  unint64_t result;

  result = qword_100C08D28;
  if (!qword_100C08D28)
  {
    result = swift_getWitnessTable(&unk_1009DB788, &type metadata for LocationViewConfiguration);
    atomic_store(result, (unint64_t *)&qword_100C08D28);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationViewConfiguration.Row()
{
  return &type metadata for LocationViewConfiguration.Row;
}

uint64_t sub_100130AE0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_10006A1FC(*v1, a1);
}

uint64_t sub_100130AEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "H";
  result = type metadata accessor for DisplayMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1009D3D58;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100130B68()
{
  return sub_100051B90(&qword_100C0E940, type metadata accessor for LocationRegularViewLayout, (uint64_t)&unk_1009D3D70);
}

ValueMetadata *type metadata accessor for LocationRegularViewLayout.Metrics()
{
  return &type metadata for LocationRegularViewLayout.Metrics;
}

uint64_t sub_100130BA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009CEB30;
  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LocationPreviewViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0A730;
  if (!qword_100C0A730)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationPreviewViewAction);
  return result;
}

uint64_t sub_100130C4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1009AA820;
  v4[1] = &unk_1009AA838;
  v4[2] = &unk_1009AA820;
  v4[3] = &unk_1009AA820;
  result = type metadata accessor for WeatherConditionBackgroundTimeData(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

double destroy for HumidityComponentViewModel(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16)).n128_u64[0];
  return result;
}

uint64_t storeEnumTagSinglePayload for HumidityComponentViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HumidityComponentViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void sub_100130D58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  sub_10004A298();
}

ValueMetadata *type metadata accessor for FullscreenMapPresentation()
{
  return &type metadata for FullscreenMapPresentation;
}

uint64_t sub_100130D98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for DetailCondition(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for DetailChartSelection(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100130E34(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009924F0;
    v4[2] = &unk_100992508;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WireframeInterestManager()
{
  return objc_opt_self(_TtC7Weather24WireframeInterestManager);
}

_QWORD *sub_100130ED0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[4] = dispatch_group_create();
  v2[5] = &_swiftEmptyDictionarySingleton;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

BOOL sub_100130F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100099864();
  static DispatchTime.now()(v3);
  v4 = OS_dispatch_group.wait(timeout:)(v0) & 1;
  sub_100098820(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return (static DispatchTimeoutResult.== infix(_:_:)(v4, 0) & 1) == 0;
}

uint64_t type metadata accessor for SidebarVisibilityMonitor()
{
  return objc_opt_self(_TtC7Weather24SidebarVisibilityMonitor);
}

unint64_t sub_100130FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDAB40;
  if (!qword_100BDAB40)
  {
    v1 = type metadata accessor for SidebarVisibilityMonitor();
    result = swift_getWitnessTable(&protocol conformance descriptor for SidebarVisibilityMonitor, v1);
    atomic_store(result, (unint64_t *)&qword_100BDAB40);
  }
  return result;
}

Swift::Void __swiftcall SidebarVisibilityMonitor.applicationWillEnterForeground()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (qword_100BC2650 != -1)
    swift_once(&qword_100BC2650, sub_10015AA64);
  v2 = qword_100CAF4B8;
  v3 = sub_100130FB4();
  Configurable.setting<A>(_:)(v2, v1, v3);
  v4 = swift_allocObject(&unk_100B6E8D8, 25, 7);
  *(_QWORD *)(v4 + 16) = v0;
  *(_BYTE *)(v4 + 24) = v5;
  swift_retain();
  asyncMain(block:)(sub_10035B97C, v4);
  swift_release(v4);
}

uint64_t sub_1001310AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[2];

  result = type metadata accessor for SevereAlertComponentViewModel(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = a4;
    swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100131118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001310AC(a1, a2, a3, (uint64_t)"\t");
}

uint64_t sub_100131124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotificationsOptInAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100131168(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _BYTE v5[32];
  _QWORD v6[5];

  v6[0] = &unk_1009CE010;
  v6[1] = &unk_1009CE028;
  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v5, *(_QWORD *)(result - 8) + 64, &unk_1009CE010);
    v6[2] = v5;
    v6[3] = &unk_1009CE040;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 5, v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100131218(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NotificationsOptInAction(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013125C()
{
  return sub_100131218(&qword_100C09A58, (uint64_t)&unk_1009CE058);
}

void sub_100131280(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "\t";
  v6[1] = "\t";
  sub_100158DB0(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for NewsArticleComponentViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1009B7038;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_100131318(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1000150CC(*v1, a1);
}

uint64_t sub_100131320(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9034, 1);
}

uint64_t type metadata accessor for MainInitialStateProvider()
{
  return objc_opt_self(_TtC7Weather24MainInitialStateProvider);
}

void sub_100131354()
{
  if (sub_10000AB80() || sub_100132338())
    sub_10004A298();
  else
    sub_10005B5D0();
}

uint64_t sub_10013138C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    v4 = type metadata accessor for Location.Identifier(0);
  }
  else if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for WeatherMapOverlayKind(0);
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v4 = type metadata accessor for LocationModel(0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void *sub_1001313FC(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for Location.Identifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v12 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for LocationModel(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t sub_1001314F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WeatherMapOverlayKind(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for Location.Identifier(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for LocationViewerInteractor()
{
  return objc_opt_self(_TtC7Weather24LocationViewerInteractor);
}

BOOL sub_1001315B0(unsigned __int8 a1, unsigned __int8 a2)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = (a2 & 0x80u) == 0 && a1 == a2;
  v4 = (a2 & 0x80) != 0 && ((a2 ^ a1) & 1) == 0;
  if ((a1 & 0x80) != 0)
    return v4;
  else
    return v3;
}

uint64_t type metadata accessor for LocationViewStateReducer()
{
  return objc_opt_self(_TtC7Weather24LocationViewStateReducer);
}

_QWORD *sub_100131608(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;

  a5[5] = type metadata accessor for LocationViewDescriptor();
  a5[6] = &off_100B978D8;
  a5[2] = a1;
  a5[10] = &type metadata for MapOverlayKindProvider;
  a5[11] = &off_100B75C88;
  v10 = swift_allocObject(&unk_100B7DEB8, 96, 7);
  a5[7] = v10;
  memcpy((void *)(v10 + 16), a2, 0x50uLL);
  a5[15] = type metadata accessor for NotificationsOptInViewModelFactory();
  a5[16] = &off_100B88480;
  a5[12] = a3;
  a5[20] = type metadata accessor for ReportWeatherViewModelFactory();
  a5[21] = &off_100B887A0;
  a5[17] = a4;
  return a5;
}

_QWORD *sub_1001316D0(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  ValueMetadata *v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v8 = *a4;
  v43 = type metadata accessor for LocationViewDescriptor();
  v44 = &off_100B978D8;
  v42[0] = a1;
  v40 = &type metadata for MapOverlayKindProvider;
  v41 = &off_100B75C88;
  v39[0] = swift_allocObject(&unk_100B7DEB8, 96, 7);
  memcpy((void *)(v39[0] + 16), a2, 0x50uLL);
  v37 = type metadata accessor for NotificationsOptInViewModelFactory();
  v38 = &off_100B88480;
  v36[0] = a3;
  v34 = v8;
  v35 = &off_100B887A0;
  v33[0] = a4;
  v9 = type metadata accessor for LocationViewStateReducer();
  v10 = (_QWORD *)swift_allocObject(v9, 176, 7);
  v11 = sub_100068EB4((uint64_t)v42, v43);
  v12 = __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
  v16 = sub_100068EB4((uint64_t)v39, (uint64_t)v40);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100068EB4((uint64_t)v36, v37);
  v22 = __chkstk_darwin(v21);
  v24 = (_QWORD *)((char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  v26 = sub_100068EB4((uint64_t)v33, v34);
  v27 = __chkstk_darwin(v26);
  v29 = (_QWORD *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v30 + 16))(v29, v27);
  v31 = sub_100131608(*v14, v19, *v24, *v29, v10);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
  return v31;
}

void sub_10013192C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[14];

  v10[0] = "(";
  v10[1] = "(";
  v10[2] = "(";
  v10[3] = "(";
  v10[4] = "(";
  v10[5] = "(";
  v10[6] = "(";
  sub_1001345CC(319, (unint64_t *)&qword_100BD4C08, type metadata accessor for WeatherData);
  if (v3 <= 0x3F)
  {
    v10[7] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001345CC(319, (unint64_t *)&qword_100BC6C58, type metadata accessor for NewsDataModel);
    if (v5 <= 0x3F)
    {
      v10[8] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001345CC(319, &qword_100C08C30, type metadata accessor for LocationViewModel);
      if (v7 <= 0x3F)
      {
        v10[9] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001345CC(319, (unint64_t *)&unk_100C08C38, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        if (v9 <= 0x3F)
        {
          v10[10] = *(_QWORD *)(v8 - 8) + 64;
          v10[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
          v10[12] = &unk_1009CC0A8;
          v10[13] = &unk_1009CC0A8;
          swift_updateClassMetadata2(a1, 256, 14, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t type metadata accessor for LocationViewModelFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100C08C20;
  if (!qword_100C08C20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewModelFactory);
  return result;
}

BOOL sub_100131A90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v11;

  v2 = sub_1000BA294(&qword_100BC3380);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v11 - v6;
  sub_100037768(a1, (uint64_t)&v11 - v6, &qword_100BC3380);
  v8 = type metadata accessor for LocationWeatherDataState(0);
  v9 = 1;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8) != 1)
  {
    sub_100037768((uint64_t)v7, (uint64_t)v5, &qword_100BC3380);
    v9 = swift_getEnumCaseMultiPayload(v5) != 2;
    sub_1000215BC((uint64_t)v5, type metadata accessor for LocationWeatherDataState);
  }
  sub_100021A14((uint64_t)v7, &qword_100BC3380);
  return v9;
}

uint64_t sub_100131B94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for PreviewLocation(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LocationPreviewModalViewState(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100131C18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v6[0] = v4;
    v6[1] = v4;
    v6[2] = v4;
    result = type metadata accessor for WeatherMapOverlayKind(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      v6[4] = v4;
      swift_initEnumMetadataMultiPayload(a1, 256, 5, v6);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for InteractiveMapViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCCA48;
  if (!qword_100BCCA48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InteractiveMapViewAction);
  return result;
}

ValueMetadata *type metadata accessor for ForegroundEffectViewMask()
{
  return &type metadata for ForegroundEffectViewMask;
}

uint64_t type metadata accessor for ExtendedAppLaunchManager()
{
  return objc_opt_self(_TtC7Weather24ExtendedAppLaunchManager);
}

uint64_t type metadata accessor for EmptySidebarWidthStorage()
{
  return objc_opt_self(_TtC7Weather24EmptySidebarWidthStorage);
}

uint64_t sub_100131D28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA93E4, 1);
}

void sub_100131D38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v2 = type metadata accessor for DetailCondition(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Location(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001345CC(319, (unint64_t *)&qword_100BC3500, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v10[3] = "!";
        sub_1001345CC(319, (unint64_t *)&qword_100BD0C90, type metadata accessor for DetailChartSelection);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_1009979F8;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100131E24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10098C480;
  result = type metadata accessor for DetailHeroChartLollipopPosition(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

unint64_t sub_100131E94()
{
  unint64_t result;

  result = qword_100BC5A78;
  if (!qword_100BC5A78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AutomationInfoEnabledKey, &type metadata for AutomationInfoEnabledKey);
    atomic_store(result, (unint64_t *)&qword_100BC5A78);
  }
  return result;
}

uint64_t type metadata accessor for AirQualityDetailAssembly()
{
  return objc_opt_self(_TtC7Weather24AirQualityDetailAssembly);
}

double sub_100131EF0(__n128 a1)
{
  return sub_100006CA0(a1);
}

uint64_t sub_100131F04()
{
  char IsVerySlow;
  char v1;
  uint64_t result;

  IsVerySlow = DeviceIsVerySlow();
  v1 = DeviceUsesWireframeOnLocationViewScroll();
  result = DeviceIsVerySlow();
  byte_100CAE580 = IsVerySlow;
  byte_100CAE581 = v1;
  byte_100CAE582 = result;
  return result;
}

uint64_t sub_100131F44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1009AE578;
  v4[1] = &unk_1009AE590;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1009AE5A8;
  v4[5] = &unk_1009AE5C0;
  v4[6] = &unk_1009AE5D8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100132000()
{
  char v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000DF738();
  sub_1000AE898();
  __chkstk_darwin(v2);
  sub_1000BB0C0();
  v3 = sub_1000BBE70();
  *v1 = v3;
  sub_1000B4B4C(v3, enum case for DispatchPredicate.onQueue(_:));
  _dispatchPreconditionTest(_:)(v1);
  sub_1000C4B58();
  if ((v0 & 1) != 0)
  {
    if (sub_100130F10())
      sub_10055BF64();
    else
      sub_100132090(0);
    sub_10004A2A0();
  }
  else
  {
    __break(1u);
  }
}

void sub_100132090(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for OSSignpostID(0);
  sub_1000AE898();
  __chkstk_darwin(v5);
  sub_100099864();
  if (!*(_BYTE *)(v1 + 16))
  {
    *(_BYTE *)(v1 + 16) = 2;
    if ((a1 & 1) != 0)
      objc_msgSend((id)objc_opt_self(CATransaction), "setFrameStallSkipRequest:", 1);
    sub_10055BCDC(1);
    sub_10055C1F4();
    v7 = static os_signpost_type_t.event.getter(v6);
    if (qword_100BC2460 != -1)
      swift_once(&qword_100BC2460, sub_1006F3868);
    v8 = qword_100CAF118;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v7, &_mh_execute_header, v8, "WireframeContentLoadSync", 24, 2, v2);
    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  sub_10004A2A0();
}

uint64_t type metadata accessor for VFXTestViewStateReducer()
{
  return objc_opt_self(_TtC7Weather23VFXTestViewStateReducer);
}

uint64_t type metadata accessor for UserNotificationMonitor()
{
  return objc_opt_self(_TtC7Weather23UserNotificationMonitor);
}

void sub_1001321C0()
{
  uint64_t v0;

  swift_getObjectType(v0);
  ApplicationStateMonitor.applicationWillEnterForeground()();
}

void sub_1001321E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1009C5D88;
  v4[1] = &unk_1009C5DA0;
  sub_10076062C(319, (unint64_t *)&unk_100C03500, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_1009C5DB8;
    v4[5] = &unk_1009C5DD0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_100132294(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 88));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_1009C06A8;
      result = swift_initClassMetadata2(a1, 0, 3, v5, a1 + 112);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for StateRestorationManager(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StateRestorationManager);
}

uint64_t sub_100132338()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  uint8_t *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint8_t *v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = v0;
  v2 = *v0;
  v3 = sub_1000BA294(&qword_100BF76C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100C16A08);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BF76B8);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC2780 != -1)
    swift_once(&qword_100BC2780, sub_10015AA8C);
  v12 = qword_100CAF5D0;
  sub_10003D310(&qword_100C16A10, &qword_100BF74E8, (uint64_t)&unk_1009C06E8);
  Configurable.setting<A>(_:)(v12, v2, v13);
  if (v65 != 1)
    return 0;
  if (*((_BYTE *)v1 + 32) == 1)
  {
    v14 = type metadata accessor for SettingReader(0);
    v15 = static SettingReader.shared.getter(v14);
    if (qword_100BC2150 != -1)
      swift_once(&qword_100BC2150, sub_1004EBB40);
    v16 = SettingReader.isEnabled(_:with:)(qword_100CAEC70, 0);
    swift_release(v15);
    if ((v16 & 1) != 0)
    {
      if (qword_100BC2430 != -1)
        swift_once(&qword_100BC2430, sub_1006F37D4);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_1000AECD4(v17, (uint64_t)qword_100CAF088);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v19, v20))
        goto LABEL_32;
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      v22 = "Performance Test: Not restoring state.";
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v22, v21, 2u);
      v37 = (uint64_t)v21;
LABEL_31:
      swift_slowDealloc(v37, -1, -1);
      goto LABEL_32;
    }
  }
  v23 = v1[2];
  v63 = sub_10093D334();
  if (!v24)
  {
    if (qword_100BC2430 != -1)
      swift_once(&qword_100BC2430, sub_1006F37D4);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_1000AECD4(v35, (uint64_t)qword_100CAF088);
    goto LABEL_28;
  }
  v25 = (unint64_t)v24;
  v26 = v63 == qword_100BCDA38 && v24 == off_100BCDA40;
  if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)(v63, v24, qword_100BCDA38, off_100BCDA40, 0) & 1) == 0)
  {
    if (qword_100BC2430 != -1)
      swift_once(&qword_100BC2430, sub_1006F37D4);
    v45 = type metadata accessor for Logger(0);
    sub_1000AECD4(v45, (uint64_t)qword_100CAF088);
    swift_bridgeObjectRetain(v25);
    v19 = Logger.logObject.getter(v46);
    v47 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v19, v47))
    {

      swift_bridgeObjectRelease_n(v25, 2);
      return 0;
    }
    v48 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(64, -1);
    v65 = v49;
    *(_DWORD *)v48 = 136315394;
    v50 = qword_100BCDA38;
    v51 = off_100BCDA40;
    swift_bridgeObjectRetain(off_100BCDA40);
    v64 = sub_1000CE1C8(v50, (unint64_t)v51, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    swift_bridgeObjectRelease(v51);
    *(_WORD *)(v48 + 12) = 2082;
    swift_bridgeObjectRetain(v25);
    v64 = sub_1000CE1C8(v63, v25, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    swift_bridgeObjectRelease_n(v25, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v47, "App state schema hash doesn't match, dropped persisted state. app state schema hash [%s], persisted state schema hash [%{public}s]", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy(v49, 2);
    swift_slowDealloc(v49, -1, -1);
    v37 = v48;
    goto LABEL_31;
  }
  v62 = v23;
  if (qword_100BC2430 != -1)
    swift_once(&qword_100BC2430, sub_1006F37D4);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_1000AECD4(v27, (uint64_t)qword_100CAF088);
  swift_bridgeObjectRetain(v25);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    v65 = v60;
    v61 = v28;
    v59 = v32;
    *(_DWORD *)v32 = 136446210;
    v58 = v32 + 4;
    swift_bridgeObjectRetain(v25);
    v64 = sub_1000CE1C8(v63, v25, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    swift_bridgeObjectRelease_n(v25, 3);
    v33 = v59;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Persisted state data schema hash matches app schema hash: [%{public}s]", v59, 0xCu);
    v34 = v60;
    swift_arrayDestroy(v60, 1);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v25, 2);
  }
  sub_10093DD40((uint64_t)v8);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100021AA4((uint64_t)v8, &qword_100C16A08);
LABEL_28:
    v19 = Logger.logObject.getter(v36);
    v20 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v19, v20))
    {
LABEL_32:

      return 0;
    }
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    v22 = "Persisted state not found";
    goto LABEL_30;
  }
  sub_10009E8CC((uint64_t)v8, (uint64_t)v11, &qword_100BF76B8);
  sub_100078058((uint64_t)&v11[*(int *)(v9 + 72)], (uint64_t)v5, type metadata accessor for MainStateProcessingContext);
  v40 = type metadata accessor for MainStateProcessingContext(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v40);
  v38 = sub_10060C6C8(*((_QWORD *)v11 + 2), (uint64_t)v5);
  sub_100021AA4((uint64_t)v5, &qword_100BF76C0);
  if (!v38)
  {
    v52 = Logger.logObject.getter(v41);
    v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, (os_log_type_t)v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "Drop persisted state", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    sub_100021AA4((uint64_t)v11, &qword_100BF76B8);
    return 0;
  }
  if (v38 == 1)
  {
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Found persisted state for restoration", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v38 = *((_QWORD *)v11 + 2);
    swift_retain();
  }
  else
  {
    v55 = Logger.logObject.getter(v41);
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Found persisted state for restoration", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

  }
  sub_100021AA4((uint64_t)v11, &qword_100BF76B8);
  return v38;
}

uint64_t sub_100132BC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = "\b";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 88));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 96));
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for () + 64;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[5] = &unk_100993F70;
      v5[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      result = swift_initClassMetadata2(a1, 0, 7, v5, a1 + 128);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for StatePersistenceManager(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StatePersistenceManager);
}

uint64_t sub_100132C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v8 = v7;
  v32 = a5;
  v33 = a6;
  v30 = a3;
  v31 = a4;
  v29 = a2;
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v8 + 16) = 0;
  sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v14);
  v34 = _swiftEmptyArrayStorage;
  sub_1000A1C54((unint64_t *)&qword_100BC29A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v22 = v21;
  v23 = sub_1000BA294(&qword_100BC29B0);
  sub_10003D2DC((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v23, v24, v11, v22);
  v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x8000000100A0E1A0, v20, v13, v17, 0);
  *(double *)(v8 + 56) = a7;
  v26 = v29;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = v26;
  v27 = v31;
  *(_QWORD *)(v8 + 40) = v30;
  *(_QWORD *)(v8 + 48) = v27;
  *(_QWORD *)(v8 + 64) = v32;
  *(_QWORD *)(v8 + 72) = v33;
  *(_QWORD *)(v8 + 80) = v25;
  return v8;
}

uint64_t type metadata accessor for PerformanceTestAssembly()
{
  return objc_opt_self(_TtC7Weather23PerformanceTestAssembly);
}

uint64_t sub_100132EDC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BE00E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v10)
  {
    v7 = type metadata accessor for PerformanceTestReducer();
    v8 = swift_allocObject(v7, 56, 7);
    result = sub_10003C800(&v9, v8 + 16);
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B887B0;
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100132F7C(__n128 a1)
{
  return sub_1000073C4(a1);
}

uint64_t sub_100132F90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_1009AAFC8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_1009AAFC8;
  v4[3] = &unk_1009AAFC8;
  v4[4] = &unk_1009AAFC8;
  v4[5] = &unk_1009AAFC8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_1009AAFC8;
    v4[8] = &unk_1009AAFE0;
    v4[9] = &unk_1009AAFC8;
    v4[10] = &unk_1009AAFC8;
    v4[11] = &unk_1009AAFC8;
    v4[12] = &unk_1009AAFC8;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013302C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for ViewState(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009ADFD8;
    v4[2] = &unk_1009ADFF0;
    v4[3] = &unk_1009AE008;
    v4[4] = &unk_1009AE008;
    v4[5] = &unk_1009AE008;
    v4[6] = &unk_1009AE008;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NotificationsOptInInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEFC60;
  if (!qword_100BEFC60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsOptInInput);
  return result;
}

void sub_1001330F0(_BYTE *a1@<X8>)
{
  *a1 = 0x80;
}

uint64_t sub_1001330FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1001512BC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10013314C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000215BC(v0 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, type metadata accessor for LocationViewerActiveLocationState);
  v1 = sub_10009E484();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_100133178(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for LocationViewerActiveLocationState(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100981A78;
    v4[2] = &unk_100981A90;
    v4[3] = &unk_100981AA8;
    v4[4] = &unk_100981A90;
    v4[5] = &unk_100981A78;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100133204(uint64_t a1, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t v6;
  char v11;

  v11 = a3 & 1;
  sub_10007802C(a1, v6 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, type metadata accessor for LocationViewerActiveLocationState);
  *(_BYTE *)(v6 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_notificationsOptInAlertState) = a2;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_addLocationAlertState) = v11;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_trigger) = a4;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_reportWeatherDisplayToggle) = a5;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_listToLocationViewTransitionState) = a6;
  sub_10004A2A0();
}

uint64_t sub_10013328C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC46B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1001332D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BF1F10)
  {
    v2 = type metadata accessor for LocationViewerViewModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BF1F10);
  }
}

uint64_t sub_100133328(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  result = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for ConditionPickerMenuViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_1009C8A58;
      v5[4] = &unk_1009C8A70;
      v5[5] = &unk_1009C8A58;
      v5[6] = &unk_1009C8A58;
      v5[7] = &unk_1009C8A58;
      v5[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[9] = &unk_1009C8A58;
      v5[10] = &unk_1009C8A88;
      swift_initStructMetadata(a1, 256, 11, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for LocationPreviewAssembly()
{
  return objc_opt_self(_TtC7Weather23LocationPreviewAssembly);
}

uint64_t sub_100133400@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BDC5A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v10)
  {
    v7 = type metadata accessor for LocationPreviewViewStateReducer();
    v8 = swift_allocObject(v7, 56, 7);
    result = sub_10003C800(&v9, v8 + 16);
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B91878;
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1001334A0(__n128 a1)
{
  return sub_100015B38(a1);
}

ValueMetadata *type metadata accessor for LocationHeaderViewModel()
{
  return &type metadata for LocationHeaderViewModel;
}

uint64_t sub_1001334C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationFooterViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100133508(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[11];

  v10[0] = &unk_100998888;
  v10[1] = &unk_100998888;
  v10[2] = &unk_100998888;
  v10[3] = &unk_1009988A0;
  sub_1001345CC(319, qword_100BCCEE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v10[4] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for LearnMoreAttributorViewModel(319);
    if (v5 <= 0x3F)
    {
      v10[5] = *(_QWORD *)(v4 - 8) + 64;
      v10[6] = &unk_1009988B8;
      sub_1001345CC(319, (unint64_t *)&qword_100BDBEE8, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterest);
      if (v7 <= 0x3F)
      {
        v10[7] = *(_QWORD *)(v6 - 8) + 64;
        v10[8] = &unk_100998888;
        v10[9] = &unk_1009988D0;
        sub_1001345CC(319, (unint64_t *)&unk_100BDBEF0, type metadata accessor for HomeAndWorkRefinementRowViewModel);
        if (v9 <= 0x3F)
        {
          v10[10] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 11, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_100133620(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C12D68)
  {
    v2 = type metadata accessor for LocationComponentAction(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C12D68);
  }
}

uint64_t sub_100133674(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v7[32];
  _BYTE v8[32];
  _BYTE v9[32];
  _QWORD v10[5];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v9, *(_QWORD *)(result - 8) + 64, &unk_10098AA08);
    v10[0] = v9;
    result = type metadata accessor for WeatherMapOverlayKind(319);
    if (v4 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for DetailCondition(319);
      if (v5 <= 0x3F)
      {
        swift_getTupleTypeLayout2(v8, *(_QWORD *)(result - 8) + 64, &unk_10098AA08);
        v10[2] = v8;
        v10[3] = &unk_10098AA08;
        result = type metadata accessor for Location(319);
        if (v6 <= 0x3F)
        {
          swift_getTupleTypeLayout2(v7, &unk_10098AA08, *(_QWORD *)(result - 8) + 64);
          v10[4] = v7;
          swift_initEnumMetadataMultiPayload(a1, 256, 5, v10);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100133770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for LearnMoreAttributorViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009CBCA8;
    v4[2] = &unk_1009CBCC0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LearnMoreAttributorView(uint64_t a1)
{
  uint64_t result;

  result = qword_100C08AA0;
  if (!qword_100C08AA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LearnMoreAttributorView);
  return result;
}

void sub_100133824(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[7];

  v2 = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(319);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10015B530(319);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10015B600(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_1006F74A4(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            v12[5] = &unk_1009C1518;
            v12[6] = &unk_1009C1518;
            swift_initStructMetadata(a1, 256, 7, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_100133908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10067BA50);
}

uint64_t sub_100133914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10067B9D8);
}

uint64_t sub_100133920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentStatusBannerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100133964(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "@";
  sub_100158AF0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1009BD3F0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1001339E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABCC88, 1);
}

uint64_t sub_1001339F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C4D6C() - 8) + 80);
  return sub_100133A3C(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_100133A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[2];
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  _OWORD v22[2];
  char v23;

  v5 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a3 + 48);
  v9 = *(_QWORD *)(a3 + 56);
  sub_100037794(a2, (uint64_t)v7, &qword_100BC5A68);
  sub_10013BB0C(v8, v9);
  sub_100033D48(v8, v9, (uint64_t)v7, (uint64_t)v22);
  v10 = (__int128 *)(a3 + *(int *)(type metadata accessor for ContentStatusBannerView(0) + 24));
  v11 = *((_BYTE *)v10 + 32);
  v12 = *((_QWORD *)v10 + 5);
  v13 = v10[1];
  v18 = *v10;
  v19 = v13;
  v20 = v11;
  v21 = v12;
  v16[0] = v22[0];
  v16[1] = v22[1];
  v17 = v23;
  v14 = sub_1000BA294(&qword_100BFBC88);
  return State.wrappedValue.setter(v16, v14);
}

void sub_100133B3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for ConditionPickerMenuViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10015446C(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t type metadata accessor for ConditionDetailAssembly()
{
  return objc_opt_self(_TtC7Weather23ConditionDetailAssembly);
}

uint64_t sub_100133BE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for ConditionDetailViewStateReducer();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B991E0;
  *a1 = result;
  return result;
}

double sub_100133C24(__n128 a1)
{
  return sub_100019860(a1);
}

void sub_100133C38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10098C1F8;
    sub_100127FCC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_10098C210;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100133CCC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_100133CE4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

void type metadata accessor for AutomationComponentInfo()
{
  sub_100098884();
}

uint64_t type metadata accessor for AppConfigurationReducer()
{
  return objc_opt_self(_TtC7Weather23AppConfigurationReducer);
}

uint64_t type metadata accessor for AppConfigurationMonitor()
{
  return objc_opt_self(_TtC7Weather23AppConfigurationMonitor);
}

unint64_t sub_100133D48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF24A0;
  if (!qword_100BF24A0)
  {
    v1 = type metadata accessor for AppConfigurationMonitor();
    result = swift_getWitnessTable(&unk_1009B0ED8, v1);
    atomic_store(result, (unint64_t *)&qword_100BF24A0);
  }
  return result;
}

uint64_t sub_100133D84(uint64_t (*a1)(_QWORD *, unint64_t, uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = v1[7];
  v4 = v1[8];
  sub_1000DB418(v1 + 4, v3);
  v5 = sub_100133D48();
  return a1(v1, v5, v3, v4);
}

uint64_t sub_100133DE0()
{
  return sub_100133D84((uint64_t (*)(_QWORD *, unint64_t, uint64_t, uint64_t))&dispatch thunk of AppConfigurationManagerType.addObserver(_:));
}

uint64_t sub_100133DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10095D334);
}

void sub_100133E08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "p";
  v6[1] = &unk_1009DDFB0;
  v6[2] = &unk_1009DDFB0;
  v6[3] = &unk_1009DDFB0;
  sub_100158DB0(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_1009DDFB0;
    sub_100121E44(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_100133EA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC772C, 1);
}

void sub_100133EB8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];

  v2 = v1;
  v35 = a1;
  v3 = type metadata accessor for HorizontalBarPointView(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000BA294(&qword_100BDAE70);
  __chkstk_darwin(v32);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000BA294(&qword_100C17D70);
  __chkstk_darwin(v34);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000BA294(&qword_100C17CC8);
  __chkstk_darwin(v33);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(double *)(v1 + 24);
  v14 = *(_QWORD *)(v1 + 128);
  v15 = *(_BYTE *)(v2 + 136);
  sub_10008D47C(v14, v15);
  sub_100109B54();
  v17 = v16;
  v18 = sub_1000B15F8(v14, v15);
  if ((v17 & 1) != 0)
    v19 = static Color.black.getter(v18);
  else
    v19 = static Color.white.getter(v18);
  v20 = v19;
  v21 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + 104));
  v22 = Gradient.init(stops:)(v21);
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD))HorizontalBarPointView.init(point:pointColor:gradient:))(v13 * 100.0, 0, v20, v22);
  type metadata accessor for AirQualityComponentView(0);
  v23 = sub_1000BA294(&qword_100BDD668);
  v24 = ScaledValue.wrappedValue.getter(v36, v23);
  v25 = *(_QWORD *)&v36[0];
  static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(0, 1, v25, 0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  v26 = &v8[*(int *)(v32 + 36)];
  v27 = v36[1];
  *(_OWORD *)v26 = v36[0];
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v36[2];
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v28 = *(_QWORD *)(v2 + 144);
  LOBYTE(v25) = *(_BYTE *)(v2 + 152);
  sub_10008D47C(v28, v25);
  sub_100109B54();
  v30 = v29;
  sub_1000B15F8(v28, v25);
  sub_100037794((uint64_t)v8, (uint64_t)v10, &qword_100BDAE70);
  v31 = &v10[*(int *)(v34 + 36)];
  *v31 = 0;
  v31[1] = v30 & 1;
  sub_100021A14((uint64_t)v8, &qword_100BDAE70);
  sub_100037794((uint64_t)v10, (uint64_t)v12, &qword_100C17D70);
  v12[*(int *)(v33 + 36)] = 0;
  sub_100021A14((uint64_t)v10, &qword_100C17D70);
  sub_1000F111C((uint64_t)v12, v35, &qword_100C17CC8);
}

uint64_t type metadata accessor for WireframeInterestToken()
{
  return objc_opt_self(_TtC7Weather22WireframeInterestToken);
}

ValueMetadata *type metadata accessor for WireframeInterestLevel()
{
  return &type metadata for WireframeInterestLevel;
}

void sub_1001341DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (!v7 && (sub_100099264(v4, v5, *(_QWORD *)a2, v6) & 1) == 0)
    goto LABEL_64;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = v8 == v10 && v9 == v11;
  if (!v12 && (sub_100099264(v8, v9, v10, v11) & 1) == 0)
    goto LABEL_64;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = v13 == v15 && v14 == v16;
  if (!v17 && (sub_100099264(v13, v14, v15, v16) & 1) == 0)
    goto LABEL_64;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = v18 == v20 && v19 == v21;
  if (!v22 && (sub_100099264(v18, v19, v20, v21) & 1) == 0)
    goto LABEL_64;
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v27 = v23 == v25 && v24 == v26;
  if (!v27 && (sub_100099264(v23, v24, v25, v26) & 1) == 0)
    goto LABEL_64;
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 88);
  v30 = *(_QWORD *)(a2 + 80);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = v28 == v30 && v29 == v31;
  if (!v32 && (sub_100099264(v28, v29, v30, v31) & 1) == 0)
    goto LABEL_64;
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(_QWORD *)(a1 + 104);
  v35 = *(_QWORD *)(a2 + 96);
  v36 = *(_QWORD *)(a2 + 104);
  v37 = v33 == v35 && v34 == v36;
  if (!v37 && (sub_100099264(v33, v34, v35, v36) & 1) == 0)
    goto LABEL_64;
  v38 = *(_QWORD *)(a1 + 112);
  v39 = *(_QWORD *)(a1 + 120);
  v40 = *(_QWORD *)(a2 + 112);
  v41 = *(_QWORD *)(a2 + 120);
  v42 = v38 == v40 && v39 == v41;
  if (!v42 && (sub_100099264(v38, v39, v40, v41) & 1) == 0)
    goto LABEL_64;
  v43 = *(_QWORD *)(a1 + 128);
  v44 = *(_QWORD *)(a1 + 136);
  v45 = *(_QWORD *)(a2 + 128);
  v46 = *(_QWORD *)(a2 + 136);
  v47 = v43 == v45 && v44 == v46;
  if (!v47 && (sub_100099264(v43, v44, v45, v46) & 1) == 0)
    goto LABEL_64;
  v48 = *(_QWORD *)(a1 + 144);
  v49 = *(_QWORD *)(a1 + 152);
  v50 = *(_QWORD *)(a2 + 144);
  v51 = *(_QWORD *)(a2 + 152);
  v52 = v48 == v50 && v49 == v51;
  if (!v52 && (sub_100099264(v48, v49, v50, v51) & 1) == 0)
    goto LABEL_64;
  v53 = *(_QWORD *)(a1 + 160);
  v54 = *(_QWORD *)(a1 + 168);
  v55 = *(_QWORD *)(a2 + 160);
  v56 = *(_QWORD *)(a2 + 168);
  v57 = v53 == v55 && v54 == v56;
  if ((v57 || (sub_100099264(v53, v54, v55, v56) & 1) != 0)
    && *(double *)(a1 + 176) == *(double *)(a2 + 176)
    && ((v58 = *(_QWORD *)(a1 + 184),
         v59 = *(_QWORD *)(a1 + 192),
         v60 = *(_QWORD *)(a2 + 184),
         v61 = *(_QWORD *)(a2 + 192),
         v58 == v60)
      ? (v62 = v59 == v61)
      : (v62 = 0),
        (v62 || (sub_100099264(v58, v59, v60, v61) & 1) != 0)
     && (v63 = type metadata accessor for WindComponentViewModel(0),
         (static WindComponentCompassViewModel.== infix(_:_:)(a1 + *(int *)(v63 + 68), a2 + *(int *)(v63 + 68)) & 1) != 0)))
  {
    sub_100948FC4(*(_QWORD *)(a1 + *(int *)(v63 + 72)), *(_QWORD *)(a2 + *(int *)(v63 + 72)));
  }
  else
  {
LABEL_64:
    sub_100079F70();
  }
}

uint64_t type metadata accessor for ShortcutItemMiddleware()
{
  return objc_opt_self(_TtC7Weather22ShortcutItemMiddleware);
}

uint64_t type metadata accessor for SearchViewStateReducer()
{
  return objc_opt_self(_TtC7Weather22SearchViewStateReducer);
}

uint64_t type metadata accessor for PerformanceTestReducer()
{
  return objc_opt_self(_TtC7Weather22PerformanceTestReducer);
}

uint64_t type metadata accessor for PerformanceTestManager()
{
  return objc_opt_self(_TtC7Weather22PerformanceTestManager);
}

uint64_t type metadata accessor for NetworkActivityManager()
{
  return objc_opt_self(_TtC7Weather22NetworkActivityManager);
}

_QWORD *sub_100134440()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for WeatherNetworkActivity.Label(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BBFFC(v4, enum case for WeatherNetworkActivity.Label.appLaunch(_:));
  v5 = sub_1000CCB78();
  sub_1000860C4(v5);
  v6 = sub_1000C53A4();
  v0[2] = v6;
  sub_1000BBFFC((uint64_t)v6, enum case for WeatherNetworkActivity.Label.openPreview(_:));
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v7 = sub_1000C53A4();
  v0[3] = v7;
  sub_1000BBFFC((uint64_t)v7, enum case for WeatherNetworkActivity.Label.openInteractiveMap(_:));
  v8 = type metadata accessor for InteractiveMapNetworkActivityFlow(0);
  sub_1000860C4(v8);
  v0[4] = sub_100126024((uint64_t)v3);
  return v0;
}

unint64_t sub_100134528()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C076E8;
  if (!qword_100C076E8)
  {
    v1 = type metadata accessor for NetworkActivityManager();
    result = swift_getWitnessTable(&unk_100995398, v1);
    atomic_store(result, (unint64_t *)&qword_100C076E8);
  }
  return result;
}

uint64_t sub_100134568()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 16))
    result = sub_1000DCD8C();
  if (*(_QWORD *)(v0 + 24))
    return sub_1000DCD8C();
  return result;
}

void sub_1001345AC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    sub_100006D3C();
  sub_10004A298();
}

void sub_1001345CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100134618(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for MoonDetailSelectedDate(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFAFF8;
  if (!qword_100BFAFF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonDetailSelectedDate);
  return result;
}

uint64_t sub_1001346B8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 != 255)
    sub_100121E04(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10013471C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1009912E8;
  v4[1] = &unk_100991300;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100991318;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MoonComponentViewModel.Row()
{
  return &type metadata for MoonComponentViewModel.Row;
}

uint64_t destroy for MapOverlayKindProvider(_QWORD *a1)
{
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 5);
}

uint64_t initializeWithCopy for MapOverlayKindProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

_QWORD *sub_100134850(_QWORD *a1)
{
  destroy for MapOverlayKindProvider(a1);
  return a1;
}

uint64_t sub_10013487C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MapOverlayKindProvider(a2, a1);
  return a2;
}

uint64_t type metadata accessor for LocationViewerAssembly()
{
  return objc_opt_self(_TtC7Weather22LocationViewerAssembly);
}

uint64_t sub_1001348D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001348D8(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1001348D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DB418(a2, a2[3]);
  return sub_10007F774(a1, a3);
}

uint64_t sub_100134920(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  _BYTE v4[24];

  v1 = (_BYTE *)(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  swift_beginAccess(v1, v4, 0, 0);
  if ((*v1 & 1) != 0)
    return 1;
  v3 = sub_100076C68();
  if ((v3 & 1) == 0)
    return 0;
  if (DeviceIsSlow(v3))
    return 0x3FB999999999999ALL;
  return 0;
}

uint64_t sub_1001349AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BEFE90);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for LocationViewerInputFactory();
  v25 = &off_100B5C820;
  v23[0] = v13;
  sub_100043CA8((uint64_t)v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B7FB00, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B7FB28, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000A3E94;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BEFEA0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    v19 = *sub_1000DB418(v26, v27);
    v24 = type metadata accessor for LocationViewerViewModelFactory(0);
    v25 = &off_100B81428;
    v23[0] = v19;
    sub_100043CA8((uint64_t)v23, (uint64_t)v22);
    v20 = swift_allocObject(&unk_100B7FB50, 56, 7);
    sub_10003C800(v22, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v21 = sub_1000BA294(&qword_100BC46D0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_10002F3F0(v6, v9, v8, v7, sub_1001349A8, 0, sub_1000A30A4, v15, sub_1001348D0, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100134C04(uint64_t a1)
{
  uint64_t v1;

  return sub_100134C0C(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_100134C0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  sub_1000DB418(a2, v3);
  return dispatch thunk of WeatherConditionBackgroundModelFactoryType.makeModel(from:)(a1, v3, v4);
}

uint64_t sub_100134C60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BEFE98);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for WeatherConditionBackgroundModelInputFactory(0);
  v25 = &off_100B953A8;
  *(_QWORD *)&v23 = v13;
  sub_100043CA8((uint64_t)&v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B7FA60, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B7FA88, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000A3EB4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BDC5A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    sub_100043CA8((uint64_t)v26, (uint64_t)&v23);
    v19 = swift_allocObject(&unk_100B7FAB0, 56, 7);
    sub_10003C800(&v23, v19 + 16);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v20 = swift_allocObject(&unk_100B7FAD8, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_100134C04;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = sub_1000BA294(&qword_100BC46A0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_10002F508(v6, v9, v8, v7, sub_1001349A8, 0, sub_1000A22C0, v15, sub_100121E9C, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100134EA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v9)
  {
    v7 = type metadata accessor for LocationViewerViewModelFactory(0);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    result = sub_100128B34(&v8);
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B81428;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100134F44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for LocationViewerInputFactory();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B5C820;
  *a1 = result;
  return result;
}

uint64_t sub_100134F88@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v28;
  if (v28)
  {
    v9 = v29;
    v10 = a1[3];
    v11 = a1[4];
    sub_1000DB418(a1, v10);
    v12 = sub_1000BA294(&qword_100BEFE80);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
    if (v27)
    {
      v13 = sub_100068EB4((uint64_t)v26, v27);
      __chkstk_darwin(v13);
      v15 = (_QWORD *)((char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v16 + 16))(v15);
      v17 = *v15;
      v25[3] = &type metadata for LocationViewerTracker;
      v25[4] = &off_100B65F78;
      v25[0] = v17;
      v18 = type metadata accessor for LocationViewerInteractor();
      v19 = (_QWORD *)swift_allocObject(v18, 72, 7);
      v20 = sub_100068EB4((uint64_t)v25, (uint64_t)&type metadata for LocationViewerTracker);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[7] = &type metadata for LocationViewerTracker;
      v19[8] = &off_100B65F78;
      v19[3] = v9;
      v19[4] = v24;
      v19[2] = v8;
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
      a2[3] = v18;
      a2[4] = &off_100B7D558;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100135160@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    a2[3] = (uint64_t)&type metadata for LocationViewerTracker;
    a2[4] = (uint64_t)&off_100B65F78;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001351CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100135958(a1, (uint64_t)&off_100B953A8, a2);
}

uint64_t sub_1001351D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[3];
  uint64_t v25;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BDC5B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v25)
  {
    v5 = sub_100068EB4((uint64_t)v24, v25);
    __chkstk_darwin(v5);
    v7 = (_QWORD *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    v9 = *v7;
    v10 = type metadata accessor for WeatherConditionBackgroundTimeDataFactory();
    v23[3] = v10;
    v23[4] = &off_100B70D90;
    v23[0] = v9;
    v11 = type metadata accessor for WeatherConditionBackgroundModelInputFactory(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = sub_100068EB4((uint64_t)v23, v10);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v17 = *v15;
    v18 = (_QWORD *)(v12
                   + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_weatherConditionBackgroundTimeDataFactory);
    v18[3] = v10;
    v18[4] = &off_100B70D90;
    *v18 = v17;
    v19 = v12
        + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___locationAnimationKind;
    v20 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
    _s7Weather24LocationCompositionStateOwst_0(v19, 1, 1, v20);
    v21 = v12 + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___animationKind;
    v22 = type metadata accessor for BackgroundAnimationKind(0);
    _s7Weather24LocationCompositionStateOwst_0(v21, 1, 1, v22);
    *(_BYTE *)(v12
             + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_forceTileGradientPresentationContext) = 0;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001353B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BED538);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v33)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BDBAA8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v31)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BDBAB0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v29)
  {
    v14 = sub_100068EB4((uint64_t)v32, v33);
    __chkstk_darwin(v14);
    v16 = (_QWORD *)((char *)&v28[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    v18 = sub_100068EB4((uint64_t)v30, v31);
    __chkstk_darwin(v18);
    v20 = (_QWORD *)((char *)&v28[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v21 + 16))(v20);
    v22 = sub_100068EB4((uint64_t)v28, v29);
    __chkstk_darwin(v22);
    v24 = (char *)&v28[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v25 + 16))(v24);
    v26 = sub_100128780(*v16, *v20, v24);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v30);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v32);
    result = type metadata accessor for LocationViewerViewStateReducer();
    a2[3] = result;
    a2[4] = &off_100B809F0;
    *a2 = v26;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_1001355F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD v47[3];
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD v52[3];
  uint64_t v53;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BEFE88);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v53)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BC46D0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = (uint64_t)result;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BC46A0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = (uint64_t)result;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BD4D20);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v51, v18, 0x746C7561666544, 0xE700000000000000, v18, v16, v17);
  v19 = v51[0];
  if (!v51[0])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v20 = v51[2];
  v21 = a1[3];
  v22 = a1[4];
  sub_1000DB418(a1, v21);
  v23 = sub_1000BA294(&qword_100BD4D28);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v23, v23, v21, v22);
  if (!v50)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v24 = a1[3];
  v25 = a1[4];
  sub_1000DB418(a1, v24);
  v26 = type metadata accessor for WireframeLevelInterestManager();
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v26, v26, v24, v25);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v27 = (uint64_t)result;
  v44 = v20;
  v45 = v15;
  v46 = a2;
  v28 = a1[3];
  v29 = a1[4];
  sub_1000DB418(a1, v28);
  v30 = sub_1000BA294(&qword_100BE6650);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v30, v30, v28, v29);
  if (v48)
  {
    v31 = type metadata accessor for LocationViewerModule();
    ObjectType = swift_getObjectType(v19);
    v33 = sub_100068EB4((uint64_t)v52, v53);
    __chkstk_darwin(v33);
    v35 = (char *)&v44 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v36 + 16))(v35);
    v37 = sub_100068EB4((uint64_t)v47, v48);
    __chkstk_darwin(v37);
    v39 = (char *)&v44 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v40 + 16))(v39);
    v41 = type metadata accessor for LocationViewerInteractor();
    v42 = sub_10013847C((uint64_t)v35, v11, v45, v19, &v49, v27, (uint64_t)v39, v31, v41, (uint64_t)&type metadata for ContentStatusBannerViewFactory, ObjectType, (uint64_t)&off_100B7D558, (uint64_t)&off_100B99BA0, v44);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v47);
    result = (_QWORD *)_s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v52);
    v43 = v46;
    v46[3] = v31;
    v43[4] = &off_100B89E30;
    *v43 = v42;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100135958@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = type metadata accessor for WeatherConditionBackgroundModelInputFactory(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (result)
  {
    a3[3] = v7;
    a3[4] = a2;
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001359C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100135958(a1, (uint64_t)&off_100B95398, a2);
}

double sub_1001359D0(__n128 a1)
{
  return sub_100015BF8(a1);
}

unint64_t sub_1001359E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0EBC8;
  if (!qword_100C0EBC8)
  {
    v1 = type metadata accessor for LocationViewDescriptor();
    result = swift_getWitnessTable(&unk_1009D3FA8, v1);
    atomic_store(result, (unint64_t *)&qword_100C0EBC8);
  }
  return result;
}

uint64_t sub_100135A20()
{
  uint64_t result;

  if (qword_100BC26F8 != -1)
    swift_once(&qword_100BC26F8, sub_10015A610);
  result = dispatch thunk of SettingGroup.isEnabled.getter();
  byte_100C0EB18 = result & 1;
  return result;
}

_QWORD *sub_100135A78(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  if (qword_100BC2748 != -1)
    swift_once(&qword_100BC2748, sub_100135B50);
  if (*a2 != -1)
    swift_once(a2, a5);
  return SettingReader.read<A>(_:)(a4);
}

_QWORD *sub_100135B08(uint64_t a1)
{
  return sub_100135A78(a1, &qword_100BC2680, (uint64_t)&qword_100CAF4E8, &byte_100C0EB2C, (uint64_t)sub_10015A900);
}

_QWORD *sub_100135B2C(uint64_t a1)
{
  return sub_100135A78(a1, &qword_100BC2688, (uint64_t)&qword_100CAF4F0, &byte_100C0EB2D, (uint64_t)sub_10015A950);
}

uint64_t sub_100135B50()
{
  uint64_t result;

  type metadata accessor for SettingReader(0);
  result = static SettingReader.shared.getter();
  qword_100C0EB20 = result;
  return result;
}

uint64_t type metadata accessor for InteractiveMapAssembly()
{
  return objc_opt_self(_TtC7Weather22InteractiveMapAssembly);
}

double sub_100135BA0(uint64_t a1)
{
  return sub_10002735C(a1);
}

uint64_t sub_100135BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v23;
  _QWORD *v26;

  v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_100098728();
  v7 = v6 - v5;
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100098728();
  v16 = v15 - v14;
  sub_10009FFE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16, a3, v12);
  v26 = _swiftEmptyArrayStorage;
  v17 = sub_10012055C();
  v18 = sub_1000BA294(&qword_100BC29B0);
  v19 = sub_100120FAC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v18, v19, v8, v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v23);
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a1, a2, v16, v11, v7, 0);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  return v20;
}

double sub_100135D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20))).n128_u64[0];
  return result;
}

uint64_t sub_100135D88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for CurrentLocationMonitor()
{
  return objc_opt_self(_TtC7Weather22CurrentLocationMonitor);
}

unint64_t sub_100135E1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFE1B8[0];
  if (!qword_100BFE1B8[0])
  {
    v1 = type metadata accessor for CurrentLocationMonitor();
    result = swift_getWitnessTable(&unk_1009BF2A8, v1);
    atomic_store(result, qword_100BFE1B8);
  }
  return result;
}

void sub_100135E58()
{
  uint64_t v0;

  sub_100135EAC();
  sub_1000DD238();
  v0 = sub_1000DDE44();
  dispatch thunk of LocationManagerType.addObserver(_:)(v0);
  sub_100079F70();
}

uint64_t sub_100135E80()
{
  uint64_t v0;

  swift_retain(v0);
  asyncMain(block:)(sub_1006CECCC, v0);
  return swift_release(v0);
}

uint64_t sub_100135EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static os_signpost_type_t.event.getter(v3);
  v7 = *(id *)(v0 + 144);
  OSSignpostID.init(log:)(v7);
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v7, "Weather:currentLocationMonitor.requestAuthorization", 51, 2, v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  sub_1000DB418((_QWORD *)(v0 + 32), v8);
  return dispatch thunk of LocationManagerType.requestAuthorization()(v8, v9);
}

_QWORD *sub_100135F88(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8)
{
  _QWORD *v8;

  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  v8[18] = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD000000000000016, 0x80000001009BF270);
  v8[2] = a1;
  v8[3] = a2;
  sub_10003C800(a3, (uint64_t)(v8 + 4));
  v8[9] = a4;
  v8[10] = a5;
  v8[11] = a6;
  v8[12] = a7;
  sub_10003C800(a8, (uint64_t)(v8 + 13));
  return v8;
}

uint64_t sub_100136068()
{
  return sub_1000172FC();
}

uint64_t sub_10013607C()
{
  _QWORD *v0;

  return LocationManagerObserver.reducedLocationUpdates.getter(*v0);
}

uint64_t type metadata accessor for AveragesDetailAssembly()
{
  return objc_opt_self(_TtC7Weather22AveragesDetailAssembly);
}

uint64_t sub_1001360A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for AveragesDetailViewStateReducer();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B90638;
  *a1 = result;
  return result;
}

double sub_1001360EC(__n128 a1)
{
  return sub_100009358(a1);
}

uint64_t sub_100136100(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009A63D8;
  v4[1] = &unk_1009A63F0;
  result = type metadata accessor for AutomationInfo(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013617C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for AppConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t type metadata accessor for UnitManagerMiddleware()
{
  return objc_opt_self(_TtC7Weather21UnitManagerMiddleware);
}

uint64_t type metadata accessor for SavedLocationsMonitor()
{
  return objc_opt_self(_TtC7Weather21SavedLocationsMonitor);
}

unint64_t sub_100136218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCDB08;
  if (!qword_100BCDB08)
  {
    v1 = type metadata accessor for SavedLocationsMonitor();
    result = swift_getWitnessTable(&protocol conformance descriptor for SavedLocationsMonitor, v1);
    atomic_store(result, (unint64_t *)&qword_100BCDB08);
  }
  return result;
}

Swift::Void __swiftcall SavedLocationsMonitor.applicationWillEnterForeground()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[11];
  v2 = v0[12];
  sub_1000DB418(v0 + 8, v1);
  v3 = dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v1, v2);
  sub_100240A98(v3);
  swift_bridgeObjectRelease(v3);
}

void sub_1001362AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for PressureComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158DB0(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_100136330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100458FA8);
}

uint64_t sub_10013633C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100458F58);
}

uint64_t sub_10013634C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB5250, 1);
}

void sub_10013635C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];

  v3 = v2;
  v46 = a1;
  v48 = a2;
  v4 = type metadata accessor for PinningHeaderModifier(0);
  v47 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000BA294(&qword_100BE3AE0);
  __chkstk_darwin(v44);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000BA294(&qword_100BE3AE8);
  __chkstk_darwin(v45);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationComponentHeaderMetrics(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + *(int *)(v4 + 24);
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  sub_10008D47C(*(_QWORD *)v14, v16);
  sub_10006A9A8();
  v18 = v17;
  sub_1000B15F8(v15, v16);
  if (qword_100BC1EA0 != -1)
    swift_once(&qword_100BC1EA0, sub_100129178);
  v19 = v18 + *(double *)&qword_100CAE520;
  sub_10008D47C(v15, v16);
  sub_10006A9A8();
  v21 = v20;
  v22 = sub_1000B15F8(v15, v16);
  sub_1007A5F94(v22);
  v23 = *(double *)&v13[*(int *)(v11 + 24)];
  sub_100441DDC((uint64_t)v13, type metadata accessor for LocationComponentHeaderMetrics);
  v24 = v21 + v23;
  v25 = (uint64_t *)(v3 + *(int *)(v4 + 28));
  v27 = v25[1];
  v28 = v25[2];
  v49 = *v25;
  v26 = v49;
  v50 = v27;
  v51 = v28;
  v29 = sub_1000BA294(&qword_100BE3AF0);
  State.wrappedValue.getter(v52, v29);
  v30 = v52[1];
  v31 = sub_1000BA294(&qword_100BE3AF8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v8, v46, v31);
  *(_QWORD *)&v8[*(int *)(v44 + 36)] = v30;
  v49 = v26;
  v50 = v27;
  v51 = v28;
  State.wrappedValue.getter(v52, v29);
  v32 = v52[0];
  sub_100037768((uint64_t)v8, (uint64_t)v10, &qword_100BE3AE0);
  v33 = &v10[*(int *)(v45 + 36)];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = v32;
  sub_100021A14((uint64_t)v8, &qword_100BE3AE0);
  sub_100080C0C(v3, (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PinningHeaderModifier);
  v34 = *(unsigned __int8 *)(v47 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = v35 + v5;
  v37 = v34 | 7;
  v38 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_100B74C48, v39 + 8, v34 | 7);
  sub_10007C75C((uint64_t)v6, v40 + v35, type metadata accessor for PinningHeaderModifier);
  *(double *)(v40 + v38) = v19;
  *(double *)(v40 + v39) = v24;
  sub_100080C0C(v3, (uint64_t)v6, type metadata accessor for PinningHeaderModifier);
  v41 = swift_allocObject(&unk_100B74C70, v36, v37);
  sub_10007C75C((uint64_t)v6, v41 + v35, type metadata accessor for PinningHeaderModifier);
  v42 = v48;
  sub_100037768((uint64_t)v10, v48, &qword_100BE3AE8);
  v43 = (void (**)())(v42 + *(int *)(sub_1000BA294(&qword_100BE3B00) + 36));
  *v43 = sub_10045AC68;
  v43[1] = (void (*)())v40;
  v43[2] = (void (*)())sub_10045AD88;
  v43[3] = (void (*)())v41;
  sub_100021A14((uint64_t)v10, &qword_100BE3AE8);
}

uint64_t sub_100136720(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v7[32];
  _QWORD v8[5];

  result = type metadata accessor for DetailCondition(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for Location(319);
    if (v4 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for WeatherMapOverlayKind(319);
      if (v5 <= 0x3F)
      {
        swift_getTupleTypeLayout3(v7, (char *)&value witness table for Builtin.Int64 + 64, *(_QWORD *)(result - 8) + 64, &unk_1009C32D8);
        v8[3] = v7;
        result = type metadata accessor for WeatherCondition(319);
        if (v6 <= 0x3F)
        {
          v8[4] = *(_QWORD *)(result - 8) + 64;
          swift_initEnumMetadataMultiPayload(a1, 256, 5, v8);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001367FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for NewsArticleComponent(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 6, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NewsComponentPosition(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE4C78;
  if (!qword_100BE4C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsComponentPosition);
  return result;
}

uint64_t type metadata accessor for ModalViewStateReducer()
{
  return objc_opt_self(_TtC7Weather21ModalViewStateReducer);
}

_QWORD *sub_1001368C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  a5[5] = type metadata accessor for LocationPreviewViewStateReducer();
  a5[6] = &off_100B91878;
  a5[2] = a1;
  a5[10] = type metadata accessor for NotificationSettingsViewStateReducer();
  a5[11] = &off_100B72FA0;
  a5[7] = a2;
  a5[15] = type metadata accessor for NotificationsOptInViewStateReducer();
  a5[16] = &off_100B60E08;
  a5[12] = a3;
  a5[20] = type metadata accessor for ReportWeatherViewStateReducer();
  a5[21] = &off_100B8CA30;
  a5[17] = a4;
  return a5;
}

_QWORD *sub_100136960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v8 = *a4;
  v43 = type metadata accessor for LocationPreviewViewStateReducer();
  v44 = &off_100B91878;
  v42[0] = a1;
  v40 = type metadata accessor for NotificationSettingsViewStateReducer();
  v41 = &off_100B72FA0;
  v39[0] = a2;
  v37 = type metadata accessor for NotificationsOptInViewStateReducer();
  v38 = &off_100B60E08;
  v36[0] = a3;
  v34 = v8;
  v35 = &off_100B8CA30;
  v33[0] = a4;
  v9 = type metadata accessor for ModalViewStateReducer();
  v10 = (_QWORD *)swift_allocObject(v9, 176, 7);
  v11 = sub_100068EB4((uint64_t)v42, v43);
  v12 = __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
  v16 = sub_100068EB4((uint64_t)v39, v40);
  v17 = __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100068EB4((uint64_t)v36, v37);
  v22 = __chkstk_darwin(v21);
  v24 = (_QWORD *)((char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  v26 = sub_100068EB4((uint64_t)v33, v34);
  v27 = __chkstk_darwin(v26);
  v29 = (_QWORD *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v30 + 16))(v29, v27);
  v31 = sub_1001368C0(*v14, *v19, *v24, *v29, v10);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
  return v31;
}

void sub_100136B94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Location(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10014DF4C(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_100992F18;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100136C3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v31;

  type metadata accessor for WeatherData(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098694();
  v6 = sub_1000BA294(&qword_100BD4C40);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v31 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v31 - v17;
  if ((static WeatherMapOverlayKind.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v19 = (int *)type metadata accessor for MapComponentViewModel(0);
  if ((static Location.== infix(_:_:)(a1 + v19[5], a2 + v19[5]) & 1) == 0)
    return 0;
  sub_10014DF04(a1 + v19[6], (uint64_t)v18);
  sub_10014DF04(a2 + v19[6], (uint64_t)v16);
  v20 = (uint64_t)&v9[*(int *)(v6 + 48)];
  sub_10014DF04((uint64_t)v18, (uint64_t)v9);
  sub_10014DF04((uint64_t)v16, v20);
  sub_1000BBCA0((uint64_t)v9);
  if (!v21)
  {
    sub_10014DF04((uint64_t)v9, (uint64_t)v13);
    sub_1000BBCA0(v20);
    if (!v21)
    {
      sub_10014DEC0(v20, (uint64_t)v2);
      sub_1000FAF2C(v13, v2);
      v23 = v22;
      sub_1000B56C0((uint64_t)v2, type metadata accessor for WeatherData);
      sub_1000BA874((uint64_t)v16);
      sub_1000BA874((uint64_t)v18);
      sub_1000B56C0((uint64_t)v13, type metadata accessor for WeatherData);
      sub_1000BA874((uint64_t)v9);
      if ((v23 & 1) == 0)
        return 0;
      goto LABEL_13;
    }
    sub_100021A3C((uint64_t)v16, &qword_100BC3460);
    sub_100021A3C((uint64_t)v18, &qword_100BC3460);
    sub_1000B56C0((uint64_t)v13, type metadata accessor for WeatherData);
LABEL_11:
    sub_100021A3C((uint64_t)v9, &qword_100BD4C40);
    return 0;
  }
  sub_1000BA874((uint64_t)v16);
  sub_1000BA874((uint64_t)v18);
  sub_1000BBCA0(v20);
  if (!v21)
    goto LABEL_11;
  sub_100021A3C((uint64_t)v9, &qword_100BC3460);
LABEL_13:
  v24 = v19[7];
  v25 = (_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a1 + v24 + 8);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  if (v26)
  {
    if (v28)
    {
      v29 = *v25 == *v27 && v26 == v28;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, *v27, v28, 0) & 1) != 0)
        return 1;
    }
  }
  else if (!v28)
  {
    return 1;
  }
  return 0;
}

void sub_100136EF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t HourPrecipitationComponent;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[19];

  v2 = type metadata accessor for AirQuality(319);
  if (v3 <= 0x3F)
  {
    v36[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DailyForecastComponent(319);
    if (v5 <= 0x3F)
    {
      v36[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(319);
      if (v7 <= 0x3F)
      {
        v36[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for HourlyForecastComponent(319);
        if (v9 <= 0x3F)
        {
          v36[3] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for CurrentWeather(319);
          if (v11 <= 0x3F)
          {
            v36[4] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for MapComponent(319);
            if (v13 <= 0x3F)
            {
              v36[5] = *(_QWORD *)(v12 - 8) + 64;
              v14 = type metadata accessor for WeatherData(319);
              if (v15 <= 0x3F)
              {
                v36[6] = *(_QWORD *)(v14 - 8) + 64;
                v16 = type metadata accessor for NewsArticleComponent(319);
                if (v17 <= 0x3F)
                {
                  v36[7] = *(_QWORD *)(v16 - 8) + 64;
                  HourPrecipitationComponent = type metadata accessor for NextHourPrecipitationComponent(319);
                  if (v19 <= 0x3F)
                  {
                    v36[8] = *(_QWORD *)(HourPrecipitationComponent - 8) + 64;
                    v20 = type metadata accessor for Location(319);
                    if (v21 <= 0x3F)
                    {
                      v36[9] = *(_QWORD *)(v20 - 8) + 64;
                      v22 = type metadata accessor for PressureComponent(319);
                      if (v23 <= 0x3F)
                      {
                        v36[10] = *(_QWORD *)(v22 - 8) + 64;
                        v36[11] = "p";
                        v36[12] = &unk_1009B1EA0;
                        v24 = type metadata accessor for SevereAlertComponent(319);
                        if (v25 <= 0x3F)
                        {
                          v36[13] = *(_QWORD *)(v24 - 8) + 64;
                          v26 = type metadata accessor for SunriseSunsetModel(319);
                          if (v27 <= 0x3F)
                          {
                            v36[14] = *(_QWORD *)(v26 - 8) + 64;
                            sub_1005C1ADC(319);
                            if (v29 <= 0x3F)
                            {
                              v36[15] = *(_QWORD *)(v28 - 8) + 64;
                              v30 = type metadata accessor for UVIndexComponent(319);
                              if (v31 <= 0x3F)
                              {
                                v36[16] = *(_QWORD *)(v30 - 8) + 64;
                                v32 = type metadata accessor for VisibilityComponent(319);
                                if (v33 <= 0x3F)
                                {
                                  v36[17] = *(_QWORD *)(v32 - 8) + 64;
                                  v34 = type metadata accessor for WindComponent(319);
                                  if (v35 <= 0x3F)
                                  {
                                    v36[18] = *(_QWORD *)(v34 - 8) + 64;
                                    swift_initEnumMetadataMultiPayload(a1, 256, 19, v36);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for LocationViewComponent.ComponentType()
{
  return &type metadata for LocationViewComponent.ComponentType;
}

unint64_t sub_100137144()
{
  unint64_t result;

  result = qword_100BF3B78;
  if (!qword_100BF3B78)
  {
    result = swift_getWitnessTable(&unk_1009B1F80, &type metadata for LocationViewComponent.ComponentType);
    atomic_store(result, (unint64_t *)&qword_100BF3B78);
  }
  return result;
}

void sub_100137180(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[23];

  v2 = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = "\t";
    v12[2] = &unk_1009D8630;
    v4 = type metadata accessor for ListLocationRowPrimaryText(319);
    if (v5 <= 0x3F)
    {
      v12[3] = *(_QWORD *)(v4 - 8) + 64;
      v12[4] = &unk_1009D8680;
      v12[5] = &unk_1009D8698;
      sub_1001345CC(319, (unint64_t *)&qword_100BC3500, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v12[6] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001345CC(319, (unint64_t *)&unk_100C13908, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone);
        if (v9 <= 0x3F)
        {
          v12[7] = *(_QWORD *)(v8 - 8) + 64;
          v12[8] = &unk_1009D8630;
          v12[9] = &unk_1009D86B0;
          v12[10] = &unk_1009D8698;
          v12[11] = &unk_1009D86B0;
          v12[12] = &unk_1009D8630;
          v12[13] = &unk_1009D86B0;
          v12[14] = &unk_1009D8630;
          v12[15] = &unk_1009D8630;
          v12[16] = &unk_1009D8630;
          v12[17] = &unk_1009D8698;
          v10 = type metadata accessor for WeatherConditionBackgroundModel(319);
          if (v11 <= 0x3F)
          {
            v12[18] = *(_QWORD *)(v10 - 8) + 64;
            v12[19] = &unk_1009D8698;
            v12[20] = &unk_1009D8698;
            v12[21] = &unk_1009D8630;
            v12[22] = (char *)&value witness table for Builtin.Int64 + 64;
            swift_initStructMetadata(a1, 256, 23, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for ListLocationViewModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C138F8, (uint64_t)&nominal type descriptor for ListLocationViewModel);
}

uint64_t type metadata accessor for GridGeometryValidator()
{
  return objc_opt_self(_TtC7Weather21GridGeometryValidator);
}

BOOL sub_10013730C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL8 result;
  uint64_t v16;

  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(unsigned __int8 *)(a1 + 48);
  v10 = *(unsigned __int8 *)(a1 + 49);
  v12 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v13 = *(_BYTE *)(a1 + 32) & 1;
  v14 = (_DWORD)v13 != 0;
  result = sub_1001373F8(a1);
  if (result)
  {
    v2[2] = v4;
    v2[3] = v6;
    v2[4] = v5;
    v2[5] = v7;
    v2[6] = v13;
    v2[7] = v8;
    v2[8] = v9 | (v10 << 8);
    v2[9] = v12;
    v2[10] = v11;
  }
  else
  {
    v16 = *((unsigned __int8 *)v2 + 48);
    if (v16 != 255)
    {
      v12 = v2[9];
      v11 = v2[10];
      v9 = v2[8];
      v8 = v2[7];
      v5 = v2[4];
      v7 = v2[5];
      v6 = v2[3];
      v4 = v2[2];
      v10 = v9 >> 8;
      v14 = v16 & 1;
    }
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v8;
  *(_BYTE *)(a2 + 48) = v9;
  *(_BYTE *)(a2 + 49) = v10;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = v11;
  return result;
}

BOOL sub_1001373F8(uint64_t a1)
{
  _BOOL8 result;
  char v2;
  char v3;

  result = 1;
  if (*(unsigned __int8 *)(a1 + 48) >= 2u)
  {
    sub_100076A50((_BYTE *)(a1 + 49), &v2);
    sub_100076A50(&v2, &v3);
    if (v3 != 3)
      return 0;
  }
  return result;
}

uint64_t sub_10013744C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for GridGeometryValidator();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

void sub_100137484(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = "\b";
  sub_100147BF4(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10099CE90;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DisplayMetricsMonitor(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDF3B0;
  if (!qword_100BDF3B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DisplayMetricsMonitor);
  return result;
}

void sub_100137548(void *a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1 + OBJC_IVAR____TtC7Weather21DisplayMetricsMonitor_window, a1);
  sub_100137580();

}

void sub_100137580()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t Strong;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v1 = v0;
  v2 = *(void **)(v0 + 32);
  if (v2)
  {
    v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();

  }
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC7Weather21DisplayMetricsMonitor_window);
  if (Strong)
  {
    v9 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_10099CEB0);
    v6 = swift_allocObject(&unk_100B71EF0, 24, 7);
    swift_weakInit(v6 + 16, v1);
    v7 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 1, sub_1003E8588, v6, &protocol witness table for NSObject);
    swift_release(KeyPath);
    swift_release(v6);

  }
  else
  {
    v7 = 0;
  }
  v8 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v7;

  sub_100012344();
}

void sub_10013766C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  v2 = type metadata accessor for DailyForecastComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for () + 64;
    v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[5] = &unk_10099B588;
      v8[6] = &unk_10099B588;
      v8[7] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[8] = &unk_10099B5A0;
      sub_1001544C4(319, (unint64_t *)&qword_100BCB3B0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100137750(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB3254, 1);
}

void sub_100137760(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for ConfiguredUnit(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10015A398(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
    }
  }
}

void sub_1001377E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = &unk_1009A2F18;
  sub_100158B48(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_1009A2F30;
    v8[3] = &unk_1009A2F30;
    sub_100158B48(319, (unint64_t *)&qword_100BD7458, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      v8[5] = &unk_1009A2F30;
      v8[6] = &unk_1009A2F48;
      v6 = type metadata accessor for Text.Measurements(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

uint64_t type metadata accessor for AppStoreReviewManager()
{
  return objc_opt_self(_TtC7Weather21AppStoreReviewManager);
}

uint64_t sub_1001378E4(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = type metadata accessor for AppStoreReviewPrivacySampler();
  v11 = &off_100B66550;
  *(_QWORD *)&v9 = a2;
  if (qword_100BC2630 != -1)
    swift_once(&qword_100BC2630, sub_10015B1F4);
  v6 = sub_1000BA294(&qword_100C076F8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = swift_retain();
  *(_QWORD *)(a3 + 96) = SettingProperty.init(_:)(v7);
  sub_10003C800(a1, a3 + 16);
  sub_10003C800(&v9, a3 + 56);
  return a3;
}

uint64_t sub_1001379AC(__int128 *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v14 = *a2;
  v15 = &off_100B66550;
  v13[0] = a2;
  v3 = type metadata accessor for AppStoreReviewManager();
  v4 = swift_allocObject(v3, 104, 7);
  v5 = sub_100068EB4((uint64_t)v13, v14);
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v9 + 16))(v8, v6);
  v10 = sub_1001378E4(a1, *v8, v4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v13);
  return v10;
}

uint64_t type metadata accessor for AppLaunchCountMonitor()
{
  return objc_opt_self(_TtC7Weather21AppLaunchCountMonitor);
}

uint64_t sub_100137A90()
{
  uint64_t v0;

  return sub_1000174CC(v0);
}

uint64_t sub_100137A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfigurationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100137AE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for AppConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ActivityActionReducer()
{
  return objc_opt_self(_TtC7Weather21ActivityActionReducer);
}

void type metadata accessor for WindowHeightCategory()
{
  sub_100098884();
}

uint64_t sub_100137B74(double a1)
{
  uint64_t i;
  uint64_t v3;

  for (i = 3; ; --i)
  {
    if (!*((_BYTE *)&off_100B59120 + i + 31))
    {
      if (a1 >= 0.0 || i == 1)
        return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
      goto LABEL_13;
    }
    if (*((_BYTE *)&off_100B59120 + i + 31) != 1)
      break;
    if (a1 >= 1024.0)
      return static LocationSearchEntityFromStringResolver.__derived_struct_equals(_:_:)();
LABEL_12:
    if (i == 1)
      return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
LABEL_13:
    v3 = i - 2;
    if (v3 >= 3)
    {
      __break(1u);
      return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
    }
  }
  if (a1 < 1200.0)
    goto LABEL_12;
  return 2;
}

void sub_100137C00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v2 = type metadata accessor for UVIndexComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    v8[2] = "\t";
    v8[3] = "\t";
    sub_100158DB0(319);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100121E44(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100137CAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_1009CE128;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 64);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100137D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t type metadata accessor for StatePersistenceData(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StatePersistenceData);
}

unint64_t sub_100137D58()
{
  unint64_t result;

  result = qword_100BC5B10;
  if (!qword_100BC5B10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SidebarVisibilityKey, &type metadata for SidebarVisibilityKey);
    atomic_store(result, (unint64_t *)&qword_100BC5B10);
  }
  return result;
}

uint64_t type metadata accessor for SharedSearchAssembly()
{
  return objc_opt_self(_TtC7Weather20SharedSearchAssembly);
}

double sub_100137DB4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BDBAC8);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_100767A2C, 0, v2);
  swift_release(v3);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

double sub_100137E08(__n128 a1)
{
  return sub_100137DB4(a1);
}

uint64_t sub_100137E1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NotificationsReducer()
{
  return objc_opt_self(_TtC7Weather20NotificationsReducer);
}

uint64_t sub_100137EC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NotificationLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_100C020F8;
  if (!qword_100C020F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationLocation);
  return result;
}

uint64_t sub_100137F4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ArticlePlacementLocation(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100137FC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ArticleModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009A73F8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for MoonScrubberAssembly()
{
  return objc_opt_self(_TtC7Weather20MoonScrubberAssembly);
}

double sub_100138054(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BE77C8);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_10067BC5C, 0, v2);
  swift_release(v3);
  v4 = swift_release(v1);
  v5 = ProxyContainer.private.getter(v4);
  RegistrationContainer.lazy(block:)(sub_10067BE34, 0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double sub_1001380D0(__n128 a1)
{
  return sub_100138054(a1);
}

uint64_t sub_1001380E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for MoonDetailSelectedDate(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_1009D7778;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MoonCalendarAssembly()
{
  return objc_opt_self(_TtC7Weather20MoonCalendarAssembly);
}

double sub_10013818C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BE7580);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_10091B1C0, 0, v2);
  swift_release(v3);
  v4 = swift_release(v1);
  v5 = ProxyContainer.private.getter(v4);
  RegistrationContainer.lazy(block:)(sub_10091B398, 0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double sub_100138208(__n128 a1)
{
  return sub_10013818C(a1);
}

uint64_t type metadata accessor for MessageCoverAssembly()
{
  return objc_opt_self(_TtC7Weather20MessageCoverAssembly);
}

double sub_10013823C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BC6738);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_1002435F4, 0, v2);
  swift_release(v3);
  v4 = swift_release(v1);
  v5 = ProxyContainer.private.getter(v4);
  RegistrationContainer.lazy(block:)(sub_10024377C, 0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double sub_1001382B8(__n128 a1)
{
  return sub_10013823C(a1);
}

uint64_t type metadata accessor for MainViewModelFactory()
{
  return objc_opt_self(_TtC7Weather20MainViewModelFactory);
}

uint64_t type metadata accessor for LocationViewerModule()
{
  return objc_opt_self(_TtC7Weather20LocationViewerModule);
}

_QWORD *sub_10013830C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v27 = &off_100B7D558;
  v26 = type metadata accessor for LocationViewerInteractor();
  v24 = &off_100B99BA0;
  *(_QWORD *)&v25 = a1;
  v23 = &type metadata for ContentStatusBannerViewFactory;
  if (qword_100BC2408 != -1)
    swift_once(&qword_100BC2408, sub_100159778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000AECD4(v16, (uint64_t)qword_100CAF010);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Initializing LocationViewer module", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  sub_10003C800(&v25, (uint64_t)(a7 + 2));
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a9;
  sub_10003C800(a5, (uint64_t)(a7 + 11));
  a7[16] = a6;
  sub_10003C800(&v22, (uint64_t)(a7 + 17));
  return a7;
}

_QWORD *sub_10013847C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v35 = a5;
  v36 = a6;
  v34 = a4;
  v41 = a9;
  v42 = a12;
  v19 = sub_10005F164(v40);
  sub_1000992E4((uint64_t)v19, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 32));
  v38 = a10;
  v39 = a13;
  v20 = sub_10005F164(v37);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(v20, a7, a10);
  v21 = (_QWORD *)swift_allocObject(a8, 176, 7);
  sub_100068EB4((uint64_t)v40, v41);
  sub_1000BB420();
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000992E4((uint64_t)v24, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16));
  sub_100068EB4((uint64_t)v37, v38);
  sub_1000BB420();
  __chkstk_darwin(v27);
  sub_1000992E4((uint64_t)&v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16));
  v31 = sub_10013830C(*v24, a2, a3, v34, v35, v36, v21, a11, a14);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v37);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v40);
  return v31;
}

double sub_1001385F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9[2];
  _BYTE v10[40];
  _BYTE v11[40];

  v3 = v1[7];
  sub_100043CA8((uint64_t)(v1 + 2), (uint64_t)v11);
  v4 = v1[8];
  v5 = v1[9];
  v6 = v1[10];
  sub_100043CA8((uint64_t)(v1 + 11), (uint64_t)v10);
  v7 = v1[16];
  sub_100043CA8((uint64_t)(v1 + 17), (uint64_t)v9);
  sub_100528B88(v3, (uint64_t)v11, a1, v4, v5, v6, (uint64_t)v10, v7, v9);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v5);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

void sub_1001386B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1001386D4(a1, *(_BYTE *)v2, *(_QWORD *)(v2 + 24), a2, *(double *)(v2 + 8), *(double *)(v2 + 16));
}

uint64_t sub_1001386C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA94FC, 1);
}

void sub_1001386D4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (**v27)(double *@<X8>);
  uint64_t v28[3];
  uint64_t v29;

  v28[0] = a4;
  v11 = sub_1000BA294(&qword_100BC4168);
  __chkstk_darwin(v11);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BC4170);
  __chkstk_darwin(v14);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BC4178);
  __chkstk_darwin(v17);
  v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 0;
  if ((a2 & 1) != 0)
  {
    *(double *)&v28[1] = a6;
    v28[2] = a3;
    v21 = sub_1000BA294(&qword_100BC40A8);
    State.wrappedValue.getter(&v29, v21);
    v20 = v29;
  }
  v22 = sub_1000BA294(&qword_100BC4180);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v13, a1, v22);
  v23 = &v13[*(int *)(v11 + 36)];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = v20;
  v24 = swift_allocObject(&unk_100B5CFE8, 48, 7);
  v25 = a2 & 1;
  *(_BYTE *)(v24 + 16) = v25;
  *(double *)(v24 + 24) = a5;
  *(double *)(v24 + 32) = a6;
  *(_QWORD *)(v24 + 40) = a3;
  v26 = swift_allocObject(&unk_100B5D010, 48, 7);
  *(_BYTE *)(v26 + 16) = v25;
  *(double *)(v26 + 24) = a5;
  *(double *)(v26 + 32) = a6;
  *(_QWORD *)(v26 + 40) = a3;
  sub_100037768((uint64_t)v13, (uint64_t)v16, &qword_100BC4168);
  v27 = (void (**)(double *@<X8>))&v16[*(int *)(v14 + 36)];
  *v27 = sub_100179C48;
  v27[1] = (void (*)(double *@<X8>))v24;
  v27[2] = (void (*)(double *@<X8>))sub_100179C58;
  v27[3] = (void (*)(double *@<X8>))v26;
  swift_retain_n(a3, 2);
  sub_100021A14((uint64_t)v13, &qword_100BC4168);
  sub_100037768((uint64_t)v16, (uint64_t)v19, &qword_100BC4170);
  *(_QWORD *)&v19[*(int *)(v17 + 36)] = 0x3FF0000000000000;
  sub_100021A14((uint64_t)v16, &qword_100BC4170);
  sub_1000787D4((uint64_t)v19, v28[0], &qword_100BC4178);
}

uint64_t type metadata accessor for LocationInputFactory()
{
  return objc_opt_self(_TtC7Weather20LocationInputFactory);
}

uint64_t type metadata accessor for LocationDataProvider()
{
  return objc_opt_self(_TtC7Weather20LocationDataProvider);
}

void sub_100138970()
{
  sub_1001389B0();
}

uint64_t sub_100138990()
{
  return sub_100138A74();
}

void sub_1001389B0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;

  v1 = (uint64_t)v0;
  v2 = v0 + 7;
  v3 = v0[10];
  v4 = v0[11];
  sub_1000DB418(v0 + 7, v3);
  v5 = dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v3, v4);
  swift_retain();
  v6 = sub_10003CB10(v5, v1);
  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  sub_1000DB418(v2, v8);
  v9 = dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v8, v7);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = swift_bridgeObjectRelease(v9);
  if (v10 >> 31)
    __break(1u);
  else
    FollowingLocationListData.init(locations:locationCount:)(v6, v10, v11);
}

uint64_t sub_100138A74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  uint64_t v10;

  v1 = type metadata accessor for CoarseLocationStatus(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[5];
  v6 = v0[6];
  sub_1000DB418(v0 + 2, v5);
  v7 = dispatch thunk of LocationManagerType.limitsPrecision.getter(v5, v6);
  v8 = (unsigned int *)&enum case for CoarseLocationStatus.coarse(_:);
  if ((v7 & 1) == 0)
    v8 = (unsigned int *)&enum case for CoarseLocationStatus.precise(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *v8, v1);
  return CoarseLocationData.init(status:)(v4);
}

uint64_t sub_100138B3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[6];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WeatherData(319);
    if (v4 <= 0x3F)
    {
      v7[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for PreprocessedWeatherData(319);
      if (v5 <= 0x3F)
      {
        v7[2] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for NewsDataModel(319);
        if (v6 <= 0x3F)
        {
          v7[3] = *(_QWORD *)(result - 8) + 64;
          v7[4] = &unk_1009D6B48;
          v7[5] = &unk_1009D6B48;
          swift_initStructMetadata(a1, 256, 6, v7, a1 + 16);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for LocationContentState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C11A38;
  if (!qword_100C11A38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationContentState);
  return result;
}

uint64_t type metadata accessor for ListViewStateReducer()
{
  return objc_opt_self(_TtC7Weather20ListViewStateReducer);
}

_QWORD *sub_100138C5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;
  _QWORD v37[5];

  v6 = *a3;
  v7 = type metadata accessor for NotificationSettingsViewModelFactory();
  v37[3] = v7;
  v37[4] = &off_100B9CCB8;
  v37[0] = a1;
  v8 = type metadata accessor for NotificationsOptInViewModelFactory();
  v35 = v8;
  v36 = &off_100B88480;
  v34[0] = a2;
  v32 = v6;
  v33 = &off_100B887A0;
  v31[0] = a3;
  v9 = type metadata accessor for ListViewStateReducer();
  v10 = (_QWORD *)swift_allocObject(v9, 136, 7);
  v11 = sub_100068EB4((uint64_t)v37, v7);
  v12 = __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)&v31[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
  v16 = sub_100068EB4((uint64_t)v34, v35);
  v17 = __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)&v31[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100068EB4((uint64_t)v31, v32);
  v22 = __chkstk_darwin(v21);
  v24 = (_QWORD *)((char *)&v31[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  v26 = *v14;
  v27 = *v19;
  v28 = *v24;
  v10[5] = v7;
  v10[6] = &off_100B9CCB8;
  v10[7] = v27;
  v10[2] = v26;
  v10[10] = v8;
  v10[11] = &off_100B88480;
  v10[15] = v6;
  v10[16] = &off_100B887A0;
  v10[12] = v28;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v34);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v37);
  return v10;
}

void sub_100138E40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[17];

  sub_1001345CC(319, (unint64_t *)&qword_100BD4AE8, (uint64_t (*)(uint64_t))&type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1009A2C68;
    v8[2] = &unk_1009A2C80;
    v8[3] = &unk_1009A2C98;
    v8[4] = &unk_1009A2C98;
    v8[5] = &unk_1009A2C98;
    v8[6] = &unk_1009A2C98;
    v8[7] = &unk_1009A2C98;
    v8[8] = &unk_1009A2C98;
    v8[9] = &unk_1009A2C98;
    sub_1001345CC(319, &qword_100BE5460, type metadata accessor for ActualListInput);
    if (v5 <= 0x3F)
    {
      v8[10] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001345CC(319, (unint64_t *)&unk_100BE5468, type metadata accessor for ListViewModel);
      if (v7 <= 0x3F)
      {
        v8[11] = *(_QWORD *)(v6 - 8) + 64;
        v8[12] = &unk_1009A2CB0;
        v8[13] = &unk_1009A2CC8;
        v8[14] = &unk_1009A2CB0;
        v8[15] = &unk_1009A2CE0;
        v8[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
        swift_updateClassMetadata2(a1, 256, 17, v8, a1 + 80);
      }
    }
  }
}

uint64_t type metadata accessor for ListViewModelFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE5450;
  if (!qword_100BE5450)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListViewModelFactory);
  return result;
}

uint64_t type metadata accessor for InteractionsAssembly()
{
  return objc_opt_self(_TtC7Weather20InteractionsAssembly);
}

uint64_t sub_100138FBC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a2[3];
  v5 = a2[4];
  sub_1000DB418(a2, v4);
  v6 = sub_1000BA294(&qword_100BE0090);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v11)
  {
    sub_10003C800(&v10, (uint64_t)v12);
    v8 = v13;
    v9 = v14;
    sub_1000DB418(v12, v13);
    dispatch thunk of ScenePhaseManagerType.addObserver(_:)(&v10, v2, v3, v8, v9);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v10);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_100139078@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43B0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v8)
  {
    v7 = type metadata accessor for InteractionDonationManager(0);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    result = sub_10012F8F8(v8, v9, v10, v11);
    a2[3] = v7;
    a2[4] = &off_100B78750;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100139134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v14;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v4);
  v6 = sub_1000BA294(&qword_100BF0698);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_100139078, 0, v6);
  swift_release(v5);
  v8 = sub_1000BA294(&qword_100BF06A0);
  v9 = Definition.thenConfigure<A>(as:configuration:)(v8, sub_100138FBC, 0, v8);
  v10 = swift_release(v7);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v1 + 104))(v3, enum case for Scope.singleton(_:), v0, v10);
  v11 = Definition.inScope(_:)(v3);
  swift_release(v11);
  v12 = swift_release(v9);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v12);
}

uint64_t sub_100139248()
{
  return sub_100139134();
}

uint64_t sub_10013925C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;

  v4 = &unk_1009B1AE8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = (char *)&value witness table for Builtin.Int64 + 64;
    v9 = &unk_1009B1B00;
    swift_initStructMetadata(a1, 256, 6, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DetailChartSelection(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF3A40;
  if (!qword_100BF3A40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailChartSelection);
  return result;
}

uint64_t type metadata accessor for DemoPresetMiddleware()
{
  return objc_opt_self(_TtC7Weather20DemoPresetMiddleware);
}

ValueMetadata *type metadata accessor for ConfiguredUnitsState()
{
  return &type metadata for ConfiguredUnitsState;
}

unint64_t sub_100139354()
{
  unint64_t result;

  result = qword_100BEDAD8;
  if (!qword_100BEDAD8)
  {
    result = swift_getWitnessTable(&unk_1009AC170, &type metadata for BottomBarButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100BEDAD8);
  }
  return result;
}

uint64_t sub_100139390(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB882C, 1);
}

void type metadata accessor for AutomationSearchInfo()
{
  sub_100098884();
}

void type metadata accessor for WindowWidthCategory()
{
  sub_100098884();
}

BOOL sub_1001393B8(double a1)
{
  char v1;
  _BOOL8 result;
  uint64_t v3;
  char v4;
  unsigned __int8 v5;

  v1 = 0;
  result = a1 >= 1024.0;
  v3 = &_mh_execute_header.magic + 1;
  do
  {
    while (*((_BYTE *)&off_100B590F8 + v3 + 32) == 1)
    {
      v3 = 0;
      v4 = (a1 >= 1024.0) | v1;
      v1 = 1;
      if ((v4 & 1) != 0)
        return result;
    }
    v3 = 0;
    v5 = v1 ^ 1;
    v1 = 1;
  }
  while (((a1 < 0.0) & v5) != 0);
  return 0;
}

double sub_10013942C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  double result;

  v4 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5[5]).n128_u64[0];
  return result;
}

uint64_t sub_100139484(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "0";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001394F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA945C, 1);
}

uint64_t sub_10013950C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA94D4, 1);
}

uint64_t sub_10013951C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_10098BC80, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100139548(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t type metadata accessor for StateProcessorGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateProcessorGroup);
}

uint64_t type metadata accessor for ShortcutItemUpdater()
{
  return objc_opt_self(_TtC7Weather19ShortcutItemUpdater);
}

void sub_1001395B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009921A0;
  sub_100158C7C(319, qword_100BCCEE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100139648(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAFF88, 1);
}

uint64_t sub_100139658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SafariSheetModifier.SafariPresenter(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for SafariSheetModifier(0);
  sub_100038D20(a1 + *(int *)(v10 + 20), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  v20[0] = *(_QWORD *)a1;
  v20[1] = v11;
  v21 = v12;
  v13 = sub_1000BA294((uint64_t *)&unk_100BD4270);
  Binding.projectedValue.getter(v13);
  v14 = v22;
  v15 = v23;
  v16 = v24;
  *v9 = swift_getKeyPath(&unk_100992248);
  v17 = sub_1000BA294(&qword_100BD4338);
  swift_storeEnumTagMultiPayload(v9, v17, 0);
  sub_10015BBC0((uint64_t)v6, (uint64_t)v9 + *(int *)(v7 + 20));
  v18 = (char *)v9 + *(int *)(v7 + 24);
  *(_QWORD *)v18 = v14;
  *((_QWORD *)v18 + 1) = v15;
  v18[16] = v16;
  sub_1002C98A4((uint64_t)v9, a2);
  *(_QWORD *)(a2 + *(int *)(sub_1000BA294(&qword_100BD4340) + 36)) = 0;
  return sub_1002C98E8((uint64_t)v9);
}

uint64_t sub_1001397C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  v8 = a2 + *(int *)(sub_1000BA294(&qword_100BD4320) + 36);
  sub_100139658(v2, v8);
  v9 = (uint64_t *)(v8 + *(int *)(sub_1000BA294(&qword_100BD4328) + 36));
  *v9 = v5;
  v9[1] = v7;
  v10 = sub_1000BA294(&qword_100BD4330);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, a1, v10);
}

void sub_100139858(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100158C7C(319, (unint64_t *)&unk_100BD43B8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158C7C(319, qword_100BCCEE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1009921A0;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t type metadata accessor for SafariSheetModifier.SafariPresenter(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BD43A8, (uint64_t)&nominal type descriptor for SafariSheetModifier.SafariPresenter);
}

void sub_100139928(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = type metadata accessor for SafariSheetModifier.SafariPresenter(255);
    atomic_store(sub_10003BC38(v2), a1);
  }
  sub_10004A298();
}

uint64_t sub_10013995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_100139928(&qword_100BD4418);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

id sub_1001399BC@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100139A78();
  *a1 = result;
  return result;
}

uint64_t sub_1001399E0(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

void sub_100139A18()
{
  sub_100139928(&qword_100BD4408);
}

uint64_t sub_100139A3C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1000BA294(&qword_100BD4410);
  UIViewControllerRepresentableContext.coordinator.getter(&v2, v0);
  return v2;
}

id sub_100139A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v14;

  v1 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SafariSheetModifier.SafariPresenter(0);
  sub_100038D20(v0 + *(int *)(v7 + 20), (uint64_t)v6);
  v8 = v0 + *(int *)(v7 + 24);
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  swift_retain();
  swift_retain();
  sub_1001591FC();
  v12 = objc_allocWithZone((Class)type metadata accessor for SafariSheetModifier.SafariPresenter.Coordinator(0));
  return sub_10000CA64((uint64_t)v6, v9, v10, v11, (uint64_t)v3);
}

void sub_100139B7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100158C7C(319, qword_100BCCEE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1009921A0;
    v4 = type metadata accessor for ColorScheme(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1009921B8;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for SafariSheetModifier.SafariPresenter.Coordinator(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD4258, (uint64_t)&nominal type descriptor for SafariSheetModifier.SafariPresenter.Coordinator);
}

void sub_100139C98(uint64_t a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType(v1);
  objc_msgSendSuper2(&v3, "didMoveToParentViewController:", a1);
  sub_100021DC0();
}

void sub_100139CE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  switch(swift_getEnumCaseMultiPayload(a1))
  {
    case 1u:
      v2 = type metadata accessor for LocationModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v2))
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      v3 = (uint64_t)a1 + *(int *)(sub_1000BA294((uint64_t *)&unk_100C0B810) + 48);
      v4 = type metadata accessor for URL(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v3, 1, v4))
      {
        v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v11 = v3;
        v9 = v4;
        goto LABEL_10;
      }
      break;
    case 2u:
      v5 = type metadata accessor for NotificationSubscription.Location(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = &qword_100BD2378;
      goto LABEL_9;
    case 3u:
    case 4u:
      swift_bridgeObjectRelease(*a1);
      break;
    case 5u:
      v7 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      v6 = &qword_100BD2370;
LABEL_9:
      v8 = (char *)a1 + *(int *)(sub_1000BA294(v6) + 48);
      v9 = type metadata accessor for NotificationSubscription.Kind(0);
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v11 = (uint64_t)v8;
LABEL_10:
      v10(v11, v9);
      break;
    default:
      return;
  }
}

uint64_t *sub_100139E2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 1u:
        v8 = type metadata accessor for LocationModel(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v8))
        {
          v9 = type metadata accessor for NotificationLocation(0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v8);
        }
        v26 = *(int *)(sub_1000BA294((uint64_t *)&unk_100C0B810) + 48);
        v27 = (char *)a1 + v26;
        v28 = (char *)a2 + v26;
        v29 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v29))
        {
          v30 = sub_1000BA294(&qword_100BD4280);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, v29);
        }
        v16 = a1;
        v17 = a3;
        v18 = 1;
        goto LABEL_16;
      case 2u:
        v11 = type metadata accessor for NotificationSubscription.Location(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = *(int *)(sub_1000BA294(&qword_100BD2378) + 48);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for NotificationSubscription.Kind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
        v16 = a1;
        v17 = a3;
        v18 = 2;
        goto LABEL_16;
      case 3u:
        v19 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v19);
        v16 = a1;
        v17 = a3;
        v18 = 3;
        goto LABEL_16;
      case 4u:
        v20 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v20);
        v16 = a1;
        v17 = a3;
        v18 = 4;
        goto LABEL_16;
      case 5u:
        v21 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        v22 = *(int *)(sub_1000BA294(&qword_100BD2370) + 48);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for NotificationSubscription.Kind(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
        v16 = a1;
        v17 = a3;
        v18 = 5;
LABEL_16:
        swift_storeEnumTagMultiPayload(v16, v17, v18);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10013A0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotificationsAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013A124(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[32];
  _BYTE v13[32];
  _BYTE v14[32];
  _QWORD v15[6];

  v15[0] = &unk_1009A4198;
  v2 = type metadata accessor for NotificationLocation(319);
  if (v3 <= 0x3F)
  {
    sub_10015BC08(319);
    if (v5 > 0x3F)
      return v4;
    swift_getTupleTypeLayout2(v14, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
    v15[1] = v14;
    v2 = type metadata accessor for NotificationSubscription.Location(319);
    if (v6 > 0x3F)
      return v2;
    v4 = type metadata accessor for NotificationSubscription.Kind(319);
    if (v7 > 0x3F)
    {
      return v4;
    }
    else
    {
      v8 = *(_QWORD *)(v4 - 8) + 64;
      swift_getTupleTypeLayout2(v13, *(_QWORD *)(v2 - 8) + 64, v8);
      v15[2] = v13;
      v15[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v15[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v9 = type metadata accessor for Location(319);
      v2 = v9;
      if (v10 <= 0x3F)
      {
        swift_getTupleTypeLayout2(v12, *(_QWORD *)(v9 - 8) + 64, v8);
        v15[5] = v12;
        swift_initEnumMetadataMultiPayload(a1, 256, 6, v15);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t sub_10013A25C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NotificationsAction(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10013A29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v1 = type metadata accessor for NotificationSubscription.Kind(0);
  __chkstk_darwin(v1);
  sub_100098728();
  v2 = type metadata accessor for NotificationsAction(0);
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000BA294(&qword_100BDECB0);
  __chkstk_darwin(v6);
  sub_100098728();
  sub_10013A0E0(v0, v5);
  v7 = (char *)sub_10013A38C + 4 * byte_1009A4174[swift_getEnumCaseMultiPayload(v5)];
  __asm { BR              X10 }
}

uint64_t sub_10013A38C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *v3;
  v7 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v7, v5 - 328);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0x6574617473;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for NotificationAuthorizationState;
  *(_BYTE *)(inited + 48) = v6;
  Dictionary.init(dictionaryLiteral:)(inited);
  sub_1000BADF4();
  sub_1000C4A50();
  ShortDescription.init(name:_:)(v9 + 5, 0x8000000100A07240, v6, v10);
  v0[3] = v1;
  v0[4] = sub_100077ABC();
  v11 = sub_10005F164(v0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v4 + 32))(v11, v2, v1);
}

uint64_t sub_10013A70C()
{
  return sub_10013A25C(&qword_100BE5FB8, (uint64_t)&unk_1009A41B0);
}

void sub_10013A730(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001345CC(319, (unint64_t *)&qword_100BD4848, type metadata accessor for MoonDetailSelectedDate);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001345CC(319, (unint64_t *)&qword_100BC3500, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = "!";
        v8[4] = &unk_100992B40;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10013A804(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 112);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LoggerStoreObserver(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for LoggerStoreObserver);
}

void sub_10013A87C(uint64_t a1)
{
  uint64_t active;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[15];

  active = type metadata accessor for LocationViewerActiveLocationState(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(active - 8) + 64;
    v4 = type metadata accessor for LocationModel(319);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      v12[2] = &unk_10097DB48;
      v6 = type metadata accessor for LocationsState(319);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        v12[4] = &unk_10097DB60;
        v12[5] = &unk_10097DB78;
        v12[6] = &unk_10097DB90;
        v8 = type metadata accessor for Date(319);
        if (v9 <= 0x3F)
        {
          v12[7] = *(_QWORD *)(v8 - 8) + 64;
          v12[8] = &unk_10097DB78;
          v12[9] = (char *)&value witness table for Builtin.Int64 + 64;
          v12[10] = &unk_10097DB78;
          v12[11] = &unk_10097DB78;
          v12[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v12[13] = &unk_10097DB78;
          sub_1001528FC(319);
          if (v11 <= 0x3F)
          {
            v12[14] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 15, v12, a1 + 16);
          }
        }
      }
    }
  }
}

void sub_10013A99C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = &unk_10098D4B8;
  sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_10098D4D0;
    sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_10098D4D0;
      v6[6] = &unk_10098D4B8;
      v6[7] = &unk_10098D4E8;
      v6[8] = &unk_10098D4E8;
      v6[9] = &unk_10098D500;
      v6[10] = &unk_10098D518;
      v6[11] = &unk_10098D500;
      v6[12] = &unk_10098D518;
      swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
    }
  }
}

void sub_10013AA94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[18];

  v8[0] = &unk_1009C2008;
  v8[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[2] = &unk_1009C2008;
  v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[5] = &unk_1009C2020;
  v8[6] = &unk_1009C2020;
  v8[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[8] = &unk_1009C2038;
  sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
  if (v3 <= 0x3F)
  {
    v8[9] = *(_QWORD *)(v2 - 8) + 64;
    v8[10] = &unk_1009C2038;
    sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v8[11] = *(_QWORD *)(v4 - 8) + 64;
      v8[12] = &unk_1009C2050;
      v8[13] = &unk_1009C2038;
      v8[14] = &unk_1009C2068;
      v8[15] = &unk_1009C2080;
      v8[16] = &unk_1009C2098;
      v6 = type metadata accessor for Text.Measurements(319);
      if (v7 <= 0x3F)
      {
        v8[17] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 18, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10013ABC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABEDA8, 1);
}

uint64_t sub_10013ABD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationContentView(0) - 8) + 80);
  return sub_10013AC04(*(_BYTE *)(v0 + 16), (_QWORD *)(v0 + ((v1 + 17) & ~v1)));
}

uint64_t sub_10013AC04(char a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationViewModel(0);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v12 = a2[15];
    v13 = a2[16];
    sub_1000DB418(a2 + 12, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    sub_10003B59C((uint64_t)(a2 + 7), (uint64_t)v19);
    sub_1000DB418(v19, v19[3]);
    v14 = a2[1];
    swift_retain();
    sub_10008D488();
    swift_release(v14);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
    sub_1000215BC((uint64_t)v11, type metadata accessor for LocationViewModel);
    Location.Identifier.id.getter(v15);
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_100134568();
    swift_bridgeObjectRelease(v17);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v19);
  }
  return result;
}

uint64_t sub_10013AD74(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _QWORD *v3;

  v1 = sub_1000D0E78(a1);
  return sub_10013AD98(v1, v2, v3);
}

uint64_t sub_10013AD98(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];

  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationViewModel(0);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v20[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a2 == 1)
  {
    v13 = a3[15];
    v14 = a3[16];
    sub_1000DB418(a3 + 12, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    sub_10003B59C((uint64_t)(a3 + 7), (uint64_t)v20);
    sub_1000DB418(v20, v20[3]);
    v15 = a3[1];
    swift_retain();
    sub_10008D488();
    swift_release(v15);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
    sub_1000215BC((uint64_t)v12, type metadata accessor for LocationViewModel);
    Location.Identifier.id.getter(v16);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100134568();
    swift_bridgeObjectRelease(v18);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
  }
  return result;
}

uint64_t sub_10013AF10(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;

  v3 = sub_1000D0E78(a1);
  return a3(v3);
}

uint64_t sub_10013AF44()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;

  v0 = type metadata accessor for SettingReader(0);
  v1 = static SettingReader.shared.getter(v0);
  if (qword_100BC2660 != -1)
    swift_once(&qword_100BC2660, sub_10015A684);
  v2 = SettingReader.isEnabled(_:with:)(qword_100CAF4C8, 2);
  result = swift_release(v1);
  byte_100C00A38 = v2 & 1;
  return result;
}

uint64_t sub_10013AFC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  sub_10004037C(v0, qword_100C00A20);
  v1 = (_QWORD *)sub_1000AECD4(v0, (uint64_t)qword_100C00A20);
  v2 = type metadata accessor for SettingReader(0);
  v3 = static SettingReader.shared.getter(v2);
  v4 = static Settings.VFX.animatedBackgrounds.getter();
  v5 = Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release(v4);
  SettingReader.read<A>(_:)(v1);
  swift_release(v3);
  return swift_release(v5);
}

_QWORD *sub_10013B054()
{
  uint64_t v0;

  v0 = type metadata accessor for SceneResizeMonitor();
  swift_allocObject(v0, 48, 7);
  return sub_100036180();
}

uint64_t sub_10013B088(uint64_t a1, uint64_t a2)
{
  return sub_10013AF10(a1, a2, (uint64_t (*)(uint64_t))sub_10013B094);
}

void sub_10013B094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for LocationViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a3 + 8);
  swift_retain();
  sub_10008D488();
  swift_release(v7);
  v8 = *(_QWORD *)&v6[*(int *)(v4 + 28)];
  swift_bridgeObjectRetain(v8);
  sub_1000215BC((uint64_t)v6, type metadata accessor for LocationViewModel);
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease(v8);
  if (v9)
    sub_100009A1C();
}

unint64_t sub_10013B154()
{
  unint64_t result;

  result = qword_100BC5AF8;
  if (!qword_100BC5AF8)
  {
    result = swift_getWitnessTable(&unk_1009801B4, &type metadata for IsBackgroundDarkKey);
    atomic_store(result, (unint64_t *)&qword_100BC5AF8);
  }
  return result;
}

uint64_t sub_10013B190(unsigned __int8 a1, char a2, char a3)
{
  unsigned int v3;
  int v4;

  if ((a3 & 1) != 0)
    v3 = 4;
  else
    v3 = 3;
  if ((a2 & 1) != 0)
  {
    v3 = 0x10003u >> (8 * a1);
    v4 = 0;
  }
  else
  {
    v4 = a1;
  }
  return v4 | (v3 << 8);
}

uint64_t sub_10013B1C8(uint64_t a1, double a2)
{
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;

  if (a1 != 1)
  {
    v3 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v3, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    sub_1007C701C(v5, v7, v9, v11);
  }
  return *(_QWORD *)&a2;
}

void sub_10013B278()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double Width;
  id v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double Height;
  CGRect v23;
  CGRect v24;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1)
  {
    v2 = (void *)objc_opt_self(UIScreen);
    v3 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v3, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    v23.origin.x = v5;
    v23.origin.y = v7;
    v23.size.width = v9;
    v23.size.height = v11;
    Width = CGRectGetWidth(v23);
    v13 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v13, "bounds");
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v21 = v20;

    v24.origin.x = v15;
    v24.origin.y = v17;
    v24.size.width = v19;
    v24.size.height = v21;
    Height = CGRectGetHeight(v24);
    if (Width > Height)
      Height = Width;
    if (Height >= 1366.0)
      sub_1001512F8();
  }
}

uint64_t sub_10013B4E0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  int v15;
  id v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v36;
  double v37;
  uint64_t v38;

  v9 = sub_10009E908();
  __chkstk_darwin(v9);
  sub_100099864();
  v10 = type metadata accessor for ContentSizeCategory(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v15 != enum case for ContentSizeCategory.extraSmall(_:)
    && v15 != enum case for ContentSizeCategory.small(_:)
    && v15 != enum case for ContentSizeCategory.medium(_:)
    && v15 != enum case for ContentSizeCategory.large(_:)
    && v15 != enum case for ContentSizeCategory.extraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    if (v15 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v15 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v15 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v15 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v15 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  sub_10000A8D4(a3, v4);
  if (a2 != 1)
  {
    v26 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v26, "bounds");
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;

    sub_1007C701C(v28, v30, v32, v34);
  }
  if (a4 < 620.0)
  {
    sub_1000BB638();
    return 0;
  }
  sub_1007C6F8C(a2);
  v37 = v36;
  sub_1000BB638();
  if (v37 > a4)
    return 1;
  else
    return 2;
}

void *sub_10013B744@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  char v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  double v25;
  _BYTE __src[72];

  sub_10013B278();
  v9 = v8;
  v11 = v10;
  sub_1001512F8();
  v13 = v12;
  sub_1000FFA0C();
  v15 = sub_10013B190(a1, v13 & 1, v14 & 1);
  v16 = sub_10013B1C8(a2, a4);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = sub_10009E908();
  v24 = DynamicTypeSize.isAccessibilitySize.getter(v23);
  v25 = a4;
  if ((v24 & 1) == 0)
  {
    if (qword_100BC2608 != -1)
      swift_once(&qword_100BC2608, sub_10014B028);
    v25 = *(double *)&qword_100CAF438;
  }
  sub_1007F9828(*(double *)&v16, v18, v20, v22 & 1, v15, HIBYTE(v15), (uint64_t)__src, a4, v11, v9, v25);
  return memcpy(a3, __src, 0x48uLL);
}

unint64_t sub_10013B888()
{
  unint64_t result;

  result = qword_100BC5B38;
  if (!qword_100BC5B38)
  {
    result = swift_getWitnessTable(&unk_100980064, &type metadata for ForegroundEffectKey);
    atomic_store(result, (unint64_t *)&qword_100BC5B38);
  }
  return result;
}

void sub_10013B8C4(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10013B910();
  sub_10007EBC8(v2, a1, &qword_100BC5B30);
}

uint64_t sub_10013B8F4(uint64_t a1)
{
  return sub_100150E78(a1, &qword_100BC5B30, qword_100BC5A50, (uint64_t (*)(_QWORD))&type metadata accessor for ForegroundEffect);
}

uint64_t sub_10013B910()
{
  uint64_t v0;

  if (qword_100BC1E68 != -1)
    swift_once(&qword_100BC1E68, sub_10013B8F4);
  v0 = sub_1000BA294(&qword_100BC5B30);
  return sub_1000AECD4(v0, (uint64_t)qword_100BC5A50);
}

uint64_t type metadata accessor for DetailChartAssembly()
{
  return objc_opt_self(_TtC7Weather19DetailChartAssembly);
}

double sub_10013B97C(__n128 a1)
{
  return sub_10001E7BC(a1);
}

uint64_t sub_10013B990(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentStatusBanner(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013B9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentStatusBanner(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10013BA10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE528;
  if (!qword_100BEE528)
  {
    v1 = sub_100075EB0(&qword_100BC3620);
    sub_10007A100((uint64_t)&unk_100BEE530);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE528);
  }
  return result;
}

void sub_10013BA90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009B8A18;
  v4[1] = &unk_1009B8A30;
  sub_10015BB24(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10013BB0C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

ValueMetadata *type metadata accessor for ContentStatusBanner.Placement()
{
  return &type metadata for ContentStatusBanner.Placement;
}

void sub_10013BB30()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ContentStatusBanner(0);
  sub_10004037C(v3, qword_100BED5B0);
  v4 = sub_1000AECD4(v3, (uint64_t)qword_100BED5B0);
  Date.init()(v4);
  v5 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v2, 0, 1, v5);
  *(_BYTE *)v4 = 1;
  *(_OWORD *)(v4 + 8) = xmmword_100988D00;
  sub_1000787D4((uint64_t)v2, v4 + *(int *)(v3 + 24), (uint64_t *)&unk_100BD35A0);
}

ValueMetadata *type metadata accessor for CollisionVFXOptions()
{
  return &type metadata for CollisionVFXOptions;
}

uint64_t sub_10013BC20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for MainAction(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1009CC9B8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10013BCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v1 = sub_1000BA294(&qword_100BC3620);
  v2 = __chkstk_darwin(v1);
  v4 = v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  __chkstk_darwin(v2);
  v6 = v19 - v5 + 8;
  v7 = type metadata accessor for BannerStateComputer(0);
  v8 = *(_QWORD *)(v0 + *(int *)(v7 + 20));
  v9 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  if (*(_QWORD *)(v8 + v9 + *(int *)(type metadata accessor for ViewState(0) + 36) + 8) == 1
    && *(_BYTE *)(v0 + *(int *)(v7 + 28)) == 1)
  {
    v10 = v8 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    swift_beginAccess(v8 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v19, 0, 0);
    if (*(_BYTE *)(v10 + *(int *)(type metadata accessor for EnvironmentState(0) + 60)))
      v11 = 2;
    else
      v11 = 1;
    v12 = *(_QWORD *)(v8 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    swift_bridgeObjectRetain(v12);
    v14 = sub_1007D5FCC(v13);
    swift_bridgeObjectRelease(v12);
    v15 = sub_1007D6488((uint64_t)v14);
    swift_bridgeObjectRelease(v14);
    v16 = type metadata accessor for ContentStatusBanner(0);
    sub_1007D7B70((uint64_t)v15, (uint64_t)&v6[*(int *)(v16 + 24)]);
    swift_bridgeObjectRelease(v15);
    *v6 = v11;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v16);
    v4 = v6;
  }
  else
  {
    v17 = type metadata accessor for ContentStatusBanner(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v17);
  }
  sub_1000F8E2C((uint64_t)v4, 0, 0);
}

void sub_10013BE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[24];

  v1 = sub_1000BA294(&qword_100BC3620);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v59 - v5;
  v7 = type metadata accessor for LocationWeatherDataState(0);
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC9EF0);
  v11 = __chkstk_darwin(v10);
  v13 = (int64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (char *)&v59 - v14;
  v16 = type metadata accessor for BannerStateComputer(0);
  v17 = v16;
  if (*(_BYTE *)(v0 + *(int *)(v16 + 28)) != 1)
  {
    sub_1000F9188();
    if ((v39 & 1) != 0)
    {
      v40 = *(_QWORD *)(v0 + *(int *)(v17 + 20));
      v41 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
      if ((*(_BYTE *)(v40 + v41 + *(int *)(type metadata accessor for ViewState(0) + 40) + 1) & 0xC0) == 0x40)
      {
        v42 = type metadata accessor for ContentStatusBanner(0);
        v43 = (uint64_t)&v4[*(int *)(v42 + 24)];
        v44 = type metadata accessor for Date(0);
        _s7Weather24LocationCompositionStateOwst_0(v43, 1, 1, v44);
        *v4 = 0;
        *(_OWORD *)(v4 + 8) = xmmword_100995EC0;
        v45 = (uint64_t)v4;
        v46 = 0;
        v47 = v42;
LABEL_34:
        _s7Weather24LocationCompositionStateOwst_0(v45, v46, 1, v47);
        v48 = (uint64_t)v4;
LABEL_35:
        sub_1000F8E2C(v48, 0, 1);
        return;
      }
    }
LABEL_33:
    v47 = type metadata accessor for ContentStatusBanner(0);
    v45 = (uint64_t)v4;
    v46 = 1;
    goto LABEL_34;
  }
  v18 = *(int *)(v16 + 20);
  v19 = *(_QWORD *)(v0 + v18);
  v20 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  if ((*(_BYTE *)(v19 + v20 + *(int *)(type metadata accessor for ViewState(0) + 40) + 1) & 0xC0) != 0x40)
    goto LABEL_33;
  v60 = v18;
  v61 = v6;
  v62 = v4;
  v63 = v17;
  v64 = v0;
  v21 = *(_QWORD *)(v19 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  v22 = *(_QWORD *)(v21 + 64);
  v65 = v21 + 64;
  v23 = 1 << *(_BYTE *)(v21 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v66 = (unint64_t)(v23 + 63) >> 6;
  v67 = v21;
  v59 = v66 - 1;
  swift_bridgeObjectRetain(v21);
  v26 = 0;
  if (!v25)
    goto LABEL_8;
LABEL_6:
  v27 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  v28 = v27 | (v26 << 6);
  while (2)
  {
    v29 = *(_QWORD *)(v67 + 56);
    v30 = (_QWORD *)(*(_QWORD *)(v67 + 48) + 16 * v28);
    v31 = v30[1];
    *v13 = *v30;
    v13[1] = v31;
    v32 = v29 + *(_QWORD *)(v68 + 72) * v28;
    v33 = sub_1000BA294(&qword_100BC9EF8);
    sub_100080C0C(v32, (uint64_t)v13 + *(int *)(v33 + 48), type metadata accessor for LocationWeatherDataState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v33);
    swift_bridgeObjectRetain(v31);
    while (1)
    {
      sub_1000787D4((uint64_t)v13, (uint64_t)v15, &qword_100BC9EF0);
      v38 = sub_1000BA294(&qword_100BC9EF8);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v38) == 1)
      {
        swift_release(v67);
        v49 = type metadata accessor for ContentStatusBanner(0);
        v50 = (uint64_t)v62;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 1, 1, v49);
        v48 = v50;
        goto LABEL_35;
      }
      swift_bridgeObjectRelease(*((_QWORD *)v15 + 1));
      sub_10007802C((uint64_t)&v15[*(int *)(v38 + 48)], (uint64_t)v9, type metadata accessor for LocationWeatherDataState);
      if (swift_getEnumCaseMultiPayload(v9, v69) == 1)
      {
        v51 = sub_1000BA294(&qword_100BC3358);
        v52 = (uint64_t)&v9[*(int *)(v51 + 48)];
        sub_1000215BC((uint64_t)&v9[*(int *)(v51 + 64)], type metadata accessor for NewsDataModel);
        sub_1000215BC(v52, type metadata accessor for PreprocessedWeatherData);
        sub_1000215BC((uint64_t)v9, type metadata accessor for WeatherData);
        v53 = *(_QWORD *)(v64 + v60) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
        swift_beginAccess(v53, v70, 0, 0);
        if (*(_BYTE *)(v53 + *(int *)(type metadata accessor for EnvironmentState(0) + 60)))
          v54 = 2;
        else
          v54 = 1;
        v55 = type metadata accessor for ContentStatusBanner(0);
        v56 = (uint64_t)v61;
        v57 = (uint64_t)&v61[*(int *)(v55 + 24)];
        v58 = type metadata accessor for Date(0);
        _s7Weather24LocationCompositionStateOwst_0(v57, 1, 1, v58);
        *(_BYTE *)v56 = v54;
        *(_OWORD *)(v56 + 8) = xmmword_100995EC0;
        _s7Weather24LocationCompositionStateOwst_0(v56, 0, 1, v55);
        sub_1000F8E2C(v56, 0, 1);
        swift_release(v67);
        return;
      }
      sub_1000215BC((uint64_t)v9, type metadata accessor for LocationWeatherDataState);
      if (v25)
        goto LABEL_6;
LABEL_8:
      v34 = v26 + 1;
      if (__OFADD__(v26, 1))
      {
        __break(1u);
        goto LABEL_42;
      }
      if (v34 < v66)
      {
        v35 = *(_QWORD *)(v65 + 8 * v34);
        if (v35)
          goto LABEL_11;
        v36 = v26 + 2;
        ++v26;
        if (v34 + 1 < v66)
        {
          v35 = *(_QWORD *)(v65 + 8 * v36);
          if (v35)
            goto LABEL_14;
          v26 = v34 + 1;
          if (v34 + 2 < v66)
          {
            v35 = *(_QWORD *)(v65 + 8 * (v34 + 2));
            if (v35)
            {
              v34 += 2;
              goto LABEL_11;
            }
            v36 = v34 + 3;
            v26 = v34 + 2;
            if (v34 + 3 < v66)
              break;
          }
        }
      }
LABEL_25:
      v37 = sub_1000BA294(&qword_100BC9EF8);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 1, 1, v37);
      v25 = 0;
    }
    v35 = *(_QWORD *)(v65 + 8 * v36);
    if (v35)
    {
LABEL_14:
      v34 = v36;
LABEL_11:
      v25 = (v35 - 1) & v35;
      v28 = __clz(__rbit64(v35)) + (v34 << 6);
      v26 = v34;
      continue;
    }
    break;
  }
  while (1)
  {
    v34 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v34 >= v66)
    {
      v26 = v59;
      goto LABEL_25;
    }
    v35 = *(_QWORD *)(v65 + 8 * v34);
    ++v36;
    if (v35)
      goto LABEL_11;
  }
LABEL_42:
  __break(1u);
}

void sub_10013C484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  _BOOL8 v98;
  Swift::Int v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  char v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v134;
  uint64_t v135;
  Swift::Int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __n128 v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _QWORD *v178;

  v1 = v0;
  v2 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v2);
  v4 = (char *)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContentStatusBanner(0);
  v160 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v167 = (uint64_t)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v173 = (uint64_t)&v142 - v8;
  v156 = type metadata accessor for CurrentWeather(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v165 = *(_QWORD *)(v10 - 8);
  v166 = v10;
  __chkstk_darwin(v10);
  v164 = (char *)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  __chkstk_darwin(v12);
  v152 = (uint64_t)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocationsState(0);
  __chkstk_darwin(v14);
  v151 = (uint64_t)&v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CurrentLocation(0);
  v17 = __chkstk_darwin(v16);
  v146 = (uint64_t)&v142 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v145 = (uint64_t)&v142 - v19;
  v153 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v153);
  v21 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v172 = type metadata accessor for LocationWeatherDataState(0);
  v163 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v174 = (uint64_t)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BC9EF0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (uint64_t *)((char *)&v142 - v27);
  v29 = (int *)type metadata accessor for BannerStateComputer(0);
  v56 = *(_BYTE *)(v0 + v29[7]) == 1;
  v159 = v0;
  v175 = v5;
  if (!v56)
  {
    v174 = v29[6];
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + v174));
    sub_100121718(v110, v0);
    v113 = *(_QWORD *)(v111 + 16);
    if (v113)
    {
      v169 = v111;
      v114 = (unint64_t *)(v111 + 40);
      *(_QWORD *)&v112 = 141558275;
      v172 = v112;
      v170 = v4;
      v171 = (char *)&type metadata for Any + 8;
      do
      {
        v115 = *(v114 - 1);
        v116 = (void *)*v114;
        sub_10013BB0C(v115, *v114);
        if (qword_100BC24E0 != -1)
          swift_once(&qword_100BC24E0, sub_1001596E4);
        v117 = type metadata accessor for Logger(0);
        sub_1000AECD4(v117, (uint64_t)qword_100CAF288);
        sub_10013BB0C(v115, (unint64_t)v116);
        v118 = sub_10013BB0C(v115, (unint64_t)v116);
        v119 = Logger.logObject.getter(v118);
        v120 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v119, v120))
        {
          v121 = swift_slowAlloc(22, -1);
          v122 = swift_slowAlloc(32, -1);
          v178 = (_QWORD *)v122;
          *(_DWORD *)v121 = v172;
          *(_QWORD *)(v121 + 4) = 1752392040;
          *(_WORD *)(v121 + 12) = 2081;
          if (v116)
          {
            if (v116 == (void *)1)
            {
              v123 = 0xE300000000000000;
              v124 = 7364941;
            }
            else
            {
              v176 = 0x6E6F697461636F4CLL;
              v177 = 0xEA00000000002820;
              swift_bridgeObjectRetain(v116);
              v125._countAndFlagsBits = v115;
              v125._object = v116;
              String.append(_:)(v125);
              v126._countAndFlagsBits = 41;
              v126._object = (void *)0xE100000000000000;
              String.append(_:)(v126);
              sub_1000F9174(v115, (unint64_t)v116);
              v124 = v176;
              v123 = v177;
            }
          }
          else
          {
            v123 = 0xE400000000000000;
            v124 = 1953720652;
          }
          *(_QWORD *)(v121 + 14) = sub_1000CE1C8(v124, v123, (uint64_t *)&v178);
          swift_bridgeObjectRelease(v123);
          sub_1000F9174(v115, (unint64_t)v116);
          sub_1000F9174(v115, (unint64_t)v116);
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "Removing offline banner. ID=%{private,mask.hash}s", (uint8_t *)v121, 0x16u);
          swift_arrayDestroy(v122, 1);
          swift_slowDealloc(v122, -1, -1);
          swift_slowDealloc(v121, -1, -1);

          v1 = v159;
        }
        else
        {
          sub_1000F9174(v115, (unint64_t)v116);
          sub_1000F9174(v115, (unint64_t)v116);

        }
        v127 = v174;
        v128 = *(_QWORD *)(v1 + v174);
        swift_bridgeObjectRetain(v128);
        v129 = sub_1000F9020(v115, (uint64_t)v116);
        v131 = v130;
        swift_bridgeObjectRelease(v128);
        v132 = v175;
        if ((v131 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v127));
          v176 = *(_QWORD *)(v1 + v127);
          v134 = v176;
          *(_QWORD *)(v1 + v127) = 0x8000000000000000;
          v173 = v113;
          v135 = v127;
          v136 = *(_QWORD *)(v134 + 24);
          sub_1000BA294(&qword_100BC3610);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v136);
          v137 = v176;
          sub_1000F9174(*(_QWORD *)(*(_QWORD *)(v176 + 48) + 16 * v129), *(_QWORD *)(*(_QWORD *)(v176 + 48) + 16 * v129 + 8));
          v138 = (uint64_t)v170;
          sub_10007802C(*(_QWORD *)(v137 + 56) + *(_QWORD *)(v160 + 72) * v129, (uint64_t)v170, type metadata accessor for ContentStatusBanner);
          v139 = sub_10016ED30();
          _NativeDictionary._delete(at:)(v129, v137, &type metadata for ContentStatusBanner.Placement, v132, v139);
          v140 = *(_QWORD *)(v1 + v135);
          *(_QWORD *)(v1 + v135) = v137;
          v113 = v173;
          swift_bridgeObjectRelease(v140);
          v141 = 0;
        }
        else
        {
          v141 = 1;
          v138 = (uint64_t)v170;
        }
        v114 += 2;
        _s7Weather24LocationCompositionStateOwst_0(v138, v141, 1, v132);
        sub_100021A14(v138, &qword_100BC3620);
        sub_1000F9174(v115, (unint64_t)v116);
        --v113;
      }
      while (v113);
      swift_bridgeObjectRelease(v169);
    }
    else
    {
      swift_bridgeObjectRelease(v111);
    }
    return;
  }
  v150 = v29;
  v161 = v29[5];
  v30 = *(_QWORD *)(*(_QWORD *)(v0 + v161) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  v31 = *(_QWORD *)(v30 + 64);
  v147 = v30 + 64;
  v32 = 1 << *(_BYTE *)(v30 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v157 = (unint64_t)(v32 + 63) >> 6;
  v143 = v157 - 1;
  v162 = v30;
  v35 = swift_bridgeObjectRetain(v30);
  v36 = 0;
  v35.n128_u64[0] = 141558275;
  v148 = v35;
  v144 = (char *)&type metadata for Any + 8;
  v149 = v16;
  v158 = v21;
  v37 = v174;
  v171 = v26;
  while (v34)
  {
    v38 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
    v39 = v38 | (v36 << 6);
LABEL_8:
    v40 = *(_QWORD *)(v162 + 56);
    v41 = (_QWORD *)(*(_QWORD *)(v162 + 48) + 16 * v39);
    v42 = v41[1];
    *(_QWORD *)v26 = *v41;
    *((_QWORD *)v26 + 1) = v42;
    v43 = v40 + *(_QWORD *)(v163 + 72) * v39;
    v44 = sub_1000BA294(&qword_100BC9EF8);
    sub_100080C0C(v43, (uint64_t)&v26[*(int *)(v44 + 48)], type metadata accessor for LocationWeatherDataState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v44);
    swift_bridgeObjectRetain(v42);
    v37 = v174;
LABEL_27:
    sub_1000787D4((uint64_t)v26, (uint64_t)v28, &qword_100BC9EF0);
    v49 = sub_1000BA294(&qword_100BC9EF8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v49) == 1)
    {
      swift_release(v162);
      return;
    }
    v51 = *v28;
    v50 = v28[1];
    sub_10007802C((uint64_t)v28 + *(int *)(v49 + 48), v37, type metadata accessor for LocationWeatherDataState);
    if (swift_getEnumCaseMultiPayload(v37, v172) == 1)
    {
      v170 = (char *)v36;
      v52 = sub_1000BA294(&qword_100BC3358);
      v169 = v37 + *(int *)(v52 + 48);
      v168 = v37 + *(int *)(v52 + 64);
      sub_10007802C(v37, (uint64_t)v21, type metadata accessor for WeatherData);
      v54 = static Location.currentLocationID.getter(v53);
      v56 = v51 == v54 && v50 == v55;
      if (v56)
      {
        swift_bridgeObjectRelease(v50);
      }
      else
      {
        v57 = v55;
        v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v50, v54, v55, 0);
        swift_bridgeObjectRelease(v57);
        if ((v58 & 1) == 0)
          goto LABEL_44;
      }
      v60 = v151;
      sub_100080C0C(*(_QWORD *)(v1 + v161) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v151, type metadata accessor for LocationsState);
      v61 = v152;
      sub_100037768(v60, v152, (uint64_t *)&unk_100C0D170);
      sub_1000215BC(v60, type metadata accessor for LocationsState);
      v62 = v149;
      if (_s7Weather24LocationCompositionStateOwet_0(v61, 1, v149) == 1)
      {
        sub_100021A14(v61, (uint64_t *)&unk_100C0D170);
        v5 = v175;
        goto LABEL_44;
      }
      v63 = v61;
      v64 = v145;
      sub_10007802C(v63, v145, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v65 = v64;
      v66 = v62;
      v67 = v146;
      sub_10007802C(v65, v146, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      LODWORD(v66) = swift_getEnumCaseMultiPayload(v67, v66) - 1;
      sub_1000215BC(v67, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      v5 = v175;
      if (v66 >= 2)
      {
LABEL_44:
        v75 = v154;
        v76 = WeatherDataModel.currentWeather.getter(v59);
        v77 = v164;
        CurrentWeather.date.getter(v76);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v75, v156);
        v78 = *(_QWORD *)(v1 + v161) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
        swift_beginAccess(v78, &v176, 0, 0);
        if (*(_BYTE *)(v78 + *(int *)(type metadata accessor for EnvironmentState(0) + 60)))
          v79 = 2;
        else
          v79 = 1;
        v80 = *(int *)(v5 + 24);
        v81 = v173;
        v82 = v173 + v80;
        v83 = v77;
        v84 = v166;
        (*(void (**)(uint64_t, char *, uint64_t))(v165 + 16))(v173 + v80, v83, v166);
        _s7Weather24LocationCompositionStateOwst_0(v82, 0, 1, v84);
        *(_BYTE *)v81 = v79;
        *(_QWORD *)(v81 + 8) = v51;
        *(_QWORD *)(v81 + 16) = v50;
        v85 = qword_100BC24E0;
        swift_bridgeObjectRetain(v50);
        if (v85 != -1)
          swift_once(&qword_100BC24E0, sub_1001596E4);
        v86 = type metadata accessor for Logger(0);
        sub_1000AECD4(v86, (uint64_t)qword_100CAF288);
        v87 = swift_bridgeObjectRetain_n(v50, 2);
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v88, v89))
        {
          v90 = swift_slowAlloc(22, -1);
          v91 = swift_slowAlloc(32, -1);
          v178 = (_QWORD *)v91;
          *(_DWORD *)v90 = v148.n128_u32[0];
          *(_QWORD *)(v90 + 4) = 1752392040;
          *(_WORD *)(v90 + 12) = 2081;
          swift_bridgeObjectRetain(v50);
          *(_QWORD *)(v90 + 14) = sub_1000CE1C8(v51, v50, (uint64_t *)&v178);
          swift_bridgeObjectRelease_n(v50, 3);
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "Displaying offline banner. ID=%{private,mask.hash}s", (uint8_t *)v90, 0x16u);
          swift_arrayDestroy(v91, 1);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v90, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v50, 2);
        }
        v92 = v150[6];
        sub_100080C0C(v173, v167, type metadata accessor for ContentStatusBanner);
        v93 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v92));
        v178 = *(_QWORD **)(v1 + v92);
        v94 = (uint64_t)v178;
        *(_QWORD *)(v1 + v92) = 0x8000000000000000;
        v95 = sub_1000F9020(v51, v50);
        v97 = *(_QWORD *)(v94 + 16);
        v98 = (v96 & 1) == 0;
        v99 = v97 + v98;
        if (__OFADD__(v97, v98))
        {
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        v100 = v95;
        v101 = v96;
        sub_1000BA294(&qword_100BC3610);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v93, v99))
        {
          v102 = sub_1000F9020(v51, v50);
          if ((v101 & 1) != (v103 & 1))
            goto LABEL_86;
          v100 = v102;
        }
        v104 = v178;
        if ((v101 & 1) != 0)
        {
          sub_10016AB5C(v167, v178[7] + *(_QWORD *)(v160 + 72) * v100);
        }
        else
        {
          v178[(v100 >> 6) + 8] |= 1 << v100;
          v105 = (uint64_t *)(v104[6] + 16 * v100);
          *v105 = v51;
          v105[1] = v50;
          sub_10007802C(v167, v104[7] + *(_QWORD *)(v160 + 72) * v100, type metadata accessor for ContentStatusBanner);
          v106 = v104[2];
          v107 = __OFADD__(v106, 1);
          v108 = v106 + 1;
          if (v107)
            goto LABEL_84;
          v104[2] = v108;
          swift_bridgeObjectRetain(v50);
        }
        v1 = v159;
        v109 = *(_QWORD *)(v159 + v92);
        *(_QWORD *)(v159 + v92) = v104;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v109);
        sub_1000215BC(v173, type metadata accessor for ContentStatusBanner);
        (*(void (**)(char *, uint64_t))(v165 + 8))(v164, v166);
        v21 = v158;
        sub_1000215BC((uint64_t)v158, type metadata accessor for WeatherData);
        sub_1000215BC(v168, type metadata accessor for NewsDataModel);
        sub_1000215BC(v169, type metadata accessor for PreprocessedWeatherData);
        v37 = v174;
        v5 = v175;
        v36 = (uint64_t)v170;
        v26 = v171;
      }
      else
      {
        if (qword_100BC24E0 != -1)
          swift_once(&qword_100BC24E0, sub_1001596E4);
        v68 = type metadata accessor for Logger(0);
        sub_1000AECD4(v68, (uint64_t)qword_100CAF288);
        swift_bridgeObjectRetain(v50);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v70, v71))
        {
          v72 = swift_slowAlloc(22, -1);
          v73 = swift_slowAlloc(32, -1);
          v178 = (_QWORD *)v73;
          *(_DWORD *)v72 = v148.n128_u32[0];
          *(_QWORD *)(v72 + 4) = 1752392040;
          *(_WORD *)(v72 + 12) = 2081;
          swift_bridgeObjectRetain(v50);
          *(_QWORD *)(v72 + 14) = sub_1000CE1C8(v51, v50, (uint64_t *)&v178);
          swift_bridgeObjectRelease_n(v50, 3);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Not displaying offline banner - location is stale or uncertain. ID=%{private,mask.hash}s", (uint8_t *)v72, 0x16u);
          swift_arrayDestroy(v73, 1);
          v74 = v73;
          v5 = v175;
          swift_slowDealloc(v74, -1, -1);
          swift_slowDealloc(v72, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v50, 2);
        }

        v21 = v158;
        sub_1000215BC((uint64_t)v158, type metadata accessor for WeatherData);
        v36 = (uint64_t)v170;
        v26 = v171;
        sub_1000215BC(v168, type metadata accessor for NewsDataModel);
        sub_1000215BC(v169, type metadata accessor for PreprocessedWeatherData);
        v37 = v174;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v50);
      sub_1000215BC(v37, type metadata accessor for LocationWeatherDataState);
      v26 = v171;
    }
  }
  v45 = v36 + 1;
  if (__OFADD__(v36, 1))
    goto LABEL_83;
  if (v45 >= v157)
  {
LABEL_26:
    v48 = sub_1000BA294(&qword_100BC9EF8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 1, 1, v48);
    v34 = 0;
    goto LABEL_27;
  }
  v46 = *(_QWORD *)(v147 + 8 * v45);
  if (v46)
  {
LABEL_12:
    v34 = (v46 - 1) & v46;
    v39 = __clz(__rbit64(v46)) + (v45 << 6);
    v36 = v45;
    goto LABEL_8;
  }
  v47 = v36 + 2;
  ++v36;
  if (v45 + 1 >= v157)
    goto LABEL_26;
  v46 = *(_QWORD *)(v147 + 8 * v47);
  if (v46)
    goto LABEL_15;
  v36 = v45 + 1;
  if (v45 + 2 >= v157)
    goto LABEL_26;
  v46 = *(_QWORD *)(v147 + 8 * (v45 + 2));
  if (v46)
  {
    v45 += 2;
    goto LABEL_12;
  }
  v47 = v45 + 3;
  v36 = v45 + 2;
  if (v45 + 3 >= v157)
    goto LABEL_26;
  v46 = *(_QWORD *)(v147 + 8 * v47);
  if (v46)
  {
LABEL_15:
    v45 = v47;
    goto LABEL_12;
  }
  while (1)
  {
    v45 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v45 >= v157)
    {
      v36 = v143;
      goto LABEL_26;
    }
    v46 = *(_QWORD *)(v147 + 8 * v45);
    ++v47;
    if (v46)
      goto LABEL_12;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ContentStatusBanner.Placement);
  __break(1u);
}

uint64_t type metadata accessor for AppLifecycleReducer()
{
  return objc_opt_self(_TtC7Weather19AppLifecycleReducer);
}

BOOL sub_10013D5B8(uint64_t a1, unsigned __int8 a2)
{
  return a2 < 2u;
}

uint64_t type metadata accessor for AirplaneModeMonitor()
{
  return objc_opt_self(_TtC7Weather19AirplaneModeMonitor);
}

uint64_t sub_10013D5E8()
{
  uint64_t v0;

  return sub_10013D5F0(*(_QWORD *)(v0 + 16), *(const __SCPreferences **)(v0 + 24));
}

uint64_t sub_10013D5F0(uint64_t a1, const __SCPreferences *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100020A3C(a2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10013D654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  UnfairLock.lock()();
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  sub_1000FDC6C(a1, a2);
  sub_1000BF8D0(v5, v6);
  UnfairLock.unlock()();
  return sub_1000BF8D0(a1, a2);
}

uint64_t sub_10013D6BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirQuality(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10013D6F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for AirQuality(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013D758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024A6F8);
}

uint64_t sub_10013D764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024A6C4);
}

void sub_10013D770(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1001345CC(319, (unint64_t *)&qword_100BCE540, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10013D7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void (*v22)(uint64_t, uint64_t);
  _QWORD v23[3];
  uint64_t v24;

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  v7 = sub_100098AA0();
  v24 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100094EC4();
  v8 = sub_1000BA294(&qword_100BCD780);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100079FBC();
  sub_1000BA294(&qword_100BCD680);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10003BC68();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)v23 - v15;
  v23[1] = v6;
  sub_1000E6F14(v6, (uint64_t)v23 - v15);
  v23[2] = v4;
  sub_1000E6F14(v4, (uint64_t)v14);
  v17 = v0 + *(int *)(v8 + 48);
  sub_1000E6F14((uint64_t)v16, v0);
  sub_1000E6F14((uint64_t)v14, v17);
  sub_100088FC8(v0, 1, v7);
  if (v19)
  {
    sub_1000987A0((uint64_t)v14);
    sub_1000987A0((uint64_t)v16);
    sub_100088FC8(v17, 1, v7);
    if (v19)
    {
      sub_100021A14(v0, &qword_100BCD680);
LABEL_12:
      type metadata accessor for ActiveLocationModel(0);
      goto LABEL_13;
    }
LABEL_9:
    sub_100021A14(v0, &qword_100BCD780);
    goto LABEL_13;
  }
  v18 = v24;
  sub_100037794(v0, v1, &qword_100BCD680);
  sub_100088FC8(v17, 1, v7);
  if (v19)
  {
    sub_100075DD0((uint64_t)v14);
    sub_100075DD0((uint64_t)v16);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1, v7);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v2, v17, v7);
  v20 = sub_100062598();
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v1, v2, v7, v20);
  v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v22(v2, v7);
  sub_100075DD0((uint64_t)v14);
  sub_100075DD0((uint64_t)v16);
  v22(v1, v7);
  sub_100075DD0(v0);
  if ((v21 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  sub_100098640();
}

void sub_10013DA74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10098B588;
  sub_1001345CC(319, (unint64_t *)&unk_100BCE5D8, type metadata accessor for LocationViewerActiveLocationState);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10013DB04(uint64_t a1)
{
  uint64_t v1;

  return sub_10013DB0C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10013DB0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009BD28(a1, a2);
  type metadata accessor for ActiveLocationModel(0);
  v2 = sub_1000DBB4C();
  return sub_1000BE6F8(v2, v3, v4, v5);
}

uint64_t type metadata accessor for WindowFocusManager()
{
  return objc_opt_self(_TtC7Weather18WindowFocusManager);
}

unint64_t sub_10013DB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return WindowFocusManager.add(monitor:)(a1, a2, a3);
}

void sub_10013DB74()
{
  WindowFocusManager.didBecomeFocused()();
}

unint64_t WindowFocusManager.add(monitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  _BYTE v15[24];

  v4 = v3;
  v8 = type metadata accessor for DisposableMonitor();
  swift_allocObject(v8, 40, 7);
  v9 = swift_unknownObjectRetain(a1);
  v10 = sub_1001406F8(v9, a2);
  sub_10009922C(v4 + 16, (uint64_t)v15, 33);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v12 = *(_QWORD *)((*(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10006CD24(v12);
  v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
  specialized Array._endMutation()(v13);
  swift_endAccess(v15);
  a3[3] = v8;
  result = sub_1001406B8();
  a3[4] = result;
  *a3 = v10;
  return result;
}

Swift::Void __swiftcall WindowFocusManager.didBecomeFocused()()
{
  uint64_t v0;

  sub_10001E87C(v0);
}

ValueMetadata *type metadata accessor for VisibilityModifier()
{
  return &type metadata for VisibilityModifier;
}

unint64_t sub_10013DC7C()
{
  unint64_t result;

  result = qword_100BF0248;
  if (!qword_100BF0248)
  {
    result = swift_getWitnessTable(&unk_100998A54, &type metadata for VisibilityModifier);
    atomic_store(result, (unint64_t *)&qword_100BF0248);
  }
  return result;
}

void sub_10013DCB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100046668(a1, *v2, v2[1], v2[2], v2[3], a2);
}

uint64_t sub_10013DCC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB25E0, 1);
}

double sub_10013DCD4()
{
  uint64_t *v0;

  return sub_10013DCE0(v0[2], v0[3], v0[4]);
}

double sub_10013DCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v4 = sub_1000BA294(&qword_100BDC0E8);
  State.wrappedValue.getter(&v7, v4);
  v5 = v7;
  sub_100144C9C(a3);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_10013DD44(double *a1)
{
  uint64_t *v1;

  sub_10013DD50(a1, v1[2], v1[3], v1[4]);
}

void sub_10013DD50(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = a1[1];
  v7 = sub_1000BA294(&qword_100BDC0E8);
  State.wrappedValue.getter(&v9, v7);
  v8 = v9;
  sub_100144BE0(a4, v5, v6);
  swift_release(v8);
}

void sub_10013DDC8(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  sub_100009DD0(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_10013DDD4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v10[5];

  v2 = type metadata accessor for CoordinateSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for CoordinateSpace.global(_:), v2);
  GeometryProxy.frameClippedToScrollViews(in:)(v10, v5);
  v6 = v10[2];
  v7 = v10[3];
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v7;
  return result;
}

unint64_t sub_10013DE8C()
{
  unint64_t result;

  result = qword_100BC5B50;
  if (!qword_100BC5B50)
  {
    result = swift_getWitnessTable(&unk_10097FFF4, &type metadata for UseLargerLayoutKey);
    atomic_store(result, (unint64_t *)&qword_100BC5B50);
  }
  return result;
}

uint64_t sub_10013DEC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1009B1970;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "P";
    v4[3] = &unk_1009B1A40;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SlowDeviceGridView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SlowDeviceGridView);
}

uint64_t type metadata accessor for SceneResizeMonitor()
{
  return objc_opt_self(_TtC7WeatherP33_FF50067D4B7024D0FC214D6D5972930518SceneResizeMonitor);
}

uint64_t type metadata accessor for MoonDetailAssembly()
{
  return objc_opt_self(_TtC7Weather18MoonDetailAssembly);
}

uint64_t sub_10013DFA4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for MoonDetailViewStateReducer, (uint64_t)&off_100B87EA0, a1);
}

double sub_10013DFB8(__n128 a1)
{
  return sub_10001A0B0(a1);
}

uint64_t destroy for LocationViewerView(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 64));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 80));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 120));
  swift_release(*(_QWORD *)(a1 + 160));
  return sub_1000B15F8(*(_QWORD *)(a1 + 168), *(_BYTE *)(a1 + 176));
}

uint64_t initializeWithCopy for LocationViewerView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  uint64_t v15;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v6 - 8);
  swift_retain();
  v9 = swift_retain();
  v8(a1 + 16, v5, v7, v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v2 + 56);
  v10 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 64) = v10;
  v11 = *(_OWORD *)(v2 + 104);
  *(_OWORD *)(a1 + 104) = v11;
  v12 = v11;
  v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_unknownObjectRetain(v10);
  v13(a1 + 80, v2 + 80, v12);
  v14 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 144) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 120, v2 + 120);
  v15 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v2 + 160);
  LOBYTE(v2) = *(_BYTE *)(v2 + 176);
  swift_retain();
  sub_10008D47C(v15, v2);
  *(_QWORD *)(a1 + 168) = v15;
  *(_BYTE *)(a1 + 176) = v2;
  return a1;
}

uint64_t sub_10013E130(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB86DC, 1);
}

void sub_10013E140()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[6];

  sub_1000986AC();
  v2 = v0;
  v42 = v3;
  v4 = sub_1000BA294(&qword_100BED858);
  v41 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100089068();
  __chkstk_darwin(v6);
  v40 = (uint64_t)&v39 - v7;
  *(_QWORD *)v1 = swift_getKeyPath(&unk_1009AB7A8);
  *(_BYTE *)(v1 + 8) = 0;
  v8 = v1 + *(int *)(v4 + 36);
  v9 = *v0;
  v39 = v2 + 2;
  sub_10003B59C((uint64_t)(v2 + 2), (uint64_t)v45);
  v10 = v2[1];
  v12 = v2[7];
  v11 = v2[8];
  v13 = v2[9];
  sub_10003B59C((uint64_t)(v2 + 10), (uint64_t)v44);
  v14 = v2[20];
  sub_10003B59C((uint64_t)(v2 + 15), (uint64_t)v43);
  sub_100094EE4();
  swift_retain();
  swift_unknownObjectRetain(v11);
  swift_retain();
  sub_100033E40(v9, v45, v12, v10, v11, v13, v44, v14, v8, v43);
  v15 = v8 + *(int *)(sub_1000BA294(&qword_100BED860) + 36);
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1009AB7D0);
  *(_BYTE *)(v15 + 8) = 0;
  v16 = type metadata accessor for PageControlDisplayStateModifier(0);
  v17 = (_QWORD *)(v15 + *(int *)(v16 + 20));
  *v17 = swift_getKeyPath(&unk_1009AB7F8);
  v18 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  sub_1000987D0(v18);
  v19 = (uint64_t **)(v15 + *(int *)(v16 + 24));
  v20 = type metadata accessor for PageControlDisplayState(0);
  sub_1000860C4(v20);
  v44[0] = sub_10053156C();
  State.init(wrappedValue:)(v44, v20);
  v21 = (uint64_t *)v45[1];
  *v19 = (uint64_t *)v45[0];
  v19[1] = v21;
  v22 = v8 + *(int *)(sub_1000BA294(&qword_100BED868) + 36);
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1009AB820);
  v23 = type metadata accessor for DetermineWhetherLocationContentWantsGridViewModifier(0);
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_BYTE *)(v22 + 72) = 0;
  v24 = (_QWORD *)(v22 + *(int *)(v23 + 20));
  *v24 = swift_getKeyPath(&unk_1009AB848);
  v25 = sub_1000BA294(&qword_100BC37D8);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = v1;
  v27 = v40;
  sub_1000787D4(v26, v40, &qword_100BED858);
  sub_10003B59C((uint64_t)v39, (uint64_t)v45);
  v28 = sub_100068EB4((uint64_t)v45, v45[3]);
  __chkstk_darwin(v28);
  v30 = sub_1000DC1F4(v29, (uint64_t)v39);
  v31(v30);
  v32 = *v19;
  swift_retain();
  v34 = sub_10053716C(v33, v32);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
  v35 = type metadata accessor for LocationViewerBindingWrapper(0);
  sub_10007AB60((uint64_t)&unk_100BED870);
  v37 = v36;
  sub_10007A100((uint64_t)&unk_100BED878);
  View.environment<A>(_:)(v34, v41, v35, v37, v38);
  swift_release(v34);
  sub_100021A14(v27, &qword_100BED858);
  sub_100098640();
}

uint64_t sub_10013E468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[32];
  _BYTE v13[32];
  _BYTE v14[32];
  _QWORD v15[3];

  v2 = type metadata accessor for Location(319);
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v15[0] = v5;
    v3 = type metadata accessor for LocationComponentAction(319);
    if (v6 <= 0x3F)
    {
      sub_10015BB24(319);
      if (v8 > 0x3F)
      {
        return v7;
      }
      else
      {
        swift_getTupleTypeLayout3(v14, *(_QWORD *)(v3 - 8) + 64, "!", *(_QWORD *)(v7 - 8) + 64);
        v15[1] = v14;
        v9 = type metadata accessor for LocationOfInterest(319);
        v3 = v9;
        if (v10 <= 0x3F)
        {
          swift_getTupleTypeLayout2(v12, v5, *(_QWORD *)(v9 - 8) + 64);
          swift_getTupleTypeLayout2(v13, v12, "!");
          v15[2] = v13;
          swift_initEnumMetadataMultiPayload(a1, 256, 3, v15);
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t type metadata accessor for LocationInteractor()
{
  return objc_opt_self(_TtC7Weather18LocationInteractor);
}

void sub_10013E598(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[20];

  v14[0] = "\t";
  v14[1] = "\t";
  sub_100158B48(319, (unint64_t *)&qword_100BC3880, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v14[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v14[3] = *(_QWORD *)(v4 - 8) + 64;
      v14[4] = "\t";
      v14[5] = "\t";
      sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
      if (v7 <= 0x3F)
      {
        v14[6] = *(_QWORD *)(v6 - 8) + 64;
        v14[7] = "\t";
        sub_100158B48(319, (unint64_t *)&qword_100BC3898, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context);
        if (v9 <= 0x3F)
        {
          v14[8] = *(_QWORD *)(v8 - 8) + 64;
          v14[9] = "\t";
          v14[10] = &unk_10097E170;
          v14[11] = &unk_10097E188;
          v14[12] = &unk_10097E1A0;
          v14[13] = &unk_10097E1B8;
          v14[14] = &unk_10097E1B8;
          v14[15] = &unk_10097E1D0;
          v14[16] = (char *)&value witness table for Builtin.Int64 + 64;
          v10 = type metadata accessor for Text.Measurements(319);
          if (v11 <= 0x3F)
          {
            v14[17] = *(_QWORD *)(v10 - 8) + 64;
            v14[18] = (char *)&value witness table for Builtin.Int64 + 64;
            sub_100158880(319);
            if (v13 <= 0x3F)
            {
              v14[19] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 20, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10013E724(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA9330, 1);
}

double sub_10013E734()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  id v3;
  id v4;

  v1 = type metadata accessor for LocationHeaderView(0);
  result = -10.0;
  if (*(_BYTE *)(v0 + *(int *)(v1 + 64) + 136) == 1)
  {
    v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v4 = objc_msgSend(v3, "userInterfaceIdiom");

    result = -23.0;
    if (v4 == (id)1)
      return -20.0;
  }
  return result;
}

double sub_10013E7B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  BOOL v10;
  double v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  double v16;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for LayoutDirection(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(int *)(type metadata accessor for LocationHeaderView(0) + 64);
  v7 = *((_QWORD *)v6 + 9);
  v8 = *((_QWORD *)v6 + 10);
  v9 = 0.0;
  v10 = v7 == 11565 && v8 == 0xE200000000000000;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, 11565, 0xE200000000000000, 0) & 1) == 0)
  {
    sub_1001591C8();
    v11 = LayoutDirection.temperatureOffsetDirection.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v12 = *v0;
    v13 = *((_BYTE *)v1 + 8);
    sub_10008D47C(v12, v13);
    sub_100109B54();
    v15 = v14;
    sub_1000B15F8(v12, v13);
    v16 = 12.0;
    if ((v15 & 1) != 0)
      v16 = 6.0;
    return v11 * v16;
  }
  return v9;
}

double sub_10013E8DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  id v3;
  id v4;

  v1 = type metadata accessor for LocationHeaderView(0);
  result = -10.0;
  if (*(_BYTE *)(v0 + *(int *)(v1 + 64) + 136) == 1)
  {
    v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v4 = objc_msgSend(v3, "userInterfaceIdiom");

    result = -24.0;
    if (v4 == (id)1)
      return -12.0;
  }
  return result;
}

void sub_10013E95C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "\t";
  v6[1] = "\t";
  sub_100158B94(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for LocationFooterViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1009938E0;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_10013E9F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB0538, 1);
}

void sub_10013EA04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[14];

  v12[0] = &unk_1009D16E8;
  v12[1] = &unk_1009D16E8;
  v12[2] = &unk_1009D16E8;
  v12[3] = &unk_1009D16E8;
  v2 = type metadata accessor for WeatherMapDisplayMode(319);
  if (v3 <= 0x3F)
  {
    v12[4] = *(_QWORD *)(v2 - 8) + 64;
    v12[5] = &unk_1009D1700;
    v12[6] = &unk_1009D16E8;
    sub_100154520(319, (unint64_t *)&unk_100C0C030, &qword_100BCDC58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v5 <= 0x3F)
    {
      v12[7] = *(_QWORD *)(v4 - 8) + 64;
      v12[8] = &unk_1009D1718;
      sub_100158B48(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics);
      if (v7 <= 0x3F)
      {
        v12[9] = *(_QWORD *)(v6 - 8) + 64;
        sub_100154520(319, (unint64_t *)&qword_100BC5C88, &qword_100BC5A68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v12[10] = *(_QWORD *)(v8 - 8) + 64;
          v12[11] = &unk_1009D1730;
          v12[12] = (char *)&value witness table for Builtin.Int64 + 64;
          sub_100158B48(319, (unint64_t *)&unk_100BD43B8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
          if (v11 <= 0x3F)
          {
            v12[13] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 14, v12, a1 + 16);
          }
        }
      }
    }
  }
}

unint64_t sub_10013EB68()
{
  unint64_t result;

  result = qword_100BC5B88;
  if (!qword_100BC5B88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderLineLimitKey, &type metadata for HeaderLineLimitKey);
    atomic_store(result, (unint64_t *)&qword_100BC5B88);
  }
  return result;
}

void sub_10013EBA4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t type metadata accessor for EnvironmentReducer()
{
  return objc_opt_self(_TtC7Weather18EnvironmentReducer);
}

_QWORD *sub_10013EBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  a5[5] = type metadata accessor for LocationAuthorizationReducer();
  a5[6] = &off_100B6C4D8;
  a5[2] = a1;
  a5[10] = type metadata accessor for NetworkReducer();
  a5[11] = &off_100B8E370;
  a5[7] = a2;
  a5[15] = type metadata accessor for ActivityActionReducer();
  a5[16] = &off_100B88490;
  a5[12] = a3;
  a5[20] = type metadata accessor for LinkReducer();
  a5[21] = &off_100B65998;
  a5[17] = a4;
  return a5;
}

_QWORD *sub_10013EC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v8 = *a4;
  v43 = type metadata accessor for LocationAuthorizationReducer();
  v44 = &off_100B6C4D8;
  v42[0] = a1;
  v40 = type metadata accessor for NetworkReducer();
  v41 = &off_100B8E370;
  v39[0] = a2;
  v37 = type metadata accessor for ActivityActionReducer();
  v38 = &off_100B88490;
  v36[0] = a3;
  v34 = v8;
  v35 = &off_100B65998;
  v33[0] = a4;
  v9 = type metadata accessor for EnvironmentReducer();
  v10 = (_QWORD *)swift_allocObject(v9, 176, 7);
  v11 = sub_100068EB4((uint64_t)v42, v43);
  v12 = __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
  v16 = sub_100068EB4((uint64_t)v39, v40);
  v17 = __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100068EB4((uint64_t)v36, v37);
  v22 = __chkstk_darwin(v21);
  v24 = (_QWORD *)((char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  v26 = sub_100068EB4((uint64_t)v33, v34);
  v27 = __chkstk_darwin(v26);
  v29 = (_QWORD *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v30 + 16))(v29, v27);
  v31 = sub_10013EBD4(*v14, *v19, *v24, *v29, v10);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
  return v31;
}

uint64_t type metadata accessor for DemoPresetProvider()
{
  return objc_opt_self(_TtC7Weather18DemoPresetProvider);
}

unint64_t sub_10013EEC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0D0A8;
  if (!qword_100C0D0A8)
  {
    v1 = type metadata accessor for DemoPresetProvider();
    result = swift_getWitnessTable(&unk_1009D22F4, v1);
    atomic_store(result, (unint64_t *)&qword_100C0D0A8);
  }
  return result;
}

void sub_10013EF08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];

  v2 = type metadata accessor for DailyForecastComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_10099B478;
    v10[2] = (char *)&value witness table for () + 64;
    v10[3] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100158DB0(319);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      v10[5] = &unk_10099B490;
      v10[6] = &unk_10099B490;
      v6 = type metadata accessor for Text.Measurements(319);
      if (v7 <= 0x3F)
      {
        v10[7] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001544C4(319, (unint64_t *)&unk_100BDE100, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
        if (v9 <= 0x3F)
        {
          v10[8] = *(_QWORD *)(v8 - 8) + 64;
          v10[9] = &unk_10099B4A8;
          swift_initStructMetadata(a1, 256, 10, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10013F010(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB322C, 1);
}

uint64_t sub_10013F020@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  double *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;

  v45 = a4;
  v17 = type metadata accessor for DailyComponentView(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_100078010(v22);
  v24 = v23;
  swift_bridgeObjectRelease(v21);
  v46 = v24;
  KeyPath = swift_getKeyPath(&unk_10099B510);
  sub_100080C0C((uint64_t)a1, (uint64_t)v20, type metadata accessor for DailyComponentView);
  v25 = *(unsigned __int8 *)(v18 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v19 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 39) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_100B713B8, v29 + 8, v25 | 7);
  sub_10007802C((uint64_t)v20, v30 + v26, type metadata accessor for DailyComponentView);
  v31 = (double *)(v30 + v27);
  *v31 = a5;
  v31[1] = a6;
  v32 = (double *)(v30 + v28);
  *v32 = a7;
  v32[1] = a8;
  v33 = v30 + ((v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *(double *)v33 = a9;
  *(_BYTE *)(v33 + 8) = a2;
  *(_QWORD *)(v30 + v29) = a3;
  v34 = swift_allocObject(&unk_100B713E0, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_10004DB5C;
  *(_QWORD *)(v34 + 24) = v30;
  v35 = sub_1000BA294(&qword_100BDE168);
  v36 = sub_1000BA294(&qword_100BDE170);
  sub_1001CDAD0(&qword_100BDE178, &qword_100BDE168);
  v38 = v37;
  sub_10000F1C8((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v40 = v39;
  sub_1001CDAD0(&qword_100BDE180, &qword_100BDE170);
  return ForEach<>.init(_:id:content:)(&v46, KeyPath, sub_10011CDE8, v34, v35, v36, v38, v40, v41);
}

BOOL sub_10013F260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  double v13;
  double v14;
  uint64_t v16;

  v4 = type metadata accessor for DailyComponentView(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_10009883C();
  v8 = v6 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  v12 = sub_10006201C(a1, a2);
  sub_100080C0C(a1, (uint64_t)v11, type metadata accessor for DailyComponentView);
  sub_100080C0C(a2, v8, type metadata accessor for DailyComponentView);
  if ((v12 & 1) != 0)
  {
    v13 = *(double *)&v11[*(int *)(v4 + 28)];
    sub_1000215BC((uint64_t)v11, type metadata accessor for DailyComponentView);
    v14 = *(double *)(v8 + *(int *)(v4 + 28));
    sub_1000215BC(v8, type metadata accessor for DailyComponentView);
    return v13 == v14;
  }
  else
  {
    sub_1000215BC(v8, type metadata accessor for DailyComponentView);
    sub_1000215BC((uint64_t)v11, type metadata accessor for DailyComponentView);
    return 0;
  }
}

uint64_t sub_10013F384@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return sub_100053A84(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_10013F3A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int IsSlow;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  Swift::Int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  Swift::String v94;

  v1 = v0;
  v2 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v2);
  v90 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.TextStyle(0);
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  __chkstk_darwin(v4);
  v86 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Text.Measurements(0);
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  __chkstk_darwin(v6);
  v89 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v83 - v13;
  v15 = sub_1000BA294(&qword_100BCB340);
  v16 = __chkstk_darwin(v15);
  v85 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  IsSlow = DeviceIsSlow(v16);
  v19 = *v1;
  v20 = sub_1001209A8(8, *v1);
  v24 = v21;
  v25 = v22;
  if (IsSlow)
  {
    v84 = v1;
    if (v22 == v23 >> 1)
    {
      v26 = v20;
      v27 = v85;
      _s7Weather24LocationCompositionStateOwst_0(v85, 1, 1, v8);
      swift_bridgeObjectRetain(v19);
LABEL_20:
      swift_unknownObjectRelease(v26);
      v41 = _s7Weather24LocationCompositionStateOwet_0(v27, 1, v8);
      v42 = v84;
      if (v41 == 1)
      {
        sub_100021A14(v27, &qword_100BCB340);
        v43 = 5;
      }
      else
      {
        v44 = (uint64_t *)(v27 + *(int *)(v8 + 20));
        v45 = *v44;
        v46 = v44[1];
        swift_bridgeObjectRetain(v46);
        sub_1000215BC(v27, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        v43 = String.count.getter(v45, v46);
        swift_bridgeObjectRelease(v46);
      }
      v47 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v94._object = (void *)0x80000001009FE7D0;
      v48._countAndFlagsBits = 77;
      v48._object = (void *)0xE100000000000000;
      v49._countAndFlagsBits = 0;
      v49._object = (void *)0xE000000000000000;
      v94._countAndFlagsBits = 0xD000000000000063;
      v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v94);

      v51 = String.init(repeating:count:)(v50, v43);
      v52 = type metadata accessor for DailyComponentView(0);
      v53 = v89;
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v89, (char *)v42 + *(int *)(v52 + 44), v92);
      v93 = v51;
      v54 = sub_100114EF8();
      v55 = Text.init<A>(_:)(&v93, &type metadata for String, v54);
      v57 = v56;
      v59 = v58;
      v61 = v60 & 1;
      v62 = (uint64_t)v42 + *(int *)(v52 + 36);
      v63 = *(_QWORD *)v62;
      LOBYTE(v52) = *(_BYTE *)(v62 + 8);
      sub_10008D47C(*(_QWORD *)v62, v52);
      sub_100109B54();
      v65 = v64;
      sub_1000B15F8(v63, v52);
      v66 = (unsigned int *)&enum case for Font.TextStyle.body(_:);
      v68 = v87;
      v67 = v88;
      if ((v65 & 1) == 0)
        v66 = (unsigned int *)&enum case for Font.TextStyle.title3(_:);
      v69 = v86;
      v70 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, *v66, v88);
      static Font.Weight.medium.getter(v70);
      v71 = static Font.system(_:weight:)(v69);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
      v72 = Text.font(_:)(v71, v55, v57, v61, v59);
      v74 = v73;
      v76 = v75;
      v78 = v77;
      swift_release(v71);
      v79 = v76 & 1;
      sub_1000D31B4(v55, v57, v61);
      swift_bridgeObjectRelease(v59);
      v80 = type metadata accessor for Text.WritingMode(0);
      v81 = v90;
      _s7Weather24LocationCompositionStateOwst_0(v90, 1, 1, v80);
      Text.Measurements.size(of:in:writingMode:)(v72, v74, v79, v78, v81, INFINITY, INFINITY);
      sub_1000D31B4(v72, v74, v79);
      swift_bridgeObjectRelease(v78);
      sub_100021A14(v81, &qword_100BC39D0);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v53, v92);
      v82 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
      objc_msgSend(v82, "userInterfaceIdiom");

      return;
    }
    v35 = v23 >> 1;
    if (v22 < (uint64_t)(v23 >> 1))
    {
      v26 = v20;
      v36 = *(_QWORD *)(v9 + 72);
      sub_100080C0C(v21 + v36 * v22, (uint64_t)v14, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
      v37 = v25 + 1;
      swift_bridgeObjectRetain(v19);
      if (v37 == v35)
      {
LABEL_19:
        v40 = (uint64_t)v14;
        v27 = v85;
        sub_10007802C(v40, v85, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        _s7Weather24LocationCompositionStateOwst_0(v27, 0, 1, v8);
        goto LABEL_20;
      }
      v38 = v24 + v36 * v37;
      while (v37 < v35)
      {
        sub_100080C0C(v38, (uint64_t)v12, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        v39 = String.count.getter(*(_QWORD *)&v14[*(int *)(v8 + 20)], *(_QWORD *)&v14[*(int *)(v8 + 20) + 8]);
        if (v39 >= String.count.getter(*(_QWORD *)&v12[*(int *)(v8 + 20)], *(_QWORD *)&v12[*(int *)(v8 + 20) + 8]))
        {
          sub_1000215BC((uint64_t)v12, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        }
        else
        {
          sub_1000215BC((uint64_t)v14, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
          sub_10007802C((uint64_t)v12, (uint64_t)v14, type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
        }
        ++v37;
        v38 += v36;
        if (v35 == v37)
          goto LABEL_19;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  v28 = __chkstk_darwin(v20);
  swift_bridgeObjectRetain(v19);
  sub_10084A808();
  v30 = v29;
  swift_unknownObjectRelease(v28);
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v31 - 1;
    if (v32)
    {
      v33 = 48;
      v34 = *(double *)(v30 + 32);
      do
      {
        if (v34 < *(double *)(v30 + v33))
          v34 = *(double *)(v30 + v33);
        v33 += 16;
        --v32;
      }
      while (v32);
    }
  }
  swift_bridgeObjectRelease(v30);
}

uint64_t storeEnumTagSinglePayload for BackgroundModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BackgroundModifier(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 80);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

void sub_10013FB00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE __dst[88];

  memcpy(__dst, v2, sizeof(__dst));
  sub_10002234C(a1, a2);
}

uint64_t sub_10013FB50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB5160, 1);
}

uint64_t sub_10013FB60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1009CAA78;
  v4[1] = &unk_1009CAA78;
  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1009CAA78;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10013FBD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_1009CAA78;
  v4[1] = &unk_1009CAAC8;
  v4[2] = &unk_1009CAAC8;
  v4[3] = &unk_1009CAAC8;
  v4[4] = &unk_1009CAA78;
  v4[5] = &unk_1009CAA78;
  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_1009CAAC8;
    v4[8] = &unk_1009CAAE0;
    v4[9] = &unk_1009CAAF8;
    v4[10] = &unk_1009CAA78;
    v4[11] = &unk_1009CAAF8;
    swift_initEnumMetadataMultiPayload(a1, 256, 12, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AutomationAssembly()
{
  return objc_opt_self(_TtC7Weather18AutomationAssembly);
}

uint64_t sub_10013FC90@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v14)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC43F0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v12)
    {
      v11 = type metadata accessor for ExtendedAppLaunchManager();
      swift_allocObject(v11, 105, 7);
      result = sub_10034AF44(v14, v15, v16, v17, v12, v13, 1);
      a2[3] = v11;
      a2[4] = (uint64_t)&off_100B6E4A0;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10013FDB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for AutomationReducer();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B83EE0;
  *a1 = result;
  return result;
}

uint64_t sub_10013FDF4()
{
  return sub_100012220();
}

ValueMetadata *type metadata accessor for AppStateTransition()
{
  return &type metadata for AppStateTransition;
}

uint64_t sub_10013FE18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  v4[1] = "\t";
  result = type metadata accessor for WindComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013FE8C(uint64_t a1)
{
  __int128 v2;
  uint64_t result;
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 16);
  v6 = v2;
  result = type metadata accessor for Page(319, (uint64_t)&v5);
  if (v4 <= 0x3F)
  {
    *(_QWORD *)&v5 = *(_QWORD *)(result - 8) + 64;
    *((_QWORD *)&v5 + 1) = v5;
    *(_QWORD *)&v6 = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0, 3, &v5, a1 + 48);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for TimeStoreObserver()
{
  return objc_opt_self(_TtC7Weather17TimeStoreObserver);
}

ValueMetadata *type metadata accessor for TabViewTransition()
{
  return &type metadata for TabViewTransition;
}

double sub_10013FF40@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  SafeAreaInsetsKey.defaultValue.unsafeMutableAddressor();
  result = *(double *)&static SafeAreaInsetsKey.defaultValue;
  v3 = *(_OWORD *)&qword_100CADDD0;
  *a1 = static SafeAreaInsetsKey.defaultValue;
  a1[1] = v3;
  return result;
}

double sub_10013FF70()
{
  double result;

  if (qword_100BC23B8 != -1)
    swift_once(&qword_100BC23B8, sub_1001593B8);
  result = *(double *)&xmmword_100CAEF78;
  static SafeAreaInsetsKey.defaultValue = xmmword_100CAEF78;
  *(_OWORD *)&qword_100CADDD0 = *(_OWORD *)&qword_100CAEF88;
  return result;
}

__int128 *SafeAreaInsetsKey.defaultValue.unsafeMutableAddressor()
{
  if (qword_100BC1E48 != -1)
    swift_once(&qword_100BC1E48, sub_10013FF70);
  return &static SafeAreaInsetsKey.defaultValue;
}

uint64_t sub_100140000(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PressureComponentPreprocessedDataModel(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_100140084(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[11];

  v14[0] = "\t";
  sub_100158B48(319, (unint64_t *)&qword_100BCD3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
  if (v3 <= 0x3F)
  {
    v14[1] = *(_QWORD *)(v2 - 8) + 64;
    v14[2] = "\t";
    v14[3] = "\t";
    sub_100158B48(319, (unint64_t *)&qword_100BC3888, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v14[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158E58(319);
      if (v7 <= 0x3F)
      {
        v14[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_100158B48(319, (unint64_t *)&qword_100BCD708, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
        if (v9 <= 0x3F)
        {
          v14[6] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for Text.Measurements(319);
          if (v11 <= 0x3F)
          {
            v14[7] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for MoonComponentViewModel(319);
            if (v13 <= 0x3F)
            {
              v14[8] = *(_QWORD *)(v12 - 8) + 64;
              v14[9] = &unk_1009956E0;
              v14[10] = &unk_1009956F8;
              swift_initStructMetadata(a1, 256, 11, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001401CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F53A4);
}

uint64_t sub_1001401D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F529C);
}

uint64_t sub_1001401E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100140220(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[21];

  v2 = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    v15[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001345CC(319, (unint64_t *)&qword_100BCE540, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
    if (v5 <= 0x3F)
    {
      v15[1] = *(_QWORD *)(v4 - 8) + 64;
      v15[2] = &unk_1009C12B8;
      v15[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v15[4] = &unk_1009C12D0;
      sub_1001345CC(319, &qword_100C00188, type metadata accessor for LocationFooterViewModel);
      if (v7 <= 0x3F)
      {
        v8 = *(_QWORD *)(v6 - 8);
        v15[7] = &unk_1009C12E8;
        v15[8] = &unk_1009C1300;
        v15[9] = &unk_1009C12E8;
        v15[10] = &unk_1009C1318;
        v15[5] = v8 + 64;
        v15[6] = &unk_1009C12E8;
        v15[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v15[12] = &unk_1009C12E8;
        v15[13] = &unk_1009C12E8;
        v15[14] = &unk_1009C12E8;
        v9 = type metadata accessor for Date(319);
        if (v10 <= 0x3F)
        {
          v15[15] = *(_QWORD *)(v9 - 8) + 64;
          sub_1001345CC(319, (unint64_t *)&unk_100C00190, (uint64_t (*)(uint64_t))&type metadata accessor for ForegroundEffect);
          if (v12 <= 0x3F)
          {
            v15[16] = *(_QWORD *)(v11 - 8) + 64;
            v15[17] = &unk_1009C12E8;
            v15[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
            v15[19] = &unk_1009C12E8;
            v13 = type metadata accessor for LocationEntity(319);
            if (v14 <= 0x3F)
            {
              v15[20] = *(_QWORD *)(v13 - 8) + 64;
              swift_initStructMetadata(a1, 256, 21, v15, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001403A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CurrentWeather(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001403DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100140444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C3998);
}

uint64_t sub_100140450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C391C);
}

void sub_10014045C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100991990;
  v2 = type metadata accessor for DisplayMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100991BC8;
    sub_100158AF0(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_100991BE0;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t type metadata accessor for FullscreenMapView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD3C80, (uint64_t)&nominal type descriptor for FullscreenMapView);
}

uint64_t sub_100140510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EnvironmentAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100140554(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = &unk_1009A7A08;
  v6[1] = &unk_1009A7A20;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ActivityAction(319);
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      v6[4] = &unk_1009A7A38;
      v6[5] = &unk_1009A7A50;
      v6[6] = &unk_1009A7A50;
      v6[7] = &unk_1009A7A50;
      v6[8] = &unk_1009A7A68;
      v6[9] = (char *)&value witness table for Builtin.Int64 + 64;
      result = type metadata accessor for ConfiguredUnitsAction(319);
      if (v5 <= 0x3F)
      {
        v6[10] = *(_QWORD *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 11, v6);
        return 0;
      }
    }
  }
  return result;
}

void sub_100140634(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for EnvironmentAction(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

void sub_100140674()
{
  sub_100140634(&qword_100BE91E0, (uint64_t)&unk_1009A7A80);
}

uint64_t type metadata accessor for DisposableMonitor()
{
  return objc_opt_self(_TtC7WeatherP33_64EBA31BC4946DC24A1082EC2423E10917DisposableMonitor);
}

unint64_t sub_1001406B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC5030;
  if (!qword_100BC5030)
  {
    v1 = type metadata accessor for DisposableMonitor();
    result = swift_getWitnessTable(&unk_10097F364, v1);
    atomic_store(result, (unint64_t *)&qword_100BC5030);
  }
  return result;
}

uint64_t sub_1001406F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = 0;
  swift_unknownObjectWeakInit(v2 + 16, 0);
  swift_unknownObjectWeakInit(v2 + 32, 0);
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t sub_100140774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100140848();
  return sub_10000A8D4(v2, a1);
}

uint64_t sub_100140798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_100086DA4(&qword_100BC5B78, type metadata accessor for DisplayMetrics, (uint64_t)&unk_1009D6F38);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_100140800()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for DisplayMetrics(0);
  sub_10004037C(v0, qword_100CADD58);
  v1 = sub_1000AECD4(v0, (uint64_t)qword_100CADD58);
  sub_10004A000(v1);
}

uint64_t sub_100140848()
{
  uint64_t v0;

  if (qword_100BC1E38 != -1)
    swift_once(&qword_100BC1E38, sub_100140800);
  v0 = type metadata accessor for DisplayMetrics(0);
  return sub_1000AECD4(v0, (uint64_t)qword_100CADD58);
}

uint64_t type metadata accessor for DiagnosticManager()
{
  return objc_opt_self(_TtC7Weather17DiagnosticManager);
}

uint64_t type metadata accessor for DayPickerAssembly()
{
  return objc_opt_self(_TtC7Weather17DayPickerAssembly);
}

double sub_1001408D0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BD2B60);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_1002A0654, 0, v2);
  swift_release(v3);
  v4 = swift_release(v1);
  v5 = ProxyContainer.private.getter(v4);
  RegistrationContainer.lazy(block:)(sub_1002A082C, 0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double sub_10014094C(__n128 a1)
{
  return sub_1001408D0(a1);
}

uint64_t sub_100140964(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA9484, 1);
}

double destroy for CollisionModifier(uint64_t a1)
{
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  sub_1000B15F8(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 72)).n128_u64[0];
  return result;
}

uint64_t storeEnumTagSinglePayload for CollisionModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_1001409FC()
{
  const void *v0;
  _BYTE v1[80];

  memcpy(v1, v0, sizeof(v1));
  sub_100140A5C();
}

uint64_t sub_100140A4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB4E18, 1);
}

void sub_100140A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(double *@<X8>);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  sub_10045B718();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = sub_1000BA294(&qword_100BE2468);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  v12 = sub_1000BA294(&qword_100BE2470);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100098694();
  v14 = *(_QWORD *)(v2 + 48);
  v15 = *(_BYTE *)(v2 + 56);
  sub_10008D47C(v14, v15);
  sub_10006A9A8();
  v17 = v16;
  sub_1000B15F8(v14, v15);
  v19 = *(_QWORD *)(v2 + 16);
  v18 = *(_QWORD *)(v2 + 24);
  v20 = *(_QWORD *)(v2 + 8);
  v21 = swift_bridgeObjectRetain(v18);
  v22 = static UnitPoint.top.getter(v21);
  v24 = v23;
  v25 = sub_1000BA294(&qword_100BE2478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v11, v4, v25);
  v26 = v11 + *(int *)(v7 + 36);
  *(_QWORD *)v26 = v19;
  *(_QWORD *)(v26 + 8) = v18;
  *(_QWORD *)(v26 + 16) = v20;
  *(_DWORD *)(v26 + 24) = 0;
  *(double *)(v26 + 32) = v22;
  *(_QWORD *)(v26 + 40) = v24;
  *(_BYTE *)(v26 + 48) = 1;
  v27 = sub_1000BA294(&qword_100BC40A8);
  State.wrappedValue.getter(&v35, v27);
  v28 = v35;
  sub_100037768(v11, v1, &qword_100BE2468);
  v29 = (_QWORD *)(v1 + *(int *)(v12 + 36));
  *v29 = 0;
  v29[1] = v28;
  sub_100021A14(v11, &qword_100BE2468);
  v30 = sub_100098740((uint64_t)&unk_100B73FC8, 24);
  *(_QWORD *)(v30 + 16) = v17;
  v31 = sub_100098740((uint64_t)&unk_100B73FF0, 96);
  memcpy((void *)(v31 + 16), (const void *)v2, 0x50uLL);
  sub_100037768(v1, v6, &qword_100BE2470);
  v32 = (void (**)(double *@<X8>))(v6 + *(int *)(sub_1000BA294(&qword_100BE2480) + 36));
  *v32 = sub_100446988;
  v32[1] = (void (*)(double *@<X8>))v30;
  v32[2] = (void (*)(double *@<X8>))sub_1004469C4;
  v32[3] = (void (*)(double *@<X8>))v31;
  sub_1004469CC(v2);
  v33 = sub_10045B894();
  sub_100021A14(v33, v34);
  sub_1000BD9F8();
}

uint64_t sub_100140C54(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for HistoricalComparisons(0);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void sub_100140CAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1005C1ADC(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t type metadata accessor for AutomationReducer()
{
  return objc_opt_self(_TtC7Weather17AutomationReducer);
}

uint64_t sub_100140D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = *(_OWORD *)(a2 + 32);
  v6[0] = *(_OWORD *)(a2 + 16);
  v6[1] = v4;
  return sub_10009885C((uint64_t)v6, a4);
}

uint64_t sub_100140D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100140D38(a1, a2, a3, (uint64_t)&unk_100ABB504);
}

uint64_t sub_100140D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[2];
  __int128 v10;
  _QWORD v11[13];

  v2 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for Binding(319, v2);
  if (v4 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for State(319, v2);
    if (v5 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(result - 8) + 64;
      v11[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v11[3] = &unk_1009B82A8;
      v11[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      v11[5] = &unk_1009B82A8;
      v11[6] = &unk_1009B82A8;
      v9[0] = *(_QWORD *)(a1 + 16);
      v9[1] = v2;
      v10 = *(_OWORD *)(a1 + 32);
      v6 = type metadata accessor for TransitionContext(255, (uint64_t)v9);
      v7 = type metadata accessor for Optional(255, v6);
      result = type metadata accessor for State(319, v7);
      if (v8 <= 0x3F)
      {
        v11[7] = *(_QWORD *)(result - 8) + 64;
        v11[8] = &unk_1009B82A8;
        v11[9] = &unk_1009B8210;
        v11[10] = &unk_1009B82C0;
        v11[11] = &unk_1009B82C0;
        v11[12] = &unk_1009B82C0;
        swift_initStructMetadata(a1, 0, 13, v11, a1 + 48);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100140E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 88);
}

uint64_t sub_100140E98()
{
  return sub_100141020();
}

uint64_t sub_100140EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a2;
  v7 = *(_QWORD *)(a5 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v28 - v11;
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v33 = v16;
  v17 = type metadata accessor for AnimatableTabView(0, (uint64_t)&v30);
  v18 = (char *)(a3 + *(int *)(v17 + 68));
  v19 = *v18;
  v20 = *((_QWORD *)v18 + 1);
  LOBYTE(v30) = *v18;
  v31 = v20;
  v21 = sub_1000BA294(&qword_100BC5608);
  State.wrappedValue.getter(&v29, v21);
  if ((v29 & 1) != 0)
  {
    LOBYTE(v30) = v19;
    v31 = v20;
    v29 = 0;
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v22(v12, v28, a5);
    v22(v10, (uint64_t)v12, a5);
    v23 = type metadata accessor for Binding(0, a5);
    Binding.wrappedValue.setter(v10, v23);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a5);
    v24 = (char *)(a3 + *(int *)(v17 + 72));
    v25 = *v24;
    v26 = *((_QWORD *)v24 + 1);
    LOBYTE(v30) = v25;
    v31 = v26;
    v29 = 1;
  }
  return State.wrappedValue.setter(&v29, v21);
}

uint64_t sub_100141020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000CDD5C();
  v7 = v4;
  v8 = v0;
  v9 = v1;
  v10 = v2;
  v11 = v3;
  type metadata accessor for AnimatableTabView(0, (uint64_t)&v8);
  v5 = sub_1000CD008();
  return v7(v5);
}

uint64_t sub_10014107C()
{
  return sub_100141020();
}

uint64_t sub_100141088(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10014109C()
{
  return sub_100141088((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006986C);
}

void sub_1001410A8(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100088078(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t type metadata accessor for AnalyticsAssembly()
{
  return objc_opt_self(_TtC7Weather17AnalyticsAssembly);
}

uint64_t sub_1001410EC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = a2[3];
  v6 = a2[4];
  sub_1000DB418(a2, v5);
  v7 = type metadata accessor for SessionEventsAndDataCoordinator(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (result)
  {
    v9 = result;
    v10 = sub_100051B90(&qword_100BE00D0, type metadata accessor for SessionEventsAndDataCoordinator, (uint64_t)&protocol conformance descriptor for SessionEventsAndDataCoordinator);
    dispatch thunk of SceneStateManagerType.add(monitor:)(v14, v9, v10, v3, v4);
    swift_release(v9);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
    v11 = a2[3];
    v12 = a2[4];
    sub_1000DB418(a2, v11);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v7, 0xD000000000000011, 0x80000001009F7050, v7, v11, v12);
    if (result)
    {
      v13 = result;
      dispatch thunk of SceneStateManagerType.add(monitor:)(v14, result, v10, v3, v4);
      swift_release(v13);
      return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10014123C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = a2[3];
  v6 = a2[4];
  sub_1000DB418(a2, v5);
  v7 = type metadata accessor for SessionScenePhaseObserver();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (result)
  {
    v9 = result;
    v10 = sub_100051B90(&qword_100BE00D8, (uint64_t (*)(uint64_t))type metadata accessor for SessionScenePhaseObserver, (uint64_t)&protocol conformance descriptor for SessionScenePhaseObserver);
    dispatch thunk of ScenePhaseManagerType.addObserver(_:)(v11, v9, v10, v3, v4);
    swift_release(v9);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100141300(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v17[2];

  v3 = sub_1000BA294(&qword_100BD1410);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a2[3];
  v7 = a2[4];
  sub_1000DB418(a2, v6);
  v8 = type metadata accessor for Configuration(0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  result = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = Configuration.isEnabled.getter();
    result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
    if ((v10 & 1) != 0)
    {
      sub_100043CA8((uint64_t)a2, (uint64_t)v17);
      v11 = swift_allocObject(&unk_100B72840, 56, 7);
      sub_10003C800(v17, v11 + 16);
      v12 = type metadata accessor for LazyEventProcessor(0);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      v13 = LazyEventProcessor.init(underlyingProcessorProvider:)(sub_100404078, v11);
      v14 = SessionManager.processorManager.getter();
      v15 = swift_retain();
      ProcessorManager.add(eventProcessor:)(v15);
      swift_release(v14);
      return swift_release_n(v13, 2);
    }
  }
  return result;
}

uint64_t sub_100141484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v11;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SessionManager(0);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0x75614C7473726946, 0xEB0000000068636ELL, sub_10000CCB0, 0, v4);
  v6 = Definition.thenConfigure(_:)(sub_100141300, 0);
  v7 = swift_release(v5);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v1 + 104))(v3, enum case for Scope.containerSingleton(_:), v0, v7);
  v8 = Definition.inScope(_:)(v3);
  swift_release(v8);
  v9 = swift_release(v6);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v9);
}

double sub_100141588(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = a2[3];
  v3 = a2[4];
  sub_1000DB418(a2, v2);
  v4 = type metadata accessor for SessionEventsAndDataCoordinator(0);
  v5 = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_1001415D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[40];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[5];

  v4 = a2[3];
  v5 = a2[4];
  sub_1000DB418(a2, v4);
  v6 = sub_1000BA294(&qword_100BE00C0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v20)
  {
    sub_10003C800(&v19, (uint64_t)v21);
    v8 = a2[3];
    v9 = a2[4];
    sub_1000DB418(a2, v8);
    v10 = sub_1000BA294(&qword_100BE00A0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v17)
    {
      sub_10003C800(&v16, (uint64_t)&v19);
      sub_100043CA8((uint64_t)v21, (uint64_t)&v16);
      sub_100043CA8((uint64_t)&v19, (uint64_t)v15);
      v11 = type metadata accessor for GeocodeTelemetry(0);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      v12 = GeocodeTelemetry.init(backend:clock:)(&v16, v15);
      v13 = a1[3];
      v14 = a1[4];
      sub_1000DB418(a1, v13);
      v17 = v11;
      v18 = sub_100051B90(&qword_100BE00C8, (uint64_t (*)(uint64_t))&type metadata accessor for GeocodeTelemetry, (uint64_t)&protocol conformance descriptor for GeocodeTelemetry);
      *(_QWORD *)&v16 = v12;
      dispatch thunk of GeocodeManagerType.register(callbacks:)(&v16, v13, v14);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v19);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
      return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100141754@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for AppBackgroundTaskManager(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = AppBackgroundTaskManager.init()();
  a1[3] = v2;
  result = sub_100051B90(&qword_100BE00F8, (uint64_t (*)(uint64_t))&type metadata accessor for AppBackgroundTaskManager, (uint64_t)&protocol conformance descriptor for AppBackgroundTaskManager);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_1001417C8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  a1[3] = type metadata accessor for GCDSerialDispatchQueueFactory(0);
  a1[4] = &off_100B88DB8;
  v2 = sub_10005F164(a1);
  result = static DispatchQoS.utility.getter(v2);
  *v2 = 0xD000000000000011;
  v2[1] = 0x80000001009F0D20;
  return result;
}

uint64_t sub_100141830(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t active;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = type metadata accessor for SessionManager(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = result;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BD13E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (!v31)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BE0088);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (v29)
  {
    v13 = sub_100068EB4((uint64_t)v28, v29);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)&v27[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v17 = *v15;
    active = type metadata accessor for ActiveUserAnalyticsManager();
    v27[3] = active;
    v27[4] = &off_100B85670;
    v27[0] = v17;
    v19 = type metadata accessor for SessionScenePhaseObserver();
    v20 = (_QWORD *)swift_allocObject(v19, 104, 7);
    v21 = sub_100068EB4((uint64_t)v27, active);
    __chkstk_darwin(v21);
    v23 = (_QWORD *)((char *)&v27[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v24 + 16))(v23);
    v25 = *v23;
    v20[11] = active;
    v20[12] = &off_100B85670;
    v20[8] = v25;
    v20[2] = v6;
    sub_10003C800(&v30, (uint64_t)(v20 + 3));
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    return (uint64_t)v20;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100141A30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BD1408);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v20)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BE00E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BC43F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v16)
  {
    v14 = type metadata accessor for LocationDataProvider();
    swift_allocObject(v14, 136, 7);
    result = sub_100126770(&v19, &v17, &v15);
    a2[3] = v14;
    a2[4] = (uint64_t)&off_100B60EA8;
    *a2 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100141B60@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[5];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BE00B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v26)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_10003C800(&v25, (uint64_t)v27);
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BE00A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v24)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_10003C800(&v23, (uint64_t)&v25);
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BE00A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v22)
  {
    sub_10003C800(&v21, (uint64_t)&v23);
    sub_100043CA8((uint64_t)v27, (uint64_t)&v21);
    sub_100043CA8((uint64_t)&v25, (uint64_t)v20);
    sub_100043CA8((uint64_t)&v23, (uint64_t)v19);
    v14 = sub_100068EB4((uint64_t)v19, v19[3]);
    __chkstk_darwin(v14);
    v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v16);
    v18 = sub_10014F2B0(&v21, v20, (uint64_t)v16);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v19);
    a2[3] = type metadata accessor for WeatherDataVisibleLocationLoadingTelemetry(0);
    a2[4] = (uint64_t)&off_100B9E948;
    *a2 = v18;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v25);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100141D44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t active;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BE00F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v15)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = type metadata accessor for SessionManager(0);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v10, 0x75614C7473726946, 0xEB0000000068636ELL, v10, v8, v9);
    if (result)
    {
      v11 = result;
      active = type metadata accessor for ActiveUserAnalyticsManager();
      v13 = swift_allocObject(active, 64, 7);
      result = sub_10003C800(&v14, v13 + 16);
      *(_QWORD *)(v13 + 56) = v11;
      a2[3] = active;
      a2[4] = (uint64_t)&off_100B85670;
      *a2 = v13;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100141E48@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = type metadata accessor for SystemClock(0);
  a1[4] = &protocol witness table for SystemClock;
  sub_10005F164(a1);
  return SystemClock.init()();
}

uint64_t sub_100141E88()
{
  id v0;

  type metadata accessor for Client(0);
  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  return Client.__allocating_init(bundle:)(v0);
}

uint64_t sub_100141ED0()
{
  return sub_10004AC18();
}

uint64_t sub_100141EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_10005454C(*(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_100141F18(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AC1FC4, 1);
}

uint64_t type metadata accessor for ViewStateReducer()
{
  return objc_opt_self(_TtC7Weather16ViewStateReducer);
}

_QWORD *sub_100141F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  a5[5] = type metadata accessor for ListViewStateReducer();
  a5[6] = &off_100B96A38;
  a5[2] = a1;
  a5[10] = type metadata accessor for LocationViewerViewStateReducer();
  a5[11] = &off_100B809F0;
  a5[7] = a2;
  a5[15] = type metadata accessor for VFXTestViewStateReducer();
  a5[16] = &off_100B6DC40;
  a5[12] = a3;
  a5[20] = type metadata accessor for SearchViewStateReducer();
  a5[21] = &off_100B8BA08;
  a5[17] = a4;
  return a5;
}

_QWORD *sub_10014200C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v8 = *a4;
  v43 = type metadata accessor for ListViewStateReducer();
  v44 = &off_100B96A38;
  v42[0] = a1;
  v40 = type metadata accessor for LocationViewerViewStateReducer();
  v41 = &off_100B809F0;
  v39[0] = a2;
  v37 = type metadata accessor for VFXTestViewStateReducer();
  v38 = &off_100B6DC40;
  v36[0] = a3;
  v34 = v8;
  v35 = &off_100B8BA08;
  v33[0] = a4;
  v9 = type metadata accessor for ViewStateReducer();
  v10 = (_QWORD *)swift_allocObject(v9, 176, 7);
  v11 = sub_100068EB4((uint64_t)v42, v43);
  v12 = __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
  v16 = sub_100068EB4((uint64_t)v39, v40);
  v17 = __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100068EB4((uint64_t)v36, v37);
  v22 = __chkstk_darwin(v21);
  v24 = (_QWORD *)((char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  v26 = sub_100068EB4((uint64_t)v33, v34);
  v27 = __chkstk_darwin(v26);
  v29 = (_QWORD *)((char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v30 + 16))(v29, v27);
  v31 = sub_100141F6C(*v14, *v19, *v24, *v29, v10);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v42);
  return v31;
}

uint64_t sub_100142240(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for WeatherCondition(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001422A8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for CurrentWeather(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for WeatherDescription(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v7 + 20) + 8));
  v8 = a1 + a2[6];
  v9 = sub_1000BA294(&qword_100BCB130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[7];
  v11 = sub_1000BA294(&qword_100BCB9F8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

void sub_100142374(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  v2 = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UVIndexComponentPreprocessedDataModel(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10015B600(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10015B530(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for TipPriorityQueue()
{
  return &type metadata for TipPriorityQueue;
}

void sub_100142444(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1009D5908;
  sub_10015BC08(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1009D5920;
    v4[4] = &unk_1009D5908;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for () + 64;
    v4[7] = (char *)&value witness table for () + 64;
    swift_initClassMetadata2(a1, 0, 8, v4, a1 + 128);
  }
}

uint64_t type metadata accessor for StatePersistence(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StatePersistence);
}

uint64_t sub_100142500(void (*a1)(uint64_t a1, uint64_t a2, uint64_t a3), void (*a2)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a3)(uint64_t a1), uint64_t (*a4)(uint64_t a1))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v19)(uint64_t);
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v21)(uint64_t);
  uint64_t v23;

  v5 = v4;
  v10 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v5 + 16) = 1;
  v13 = v5 + qword_100C10DF0;
  v14 = type metadata accessor for URL(0);
  v15 = _s7Weather24LocationCompositionStateOwst_0(v13, 1, 1, v14);
  *(_QWORD *)(v5 + qword_100C10DF8) = 100;
  *(_OWORD *)(v5 + qword_100C10E00) = xmmword_1009B7A30;
  *(_BYTE *)(v5 + qword_100C10E08) = 1;
  v16 = qword_100C10E10;
  static UnfairLock.Options.dataSynchronization.getter(v15);
  v17 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(_QWORD *)(v5 + v16) = UnfairLock.init(options:)(v12);
  v18 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + qword_100C10E18);
  *v18 = sub_1008C15CC;
  v18[1] = 0;
  v19 = (uint64_t (**)(uint64_t))(v5 + qword_100C10E20);
  *v19 = sub_1008C1728;
  v19[1] = 0;
  sub_1000261AC();
  if (a1)
  {
    v20 = v18[1];
    *v18 = a1;
    v18[1] = a2;
    swift_release(v20);
  }
  if (a3)
  {
    v21 = v19[1];
    *v19 = a3;
    v19[1] = a4;
    swift_release(v21);
  }
  return v5;
}

uint64_t type metadata accessor for SettingsAssembly()
{
  return objc_opt_self(_TtC7Weather16SettingsAssembly);
}

double sub_10014268C()
{
  return sub_100008780();
}

uint64_t sub_1001426A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  result = type metadata accessor for CodableError(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[2] = &unk_1009A86C8;
    result = type metadata accessor for Location(319);
    if (v4 <= 0x3F)
    {
      v5 = *(_QWORD *)(result - 8) + 64;
      v8[3] = v5;
      result = type metadata accessor for LocationOfInterest(319);
      if (v6 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for SearchLocation(319);
        if (v7 <= 0x3F)
        {
          v8[5] = *(_QWORD *)(result - 8) + 64;
          v8[6] = v5;
          swift_initEnumMetadataMultiPayload(a1, 256, 7, v8);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for SearchViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEA790;
  if (!qword_100BEA790)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchViewAction);
  return result;
}

unint64_t sub_1001427A8()
{
  unint64_t result;

  result = qword_100C05BE8;
  if (!qword_100C05BE8)
  {
    result = swift_getWitnessTable(&unk_1009C9B24, &type metadata for RoundedRectangle);
    atomic_store(result, (unint64_t *)&qword_100C05BE8);
  }
  return result;
}

unint64_t sub_1001427E4()
{
  unint64_t result;

  result = qword_100C05BE0;
  if (!qword_100C05BE0)
  {
    result = swift_getWitnessTable(&unk_1009C9B74, &type metadata for RoundedRectangle);
    atomic_store(result, (unint64_t *)&qword_100C05BE0);
  }
  return result;
}

uint64_t type metadata accessor for ProviderAssembly()
{
  return objc_opt_self(_TtC7Weather16ProviderAssembly);
}

uint64_t sub_100142848@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v15)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BED520);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v13)
    {
      a2[3] = (uint64_t)&type metadata for MapOverlayKindProvider;
      a2[4] = (uint64_t)&off_100B75C88;
      v11 = swift_allocObject(&unk_100B99FD8, 96, 7);
      *a2 = v11;
      sub_10003C800(&v14, v11 + 16);
      return sub_10003C800(&v12, v11 + 56);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100142944(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100BDBAB0);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_100142848, 0, v2);
  swift_release(v3);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

double sub_100142998(__n128 a1)
{
  return sub_100142944(a1);
}

unint64_t sub_1001429AC()
{
  unint64_t result;

  result = qword_100BD2A48;
  if (!qword_100BD2A48)
  {
    result = swift_getWitnessTable(&unk_1009903A0, &type metadata for NetworkInterface);
    atomic_store(result, (unint64_t *)&qword_100BD2A48);
  }
  return result;
}

void sub_1001429E8(char a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BD2A78);
  __chkstk_darwin(v2);
  sub_100098728();
  __asm { BR              X10 }
}

uint64_t sub_100142A54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  ShortDescription.init(name:_:)(0x72616C756C6C6563, 0xE800000000000000, v4, &type metadata for NetworkState);
  v1[3] = v0;
  v1[4] = sub_100159C50();
  v5 = sub_10005F164(v1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 32))(v5, v2, v0);
}

void sub_100142BC4()
{
  char *v0;

  sub_1001429E8(*v0);
}

uint64_t sub_100142BD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;

  v2 = sub_1000BA294(&qword_100BD2A90);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v14 - v6;
  sub_10015940C(a1, (uint64_t)&v14 - v6);
  v8 = type metadata accessor for NWInterface.InterfaceType(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8) != 1)
  {
    sub_10015940C((uint64_t)v7, (uint64_t)v5);
    v10 = *(_QWORD *)(v8 - 8);
    v11 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v5, v8);
    if (v11 == enum case for NWInterface.InterfaceType.other(_:))
      goto LABEL_4;
    if (v11 == enum case for NWInterface.InterfaceType.wifi(_:))
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 == enum case for NWInterface.InterfaceType.cellular(_:))
    {
      v9 = 0;
      goto LABEL_9;
    }
    if (v11 == enum case for NWInterface.InterfaceType.wiredEthernet(_:)
      || v11 == enum case for NWInterface.InterfaceType.loopback(_:))
    {
LABEL_4:
      v9 = 2;
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v8);
  }
  v9 = 3;
LABEL_9:
  sub_1001593CC(a1);
  sub_1001593CC((uint64_t)v7);
  return v9;
}

uint64_t storeEnumTagSinglePayload for NamespaceWrapper(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100142D74(uint64_t a1, uint64_t a2)
{
  return static NamespaceWrapper.== infix(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

unint64_t sub_100142D90()
{
  unint64_t result;

  result = qword_100BC5AC8;
  if (!qword_100BC5AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NamespaceWrapper, &type metadata for NamespaceWrapper);
    atomic_store(result, (unint64_t *)&qword_100BC5AC8);
  }
  return result;
}

uint64_t static NamespaceWrapper.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (((a2 | a4) & 1) != 0)
    return a2 & a4 & 1;
  else
    return static Namespace.ID.== infix(_:_:)(a1, a3);
}

void type metadata accessor for MultitaskingMode()
{
  sub_100098884();
}

uint64_t type metadata accessor for MonitorsAssembly()
{
  return objc_opt_self(_TtC7Weather16MonitorsAssembly);
}

uint64_t sub_100142E14(_QWORD *a1)
{
  return sub_100142E30(a1, &qword_100BED520, (uint64_t (*)(_QWORD))type metadata accessor for CountryCodeConfigurationMonitor, (void (*)(_BYTE *, uint64_t))sub_10003C800);
}

uint64_t sub_100142E30(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD), void (*a4)(_BYTE *, uint64_t))
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1000DB418(a1, a1[3]);
  v8 = sub_1000BA294(&qword_100BC43F0);
  result = sub_1000BCD0C(v8);
  if (v16)
  {
    v10 = v17;
    sub_1000DB418(a1, a1[3]);
    v11 = sub_1000BA294(a2);
    result = sub_1000BCD0C(v11);
    if (v15)
    {
      v12 = a3(0);
      v13 = swift_allocObject(v12, 72, 7);
      *(_QWORD *)(v13 + 16) = v16;
      *(_QWORD *)(v13 + 24) = v10;
      a4(v14, v13 + 32);
      return v13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100142F10(_QWORD *a1)
{
  return sub_100142E30(a1, &qword_100BCF678, (uint64_t (*)(_QWORD))type metadata accessor for AppConfigurationMonitor, (void (*)(_BYTE *, uint64_t))sub_10003C800);
}

_QWORD *sub_100142F2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43F0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v24)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100BD1408);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v23)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BC43B0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BED520);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (v17)
  {
    v15 = type metadata accessor for CurrentLocationMonitor();
    swift_allocObject(v15, 152, 7);
    return sub_100135F88(v24, v25, &v22, v18, v19, v20, v21, &v16);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001430B4(_QWORD *a1)
{
  return sub_100142E30(a1, &qword_100C12FA8, (uint64_t (*)(_QWORD))type metadata accessor for AppLaunchCountMonitor, (void (*)(_BYTE *, uint64_t))sub_10003C800);
}

void sub_1001430D0(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = sub_1000BA294(a2);
  dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (v10)
  {
    v8 = a3(0);
    v9 = swift_allocObject(v8, 32, 7);
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(v9 + 24) = v11;
    sub_1000BAB2C();
  }
  else
  {
    __break(1u);
  }
}

void sub_100143150(_QWORD *a1)
{
  sub_1001430D0(a1, &qword_100BC43F0, (uint64_t (*)(_QWORD))type metadata accessor for AppStateMonitor);
}

void sub_100143164(_QWORD *a1, uint64_t (*a2)(_QWORD), void (*a3)())
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = sub_1000BA294(&qword_100BC43F0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (v9)
  {
    v8 = a2(0);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    a3();
    sub_1000BAB2C();
  }
  else
  {
    __break(1u);
  }
}

void sub_1001431F4(_QWORD *a1)
{
  sub_100143164(a1, type metadata accessor for DisplayMetricsMonitor, (void (*)())sub_1000083B4);
}

uint64_t sub_100143208()
{
  return sub_100011760();
}

void sub_10014321C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for MapComponentViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = "\t";
    v6[3] = &unk_1009D5580;
    sub_100158AF0(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_1009D5598;
      v6[6] = &unk_1009D55B0;
      v6[7] = &unk_1009D55C8;
      v6[8] = &unk_1009D5580;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

uint64_t type metadata accessor for LocationsReducer()
{
  return objc_opt_self(_TtC7Weather16LocationsReducer);
}

uint64_t sub_1001432F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[12];

  result = type metadata accessor for LocationViewModel(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[4] = &unk_1009BB308;
    v5[5] = &unk_1009BB320;
    result = type metadata accessor for DisplayMetrics(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[8] = &unk_1009BB338;
      v5[9] = &unk_1009BB350;
      v5[10] = &unk_1009BB350;
      v5[11] = &unk_1009BB368;
      swift_initStructMetadata(a1, 256, 12, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for LocationAssembly()
{
  return objc_opt_self(_TtC7Weather16LocationAssembly);
}

uint64_t sub_1001433E8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for LocationModel(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_100143444(a1, (_QWORD *)(v2 + 16), v2 + v6, *(_BYTE *)(v2 + v6 + *(_QWORD *)(v5 + 64)), a2);
}

uint64_t sub_100143444@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;

  v8 = a4 & 1;
  sub_1000DB418(a2, a2[3]);
  sub_100043CEC(a1, a3, v8, a5);
  v9 = type metadata accessor for LocationViewModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(a5, 0, 1, v9);
}

uint64_t sub_1001434BC(uint64_t a1)
{
  _BYTE *v1;
  _BYTE v3[24];

  v1 = (_BYTE *)(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  swift_beginAccess(v1, v3, 0, 0);
  if ((*v1 & 1) != 0)
    return 1;
  sub_100076C68();
  return 0;
}

void sub_10014352C(uint64_t a1)
{
  uint64_t v1;

  sub_100143534(a1, (_QWORD *)(v1 + 16));
}

void sub_100143534(uint64_t a1, _QWORD *a2)
{
  sub_1000DB418(a2, a2[3]);
  sub_100010160();
}

uint64_t sub_10014357C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE v3[24];

  v1 = (_BYTE *)(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  swift_beginAccess(v1, v3, 0, 0);
  if ((*v1 & 1) != 0)
    return 1;
  if ((sub_100076C68() & 1) != 0)
    return 0x3FB999999999999ALL;
  return 0;
}

void sub_1001435F4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for DailyForecastComponentViewModelFactory, (uint64_t)&off_100B6CE40, a2);
}

void sub_100143608(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for AirQualityComponentViewModelFactory, (uint64_t)&off_100B9A100, a2);
}

void sub_10014361C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for FeelsLikeComponentViewModelFactory, (uint64_t)&off_100B95C68, a2);
}

_QWORD *sub_100143630(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BCF678);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (*(_QWORD *)((char *)&v11[3] + 1))
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1000DB418(a1, v6);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v11, &type metadata for Bool, 0xD000000000000012, 0x80000001009F5CF0, &type metadata for Bool, v6, v7);
    if (LOBYTE(v11[0]) != 2)
    {
      v8 = v11[0] & 1;
      v9 = type metadata accessor for DailyForecastComponentViewModelFactory();
      v10 = swift_allocObject(v9, 57, 7);
      sub_10003C800((__int128 *)((char *)v11 + 1), v10 + 16);
      *(_BYTE *)(v10 + 56) = v8;
      return (_QWORD *)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100143720()
{
  uint64_t v0;

  v0 = type metadata accessor for AirQualityComponentViewModelFactory();
  return swift_allocObject(v0, 16, 7);
}

uint64_t sub_100143740(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BED518);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = result;
    v7 = a1[3];
    v8 = a1[4];
    sub_1000DB418(a1, v7);
    v9 = sub_1000BA294(&qword_100BCF678);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
    if (v13)
    {
      v10 = type metadata accessor for FeelsLikeComponentViewModelFactory();
      v11 = swift_allocObject(v10, 64, 7);
      *(_QWORD *)(v11 + 16) = v6;
      sub_10003C800(&v12, v11 + 24);
      return v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100143818@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v10)
  {
    v7 = type metadata accessor for NewsArticleComponentFactory();
    v8 = swift_allocObject(v7, 56, 7);
    result = sub_10003C800(&v9, v8 + 16);
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B75780;
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001438B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[3];
  uint64_t v24;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BED438);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v24)
  {
    v7 = sub_100068EB4((uint64_t)v23, v24);
    v8 = __chkstk_darwin(v7);
    v10 = (_QWORD *)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v11 + 16))(v10, v8);
    v12 = *v10;
    v13 = type metadata accessor for LocationViewComponentFactory();
    v22[3] = v13;
    v22[4] = &off_100B95518;
    v22[0] = v12;
    v14 = type metadata accessor for AlternativeLocationViewConfigurationFactory();
    v15 = (_QWORD *)swift_allocObject(v14, 56, 7);
    v16 = sub_100068EB4((uint64_t)v22, v13);
    v17 = __chkstk_darwin(v16);
    v19 = (_QWORD *)((char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
    v21 = *v19;
    v15[5] = v13;
    v15[6] = &off_100B95518;
    v15[2] = v21;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v22);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    a2[3] = v14;
    a2[4] = &off_100B66738;
    *a2 = v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100143A40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[3];
  uint64_t v24;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BED418);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v24)
  {
    v7 = sub_100068EB4((uint64_t)v23, v24);
    v8 = __chkstk_darwin(v7);
    v10 = (_QWORD *)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v11 + 16))(v10, v8);
    v12 = *v10;
    v13 = type metadata accessor for NewsArticleComponentFactory();
    v22[3] = v13;
    v22[4] = &off_100B75780;
    v22[0] = v12;
    v14 = type metadata accessor for LocationViewComponentFactory();
    v15 = (_QWORD *)swift_allocObject(v14, 56, 7);
    v16 = sub_100068EB4((uint64_t)v22, v13);
    v17 = __chkstk_darwin(v16);
    v19 = (_QWORD *)((char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
    v21 = *v19;
    v15[5] = v13;
    v15[6] = &off_100B75780;
    v15[2] = v21;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v22);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    a2[3] = v14;
    a2[4] = &off_100B95518;
    *a2 = v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100143BC8(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for LocationInputFactory, (uint64_t)&off_100B90270, a1);
}

void sub_100143BDC(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for ActiveLocationModelFactory, (uint64_t)&off_100B66968, a1);
}

void sub_100143BF0(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for ActiveLocationInputFactory, (uint64_t)&off_100B66978, a1);
}

void sub_100143C04(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for PrecipitationTotalComponentViewModelFactory, (uint64_t)&off_100B86328, a2);
}

void sub_100143C18(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for HourlyForecastComponentViewModelFactory, (uint64_t)&off_100B750B0, a2);
}

void sub_100143C2C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for DailyForecastComponentViewModelFactory, (uint64_t)&off_100B6CE30, a2);
}

Swift::String *sub_100143C40@<X0>(Swift::String **a1@<X8>)
{
  uint64_t v2;
  Swift::String *result;

  v2 = type metadata accessor for NewsArticleComponentViewModelFactory();
  swift_allocObject(v2, 32, 7);
  result = sub_10000CBD8();
  a1[3] = (Swift::String *)v2;
  a1[4] = (Swift::String *)&off_100B7D058;
  *a1 = result;
  return result;
}

void sub_100143C94(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for VisibilityComponentViewModelFactory, (uint64_t)&off_100B884A0, a2);
}

void sub_100143CA8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for FeelsLikeComponentViewModelFactory, (uint64_t)&off_100B95C58, a2);
}

void sub_100143CBC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for PressureComponentViewModelFactory, (uint64_t)&off_100B9B118, a2);
}

void sub_100143CD0(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for UVIndexComponentViewModelFactory, (uint64_t)&off_100B8B688, a2);
}

void sub_100143CE4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for WindComponentViewModelFactory, (uint64_t)&off_100B82B48, a2);
}

uint64_t sub_100143CF8(uint64_t a1)
{
  return sub_100525B18(a1, type metadata accessor for TipCoordinator, sub_100146440);
}

uint64_t sub_100143D0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BED3A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v31)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BED3B0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v29)
    {
      v11 = sub_100068EB4((uint64_t)v28, v29);
      v12 = __chkstk_darwin(v11);
      v14 = (_QWORD *)((char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
      v16 = *v14;
      v17 = type metadata accessor for LocationComponentViewModelFactory();
      v27[3] = v17;
      v27[4] = &off_100B6D6D0;
      v27[0] = v16;
      v18 = type metadata accessor for LocationContentViewModelFactory();
      v19 = (_QWORD *)swift_allocObject(v18, 96, 7);
      v20 = sub_100068EB4((uint64_t)v27, v17);
      v21 = __chkstk_darwin(v20);
      v23 = (_QWORD *)((char *)&v27[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v24 + 16))(v23, v21);
      v25 = *v23;
      v19[10] = v17;
      v19[11] = &off_100B6D6D0;
      v19[7] = v25;
      sub_10003C800(&v30, (uint64_t)(v19 + 2));
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
      result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
      a2[3] = v18;
      a2[4] = &off_100B999F8;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100143EE4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, type metadata accessor for LocationViewModelFactory, (uint64_t)&off_100B91A08, a2);
}

uint64_t sub_100143EF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v39[3];
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BDBAA8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v46)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BDBAB0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v44)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BED538);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v42)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_1000DB418(a1, v14);
  v16 = sub_1000BA294(&qword_100BD13B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (v40)
  {
    v17 = sub_100068EB4((uint64_t)v45, v46);
    v18 = __chkstk_darwin(v17);
    v20 = (_QWORD *)((char *)&v39[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
    v22 = sub_100068EB4((uint64_t)v43, v44);
    v23 = __chkstk_darwin(v22);
    v25 = (char *)&v39[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v26 + 16))(v25, v23);
    v27 = sub_100068EB4((uint64_t)v41, v42);
    v28 = __chkstk_darwin(v27);
    v30 = (_QWORD *)((char *)&v39[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v31 + 16))(v30, v28);
    v32 = sub_100068EB4((uint64_t)v39, v40);
    v33 = __chkstk_darwin(v32);
    v35 = (uint64_t **)((char *)&v39[-1] - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v36 + 16))(v35, v33);
    v37 = sub_1001316D0(*v20, v25, *v30, *v35);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
    result = type metadata accessor for LocationViewStateReducer();
    a2[3] = result;
    a2[4] = &off_100B60CA0;
    *a2 = v37;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_1001441EC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, type metadata accessor for LocationViewModelFactory, (uint64_t)&off_100B91A18, a2);
}

void sub_100144200(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for LocationViewDescriptor, (uint64_t)&off_100B978D8, a1);
}

uint64_t sub_100144214(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = Tracker.chain(name:identifier:)(0x6E6F697461636F6CLL, 0xE800000000000000, 0, 0);
    swift_release(v5);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100144298()
{
  uint64_t v0;

  v0 = sub_1000BA294(&qword_100BED3B8);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return StringBuilder.init(_:)(sub_1000309E0, 0);
}

uint64_t sub_1001442DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v0 = type metadata accessor for WeatherForecastDescriptionStringBuilder(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = WeatherForecastDescriptionStringBuilder.init()();
  v2 = type metadata accessor for FeelsLikeStringBuilder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4[3] = v2;
  v4[4] = &protocol witness table for FeelsLikeStringBuilder;
  v4[0] = FeelsLikeStringBuilder.init()();
  WeatherForecastDescriptionStringBuilder.feelsLikeStringBuilder.setter(v4);
  return v1;
}

void sub_100144364()
{
  sub_100053D68();
}

uint64_t type metadata accessor for ListMenuAssembly()
{
  return objc_opt_self(_TtC7Weather16ListMenuAssembly);
}

double sub_100144398(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  double result;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_1000BA294(&qword_100C0A230);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_100794F80, 0, v2);
  swift_release(v3);
  v4 = swift_release(v1);
  v5 = ProxyContainer.private.getter(v4);
  RegistrationContainer.lazy(block:)(sub_100795158, 0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double sub_100144414(__n128 a1)
{
  return sub_100144398(a1);
}

uint64_t sub_10014442C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AC0FB4, 1);
}

uint64_t sub_100144460(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for GridGeometryRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GridGeometryRoot);
}

uint64_t sub_1001444E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_1009C69D8;
  v4[1] = &unk_1009C69F0;
  v4[2] = &unk_1009C69F0;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1009C6A08;
    v4[5] = &unk_1009C69D8;
    v4[6] = &unk_1009C69D8;
    v4[7] = &unk_1009C69D8;
    v4[8] = &unk_1009C69D8;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = &unk_1009C69D8;
    v4[11] = &unk_1009C69D8;
    v4[12] = &unk_1009C6A20;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100144590()
{
  unint64_t result;

  result = qword_100BDE4D8;
  if (!qword_100BDE4D8)
  {
    result = swift_getWitnessTable(&unk_10099B884, &unk_100B716F0);
    atomic_store(result, (unint64_t *)&qword_100BDE4D8);
  }
  return result;
}

unint64_t sub_1001445CC()
{
  unint64_t result;

  result = qword_100BDE558;
  if (!qword_100BDE558)
  {
    result = swift_getWitnessTable(&unk_10099B8BC, &unk_100B716F0);
    atomic_store(result, (unint64_t *)&qword_100BDE558);
  }
  return result;
}

void sub_100144608(uint64_t a1)
{
  sub_1000BC0F8(a1, (uint64_t)&unk_100CAE708, (uint64_t)&unk_100B716F0);
}

void sub_10014461C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char v9;

  v8 = sub_1000BA294(&qword_100BC3130);
  sub_1000D05F0(v8);
  sub_1000C0A4C();
  v9 = 0;
  Tips.Parameter.init<A>(_:_:_:_:)(a3, a4, a5, &v9, _swiftEmptyArrayStorage, &type metadata for Bool, a3, &protocol witness table for Bool, &protocol witness table for Bool);
  sub_1000BAB2C();
}

void sub_1001446A4(uint64_t a1)
{
  sub_1000BAB08(a1, (uint64_t)&unk_100CAE720, (uint64_t)&unk_100B716F0);
}

void sub_1001446B8()
{
  sub_10001F5A4();
}

void sub_1001446D4()
{
  sub_100010D34();
}

void sub_1001446E0(uint64_t a1)
{
  sub_10014461C(a1, (uint64_t)&unk_100CAE738, (uint64_t)&unk_100B716F0, 0xD000000000000010, 0x80000001009FE8B0);
}

uint64_t type metadata accessor for CompositeReducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompositeReducer);
}

void *sub_100144718(void *a1, const void *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 2, v4);
  v6 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 2, v4);
  if (!v5)
  {
    v7 = *(_QWORD *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v8 = type metadata accessor for WeatherActivity(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 2, v4);
  return a1;
}

uint64_t sub_1001447F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivityModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014483C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivityModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100144880(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for WeatherActivity(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001448EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC6F54, 1);
}

void sub_1001448FC()
{
  sub_1000BCD9C();
  sub_100144924();
}

void sub_100144924()
{
  id v0;

  v0 = sub_10003DB68();
  objc_msgSend(v0, "becomeCurrent");

}

uint64_t sub_100144960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (**v13)();
  uint64_t v14;

  v5 = sub_1000BCD9C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_1001447F8(v2, (uint64_t)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100B9D2B8, v9 + v7, v8 | 7);
  sub_10014483C((uint64_t)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  v11 = sub_1000BA294(&qword_100C16710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, a1, v11);
  result = sub_1000BA294(&qword_100C16718);
  v13 = (void (**)())(a2 + *(int *)(result + 36));
  *v13 = sub_1001448FC;
  v13[1] = (void (*)())v10;
  v13[2] = 0;
  v13[3] = 0;
  return result;
}

uint64_t sub_100144A48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1009989C0;
  v4[1] = &unk_1009989D8;
  v4[2] = &unk_1009989D8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for VisibilityState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDBFA0;
  if (!qword_100BDBFA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VisibilityState);
  return result;
}

uint64_t sub_100144B04()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_WORD *)(v0 + 32) = 0;
  ObservationRegistrar.init()();
  return v0;
}

unint64_t sub_100144B30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDC0C8;
  if (!qword_100BDC0C8)
  {
    v1 = type metadata accessor for VisibilityState(255);
    result = swift_getWitnessTable(&unk_1009989F0, v1);
    atomic_store(result, (unint64_t *)&qword_100BDC0C8);
  }
  return result;
}

void sub_100144B70()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 33) = *(_BYTE *)(v0 + 24);
}

double sub_100144B80(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  KeyPath = swift_getKeyPath(&unk_100998A10);
  v6 = v1;
  v7 = a1;
  sub_100144CEC(KeyPath, (uint64_t)sub_100144B70, (uint64_t)&v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100144BE0(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_100021ADC();
  if ((result & 1) == 0)
  {
    *(double *)(v3 + 16) = a2;
    *(double *)(v3 + 24) = a3;
    return sub_100144C40(a1);
  }
  return result;
}

uint64_t sub_100144C40(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(double);
  double v3;

  v2 = (uint64_t (*)(double))result;
  if ((*(double *)(v1 + 16) > 0.0 || *(double *)(v1 + 24) > 0.0) && *(_BYTE *)(v1 + 32) == 1)
  {
    v3 = sub_100144B80(1);
    return v2(v3);
  }
  return result;
}

uint64_t sub_100144C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_100021ADC();
  if ((result & 1) == 0)
  {
    *(_BYTE *)(v1 + 32) = 1;
    return sub_100144C40(a1);
  }
  return result;
}

uint64_t sub_100144CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v8;

  v6 = sub_100144B30();
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, a1, a2, a3, &type metadata for () + 1, v6);
}

uint64_t type metadata accessor for VFXTestAssembly()
{
  return objc_opt_self(_TtC7Weather15VFXTestAssembly);
}

uint64_t sub_100144D94@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for VFXTestViewStateReducer, (uint64_t)&off_100B6DC40, a1);
}

double sub_100144DA8(__n128 a1)
{
  return sub_1000092BC(a1);
}

uint64_t type metadata accessor for ToolbarAssembly()
{
  return objc_opt_self(_TtC7Weather15ToolbarAssembly);
}

uint64_t sub_100144DDC()
{
  return sub_100015270();
}

double sub_100144DF0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  TipAlignmentKey.defaultValue.unsafeMutableAddressor();
  result = *(double *)&static TipAlignmentKey.defaultValue;
  *a1 = static TipAlignmentKey.defaultValue;
  return result;
}

uint64_t sub_100144E1C()
{
  uint64_t result;
  uint64_t v1;

  result = static Alignment.bottomLeading.getter();
  *(_QWORD *)&static TipAlignmentKey.defaultValue = result;
  *((_QWORD *)&static TipAlignmentKey.defaultValue + 1) = v1;
  return result;
}

__int128 *TipAlignmentKey.defaultValue.unsafeMutableAddressor()
{
  if (qword_100BC1E58 != -1)
    swift_once(&qword_100BC1E58, sub_100144E1C);
  return &static TipAlignmentKey.defaultValue;
}

uint64_t type metadata accessor for StartupAssembly()
{
  return objc_opt_self(_TtC7Weather15StartupAssembly);
}

uint64_t sub_100144E9C()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v0 = type metadata accessor for CallbackScope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.private.getter(v2);
  v6 = type metadata accessor for AppIntentsDependencyStartupTask(0);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10087639C, 0, v6);
  swift_release(v7);
  swift_release(v5);
  ProxyContainer.callback.getter(v14, v8);
  v9 = v15;
  v10 = v16;
  sub_1000DB418(v14, v15);
  v11 = type metadata accessor for StartupTaskManager(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for CallbackScope.any(_:), v0);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v11, v4, sub_100876430, 0, v11, v9, v10);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
}

uint64_t sub_100144FD0()
{
  return sub_100144E9C();
}

void sub_100144FE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[7];

  v12[0] = (char *)&value witness table for () + 64;
  sub_1001345CC(319, (unint64_t *)&qword_100BD7578, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature);
  if (v3 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001345CC(319, &qword_100C01A88, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Distance);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001345CC(319, &qword_100C01A90, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.WindSpeed);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001345CC(319, &qword_100C01A98, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Pressure);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          sub_1001345CC(319, (unint64_t *)&unk_100C01AA0, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Precipitation);
          if (v11 <= 0x3F)
          {
            v12[5] = *(_QWORD *)(v10 - 8) + 64;
            v12[6] = "\b";
            swift_updateClassMetadata2(a1, 256, 7, v12, a1 + 80);
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for SettingsMonitor(uint64_t a1)
{
  uint64_t result;

  result = qword_100C01A78;
  if (!qword_100C01A78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SettingsMonitor);
  return result;
}

Swift::Void __swiftcall SettingsMonitor.applicationWillEnterForeground()()
{
  sub_10071F3B0();
  sub_10071F0B0();
}

uint64_t sub_100145174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5F78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001451BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C04098)
  {
    v2 = type metadata accessor for SearchViewState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C04098);
  }
}

void sub_100145210(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10098C978;
  v2 = type metadata accessor for SearchViewState.ViewState(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_10098C990;
    sub_10015A0BC(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_1001452A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CodableError(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100145318(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LocationOfInterest(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for SearchLocation(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        v6[3] = " ";
        swift_initEnumMetadataMultiPayload(a1, 256, 4, v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for NewsDataManager()
{
  return objc_opt_self(_TtC7Weather15NewsDataManager);
}

uint64_t sub_1001453DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for LocationPreviewViewAction(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10099D6F0;
    v4[2] = &unk_10099D6F0;
    v4[3] = &unk_10099D708;
    v4[4] = &unk_10099D720;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100145460(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 104);
}

uint64_t type metadata accessor for MiddlewareChain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MiddlewareChain);
}

uint64_t sub_1001454BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  swift_beginAccess(v2 + 24, v9, 33, 0);
  swift_retain();
  sub_1001215EC();
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  sub_10012135C(v5);
  v6 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = v6 + 16 * v5;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return swift_endAccess(v9);
}

uint64_t type metadata accessor for ManagerAssembly()
{
  return objc_opt_self(_TtC7Weather15ManagerAssembly);
}

uint64_t sub_100145568@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v16)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100C076D8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v14)
    {
      v11 = type metadata accessor for AppStoreReviewPrivacySampler();
      v12 = swift_allocObject(v11, 96, 7);
      sub_10003C800(&v15, v12 + 16);
      result = sub_10003C800(&v13, v12 + 56);
      a2[3] = v11;
      a2[4] = (uint64_t)&off_100B66550;
      *a2 = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100145660@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return sub_1007B610C(v1, a1);
}

uint64_t sub_100145668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for NewsDataManager();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B98388;
  *a1 = result;
  return result;
}

uint64_t sub_1001456AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeState(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BF74D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v22)
  {
    sub_1000DB418(v21, v22);
    sub_100131354();
    v16 = v15;
    sub_10012236C(v15 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, (uint64_t)v10);
    v17 = swift_release(v16);
    (*(void (**)(_BYTE *, char *, uint64_t, __n128))(v5 + 32))(v7, v10, v4, v17);
    v18 = type metadata accessor for TimeManager();
    swift_allocObject(v18, 24, 7);
    v19 = sub_10014B6D8(v7);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
    *a2 = v19;
    a2[1] = (uint64_t)&off_100B61208;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100145818@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return sub_1007B60F0(v1, a1);
}

uint64_t sub_100145820@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v20)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100C076B0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v18)
    {
      v11 = sub_100068EB4((uint64_t)v17, v18);
      v12 = __chkstk_darwin(v11);
      v14 = (uint64_t **)((char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t **, __n128))(v15 + 16))(v14, v12);
      v16 = sub_1001379AC(&v19, *v14);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
      result = type metadata accessor for AppStoreReviewManager();
      a2[3] = result;
      a2[4] = (uint64_t)&off_100B73020;
      *a2 = v16;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100145958@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return sub_100145960(v1, a1);
}

double sub_100145960@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  double result;

  a2[3] = *a1;
  a2[4] = sub_100134528();
  *a2 = a1;
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_100145998()
{
  return sub_10004DCC0();
}

uint64_t sub_1001459AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationsAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001459F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _BYTE v5[32];
  _QWORD v6[7];

  result = type metadata accessor for CurrentLocation(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Location(319);
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v5, *(_QWORD *)(result - 8) + 64, &unk_1009AF948);
      v6[1] = v5;
      v6[2] = &unk_1009AF960;
      v6[3] = &unk_1009AF978;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[6] = &unk_1009AF990;
      swift_initEnumMetadataMultiPayload(a1, 256, 7, v6);
      return 0;
    }
  }
  return result;
}

double destroy for LocationTracker(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 1);
  swift_release(a1[7]);
  *(_QWORD *)&result = swift_release(a1[9]).n128_u64[0];
  return result;
}

uint64_t sub_100145AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C4A10() - 8) + 80);
  return sub_100145B2C(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100145B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for ViewData(0);
  sub_100086DA4(&qword_100BD4610, (uint64_t (*)(uint64_t))&type metadata accessor for ViewData, (uint64_t)&protocol conformance descriptor for ViewData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, _swiftEmptyArrayStorage, 0xD00000000000005CLL, 0x8000000100A06730, 73, v3, v4);
  v5 = type metadata accessor for LocationViewEvent(0);
  sub_100086DA4(&qword_100BE55C0, (uint64_t (*)(uint64_t))&type metadata accessor for LocationViewEvent, (uint64_t)&protocol conformance descriptor for LocationViewEvent);
  return AccessTracker.time<A>(_:submitAndRestartWithSession:)(v5, 0, v5, v6);
}

uint64_t sub_100145BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (int *)type metadata accessor for ViewState(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a1 + 48))(&v24, v8);
  v11 = v24;
  sub_100080C0C(v24 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v10, type metadata accessor for ViewState);
  swift_release(v11);
  sub_100080C0C((uint64_t)&v10[v7[5]], (uint64_t)v6, type metadata accessor for ViewState.SecondaryViewState);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    sub_1000215BC((uint64_t)v6, type metadata accessor for ViewState.SecondaryViewState);
  }
  else
  {
    v20 = *v6;
    if (*(_QWORD *)&v10[v7[9] + 8] != 1
      || (v21 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice"),
          objc_msgSend(v21, "userInterfaceIdiom"),
          v21,
          (v10[v7[7]] & 1) != 0))
    {
      sub_1000215BC((uint64_t)v10, type metadata accessor for ViewState);
      v22 = *(unsigned __int8 *)(v20 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_trigger);
      swift_release(v20);
      __asm { BR              X9 }
    }
    swift_release(v20);
  }
  sub_1000215BC((uint64_t)v10, type metadata accessor for ViewState);
  if (qword_100BC2400 != -1)
    swift_once(&qword_100BC2400, sub_1001597C4);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_1000AECD4(v12, (uint64_t)qword_100CAEFF8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Location track view session was called but ViewState is not set to locationViewer", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = enum case for ViewAction.unknown(_:);
  v18 = type metadata accessor for ViewAction(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a2, v17, v18);
}

uint64_t sub_100145ECC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA94AC, 1);
}

uint64_t type metadata accessor for HandlerAssembly()
{
  return objc_opt_self(_TtC7Weather15HandlerAssembly);
}

uint64_t sub_100145EFC()
{
  return sub_100025038();
}

double sub_100145F10@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  double result;

  sub_100146034();
  v2 = qword_100CADD88;
  v3 = byte_100CADD90;
  v4 = qword_100CADD98;
  v5 = word_100CADDA0;
  *(_QWORD *)a1 = qword_100CADD70;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)algn_100CADD78;
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 48) = v5;
  result = *(double *)&qword_100CADDA8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&qword_100CADDA8;
  return result;
}

uint64_t sub_100145F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10014AFEC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

double sub_100145FC0()
{
  double result;

  if (qword_100BC2608 != -1)
    swift_once(&qword_100BC2608, sub_10014B028);
  result = *(double *)&qword_100CAF438;
  qword_100CADD70 = 0;
  *(_QWORD *)algn_100CADD78 = 0x4062000000000000;
  qword_100CADD80 = 0;
  qword_100CADD88 = 0;
  byte_100CADD90 = 0;
  qword_100CADD98 = 0x4030000000000000;
  word_100CADDA0 = 768;
  qword_100CADDA8 = 0x4034000000000000;
  qword_100CADDB0 = qword_100CAF438;
  return result;
}

uint64_t *sub_100146034()
{
  if (qword_100BC1E40 != -1)
    swift_once(&qword_100BC1E40, sub_100145FC0);
  return &qword_100CADD70;
}

void type metadata accessor for ComponentOrigin()
{
  sub_100098884();
}

uint64_t type metadata accessor for AppStateMonitor()
{
  return objc_opt_self(_TtC7Weather15AppStateMonitor);
}

void sub_1001460A0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  _BYTE v9[48];

  sub_100099ACC();
  sub_1000C4168();
  __chkstk_darwin(v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  *v5 = a1;
  swift_storeEnumTagMultiPayload(v5, v8, 0);
  sub_1000BA720();
  sub_1000A5EBC((uint64_t)v5, (uint64_t)v9, v7);
  sub_100021A68((uint64_t)v9, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4((uint64_t)v5);
  swift_release(v6);
  sub_100079F70();
}

Swift::Void __swiftcall AppStateMonitor.applicationWillEnterForeground()()
{
  sub_1001460A0(1);
}

Swift::Void __swiftcall AppStateMonitor.applicationDidFinishLaunching(withOptions:)(Swift::OpaquePointer_optional withOptions)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  _BYTE v8[48];

  sub_100099ACC();
  sub_1000C4168();
  __chkstk_darwin(v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  *v4 = 0;
  swift_storeEnumTagMultiPayload(v4, v7, 0);
  sub_1000BA720();
  sub_1000A5EBC((uint64_t)v4, (uint64_t)v8, v6);
  sub_100021A68((uint64_t)v8, (uint64_t *)&unk_100BFFA10);
  sub_1000A0AA4((uint64_t)v4);
  swift_release(v5);
  sub_100079F70();
}

uint64_t sub_1001461DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003CAD04);
}

void sub_1001461E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[15];
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;

  v10[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1001345CC(319, (unint64_t *)&qword_100BDE7A8, (uint64_t (*)(uint64_t))&type metadata accessor for CurrentLocation);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v10[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v10[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v10[4] = &unk_10099BD00;
    v10[5] = &unk_10099BD18;
    v10[6] = &unk_10099BD30;
    v10[7] = &unk_10099BD00;
    v10[8] = &unk_10099BD48;
    v10[9] = &unk_10099BD18;
    sub_1001345CC(319, (unint64_t *)&unk_100BDE7B0, type metadata accessor for SearchViewState.ViewState);
    if (v5 <= 0x3F)
    {
      v10[10] = *(_QWORD *)(v4 - 8) + 64;
      v10[11] = &unk_10099BD60;
      v10[12] = &unk_10099BD78;
      v10[13] = &unk_10099BD00;
      v10[14] = &unk_10099BD00;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v11 = *(_QWORD *)(v6 - 8) + 64;
        v12 = &unk_10099BD00;
        v13 = &unk_10099BD60;
        v14 = &unk_10099BD90;
        v15 = &unk_10099BD78;
        v16 = &unk_10099BD48;
        v17 = v11;
        v18 = &unk_10099BD00;
        v19 = &unk_10099BDA8;
        v20 = &unk_10099BDC0;
        v21 = &unk_10099BD00;
        v22 = (char *)&value witness table for Builtin.Int64 + 64;
        v23 = &unk_10099BD00;
        sub_1001345CC(319, (unint64_t *)&qword_100BC4B10, type metadata accessor for ContentStatusBanner);
        if (v9 <= 0x3F)
        {
          v24 = *(_QWORD *)(v8 - 8) + 64;
          v25 = &unk_10099BD00;
          v26 = &unk_10099BD00;
          v27 = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_initStructMetadata(a1, 256, 32, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t type metadata accessor for ActualListInput(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BDE798, (uint64_t)&nominal type descriptor for ActualListInput);
}

uint64_t sub_10014639C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = &unk_1009BE088;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = &unk_1009BE088;
  v4[7] = &unk_1009BE088;
  v4[8] = &unk_1009BE088;
  v4[9] = &unk_1009BE088;
  v4[10] = &unk_1009BE088;
  v4[11] = &unk_1009BE088;
  v4[12] = &unk_1009BE088;
  v4[13] = &unk_1009BE088;
  v4[14] = &unk_1009BE088;
  v4[15] = "\b";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[16] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_100146440()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 40) = 0;
  ObservationRegistrar.init()();
  return v0;
}

void sub_100146474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  swift_bridgeObjectRelease(v2);
  sub_1001465DC();
}

void sub_100146498()
{
  uint64_t v0;

  sub_1001464B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1001464B0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  sub_100146474(a2);
}

double sub_1001464E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1009BE0E8);
  v4 = v0;
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48)).n128_u64[0];
  return result;
}

double sub_100146570(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  KeyPath = swift_getKeyPath(a2);
  sub_1000ED048(KeyPath, v4, v5, v6, v7, v8, v9, v10, v12);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

void sub_1001465CC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 35) = *(_BYTE *)(v0 + 24);
}

void sub_1001465DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_1001464E8();
  if (v0 && (v1 = *(_QWORD *)(v0 + 16), swift_bridgeObjectRelease(v0), v1) && (sub_100028CC8(), (v2 & 1) != 0))
    sub_10068D5D0();
  else
    sub_10004A298();
}

uint64_t sub_100146618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, a1, a2, a3, (char *)&type metadata for () + 8, v6);
}

void sub_1001466B8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_1001466F0()
{
  unsigned __int8 v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[31];
  char v9;

  sub_10000B5EC(v1 & 1, (uint64_t)&unk_1009BE110);
  if ((v1 & 1) != 0)
  {
    v2 = sub_1008259C4(v0);
    if (v2 == 0x726F46796C696164 && v3 == 0xED00007473616365)
    {
      swift_bridgeObjectRelease();
      v5 = 1;
    }
    else
    {
      v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0x726F46796C696164);
      swift_bridgeObjectRelease();
    }
    if (qword_100BC2000 != -1)
      swift_once(&qword_100BC2000, sub_1001446E0);
    v6 = sub_1000BA294(&qword_100BC3130);
    v7 = sub_1000AECD4(v6, (uint64_t)&unk_100CAE738);
    v9 = v5 & 1;
    swift_beginAccess(v7, v8, 33, 0);
    Tips.Parameter.wrappedValue.setter(&v9, v6);
    swift_endAccess(v8);
  }
}

void sub_100146898()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 38) = *(_BYTE *)(v0 + 24);
}

void sub_1001468A8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 39) = *(_BYTE *)(v0 + 24);
}

void sub_1001468B8()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE228);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

void sub_10014691C(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_100146948()
{
  uint64_t v0;
  char v1;
  char v2;
  unint64_t result;

  sub_100146A74();
  v2 = v1;
  *(_QWORD *)(v0 + 24) = &unk_100B716F0;
  result = sub_1001445CC();
  *(_QWORD *)(v0 + 32) = result;
  *(_BYTE *)v0 = v2 & 1;
  return result;
}

void sub_1001469F0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 40) = *(_BYTE *)(v0 + 24);
}

void sub_100146A00()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 37) = *(_BYTE *)(v0 + 24);
}

void sub_100146A10()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE250);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

void sub_100146A74()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE200);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

void sub_100146AD8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 36) = *(_BYTE *)(v0 + 24);
}

void sub_100146AE8()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath(&unk_1009BE138);
  sub_1000D91EC();
  sub_100086DA4(&qword_100BFC628, type metadata accessor for TipCoordinator, (uint64_t)&unk_1009BE0A0);
  sub_1000DDE00(v0, v1);
  sub_100089020();
  sub_100099960();
}

uint64_t sub_100146B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t type metadata accessor for StateProcessor(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for StateProcessor);
}

void sub_100146B60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\b";
  v4[1] = &unk_1009C63F0;
  v4[2] = &unk_1009C63F0;
  v4[3] = &unk_1009C63F0;
  sub_10015A0BC(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_1009C6408;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for SearchLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_100C03A88;
  if (!qword_100C03A88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchLocation);
  return result;
}

uint64_t type metadata accessor for SearchAssembly()
{
  return objc_opt_self(_TtC7Weather14SearchAssembly);
}

uint64_t sub_100146C40@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for SearchViewStateReducer, (uint64_t)&off_100B8BA08, a1);
}

double sub_100146C54(__n128 a1)
{
  return sub_1000084B0(a1);
}

uint64_t type metadata accessor for NetworkReducer()
{
  return objc_opt_self(_TtC7Weather14NetworkReducer);
}

uint64_t sub_100146C88(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  int v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[48];

  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v74 = v5;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v71 = v7;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v69 = v9;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  v22 = type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100098728();
  v26 = v25 - v24;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100098728();
  v30 = v29 - v28;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100098728();
  v34 = v33 - v32;
  v35 = type metadata accessor for AppConfigurationState(0);
  sub_10009D34C(v34, v36, v37, v35);
  sub_1000DDF18(OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  sub_1000B4D5C();
  v38 = type metadata accessor for Locale(0);
  sub_10009D34C(v21, v39, v40, v38);
  sub_1000CD204();
  v41 = sub_1000C3FF8();
  if ((a3 & 0x100) != 0)
    v44 = 5;
  else
    v44 = a3;
  sub_1007686D0(v41, v42, v44, v21, 0, 0, 2, 2, v43, v68, SHIBYTE(v68), v69, v71, SBYTE1(v71), SBYTE2(v71), (uint64_t)v75);
  sub_100021A68(v21, &qword_100BC3340);
  sub_10006A74C(v26);
  _s7Weather24LocationCompositionStateOwst_0(v30, 0, 1, v22);
  v45 = type metadata accessor for LocationsState(0);
  v48 = sub_1000BA2E8(v17, v46, v47, v45);
  v49 = type metadata accessor for NotificationsOptInState(v48);
  v52 = sub_1000BA2E8(v13, v50, v51, v49);
  v53 = type metadata accessor for TimeState(v52);
  v54 = v70;
  v57 = sub_1000BA2E8(v70, v55, v56, v53);
  v58 = type metadata accessor for ViewState(v57);
  v59 = v72;
  v62 = sub_1000BA2E8(v72, v60, v61, v58);
  v63 = type metadata accessor for ModalViewState(v62);
  sub_10009D34C(v74, v64, v65, v63);
  v66 = sub_1000DEBAC(0, 3, v34, v30, v17, 0, 0, 0, v13, v70, v72, v74, 0, 0, 0, 0, 0, 0, 0, v73);
  sub_100021A68(v74, &qword_100BC5F60);
  sub_100021A68(v59, &qword_100BC5F88);
  sub_100021A68(v54, &qword_100BC5F90);
  sub_100021A68(v13, &qword_100BC5F98);
  sub_100021A68(v17, &qword_100BC5FA0);
  sub_100021A68(v30, &qword_100BC5FA8);
  sub_100021A68(v34, &qword_100BC5FB0);
  return v66;
}

void sub_10014705C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v2 = type metadata accessor for LocationPreviewViewState(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1009C3748;
    v8[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v8[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_100147110(319);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for ModalViewState.LocationDetailModal(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 6, v8);
      }
    }
  }
}

void sub_100147110(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C01D20)
  {
    v2 = type metadata accessor for ModalViewState.MapViewModal(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C01D20);
  }
}

uint64_t sub_100147164(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for LocationPreviewViewState(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_1001471C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[8];

  result = type metadata accessor for ConditionDetailViewState(319);
  if (v3 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AirQualityDetailViewState(319);
    if (v4 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for NextHourPrecipitationDetailViewState(319);
      if (v5 <= 0x3F)
      {
        v11[2] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for SunriseSunsetDetailViewState(319);
        if (v6 <= 0x3F)
        {
          v11[3] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for MoonDetailViewState(319);
          if (v7 <= 0x3F)
          {
            v11[4] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for AveragesDetailViewState(319);
            if (v8 <= 0x3F)
            {
              v11[5] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for URL(319);
              if (v9 <= 0x3F)
              {
                v11[6] = *(_QWORD *)(result - 8) + 64;
                result = type metadata accessor for HomeAndWorkRefinementViewState(319);
                if (v10 <= 0x3F)
                {
                  v11[7] = *(_QWORD *)(result - 8) + 64;
                  swift_initEnumMetadataMultiPayload(a1, 256, 8, v11);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for MainInteractor()
{
  return objc_opt_self(_TtC7Weather14MainInteractor);
}

_QWORD *sub_100147308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;
  _QWORD v37[5];

  v32 = a6;
  v33 = a7;
  v14 = *a8;
  v15 = type metadata accessor for MainTracker();
  v37[3] = v15;
  v37[4] = &off_100B9A218;
  v37[0] = a3;
  v35 = v14;
  v36 = &off_100B6D7E8;
  v34[0] = a8;
  v16 = type metadata accessor for MainInteractor();
  v17 = (_QWORD *)swift_allocObject(v16, 144, 7);
  v18 = sub_100068EB4((uint64_t)v37, v15);
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v22 + 16))(v21, v19);
  v23 = sub_100068EB4((uint64_t)v34, v35);
  v24 = __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v32 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v27 + 16))(v26, v24);
  v28 = *v21;
  v29 = *v26;
  v17[11] = v15;
  v17[12] = &off_100B9A218;
  v17[8] = v28;
  v17[16] = v14;
  v17[17] = &off_100B6D7E8;
  v17[13] = v29;
  v17[6] = a1;
  v17[7] = a2;
  v17[2] = a4;
  v17[3] = a5;
  v30 = v33;
  v17[4] = v32;
  v17[5] = v30;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v34);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v37);
  return v17;
}

void sub_1001474A0(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100075EB0(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1001474EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  sub_10015A3EC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = &unk_1009C0E08;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for LocationModule()
{
  return objc_opt_self(_TtC7Weather14LocationModule);
}

uint64_t sub_100147598(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _BYTE v5[32];
  _QWORD v6[3];

  result = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v5, *(_QWORD *)(result - 8) + 64, &unk_10099A310);
    v6[0] = v5;
    v6[1] = &unk_10099A328;
    result = type metadata accessor for Location.Identifier(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ListViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDDBC8;
  if (!qword_100BDDBC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListViewAction);
  return result;
}

uint64_t sub_10014766C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10045A130);
}

uint64_t sub_100147678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10045A0CC);
}

uint64_t sub_100147688(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB5188, 1);
}

void sub_100147698(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)();
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];

  v49 = a1;
  v52 = a2;
  v3 = type metadata accessor for HeaderModifier(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BE39A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000BA294(&qword_100BE39A8);
  __chkstk_darwin(v48);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocationComponentHeaderMetrics(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2 + *(int *)(v3 + 20);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_10008D47C(*(_QWORD *)v15, v17);
  sub_10006A9A8();
  v19 = v18;
  v20 = sub_1000B15F8(v16, v17);
  sub_1007A5F94(v20);
  v21 = *(double *)&v14[*(int *)(v12 + 24)];
  sub_100441DDC((uint64_t)v14, type metadata accessor for LocationComponentHeaderMetrics);
  v22 = v19 + v21;
  v23 = v19 + v21 + -10.0;
  v24 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  v26 = v24[1];
  v27 = v24[2];
  v53 = *v24;
  v25 = v53;
  v54 = v26;
  v55 = v27;
  v28 = sub_1000BA294(&qword_100BE39B0);
  State.wrappedValue.getter(v56, v28);
  v29 = v56[1];
  v30 = sub_1000BA294(&qword_100BE39B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v9, v49, v30);
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = v29;
  v53 = v25;
  v54 = v26;
  v55 = v27;
  State.wrappedValue.getter(v56, v28);
  v31 = v56[0];
  v47 = v11;
  sub_100037768((uint64_t)v9, (uint64_t)v11, &qword_100BE39A0);
  v32 = &v11[*(int *)(v48 + 36)];
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v31;
  sub_100021A14((uint64_t)v9, &qword_100BE39A0);
  v33 = v2;
  sub_100080C0C(v2, (uint64_t)v6, type metadata accessor for HeaderModifier);
  v34 = v51;
  v35 = *(unsigned __int8 *)(v50 + 80);
  v36 = (v35 + 24) & ~v35;
  v37 = v35 | 7;
  v38 = (v51 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_100B74BF8, v39 + 8, v35 | 7);
  *(double *)(v40 + 16) = v22;
  sub_10007C75C((uint64_t)v6, v40 + v36, type metadata accessor for HeaderModifier);
  *(double *)(v40 + v38) = v23;
  *(double *)(v40 + v39) = v23 + 5.0;
  sub_100080C0C(v33, (uint64_t)v6, type metadata accessor for HeaderModifier);
  v41 = (v35 + 16) & ~v35;
  v42 = swift_allocObject(&unk_100B74C20, v41 + v34, v37);
  sub_10007C75C((uint64_t)v6, v42 + v41, type metadata accessor for HeaderModifier);
  v43 = (uint64_t)v47;
  v44 = v52;
  sub_100037768((uint64_t)v47, v52, &qword_100BE39A8);
  v45 = (void (**)())(v44 + *(int *)(sub_1000BA294(&qword_100BE39C0) + 36));
  *v45 = sub_10045AA38;
  v45[1] = (void (*)())v40;
  v45[2] = (void (*)())sub_10045AB74;
  v45[3] = (void (*)())v42;
  sub_100021A14(v43, &qword_100BE39A8);
}

uint64_t sub_100147A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7Weather14FrameContainer___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100147A6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = " ";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100147AE4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DisplayMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100147B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DisplayMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100147B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100147BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100147BF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BDF3C0)
  {
    v2 = type metadata accessor for DisplayMetrics(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BDF3C0);
  }
}

uint64_t sub_100147C48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_1009D6EF0;
  v4[3] = &unk_1009D6F08;
  v4[4] = &unk_1009D6F20;
  result = type metadata accessor for DynamicTypeSize(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DebugPresenter()
{
  return objc_opt_self(_TtC7Weather14DebugPresenter);
}

uint64_t sub_100147D00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for AutomationViewInfo(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AutomationCellInfo(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_1009CAA48;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

void sub_100147D88(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_10006CB54(a1, a2, a3, a4);
}

void sub_100147DA8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_100147D88(a1, a2, a3, a4);
}

void sub_100147DB0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_100613FB4(a1, a2, a3, a4);
}

uint64_t destroy for NextHourPrecipitationLeadingValueRule(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t type metadata accessor for AnyStateReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyStateReader);
}

uint64_t sub_100147E08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for SavedLocation(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PreviewLocation(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ActivityAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEA418;
  if (!qword_100BEA418)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityAction);
  return result;
}

uint64_t sub_100147EC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CurrentWeather(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1009DB090;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100147F30(uint64_t a1)
{
  return sub_100147FB8(a1);
}

uint64_t sub_100147F50(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for () + 64;
  v2[1] = "\b";
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 96);
}

uint64_t type metadata accessor for StoreObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StoreObserver);
}

uint64_t sub_100147FB8(uint64_t a1)
{
  uint64_t v1;

  return swift_unknownObjectWeakAssign(v1 + 32, a1);
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC7Weather13SceneDelegate);
}

id sub_100148004()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___sessionObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___shortcutItemHandlerManager] = 0;
  v2 = &v0[OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___continueUserActivityHandlerManager];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  v3 = &v0[OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___stateManager];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___windowFrameMonitor] = 0;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

void sub_100148088(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t v3;
  _BYTE v4[24];

  if (qword_100BC1F00 != -1)
    swift_once(&qword_100BC1F00, sub_10014C654);
  swift_beginAccess(&xmmword_100CAE588, v4, 0, 0);
  sub_100037768((uint64_t)&xmmword_100CAE588, (uint64_t)&v2, &qword_100BCED50);
  if (v3)
    sub_10003C800(&v2, a1);
  else
    __break(1u);
}

uint64_t sub_10014819C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD *, uint64_t)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];

  v10 = v5 + *a1;
  swift_beginAccess(v10, v20, 0, 0);
  sub_100037768(v10, (uint64_t)v17, a2);
  if (v18)
    return a3(v17, a5);
  sub_100021AA4((uint64_t)v17, a2);
  sub_100148088((uint64_t)v17);
  v12 = v18;
  v13 = v19;
  sub_1000DB418(v17, v18);
  v14 = sub_1000BA294(a4);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (v16)
  {
    a3(v15, a5);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
    sub_10003B59C(a5, (uint64_t)v17);
    swift_beginAccess(v10, v15, 33, 0);
    sub_1000A3908((uint64_t)v17, v10, a2);
    return swift_endAccess(v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100148320(uint64_t a1, const char *a2)
{
  NSObject *v2;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (qword_100BC2420 != -1)
    swift_once(&qword_100BC2420, sub_10015967C);
  v4 = sub_100098720();
  sub_1000AECD4(v4, (uint64_t)qword_100CAF058);
  sub_1000999A8();
  v5 = sub_10009C0A4();
  if (os_log_type_enabled(v2, v5))
  {
    v6 = (uint8_t *)sub_10009D340();
    *(_WORD *)v6 = 0;
    sub_1000D00B0((void *)&_mh_execute_header, v2, v5, a2, v6);
    sub_1000986F0((uint64_t)v6);
  }

  sub_1000DB894(&OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___stateManager, &qword_100BD44D0, (uint64_t (*)(_QWORD *, uint64_t))sub_10003C800, (uint64_t *)&unk_100BD44D8, v7);
  sub_1000DB418(v9, v9[3]);
  v8 = sub_1000DCD00();
  sub_1000C36A0(v8);
  sub_1000C2728();
}

uint64_t sub_100148464()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_10014819C(&OBJC_IVAR____TtC7Weather13SceneDelegate____lazy_storage___stateManager, &qword_100BD44D0, (uint64_t (*)(_QWORD *, uint64_t))sub_10003C800, (uint64_t *)&unk_100BD44D8, (uint64_t)v2);
  sub_1000DB418(v2, v2[3]);
  v0 = sub_1000DCD00();
  return sub_1000C36A0(v0);
}

uint64_t sub_1001484D0(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v4 = *(_QWORD *)(v2 + *a1);
  if (v4)
  {
    v5 = v4;
LABEL_5:
    swift_retain();
    return v5;
  }
  v7 = v2;
  sub_100148088((uint64_t)v13);
  v8 = v14;
  v9 = v15;
  sub_1000DB418(v13, v14);
  v10 = a2(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (result)
  {
    v5 = result;
    sub_1000C36A0(result);
    v12 = *(_QWORD *)(v7 + v3);
    *(_QWORD *)(v7 + v3) = v5;
    swift_retain();
    swift_release(v12);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ResettingBool.init(wrappedValue:interval:)(char a1, double a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = a1;
  *(double *)(v2 + 16) = a2;
  return v2;
}

uint64_t sub_10014859C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100140D38(a1, a2, a3, (uint64_t)&unk_100ABB5B8);
}

uint64_t sub_1001485A8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = a1[2];
  v3 = (void *)a1[3];
  v4 = a1[4];
  v5 = (void *)a1[5];
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  result = type metadata accessor for Page(319, (uint64_t)&v11);
  if (v7 <= 0x3F)
  {
    v11 = *(_QWORD *)(result - 8) + 64;
    v12 = &unk_1009B82A8;
    v10[0] = v2;
    v10[1] = v3;
    v10[2] = v4;
    v10[3] = v5;
    v8 = type metadata accessor for TransitionContext(255, (uint64_t)v10);
    result = type metadata accessor for Optional(319, v8);
    if (v9 <= 0x3F)
    {
      v13 = *(_QWORD *)(result - 8) + 64;
      v14 = &unk_1009B82A8;
      v15 = &unk_1009B8380;
      swift_initStructMetadata(a1, 0, 5, &v11, a1 + 6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10014867C()
{
  return sub_100141088((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100055F54);
}

void *sub_100148688(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10006BD5C((uint64_t)a1, type metadata accessor for NewsDataModel);
    if (swift_getEnumCaseMultiPayload(a2))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for News(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100148728(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for News(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

double sub_100148798()
{
  uint64_t v0;
  _QWORD *v1;
  double result;

  v0 = type metadata accessor for NewsDataModel(0);
  sub_10004037C(v0, qword_100CAF668);
  v1 = (_QWORD *)sub_1000AECD4(v0, (uint64_t)qword_100CAF668);
  *v1 = _swiftEmptyArrayStorage;
  *(_QWORD *)&result = swift_storeEnumTagMultiPayload(v1, v0, 1).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for NetworkAction()
{
  return &type metadata for NetworkAction;
}

unint64_t sub_1001487FC()
{
  unint64_t result;

  result = qword_100BD5A30;
  if (!qword_100BD5A30)
  {
    result = swift_getWitnessTable(&unk_100993370, &type metadata for NetworkAction);
    atomic_store(result, (unint64_t *)&qword_100BD5A30);
  }
  return result;
}

uint64_t sub_100148838@<X0>(__int16 a1@<W0>, _QWORD *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t inited;
  _QWORD *v15;
  _BYTE v17[80];
  _BYTE v18[80];

  v4 = a1;
  v5 = sub_1000BA294(&qword_100BD5A38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000BA294(&qword_100BC31F0);
  if ((a1 & 0x100) != 0)
  {
    inited = swift_initStackObject(v9, v18);
    *(_OWORD *)(inited + 16) = xmmword_10097CA50;
    *(_QWORD *)(inited + 32) = 0x64656C62616E65;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_BYTE *)(inited + 48) = v4 & 1;
    v11 = Dictionary.init(dictionaryLiteral:)(inited);
    v13 = 0x80000001009F9CA0;
    v12 = 0xD000000000000013;
  }
  else
  {
    v10 = swift_initStackObject(v9, v17);
    *(_OWORD *)(v10 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v10 + 32) = 28532;
    *(_QWORD *)(v10 + 40) = 0xE200000000000000;
    *(_QWORD *)(v10 + 72) = &type metadata for NetworkState;
    *(_BYTE *)(v10 + 48) = v4;
    v11 = Dictionary.init(dictionaryLiteral:)(v10);
    v12 = 0x6843737574617473;
    v13 = 0xED00006465676E61;
  }
  ShortDescription.init(name:_:)(v12, v13, v11, &type metadata for NetworkAction);
  a2[3] = v5;
  a2[4] = sub_100159C0C();
  v15 = sub_10005F164(a2);
  return (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(v6 + 32))(v15, v8, v5);
}

uint64_t sub_1001489F8@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_100148838(*v1 | (unsigned __int16)(v1[1] << 8), a1);
}

uint64_t sub_100148A14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for WeatherData(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100148A7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1000BE878();
  sub_1000861D0();
  return sub_100148ACC(a1, v1 + v4, *(_QWORD *)(v1 + ((v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100148ACC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = type metadata accessor for LocationModel(0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  return dispatch thunk of ContextType.use<A>(_:for:name:)(a2, v8, a3, a4, v8, v9, v10);
}

void sub_100148B50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = &unk_1009CCC00;
  v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100148C20(319);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = (char *)&value witness table for Builtin.Int8 + 64;
    v8[4] = &unk_1009CCC18;
    v4 = type metadata accessor for WeatherMapPresentationState(319);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for DisplayMetrics(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_100148C20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100C092E8)
  {
    v2 = type metadata accessor for MainViewModel.ModalModule(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100C092E8);
  }
}

uint64_t sub_100148C74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  result = type metadata accessor for MainViewModel.ModalModule.LocationDetailModule(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100148CE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = " ";
  v4[1] = " ";
  v4[2] = " ";
  v4[3] = " ";
  v4[4] = " ";
  v4[5] = " ";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = " ";
    swift_initEnumMetadataMultiPayload(a1, 256, 8, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for MainViewModel.ModalModule.LocationDetailModule(uint64_t a1)
{
  return sub_100098190(a1, qword_100C093A0, (uint64_t)&nominal type descriptor for MainViewModel.ModalModule.LocationDetailModule);
}

void sub_100148D74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[20];

  v7[0] = &unk_1009C9778;
  v7[1] = &unk_1009C9778;
  v7[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[3] = v4;
    v7[4] = &unk_1009C9778;
    v7[5] = &unk_1009C9790;
    v7[6] = &unk_1009C97A8;
    v7[7] = &unk_1009C97C0;
    v7[8] = &unk_1009C9790;
    v7[9] = &unk_1009C9778;
    v7[10] = v4;
    v7[11] = &unk_1009C9778;
    v7[12] = &unk_1009C97D8;
    sub_10015A3EC(319);
    if (v6 <= 0x3F)
    {
      v7[13] = *(_QWORD *)(v5 - 8) + 64;
      v7[14] = (char *)&value witness table for Builtin.Int64 + 64;
      v7[15] = &unk_1009C97F0;
      v7[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[17] = v4;
      v7[18] = &unk_1009C9808;
      v7[19] = &unk_1009C9778;
      swift_initStructMetadata(a1, 256, 20, v7, a1 + 16);
    }
  }
}

void sub_100148E78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = (char *)&value witness table for () + 64;
  sub_1001345CC(319, (unint64_t *)&unk_100BE0648, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001345CC(319, (unint64_t *)&qword_100BD7578, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for LocaleMonitor(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE0638;
  if (!qword_100BE0638)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocaleMonitor);
  return result;
}

Swift::Void __swiftcall LocaleMonitor.applicationWillEnterForeground()()
{
  sub_1000252F4();
  sub_100148F7C();
}

void sub_100148F7C()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "addObserver:selector:name:object:", v0, "postLocaleIfChanged", NSCurrentLocaleDidChangeNotification, 0);

}

uint64_t sub_100148FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for Locale(0);
  sub_1000BAC70(v5);
  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  sub_1000BAC70(v6);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

_QWORD *sub_100149048()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  return v0;
}

uint64_t sub_100149074()
{
  uint64_t v0;

  sub_100149048();
  return swift_deallocClassInstance(v0, 90, 7);
}

void sub_100149094(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = a2 & 1;
  *(_BYTE *)(v13 + 25) = a3;
  *(_BYTE *)(v13 + 26) = a4;
  *(_QWORD *)(v13 + 32) = a5;
  *(_QWORD *)(v13 + 40) = a6;
  *(_QWORD *)(v13 + 48) = a7;
  *(_QWORD *)(v13 + 56) = a8;
  *(_BYTE *)(v13 + 64) = a9;
  *(_QWORD *)(v13 + 72) = a10;
  *(_QWORD *)(v13 + 80) = a11;
  swift_bridgeObjectRelease(0);
  *(_BYTE *)(v13 + 88) = a12 & 1;
  *(_BYTE *)(v13 + 89) = a13;
  sub_100079F70();
}

uint64_t sub_1001490F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10060B500);
}

void sub_100149104(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[18];

  v8[0] = "\t";
  v8[1] = &unk_1009B78B8;
  v8[2] = &unk_1009B78D0;
  v8[3] = &unk_1009B78E8;
  sub_1001345CC(319, (unint64_t *)&unk_100BF72D0, type metadata accessor for ListLocationViewModel);
  if (v3 <= 0x3F)
  {
    v8[4] = *(_QWORD *)(v2 - 8) + 64;
    v8[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[6] = &unk_1009B7900;
    v8[7] = &unk_1009B7918;
    v8[8] = &unk_1009B78B8;
    v4 = type metadata accessor for LearnMoreAttributorViewModel(319);
    if (v5 <= 0x3F)
    {
      v8[9] = *(_QWORD *)(v4 - 8) + 64;
      v8[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[11] = &unk_1009B78B8;
      v8[12] = &unk_1009B7918;
      v8[13] = &unk_1009B7930;
      v8[14] = &unk_1009B78B8;
      sub_1001345CC(319, (unint64_t *)&qword_100BC4B10, type metadata accessor for ContentStatusBanner);
      if (v7 <= 0x3F)
      {
        v8[15] = *(_QWORD *)(v6 - 8) + 64;
        v8[16] = &unk_1009B78B8;
        v8[17] = &unk_1009B7948;
        swift_initStructMetadata(a1, 256, 18, v8, a1 + 16);
      }
    }
  }
}

uint64_t type metadata accessor for ListViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF72C0;
  if (!qword_100BF72C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListViewModel);
  return result;
}

uint64_t type metadata accessor for DebugAssembly()
{
  return objc_opt_self(_TtC7Weather13DebugAssembly);
}

uint64_t sub_10014928C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6[2];

  sub_10003B59C(a1, (uint64_t)v6);
  v3 = type metadata accessor for DebugPresenter();
  v4 = swift_allocObject(v3, 56, 7);
  result = sub_10003C800(v6, v4 + 16);
  a2[3] = v3;
  a2[4] = (uint64_t)&off_100B79290;
  *a2 = v4;
  return result;
}

void sub_1001492F8()
{
  sub_100021B48();
}

uint64_t type metadata accessor for AnyMiddleware(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyMiddleware);
}

uint64_t type metadata accessor for AnyDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyDispatcher);
}

unint64_t sub_100149330()
{
  unint64_t result;

  result = qword_100BDE4E0;
  if (!qword_100BDE4E0)
  {
    result = swift_getWitnessTable(&unk_10099B91C, &unk_100B71678);
    atomic_store(result, (unint64_t *)&qword_100BDE4E0);
  }
  return result;
}

unint64_t sub_10014936C()
{
  unint64_t result;

  result = qword_100BDE550;
  if (!qword_100BDE550)
  {
    result = swift_getWitnessTable(&unk_10099B954, &unk_100B71678);
    atomic_store(result, (unint64_t *)&qword_100BDE550);
  }
  return result;
}

void sub_1001493A8(uint64_t a1)
{
  sub_1000BC0F8(a1, (uint64_t)&unk_100CAE750, (uint64_t)&unk_100B71678);
}

void sub_1001493BC(uint64_t a1)
{
  sub_1000BAB08(a1, (uint64_t)&unk_100CAE768, (uint64_t)&unk_100B71678);
}

ValueMetadata *type metadata accessor for TipViewStyle()
{
  return &type metadata for TipViewStyle;
}

ValueMetadata *type metadata accessor for TipViewModel()
{
  return &type metadata for TipViewModel;
}

unint64_t sub_1001493F8()
{
  unint64_t result;

  result = qword_100BD31F0;
  if (!qword_100BD31F0)
  {
    result = swift_getWitnessTable(&unk_100990D98, &type metadata for SceneMetrics);
    atomic_store(result, (unint64_t *)&qword_100BD31F0);
  }
  return result;
}

double sub_100149434()
{
  double result;

  if (qword_100BC23B8 != -1)
    swift_once(&qword_100BC23B8, sub_1001593B8);
  xmmword_100CAE5F0 = 0uLL;
  result = *(double *)&xmmword_100CAEF78;
  xmmword_100CAE600 = xmmword_100CAEF78;
  xmmword_100CAE610 = *(_OWORD *)&qword_100CAEF88;
  return result;
}

ValueMetadata *type metadata accessor for NetworkState()
{
  return &type metadata for NetworkState;
}

unint64_t sub_100149498()
{
  unint64_t result;

  result = qword_100BF48F8;
  if (!qword_100BF48F8)
  {
    result = swift_getWitnessTable(&unk_1009B5194, &type metadata for NetworkState);
    atomic_store(result, (unint64_t *)&qword_100BF48F8);
  }
  return result;
}

uint64_t sub_1001494D4@<X0>(unsigned __int8 a1@<W0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t inited;
  _QWORD *v15;
  _BYTE v17[80];

  v4 = a1;
  v5 = sub_1000BA294(&qword_100BD2A78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  if (v4 == 4)
  {
    v10 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    v11 = 0x656E696C66666FLL;
    v12 = 0xE700000000000000;
  }
  else
  {
    v13 = sub_1000BA294(&qword_100BC31F0);
    inited = swift_initStackObject(v13, v17);
    *(_OWORD *)(inited + 16) = xmmword_10097CA50;
    *(_QWORD *)(inited + 32) = 0x6361667265746E69;
    *(_QWORD *)(inited + 40) = 0xE900000000000065;
    *(_QWORD *)(inited + 72) = &type metadata for NetworkInterface;
    *(_BYTE *)(inited + 48) = a1;
    v10 = Dictionary.init(dictionaryLiteral:)(inited);
    v11 = 0x6C62616863616572;
    v12 = 0xE900000000000065;
  }
  ShortDescription.init(name:_:)(v11, v12, v10, &type metadata for NetworkState);
  a2[3] = v5;
  a2[4] = sub_100159C50();
  v15 = sub_10005F164(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 32))(v15, v9, v5);
}

uint64_t sub_100149658@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_1001494D4(*v1, a1);
}

uint64_t sub_100149664(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WeatherData(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MainAssembly()
{
  return objc_opt_self(_TtC7Weather12MainAssembly);
}

void sub_100149730(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a2[3];
  v4 = a2[4];
  sub_1000DB418(a2, v3);
  v5 = type metadata accessor for WeatherDataDebounceMiddleware(0);
  v6 = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (!v6)
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = v6;
  sub_1001454BC((uint64_t)sub_1000A0974, v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a2[4];
  sub_1000DB418(a2, v8);
  v10 = type metadata accessor for ShortcutItemMiddleware();
  v11 = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = v11;
  sub_1001454BC((uint64_t)sub_1000A0AE0, v11);
  swift_release(v12);
  v13 = a2[3];
  v14 = a2[4];
  sub_1000DB418(a2, v13);
  v15 = type metadata accessor for UnitManagerMiddleware();
  v16 = dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (!v16)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17 = v16;
  sub_1001454BC((uint64_t)sub_1000A115C, v16);
  swift_release(v17);
  v18 = a2[3];
  v19 = a2[4];
  sub_1000DB418(a2, v18);
  dispatch thunk of ResolverType.resolve<A>(_:name:)(&v25, &type metadata for Bool, 0xD000000000000012, 0x80000001009F5CF0, &type metadata for Bool, v18, v19);
  if (v25 != 2 && (v25 & 1) != 0)
  {
    v20 = a2[3];
    v21 = a2[4];
    sub_1000DB418(a2, v20);
    v22 = type metadata accessor for DemoPresetMiddleware();
    v23 = dispatch thunk of ResolverType.resolve<A>(_:)(v22, v22, v20, v21);
    if (v23)
    {
      v24 = v23;
      sub_1001454BC((uint64_t)sub_100614A40, v23);
      swift_release(v24);
      return;
    }
LABEL_12:
    __break(1u);
  }
}

void sub_100149910(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = a2[3];
  v6 = a2[4];
  sub_1000DB418(a2, v5);
  v7 = type metadata accessor for ReverseGeocodingStoreObserver();
  v8 = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (!v8)
  {
    __break(1u);
    goto LABEL_6;
  }
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 136);
  v11 = *(_QWORD *)(v8 + 144);
  *(_QWORD *)(v8 + 136) = v4;
  *(_QWORD *)(v8 + 144) = v3;
  swift_retain();
  sub_1000BF8D0(v10, v11);
  v12 = a2[3];
  v13 = a2[4];
  sub_1000DB418(a2, v12);
  v14 = type metadata accessor for NotificationsOptInStoreObserver();
  v15 = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v16 = v15;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 16) = v4;
  *(_QWORD *)(v15 + 24) = v3;
  swift_retain();
  sub_1000BF8D0(v17, v18);
  v19 = a2[3];
  v20 = a2[4];
  sub_1000DB418(a2, v19);
  v21 = type metadata accessor for SavedLocationsStoreObserver();
  v22 = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v21, v19, v20);
  if (v22)
  {
    v23 = v22;
    swift_release(v9);
    swift_release(v16);
    v24 = *(_QWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 16) = v4;
    *(_QWORD *)(v23 + 24) = v3;
    swift_retain();
    sub_1000BF8D0(v24, v25);
    swift_release(v23);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_100149A58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BF74D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (v16)
  {
    sub_1000DB418(v15, v16);
    sub_100131354();
    v7 = v6;
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BF7530);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v14)
    {
      v11 = swift_allocObject(&unk_100B84800, 24, 7);
      *(_QWORD *)(v11 + 16) = v14;
      v12 = sub_1000BA294(&qword_100BE1380);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      v13 = sub_10000FAAC(v7, (uint64_t)sub_1000A07CC, v11);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v15);
      return (uint64_t)v13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100149B7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = type metadata accessor for WeatherDataUpdater();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    a2[3] = (uint64_t)&type metadata for LoadStatisticsOnDemandStoreObserver;
    a2[4] = (uint64_t)&off_100B6A910;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double *sub_100149BE8@<X0>(_QWORD *a1@<X0>, double **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43B0);
  result = (double *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v14)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    v10 = sub_1000BA294(&qword_100BC43F0);
    result = (double *)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v12)
    {
      v11 = type metadata accessor for RemotelyConfiguredSlowLocationLoadingMonitor();
      swift_allocObject(v11, 56, 7);
      result = sub_10001705C(v14, v15, v16, v17, v12, v13);
      a2[3] = (double *)v11;
      a2[4] = (double *)&off_100B93FE0;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100149D04()
{
  double result;

  if (qword_100BC25E8 != -1)
    swift_once(&qword_100BC25E8, sub_100129388);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

void sub_100149D44(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for AutomationInfoSetting;
  *(_QWORD *)(a1 + 32) = &off_100B88E50;
  *(_BYTE *)a1 = 0;
}

_QWORD *sub_100149D60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294((uint64_t *)&unk_100BCEF20);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = result;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BF7540);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:name:)(v9, 0xD000000000000010, 0x8000000100A0E120, v9, v7, v8);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = result;
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v15, &type metadata for Bool, 0xD000000000000014, 0x8000000100A0E160, &type metadata for Bool, v11, v12);
  if (v15 != 2)
  {
    v13 = v15 & 1;
    v14 = sub_1000BA294(&qword_100BF74E8);
    result = (_QWORD *)swift_allocObject(v14, 33, 7);
    result[2] = v6;
    result[3] = v10;
    *((_BYTE *)result + 32) = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100149EA8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000120E8(a1, (uint64_t (*)(_QWORD))type metadata accessor for EmptySidebarWidthStorage, (uint64_t)&off_100B9B2A0, a2);
}

uint64_t sub_100149EBC()
{
  uint64_t v0;

  v0 = sub_1000BA294((uint64_t *)&unk_100BCEF20);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_100142500(0, 0, 0, 0);
}

uint64_t sub_100149F04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BE1380);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = sub_1000BA294(&qword_100BF74E0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = _swiftEmptyArrayStorage;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100149F80(_QWORD *a1@<X0>, void (**a2)(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BE1380);
  v6 = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v6)
  {
    *a2 = sub_100081F90;
    a2[1] = (void (*)(uint64_t *@<X8>))v6;
    a2[2] = (void (*)(uint64_t *@<X8>))sub_100147DA8;
    a2[3] = (void (*)(uint64_t *@<X8>))v6;
    swift_retain();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100149FF0@<X0>(_QWORD *a1@<X0>, void (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BF74E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    *a2 = sub_1000A1164;
    a2[1] = (void (*)(uint64_t))result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014A054@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF74E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = result;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BF76E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v44)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BD1408);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v42)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_1000BA294(&qword_100BE00E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!v40)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18 = a1[3];
  v19 = a1[4];
  sub_1000DB418(a1, v18);
  v20 = sub_1000BA294(&qword_100BEFD78);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v20, v18, v19);
  if (!v38)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = a1[3];
  v22 = a1[4];
  sub_1000DB418(a1, v21);
  v23 = sub_1000BA294(&qword_100BDC5A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v23, v23, v21, v22);
  if (!v36)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v24 = a1[3];
  v25 = a1[4];
  sub_1000DB418(a1, v24);
  v26 = sub_1000BA294(&qword_100BF76E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v26, v26, v24, v25);
  if (v34)
  {
    v27 = sub_100068EB4((uint64_t)v43, v44);
    v28 = __chkstk_darwin(v27);
    v30 = (uint64_t *)((char *)&v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v31 + 16))(v30, v28);
    v32 = sub_100613E7C(v8, *v30, &v41, &v39, &v37, &v35, &v33);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v43);
    result = type metadata accessor for MainInitialStateProvider();
    a2[3] = result;
    a2[4] = &off_100B9D330;
    *a2 = v32;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10014A2EC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v45[3];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF7520);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v52)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BC4770);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v11 = result;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BE0090);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v50)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = type metadata accessor for SessionEventsAndDataCoordinator(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v18 = result;
  v19 = a1[3];
  v20 = a1[4];
  sub_1000DB418(a1, v19);
  v21 = type metadata accessor for SessionScenePhaseObserver();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v21, v19, v20);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v22 = result;
  v23 = a1[3];
  v24 = a1[4];
  sub_1000DB418(a1, v23);
  v25 = sub_1000BA294(&qword_100BED540);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v25, v25, v23, v24);
  if (!v48)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v26 = a1[3];
  v27 = a1[4];
  sub_1000DB418(a1, v26);
  v28 = sub_1000BA294((uint64_t *)&unk_100C0A200);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v28, v28, v26, v27);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v29 = result;
  v30 = a1[3];
  v31 = a1[4];
  sub_1000DB418(a1, v30);
  v32 = sub_1000BA294(&qword_100BF74F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v32, v32, v30, v31);
  if (v46)
  {
    v33 = sub_100068EB4((uint64_t)v51, v52);
    v34 = __chkstk_darwin(v33);
    v36 = (_QWORD *)((char *)&v45[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v37 + 16))(v36, v34);
    v38 = sub_100068EB4((uint64_t)v45, v46);
    v39 = __chkstk_darwin(v38);
    v41 = (uint64_t **)((char *)&v45[-1] - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v42 + 16))(v41, v39);
    v43 = sub_100613C4C(*v36, v11, &v49, v18, v22, &v47, v29, *v41);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v45);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v51);
    result = type metadata accessor for MainModule();
    a2[3] = result;
    a2[4] = &off_100B8FC88;
    *a2 = v43;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_10014A618(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43B0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v9)
  {
    v6 = type metadata accessor for CellularRadioAccessTechnologyProvider();
    v7 = swift_allocObject(v6, 48, 7);
    *(_QWORD *)(v7 + 16) = v9;
    *(_OWORD *)(v7 + 24) = v10;
    *(_QWORD *)(v7 + 40) = v11;
    a2[3] = v6;
    sub_1000A1C54(&qword_100BF7680, 255, (uint64_t (*)(uint64_t))type metadata accessor for CellularRadioAccessTechnologyProvider);
    a2[4] = v8;
    *a2 = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10014A6E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16[24];
  uint64_t v17;

  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(a2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v17)
  {
    v15 = a3(0);
    sub_1000C17AC(v15);
    result = a4(v16);
    a6[3] = (uint64_t)a3;
    a6[4] = a5;
    *a6 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014A790@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10014A6E8(a1, &qword_100BD1408, (uint64_t (*)(_QWORD))&type metadata accessor for LocationAccessDataProvider, (uint64_t (*)(char *))&LocationAccessDataProvider.init(locationManager:), (uint64_t)&protocol witness table for LocationAccessDataProvider, a2);
}

void sub_10014A7B4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10060D380(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ProductRequirementsFactory, (uint64_t (*)(void))&ProductRequirementsFactory.init(), (uint64_t)&protocol witness table for ProductRequirementsFactory, a2);
}

void sub_10014A7D0()
{
  sub_1000581A8();
}

uint64_t sub_10014A7F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABA768, 1);
}

uint64_t sub_10014A808@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v4 = *(_OWORD *)(v1 + 24);
  *a1 = v4;
  v2 = (uint64_t)a1 + *(int *)(sub_1000BA294(&qword_100BF4768) + 36);
  swift_unknownObjectRetain(v4);
  return sub_100079A58((_QWORD *)v1, v2);
}

uint64_t type metadata accessor for ListAssembly()
{
  return objc_opt_self(_TtC7Weather12ListAssembly);
}

double sub_10014A884()
{
  return sub_1000313C8();
}

uint64_t sub_10014A88C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BDC5A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v44)
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_1000BA294(&qword_100BDC5B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!v42)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BF0320);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v40)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v38)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_1000BA294(&qword_100BF0328);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  if (!v36)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v18 = a1[3];
  v19 = a1[4];
  sub_1000DB418(a1, v18);
  v20 = sub_1000BA294(&qword_100BED528);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v20, v18, v19);
  if (!v34)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v21 = a1[3];
  v22 = a1[4];
  sub_1000DB418(a1, v21);
  v23 = sub_1000BA294(&qword_100BED530);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v23, v23, v21, v22);
  if (v32)
  {
    v24 = sub_100068EB4((uint64_t)v41, v42);
    v25 = __chkstk_darwin(v24);
    v27 = (uint64_t *)((char *)&v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v28 + 16))(v27, v25);
    v29 = sub_10055DB98(&v43, *v27, &v39, &v37, &v35, &v33, 0, &v31);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v41);
    return v29;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10014AB0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for WeatherEventDescriptionStringBuilder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = WeatherEventDescriptionStringBuilder.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for WeatherEventDescriptionStringBuilder;
  *a1 = result;
  return result;
}

uint64_t sub_10014AB60@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v31[3];
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF0330);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v36)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BED538);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v34)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BD13B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v32)
  {
    v14 = sub_100068EB4((uint64_t)v35, v36);
    v15 = __chkstk_darwin(v14);
    v17 = (_QWORD *)((char *)&v31[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v18 + 16))(v17, v15);
    v19 = sub_100068EB4((uint64_t)v33, v34);
    v20 = __chkstk_darwin(v19);
    v22 = (_QWORD *)((char *)&v31[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v23 + 16))(v22, v20);
    v24 = sub_100068EB4((uint64_t)v31, v32);
    v25 = __chkstk_darwin(v24);
    v27 = (uint64_t **)((char *)&v31[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t **, __n128))(v28 + 16))(v27, v25);
    v29 = sub_100138C5C(*v17, *v22, *v27);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
    result = type metadata accessor for ListViewStateReducer();
    a2[3] = result;
    a2[4] = &off_100B96A38;
    *a2 = v29;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10014ADA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = type metadata accessor for ListViewModelFactory(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (result)
  {
    a3[3] = v7;
    a3[4] = a2;
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014AE14@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10014ADA8(a1, (uint64_t)&off_100B75ED8, a2);
}

double sub_10014AE20(uint64_t a1, __n128 a2)
{
  return sub_10001F1E8(a1, a2);
}

uint64_t assignWithCopy for LocationHeaderViewGradientBackground(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000B15F8(v5, v6);
  return a1;
}

void sub_10014AE84(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10014AEA0(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t sub_10014AE90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB88E4, 1);
}

void sub_10014AEA0(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2 & 1;
  sub_10008D47C(a1, a2 & 1);
  sub_10006A9A8();
  v7 = v6;
  v8 = sub_1000B15F8(a1, v5);
  static Alignment.bottom.getter(v8);
  v9 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(0, 1, 1.0 / v7, 0);
  static Color.white.getter(v9);
  v10 = Color.opacity(_:)(0.25);
  sub_10009880C();
  KeyPath = swift_getKeyPath(&unk_1009AC370);
  *(_QWORD *)a3 = v12;
  *(_BYTE *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 40) = v17;
  *(_QWORD *)(a3 + 48) = KeyPath;
  *(_QWORD *)(a3 + 56) = v10;
  sub_100542EB4();
}

uint64_t sub_10014AF98(void *__src, const void *a2)
{
  char v3;
  _BYTE v5[72];
  _BYTE __dst[72];

  memcpy(v5, __src, sizeof(v5));
  memcpy(__dst, a2, sizeof(__dst));
  sub_100076730((uint64_t)v5, (uint64_t)__dst);
  return v3 & 1;
}

unint64_t sub_10014AFEC()
{
  unint64_t result;

  result = qword_100BC5B70;
  if (!qword_100BC5B70)
  {
    result = swift_getWitnessTable(&unk_1009CEBC8, &unk_100B93750);
    atomic_store(result, (unint64_t *)&qword_100BC5B70);
  }
  return result;
}

void sub_10014B028()
{
  qword_100CAF438 = 0x4069000000000000;
}

void type metadata accessor for GridGeometry.SizingBehavior()
{
  sub_100098884();
}

void type metadata accessor for GridGeometry.SizingBehavior.Breakpoints()
{
  sub_100098884();
}

void type metadata accessor for GridGeometry.MapPlacement()
{
  sub_100098884();
}

void type metadata accessor for GridGeometry.ColumnCount()
{
  sub_100098884();
}

uint64_t type metadata accessor for DemoAssembly()
{
  return objc_opt_self(_TtC7Weather12DemoAssembly);
}

uint64_t sub_10014B08C@<X0>(_QWORD *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[5];
  _QWORD v9[3];
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BF76E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v10)
  {
    sub_1000DB418(v9, v10);
    sub_10083D478((uint64_t)v8);
    v7 = v8[3] != 0;
    sub_1007EE518((uint64_t)v8);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v9);
    *a2 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014B128@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DemoPresetProvider();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B964F8;
  *a1 = result;
  return result;
}

uint64_t sub_10014B16C()
{
  return sub_100013D48();
}

uint64_t type metadata accessor for DebugReducer()
{
  return objc_opt_self(_TtC7Weather12DebugReducer);
}

uint64_t type metadata accessor for CrashTracker()
{
  return objc_opt_self(_TtC7Weather12CrashTracker);
}

uint64_t sub_10014B1C0()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CrashTracker();
  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  qword_100CAE578 = result;
  return result;
}

ValueMetadata *type metadata accessor for AveragesKind()
{
  return &type metadata for AveragesKind;
}

uint64_t sub_10014B1FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for Article(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for NewsArticle(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ArticleModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE9058;
  if (!qword_100BE9058)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ArticleModel);
  return result;
}

uint64_t sub_10014B2B4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BE878();
  v0 = sub_10009DACC();
  return sub_10014B2D8(v0, v1);
}

uint64_t sub_10014B2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  _BYTE v14[32];

  v4 = sub_1000BA294(&qword_100C0B8D0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for LocationModel(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000CE46C(a1, (uint64_t)v14);
  if (swift_dynamicCast(v6, v14, (char *)&type metadata for Any + 8, v7, 6))
  {
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v7);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_10007A100((uint64_t)&qword_100BC9F38);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)(a2, v10, v7, v11);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 1, 1, v7);
    sub_100021A14((uint64_t)v6, &qword_100C0B8D0);
    v12 = 0;
  }
  return v12 & 1;
}

_QWORD *initializeWithCopy for AnyEquatable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[3];
  a1[3] = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain(v5);
  return a1;
}

_QWORD *sub_10014B490(_QWORD *a1)
{
  destroy for AnyEquatable(a1);
  return a1;
}

_QWORD *sub_10014B4C4(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for AnyEquatable(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for AnyEquatable()
{
  return &type metadata for AnyEquatable;
}

uint64_t sub_10014B510(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[0] = &unk_100989A28;
  v6[1] = &unk_100989A40;
  v6[2] = &unk_100989A58;
  v6[3] = &unk_100989A28;
  v6[4] = &unk_100989A40;
  result = type metadata accessor for SkyBackgroundGradient(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      v8 = v7;
      v9 = v7;
      result = type metadata accessor for Elevation(319);
      if (v5 <= 0x3F)
      {
        v10 = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for TimeReducer()
{
  return objc_opt_self(_TtC7Weather11TimeReducer);
}

uint64_t type metadata accessor for TimeMonitor()
{
  return objc_opt_self(_TtC7Weather11TimeMonitor);
}

double sub_10014B618()
{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_100BC2458 != -1)
    swift_once(&qword_100BC2458, sub_100159808);
  v1 = sub_100098720();
  sub_1000AECD4(v1, (uint64_t)qword_100CAF100);
  sub_1000999A8();
  v2 = sub_10009C0A4();
  if (sub_1000C23F4(v2))
  {
    *(_WORD *)sub_10009D340() = 0;
    sub_1000BA6F4((void *)&_mh_execute_header, v3, v4, "applicationWillEnterForeground - will setup timer");
    sub_1000BBED0();
  }

  return sub_100016E54();
}

uint64_t sub_10014B6AC()
{
  uint64_t v0;

  return sub_1000267B0(v0);
}

uint64_t type metadata accessor for TimeManager()
{
  return objc_opt_self(_TtC7Weather11TimeManager);
}

uint64_t sub_10014B6D8(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, _BYTE *, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  _BYTE v18[24];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v8);
  v11 = &v18[-v10 - 8];
  v12 = *(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v5 + 16);
  v12(&v18[-v10 - 8], a1, v4, v9);
  sub_10009922C(v2 + 16, (uint64_t)v18, 33);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v12)(v7, v11, v4);
  v13 = sub_1000BA294(qword_100BC6810);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = Atomic.init(wrappedValue:)(v7);
  v15 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v15(v11, v4);
  *(_QWORD *)(v2 + 16) = v14;
  swift_endAccess(v18);
  v15(a1, v4);
  return v2;
}

uint64_t sub_10014B7F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = "1";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 0, 3, &v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for StateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateChange);
}

uint64_t sub_10014B87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044C4A4);
}

uint64_t sub_10014B888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10044C440);
}

uint64_t sub_10014B898()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10014B8B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB5024, 1);
}

void sub_10014B8C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double (**v34)();
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  double v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  double v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v2 = v1;
  v70 = a1;
  v3 = type metadata accessor for RowModifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v66 = v5;
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000BA294(&qword_100BE2880);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1000BA294(&qword_100BE2888);
  __chkstk_darwin(v64);
  v65 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000BA294(&qword_100BE2890);
  __chkstk_darwin(v67);
  v71 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1 + *(int *)(v3 + 20);
  v12 = *(_QWORD *)v11;
  v13 = *(_BYTE *)(v11 + 8);
  sub_10008D47C(*(_QWORD *)v11, v13);
  sub_10006A9A8();
  v15 = v14;
  sub_1000B15F8(v12, v13);
  v16 = 0.0;
  v17 = 0.0;
  if (!sub_10043DA78())
    v17 = sub_10043D924();
  if (!sub_10043DA78())
    v16 = -250.0;
  v18 = v2 + *(int *)(v3 + 24);
  v19 = *(double *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  v79 = *(_OWORD *)v18;
  v80 = v19;
  v81 = v20;
  v63 = sub_1000BA294(&qword_100BE2898);
  State.wrappedValue.getter(&v72, v63);
  v79 = v72;
  v80 = v73;
  v21 = sub_1000BA294(&qword_100BE28A0);
  sub_10007AB60((uint64_t)&unk_100BE28A8);
  v23 = v22;
  v24 = sub_1004504D8();
  View.onChange<A>(of:initial:_:)(&v79, 0, LocationSearchEntityFromStringResolver.init(), 0, v21, &type metadata for RowModifier.RowGeometry, v23, v24);
  sub_100080C0C(v2, (uint64_t)v6, type metadata accessor for RowModifier);
  v25 = *(unsigned __int8 *)(v4 + 80);
  v26 = (v25 + 56) & ~v25;
  v27 = v66;
  v28 = swift_allocObject(&unk_100B74260, v26 + v66, v25 | 7);
  *(double *)(v28 + 16) = v15;
  *(double *)(v28 + 24) = v17;
  *(double *)(v28 + 32) = v16;
  *(double *)(v28 + 40) = v15 + -15.0;
  *(double *)(v28 + 48) = v15 + -15.0 + 10.0;
  sub_10007C75C((uint64_t)v6, v28 + v26, type metadata accessor for RowModifier);
  sub_100080C0C(v2, (uint64_t)v6, type metadata accessor for RowModifier);
  v29 = (v25 + 16) & ~v25;
  v30 = swift_allocObject(&unk_100B74288, v29 + v27, v25 | 7);
  sub_10007C75C((uint64_t)v6, v30 + v29, type metadata accessor for RowModifier);
  v31 = v68;
  v32 = v65;
  v33 = v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v65, v8, v69);
  v34 = (double (**)())(v32 + *(int *)(v64 + 36));
  *v34 = sub_100450614;
  v34[1] = (double (*)())v28;
  v34[2] = (double (*)())sub_100450744;
  v34[3] = (double (*)())v30;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
  v35 = *(double *)(v18 + 16);
  v36 = *(_QWORD *)(v18 + 24);
  v79 = *(_OWORD *)v18;
  v80 = v35;
  v81 = v36;
  State.wrappedValue.getter(&v72, v63);
  v37 = v72;
  v38 = v71;
  sub_100037768(v32, v71, &qword_100BE2888);
  v39 = v38 + *(int *)(v67 + 36);
  *(double *)v39 = v16;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = v37;
  *(_WORD *)(v39 + 24) = 256;
  sub_100021A14(v32, &qword_100BE2888);
  v69 = static Alignment.center.getter(v40);
  v68 = v41;
  v42 = sub_10043DA78();
  if (v42)
  {
    v43 = static HorizontalAlignment.center.getter(v42);
    sub_10043DD94(v2, (uint64_t)&v79);
    v72 = (unint64_t)v43;
    v73 = 0.0;
    *(_QWORD *)&v74 = v79;
    *((_QWORD *)&v74 + 1) = BYTE8(v79);
    *(double *)&v75 = v80;
    *((_QWORD *)&v75 + 1) = v81;
    v76 = v82;
    v77 = v83;
    v78 = 0;
  }
  else
  {
    v72 = *(unint64_t *)&v16;
    v73 = -v16;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0;
    v78 = 1;
  }
  v44 = sub_1000BA294(&qword_100BE28B8);
  v45 = sub_1000BA294(&qword_100BE28C0);
  sub_10007AB60((uint64_t)&unk_100BE28C8);
  v47 = v46;
  sub_10007AB60((uint64_t)&unk_100BE28D0);
  _ConditionalContent<>.init(storage:)(&v72, v44, v45, v47, v48);
  v66 = *((_QWORD *)&v79 + 1);
  v67 = v79;
  v65 = *(_QWORD *)&v80;
  v49 = v82;
  v64 = v81;
  v50 = *((_QWORD *)&v82 + 1);
  v51 = v83;
  v52 = v84;
  v53 = v85;
  v54 = v86;
  v55 = v87;
  v56 = v71;
  v57 = v70;
  sub_100037768(v71, v70, &qword_100BE2890);
  v58 = v57 + *(int *)(sub_1000BA294(&qword_100BE28D8) + 36);
  v59 = v68;
  *(_QWORD *)v58 = v69;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v66;
  *(_QWORD *)(v58 + 16) = v67;
  *(_QWORD *)(v58 + 24) = v60;
  v61 = v64;
  *(_QWORD *)(v58 + 32) = v65;
  *(_QWORD *)(v58 + 40) = v61;
  *(_QWORD *)(v58 + 48) = v49;
  *(_QWORD *)(v58 + 56) = v50;
  *(_QWORD *)(v58 + 64) = v51;
  *(_QWORD *)(v58 + 72) = v52;
  *(_QWORD *)(v58 + 80) = v53;
  *(_QWORD *)(v58 + 88) = v54;
  *(_BYTE *)(v58 + 96) = v55;
  sub_100021A14(v56, &qword_100BE2890);
}

void sub_10014BF34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009B64F0;
  v4[1] = &unk_1009B64F0;
  sub_10015BC08(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for NewsChannel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF5820;
  if (!qword_100BF5820)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsChannel);
  return result;
}

void sub_10014BFE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  v10[0] = &unk_1009D11A8;
  v10[1] = &unk_1009D11A8;
  sub_10015BC08(319);
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for URL(319);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for NewsChannel(319);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t type metadata accessor for MainTracker()
{
  return objc_opt_self(_TtC7Weather11MainTracker);
}

uint64_t type metadata accessor for MainReducer()
{
  return objc_opt_self(_TtC7Weather11MainReducer);
}

_QWORD *sub_10014C0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  a20[5] = type metadata accessor for AutomationReducer();
  a20[6] = &off_100B83EE0;
  a20[2] = a1;
  a20[10] = type metadata accessor for AppLifecycleReducer();
  a20[11] = &off_100B95850;
  a20[7] = a2;
  a20[15] = type metadata accessor for AppConfigurationReducer();
  a20[16] = &off_100B85FC8;
  a20[12] = a3;
  a20[20] = type metadata accessor for EnvironmentReducer();
  a20[21] = &off_100B88B30;
  a20[17] = a4;
  a20[25] = type metadata accessor for LocationsReducer();
  a20[26] = &off_100B844E8;
  a20[22] = a5;
  a20[30] = type metadata accessor for PerformanceTestReducer();
  a20[31] = &off_100B887B0;
  a20[27] = a11;
  a20[60] = type metadata accessor for DebugReducer();
  a20[61] = &off_100B680B0;
  a20[57] = a12;
  a20[65] = type metadata accessor for NotificationsReducer();
  a20[66] = &off_100B68AE0;
  a20[62] = a13;
  a20[70] = type metadata accessor for NotificationsOptInReducer();
  a20[71] = &off_100B6D878;
  a20[67] = a14;
  a20[75] = type metadata accessor for ConditionDetailViewStateReducer();
  a20[76] = &off_100B991E0;
  a20[72] = a15;
  a20[80] = type metadata accessor for SunriseSunsetDetailViewStateReducer();
  a20[81] = &off_100B88470;
  a20[77] = a16;
  a20[85] = type metadata accessor for MoonDetailViewStateReducer();
  a20[86] = &off_100B87EA0;
  a20[82] = a17;
  a20[90] = type metadata accessor for AveragesDetailViewStateReducer();
  a20[91] = &off_100B90638;
  a20[87] = a18;
  a20[95] = type metadata accessor for UnitsConfigurationViewStateReducer();
  a20[96] = &off_100B96730;
  a20[92] = a19;
  a20[35] = type metadata accessor for TimeReducer();
  a20[36] = &off_100B83450;
  a20[32] = a6;
  a20[40] = type metadata accessor for ViewStateReducer();
  a20[41] = &off_100B75790;
  a20[37] = a7;
  a20[45] = type metadata accessor for ModalViewStateReducer();
  a20[46] = &off_100B95EB8;
  a20[42] = a8;
  a20[50] = type metadata accessor for LocationViewStateReducer();
  a20[51] = &off_100B60CA0;
  a20[47] = a9;
  a20[55] = type metadata accessor for WeatherDataReducer();
  a20[56] = &off_100B95E70;
  a20[52] = a10;
  return a20;
}

uint64_t type metadata accessor for LinkReducer()
{
  return objc_opt_self(_TtC7Weather11LinkReducer);
}

void sub_10014C3C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _QWORD v7[2];

  sub_10015B6D0(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v6, *(_QWORD *)(v2 - 8) + 64, &unk_1009BE948);
    v7[0] = v6;
    v4 = type metadata accessor for Location(319);
    if (v5 <= 0x3F)
    {
      v7[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v7);
    }
  }
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC7Weather11AppDelegate);
}

id sub_10014C49C()
{
  char *v0;
  objc_class *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v1 = (objc_class *)sub_10009D408();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___containerManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___container] = 0;
  v2 = &v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___resolver];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___observableResolver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___tracker] = 0;
  v3 = &v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___stateManager];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  v4 = &v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___windowFocusManager];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  v5 = &v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___debugPresenter];
  *((_QWORD *)v5 + 4) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___testManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate_sessionManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather11AppDelegate_appSessionManager] = 0;
  v6 = &v0[OBJC_IVAR____TtC7Weather11AppDelegate_appLaunchTime];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v8.receiver = v0;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_10014C58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v0;
  type metadata accessor for ContainerScope(0);
  sub_1000CFB28();
  __chkstk_darwin(v4);
  sub_100079FBC();
  v5 = OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___container;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___container))
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___container);
  }
  else
  {
    v7 = sub_10014CBAC();
    sub_1000B461C(enum case for ContainerScope.application(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
    v6 = ContainerManager.container(for:)(v1);
    swift_release(v7);
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    *(_QWORD *)(v3 + v5) = v6;
    sub_100094EE4();
    sub_100089020();
  }
  swift_retain();
  return v6;
}

double sub_10014C654()
{
  double result;

  qword_100CAE5A8 = 0;
  result = 0.0;
  xmmword_100CAE588 = 0u;
  unk_100CAE598 = 0u;
  return result;
}

void sub_10014C66C()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[2];

  v0 = sub_10009D408();
  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v2 = objc_msgSend(v1, "isRunningPerformanceTest");

  if ((v2 & 1) == 0)
  {
    if (qword_100BC2308 != -1)
      swift_once(&qword_100BC2308, sub_10068204C);
    v4 = qword_100CAEEC8;
    sub_10005329C(&qword_100BCED48, v3, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t)&unk_10098BD34);
    Configurable.setting<A>(_:)(v4, v0, v5);
    if (v9[1] == 1)
    {
      v6 = (void *)objc_opt_self(CLLocationManager);
      sub_100257654(0xD000000000000011, 0x80000001009F0D20, 0, 0xE000000000000000, v6);
      v9[0] = 0;
      sub_10005329C(&qword_100BCEF68, v7, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t)&unk_10098BCF4);
      Updatable.save<A>(setting:value:)(v4, v9, v0, v8);
    }
  }
}

uint64_t sub_10014C7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];

  v1 = OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___observableResolver;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___observableResolver))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___observableResolver);
  }
  else
  {
    v3 = v0;
    sub_100037674((uint64_t)v6);
    v4 = type metadata accessor for ObservableResolver(0);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v2 = ObservableResolver.init(_:)(v6);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    sub_100089020();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10014C884(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  sub_100079FE8(a1, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  sub_1000D94A4();
  sub_10009C0A4();
  sub_1000D0040(a1, a2, v7, (uint64_t)&_mh_execute_header);

  sub_10001456C(&OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___stateManager, &qword_100BCEF10, (uint64_t (*)(_QWORD *, uint64_t))sub_10003C800, &qword_100BCEF18, (uint64_t)v12);
  v8 = v13;
  v9 = v14;
  sub_1000DB418(v12, v13);
  v10 = a3(v8, v9);
  return sub_1000C36A0(v10);
}

uint64_t sub_10014C988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[5];

  sub_1000D1160(&OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___debugPresenter, &qword_100BCEEF8, (uint64_t (*)(_QWORD *, uint64_t))sub_10003C800, (uint64_t *)&unk_100BCEF00, a5);
  sub_1000DB418(v7, v7[3]);
  sub_10000C870();
  return sub_1000C36A0(v5);
}

id sub_10014C9E4()
{
  uint64_t v0;
  uint64_t ObjectType;
  id result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  ObjectType = swift_getObjectType(v0);
  result = objc_msgSend((id)objc_opt_self(TFCapabilities), "isInternalBuild");
  if ((_DWORD)result)
  {
    if (qword_100BC2300 != -1)
      swift_once(&qword_100BC2300, sub_10015ABAC);
    v4 = qword_100CAEEC0;
    sub_10005329C(&qword_100BCED48, v3, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t)&unk_10098BD34);
    result = (id)Configurable.setting<A>(_:)(v4, ObjectType, v5);
    if (LOBYTE(v12[0]) == 1)
    {
      LOBYTE(v12[0]) = 0;
      sub_10005329C(&qword_100BCEF68, v6, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t)&unk_10098BCF4);
      Updatable.save<A>(setting:value:)(v4, v12, ObjectType, v7);
      sub_100037674((uint64_t)v12);
      v8 = v13;
      v9 = v14;
      sub_1000DB418(v12, v13);
      v10 = type metadata accessor for DebugCacheRegistry(0);
      result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
      if (result)
      {
        v11 = result;
        DebugCacheRegistry.clearCache()();
        swift_release(v11);
        return (id)_s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v12);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void sub_10014CB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1000D1160(&OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___windowFocusManager, &qword_100BCEEE8, (uint64_t (*)(_QWORD *, uint64_t))sub_10003C800, &qword_100BCEEF0, a5);
  sub_1000C140C(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16, v17, v18, v19);
  v14 = sub_1000C25C8(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1000C36A0(v14);
  sub_1000BA668();
}

uint64_t sub_10014CBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___containerManager;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___containerManager))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather11AppDelegate____lazy_storage___containerManager);
  }
  else
  {
    v2 = sub_100052354();
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    sub_100089020();
  }
  swift_retain();
  return v2;
}

void sub_10014CC94(int a1, id a2)
{
  id v2;
  id v3;
  double v4;
  id v5;
  uint64_t v6;

  v2 = objc_msgSend(a2, "role");
  v3 = objc_allocWithZone((Class)UISceneConfiguration);
  v5 = sub_1001204DC(v4, 0xD000000000000015, 0x80000001009F7070, v2);
  v6 = type metadata accessor for SceneDelegate();
  objc_msgSend(v5, "setDelegateClass:", swift_getObjCClassFromMetadata(v6));
  sub_10004A298();
}

uint64_t sub_10014CD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v6);
  return Configurable.setting<A>(_:defaultValue:)(a1, a2, ObjectType, a6);
}

unint64_t sub_10014CDBC()
{
  unint64_t result;

  result = qword_100BDE4F0;
  if (!qword_100BDE4F0)
  {
    result = swift_getWitnessTable(&unk_10099BA4C, &unk_100B71638);
    atomic_store(result, (unint64_t *)&qword_100BDE4F0);
  }
  return result;
}

unint64_t sub_10014CDF8()
{
  unint64_t result;

  result = qword_100BDE540;
  if (!qword_100BDE540)
  {
    result = swift_getWitnessTable(&unk_10099BA84, &unk_100B71638);
    atomic_store(result, (unint64_t *)&qword_100BDE540);
  }
  return result;
}

void sub_10014CE34(uint64_t a1)
{
  sub_1000BC0F8(a1, (uint64_t)&unk_100CAE7B0, (uint64_t)&unk_100B71638);
}

void sub_10014CE48(uint64_t a1)
{
  sub_1000BAB08(a1, (uint64_t)&unk_100CAE7C8, (uint64_t)&unk_100B71638);
}

void sub_10014CE64(id *a1)
{
  id *v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  switch(swift_getEnumCaseMultiPayload(a1))
  {
    case 0u:
      type metadata accessor for ListViewAction(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1);
      if (EnumCaseMultiPayload != 2)
        goto LABEL_6;
      goto LABEL_13;
    case 1u:
      type metadata accessor for LocationViewerViewAction(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1);
      if (EnumCaseMultiPayload == 2)
      {
LABEL_13:
        v3 = type metadata accessor for Location.Identifier(0);
      }
      else if (EnumCaseMultiPayload == 1)
      {
LABEL_14:
        v3 = type metadata accessor for WeatherMapOverlayKind(0);
      }
      else
      {
LABEL_6:
        if (EnumCaseMultiPayload)
          return;
        v3 = type metadata accessor for LocationModel(0);
      }
LABEL_17:
      v4 = v3;
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v6 = (uint64_t)v1;
LABEL_18:
      v5(v6, v4);
      return;
    case 3u:
      type metadata accessor for SearchViewAction(0);
      switch(swift_getEnumCaseMultiPayload(v1))
      {
        case 0u:
          v3 = type metadata accessor for CodableError(0);
          goto LABEL_17;
        case 1u:
        case 2u:
          swift_bridgeObjectRelease();
          return;
        case 3u:
        case 6u:
          goto LABEL_11;
        case 4u:
          v3 = type metadata accessor for LocationOfInterest(0);
          goto LABEL_17;
        case 5u:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = (uint64_t)v1 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
          v8 = type metadata accessor for Location(0);
          if (_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
            return;
          v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
          v6 = v7;
          v4 = v8;
          break;
        default:
          return;
      }
      goto LABEL_18;
    case 4u:
      type metadata accessor for InteractiveMapViewAction(0);
      switch(swift_getEnumCaseMultiPayload(v1))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
LABEL_11:
          v3 = type metadata accessor for Location(0);
          goto LABEL_17;
        case 3u:
          goto LABEL_14;
        default:
          return;
      }
      return;
    case 5u:
      v1 = (id *)((char *)v1 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36));
      v3 = type metadata accessor for DynamicTypeSize(0);
      goto LABEL_17;
    default:
      return;
  }
}

uint64_t sub_10014D058(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  result = type metadata accessor for ListViewAction(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LocationViewerViewAction(319);
    if (v4 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(result - 8) + 64;
      v8[2] = &unk_1009D6248;
      result = type metadata accessor for SearchViewAction(319);
      if (v5 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for InteractiveMapViewAction(319);
        if (v6 <= 0x3F)
        {
          v8[4] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for DisplayMetrics(319);
          if (v7 <= 0x3F)
          {
            v8[5] = *(_QWORD *)(result - 8) + 64;
            v8[6] = &unk_1009D6260;
            swift_initEnumMetadataMultiPayload(a1, 256, 7, v8);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_10014D13C()
{
  unint64_t result;

  result = qword_100BDE4F8;
  if (!qword_100BDE4F8)
  {
    result = swift_getWitnessTable(&unk_10099BAE4, &unk_100B71610);
    atomic_store(result, (unint64_t *)&qword_100BDE4F8);
  }
  return result;
}

unint64_t sub_10014D178()
{
  unint64_t result;

  result = qword_100BDE538;
  if (!qword_100BDE538)
  {
    result = swift_getWitnessTable(&unk_10099BB1C, &unk_100B71610);
    atomic_store(result, (unint64_t *)&qword_100BDE538);
  }
  return result;
}

void sub_10014D1B4(uint64_t a1)
{
  sub_1000BC0F8(a1, (uint64_t)&unk_100CAE7F8, (uint64_t)&unk_100B71610);
}

void sub_10014D1C8(uint64_t a1)
{
  sub_1000BAB08(a1, (uint64_t)&unk_100CAE810, (uint64_t)&unk_100B71610);
}

void sub_10014D1DC()
{
  sub_10001C4F0();
}

void sub_10014D1E8(uint64_t a1)
{
  sub_100032068(a1, (uint64_t)&unk_100CAE7E0, (uint64_t)&unk_100B71610, 0x495655776F68732BLL, 0xEC0000007865646ELL);
}

void sub_10014D218(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10099E240;
  v4[1] = &unk_10099E258;
  sub_100158AF0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10099E270;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_10014D2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  v5 = v2;
  return swift_getOpaqueTypeConformance2(&v4, &unk_100AB62A8, 1);
}

void sub_10014D2DC()
{
  sub_10014D300(&qword_100BFBA20);
}

void sub_10014D2E8()
{
  sub_10014D300(&qword_100BFB9A0);
}

void sub_10014D2F4()
{
  sub_10014D300(&qword_100BFBA08);
}

void sub_10014D300(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000BA294(a1);
  v2 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 56) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 64) = v3;
  sub_10004A298();
}

double sub_10014D364(uint64_t a1)
{
  uint64_t v1;

  return sub_10014D36C(a1, *(_QWORD *)(v1 + 16));
}

double sub_10014D36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(uint64_t, __n128);
  __n128 v8;
  double result;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a2);
    v5 = (_QWORD *)(a2 + 40);
    do
    {
      v7 = (void (*)(uint64_t, __n128))*(v5 - 1);
      v6 = *v5;
      v8 = swift_retain(*v5);
      v7(a1, v8);
      swift_release(v6);
      v5 += 2;
      --v2;
    }
    while (v2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for MainModule()
{
  return objc_opt_self(_TtC7Weather10MainModule);
}

double sub_10014D410@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16[2];
  __int128 v17[2];
  __int128 v18[2];
  __int128 v19[2];

  sub_1000BA294((uint64_t *)&unk_100C09CB0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BA294(&qword_100C04B70);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100099864();
  sub_1000BA294((uint64_t *)&unk_100C09CA0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098694();
  v10 = *(_QWORD *)(v1 + 56);
  sub_100043CA8(v1 + 16, (uint64_t)v19);
  sub_100043CA8(v1 + 64, (uint64_t)v18);
  sub_100043CA8(v1 + 120, (uint64_t)v17);
  v11 = *(_QWORD *)(v1 + 160);
  sub_100043CA8(v1 + 168, (uint64_t)v16);
  *v3 = swift_getKeyPath(&unk_1009C8C78);
  v12 = sub_1000BA294(&qword_100BC37D8);
  sub_1000916FC((uint64_t)v3, v12);
  *v2 = swift_getKeyPath(&unk_1009C8CA8);
  v13 = sub_1000BA294((uint64_t *)&unk_100C09CC0);
  sub_1000916FC((uint64_t)v2, v13);
  *v7 = swift_getKeyPath(&unk_1009C8CD8);
  v14 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  sub_1000916FC((uint64_t)v7, v14);
  sub_1001237A0(v10, v19, v18, v17, (uint64_t)v3, (uint64_t)v2, (uint64_t)v7, v11, a1, v16);
  swift_retain();
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_10014D5B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[18];

  v17[0] = &unk_10099C7D0;
  result = type metadata accessor for AppConfiguration(319);
  if (v3 <= 0x3F)
  {
    v17[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for EnvironmentAction(319);
    if (v4 <= 0x3F)
    {
      v17[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for LocationsAction(319);
      if (v5 <= 0x3F)
      {
        v17[3] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for NotificationsAction(319);
        if (v6 <= 0x3F)
        {
          v17[4] = *(_QWORD *)(result - 8) + 64;
          result = type metadata accessor for NotificationsOptInAction(319);
          if (v7 <= 0x3F)
          {
            v17[5] = *(_QWORD *)(result - 8) + 64;
            result = type metadata accessor for ViewAction(319);
            if (v8 <= 0x3F)
            {
              v17[6] = *(_QWORD *)(result - 8) + 64;
              result = type metadata accessor for ModalViewAction(319);
              if (v9 <= 0x3F)
              {
                v17[7] = *(_QWORD *)(result - 8) + 64;
                result = type metadata accessor for LocationViewAction(319);
                if (v10 <= 0x3F)
                {
                  v17[8] = *(_QWORD *)(result - 8) + 64;
                  result = type metadata accessor for WeatherDataAction(319);
                  if (v11 <= 0x3F)
                  {
                    v17[9] = *(_QWORD *)(result - 8) + 64;
                    result = type metadata accessor for DebugAction(319);
                    if (v12 <= 0x3F)
                    {
                      v17[10] = *(_QWORD *)(result - 8) + 64;
                      result = type metadata accessor for ConditionDetailViewAction(319);
                      if (v13 <= 0x3F)
                      {
                        v17[11] = *(_QWORD *)(result - 8) + 64;
                        v17[12] = &unk_10099C7E8;
                        result = type metadata accessor for MoonDetailViewAction(319);
                        if (v14 <= 0x3F)
                        {
                          v17[13] = *(_QWORD *)(result - 8) + 64;
                          result = type metadata accessor for AveragesDetailViewAction(319);
                          if (v15 <= 0x3F)
                          {
                            v17[14] = *(_QWORD *)(result - 8) + 64;
                            v17[15] = &unk_10099C7E8;
                            v17[16] = &unk_10099C800;
                            result = type metadata accessor for PerformanceTestAction(319);
                            if (v16 <= 0x3F)
                            {
                              v17[17] = *(_QWORD *)(result - 8) + 64;
                              swift_initEnumMetadataMultiPayload(a1, 256, 18, v17);
                              return 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10014D7A0()
{
  sub_100069830(&qword_100BDECA8, (uint64_t)&unk_10099C818);
}

ValueMetadata *type metadata accessor for DemoPreset()
{
  return &type metadata for DemoPreset;
}

uint64_t sub_10014D7D4()
{
  return static View._viewListCount(inputs:)();
}

uint64_t type metadata accessor for AnyReducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyReducer);
}

double sub_10014D7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if (a2 != 1)
    return sub_1005C6044(a1, a2, a3, a4);
  return result;
}

uint64_t sub_10014D808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014D84C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeatherConditionBackgroundBindingModifierWithVFXBackground()
{
  return &type metadata for WeatherConditionBackgroundBindingModifierWithVFXBackground;
}

unint64_t sub_10014D8B0()
{
  unint64_t result;

  result = qword_100BEE6D8;
  if (!qword_100BEE6D8)
  {
    result = swift_getWitnessTable(&unk_1009A28AC, &type metadata for WeatherConditionBackgroundBindingModifierWithVFXBackground);
    atomic_store(result, (unint64_t *)&qword_100BEE6D8);
  }
  return result;
}

uint64_t sub_10014D8F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB59DC, 1);
}

_QWORD *sub_10014D900(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale(0);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = sub_1000BA294(&qword_100BC3340);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1000BA294(&qword_100BC3348);
  v23 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v22);
  v24 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22);
  if (v23)
  {
    if (!v24)
    {
      v25 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    sub_100021A14((uint64_t)v20, &qword_100BC3348);
LABEL_12:
    v26 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  v43 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v20, v21, v43);
LABEL_13:
  if (a1 != a2)
  {
    v27 = a3[8];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    sub_1000215BC((uint64_t)a1 + v27, type metadata accessor for WeatherData.WeatherStatisticsState);
    v30 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v29) == 1)
    {
      v31 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
      swift_storeEnumTagMultiPayload(v28, v30, 1);
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
  }
  v32 = a3[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for WeatherDataOverrides(0);
  v36 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v35);
  v37 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v35);
  if (v36)
  {
    if (!v37)
    {
      v38 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v38))
      {
        v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v33, v34, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v38);
      }
      v47 = *(int *)(v35 + 20);
      v48 = &v33[v47];
      v49 = &v34[v47];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v38))
      {
        v50 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v48, v49, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v38);
      }
      v51 = (uint64_t)v33;
      v52 = v35;
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  if (v37)
  {
    sub_1000215BC((uint64_t)v33, type metadata accessor for WeatherDataOverrides);
LABEL_23:
    v40 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3350) - 8) + 64);
    v41 = v33;
    v42 = v34;
    goto LABEL_24;
  }
  v44 = type metadata accessor for Date(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v44);
  if (!v45)
  {
    v54 = *(_QWORD *)(v44 - 8);
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v33, v34, v44);
      goto LABEL_40;
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v44);
    goto LABEL_39;
  }
  if (v46)
  {
LABEL_39:
    v55 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v33, v34, v44);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v44);
LABEL_40:
  v56 = *(int *)(v35 + 20);
  v57 = (uint64_t)&v33[v56];
  v58 = (uint64_t)&v34[v56];
  v59 = _s7Weather24LocationCompositionStateOwet_0(v57, 1, v44);
  v60 = _s7Weather24LocationCompositionStateOwet_0(v58, 1, v44);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v57, v58, v44);
      v51 = v57;
      v52 = v44;
LABEL_35:
      _s7Weather24LocationCompositionStateOwst_0(v51, 0, 1, v52);
      return a1;
    }
  }
  else
  {
    v61 = *(_QWORD *)(v44 - 8);
    if (!v60)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 40))(v57, v58, v44);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v57, v44);
  }
  v40 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v41 = (void *)v57;
  v42 = (const void *)v58;
LABEL_24:
  memcpy(v41, v42, v40);
  return a1;
}

uint64_t sub_10014DE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014DEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014DF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10014DF4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD4C08)
  {
    v2 = type metadata accessor for WeatherData(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD4C08);
  }
}

void sub_10014DFA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[6];

  v12[0] = &unk_1009CD3D8;
  sub_1001345CC(319, (unint64_t *)&unk_100BE0648, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  if (v3 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for WeatherDataModel(319);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for WeatherData.CachingState(319);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for WeatherData.WeatherStatisticsState(319);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          sub_1001345CC(319, (unint64_t *)&unk_100C09710, type metadata accessor for WeatherDataOverrides);
          if (v11 <= 0x3F)
          {
            v12[5] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 6, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_10014E0A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

void sub_10014E0F8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {
    v4 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  }
}

uint64_t sub_10014E158(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009CD3D8;
  result = type metadata accessor for WeatherStatisticsModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10014E1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100122068(v0 + OBJC_IVAR____TtC7Weather49WeatherConditionBackgroundModifierObservableModel__model);
  v1 = v0 + OBJC_IVAR____TtC7Weather49WeatherConditionBackgroundModifierObservableModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_10014E228(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100122138(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for WeatherConditionBackgroundModifierObservableModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0D4F0;
  if (!qword_100C0D4F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherConditionBackgroundModifierObservableModel);
  return result;
}

unint64_t sub_10014E2E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0D588;
  if (!qword_100C0D588)
  {
    v1 = type metadata accessor for WeatherConditionBackgroundModifierObservableModel(255);
    result = swift_getWitnessTable(&unk_1009D28D4, v1);
    atomic_store(result, (unint64_t *)&qword_100C0D588);
  }
  return result;
}

uint64_t sub_10014E328()
{
  uint64_t v0;

  return sub_10014E340(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10014E340(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC7Weather49WeatherConditionBackgroundModifierObservableModel__model;
  swift_beginAccess(a1 + OBJC_IVAR____TtC7Weather49WeatherConditionBackgroundModifierObservableModel__model, v5, 33, 0);
  sub_1001220A8(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10014E3A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1009D28F0);
  v6 = v1;
  v7 = a1;
  sub_10014E4A4(KeyPath, (uint64_t)sub_10014E328, (uint64_t)&v5);
  swift_release(KeyPath);
  return sub_100122068(a1);
}

uint64_t sub_10014E40C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1009D28F0);
  v7[0] = v1;
  v4 = sub_10014E2E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC7Weather49WeatherConditionBackgroundModifierObservableModel__model;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Weather49WeatherConditionBackgroundModifierObservableModel__model, v7, 0, 0);
  return sub_1001220F0(v5, a1);
}

uint64_t sub_10014E4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v8;

  v6 = sub_10014E2E8();
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, a1, a2, a3, &type metadata for () + 1, v6);
}

uint64_t sub_10014E52C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for WeatherConditionBackgroundTimeData(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeatherTip()
{
  return &type metadata for WeatherTip;
}

double sub_10014E5A4(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = sub_1000BA294(&qword_100BFB8A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10014E5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1000BA294(&qword_100BFB8A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10014E65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherApp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10014E6A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1001546A4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1009BD108;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for WeatherApp(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFB908;
  if (!qword_100BFB908)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherApp);
  return result;
}

void sub_10014E748(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = type metadata accessor for AppDelegate();
  UIApplicationDelegateAdaptor.init(_:)(v2, v2);
  v3 = (_QWORD *)(a1 + *(int *)(sub_1000C3E74() + 20));
  *v3 = 0xD000000000000018;
  v3[1] = 0x8000000100A0ED50;
  sub_10004A298();
}

void sub_10014E79C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  dispatch thunk of ResolverType.resolve<A>(_:name:)((uint64_t *)((char *)&v12 + 1), &type metadata for Bool, 0xD000000000000014, 0x8000000100A0E160, &type metadata for Bool, v2, v3);
  if (BYTE1(v12) == 2)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v12 & 0x100) != 0)
    return;
  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  dispatch thunk of ResolverType.resolve<A>(_:name:)(&v12, &type metadata for Bool, 0xD000000000000012, 0x80000001009F5CF0, &type metadata for Bool, v4, v5);
  v6 = v12;
  if (v12 == 2)
    goto LABEL_8;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = type metadata accessor for TipCoordinator(0);
  v10 = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (!v10)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v11 = v10;
  sub_10002CDD8(v6 & 1);
  swift_release(v11);
}

uint64_t sub_10014E8D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100ABCB20, 1);
}

uint64_t sub_10014E8E4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  sub_10014E79C(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E920()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10014E968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_1000C3E74() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)swift_task_alloc(dword_100BFB98C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10014E920;
  return sub_10014E9E0(v4, v5);
}

uint64_t sub_10014E9E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3);
  return swift_task_switch(sub_10014E8E4, v4, v5);
}

void sub_10014EA4C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C3E74() - 8) + 80);
  sub_100022890(a1, (_QWORD *)(v2 + 16), v2 + ((v5 + 56) & ~v5), a2);
}

uint64_t sub_10014EA98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[5];

  v2 = v1;
  v22 = a1;
  v3 = sub_1000BA294(&qword_100BFB948);
  __chkstk_darwin(v3);
  v5 = (char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BFB950);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23[-1] - v11;
  v13 = sub_1000BA294(&qword_100BFB8A8);
  v14 = (void *)UIApplicationDelegateAdaptor.wrappedValue.getter(v13);
  sub_100037674((uint64_t)v24);

  sub_10000CFA0((uint64_t)v24, v2, (uint64_t)v5);
  v15 = (uint64_t *)(v2 + *(int *)(sub_1000C3E74() + 20));
  v16 = *v15;
  v17 = v15[1];
  sub_10003D2DC(&qword_100BFB958, &qword_100BFB948);
  v19 = v18;
  Scene.extendedLaunchTestName(_:)(v16, v17, v3, v18);
  sub_100021AA4((uint64_t)v5, &qword_100BFB948);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
  v23[0] = v3;
  v23[1] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v23, &opaque type descriptor for <<opaque return type of Scene.extendedLaunchTestName(_:)>>, 1);
  static SceneBuilder.buildBlock<A>(_:)(v12, v6, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
}

void sub_10014EC54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_1001345CC(319, (unint64_t *)&qword_100BD4AE8, (uint64_t (*)(uint64_t))&type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001345CC(319, (unint64_t *)&unk_100C0B448, (uint64_t (*)(uint64_t))&type metadata accessor for BackgroundAnimationKind);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1009D0B00;
      v6[3] = &unk_1009D0B18;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for WeatherConditionBackgroundModelInputFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0B438;
  if (!qword_100C0B438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherConditionBackgroundModelInputFactory);
  return result;
}

uint64_t sub_10014ED48@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  _BYTE v18[24];
  _BYTE v19[24];

  v2 = v1;
  v4 = *v1;
  v5 = sub_1000BA294(&qword_100BD4B90);
  v6 = __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v18[-v9];
  v11 = (uint64_t)v2
      + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___locationAnimationKind;
  swift_beginAccess((char *)v2+ OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___locationAnimationKind, v19, 0, 0);
  sub_100037768(v11, (uint64_t)v10, &qword_100BD4B90);
  v12 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, v10, v12);
  sub_100021A14((uint64_t)v10, &qword_100BD4B90);
  v13 = static Settings.VFX.animatedBackgrounds.getter();
  v14 = Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release(v13);
  v15 = sub_100819360();
  Configurable.setting<A>(_:)(v14, v4, v15);
  v16 = swift_release(v14);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16))(v8, a1, v12, v16);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v12);
  swift_beginAccess(v11, v18, 33, 0);
  sub_1000A3908((uint64_t)v8, v11, &qword_100BD4B90);
  return swift_endAccess(v18);
}

uint64_t sub_10014EF04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014ED48((uint64_t)v5);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.vfx(_:))
  {
    *a1 = 1;
    v7 = (unsigned int *)&enum case for BackgroundAnimationKind.vfx(_:);
LABEL_5:
    v8 = *v7;
    v9 = type metadata accessor for BackgroundAnimationKind(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a1, v8, v9);
  }
  if (v6 == enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.mica(_:))
  {
    v7 = (unsigned int *)&enum case for BackgroundAnimationKind.mica(_:);
    goto LABEL_5;
  }
  *a1 = 1;
  v11 = enum case for BackgroundAnimationKind.vfx(_:);
  v12 = type metadata accessor for BackgroundAnimationKind(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_10014F038(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    v6[2] = "(";
    v6[3] = "(";
    sub_10015BB24(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_1009DEF88;
      v6[6] = &unk_1009DEFA0;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for WeatherDataVisibleLocationLoadingTelemetry(uint64_t a1)
{
  uint64_t result;

  result = qword_100C185C0;
  if (!qword_100C185C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherDataVisibleLocationLoadingTelemetry);
  return result;
}

uint64_t sub_10014F118(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v16[2];
  _QWORD v17[3];
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for GCDSerialDispatchQueueFactory(0);
  v19 = &off_100B88DB8;
  v8 = sub_10005F164(v17);
  sub_100129E70(a3, (uint64_t)v8);
  v9 = OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_logger;
  if (qword_100BC24F0 != -1)
    swift_once(&qword_100BC24F0, sub_1001596A4);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_1000AECD4(v10, (uint64_t)qword_100CAF2B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4 + v9, v11, v10);
  v12 = a4 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_startLoadTime;
  v13 = type metadata accessor for Date(0);
  _s7Weather24LocationCompositionStateOwst_0(v12, 1, 1, v13);
  v14 = (_QWORD *)(a4 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_lastAssumedVisibleLocationID);
  *v14 = 0;
  v14[1] = 0;
  *(_BYTE *)(a4 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_loadBeganDuringObservation) = 0;
  sub_100043CA8((uint64_t)a1, a4 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_backend);
  sub_100043CA8((uint64_t)a2, a4 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_clock);
  sub_1000DB418(v17, v18);
  sub_100129F60(0xD000000000000022, (void *)0x8000000100A027C0, (uint64_t *)v16);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  sub_10003C800(v16, a4 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_queue);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
  return a4;
}

uint64_t sub_10014F2B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;

  v17 = type metadata accessor for GCDSerialDispatchQueueFactory(0);
  v18 = &off_100B88DB8;
  v6 = sub_10005F164(v16);
  sub_100129E70(a3, (uint64_t)v6);
  v7 = type metadata accessor for WeatherDataVisibleLocationLoadingTelemetry(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v9 = sub_100068EB4((uint64_t)v16, v17);
  __chkstk_darwin(v9);
  v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_10014F118(a1, a2, (uint64_t)v11, v8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v16);
  return v13;
}

void sub_10014F3A0(char a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v8 = __chkstk_darwin(v7);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    if (a1 == 1)
    {
      v11 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a3, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v11);
      v12 = v3 + OBJC_IVAR____TtC7Weather42WeatherDataVisibleLocationLoadingTelemetry_startLoadTime;
      swift_beginAccess(v12, v14, 33, 0);
      sub_10015BADC((uint64_t)v10, v12);
      swift_endAccess(v14);
    }
    else
    {
      sub_100967E00(v8, a2, a3, v3, 0xD000000000000012, 0x8000000100A1C460);
    }
  }
}

void sub_10014F4BC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v6 = type metadata accessor for ActivityAction(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EnvironmentAction(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1, (uint64_t)v11, v12);
  if (swift_getEnumCaseMultiPayload(v11) == 3)
  {
    sub_10007802C((uint64_t)v11, (uint64_t)v8, type metadata accessor for ActivityAction);
    sub_10096912C((uint64_t)v8, a2, a3);
    v13 = (uint64_t)v8;
    v14 = type metadata accessor for ActivityAction;
  }
  else
  {
    v14 = type metadata accessor for EnvironmentAction;
    v13 = (uint64_t)v11;
  }
  sub_1000215BC(v13, v14);
}

void sub_10014F5D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;

  v4[0] = &unk_1009A2478;
  v4[1] = &unk_1009A2478;
  sub_10015A460(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1009A2490;
    v8 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v9 = &unk_1009A24A8;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for WeatherConditionBackgroundStoreObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE4E68;
  if (!qword_100BE4E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherConditionBackgroundStoreObserver);
  return result;
}

uint64_t sub_10014F6A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtC7WeatherP33_5624985E7B87C7961D79AEAA50BEAAE139WeatherConditionBackgroundModifierState___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10014F6F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009D8AF8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for WeatherConditionBackgroundModifierState(uint64_t a1)
{
  return sub_100098190(a1, qword_100C13AB8, (uint64_t)&nominal type descriptor for WeatherConditionBackgroundModifierState);
}

uint64_t type metadata accessor for WeatherMapOverlayDataStoreObserver()
{
  return objc_opt_self(_TtC7Weather34WeatherMapOverlayDataStoreObserver);
}

void sub_10014F7A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[26];

  v18[0] = &unk_1009D8E58;
  sub_100158CD4(319, (unint64_t *)&qword_100BD7458, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if (v3 <= 0x3F)
  {
    v18[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100158AA8(319, (unint64_t *)&qword_100BC5C88, &qword_100BC5A68);
    if (v5 <= 0x3F)
    {
      v18[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158AA8(319, &qword_100C13DC0, &qword_100C0A0A0);
      if (v7 <= 0x3F)
      {
        v18[3] = *(_QWORD *)(v6 - 8) + 64;
        v18[4] = &unk_1009D8E70;
        v18[5] = &unk_1009D8E70;
        v8 = type metadata accessor for WeatherConditionBackgroundModel(319);
        if (v9 <= 0x3F)
        {
          v18[6] = *(_QWORD *)(v8 - 8) + 64;
          v18[7] = &unk_1009D8C68;
          v18[8] = &unk_1009D8C80;
          v18[9] = &unk_1009D8C98;
          v18[10] = (char *)&value witness table for Builtin.NativeObject + 64;
          v18[11] = (char *)&value witness table for Builtin.Int64 + 64;
          v18[12] = &unk_1009D8AF8;
          sub_100158CD4(319, &qword_100C13DC8, (uint64_t (*)(uint64_t))&type metadata accessor for AnimatedGradient);
          if (v11 <= 0x3F)
          {
            v18[13] = *(_QWORD *)(v10 - 8) + 64;
            sub_100158AA8(319, &qword_100C13DD0, &qword_100BC4678);
            if (v13 <= 0x3F)
            {
              v18[14] = *(_QWORD *)(v12 - 8) + 64;
              sub_100158AA8(319, &qword_100C13DD8, &qword_100C0A0A0);
              if (v15 <= 0x3F)
              {
                v18[15] = *(_QWORD *)(v14 - 8) + 64;
                sub_100158AA8(319, (unint64_t *)&unk_100C13DE0, &qword_100C13D20);
                if (v17 <= 0x3F)
                {
                  v18[16] = *(_QWORD *)(v16 - 8) + 64;
                  v18[17] = &unk_1009D8C68;
                  v18[18] = &unk_1009D8E58;
                  v18[19] = &unk_1009D8E58;
                  v18[20] = &unk_1009D8C50;
                  v18[21] = &unk_1009D8E70;
                  v18[22] = &unk_1009D8C68;
                  v18[23] = &unk_1009D8C50;
                  v18[24] = &unk_1009D8C68;
                  v18[25] = (char *)&value witness table for Builtin.Int32 + 64;
                  swift_initStructMetadata(a1, 256, 26, v18, a1 + 16);
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_10014FA08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE5060;
  if (!qword_100BE5060)
  {
    v1 = type metadata accessor for WeatherConditionBackgroundModifier(255);
    result = swift_getWitnessTable(&unk_1009D8EA4, v1);
    atomic_store(result, (unint64_t *)&qword_100BE5060);
  }
  return result;
}

uint64_t sub_10014FA48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC5F8C, 1);
}

uint64_t sub_10014FA58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for BackgroundAnimationData(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BC4678);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037794(a1, (uint64_t)v10, &qword_100BC4678);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_100021A14((uint64_t)v10, &qword_100BC4678);
    v15 = type metadata accessor for BackgroundAnimationData.Model(0);
    v16 = a2;
    v17 = 1;
    return _s7Weather24LocationCompositionStateOwst_0(v16, v17, 1, v15);
  }
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  WeatherConditionBackgroundModel.animationData.getter(v18);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v19 == enum case for BackgroundAnimationData.none(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    v20 = v19;
    v21 = enum case for BackgroundAnimationData.loaded(_:);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (v20 == v21)
    {
      (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
      v22 = type metadata accessor for BackgroundAnimationData.Model(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a2, v7, v22);
      v16 = a2;
      v17 = 0;
      v15 = v22;
      return _s7Weather24LocationCompositionStateOwst_0(v16, v17, 1, v15);
    }
  }
  v24 = type metadata accessor for BackgroundAnimationData.Model(0);
  _s7Weather24LocationCompositionStateOwst_0(a2, 1, 1, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10014FC90()
{
  off_100C13A78 = &_swiftEmptySetSingleton;
}

uint64_t sub_10014FCA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;

  v0 = type metadata accessor for WeatherConditionBackgroundOptions.DisplayLocation(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WeatherConditionBackgroundOptions(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BackgroundAnimationData(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  v13 = WeatherConditionBackgroundModel.animationData.getter(v12);
  BackgroundAnimationData.options.getter(v13);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  WeatherConditionBackgroundOptions.displayLocation.getter(v14);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = WeatherConditionBackgroundOptions.DisplayLocation.canDisplayForegroundEffects.getter(v15);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v16 & 1) == 0)
    return 0;
  if (qword_100BC2818 != -1)
    swift_once(&qword_100BC2818, sub_10014FF7C);
  return byte_100C13A81;
}

uint64_t sub_10014FE30()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for SettingReader(0);
  v0 = static SettingReader.shared.getter();
  v1 = static Settings.VFX.vfxCollisionEnabled.getter();
  SettingReader.read<A>(_:)(&byte_100C13A80);
  swift_release(v0);
  return swift_release(v1);
}

uint64_t sub_10014FE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC2810 != -1)
    swift_once(&qword_100BC2810, sub_10014FE30);
  v5 = byte_100C13A80;
  sub_10000AB54(v1, (uint64_t)v4, type metadata accessor for WeatherConditionBackgroundModifier);
  if (v5 == 1)
  {
    v6 = &v4[*(int *)(v2 + 36)];
    v7 = *(_QWORD *)v6;
    v8 = v6[8];
    sub_10008D47C(*(_QWORD *)v6, v8);
    sub_100109B54();
    v10 = v9;
    sub_1000B15F8(v7, v8);
  }
  else
  {
    v10 = 0;
  }
  sub_1000215BC((uint64_t)v4, type metadata accessor for WeatherConditionBackgroundModifier);
  return v10 & 1;
}

uint64_t sub_10014FF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  type metadata accessor for SettingReader(0);
  v0 = static SettingReader.shared.getter();
  v1 = static Settings.VFX.foregroundEffects.getter();
  v2 = DeviceSupportsForegroundEffects();
  v3 = SettingReader.isEnabled(_:with:)(v1, v2);
  swift_release(v0);
  result = swift_release(v1);
  byte_100C13A81 = v3 & 1;
  return result;
}

void sub_10014FFE8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = *v0;
  if (v2)
  {
    swift_retain();
    v3 = sub_10010E6C8();
    v5 = v4;
    v6 = v3;
    swift_release(v2);
    v7 = sub_10012ACBC(v6, v5);
    swift_bridgeObjectRelease(v6);
    if (v7 > 0.0)
      type metadata accessor for WeatherConditionBackgroundModifier(0);
  }
  else
  {
    v8 = v1[1];
    v9 = type metadata accessor for LocationViewCollisionOptions(0);
    sub_10000F1C8(&qword_100BCCB38, type metadata accessor for LocationViewCollisionOptions);
    EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
}

void sub_1001500B8(uint64_t (*a1)(_QWORD), void (*a2)(void))
{
  uint64_t v3;

  v3 = a1(0);
  sub_1000860C4(v3);
  a2();
  sub_10004A298();
}

void sub_1001500E8()
{
  sub_1001500B8(type metadata accessor for AnimatedBackgroundsUserDefaultsMonitor, (void (*)(void))sub_100010E98);
}

uint64_t sub_1001500FC()
{
  uint64_t v0;

  return sub_100150114(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100150114(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = type metadata accessor for AnimatedGradient(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for WeatherConditionBackgroundModifier(0);
  v6 = sub_1000BA294(&qword_100C13D28);
  State.wrappedValue.getter(v5, v6);
  AnimatedGradient.setGradient(gradient:)(a2);
  return State.wrappedValue.setter(v5, v6);
}

void sub_1001501CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for WeatherConditionBackgroundModifier(0);
  sub_1000950B8();
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000BE880() - 8) + 80);
  sub_10015021C(v1 + v0, v1 + ((v0 + v3 + v4) & ~v4));
}

void sub_10015021C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v33 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100C13F68);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC4678);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v33 - v15;
  __chkstk_darwin(v14);
  v18 = (char **)((char *)&v33 - v17);
  v34 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  v36 = a1;
  v19 = sub_1000BA294(&qword_100C13D38);
  State.wrappedValue.getter(v18, v19);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35 = a2;
  v20(v16, a2, v4);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v4);
  v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100037794((uint64_t)v18, (uint64_t)v9, &qword_100BC4678);
  sub_100037794((uint64_t)v16, v21, &qword_100BC4678);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v4) != 1)
  {
    sub_100037794((uint64_t)v9, (uint64_t)v13, &qword_100BC4678);
    if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v4) != 1)
    {
      v22 = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v33, v21, v4);
      sub_10000F1C8((unint64_t *)&qword_100BC4698, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherConditionBackgroundModel);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v22, v4, v23);
      v25 = *(void (**)(char *, uint64_t))(v5 + 8);
      v25(v22, v4);
      sub_100021A14((uint64_t)v16, &qword_100BC4678);
      sub_100021A14((uint64_t)v18, &qword_100BC4678);
      v25(v13, v4);
      sub_100021A14((uint64_t)v9, &qword_100BC4678);
      if ((v24 & 1) == 0)
        return;
      goto LABEL_8;
    }
    sub_100021A14((uint64_t)v16, &qword_100BC4678);
    sub_100021A14((uint64_t)v18, &qword_100BC4678);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    sub_100021A14((uint64_t)v9, &qword_100C13F68);
    return;
  }
  sub_100021A14((uint64_t)v16, &qword_100BC4678);
  sub_100021A14((uint64_t)v18, &qword_100BC4678);
  if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v4) != 1)
    goto LABEL_6;
  sub_100021A14((uint64_t)v9, &qword_100BC4678);
LABEL_8:
  v26 = v34;
  v27 = v36;
  v28 = v36 + *(int *)(v34 + 100);
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  sub_10008D47C(*(_QWORD *)v28, v30);
  sub_100109B54();
  v32 = v31;
  sub_1000B15F8(v29, v30);
  sub_10003C1BC(v35, v32 & 1, *(unsigned __int8 *)(v27 + *(int *)(v26 + 64)));
}

uint64_t sub_100150584(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WeatherConditionBackgroundModifier(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1001505C0()
{
  return sub_100150584(sub_10002E788);
}

void sub_1001505CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for WeatherConditionBackgroundModifier(0);
  sub_1000861D0();
  sub_100150610(v0 + v2, *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v0+ ((((v1 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8), *(double *)(v0 + ((v1 + v2 + 7) & 0xFFFFFFFFFFFFFFF8)), *(float *)(v0 + ((((v1 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_100150610(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, __n128), double a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __n128 v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  void (*v47)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v48;
  uint64_t v49;
  double v50;

  v47 = a2;
  v7 = sub_1000BA294(&qword_100C0A0A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100C12840);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC4678);
  v14 = __chkstk_darwin(v13);
  v16 = (void (**)(_QWORD, _QWORD, _QWORD, __n128))((char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v18 = (char *)&v47 - v17;
  v19 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (int *)type metadata accessor for WeatherConditionBackgroundModifier(0);
  v24 = (uint64_t *)(a1 + v23[28]);
  v26 = *v24;
  v25 = v24[1];
  v48 = v26;
  v49 = v25;
  v27 = sub_1000BA294(&qword_100C13F60);
  State.wrappedValue.getter(&v50, v27);
  v28 = v50;
  sub_10014E40C((uint64_t)v18);
  swift_release(*(_QWORD *)&v28);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19) == 1)
  {
    sub_100021A14((uint64_t)v18, &qword_100BC4678);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    v29 = (uint64_t *)(a1 + v23[21]);
    v31 = *v29;
    v30 = v29[1];
    v48 = v31;
    v49 = v30;
    v32 = sub_1000BA294(&qword_100C13F50);
    State.wrappedValue.getter(&v50, v32);
    v33 = *(unsigned __int8 *)(*(_QWORD *)&v50 + 16);
    v34 = swift_release(*(_QWORD *)&v50);
    if (v33 == 1)
    {
      v35 = (uint64_t *)(a1 + v23[22]);
      v36 = *v35;
      v37 = v35[1];
      v48 = v36;
      v49 = v37;
      v38 = sub_1000BA294(&qword_100C13F90);
      State.wrappedValue.getter(&v50, v38);
      v34.n128_f64[0] = v50;
      if (v50 == a3)
      {
        v39 = sub_1000BA294(&qword_100C13D38);
        State.wrappedValue.getter(v16, v39);
        v40 = type metadata accessor for DynamicTypeSize(0);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 1, 1, v40);
        v41 = type metadata accessor for TargetWindowSizeClass(0);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v41);
        sub_10005F264((uint64_t)v16, (uint64_t)v22, (uint64_t)v12, (uint64_t)v9, LODWORD(a4), v47);
        sub_100021A14((uint64_t)v9, &qword_100C0A0A0);
        sub_100021A14((uint64_t)v12, &qword_100C12840);
        sub_100021A14((uint64_t)v16, &qword_100BC4678);
        v42 = a1 + v23[25];
        v43 = *(_QWORD *)v42;
        v44 = *(_BYTE *)(v42 + 8);
        sub_10008D47C(*(_QWORD *)v42, v44);
        sub_100109B54();
        v46 = v45;
        sub_1000B15F8(v43, v44);
        sub_10003C1BC((uint64_t)v22, v46 & 1, *(unsigned __int8 *)(a1 + v23[16]));
      }
    }
    (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v22, v19, v34);
  }
}

void sub_100150968(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WeatherConditionBackgroundModifier(0) - 8) + 80);
  sub_100021170(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_1001509B4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  v2 = sub_1000DC5B0(a1);
  return a2(v2);
}

uint64_t sub_1001509E0(uint64_t a1)
{
  return sub_1001509B4(a1, (uint64_t (*)(uint64_t))sub_1001509EC);
}

void sub_1001509EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v3 = type metadata accessor for BackgroundAnimationKind(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for WeatherConditionBackgroundModifier(0);
  WeatherConditionBackgroundModel.animationKind.getter(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for BackgroundAnimationKind.mica(_:), v3);
  v11 = static BackgroundAnimationKind.== infix(_:_:)(v9, v7);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, v3);
  v12(v9, v3);
  if ((v11 & 1) != 0)
  {
    v13 = (uint64_t *)(a2 + *(int *)(v10 + 108));
    v14 = *v13;
    v15 = v13[1];
    v16 = *((unsigned __int8 *)v13 + 16);
    v17 = type metadata accessor for WeatherMicaConditionBackground(0);
    sub_10000F1C8(&qword_100C13F48, type metadata accessor for WeatherMicaConditionBackground);
    v19 = v18;
    v20 = StateObject.wrappedValue.getter(v14, v15, v16, v17, v18);
    *(_BYTE *)(v20 + OBJC_IVAR____TtC7Weather30WeatherMicaConditionBackground_isWindowActive) = 1;
    swift_release(v20);
    v21 = StateObject.wrappedValue.getter(v14, v15, v16, v17, v19);
    v22 = (void *)sub_1002EFE64();
    MicaBackgroundAnimation.play(_:)(1);
    swift_release(v21);

  }
}

uint64_t sub_100150B88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = sub_1000C11C8(a1);
  return sub_1000997E8(v1, v2, v3, v4);
}

uint64_t sub_100150BA8(uint64_t a1)
{
  return sub_100150B88(a1);
}

void sub_100150BB4()
{
  sub_1001500B8(type metadata accessor for WeatherMicaConditionBackground, (void (*)(void))sub_100013818);
}

uint64_t type metadata accessor for WeatherConditionBackgroundAssembly()
{
  return objc_opt_self(_TtC7Weather34WeatherConditionBackgroundAssembly);
}

_QWORD *sub_100150BEC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BD4D18);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (*(_QWORD *)((char *)&v12[3] + 1))
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v12, &type metadata for Bool, 0xD000000000000012, 0x80000001009F5CF0, &type metadata for Bool, v8, v9);
    if (LOBYTE(v12[0]) != 2)
    {
      v10 = v12[0] & 1;
      v11 = type metadata accessor for WeatherConditionBackgroundModelFactory(0);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      result = (_QWORD *)WeatherConditionBackgroundModelFactory.init(gradientManager:automationEnabled:isDemoPresetActive:)((char *)v12 + 1, 0, v10);
      a2[3] = v11;
      a2[4] = &protocol witness table for WeatherConditionBackgroundModelFactory;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100150CFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100150D18((uint64_t (*)(_QWORD))&type metadata accessor for WeatherConditionConfigurationManager, (uint64_t (*)(void))&WeatherConditionConfigurationManager.init(), (uint64_t)&protocol witness table for WeatherConditionConfigurationManager, a1);
}

uint64_t sub_100150D18@<X0>(uint64_t (*a1)(_QWORD)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = a1(0);
  sub_1000860C4(v7);
  result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t sub_100150D6C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100150D18((uint64_t (*)(_QWORD))&type metadata accessor for WeatherConditionGradientManager, (uint64_t (*)(void))&WeatherConditionGradientManager.init(), (uint64_t)&protocol witness table for WeatherConditionGradientManager, a1);
}

uint64_t sub_100150D88()
{
  return sub_10003A874();
}

unint64_t sub_100150D9C()
{
  unint64_t result;

  result = qword_100BC5B68;
  if (!qword_100BC5B68)
  {
    result = swift_getWitnessTable(&unk_1009802C4, &unk_100B60910);
    atomic_store(result, (unint64_t *)&qword_100BC5B68);
  }
  return result;
}

void sub_100150DD8(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100150EF4(&qword_100BC1E30, &qword_100C0A0A0, (uint64_t)qword_100CADD40, (uint64_t)sub_100150ED8);
  sub_10007EBC8(v2, a1, &qword_100C0A0A0);
}

uint64_t sub_100150E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10010E5DC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_100150E78(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000D15A4(a1, a2);
  sub_10004037C(v6, a3);
  v7 = sub_1000AECD4(v6, (uint64_t)a3);
  v8 = a4(0);
  return _s7Weather24LocationCompositionStateOwst_0(v7, 1, 1, v8);
}

uint64_t sub_100150ED8(uint64_t a1)
{
  return sub_100150E78(a1, &qword_100C0A0A0, qword_100CADD40, (uint64_t (*)(_QWORD))&type metadata accessor for TargetWindowSizeClass);
}

uint64_t sub_100150EF4(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = sub_1000BA294(a2);
  return sub_1000AECD4(v6, a3);
}

void sub_100150F38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100159538(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001594F0();
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_100993B00;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for WeatherMicaConditionBackground(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD60A0;
  if (!qword_100BD60A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherMicaConditionBackground);
  return result;
}

uint64_t sub_100151010(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = (char *)&value witness table for () + 64;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = &unk_10099E040;
    v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for OSSignpostID(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 7, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for WeatherDataDebounceMiddleware(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE04C8;
  if (!qword_100BE04C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherDataDebounceMiddleware);
  return result;
}

double sub_100151114(uint64_t *a1)
{
  uint64_t v1;

  return sub_100024504(a1, v1);
}

uint64_t sub_10015111C(uint64_t a1)
{
  uint64_t v1;

  return sub_100065338(a1, v1, 1);
}

uint64_t sub_100151138(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10015118C + 4 * byte_10098E442[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001511C0 + 4 * byte_10098E43D[v5]))();
}

uint64_t sub_1001511C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001511C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001511D0);
  return result;
}

uint64_t sub_1001511DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001511E4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001511E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001511F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001511FC(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10015124C + 4 * byte_10098E438[v4]))();
  }
}

void type metadata accessor for WeatherMapPresentationIntent()
{
  sub_100098884();
}

void type metadata accessor for WeatherMapPresentationIntent.FullscreenPresentationSource()
{
  sub_100098884();
}

unint64_t sub_1001512BC()
{
  unint64_t result;

  result = qword_100BC5B80;
  if (!qword_100BC5B80)
  {
    result = swift_getWitnessTable(&unk_10098EBFC, &unk_100B68C30);
    atomic_store(result, (unint64_t *)&qword_100BC5B80);
  }
  return result;
}

void sub_1001512F8()
{
  char v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009BCA4();
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_10009BE6C();
  __chkstk_darwin(v3);
  sub_1000999B0();
  if (v1 != 1)
  {
    sub_10029FC0C();
    if ((v0 & 0xC0) == 0x40)
      sub_100403C6C();
    sub_10009BC18(v5, type metadata accessor for DisplayMetrics);
  }
  sub_100098AD4(v4, type metadata accessor for DisplayMetrics);
  sub_10004A2A0();
}

void type metadata accessor for WeatherMapPresentationStyle.FullscreenTransitionStyle()
{
  sub_100098884();
}

uint64_t sub_1001513B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029922C);
}

uint64_t sub_1001513BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeatherMapPresentationState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001513F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = &unk_10098E4B0;
  v5[1] = &unk_10098E4C8;
  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_10098E4E0;
    result = type metadata accessor for WeatherMapTrackingState(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_10098E478;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_1001514A0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000BA294(&qword_100BC6000);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_10009883C();
  __chkstk_darwin(v3);
  type metadata accessor for WeatherMapPresentationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10009883C();
  __chkstk_darwin(v5);
  sub_1000BA294(qword_100BC6008);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009883C();
  __chkstk_darwin(v7);
  __asm { BR              X10 }
}

void sub_1001515C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (DeviceIsSlow())
    v9 = 64;
  else
    v9 = 65;
  sub_10003773C(*(_QWORD *)(v8 - 112), v0, qword_100BC6008);
  sub_10000AB54(v1, v5, type metadata accessor for WeatherMapPresentationState);
  v10 = type metadata accessor for WeatherMapOverlayKind(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v0, 1, v10) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v4, v5 + *(int *)(v7 + 24), v10);
    sub_1001513BC(v5);
    sub_100021AA4(v0, qword_100BC6008);
  }
  else
  {
    sub_1001513BC(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v4, v0, v10);
  }
  sub_100099444();
  _s7Weather24LocationCompositionStateOwst_0(v11, v12, v13, v10);
  sub_10003773C(*(_QWORD *)(v8 - 104), v3, &qword_100BC6000);
  sub_10000AB54(v1, v6, type metadata accessor for WeatherMapPresentationState);
  v14 = type metadata accessor for WeatherMapTrackingState(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v3, 1, v14) == 1)
  {
    sub_10000AB54(v6 + *(int *)(v7 + 32), v2, type metadata accessor for WeatherMapTrackingState);
    sub_1001513BC(v6);
    sub_100021AA4(v3, &qword_100BC6000);
  }
  else
  {
    sub_1001513BC(v6);
    sub_1001521AC(v3, v2);
  }
  sub_100099444();
  _s7Weather24LocationCompositionStateOwst_0(v15, v16, v17, v14);
  sub_1001517AC(*(_QWORD *)(v8 - 88), v9, v4, 0, 0, v2, *(_BYTE **)(v8 - 96));
  sub_100021AA4(v2, &qword_100BC6000);
  sub_100021AA4(v4, qword_100BC6008);
  sub_100098640();
}

uint64_t sub_1001517AC@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  _QWORD *v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v8 = v7;
  v63 = a6;
  v55 = a5;
  v59 = a4;
  v60 = a3;
  v65 = a1;
  v11 = a1;
  sub_1000BA294(&qword_100BC6000);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v56 = v13;
  v62 = sub_1000DC694();
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v57 = v15;
  sub_1000BA294(qword_100BC6008);
  sub_10009D98C();
  __chkstk_darwin(v16);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000B4608();
  sub_10009C934(v19);
  v67 = v20;
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_1000D9C54(v22, v54);
  v23 = (int *)sub_10009E654();
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_10009883C();
  v61 = v25 - v26;
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v54 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v54 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v54 - v35;
  __chkstk_darwin(v34);
  v38 = (unsigned __int8 *)&v54 - v37;
  sub_1000FFAB4();
  if (v11 == 6)
    v65 = *v38;
  sub_1000215BC((uint64_t)v38, type metadata accessor for WeatherMapPresentationState);
  sub_1000FFAB4();
  v58 = a2;
  v39 = a2;
  if (a2 >= 0xFEu)
    v39 = v36[1];
  sub_1000215BC((uint64_t)v36, type metadata accessor for WeatherMapPresentationState);
  sub_100159E84();
  sub_1000FFAB4();
  v40 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v64);
  if ((_DWORD)v40 == 1)
  {
    v41 = sub_1000BE9D4(v66, (uint64_t)&v33[v23[6]], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 16));
    sub_10009BC18(v41, type metadata accessor for WeatherMapPresentationState);
    sub_100021A14((uint64_t)v18, qword_100BC6008);
  }
  else
  {
    sub_10009BC18(v40, type metadata accessor for WeatherMapPresentationState);
    sub_1000BE9D4(v66, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32));
  }
  v42 = v59;
  v44 = v55;
  v43 = v56;
  sub_1000B3B78();
  v45 = v44;
  if (!v44)
  {
    v46 = &v30[v23[7]];
    v42 = *(_QWORD *)v46;
    v45 = *((_QWORD *)v46 + 1);
    swift_bridgeObjectRetain(v45);
  }
  swift_bridgeObjectRetain(v44);
  sub_1000215BC((uint64_t)v30, type metadata accessor for WeatherMapPresentationState);
  sub_100159E84();
  v47 = v61;
  sub_1000FFAB4();
  if (_s7Weather24LocationCompositionStateOwet_0(v43, 1, v62) == 1)
  {
    v48 = v47;
    v49 = v57;
    sub_1000B3B78();
    sub_1000215BC(v48, type metadata accessor for WeatherMapPresentationState);
    sub_100021A14(v43, &qword_100BC6000);
  }
  else
  {
    sub_1000215BC(v47, type metadata accessor for WeatherMapPresentationState);
    v49 = v57;
    sub_1001521AC(v43, v57);
  }
  v50 = v65;
  v51 = sub_100299350(v58, v8);
  *a7 = v50;
  a7[1] = v39;
  sub_1000BE9D4((uint64_t)&a7[v23[6]], v66, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32));
  v52 = &a7[v23[7]];
  *v52 = v42;
  v52[1] = v45;
  result = sub_1001521AC(v49, (uint64_t)&a7[v23[8]]);
  a7[v23[9]] = v51 & 1;
  return result;
}

uint64_t sub_100151B9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = &unk_1009A82F0;
  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_1009A8308;
    v5[3] = &unk_1009A8320;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      result = swift_updateClassMetadata2(a1, 256, 6, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100151C50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  _QWORD v9[17];

  v9[0] = &unk_1009A82F0;
  v9[1] = &unk_1009A8308;
  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v9[2] = v4;
    swift_getTupleTypeLayout2(v8, v4, (char *)&value witness table for Builtin.Int64 + 64);
    v9[3] = v8;
    swift_getTupleTypeLayout3(v7, v4, (char *)&value witness table for Builtin.Int64 + 64, (char *)&value witness table for Builtin.Int64 + 64);
    v9[4] = v7;
    v9[5] = &unk_1009A83E8;
    v9[6] = &unk_1009A8400;
    v9[7] = &unk_1009A8400;
    v9[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v9[9] = &unk_1009A8418;
    v9[10] = v4;
    v9[11] = &unk_1009A8308;
    v9[12] = &unk_1009A8430;
    v9[13] = &unk_1009A8308;
    v9[14] = v4;
    swift_getTupleTypeLayout2(v6, v4, &unk_1009A82F0);
    v9[15] = v6;
    swift_getTupleTypeLayout2(v5, v4, &unk_1009A82F0);
    v9[16] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 17, v9);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WeatherDataStoreObserver()
{
  return objc_opt_self(_TtC7Weather24WeatherDataStoreObserver);
}

uint64_t sub_100151DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC35F8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v25 - v14;
  sub_10001C710(a1, v3, (uint64_t)&v25 - v14);
  sub_10003773C((uint64_t)v15, (uint64_t)v13, &qword_100BC35F8);
  v16 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v16) == 1)
  {
    sub_100021A14((uint64_t)v13, &qword_100BC35F8);
    v18 = static os_signpost_type_t.event.getter(v17);
    v19 = v3[13];
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v18, &_mh_execute_header, v19, "Weather:DataStoreObserver: can't find priority location2", 56, 2, v9);
    v20 = 1;
  }
  else
  {
    v21 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a2, v13, v16);
    v22 = static os_signpost_type_t.event.getter(v21);
    v23 = v3[13];
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v22, &_mh_execute_header, v23, "Weather:DataStoreObserver: found priority location", 50, 2, v9);
    v20 = 0;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_100021A14((uint64_t)v15, &qword_100BC35F8);
  return _s7Weather24LocationCompositionStateOwst_0(a2, v20, 1, v16);
}

uint64_t sub_100151FA0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = type metadata accessor for NetworkActivityManager();
  v11 = &off_100B6D7E8;
  *(_QWORD *)&v9 = a2;
  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  *(_QWORD *)(a4 + 104) = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD000000000000018, 0x8000000100A0E180);
  *(_QWORD *)(a4 + 16) = a1;
  sub_10003C800(&v9, a4 + 24);
  sub_10003C800(a3, a4 + 64);
  return a4;
}

uint64_t sub_100152068(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;

  v17 = type metadata accessor for NetworkActivityManager();
  v18 = &off_100B6D7E8;
  v16[0] = a2;
  v6 = type metadata accessor for WeatherDataStoreObserver();
  v7 = swift_allocObject(v6, 112, 7);
  v8 = sub_100068EB4((uint64_t)v16, v17);
  v9 = __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v12 + 16))(v11, v9);
  v13 = sub_100151FA0(a1, *v11, a3, v7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v16);
  return v13;
}

uint64_t sub_100152148()
{
  uint64_t v0;

  type metadata accessor for TimeState(0);
  return sub_10001A548(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100152194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100298B80);
}

uint64_t sub_1001521A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100298B38);
}

uint64_t sub_1001521AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherMapTrackingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001521F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];

  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_10098E478, *(_QWORD *)(result - 8) + 64);
    swift_initEnumMetadataSinglePayload(a1, 256, v4, 3);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WeatherDataPreprocessor()
{
  return objc_opt_self(_TtC7Weather23WeatherDataPreprocessor);
}

_QWORD *sub_100152280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  a14[7] = type metadata accessor for DailyForecastComponentViewModelFactory();
  a14[8] = &off_100B6CE30;
  a14[4] = a3;
  a14[12] = type metadata accessor for FeelsLikeComponentViewModelFactory();
  a14[13] = &off_100B95C58;
  a14[9] = a4;
  a14[17] = type metadata accessor for HourlyForecastComponentViewModelFactory();
  a14[18] = &off_100B750B0;
  a14[14] = a5;
  a14[22] = type metadata accessor for ListViewModelFactory(0);
  a14[23] = &off_100B75ED8;
  a14[19] = a6;
  a14[27] = type metadata accessor for PrecipitationTotalComponentViewModelFactory();
  a14[28] = &off_100B86328;
  a14[24] = a7;
  a14[32] = type metadata accessor for UVIndexComponentViewModelFactory();
  a14[33] = &off_100B8B688;
  a14[29] = a8;
  a14[37] = type metadata accessor for VisibilityComponentViewModelFactory();
  a14[38] = &off_100B884A0;
  a14[34] = a9;
  a14[42] = type metadata accessor for PressureComponentViewModelFactory();
  a14[43] = &off_100B9B118;
  a14[39] = a10;
  a14[47] = type metadata accessor for WindComponentViewModelFactory();
  a14[48] = &off_100B82B48;
  a14[44] = a11;
  a14[52] = type metadata accessor for WeatherConditionBackgroundModelInputFactory(0);
  a14[53] = &off_100B95398;
  a14[49] = a12;
  a14[57] = type metadata accessor for LocationViewModelFactory(0);
  a14[58] = &off_100B91A08;
  a14[54] = a13;
  a14[2] = a1;
  a14[3] = a2;
  return a14;
}

uint64_t sub_10015241C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AC5028, 1);
}

void sub_100152450(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "\t";
  v6[1] = &unk_1009D5B50;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = (char *)&value witness table for () + 64;
    v6[4] = &unk_1009D5B68;
    v6[5] = &unk_1009D5B80;
    sub_100154578(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 7, v6, a1 + 32);
    }
  }
}

uint64_t sub_10015250C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100009F54(v1[4], v1[2], v1[3], a1);
}

void sub_100152518(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10015BB24(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100152588(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AB29F0, 1);
}

uint64_t sub_1001525BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1001525CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t type metadata accessor for WeatherWindowGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeatherWindowGroup);
}

uint64_t sub_100152608()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = sub_1000992C4();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_1000AE9DC();
  sub_10011E314();
  return sub_100077EE4(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v3);
}

uint64_t sub_100152654()
{
  return sub_100152744();
}

uint64_t sub_100152668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000ED36C();
  v1 = v0;
  v2 = sub_1000BA294(&qword_100BE0D10);
  v3 = sub_1000992C4();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10097CA50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v1, v3);
  sub_100818EEC();
  sub_100025AF4();
  swift_setDeallocating(v7);
  return sub_10011EA34();
}

uint64_t sub_100152744()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for WeatherDataReducer()
{
  return objc_opt_self(_TtC7Weather18WeatherDataReducer);
}

ValueMetadata *type metadata accessor for WeatherURLContext()
{
  return &type metadata for WeatherURLContext;
}

uint64_t sub_10015279C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[32];
  _BYTE v10[32];
  _BYTE v11[32];
  _QWORD v12[3];
  uint64_t v13;
  _BYTE v14[32];
  _QWORD v15[10];

  v15[0] = &unk_1009DC4F8;
  v15[1] = &unk_1009DC4F8;
  v15[2] = &unk_1009DC510;
  v15[3] = &unk_1009DC510;
  v12[0] = &unk_1009DC4F8;
  result = type metadata accessor for WeatherData(319);
  if (v3 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PreprocessedWeatherData(319);
    if (v4 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for NewsDataModel(319);
      if (v5 <= 0x3F)
      {
        v13 = *(_QWORD *)(result - 8) + 64;
        v6 = v13;
        swift_getTupleTypeLayout(v14, 0, 4, v12);
        v15[4] = v14;
        swift_getTupleTypeLayout2(v11, &unk_1009DC4F8, v6);
        v15[5] = v11;
        result = type metadata accessor for AvailableDataSets(319);
        if (v7 <= 0x3F)
        {
          swift_getTupleTypeLayout2(v10, &unk_1009DC4F8, *(_QWORD *)(result - 8) + 64);
          v15[6] = v10;
          v15[7] = &unk_1009DC4F8;
          result = type metadata accessor for WeatherStatisticsModel(319);
          if (v8 <= 0x3F)
          {
            swift_getTupleTypeLayout2(v9, &unk_1009DC4F8, *(_QWORD *)(result - 8) + 64);
            v15[8] = v9;
            v15[9] = &unk_1009DC510;
            swift_initEnumMetadataMultiPayload(a1, 256, 10, v15);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1001528FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC33F0)
  {
    v2 = type metadata accessor for LocationWeatherDataState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC33F0);
  }
}

uint64_t sub_100152950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[32];
  _QWORD v11[3];

  v2 = type metadata accessor for NewsDataModel(319);
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v11[0] = v5;
    v3 = type metadata accessor for WeatherData(319);
    if (v6 <= 0x3F)
    {
      v7 = type metadata accessor for PreprocessedWeatherData(319);
      if (v8 > 0x3F)
      {
        return v7;
      }
      else
      {
        swift_getTupleTypeLayout3(v10, *(_QWORD *)(v3 - 8) + 64, *(_QWORD *)(v7 - 8) + 64, v5);
        v11[1] = v10;
        v11[2] = &unk_1009BBC00;
        swift_initEnumMetadataMultiPayload(a1, 256, 3, v11);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t type metadata accessor for GeocodeWeatherService()
{
  return objc_opt_self(_TtC7Weather21GeocodeWeatherService);
}

uint64_t sub_100152A40(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  sub_10003C800(a2, v4 + 24);
  sub_10003C800(a3, v4 + 64);
  sub_10003C800(a4, v4 + 104);
  return v4;
}

uint64_t type metadata accessor for ReportWeatherAssembly()
{
  return objc_opt_self(_TtC7Weather21ReportWeatherAssembly);
}

uint64_t sub_100152AB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for ReportWeatherViewStateReducer, (uint64_t)&off_100B8CA30, a1);
}

uint64_t sub_100152ACC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10012A894((uint64_t (*)(_QWORD))type metadata accessor for ReportWeatherViewModelFactory, (uint64_t)&off_100B887A0, a1);
}

double sub_100152AE0(uint64_t a1, __n128 a2)
{
  return sub_100010094(a1, a2);
}

uint64_t type metadata accessor for ReportWeatherMonitor()
{
  return objc_opt_self(_TtC7Weather20ReportWeatherMonitor);
}

uint64_t sub_100152B14(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ReportWeatherMonitor();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall ReportWeatherMonitor.applicationWillEnterForeground()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *v0;
  if (qword_100BC2090 != -1)
    swift_once(&qword_100BC2090, sub_10015B308);
  v2 = qword_100CAE8C8;
  v4 = 0;
  v3 = sub_100152B14(&qword_100BF1368, (uint64_t)&protocol conformance descriptor for ReportWeatherMonitor);
  Updatable.save<A>(setting:value:)(v2, &v4, v1, v3);
}

uint64_t sub_100152BDC()
{
  return sub_100152B14(&qword_100BF1370, (uint64_t)&protocol conformance descriptor for ReportWeatherMonitor);
}

void sub_100152C00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_100158A50(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100980D18;
    v4[2] = &unk_100980D30;
    v4[3] = &unk_100980D48;
    v4[4] = &unk_100980D18;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for ReportWeatherComponentViewModelFactory()
{
  return objc_opt_self(_TtC7Weather38ReportWeatherComponentViewModelFactory);
}

uint64_t type metadata accessor for ReportWeatherViewStateReducer()
{
  return objc_opt_self(_TtC7Weather29ReportWeatherViewStateReducer);
}

uint64_t type metadata accessor for ReportWeatherViewModelFactory()
{
  return objc_opt_self(_TtC7Weather29ReportWeatherViewModelFactory);
}

void type metadata accessor for PinnedWeatherMapPlacement()
{
  sub_100098884();
}

uint64_t sub_100152CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtC7WeatherP33_C9CD978B5072A12A20FABB0B2C18467645LocationViewCollisionOptionsUpdatingViewState___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100152D44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1009ADAC0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LocationViewCollisionOptionsUpdatingViewState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEEEA8, (uint64_t)&nominal type descriptor for LocationViewCollisionOptionsUpdatingViewState);
}

void sub_100152DD0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

double sub_100152DE0(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  KeyPath = swift_getKeyPath(&unk_1009ADBC8);
  v6 = v1;
  v7 = a1;
  sub_100152EC4(KeyPath, (uint64_t)sub_100152DD0, (uint64_t)&v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100152E40()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1009ADBC8);
  v4 = v0;
  v2 = sub_100051B90(&qword_100BEF030, type metadata accessor for LocationViewCollisionOptionsUpdatingViewState, (uint64_t)&unk_1009ADAD8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100152EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  v6 = sub_100051B90(&qword_100BEF030, type metadata accessor for LocationViewCollisionOptionsUpdatingViewState, (uint64_t)&unk_1009ADAD8);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, a1, a2, a3, &type metadata for () + 1, v6);
}

void sub_100152F64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = "I";
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_1009ADAC0;
    v6[4] = &unk_1009ADB48;
    v6[5] = &unk_1009ADB48;
    sub_100158C28(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = &unk_1009ADB60;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t sub_100153020(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8D64, 1);
}

uint64_t sub_100153030(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationViewCollisionOptionsUpdatingView(0) - 8)
                          + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10015306C()
{
  return sub_100153030((uint64_t (*)(uint64_t))sub_100006FE0);
}

uint64_t sub_100153078()
{
  return sub_100153030((uint64_t (*)(uint64_t))sub_100153084);
}

double sub_100153084()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  v0 = sub_1000BA294(&qword_100BEF028);
  State.wrappedValue.getter(&v3, v0);
  v1 = v3;
  sub_100152DE0(0);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

double sub_1001530EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_1000BC4FC(a1);
  return sub_100153110(v1, v2, v3);
}

double sub_100153110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCD780);
  __chkstk_darwin(v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BCD680);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v30 - v16;
  v18 = type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  if ((*(_BYTE *)(a3 + *(int *)(v18 + 28)) & 1) == 0)
  {
    v20 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v17, a3 + *(int *)(v18 + 24), v5);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v5);
    v21 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_10006F614(a2, (uint64_t)v11);
    sub_10006F614((uint64_t)v17, v21);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v5) == 1)
    {
      sub_100021A68((uint64_t)v17, &qword_100BCD680);
      if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v5) == 1)
      {
        sub_100021A68((uint64_t)v11, &qword_100BCD680);
LABEL_9:
        sub_1000318C0(*(_QWORD *)(a3 + 80), a2);
        return result;
      }
    }
    else
    {
      sub_10006F614((uint64_t)v11, (uint64_t)v15);
      if (_s7Weather24LocationCompositionStateOwet_0(v21, 1, v5) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v21, v5);
        v22 = sub_100051B90((unint64_t *)&qword_100BC3640, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier, (uint64_t)&protocol conformance descriptor for Location.Identifier);
        v23 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v8, v5, v22);
        v24 = *(void (**)(char *, uint64_t))(v6 + 8);
        v24(v8, v5);
        sub_100021A68((uint64_t)v17, &qword_100BCD680);
        v24(v15, v5);
        sub_100021A68((uint64_t)v11, &qword_100BCD680);
        if ((v23 & 1) != 0)
          goto LABEL_9;
        goto LABEL_10;
      }
      sub_100021A68((uint64_t)v17, &qword_100BCD680);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    }
    sub_100021A68((uint64_t)v11, &qword_100BCD780);
LABEL_10:
    v25 = (uint64_t *)(a3 + *(int *)(v20 + 36));
    v27 = *v25;
    v26 = v25[1];
    v30[1] = v27;
    v30[2] = v26;
    v28 = sub_1000BA294(&qword_100BEF028);
    State.wrappedValue.getter(&v31, v28);
    v29 = v31;
    sub_100152DE0(0);
    *(_QWORD *)&result = swift_release(v29).n128_u64[0];
  }
  return result;
}

void sub_100153408(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;

  sub_100153424(a1, *(const void **)(v2 + 16), a2);
}

void sub_100153424(_QWORD *a1@<X0>, const void *a2@<X1>, float *a3@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  float v8;
  double v9;
  _BYTE __dst[80];

  v4 = a1[1];
  if (__OFSUB__(v4, *a1))
  {
    __break(1u);
  }
  else
  {
    v5 = (double)(v4 - *a1);
    memcpy(__dst, a2, 0x49uLL);
    sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
    sub_10008CF58();
    sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
    v6 = v5 + -1.0;
    if (v5 + -1.0 < 0.0)
      v6 = 0.0;
    v7 = v6 * v9;
    sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D4FF4);
    sub_10008CF58();
    sub_10008CED0((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000CEE98);
    v8 = v7 + sub_1007F9520() * v5;
    *a3 = v8;
  }
}

ValueMetadata *type metadata accessor for LocationHeaderViewGradientBackgroundViewModifier()
{
  return &type metadata for LocationHeaderViewGradientBackgroundViewModifier;
}

void sub_100153524(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100018394(a1, a2);
}

uint64_t sub_10015355C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AA9434, 1);
}

void sub_10015356C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  sub_100158D70(319, (unint64_t *)&qword_100BCD708, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for MainViewScenePhaseObservationViewModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100C09FB8, (uint64_t)&nominal type descriptor for MainViewScenePhaseObservationViewModifier);
}

uint64_t sub_100153608(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AC22A0, 1);
}

uint64_t sub_100153618(uint64_t a1, uint64_t a2)
{
  return sub_10034499C(a1, a2, (void (*)(_QWORD))type metadata accessor for MainViewScenePhaseObservationViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10015362C);
}

uint64_t sub_10015362C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3[3];
  v6 = a3[4];
  sub_1000DB418(a3, v5);
  return sub_100159A44(a1, a2, v5, v6);
}

uint64_t sub_100153680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v18[2];

  v18[1] = a1;
  v2 = type metadata accessor for MainViewScenePhaseObservationViewModifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = type metadata accessor for ScenePhase(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015922C();
  sub_100080C0C(v1, (uint64_t)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MainViewScenePhaseObservationViewModifier);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100B92F60, v10 + v4, v9 | 7);
  sub_10007802C((uint64_t)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for MainViewScenePhaseObservationViewModifier);
  v12 = sub_1000BA294(&qword_100C0A040);
  sub_10003D2DC(&qword_100C0A048, &qword_100C0A040);
  v14 = v13;
  sub_10000F1C8(&qword_100C0A050, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
  View.onChange<A>(of:initial:_:)(v8, 1, sub_100153618, v11, v12, v5, v14, v15);
  v16 = swift_release(v11);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v16);
}

uint64_t sub_10015382C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100153874(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_1001538C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for LocationViewObserverViewState();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100153904()
{
  uint64_t *v0;

  return sub_100153910(v0[2], v0[3], v0[4]);
}

uint64_t sub_100153910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DB418((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  sub_100007584();
  *(_BYTE *)(a3 + 72) = 1;
  return sub_10012DFFC();
}

void sub_100153954(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_100158D1C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10098A310;
    v4 = type metadata accessor for LocationViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_10098A328;
      v6[4] = &unk_10098A328;
      v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1001539FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AAD5B4, 1);
}

uint64_t sub_100153A0C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LocationViewObserverViewState();
  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t sub_100153A34(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  sub_1000C3650();
  sub_1000BA550();
  return a1(v1 + v2);
}

uint64_t sub_100153A60()
{
  return sub_100153A34(sub_1000178C0);
}

uint64_t sub_100153A6C()
{
  return sub_100153A34(sub_100153A78);
}

uint64_t sub_100153A78(uint64_t a1)
{
  int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (int *)type metadata accessor for LocationViewObserverView(0);
  v3 = (uint64_t *)(a1 + v2[5]);
  v4 = *v3;
  v5 = v3[1];
  v6 = *((unsigned __int8 *)v3 + 16);
  v7 = type metadata accessor for LocationViewObserverViewState();
  sub_10000F1C8(&qword_100BCD788, (uint64_t (*)(uint64_t))type metadata accessor for LocationViewObserverViewState);
  v9 = StateObject.wrappedValue.getter(v4, v5, v6, v7, v8);
  sub_100022DA0(0, (void (*)(char *, uint64_t))(a1 + v2[6]), *(_QWORD *)(a1 + v2[7]), *(_QWORD *)(a1 + v2[7] + 8), *(_QWORD *)(a1 + v2[9]));
  return swift_release(v9);
}

uint64_t sub_100153B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  sub_1000C3650();
  sub_1000BA550();
  return sub_100153B68(a1, a2, v2 + v5);
}

uint64_t sub_100153B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;

  v50 = a2;
  v4 = type metadata accessor for ScenePhase(0);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v5 = __chkstk_darwin(v4);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v46 = (char *)&v45 - v7;
  v8 = (int *)type metadata accessor for LocationViewObserverView(0);
  __chkstk_darwin(v8);
  v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Location.Identifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BCD780);
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BCD680);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v45 - v21;
  v23 = *(void (**)(char *))(v11 + 16);
  v51 = (void (*)(char *, uint64_t))(a3 + v8[6]);
  v23((char *)&v45 - v21);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v10);
  v24 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_10003773C((uint64_t)v22, (uint64_t)v16, &qword_100BCD680);
  sub_10003773C(v50, v24, &qword_100BCD680);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v10) != 1)
  {
    sub_10003773C((uint64_t)v16, (uint64_t)v20, &qword_100BCD680);
    if (_s7Weather24LocationCompositionStateOwet_0(v24, 1, v10) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v13, v24, v10);
      sub_10000F1C8((unint64_t *)&qword_100BC3640, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v13, v10, v26);
      v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28(v13, v10);
      sub_100021A14((uint64_t)v22, &qword_100BCD680);
      v28(v20, v10);
      sub_100021A14((uint64_t)v16, &qword_100BCD680);
      v25 = v52;
      sub_10000AB54(a3, v52, type metadata accessor for LocationViewObserverView);
      if ((v27 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      sub_1000215BC(v25, type metadata accessor for LocationViewObserverView);
      v36 = 0;
      goto LABEL_10;
    }
    sub_100021A14((uint64_t)v22, &qword_100BCD680);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
LABEL_6:
    sub_100021A14((uint64_t)v16, &qword_100BCD780);
    v25 = v52;
    sub_10000AB54(a3, v52, type metadata accessor for LocationViewObserverView);
    goto LABEL_9;
  }
  sub_100021A14((uint64_t)v22, &qword_100BCD680);
  if (_s7Weather24LocationCompositionStateOwet_0(v24, 1, v10) != 1)
    goto LABEL_6;
  sub_100021A14((uint64_t)v16, &qword_100BCD680);
  v25 = v52;
  sub_10000AB54(a3, v52, type metadata accessor for LocationViewObserverView);
LABEL_8:
  v29 = v46;
  sub_10015922C();
  v31 = v47;
  v30 = v48;
  v32 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for ScenePhase.background(_:), v49);
  sub_10000F1C8(&qword_100C0A050, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
  v34 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v31, v32, v33);
  v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v31, v32);
  v35(v29, v32);
  sub_1000215BC(v25, type metadata accessor for LocationViewObserverView);
  v36 = v34 ^ 1;
LABEL_10:
  v37 = a3 + v8[5];
  v38 = *(_QWORD *)v37;
  v39 = *(_QWORD *)(v37 + 8);
  v40 = *(unsigned __int8 *)(v37 + 16);
  v41 = type metadata accessor for LocationViewObserverViewState();
  sub_10000F1C8(&qword_100BCD788, (uint64_t (*)(uint64_t))type metadata accessor for LocationViewObserverViewState);
  v43 = StateObject.wrappedValue.getter(v38, v39, v40, v41, v42);
  sub_100022DA0(v36 & 1, v51, *(_QWORD *)(a3 + v8[7]), *(_QWORD *)(a3 + v8[7] + 8), *(_QWORD *)(a3 + v8[9]));
  return swift_release(v43);
}

_QWORD *sub_100154018(_QWORD *a1)
{
  destroy for LocationViewerViewWeatherConditionBackground(a1);
  return a1;
}

uint64_t sub_100154044(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for LocationViewerViewWeatherConditionBackground(a2, a1);
  return a2;
}

unint64_t sub_100154078()
{
  unint64_t result;

  result = qword_100BED9C0;
  if (!qword_100BED9C0)
  {
    result = swift_getWitnessTable(&unk_1009AC1A8, &type metadata for LocationViewerViewWeatherConditionBackground);
    atomic_store(result, (unint64_t *)&qword_100BED9C0);
  }
  return result;
}

uint64_t sub_1001540B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8804, 1);
}

unint64_t sub_1001540C8()
{
  unint64_t result;

  result = qword_100BFACC8;
  if (!qword_100BFACC8)
  {
    result = swift_getWitnessTable(&unk_1009C3344, &type metadata for LocationViewRowViewModel);
    atomic_store(result, (unint64_t *)&qword_100BFACC8);
  }
  return result;
}

uint64_t sub_100154104(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[12];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v10[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(319);
    if (v4 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(319);
      if (v5 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for ListPreprocessedDataModel(319);
        if (v6 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(result - 8) + 64;
          v10[5] = "p";
          result = type metadata accessor for UVIndexComponentPreprocessedDataModel(319);
          if (v7 <= 0x3F)
          {
            v10[6] = *(_QWORD *)(result - 8) + 64;
            v10[7] = &unk_1009D2EB0;
            result = type metadata accessor for PressureComponentPreprocessedDataModel(319);
            if (v8 <= 0x3F)
            {
              v10[8] = *(_QWORD *)(result - 8) + 64;
              v10[9] = &unk_1009D2EC8;
              result = type metadata accessor for WeatherConditionBackgroundTimeData(319);
              if (v9 <= 0x3F)
              {
                v10[10] = *(_QWORD *)(result - 8) + 64;
                v10[11] = "p";
                swift_initStructMetadata(a1, 256, 12, v10, a1 + 16);
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_100154238()
{
  unint64_t result;

  result = qword_100BEE710;
  if (!qword_100BEE710)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_100BEE710);
  }
  return result;
}

uint64_t sub_100154274(__n128 a1, __n128 a2, __n128 a3)
{
  uint64_t result;

  a2.n128_u64[0] = 0x4069000000000000;
  a3.n128_u64[0] = 0x4041800000000000;
  a1.n128_u64[0] = 1.0;
  result = sub_1000BC060(a1, a2, a3);
  qword_100CAE6D0 = result;
  return result;
}

uint64_t sub_1001542A4()
{
  uint64_t v0;

  v0 = type metadata accessor for Material(0);
  sub_10004037C(v0, qword_100CAED40);
  sub_1000AECD4(v0, (uint64_t)qword_100CAED40);
  return sub_10000BF40();
}

unint64_t sub_1001542EC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16))
    return 0xD000000000000010;
  else
    return 0xD00000000000001ALL;
}

void sub_100154330(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCB3B0)
  {
    v2 = sub_100075EB0(&qword_100BCB340);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCB3B0);
  }
}

uint64_t sub_100154388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BECFA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001543D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BECFA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100154418(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BECF18)
  {
    v2 = type metadata accessor for Location.Identifier(255);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BECF18);
  }
}

void sub_10015446C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD4970)
  {
    v2 = sub_100075EB0(&qword_100BC3660);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD4970);
  }
}

void sub_1001544C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100075EB0(&qword_100BCB340);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_100154520(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_100075EB0(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_100154578(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BDD6F8)
  {
    v2 = sub_100075EB0((uint64_t *)&unk_100BD35A0);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BDD6F8);
  }
}

_BYTE *sub_1001545D0(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

_BYTE *sub_1001545E8(_BYTE *a1)
{
  uint64_t v1;

  return sub_1001545F0(a1, *(_BYTE *)(v1 + 16));
}

_BYTE *sub_1001545F0(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_100154604(uint64_t a1)
{
  sub_100154638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_100154638(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_release(result);
  return result;
}

void sub_100154650(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BE0B68)
  {
    v2 = type metadata accessor for Font.Leading(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BE0B68);
  }
}

void sub_1001546A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BFB918)
  {
    v2 = type metadata accessor for AppDelegate();
    v3 = type metadata accessor for UIApplicationDelegateAdaptor(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BFB918);
  }
}

unint64_t sub_1001546F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC5AB0;
  if (!qword_100BC5AB0)
  {
    v1 = sub_100075EB0(&qword_100BC5A68);
    sub_100086DA4(&qword_100BC5AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BC5AB0);
  }
  return result;
}

unint64_t sub_100154774()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE5058;
  if (!qword_100BE5058)
  {
    v1 = sub_100075EB0(&qword_100BE5048);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE5058);
  }
  return result;
}

unint64_t sub_1001547B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C16728;
  if (!qword_100C16728)
  {
    v1 = sub_100075EB0(&qword_100C16710);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C16728);
  }
  return result;
}

unint64_t sub_1001547FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0D418;
  if (!qword_100C0D418)
  {
    v1 = sub_100075EB0(&qword_100C0D410);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0D418);
  }
  return result;
}

unint64_t sub_100154840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE1058;
  if (!qword_100BE1058)
  {
    v1 = sub_100075EB0(&qword_100BE1050);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE1058);
  }
  return result;
}

unint64_t sub_100154884()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C17618;
  if (!qword_100C17618)
  {
    v1 = sub_100075EB0(&qword_100C17608);
    sub_100154C64();
    sub_100154BC0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C17618);
  }
  return result;
}

unint64_t sub_1001548F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CB38;
  if (!qword_100C0CB38)
  {
    v1 = sub_100075EB0(&qword_100C0CB40);
    sub_10083C114((uint64_t)&unk_100C0CB48);
    sub_100154A64();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CB38);
  }
  return result;
}

unint64_t sub_100154974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3A80;
  if (!qword_100BE3A80)
  {
    v1 = sub_100075EB0(&qword_100BE39F8);
    sub_100154D08();
    sub_10007AB60((uint64_t)&unk_100BE3A60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3A80);
  }
  return result;
}

unint64_t sub_1001549F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CC88;
  if (!qword_100C0CC88)
  {
    v1 = sub_100075EB0(&qword_100C0CC90);
    sub_100155034();
    sub_100154F5C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CC88);
  }
  return result;
}

unint64_t sub_100154A64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CBA8;
  if (!qword_100C0CBA8)
  {
    v1 = sub_100075EB0(&qword_100C0CBB0);
    sub_100155190();
    sub_100156A08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CBA8);
  }
  return result;
}

unint64_t sub_100154AD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CB58;
  if (!qword_100C0CB58)
  {
    v1 = sub_100075EB0(&qword_100C0CB60);
    sub_100155190();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CB58);
  }
  return result;
}

unint64_t sub_100154B3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0A148;
  if (!qword_100C0A148)
  {
    v1 = sub_100075EB0(&qword_100C0A0B0);
    sub_100155214();
    sub_10003D2DC(&qword_100C0A138, &qword_100C0A140);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0A148);
  }
  return result;
}

unint64_t sub_100154BC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C17638;
  if (!qword_100C17638)
  {
    v1 = sub_100075EB0(&qword_100C175C0);
    sub_10003D310(&qword_100C17640, &qword_100C175D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_10003D310(&qword_100C17648, &qword_100C175B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C17638);
  }
  return result;
}

unint64_t sub_100154C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C17620;
  if (!qword_100C17620)
  {
    v1 = sub_100075EB0(&qword_100C17600);
    sub_10003D310(&qword_100C17628, &qword_100C17610, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_10003D310(&qword_100C17630, &qword_100C175E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C17620);
  }
  return result;
}

unint64_t sub_100154D08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3A28;
  if (!qword_100BE3A28)
  {
    v1 = sub_100075EB0(&qword_100BE3A00);
    sub_10007AB60((uint64_t)&unk_100BE3A30);
    sub_1001587BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3A28);
  }
  return result;
}

unint64_t sub_100154D8C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100C0D428;
  if (!qword_100C0D428)
  {
    v1 = sub_100075EB0(qword_100C0D430);
    v2[0] = sub_100075EB0(&qword_100C0D400);
    v2[1] = &type metadata for Text;
    v2[2] = sub_100157908();
    v2[3] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityRepresentation<A>(representation:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0D428);
  }
  return result;
}

unint64_t sub_100154E38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BFFBD0;
  if (!qword_100BFFBD0)
  {
    v1 = sub_100075EB0(&qword_100BFFBD8);
    v2[0] = &type metadata for Color;
    v2[1] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.setForegroundEffect(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFFBD0);
  }
  return result;
}

unint64_t sub_100154EC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3A68;
  if (!qword_100BE3A68)
  {
    v1 = sub_100075EB0(&qword_100BE3A20);
    sub_10007AB60((uint64_t)&unk_100BE3A70);
    sub_10007AB60((uint64_t)&unk_100BE3A78);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3A68);
  }
  return result;
}

unint64_t sub_100154F5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CCE8;
  if (!qword_100C0CCE8)
  {
    v1 = sub_100075EB0(&qword_100C0CCF0);
    sub_10015699C();
    sub_100156A74();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CCE8);
  }
  return result;
}

unint64_t sub_100154FC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CBF8;
  if (!qword_100C0CBF8)
  {
    v1 = sub_100075EB0(&qword_100C0CC00);
    sub_100156AE0();
    sub_100156930();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CBF8);
  }
  return result;
}

unint64_t sub_100155034()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CC98;
  if (!qword_100C0CC98)
  {
    v1 = sub_100075EB0(&qword_100C0CCA0);
    sub_100156BB8();
    sub_100156B4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CC98);
  }
  return result;
}

unint64_t sub_1001550A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD48;
  if (!qword_100C0CD48)
  {
    v1 = sub_100075EB0(&qword_100C0CD50);
    sub_100156C90();
    sub_100156C24();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD48);
  }
  return result;
}

unint64_t sub_10015510C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C140B8;
  if (!qword_100C140B8)
  {
    v1 = sub_100075EB0(&qword_100C140C0);
    sub_10010FCA0();
    sub_10003D2DC(&qword_100C13EB0, &qword_100C13E80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C140B8);
  }
  return result;
}

unint64_t sub_100155190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CB68;
  if (!qword_100C0CB68)
  {
    v1 = sub_100075EB0(&qword_100C0CB70);
    sub_1001584C8();
    sub_10027248C((uint64_t)&unk_100C0CB98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CB68);
  }
  return result;
}

unint64_t sub_100155214()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0A150;
  if (!qword_100C0A150)
  {
    v1 = sub_100075EB0(&qword_100C0A158);
    sub_10003D2DC((unint64_t *)&unk_100C0A160, &qword_100BDC800);
    sub_100157598();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0A150);
  }
  return result;
}

uint64_t sub_100155298()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for RoundedCornerStyle(0);
  sub_10004037C(v0, qword_100CAE560);
  v1 = sub_1000AECD4(v0, (uint64_t)qword_100CAE560);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for RoundedCornerStyle.continuous(_:), v0);
}

void sub_1001552F0(char a1)
{
  sub_100027F28(a1, (void (*)(void))sub_100054B5C);
}

void sub_100155304(char *a1)
{
  sub_100542E78(a1);
  sub_10004A298();
}

void sub_10015531C(uint64_t a1)
{
  sub_10007EB0C(a1, &qword_100C0A0A0, (void (*)(void))sub_100150D9C);
}

void sub_100155338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1000BA294(&qword_100C0A0A0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100079FBC();
  sub_1000C0BBC(a1);
  sub_10015531C(v1);
  sub_100079F70();
}

void sub_100155390()
{
  sub_1001553AC();
  sub_10004A298();
}

uint64_t sub_1001553AC()
{
  unint64_t v0;

  v0 = sub_100150D9C();
  sub_1000DCB00(v0, (uint64_t)&unk_100B60910);
  return sub_1000BBC08();
}

uint64_t sub_1001553D4(char a1)
{
  char v2;

  v2 = a1 & 1;
  sub_10001921C();
  return EnvironmentValues.subscript.setter(&v2, &type metadata for VerticalSizingBehaviorKey, &type metadata for VerticalSizingBehaviorKey);
}

void sub_100155410(char *a1)
{
  sub_1000BE95C(a1);
  sub_10004A298();
}

void sub_100155428(double a1)
{
  double v1;

  v1 = a1;
  sub_10000E968();
  sub_1000C3584((uint64_t)&v1, (uint64_t)&type metadata for CompressedLocationHeaderHeightKey);
  sub_1000CC7E4();
}

void sub_100155458(double *a1)
{
  sub_1000BED28(a1);
  sub_10004A298();
}

void sub_100155470()
{
  double *v0;

  *v0 = sub_100086228();
  sub_10004A298();
}

void sub_10015548C()
{
  _BYTE *v0;

  *v0 = sub_10003BDC8() & 1;
  sub_10004A298();
}

void sub_1001554AC(char a1)
{
  sub_100027F28(a1, (void (*)(void))sub_1001292A8);
}

void sub_1001554C0(char *a1)
{
  sub_1000D9770(a1);
  sub_10004A298();
}

void sub_1001554D8()
{
  _BYTE *v0;

  *v0 = sub_1000E7250() & 1;
  sub_10004A298();
}

uint64_t sub_1001554F8()
{
  return sub_100054AD4((void (*)(void))sub_1001292A8);
}

void sub_10015550C(uint64_t a1)
{
  sub_10007EB0C(a1, &qword_100BC5A68, (void (*)(void))sub_100030F88);
}

void sub_100155528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100079FD4();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100079FBC();
  sub_10009BF14(a1, v1);
  sub_10015550C(v1);
  sub_100079F70();
}

void sub_100155580(int a1)
{
  __int16 v1;
  char v2;
  char v3;

  v1 = a1 & 0x101;
  v2 = BYTE2(a1) & 1;
  v3 = HIBYTE(a1) & 1;
  sub_1000766F4();
  sub_1000C3584((uint64_t)&v1, (uint64_t)&unk_100B607B0);
  sub_1000CC7E4();
}

void sub_1001555CC(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;

  if (a1[3])
    v1 = 0x1000000;
  else
    v1 = 0;
  if (a1[2])
    v2 = 0x10000;
  else
    v2 = 0;
  if (a1[1])
    v3 = 256;
  else
    v3 = 0;
  sub_100155580(v3 | *a1 | v2 | v1);
  sub_10004A298();
}

void sub_100155628(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;

  v2 = a1;
  v3 = a2 & 1;
  sub_100130640();
  sub_1000C3584((uint64_t)&v2, (uint64_t)&type metadata for MapTransitionNamespaceKey);
  sub_1000CC7E4();
}

void sub_100155660(uint64_t a1)
{
  sub_100155628(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_10004A298();
}

void sub_100155688(uint64_t a1@<X8>)
{
  char v2;

  *(_QWORD *)a1 = sub_1001556B4();
  *(_BYTE *)(a1 + 8) = v2 & 1;
  sub_10004A298();
}

uint64_t sub_1001556B4()
{
  uint64_t v1;

  sub_100130640();
  sub_1000C2448((uint64_t)&type metadata for MapTransitionNamespaceKey);
  return v1;
}

void sub_1001556EC(char a1)
{
  sub_100027F28(a1, (void (*)(void))sub_100131E94);
}

void sub_100155700(char *a1)
{
  sub_1000B4C5C(a1);
  sub_10004A298();
}

void sub_100155718()
{
  _BYTE *v0;

  *v0 = sub_1000C61C8() & 1;
  sub_10004A298();
}

uint64_t sub_100155738()
{
  return sub_100054AD4((void (*)(void))sub_100131E94);
}

void sub_10015574C(char a1)
{
  char v1;

  v1 = a1;
  sub_100038DF0();
  sub_1000C3584((uint64_t)&v1, (uint64_t)&unk_100B60830);
  sub_1000CC7E4();
}

void sub_10015577C(char *a1)
{
  sub_1001104A8(a1);
  sub_10004A298();
}

void sub_100155794(char a1)
{
  sub_100027F28(a1, (void (*)(void))sub_100054B0C);
}

void sub_1001557A8(char *a1)
{
  sub_10045B970(a1);
  sub_10004A298();
}

void sub_1001557C0()
{
  uint64_t v0;

  v0 = sub_10045B990();
  sub_1000C0E60(v0);
  sub_10004A298();
}

uint64_t sub_1001557DC()
{
  return sub_100054AD4((void (*)(void))sub_100127F90);
}

void sub_1001557F0()
{
  uint64_t v0;

  v0 = sub_10011E264();
  sub_1000C0E60(v0);
  sub_10004A298();
}

uint64_t sub_10015580C()
{
  return sub_100054AD4((void (*)(void))sub_100137D58);
}

void sub_100155820(char a1)
{
  sub_100027F28(a1, (void (*)(void))sub_10013B154);
}

void sub_100155834(char *a1)
{
  sub_10009F064(a1);
  sub_10004A298();
}

void sub_10015584C()
{
  uint64_t v0;

  v0 = sub_10009C7FC();
  sub_1000C0E60(v0);
  sub_10004A298();
}

uint64_t sub_100155868()
{
  return sub_100054AD4((void (*)(void))sub_10013B154);
}

void sub_10015587C(uint64_t a1)
{
  sub_10007EB0C(a1, &qword_100BC5B30, (void (*)(void))sub_10013B888);
}

void sub_100155898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  sub_100079FD4();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100079FBC();
  sub_1000DCA38();
  sub_100037768(v2, v3, v4);
  sub_10015587C(v0);
  sub_100079F70();
}

void sub_1001558F0()
{
  sub_10015590C();
  sub_10004A298();
}

uint64_t sub_10015590C()
{
  unint64_t v0;

  v0 = sub_10013B888();
  sub_1000DCB00(v0, (uint64_t)&type metadata for ForegroundEffectKey);
  return sub_1000BBC08();
}

void sub_100155934(char a1)
{
  sub_100027F28(a1, (void (*)(void))sub_10013DE8C);
}

void sub_100155948(char *a1)
{
  sub_1000FCCA8(a1);
  sub_10004A298();
}

void sub_100155960()
{
  uint64_t v0;

  v0 = sub_10009E6B4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

uint64_t sub_10015597C()
{
  return sub_100054AD4((void (*)(void))sub_10013DE8C);
}

void sub_100155990(uint64_t a1, uint64_t a2)
{
  sub_1001B8D80(a1, a2, (void (*)(uint64_t, uint64_t))sub_10013EB68);
}

void sub_1001559A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10003BDE8(a1);
  sub_100155990(v1, v2);
  sub_10004A298();
}

void sub_1001559C0()
{
  uint64_t v0;
  char v1;

  sub_10011E804();
  *(_QWORD *)v0 = sub_1001559E8();
  *(_BYTE *)(v0 + 8) = v1 & 1;
  sub_10004A298();
}

uint64_t sub_1001559E8()
{
  return sub_1001B8D30((void (*)(void))sub_10013EB68);
}

unint64_t sub_1001559FC()
{
  unint64_t result;

  result = qword_100BCDD48[0];
  if (!qword_100BCDD48[0])
  {
    result = swift_getWitnessTable(&unk_10098AD38, &_s15CornerRadiusKeyVN);
    atomic_store(result, qword_100BCDD48);
  }
  return result;
}

double sub_100155A38@<D0>(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  double result;

  v2 = sub_100155ABC();
  result = *(double *)v2;
  *a1 = *v2;
  return result;
}

uint64_t sub_100155A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100116BFC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

void sub_100155AB0()
{
  qword_100BCDD38 = 0;
}

uint64_t *sub_100155ABC()
{
  if (qword_100BC1EE8 != -1)
    swift_once(&qword_100BC1EE8, sub_100155AB0);
  return &qword_100BCDD38;
}

uint64_t sub_100155AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for DisplayMetrics(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100099864();
  sub_10000A8D4(a1, v1);
  sub_10004B748();
  sub_1000C3584(v1, (uint64_t)&unk_100B60870);
  return sub_100147AE4(a1);
}

void sub_100155B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100529A48(a1, a2, a3, a4, type metadata accessor for DisplayMetrics, (void (*)(char *))sub_100155AFC);
}

uint64_t sub_100155B80(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[3];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  sub_10001918C();
  return EnvironmentValues.subscript.setter(v3, &type metadata for SceneMetricsEnvironmentKey, &type metadata for SceneMetricsEnvironmentKey);
}

void sub_100155BC4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;

  sub_1000BAA68(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9, v10);
  sub_1000BBCDC();
}

uint64_t sub_100155BE0(void *__src)
{
  _BYTE __dst[72];

  memcpy(__dst, __src, sizeof(__dst));
  sub_100076608();
  return sub_1000C3584((uint64_t)__dst, (uint64_t)&unk_100B60890);
}

void sub_100155C20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  char __src[72];

  sub_1000FC4E4(a1, a2, a3, a4, a5, a6, a7, a8, v8, __src[0]);
  sub_100155BE0(__src);
  sub_100098918();
}

uint64_t sub_100155C44(double a1)
{
  double v2;

  v2 = a1;
  sub_1001559FC();
  return EnvironmentValues.subscript.setter(&v2, &_s15CornerRadiusKeyVN, &_s15CornerRadiusKeyVN);
}

void sub_100155C7C(double *a1)
{
  sub_100542E58(a1);
  sub_10004A298();
}

void sub_100155C94()
{
  double *v0;

  *v0 = sub_10009ED9C();
  sub_10004A298();
}

double sub_100155CB0()
{
  double v1;

  sub_1001559FC();
  EnvironmentValues.subscript.getter(&_s15CornerRadiusKeyVN, &_s15CornerRadiusKeyVN);
  return v1;
}

void sub_100155CE8()
{
  EnvironmentValues.colorSchemeContrast.getter();
  sub_10004A298();
}

unint64_t sub_100155D04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD0908;
  if (!qword_100BD0908)
  {
    v1 = type metadata accessor for PlainButtonStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PlainButtonStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100BD0908);
  }
  return result;
}

unint64_t sub_100155D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C09F00;
  if (!qword_100C09F00)
  {
    v1 = sub_100075EB0(&qword_100C04B78);
    sub_10000F1C8(&qword_100C09F08, (uint64_t (*)(uint64_t))&type metadata accessor for LegibilityWeight);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100C09F00);
  }
  return result;
}

unint64_t sub_100155DC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3B10;
  if (!qword_100BE3B10)
  {
    v1 = sub_100075EB0(&qword_100BE3980);
    sub_10015605C();
    sub_10007AB60((uint64_t)&unk_100BE3B48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3B10);
  }
  return result;
}

unint64_t sub_100155E44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C176A0;
  if (!qword_100C176A0)
  {
    v1 = sub_100075EB0(&qword_100C17690);
    sub_100156214();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C176A0);
  }
  return result;
}

unint64_t sub_100155EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE7E0;
  if (!qword_100BEE7E0)
  {
    v1 = sub_100075EB0(&qword_100BEE778);
    sub_100345634((uint64_t)&unk_100BEE790);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE7E0);
  }
  return result;
}

unint64_t sub_100155F54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF48C0;
  if (!qword_100BF48C0)
  {
    v1 = sub_100075EB0(&qword_100BF4888);
    sub_10015650C();
    sub_10003D310((unint64_t *)&unk_100C0A590, &qword_100BD0658, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF48C0);
  }
  return result;
}

unint64_t sub_100155FD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDC0F8;
  if (!qword_100BDC0F8)
  {
    v1 = sub_100075EB0(&qword_100BDC0F0);
    sub_100156798();
    sub_10003D310(&qword_100BDC128, &qword_100BDC130, (uint64_t)&protocol conformance descriptor for _OverlayPreferenceModifier<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDC0F8);
  }
  return result;
}

unint64_t sub_10015605C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3B18;
  if (!qword_100BE3B18)
  {
    v1 = sub_100075EB0(&qword_100BE3978);
    sub_10015681C();
    sub_10007AB60((uint64_t)&unk_100BE3B38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3B18);
  }
  return result;
}

void sub_1001560E0()
{
  sub_10071A6AC((uint64_t)&unk_100C015D0);
}

unint64_t sub_100156104()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE6F0;
  if (!qword_100BEE6F0)
  {
    v1 = sub_100075EB0(&qword_100BEE6F8);
    sub_100345634((uint64_t)&unk_100BEE700);
    sub_10007AB60((uint64_t)&qword_100BC4B98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE6F0);
  }
  return result;
}

unint64_t sub_1001561A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C14018;
  if (!qword_100C14018)
  {
    v1 = sub_100075EB0(&qword_100C13FF0);
    sub_100156D80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C14018);
  }
  return result;
}

unint64_t sub_100156214()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C176A8;
  if (!qword_100C176A8)
  {
    v1 = sub_100075EB0(&qword_100C17688);
    sub_10015702C();
    sub_10003D310(&qword_100BC3AE0, &qword_100BC3AE8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C176A8);
  }
  return result;
}

unint64_t sub_100156298()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFBCC8;
  if (!qword_100BFBCC8)
  {
    v1 = sub_100075EB0(&qword_100BFBCA8);
    sub_1001570C8();
    sub_10003D2DC((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFBCC8);
  }
  return result;
}

unint64_t sub_10015631C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEEFF8;
  if (!qword_100BEEFF8)
  {
    v1 = sub_100075EB0(&qword_100BEEFF0);
    sub_100157200();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEEFF8);
  }
  return result;
}

unint64_t sub_100156388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4230;
  if (!qword_100BC4230)
  {
    v1 = sub_100075EB0(&qword_100BC4110);
    sub_100157DE0((uint64_t)&unk_100BC4238);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC4230);
  }
  return result;
}

unint64_t sub_100156414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4250;
  if (!qword_100BC4250)
  {
    v1 = sub_100075EB0(&qword_100BC4130);
    sub_100157DE0((uint64_t)&unk_100BC4258);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC4250);
  }
  return result;
}

unint64_t sub_1001564A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3B70;
  if (!qword_100BE3B70)
  {
    v1 = sub_100075EB0(&qword_100BE39A8);
    sub_10045AFF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3B70);
  }
  return result;
}

unint64_t sub_10015650C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF48C8;
  if (!qword_100BF48C8)
  {
    v1 = sub_100075EB0(&qword_100BF4880);
    sub_10015782C();
    sub_10003D310(&qword_100BD0660, &qword_100BD0668, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF48C8);
  }
  return result;
}

unint64_t sub_100156590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCDDE8;
  if (!qword_100BCDDE8)
  {
    v1 = sub_100075EB0(&qword_100BCDDE0);
    sub_100157A98();
    sub_10005F124(&qword_100BCDE00, &qword_100BCDE08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCDDE8);
  }
  return result;
}

unint64_t sub_100156614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC41B0;
  if (!qword_100BC41B0)
  {
    v1 = sub_100075EB0(&qword_100BC4090);
    sub_100157DE0((uint64_t)&unk_100BC41B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC41B0);
  }
  return result;
}

unint64_t sub_1001566A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3BE8;
  if (!qword_100BE3BE8)
  {
    v1 = sub_100075EB0(&qword_100BE3AE8);
    sub_10045B38C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3BE8);
  }
  return result;
}

unint64_t sub_10015670C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4270;
  if (!qword_100BC4270)
  {
    v1 = sub_100075EB0(&qword_100BC4150);
    sub_100157DE0((uint64_t)&unk_100BC4278);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC4270);
  }
  return result;
}

unint64_t sub_100156798()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDC100;
  if (!qword_100BDC100)
  {
    v1 = sub_100075EB0(&qword_100BDC0D8);
    sub_100157EF8();
    sub_10003D310(&qword_100BDC118, &qword_100BDC120, (uint64_t)&protocol conformance descriptor for _PreferenceWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDC100);
  }
  return result;
}

unint64_t sub_10015681C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3B20;
  if (!qword_100BE3B20)
  {
    v1 = sub_100075EB0(&qword_100BE3970);
    sub_10045AEE8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3B20);
  }
  return result;
}

void sub_100156888()
{
  sub_10071A6AC((uint64_t)&unk_100C015D8);
}

unint64_t sub_1001568AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE34C0;
  if (!qword_100BE34C0)
  {
    v1 = sub_100075EB0(&qword_100BE3458);
    sub_100158000();
    sub_10007AB60((uint64_t)&unk_100BC42A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE34C0);
  }
  return result;
}

unint64_t sub_100156930()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CC38;
  if (!qword_100C0CC38)
  {
    v1 = sub_100075EB0(&qword_100C0CC40);
    sub_100158120();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CC38);
  }
  return result;
}

unint64_t sub_10015699C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CCF8;
  if (!qword_100C0CCF8)
  {
    v1 = sub_100075EB0(&qword_100C0CD00);
    sub_1001581BC();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CCF8);
  }
  return result;
}

unint64_t sub_100156A08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CBB8;
  if (!qword_100C0CBB8)
  {
    v1 = sub_100075EB0(&qword_100C0CBC0);
    sub_100158258();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CBB8);
  }
  return result;
}

unint64_t sub_100156A74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD18;
  if (!qword_100C0CD18)
  {
    v1 = sub_100075EB0(&qword_100C0CD20);
    sub_1001582F4();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD18);
  }
  return result;
}

unint64_t sub_100156AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CC08;
  if (!qword_100C0CC08)
  {
    v1 = sub_100075EB0(&qword_100C0CC10);
    sub_100158390();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CC08);
  }
  return result;
}

unint64_t sub_100156B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CCC8;
  if (!qword_100C0CCC8)
  {
    v1 = sub_100075EB0(&qword_100C0CCD0);
    sub_10015842C();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CCC8);
  }
  return result;
}

unint64_t sub_100156BB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CCA8;
  if (!qword_100C0CCA8)
  {
    v1 = sub_100075EB0(&qword_100C0CCB0);
    sub_100158564();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CCA8);
  }
  return result;
}

unint64_t sub_100156C24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD78;
  if (!qword_100C0CD78)
  {
    v1 = sub_100075EB0(&qword_100C0CD80);
    sub_100158600();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD78);
  }
  return result;
}

unint64_t sub_100156C90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD58;
  if (!qword_100C0CD58)
  {
    v1 = sub_100075EB0(&qword_100C0CD60);
    sub_10015869C();
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD58);
  }
  return result;
}

unint64_t sub_100156CFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00C68;
  if (!qword_100C00C68)
  {
    v1 = sub_100075EB0(&qword_100C00C10);
    sub_100158738();
    sub_10007A100((uint64_t)&unk_100C00C80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C68);
  }
  return result;
}

unint64_t sub_100156D80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C14020;
  if (!qword_100C14020)
  {
    v1 = sub_100075EB0(&qword_100C13FE8);
    sub_10003D2DC(&qword_100C14028, &qword_100C13FE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C14020);
  }
  return result;
}

unint64_t sub_100156E04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFBC78;
  if (!qword_100BFBC78)
  {
    v1 = sub_100075EB0(&qword_100BFBC68);
    sub_10003D2DC(&qword_100BFBC80, &qword_100BFBC60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFBC78);
  }
  return result;
}

unint64_t sub_100156E88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDE290;
  if (!qword_100BDE290)
  {
    v1 = sub_100075EB0(&qword_100BDE160);
    sub_1001CDAD0(&qword_100BDE298, &qword_100BDE150);
    sub_1001CDAD0(&qword_100BDE2A0, &qword_100BDE2A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDE290);
  }
  return result;
}

unint64_t sub_100156F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB440;
  if (!qword_100BCB440)
  {
    v1 = sub_100075EB0(&qword_100BCB438);
    sub_10003D310(&qword_100BCB448, &qword_100BCB428, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB440);
  }
  return result;
}

unint64_t sub_100156FA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE448;
  if (!qword_100BEE448)
  {
    v1 = sub_100075EB0(&qword_100BEE430);
    sub_10007AB60((uint64_t)&unk_100BEE450);
    sub_10054072C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE448);
  }
  return result;
}

unint64_t sub_10015702C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C176B0;
  if (!qword_100C176B0)
  {
    v1 = sub_100075EB0(&qword_100C17680);
    sub_10003D310(&qword_100C176B8, &qword_100C176C0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10003D310(&qword_100BC4F80, &qword_100BC4F88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C176B0);
  }
  return result;
}

unint64_t sub_1001570C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BFBCD0;
  if (!qword_100BFBCD0)
  {
    v1 = sub_100075EB0(&qword_100BFBCA0);
    sub_10003D2DC(&qword_100BFBCD8, &qword_100BFBC98);
    sub_10003D2DC(&qword_100BC4E20, &qword_100BC4E28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BFBCD0);
  }
  return result;
}

unint64_t sub_100157164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDBA0;
  if (!qword_100BEDBA0)
  {
    v1 = sub_100075EB0(&qword_100BEDB88);
    sub_10007AB60((uint64_t)&unk_100BEDBA8);
    sub_10007AB60((uint64_t)&unk_100BC6718);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDBA0);
  }
  return result;
}

unint64_t sub_100157200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC5628;
  if (!qword_100BC5628)
  {
    v1 = sub_100075EB0(&qword_100BC5620);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC5628);
  }
  return result;
}

unint64_t sub_100157264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDB50;
  if (!qword_100BEDB50)
  {
    v1 = sub_100075EB0(&qword_100BEDB40);
    sub_10007AB60((uint64_t)&unk_100BEDB58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDB50);
  }
  return result;
}

unint64_t sub_1001572E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100C05968;
  if (!qword_100C05968)
  {
    v1 = sub_100075EB0(&qword_100C05950);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.textSizing(_:)>>, 1);
    sub_10003D2DC(&qword_100BCD8A0, &qword_100BCD8A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C05968);
  }
  return result;
}

unint64_t sub_100157390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD890;
  if (!qword_100BCD890)
  {
    v1 = sub_100075EB0(&qword_100BCD898);
    sub_10003D2DC(&qword_100BCD8A0, &qword_100BCD8A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD890);
  }
  return result;
}

unint64_t sub_100157414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCDE8;
  if (!qword_100BCCDE8)
  {
    v1 = sub_100075EB0(&qword_100BCCDF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCCDE8);
  }
  return result;
}

unint64_t sub_100157478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE2B8;
  if (!qword_100BEE2B8)
  {
    v1 = sub_100075EB0(&qword_100BEE2C0);
    sub_10007A100((uint64_t)&qword_100BCB3F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE2B8);
  }
  return result;
}

unint64_t sub_1001574FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C11140;
  if (!qword_100C11140)
  {
    v1 = sub_100075EB0(&qword_100C110E8);
    sub_10000F1C8(&qword_100BDFC48, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_10003D2DC(&qword_100BE1E58, &qword_100BE1E60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C11140);
  }
  return result;
}

unint64_t sub_100157598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0A170;
  if (!qword_100C0A170)
  {
    v1 = sub_100075EB0(&qword_100C0A178);
    sub_10003D2DC(&qword_100C0A180, &qword_100C0A188);
    sub_1001CDA94();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0A170);
  }
  return result;
}

unint64_t sub_10015761C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE5050;
  if (!qword_100BE5050)
  {
    v1 = sub_100075EB0(&qword_100BE5040);
    sub_100154774();
    sub_10014FA08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE5050);
  }
  return result;
}

unint64_t sub_100157688()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE798;
  if (!qword_100BEE798)
  {
    v1 = sub_100075EB0(&qword_100BEE768);
    sub_10007AB60((uint64_t)&unk_100BEE7A0);
    sub_10007AB60((uint64_t)&unk_100BEE7A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE798);
  }
  return result;
}

unint64_t sub_100157724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE2808;
  if (!qword_100BE2808)
  {
    v1 = sub_100075EB0(&qword_100BE2468);
    sub_10007AB60((uint64_t)&unk_100BE2810);
    sub_10007AB60((uint64_t)&unk_100BD3CF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE2808);
  }
  return result;
}

unint64_t sub_1001577C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C16720;
  if (!qword_100C16720)
  {
    v1 = sub_100075EB0(&qword_100C16718);
    sub_1001547B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C16720);
  }
  return result;
}

unint64_t sub_10015782C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF48D0;
  if (!qword_100BF48D0)
  {
    v1 = sub_100075EB0(&qword_100BF4878);
    sub_10003D310(&qword_100BF48D8, &qword_100BF48A0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10003D310(&qword_100BF48E0, &qword_100BF4898, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF48D0);
  }
  return result;
}

uint64_t sub_1001578C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100C0D400);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100157908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0D420;
  if (!qword_100C0D420)
  {
    v1 = sub_100075EB0(&qword_100C0D400);
    sub_1001547FC();
    sub_10025B380();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0D420);
  }
  return result;
}

unint64_t sub_100157974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD3D08;
  if (!qword_100BD3D08)
  {
    v1 = sub_100075EB0(&qword_100BD3C20);
    sub_10007AB60((uint64_t)&unk_100BD3D10);
    sub_10007AB60((uint64_t)&unk_100BD3D18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD3D08);
  }
  return result;
}

uint64_t sub_100157A10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCDDD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100157A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCDDD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100157A98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCDDF0;
  if (!qword_100BCDDF0)
  {
    v1 = sub_100075EB0(&qword_100BCDDD0);
    sub_10005F124(&qword_100BCDDF8, &qword_100BCDDD8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCDDF0);
  }
  return result;
}

unint64_t sub_100157B1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE0BB0;
  if (!qword_100BE0BB0)
  {
    v1 = sub_100075EB0(&qword_100BE0BA0);
    sub_10005F124(&qword_100BE0BB8, &qword_100BE0BA8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10005F124(&qword_100BC4E20, &qword_100BC4E28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE0BB0);
  }
  return result;
}

unint64_t sub_100157BB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE6C8;
  if (!qword_100BEE6C8)
  {
    v1 = sub_100075EB0(&qword_100BEE288);
    sub_10007AB60((uint64_t)&unk_100BEE6D0);
    sub_10014D8B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE6C8);
  }
  return result;
}

unint64_t sub_100157C3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE6A8;
  if (!qword_100BEE6A8)
  {
    v1 = sub_100075EB0(&qword_100BEE270);
    sub_10007AB60((uint64_t)&unk_100BEE6B0);
    sub_10007AB60((uint64_t)&unk_100BCCB60);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE6A8);
  }
  return result;
}

unint64_t sub_100157CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE6B8;
  if (!qword_100BEE6B8)
  {
    v1 = sub_100075EB0(&qword_100BEE280);
    sub_10007AB60((uint64_t)&unk_100BEE6C0);
    sub_10007AB60((uint64_t)&unk_100BD0890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE6B8);
  }
  return result;
}

unint64_t sub_100157D74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE1060;
  if (!qword_100BE1060)
  {
    v1 = sub_100075EB0(&qword_100BE1068);
    sub_100154840();
    sub_10025B380();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE1060);
  }
  return result;
}

unint64_t sub_100157DE0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10009987C(a1);
  if (!result)
  {
    v5 = v4;
    v6 = sub_100075EB0(v3);
    sub_10007AB60(v5);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100157E5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD43F0;
  if (!qword_100BD43F0)
  {
    v1 = sub_100075EB0(&qword_100BD4320);
    sub_10003D2DC(&qword_100BD43F8, &qword_100BD4330);
    sub_10003D2DC(&qword_100BD4400, &qword_100BD4328);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD43F0);
  }
  return result;
}

unint64_t sub_100157EF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDC108;
  if (!qword_100BDC108)
  {
    v1 = sub_100075EB0(&qword_100BDC0D0);
    sub_10003D310(&qword_100BDC110, &qword_100BDC0E0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDC108);
  }
  return result;
}

unint64_t sub_100157F7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C015E0;
  if (!qword_100C015E0)
  {
    v1 = sub_100075EB0(&qword_100C015A0);
    sub_10007A100((uint64_t)&unk_100C015E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C015E0);
  }
  return result;
}

unint64_t sub_100158000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3498;
  if (!qword_100BE3498)
  {
    v1 = sub_100075EB0(&qword_100BE3468);
    sub_10007A100((uint64_t)&unk_100BE34A0);
    sub_10007AB60((uint64_t)&unk_100BE34A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3498);
  }
  return result;
}

unint64_t sub_10015809C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C015F0;
  if (!qword_100C015F0)
  {
    v1 = sub_100075EB0(&qword_100C01590);
    sub_10007A100((uint64_t)&unk_100C015F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C015F0);
  }
  return result;
}

unint64_t sub_100158120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CC48;
  if (!qword_100C0CC48)
  {
    v1 = sub_100075EB0(&qword_100C0CC50);
    sub_10027248C((uint64_t)&unk_100C0CC58);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CC48);
  }
  return result;
}

unint64_t sub_1001581BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD08;
  if (!qword_100C0CD08)
  {
    v1 = sub_100075EB0(&qword_100C0CD10);
    sub_10027248C((uint64_t)&unk_100BD07A0);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD08);
  }
  return result;
}

unint64_t sub_100158258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CBC8;
  if (!qword_100C0CBC8)
  {
    v1 = sub_100075EB0(&qword_100C0CBD0);
    sub_10027248C((uint64_t)&unk_100C0CBD8);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CBC8);
  }
  return result;
}

unint64_t sub_1001582F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD28;
  if (!qword_100C0CD28)
  {
    v1 = sub_100075EB0(&qword_100C0CD30);
    sub_10027248C((uint64_t)&unk_100BD07B0);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD28);
  }
  return result;
}

unint64_t sub_100158390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CC18;
  if (!qword_100C0CC18)
  {
    v1 = sub_100075EB0(&qword_100C0CC20);
    sub_10027248C((uint64_t)&unk_100C0CC28);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CC18);
  }
  return result;
}

unint64_t sub_10015842C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CCD8;
  if (!qword_100C0CCD8)
  {
    v1 = sub_100075EB0(&qword_100C0CCE0);
    sub_10027248C((uint64_t)&unk_100BD0780);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CCD8);
  }
  return result;
}

unint64_t sub_1001584C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CB78;
  if (!qword_100C0CB78)
  {
    v1 = sub_100075EB0(&qword_100C0CB80);
    sub_10027248C((uint64_t)&unk_100C0CB88);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CB78);
  }
  return result;
}

unint64_t sub_100158564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CCB8;
  if (!qword_100C0CCB8)
  {
    v1 = sub_100075EB0(&qword_100C0CCC0);
    sub_10027248C((uint64_t)&unk_100BD0770);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CCB8);
  }
  return result;
}

unint64_t sub_100158600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD88;
  if (!qword_100C0CD88)
  {
    v1 = sub_100075EB0(&qword_100C0CD90);
    sub_10027248C((uint64_t)&unk_100BD07F0);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD88);
  }
  return result;
}

unint64_t sub_10015869C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C0CD68;
  if (!qword_100C0CD68)
  {
    v1 = sub_100075EB0(&qword_100C0CD70);
    sub_10027248C((uint64_t)&unk_100BD07E0);
    sub_10027248C((uint64_t)&qword_100BC66D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C0CD68);
  }
  return result;
}

unint64_t sub_100158738()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C00C70;
  if (!qword_100C00C70)
  {
    v1 = sub_100075EB0(&qword_100C00C08);
    sub_10012F2B0();
    sub_10007A100((uint64_t)&qword_100BC6768);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C00C70);
  }
  return result;
}

unint64_t sub_1001587BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE3A40;
  if (!qword_100BE3A40)
  {
    v1 = sub_100075EB0(&qword_100BE3A48);
    sub_10007AB60((uint64_t)&unk_100BE3A50);
    sub_10007AB60((uint64_t)&unk_100BD9910);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE3A40);
  }
  return result;
}

_QWORD *sub_100158858(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

void sub_100158880(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC38A0)
  {
    v2 = sub_10010D1D0();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for Double, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC38A0);
  }
}

void sub_1001588D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
  sub_100079F70();
}

void sub_10015892C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD33F0)
  {
    v2 = sub_10010FE84();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for CGFloat, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD33F0);
  }
}

uint64_t sub_100158984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, a1, v5);
}

void sub_1001589C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  sub_10008900C();
  a17 = v21;
  a18 = v22;
  sub_1000C6C6C();
  sub_10009BD9C();
  __chkstk_darwin(v23);
  v25 = (char *)&a9 - v24;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))((char *)&a9 - v24, v19, v18);
  sub_1000916FC((uint64_t)v25, v20);
  sub_1000C22F0();
  sub_10009D300();
}

uint64_t sub_100158A28(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

void sub_100158A50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC6588)
  {
    v2 = sub_100075EB0(&qword_100BC6510);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC6588);
  }
}

void sub_100158AA8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v4 = sub_100075EB0(a3);
    v5 = sub_10004A380(v4);
    if (!v6)
      atomic_store(v5, a2);
  }
  sub_100079F70();
}

void sub_100158AF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC5C88)
  {
    v2 = sub_100075EB0(&qword_100BC5A68);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC5C88);
  }
}

void sub_100158B48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_100158B94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCD3F8)
  {
    v2 = type metadata accessor for ColorSchemeContrast(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCD3F8);
  }
}

void sub_100158BE8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v4 = sub_100075EB0(a3);
    v5 = sub_1000C6FB0(v4);
    if (!v6)
      atomic_store(v5, a2);
  }
  sub_10004A298();
}

void sub_100158C28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC3880)
  {
    v2 = type metadata accessor for LayoutDirection(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC3880);
  }
}

void sub_100158C7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_100158CD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v4 = a3(255);
    v5 = sub_10004A380(v4);
    if (!v6)
      atomic_store(v5, a2);
  }
  sub_100079F70();
}

void sub_100158D1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCD708)
  {
    v2 = type metadata accessor for ScenePhase(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCD708);
  }
}

void sub_100158D70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v4 = a3(255);
    v5 = sub_1000C6FB0(v4);
    if (!v6)
      atomic_store(v5, a2);
  }
  sub_10004A298();
}

void sub_100158DB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC3888)
  {
    v2 = type metadata accessor for ContentSizeCategory(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC3888);
  }
}

void sub_100158E04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC3890)
  {
    v2 = type metadata accessor for DisplayMetrics(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC3890);
  }
}

void sub_100158E58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD8738)
  {
    v2 = sub_100075EB0(&qword_100BC5B30);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD8738);
  }
}

void sub_100158EB0()
{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD, _QWORD);
  void (*v2)(_QWORD, _QWORD, _QWORD);
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_1000D9280();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100098694();
  if ((v8 & 0x100) == 0)
  {
    v28 = v6;
    sub_10009D4E0();
    v21 = static os_log_type_t.fault.getter(v13, v14, v15, v16, v17, v18, v19, v20);
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v26 = v4;
      v23 = (uint8_t *)sub_100098710(12);
      v27 = v2;
      v24 = sub_100098710(32);
      v30[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v29 = sub_1000CE1C8(v28, v26, v30);
      sub_1000C0B94((uint64_t)&v29, (uint64_t)v30);
      sub_10009D7A0((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23);
      sub_1000988D8(v24);
      v25 = v24;
      v2 = v27;
      sub_1000986F0(v25);
      sub_1000986F0((uint64_t)v23);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v0, v10);
    v2(v10, v8, 0);
    sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  sub_100098640();
}

void sub_100159030()
{
  sub_100158EB0();
}

void sub_10015905C()
{
  sub_1000BFEE4();
}

void sub_100159084()
{
  sub_1000CFF38();
}

#error "10015911C: call analysis failed (funcsize=66)"

void sub_1001591C8()
{
  sub_1000BFEE4();
}

void sub_1001591FC()
{
  sub_1000BFEE4();
}

void sub_10015922C()
{
  sub_1000BFEE4();
}

#error "1001592C8: call analysis failed (funcsize=66)"

unint64_t sub_100159374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100C14490;
  if (!qword_100C14490)
  {
    v1 = sub_100075EB0(&qword_100C14488);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100C14490);
  }
  return result;
}

double sub_1001593B8()
{
  double result;

  result = 0.0;
  xmmword_100CAEF78 = 0u;
  *(_OWORD *)&qword_100CAEF88 = 0u;
  return result;
}

uint64_t sub_1001593CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BD2A90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10015940C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD2A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCC768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10015949C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCC7D8)
  {
    v2 = type metadata accessor for NWActivity.CompletionReason(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCC7D8);
  }
}

void sub_1001594F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100BD60B8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100BD60B8);
  }
}

void sub_100159538(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD60B0)
  {
    v2 = type metadata accessor for MicaBackgroundAnimation(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD60B0);
  }
}

void sub_10015958C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100C0B050)
  {
    v0 = type metadata accessor for Published(0, &type metadata for LocationViewCollisionOptions.PublishedValue);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100C0B050);
  }
}

void sub_1001595D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100BCB4C0)
  {
    v0 = type metadata accessor for Published(0, &type metadata for PagingContentOffsets);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100BCB4C0);
  }
}

uint64_t sub_10015961C(uint64_t a1)
{
  return sub_1000DD2B4(a1, qword_100CAF028, 0x6E6F697461636F4CLL);
}

uint64_t sub_100159638(uint64_t a1)
{
  return sub_1000DD2B4(a1, qword_100CAEFC8, 0x7365676172657641);
}

uint64_t sub_100159654(uint64_t a1)
{
  return sub_1000BC970(a1, qword_100CAF2E8, 1936746836);
}

uint64_t sub_100159668(uint64_t a1)
{
  return sub_1000BC970(a1, qword_100CAF258, 1937204558);
}

uint64_t sub_10015967C(uint64_t a1)
{
  return sub_1000BC970(a1, qword_100CAF058, 1852399949);
}

uint64_t sub_100159690(uint64_t a1)
{
  return sub_1000C2F58(a1, qword_100CAF0A0, 5785174);
}

uint64_t sub_1001596A4(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF2B8, 28, 0x8000000100A11770);
}

uint64_t sub_1001596C4(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF1C8, 22, 0x8000000100A11850);
}

uint64_t sub_1001596E4(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF288, 19, 0x8000000100A117F0);
}

uint64_t sub_100159704(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF1B0, 19, 0x8000000100A11870);
}

uint64_t sub_100159724(uint64_t a1)
{
  return sub_100040308(a1, qword_100CAF120, 0x416B726F7774654ELL, 0xEF79746976697463);
}

uint64_t sub_100159750(uint64_t a1)
{
  return sub_1000CD170(a1, qword_100CAF198, 0x73624F6574617453, 0x676E69767265);
}

uint64_t sub_100159778(uint64_t a1)
{
  return sub_1000CD170(a1, qword_100CAF010, 0x6E6F697461636F4CLL, 0x726577656956);
}

uint64_t sub_1001597A0(uint64_t a1)
{
  return sub_1000C3F4C(a1, qword_100CAF180, 0x6552746567646957, 1684107116);
}

uint64_t sub_1001597C4(uint64_t a1)
{
  return sub_1000C3F4C(a1, qword_100CAEFF8, 0x6E6F697461636F4CLL, 2003134806);
}

uint64_t sub_1001597E8(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF168, 19, 0x8000000100A11790);
}

uint64_t sub_100159808(uint64_t a1)
{
  return sub_1000DDE90(a1, qword_100CAF100, 0x696E6F4D656D6954, 7499636);
}

uint64_t sub_10015982C(uint64_t a1)
{
  return sub_1000BB48C(a1, qword_100CAF2A0, 16, 0x8000000100A117B0);
}

uint64_t sub_10015984C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 1) != 0)
  {
LABEL_3:
    v4 = (unsigned int *)&enum case for InterfaceOrientation.unknown(_:);
  }
  else
  {
    switch(a1)
    {
      case 1:
        v4 = (unsigned int *)&enum case for InterfaceOrientation.portrait(_:);
        break;
      case 2:
        v4 = (unsigned int *)&enum case for InterfaceOrientation.portraitUpsideDown(_:);
        break;
      case 3:
        v4 = (unsigned int *)&enum case for InterfaceOrientation.landscapeRight(_:);
        break;
      case 4:
        v4 = (unsigned int *)&enum case for InterfaceOrientation.landscapeLeft(_:);
        break;
      default:
        goto LABEL_3;
    }
  }
  v5 = *v4;
  v6 = type metadata accessor for InterfaceOrientation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(a3, v5, v6);
}

uint64_t sub_1001598E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  switch(a1)
  {
    case 1:
      v3 = (unsigned int *)&enum case for DeviceOrientation.portrait(_:);
      break;
    case 2:
      v3 = (unsigned int *)&enum case for DeviceOrientation.portraitUpsideDown(_:);
      break;
    case 3:
      v3 = (unsigned int *)&enum case for DeviceOrientation.landscapeLeft(_:);
      break;
    case 4:
      v3 = (unsigned int *)&enum case for DeviceOrientation.landscapeRight(_:);
      break;
    case 5:
      v3 = (unsigned int *)&enum case for DeviceOrientation.faceUp(_:);
      break;
    case 6:
      v3 = (unsigned int *)&enum case for DeviceOrientation.faceDown(_:);
      break;
    default:
      v3 = (unsigned int *)&enum case for DeviceOrientation.unknown(_:);
      break;
  }
  v4 = *v3;
  v5 = type metadata accessor for DeviceOrientation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t sub_100159990(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC6338);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001599D0(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1001599DC(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

unint64_t sub_1001599E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF5BB8;
  if (!qword_100BF5BB8)
  {
    v1 = sub_100075EB0(&qword_100BE5590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Lazy<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF5BB8);
  }
  return result;
}

uint64_t sub_100159A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, __n128);
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a4;
  v6 = type metadata accessor for ScenePhase(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ScenePhase(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v21 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v18(v9, a1, v6, v15);
  sub_100159D14((uint64_t)v9, (uint64_t)v17);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v9, a2, v6);
  sub_100159D14((uint64_t)v9, (uint64_t)v13);
  dispatch thunk of ScenePhaseManagerType.onChange(old:new:)(v17, v13, v21, v22);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

unint64_t sub_100159B84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDD860;
  if (!qword_100BDD860)
  {
    v1 = sub_100075EB0(&qword_100BDD858);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDD860);
  }
  return result;
}

unint64_t sub_100159BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCEAE8;
  if (!qword_100BCEAE8)
  {
    v1 = sub_100075EB0(&qword_100BCEAE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BCEAE8);
  }
  return result;
}

unint64_t sub_100159C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD5A40;
  if (!qword_100BD5A40)
  {
    v1 = sub_100075EB0(&qword_100BD5A38);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD5A40);
  }
  return result;
}

unint64_t sub_100159C50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD2A80;
  if (!qword_100BD2A80)
  {
    v1 = sub_100075EB0(&qword_100BD2A78);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD2A80);
  }
  return result;
}

uint64_t sub_100159C94(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294((uint64_t *)&unk_100BFFA10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100159CD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE5578;
  if (!qword_100BE5578)
  {
    v1 = type metadata accessor for LazyOptions(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LazyOptions, v1);
    atomic_store(result, (unint64_t *)&qword_100BE5578);
  }
  return result;
}

uint64_t sub_100159D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v4 = type metadata accessor for ScenePhase(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == enum case for ScenePhase.background(_:))
  {
    sub_1000BB748();
    v10 = (unsigned int *)&enum case for ScenePhase.background(_:);
LABEL_7:
    v11 = *v10;
    v12 = type metadata accessor for ScenePhase(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
  }
  if (v9 == enum case for ScenePhase.inactive(_:))
  {
    sub_1000BB748();
    v10 = (unsigned int *)&enum case for ScenePhase.inactive(_:);
    goto LABEL_7;
  }
  if (v9 == enum case for ScenePhase.active(_:))
  {
    sub_1000BB748();
    v10 = (unsigned int *)&enum case for ScenePhase.active(_:);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000014, 0x8000000100A17E20, "Weather/ScenePhase+Weather.swift", 32, 2);
  __break(1u);
  return result;
}

void sub_100159E84()
{
  uint64_t *v0;
  uint64_t v1;

  sub_10009E50C();
  v1 = sub_1000BA294(v0);
  sub_10009D2C8(v1);
  sub_10004A298();
}

uint64_t sub_100159EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(qword_100BC6008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  int v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v5 = sub_1000E775C();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100099864();
  sub_1000D0678(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v2, v5);
  if (v7 == enum case for MapsConfiguration.OverlayKind.precipitation(_:))
  {
    sub_1000D9E2C();
    type metadata accessor for WeatherMapPrecipitationOverlayKind(0);
    v8 = sub_1000DAF40();
    v9(v8);
LABEL_6:
    sub_1000B4608();
    v11 = sub_1000DAF40();
    return v12(v11);
  }
  v10 = v7;
  if (v7 == enum case for MapsConfiguration.OverlayKind.airQuality(_:)
    || v7 == enum case for MapsConfiguration.OverlayKind.temperature(_:))
  {
    sub_1000D9E2C();
    goto LABEL_6;
  }
  v14 = enum case for MapsConfiguration.OverlayKind.wind(_:);
  v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v15(a1, v5);
  v16 = sub_1000B4608();
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 - 8) + 104);
  if (v10 == v14)
  {
    v11 = a2;
    return v12(v11);
  }
  ((void (*)(uint64_t, _QWORD, uint64_t))v12)(a2, enum case for WeatherMapOverlayKind.temperature(_:), v16);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)(v2, v5);
}

uint64_t sub_10015A074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC35F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10015A0BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCE908)
  {
    v2 = type metadata accessor for Location(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCE908);
  }
}

unint64_t sub_10015A110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCD770;
  if (!qword_100BCD770)
  {
    v1 = sub_100075EB0(&qword_100BCD680);
    sub_10000F1C8((unint64_t *)&qword_100BC3640, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BCD770);
  }
  return result;
}

uint64_t sub_10015A18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCD680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10015A1D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCE540)
  {
    v2 = type metadata accessor for Location.Identifier(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BCE540);
  }
}

void sub_10015A228(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for Location.Identifier(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t sub_10015A264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1000992C4();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100099864();
  if ((Location.kind.getter(v4) & 1) == 0)
  {
    Location.searchTitle.getter();
    sub_1000DB938();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0, v2);
    Location.name.getter(v5);
    sub_1000DB938();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  return 0;
}

uint64_t sub_10015A308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD7148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015A350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD7148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10015A398(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD7578)
  {
    v2 = type metadata accessor for UnitConfiguration.Temperature(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD7578);
  }
}

void sub_10015A3EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BDE7A8)
  {
    v2 = type metadata accessor for CurrentLocation(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BDE7A8);
  }
}

uint64_t sub_10015A440(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease(result);
  return result;
}

uint64_t sub_10015A450(uint64_t result)
{
  if (result != 1)
    return swift_release(result);
  return result;
}

void sub_10015A460(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD4AE8)
  {
    v2 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD4AE8);
  }
}

uint64_t sub_10015A4B4()
{
  char v0;
  uint64_t result;

  type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter();
  if (qword_100BC22E0 != -1)
    swift_once(&qword_100BC22E0, sub_10015A528);
  SettingReader.isEnabled(_:with:)(qword_100CAEE80, 2);
  result = sub_1000BC684();
  byte_100CAEE88 = v0 & 1;
  return result;
}

uint64_t sub_10015A528(uint64_t a1)
{
  return sub_1000BB1E8(a1, &enum case for FeatureState.enabled(_:), 43, 0x8000000100A0D980, &qword_100CAEE80);
}

uint64_t sub_10015A550()
{
  uint64_t result;

  result = sub_1005E68A0();
  byte_100CAEE60 = result & 1;
  return result;
}

void sub_10015A570(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 24, 0x8000000100A163F0, &qword_100CAF510);
}

void sub_10015A598(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 24, 0x8000000100A16440, &qword_100CAF508);
}

void sub_10015A5C0(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 48, 0x8000000100A16690, &qword_100CAF500);
}

void sub_10015A5E8(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 47, 0x8000000100A16660, &qword_100CAF518);
}

void sub_10015A610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000B466C();
  sub_1000BD980();
  __chkstk_darwin(v1);
  sub_1000BCED8();
  v2 = _s7ModulesV8LocationV17NotableConditionsCMa(0);
  sub_1000C2E0C(v2, enum case for Access.protected(_:));
  qword_100CAF560 = sub_10015A84C(0, 0, 0, v0);
  sub_100079F70();
}

void sub_10015A684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = sub_1000B466C();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FeatureState(0);
  sub_1000C6D9C();
  __chkstk_darwin(v7);
  sub_100099864();
  v8 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v9 = objc_msgSend(v8, "userInterfaceIdiom");

  v10 = (unsigned int *)&enum case for FeatureState.disabled(_:);
  if (v9)
    v10 = &enum case for FeatureState.enabled(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v0, *v10, v6);
  sub_1000BA294(&qword_100BE94D0);
  sub_1000C5FEC(enum case for Access.protected(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
  sub_1000B2FC4();
  qword_100CAF4C8 = Setting<>.init(_:defaultValue:access:)(0xD00000000000002ALL, v11, v0, v5);
  sub_10009D300();
}

void sub_10015A7B0(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 41, 0x8000000100A16460, &qword_100CAF4D8);
}

uint64_t sub_10015A7D8(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_100CAF570);
}

uint64_t _s7ModulesV8LocationV17NotableConditionsCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0BD60;
  if (!qword_100C0BD60)
    return swift_getSingletonMetadata(a1, &_s7ModulesV8LocationV17NotableConditionsCMn);
  return result;
}

uint64_t sub_10015A84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = sub_1000B466C();
  sub_1000C6D9C();
  __chkstk_darwin(v12);
  sub_10009E540();
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, a4, v11);
  v13 = SettingGroup.init(key:defaultValue:access:)(a1, a2, a3, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a4, v11);
  return v13;
}

void sub_10015A900(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 32, 0x8000000100A16580, &qword_100CAF4E8);
}

void sub_10015A928(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 32, 0x8000000100A16410, &qword_100CAF4F8);
}

void sub_10015A950(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 31, 0x8000000100A16560, &qword_100CAF4F0);
}

void sub_10015A978(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.protected(_:), 55, 0x8000000100A165E0, &qword_100CAF538);
}

void sub_10015A9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  sub_1000DA2CC();
  sub_1000BD980();
  __chkstk_darwin(v1);
  sub_1000B466C();
  sub_1000C4654();
  __chkstk_darwin(v2);
  sub_100099864();
  sub_1000B4650();
  sub_1000C5FEC(enum case for Domain.standard(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 104));
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  v3 = sub_1000BA294(&qword_100BF2BE0);
  sub_1000860C4(v3);
  sub_1000B2FC4();
  qword_100CAF4C0 = sub_1000C62E8(35, v4, (uint64_t)v5);
  sub_100079F70();
}

void sub_10015AA64(uint64_t a1)
{
  sub_1000BB6D8(a1, (unsigned int *)&enum case for Access.public(_:), 27, 0x8000000100A16810, &qword_100CAF4B8);
}

uint64_t sub_10015AA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[15];
  char v11;

  v0 = type metadata accessor for Access(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Domain(0);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD))(v7 + 104))(v6, enum case for Domain.standard(_:));
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Access.public(_:), v0);
  v11 = 1;
  v8 = sub_1000BA294(&qword_100BD0228);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  result = Setting.init(_:defaultValue:domain:access:)(0xD000000000000020, 0x8000000100A187A0, &v11, v6, v3);
  qword_100CAF5D0 = result;
  return result;
}

uint64_t sub_10015ABAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[15];
  char v11;

  v0 = type metadata accessor for Access(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Domain(0);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD))(v7 + 104))(v6, enum case for Domain.standard(_:));
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Access.public(_:), v0);
  v11 = 0;
  v8 = sub_1000BA294(&qword_100BD0228);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  result = Setting.init(_:defaultValue:domain:access:)(0xD000000000000018, 0x8000000100A0E8E0, &v11, v6, v3);
  qword_100CAEEC0 = result;
  return result;
}

void sub_10015ACC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000B466C();
  sub_1000DDDEC();
  __chkstk_darwin(v1);
  sub_1000BCED8();
  v2 = _s4NewsV18PlaceholderContentCMa(0);
  sub_1000C2E0C(v2, enum case for Access.protected(_:));
  qword_100CAEF48 = sub_10015ADAC(0, 0, 0, v0);
  sub_100079F70();
}

uint64_t sub_10015AD38(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_100CAEF68);
}

uint64_t _s4NewsV18PlaceholderContentCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFC1D8;
  if (!qword_100BFC1D8)
    return swift_getSingletonMetadata(a1, &_s4NewsV18PlaceholderContentCMn);
  return result;
}

uint64_t sub_10015ADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = sub_1000B466C();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100098728();
  v13 = v12 - v11;
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, a4, v9);
  v14 = SettingGroup.init(key:defaultValue:access:)(a1, a2, a3, v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a4, v9);
  return v14;
}

uint64_t sub_10015AE70(uint64_t a1)
{
  return sub_1000BB1D8(a1, 53, 0x8000000100A0CB70, &qword_100CAEE10);
}

uint64_t sub_10015AE90(uint64_t a1)
{
  return sub_1000BB1D8(a1, 49, 0x8000000100A0CB30, &qword_100CAEE08);
}

uint64_t sub_10015AEB0(uint64_t a1)
{
  return sub_1000BB1D8(a1, 46, 0x8000000100A0CB00, &qword_100CAEE18);
}

uint64_t sub_10015AED0(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(_QWORD, _QWORD, _QWORD, uint64_t), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v7 = sub_1000B466C();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v11 = v10 - v9;
  a2(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11, enum case for Access.protected(_:), v7);
  result = a3(0, 0, 0, v11);
  *a4 = result;
  return result;
}

uint64_t sub_10015AF74(uint64_t a1)
{
  return sub_10015AED0(a1, (void (*)(_QWORD))_s18TappableModulesTipV13TipsOverridesCMa, sub_10015AFE8, &qword_100CAEE28);
}

uint64_t sub_10015AF90(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE v5[8];

  return swift_initClassMetadata2(a1, 0, 0, v5, a1 + *a4);
}

uint64_t sub_10015AFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10015AF90(a1, a2, a3, qword_100CAEE38);
}

uint64_t _s18TappableModulesTipV13TipsOverridesCMa(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF4088, (uint64_t)&_s18TappableModulesTipV13TipsOverridesCMn);
}

uint64_t sub_10015AFEC(uint64_t a1)
{
  return sub_1000BB1D8(a1, 64, 0x8000000100A0CCB0, &qword_100CAEDE0);
}

uint64_t sub_10015B00C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 61, 0x8000000100A0CD00, &qword_100CAEDD8);
}

uint64_t sub_10015B02C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 58, 0x8000000100A0CC30, &qword_100CAEDF0);
}

uint64_t sub_10015B04C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 58, 0x8000000100A0CBF0, &qword_100CAEDF8);
}

uint64_t sub_10015B06C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 55, 0x8000000100A0CBB0, &qword_100CAEE00);
}

uint64_t sub_10015B08C(uint64_t a1)
{
  return sub_1000BB1D8(a1, 54, 0x8000000100A0CC70, &qword_100CAEDE8);
}

void sub_10015B0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_1000B466C();
  sub_1000C3704();
  __chkstk_darwin(v0);
  sub_1000BA6D8();
  sub_1000C4654();
  __chkstk_darwin(v1);
  sub_100099864();
  v2 = sub_1000B4650();
  sub_1000BBE8C(v2, enum case for Access.public(_:));
  v4 = 0;
  v3 = sub_1000BA294(&qword_100BD0228);
  sub_1000860C4(v3);
  qword_100CAE5C0 = sub_1000B465C(61, 0x80000001009F7670, (uint64_t)&v4);
  sub_100079F70();
}

void sub_10015B154(uint64_t a1)
{
  sub_1000BAF84(a1, (unsigned int *)&enum case for FeatureState.default(_:), 40, 0x8000000100A085B0, &qword_100CAEC90);
}

void sub_10015B17C(uint64_t a1)
{
  sub_1000BAF84(a1, (unsigned int *)&enum case for FeatureState.default(_:), 37, 0x8000000100A085E0, &qword_100CAEC88);
}

void sub_10015B1A4(uint64_t a1)
{
  sub_1000BAF84(a1, (unsigned int *)&enum case for FeatureState.default(_:), 44, 0x8000000100A08610, &qword_100CAEC78);
}

void sub_10015B1CC(uint64_t a1)
{
  sub_1000BAF84(a1, (unsigned int *)&enum case for FeatureState.default(_:), 44, 0x8000000100A086B0, &qword_100CAEC80);
}

void sub_10015B1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_1000B466C();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = sub_1000BA6D8();
  sub_10009D5D4();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = type metadata accessor for Date(0);
  __chkstk_darwin(v10);
  sub_100098694();
  static Date.distantPast.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v9, enum case for Domain.standard(_:), v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v0, enum case for Access.public(_:), v3);
  v11 = sub_1000BA294(&qword_100C0B3F0);
  sub_1000860C4(v11);
  qword_100CAF490 = Setting.init(_:defaultValue:domain:access:)(0xD00000000000002ALL, 0x8000000100A16170, v1, v9, v0);
  sub_10009D300();
}

void sub_10015B308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  type metadata accessor for Access(0);
  sub_1000C3704();
  __chkstk_darwin(v0);
  sub_1000BA6D8();
  sub_1000C4654();
  __chkstk_darwin(v1);
  sub_100099864();
  v2 = sub_1000B4650();
  sub_1000BBE8C(v2, enum case for Access.public(_:));
  v4 = 0;
  v3 = sub_1000BA294(&qword_100BD0228);
  sub_1000860C4(v3);
  qword_100CAE8C8 = sub_1000B465C(46, 0x80000001009FEF30, (uint64_t)&v4);
  sub_100079F70();
}

void sub_10015B3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for Access(0);
  sub_1000C3704();
  __chkstk_darwin(v0);
  sub_1000BA6D8();
  sub_1000C4654();
  __chkstk_darwin(v1);
  sub_100099864();
  v2 = sub_1000B4650();
  sub_1000BBE8C(v2, enum case for Access.public(_:));
  v4 = 0;
  v3 = sub_1000BA294(&qword_100BDEBF0);
  sub_1000860C4(v3);
  qword_100CAE8C0 = sub_1000B465C(41, 0x80000001009FEF00, (uint64_t)&v4);
  sub_100079F70();
}

void sub_10015B460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!qword_100BD1FF8)
  {
    v2 = type metadata accessor for MinuteWeather(255);
    sub_100086DA4(&qword_100BD2000, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    v4 = v3;
    sub_100086DA4(&qword_100BD2008, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    v6 = v5;
    sub_100086DA4((unint64_t *)&unk_100BD2010, (uint64_t (*)(uint64_t))&type metadata accessor for MinuteWeather, (uint64_t)&protocol conformance descriptor for MinuteWeather);
    v10[0] = v2;
    v10[1] = v4;
    v10[2] = v6;
    v10[3] = v7;
    v8 = type metadata accessor for Forecast(a1, v10);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_100BD1FF8);
  }
}

void sub_10015B530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!qword_100BD0C48)
  {
    v2 = type metadata accessor for HourWeather(255);
    sub_10000F1C8(&qword_100BD0C50, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather);
    v4 = v3;
    sub_10000F1C8(&qword_100BD0C58, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather);
    v6 = v5;
    sub_10000F1C8(&qword_100BD0C60, (uint64_t (*)(uint64_t))&type metadata accessor for HourWeather);
    v10[0] = v2;
    v10[1] = v4;
    v10[2] = v6;
    v10[3] = v7;
    v8 = type metadata accessor for Forecast(a1, v10);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_100BD0C48);
  }
}

void sub_10015B600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!qword_100BD0C70)
  {
    v2 = type metadata accessor for DayWeather(255);
    sub_10000F1C8(&qword_100BD0C78, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather);
    v4 = v3;
    sub_10000F1C8(&qword_100BD0C80, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather);
    v6 = v5;
    sub_10000F1C8(&qword_100BD0C88, (uint64_t (*)(uint64_t))&type metadata accessor for DayWeather);
    v10[0] = v2;
    v10[1] = v4;
    v10[2] = v6;
    v10[3] = v7;
    v8 = type metadata accessor for Forecast(a1, v10);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_100BD0C70);
  }
}

void sub_10015B6D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BD8A70)
  {
    v2 = type metadata accessor for WeatherCondition(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BD8A70);
  }
}

void sub_10015B724(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v8 = sub_1000BC080();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098694();
  sub_1000992E4(v4, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  v10 = sub_1000CCBCC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88));
  if (v10 == enum case for WeatherNetworkActivity.Label.appLaunchSnapshotMap(_:))
  {
    v11 = *a1;
  }
  else if (v10 == enum case for WeatherNetworkActivity.Label.openInteractiveMap(_:))
  {
    v11 = *a3;
  }
  else
  {
    if (v10 != enum case for WeatherNetworkActivity.Label.openPreviewSnapshotMap(_:))
    {
      sub_1000BA9D4(v3, 1);
      sub_1000CCBCC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      goto LABEL_8;
    }
    v11 = *a2;
  }
  sub_1000C390C(v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 104));
  sub_1000BA9D4(v3, 0);
LABEL_8:
  sub_10009D300();
}

void sub_10015B810()
{
  sub_10015B724(&enum case for WeatherNetworkActivity.Label.appLaunchSnapshotMapMetadata(_:), &enum case for WeatherNetworkActivity.Label.openPreviewSnapshotMapMetadata(_:), &enum case for WeatherNetworkActivity.Label.openInteractiveMapMetadata(_:));
}

void sub_10015B82C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v6 = sub_1000BC080();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000992E4(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  v8 = sub_1000CCBCC(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88));
  if (v8 == enum case for WeatherNetworkActivity.Label.appLaunch(_:))
  {
    v9 = *a1;
  }
  else
  {
    if (v8 != enum case for WeatherNetworkActivity.Label.openPreview(_:))
    {
      sub_1000BA9D4(v2, 1);
      sub_1000CCBCC(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      goto LABEL_7;
    }
    v9 = *a2;
  }
  sub_1000C390C(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 104));
  sub_1000BA9D4(v2, 0);
LABEL_7:
  sub_10009D300();
}

void sub_10015B8F8()
{
  sub_10015B82C(&enum case for WeatherNetworkActivity.Label.appLaunchWeather(_:), &enum case for WeatherNetworkActivity.Label.openPreviewWeather(_:));
}

void sub_10015B90C()
{
  sub_10015B724((unsigned int *)&enum case for WeatherNetworkActivity.Label.appLaunchSnapshotMapTiles(_:), (unsigned int *)&enum case for WeatherNetworkActivity.Label.openPreviewSnapshotMapTiles(_:), (unsigned int *)&enum case for WeatherNetworkActivity.Label.openInteractiveMapTiles(_:));
}

void sub_10015B928()
{
  sub_10015B82C((unsigned int *)&enum case for WeatherNetworkActivity.Label.appLaunchSnapshotMap(_:), (unsigned int *)&enum case for WeatherNetworkActivity.Label.openPreviewSnapshotMap(_:));
}

uint64_t sub_10015B93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  unsigned int *v6;
  uint64_t v8;

  v1 = sub_1000BC080();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E4((uint64_t)v4, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for WeatherNetworkActivity.Label.appLaunchSnapshotMapTiles(_:))
  {
    v6 = (unsigned int *)&enum case for WeatherNetworkActivity.Label.appLaunchSnapshotMapTilesOverlayTile(_:);
  }
  else if (v5 == enum case for WeatherNetworkActivity.Label.openInteractiveMapTiles(_:))
  {
    v6 = (unsigned int *)&enum case for WeatherNetworkActivity.Label.openInteractiveMapTilesOverlayTile(_:);
  }
  else
  {
    if (v5 != enum case for WeatherNetworkActivity.Label.openPreviewSnapshotMapTiles(_:))
    {
      sub_1000BA9D4(v0, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    v6 = (unsigned int *)&enum case for WeatherNetworkActivity.Label.openPreviewSnapshotMapTilesOverlayTile(_:);
  }
  sub_1000C390C(*v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  return sub_1000BA9D4(v0, 0);
}

uint64_t sub_10015BA54(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DayWeather(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015BA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015BADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10015BB24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC3500)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC3500);
  }
}

uint64_t sub_10015BB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015BBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BD4280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10015BC08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BCCEE8[0])
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, qword_100BCCEE8);
  }
}

unint64_t sub_10015BC5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCCE60[0];
  if (!qword_100BCCE60[0])
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, qword_100BCCE60);
  }
  return result;
}

unint64_t sub_10015BC9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDE520;
  if (!qword_100BDE520)
  {
    v1 = sub_100075EB0(&qword_100BDE508);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BDE520);
  }
  return result;
}

unint64_t sub_10015BD00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDAE30;
  if (!qword_100BDAE30)
  {
    v1 = type metadata accessor for AttributedString(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributedString, v1);
    atomic_store(result, (unint64_t *)&qword_100BDAE30);
  }
  return result;
}

unint64_t sub_10015BD40()
{
  unint64_t result;

  result = qword_100BDAE40;
  if (!qword_100BDAE40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.AccessibilityAttributes.SpellOutAttribute, &type metadata for AttributeScopes.AccessibilityAttributes.SpellOutAttribute);
    atomic_store(result, (unint64_t *)&qword_100BDAE40);
  }
  return result;
}

uint64_t sub_10015BE34(int a1)
{
  return a1 | 0x1D0000u;
}

_QWORD *variable initialization expression of WindowFocusManager.monitors()
{
  return _swiftEmptyArrayStorage;
}

void *variable initialization expression of Debounced.cancellables()
{
  return &_swiftEmptySetSingleton;
}

void variable initialization expression of LocationSearchEntity._name()
{
  sub_10015C008((uint64_t)&unk_100BC28D0, 1701667150, 0xE400000000000000, (void (*)(uint64_t))&EntityProperty<>.init(title:));
}

void variable initialization expression of LocationSearchEntity._placemark()
{
  sub_10015C008((uint64_t)&unk_100BC28D8, 0x72616D6563616C50, 0xE90000000000006BLL, (void (*)(uint64_t))&EntityProperty<>.init(title:));
}

void sub_10015C008(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  sub_1000C1C64();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098694();
  sub_1000878AC();
  LocalizedStringResource.init(stringLiteral:)(a2, a3);
  a4(v4);
  sub_10004A2A0();
}

uint64_t variable initialization expression of WeatherAsyncImage.url()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for URL(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

uint64_t variable initialization expression of OpenNotificationsConfigurationIntent._weatherIntentHandler()
{
  return sub_10015C8E0(&qword_100BC28E0);
}

void variable initialization expression of SessionEventsAndDataCoordinator.lock()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UnfairLock.Options(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100079F58();
  v3 = sub_1000BA294(&qword_100BC28E8);
  v4 = swift_allocObject(v3, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  *(_OWORD *)(v4 + 16) = xmmword_10097CA50;
  static UnfairLock.Options.dataSynchronization.getter(v4);
  sub_10000F1C8((unint64_t *)&qword_100BC28F0, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_1000878AC();
  sub_10003D2DC((unint64_t *)&qword_100BC2900, &qword_100BC28F8);
  sub_1000C6500(v5);
  v6 = type metadata accessor for UnfairLock(0);
  sub_1000860C4(v6);
  UnfairLock.init(options:)(v0);
  sub_10004A2A0();
}

uint64_t variable initialization expression of SessionEventsAndDataCoordinator.startMethod@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t started;

  v2 = enum case for StartMethod.unknown(_:);
  started = type metadata accessor for StartMethod(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 104))(a1, v2, started);
}

void sub_10015C1E8()
{
  EnvironmentValues.dynamicTypeSize.getter();
  sub_10004A298();
}

void sub_10015C204(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  EnvironmentValues.dynamicTypeSize.setter(v5);
  sub_100079F70();
}

double variable initialization expression of TipView._layoutDirection@<D0>(_QWORD *a1@<X8>)
{
  return sub_10015CED4((uint64_t)&unk_10097CA70, a1);
}

void variable initialization expression of OpenWeatherAirQualityIntent._location()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1000986AC();
  sub_1000C6940();
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100098678(v2, v31);
  sub_1000BA294(&qword_100BC2910);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098658(v4, v32);
  __chkstk_darwin(v5);
  sub_1000BCEC0();
  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000DD644();
  sub_100099210();
  __chkstk_darwin(v7);
  sub_1000CC77C();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000B42C0();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000D9B34();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100094EC4();
  v11 = sub_1000BA294(&qword_100BC2920);
  sub_1000DF3F4(v11);
  sub_1000C5154();
  sub_1000DD660();
  sub_1000DCA98(v0, v12, v13, v14, v15, (uint64_t)"The title of the 'location' parameter of intents");
  sub_1000C651C();
  sub_1000CF708(32, v16);
  sub_1000C5154();
  sub_1000DD660();
  v17 = sub_1000C1220();
  sub_1000B42DC(v17, v18, v19, v20, v21, v22, 85);
  v23 = sub_1000CD50C();
  v24 = sub_1000C23A0(v23);
  sub_1000D1BE8(v24, enum case for InputConnectionBehavior.default(_:));
  sub_1000BF070();
  sub_1000C123C(&qword_100BC2930);
  sub_1000BCED0();
  sub_1000C20BC();
  sub_1000DB6AC(v25, v26, v27, v28, v29, v30, (uint64_t)sub_1003CB820);
  sub_100098640();
}

unint64_t sub_10015C43C()
{
  unint64_t result;

  result = qword_100BC2938;
  if (!qword_100BC2938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationSearchEntity, &type metadata for LocationSearchEntity);
    atomic_store(result, (unint64_t *)&qword_100BC2938);
  }
  return result;
}

void variable initialization expression of OpenWeatherAirQualityIntent._position()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  sub_1000986AC();
  v5 = sub_1000C6940();
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000986CC(v7, v28);
  sub_1000BA294(&qword_100BC2910);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v29 = (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  sub_1000BCEC0();
  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000DD644();
  sub_1000E7B70();
  __chkstk_darwin(v12);
  sub_1000CC77C();
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_1000B42C0();
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000C1C64();
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100094EC4();
  v28 = sub_1000BA294(&qword_100BC2940);
  String.LocalizationValue.init(stringLiteral:)(0x6E6F697469736F50, 0xE800000000000000);
  sub_1000C5154();
  sub_1000BED68();
  sub_1000DCA98((uint64_t)v16, v19, v20, v21, v22, (uint64_t)"The title of the 'position' parameter of intents");
  sub_1000B2FC4();
  sub_1000CF708(30, v23);
  sub_1000C5154();
  sub_1000BED68();
  sub_1000B42DC((uint64_t)v16, 0, 0, v4, v3, (uint64_t)"The description of the 'position' parameter for the 'Open Air Quality Details' intent", 85);
  _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v17);
  v32 = 0;
  v24 = type metadata accessor for IntentDialog(0);
  sub_1000C20AC(v0);
  v25 = v29;
  v26 = sub_1000C20AC(v29);
  sub_1000D04E4(v26, enum case for InputConnectionBehavior.default(_:));
  v27 = sub_10015C6A4();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v2, v1, &v32, v0, v25, v24, &off_100B5A190, v27);
  sub_100098640();
}

unint64_t sub_10015C6A4()
{
  unint64_t result;

  result = qword_100BC2948;
  if (!qword_100BC2948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AirQualityPosition, &type metadata for AirQualityPosition);
    atomic_store(result, (unint64_t *)&qword_100BC2948);
  }
  return result;
}

void variable initialization expression of OpenSunriseSunsetIntent._location()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1000986AC();
  sub_1000C6940();
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100098678(v2, v31);
  sub_1000BA294(&qword_100BC2910);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098658(v4, v32);
  __chkstk_darwin(v5);
  sub_1000BCEC0();
  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000DD644();
  sub_100099210();
  __chkstk_darwin(v7);
  sub_1000CC77C();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000B42C0();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000D9B34();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100094EC4();
  v11 = sub_1000BA294(&qword_100BC2920);
  sub_1000DF3F4(v11);
  sub_1000C5154();
  sub_1000DD660();
  sub_1000DCA98(v0, v12, v13, v14, v15, (uint64_t)"The title of the 'location' parameter of intents");
  sub_1000C651C();
  sub_1000CF708(47, v16);
  sub_1000C5154();
  sub_1000DD660();
  v17 = sub_1000C1220();
  sub_1000B42DC(v17, v18, v19, v20, v21, v22, 92);
  v23 = sub_1000CD50C();
  v24 = sub_1000C23A0(v23);
  sub_1000D1BE8(v24, enum case for InputConnectionBehavior.default(_:));
  sub_1000BF070();
  sub_1000C123C(&qword_100BC2930);
  sub_1000BCED0();
  sub_1000C20BC();
  sub_1000DB6AC(v25, v26, v27, v28, v29, v30, (uint64_t)sub_1003CB820);
  sub_100098640();
}

uint64_t variable initialization expression of LocaleMonitor.lastLocale()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for Locale(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

uint64_t variable initialization expression of LocaleMonitor.lastTemperatureUnit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for UnitConfiguration.Temperature(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

uint64_t variable initialization expression of LocationSearchEntityQuery._locationEntityManager()
{
  return sub_10015C8E0(&qword_100BC2950);
}

uint64_t variable initialization expression of LocationSearchEntityQuery._localSearchManager()
{
  return sub_10015C8E0(&qword_100BC2958);
}

uint64_t sub_10015C8E0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  sub_1000BA294(a1);
  v1 = type metadata accessor for AppDependencyManager(0);
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v6 = static AppDependencyManager.shared.getter(v1, v2, v3, v4, v5);
  return AppDependency.__allocating_init(key:manager:)(v8, v6);
}

uint64_t variable initialization expression of LocationSearchEntityQuery.locationSearcher()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LocationSearcher();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void variable initialization expression of LocalSearchRequestManager.geocodeRequestDeduper()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for PromiseDeduperFlags(0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_100079F58();
  sub_10000F1C8(&qword_100BC2960, v2);
  sub_1000878AC();
  sub_10003D2DC(&qword_100BC2970, &qword_100BC2968);
  sub_1000C6500(v3);
  v4 = sub_1000BA294(&qword_100BC2978);
  sub_1000860C4(v4);
  PromiseDeduper.init(options:)(v0);
  sub_10004A2A0();
}

double variable initialization expression of LocalSearchRequestManager.$__lazy_storage_$_store@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_10097CA60;
  return result;
}

uint64_t variable initialization expression of SettingsMonitor.lastDistanceConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for UnitConfiguration.Distance(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

uint64_t variable initialization expression of SettingsMonitor.lastWindSpeedConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for UnitConfiguration.WindSpeed(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

uint64_t variable initialization expression of SettingsMonitor.lastPressureConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for UnitConfiguration.Pressure(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

uint64_t variable initialization expression of SettingsMonitor.lastPrecipitationConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000C0C34();
  type metadata accessor for UnitConfiguration.Precipitation(v0);
  v1 = sub_1000C34B8();
  return sub_1000BE6F8(v1, v2, v3, v4);
}

void variable initialization expression of OpenMoonIntent._location()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1000986AC();
  sub_1000C6940();
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100098678(v2, v31);
  sub_1000BA294(&qword_100BC2910);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098658(v4, v32);
  __chkstk_darwin(v5);
  sub_1000BCEC0();
  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000DD644();
  sub_100099210();
  __chkstk_darwin(v7);
  sub_1000CC77C();
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000B42C0();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000D9B34();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100094EC4();
  v11 = sub_1000BA294(&qword_100BC2920);
  sub_1000DF3F4(v11);
  sub_1000C5154();
  sub_1000DD660();
  sub_1000DCA98(v0, v12, v13, v14, v15, (uint64_t)"The title of the 'location' parameter of intents");
  sub_1000C651C();
  sub_1000CF708(33, v16);
  sub_1000C5154();
  sub_1000DD660();
  v17 = sub_1000C1220();
  sub_1000B42DC(v17, v18, v19, v20, v21, v22, 78);
  v23 = sub_1000CD50C();
  v24 = sub_1000C23A0(v23);
  sub_1000D1BE8(v24, enum case for InputConnectionBehavior.default(_:));
  sub_1000BF070();
  sub_1000C123C(&qword_100BC2930);
  sub_1000BCED0();
  sub_1000C20BC();
  sub_1000DB6AC(v25, v26, v27, v28, v29, v30, (uint64_t)sub_1003CB820);
  sub_100098640();
}

void variable initialization expression of OpenMoonIntent._date()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_1000986AC();
  v3 = sub_1000C6940();
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_1000986CC(v5, v37);
  v6 = sub_1000BA294(&qword_100BC2980);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC2910);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098694();
  sub_1000BA294(&qword_100BC2918);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100094EC4();
  type metadata accessor for LocalizedStringResource.BundleDescription(0);
  sub_1000E7B70();
  __chkstk_darwin(v11);
  type metadata accessor for Locale(0);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  v13 = sub_1000BD1E4();
  type metadata accessor for String.LocalizationValue(v13);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v15 = sub_1000C1C64();
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000BA294(&qword_100BC2988);
  v19 = String.LocalizationValue.init(stringLiteral:)(1702125892, 0xE400000000000000);
  static Locale.current.getter(v19);
  sub_1000CDB50();
  v20 = sub_1000EAED0();
  sub_1000B42DC(v20, v21, v22, v23, v24, v25, 44);
  sub_1000B2FC4();
  v27 = sub_1000CF708(29, v26);
  static Locale.current.getter(v27);
  sub_1000CDB50();
  v28 = sub_1000EAED0();
  sub_1000B42DC(v28, v29, v30, v31, v32, v33, 74);
  _s7Weather24LocationCompositionStateOwst_0(v2, 0, 1, v15);
  v34 = type metadata accessor for IntentDialog(0);
  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v34);
  v35 = v38;
  v36 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v39 + 104))(v38, enum case for IntentParameter.DateKind.dateTime<A>(_:), v40);
  sub_1000D04E4(v36, enum case for InputConnectionBehavior.default(_:));
  IntentParameter<>.init(title:description:kind:requestValueDialog:inputConnectionBehavior:)(v18, v2, v35, v1, v0);
  sub_100098640();
}

double variable initialization expression of WindCategoryTableView._dynamicTypeSize@<D0>(_QWORD *a1@<X8>)
{
  return sub_10015CED4((uint64_t)&unk_10097CAA0, a1);
}

double sub_10015CED4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *a2 = swift_getKeyPath(a1);
  v3 = sub_1000BF070();
  *(_QWORD *)&result = swift_storeEnumTagMultiPayload(a2, v3, 0).n128_u64[0];
  return result;
}

void variable initialization expression of NotificationsOptInMonitor.logger()
{
  uint64_t v0;

  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  sub_1000B2FC4();
  OS_os_log.init(subsystem:category:)(0xD000000000000011, v0, 0x6163696669746F4ELL, 0xED0000736E6F6974);
  sub_10004A298();
}

void variable initialization expression of NetworkConnectivityMonitor.setupMonitorQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  sub_1000986AC();
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = sub_1000BD1E4();
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(v4);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098694();
  sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  sub_10000F1C8((unint64_t *)&qword_100BC29A8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v12 = v11;
  v13 = sub_1000BA294(&qword_100BC29B0);
  sub_10003D2DC((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v5, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  sub_1000B2FC4();
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000032, v15, v1, v8, v0, 0);
  sub_100098640();
}

void type metadata accessor for SCPreferences(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A20, (uint64_t)&unk_100B5BF98);
}

uint64_t initializeBufferWithCopyOfBuffer for ConfiguredUnitsState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void type metadata accessor for MKCoordinateRegion(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A40, (uint64_t)&unk_100B5C1A0);
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2A58, (uint64_t)&unk_100B5C260);
}

void sub_10015D158()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000BD1D8();
  LocationSearchEntityFromStringResolver.init()();
  *v0 = v1;
  sub_10004A298();
}

uint64_t sub_10015D178@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s7Weather31SessionEventsAndDataCoordinatorC25lastPushedTemperatureUnit33_8ECD549B82C3B8992579EA0CB842041CLLSo06NSUnitI0CSgvpfi_0();
  *a1 = result;
  return result;
}

uint64_t sub_10015D19C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10015DF60(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10015D1C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1000D1558(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10015D1F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10015DC28(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10015D220(_QWORD *a1, uint64_t *a2)
{
  return sub_1004400F0(a1, *a2);
}

uint64_t sub_10015D228@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10015DF68(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10015D258@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10015DFB8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10015D288(uint64_t *a1)
{
  return sub_10015D9F8(*a1);
}

uint64_t sub_10015D290(uint64_t *a1)
{
  return sub_10015D9D0(*a1);
}

uint64_t sub_10015D298(uint64_t *a1)
{
  return sub_10015DC18(*a1);
}

uint64_t sub_10015D2A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10015DFF0(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10015D2CC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10015D9E0(*a1, *v1);
}

uint64_t sub_10015D2D8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10015DFF8(*a1, *v1);
}

BOOL sub_10015D2E4(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10015D9EC(*a1, *v1);
}

uint64_t sub_10015D2F0()
{
  _QWORD *v0;

  return UIRectCorner.isEmpty.getter(*v0);
}

uint64_t sub_10015D2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10015D310(uint64_t *a1)
{
  return sub_10015DC30(*a1);
}

BOOL sub_10015D318(uint64_t *a1, uint64_t *a2)
{
  return sub_10015D9C4(*a1, *a2);
}

void sub_10015D324(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_1000986C4();
  sub_10004A298();
}

double sub_10015D354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1000D08C8(a1, a2);
  sub_1000DA880(v3, v4);
  return sub_1000BD200(v2);
}

Swift::Int sub_10015D374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = sub_1000D08C8(a1, a2);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v5;
}

void sub_10015D3DC(uint64_t a1, id *a2)
{
  sub_10015DC40(a1, a2);
}

uint64_t sub_10015D3F0(uint64_t a1, id *a2)
{
  return sub_10015DBA8(a1, a2) & 1;
}

void sub_10015D408()
{
  uint64_t *v0;

  sub_10015D324(*v0, (void (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_10015D428(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_10015DE80(a1);
  *a2 = v3;
}

void sub_10015D44C()
{
  uint64_t *v0;

  sub_10015D324(*v0, (void (*)(uint64_t))&String.hashValue.getter);
}

double sub_10015D46C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10015D354(a1, *v1);
}

Swift::Int sub_10015D484(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002BD0E8(a1, *v1);
}

Swift::Int sub_10015D48C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10015D8D4(a1, *v1);
}

Swift::Int sub_10015D494(uint64_t a1)
{
  uint64_t *v1;

  return sub_10015D374(a1, *v1);
}

BOOL sub_10015D4AC(int *a1, int *a2)
{
  return sub_10068A158(*a1, *a2);
}

uint64_t sub_10015D4B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_10015E000(a1);
  *a2 = result;
  return result;
}

_QWORD *sub_10015D4DC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10015D4E8(_QWORD *a1, _QWORD *a2)
{
  return sub_100689ECC(*a1, *a2);
}

uint64_t sub_10015D4F4(uint64_t *a1, uint64_t *a2)
{
  return sub_10015D944(*a1, *a2) & 1;
}

void sub_10015D514(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_10015D544();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

uint64_t sub_10015D54C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_10015D57C(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_10015D57C(uint64_t result)
{
  return result;
}

void sub_10015D598(_DWORD *a1@<X8>)
{
  int v2;

  LocationSearchEntityFromStringResolver.init()();
  *a1 = v2;
  sub_10004A298();
}

_QWORD *sub_10015D5BC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10015D5CC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10015D5DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000F1C8((unint64_t *)&unk_100BCEF40, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey);
  v3 = v2;
  sub_10000F1C8(&qword_100BC2BE0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10015D660@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10015D68C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000F1C8(&qword_100BC2CC0, (uint64_t (*)(uint64_t))type metadata accessor for Key);
  v3 = v2;
  sub_10000F1C8(&qword_100BC2CC8, (uint64_t (*)(uint64_t))type metadata accessor for Key);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10015D710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000F1C8((unint64_t *)&qword_100BC2BE8, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey);
  v3 = v2;
  sub_10000F1C8(&qword_100BC2BF0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10015D794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000F1C8(&qword_100BC2CE0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName);
  v3 = v2;
  sub_10000F1C8(&qword_100BC2CE8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_10015D818(_QWORD *a1@<X8>)
{
  NSString v2;

  v2 = String._bridgeToObjectiveC()();
  sub_1000986C4();
  *a1 = v2;
  sub_100079F70();
}

uint64_t sub_10015D850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000F1C8(&qword_100BC2CD0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey);
  v3 = v2;
  sub_10000F1C8(&qword_100BC2CD8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

Swift::Int sub_10015D8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_10015D944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  sub_1000986C4();
  return v9 & 1;
}

BOOL sub_10015D9C4(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_10015D9D0(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

BOOL sub_10015D9E0(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10015D9EC(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t sub_10015D9F8(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2B28, (uint64_t)&unk_100B5C2A8);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2B30, (uint64_t)&unk_100B5C2D0);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2B38, (uint64_t)&unk_100B5C2F0);
}

uint64_t getEnumTagSinglePayload for ComparisonBarView(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ComparisonBarView(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for MKCoordinateSpan(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2B40, (uint64_t)&unk_100B5C370);
}

void sub_10015DAA0()
{
  sub_10000F1C8(&qword_100BC2B48, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey);
}

void sub_10015DACC()
{
  sub_10000F1C8(&qword_100BC2B50, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey);
}

void sub_10015DAF8()
{
  sub_10000F1C8(&qword_100BC2B58, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey);
}

void sub_10015DB24()
{
  sub_10000F1C8(&qword_100BC2B60, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey);
}

void sub_10015DB50()
{
  sub_10000F1C8(&qword_100BC2B68, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey);
}

void sub_10015DB7C()
{
  sub_10000F1C8(&qword_100BC2B70, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10015DBA8(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  NSString v5;
  uint64_t v7;
  uint64_t v8;

  sub_1000DAC04(a1, a2);
  v7 = 0;
  v8 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v7);
  if (v8)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  *v2 = v5;
  return v4 & 1;
}

uint64_t sub_10015DC18(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_10015DC28(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_10015DC30(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

void sub_10015DC40(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000DAC04(a1, a2);
  v5 = 0;
  v6 = 0;
  static String._forceBridgeFromObjectiveC(_:result:)(v3, &v5);
  if (v6)
  {
    v4 = String._bridgeToObjectiveC()();
    sub_1000986C4();
  }
  else
  {
    v4 = 0;
  }
  *v2 = v4;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2BF8, (uint64_t)&unk_100B5C398);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2C00, (uint64_t)&unk_100B5C3C0);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2C08, (uint64_t)&unk_100B5C3E8);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_100116BA4(a1, &qword_100BC2C10, (uint64_t)&unk_100B5C410);
}

void sub_10015DCF4()
{
  sub_10000F1C8(&qword_100BC2C18, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName);
}

void sub_10015DD20()
{
  sub_10000F1C8(&qword_100BC2C20, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName);
}

void sub_10015DD4C()
{
  sub_10000F1C8(&qword_100BC2C28, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey);
}

void sub_10015DD78()
{
  sub_10000F1C8(&qword_100BC2C30, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey);
}

void sub_10015DDA4()
{
  sub_10000F1C8(&qword_100BC2C38, (uint64_t (*)(uint64_t))type metadata accessor for Key);
}

void sub_10015DDD0()
{
  sub_10000F1C8(&qword_100BC2C40, (uint64_t (*)(uint64_t))type metadata accessor for Key);
}

void sub_10015DDFC()
{
  sub_10000F1C8(&qword_100BC2C48, (uint64_t (*)(uint64_t))type metadata accessor for Key);
}

void sub_10015DE28()
{
  sub_10000F1C8(&qword_100BC2C50, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName);
}

void sub_10015DE54()
{
  sub_10000F1C8(&qword_100BC2C58, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey);
}

void sub_10015DE80(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004A298();
}

void sub_10015DEB0()
{
  sub_10000F1C8(&qword_100BC2CF8, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner);
}

void sub_10015DEDC()
{
  sub_10000F1C8(&qword_100BC2D00, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner);
}

void sub_10015DF08()
{
  sub_10000F1C8(&qword_100BC2D08, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner);
}

void sub_10015DF34()
{
  sub_10000F1C8((unint64_t *)&unk_100BC2D10, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner);
}

uint64_t sub_10015DF60(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_10015DF68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = *v1 & a1;
  if ((UIRectCorner.isEmpty.getter(v4) & 1) != 0)
    return 0;
  *v1 = v3 & ~a1;
  return v4;
}

uint64_t sub_10015DFB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *v1 & a1;
  *v1 |= a1;
  if ((UIRectCorner.isEmpty.getter(v2) & 1) != 0)
    return 0;
  else
    return v2;
}

uint64_t sub_10015DFF0(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t sub_10015DFF8(uint64_t a1, uint64_t a2)
{
  return UIRectCorner.isEmpty.getter(a2 & a1);
}

uint64_t sub_10015E000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t sub_10015E084()
{
  unint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  char v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v29;
  uint64_t v30;
  char v31;

  sub_1000DF414();
  sub_1000CFB28();
  __chkstk_darwin(v2);
  sub_1000BCED8();
  v4 = sub_1000C4388(v3, enum case for WeatherQueryParameterKey.isLocal(_:));
  WeatherQueryParameterKey.rawValue.getter(v4);
  sub_1000C34CC();
  sub_1000DB6D0();
  sub_1000B42E4();
  if (v0)
    result = v0;
  else
    result = 48;
  if (v0)
    v6 = v0;
  else
    v6 = 0xE100000000000000;
  v7 = HIBYTE(v6) & 0xF;
  v8 = result & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v6) & 0xF;
  else
    v9 = result & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    sub_1000986E8();
    return 0;
  }
  if ((v6 & 0x1000000000000000) != 0)
  {
    v11 = (uint64_t)sub_10015E854(result, v6, 10);
    v1 = v31;
    goto LABEL_52;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v6);
    v11 = (uint64_t)sub_10015E938(v10, v8, 10);
    v1 = v12 & 1;
    goto LABEL_52;
  }
  if (result == 43)
  {
    if (!v7)
    {
LABEL_69:
      __break(1u);
      return result;
    }
    if (v7 == 1)
      goto LABEL_38;
    sub_1000C23E4();
    if (!v17 & v16)
      goto LABEL_38;
    v11 = v19;
    if (v18 != 2)
    {
      sub_1000C23E4();
      if (!v17 & v16)
        goto LABEL_38;
      v11 = 10 * v11 + v21;
      if (v20 != 3)
      {
        while (1)
        {
          sub_1000DD670();
          if (!v17 & v16)
            goto LABEL_38;
          sub_1000BA2D4();
          if (!v17)
            goto LABEL_38;
          v11 = v23 + v22;
          if (__OFADD__(v23, v22))
            goto LABEL_38;
          sub_1000C5AA8();
          if (v17)
            goto LABEL_52;
        }
      }
    }
LABEL_51:
    v1 = 0;
    goto LABEL_52;
  }
  if (result != 45)
  {
    if (!v7 || (result - 48) > 9u)
      goto LABEL_38;
    v11 = (result - 48);
    if (v7 != 1)
    {
      sub_1000C23E4();
      if (!v17 & v16)
        goto LABEL_38;
      v11 = 10 * v11 + v25;
      if (v24 != 2)
      {
        while (1)
        {
          sub_1000DD670();
          if (!v17 & v16)
            goto LABEL_38;
          sub_1000BA2D4();
          if (!v17)
            goto LABEL_38;
          v11 = v27 + v26;
          if (__OFADD__(v27, v26))
            goto LABEL_38;
          sub_1000C5AA8();
          if (v17)
            goto LABEL_52;
        }
      }
    }
    goto LABEL_51;
  }
  if (!v7)
  {
    __break(1u);
    goto LABEL_69;
  }
  if (v7 == 1)
    goto LABEL_38;
  sub_1000C23E4();
  if (!v17 & v16)
    goto LABEL_38;
  if (v14 != 2)
  {
    if ((v13 - 48) <= 9u)
    {
      v11 = -10 * v15 - (v13 - 48);
      if (v14 == 3)
        goto LABEL_51;
      while (1)
      {
        sub_1000DD670();
        if (!v17 & v16)
          break;
        sub_1000BA2D4();
        if (!v17)
          break;
        v11 = v30 - v29;
        if (__OFSUB__(v30, v29))
          break;
        sub_1000C5AA8();
        if (v17)
          goto LABEL_52;
      }
    }
LABEL_38:
    v11 = 0;
    v1 = 1;
    goto LABEL_52;
  }
  v1 = 0;
  v11 = -(uint64_t)v15;
LABEL_52:
  sub_1000986E8();
  return (v1 & 1) == 0 && v11 > 0;
}

uint64_t sub_10015E328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t Parameter;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for URLHandlerMatch.Values(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000DF414();
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - v12;
  v14 = sub_1000D1560((uint64_t)&v34 - v12, enum case for WeatherQueryParameterKey.lat(_:));
  Parameter = WeatherQueryParameterKey.rawValue.getter(v14);
  sub_1000D9B50((uint64_t)v13);
  v16 = sub_1000D93B8(Parameter);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (!v18)
    return v18;
  v19 = sub_10015E55C(v16, v18);
  if ((v20 & 1) != 0)
    return 0;
  v18 = v19;
  v21 = sub_1000D1560((uint64_t)v10, enum case for WeatherQueryParameterKey.long(_:));
  v22 = WeatherQueryParameterKey.rawValue.getter(v21);
  sub_1000D9B50((uint64_t)v10);
  v23 = sub_1000D93B8(v22);
  v25 = v24;
  v26 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v34 + 16))(v4, v1, v35, v26);
  if (v25)
  {
    sub_1000DCAB4();
    goto LABEL_6;
  }
  v27 = sub_1000D1560((uint64_t)v7, enum case for WeatherQueryParameterKey.lng(_:));
  v28 = WeatherQueryParameterKey.rawValue.getter(v27);
  v30 = v29;
  sub_1000D9B50((uint64_t)v7);
  v23 = URLHandlerMatch.Values.subscript.getter(v28, v30);
  v25 = v31;
  sub_1000986E8();
  sub_1000DCAB4();
  if (!v25)
    return 0;
LABEL_6:
  sub_10015E55C(v23, v25);
  if ((v32 & 1) != 0)
    return 0;
  return v18;
}

uint64_t sub_10015E55C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BYTE *v6;
  _BYTE v8[16];
  uint64_t *v9;
  _QWORD v10[3];
  uint64_t v11;

  v11 = 0;
  v9 = &v11;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(v10, sub_10015F130, v8, a1, a2, &type metadata for Bool);
    sub_1000986E8();
    v5 = v10[0];
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v10[0] = a1;
    v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v5 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (v6 = (_BYTE *)_swift_stdlib_strtod_clocale(v10, &v11, a1)) != 0
      && *v6 == 0;
    sub_1000986E8();
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v4 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v3 = _StringObject.sharedUTF8.getter(a1, a2);
    }
    v5 = sub_10015F0DC(v3, v4, (void (*)(uint64_t *__return_ptr))sub_10015F148);
    sub_1000986E8();
  }
  if ((v5 & 1) != 0)
    return v11;
  else
    return 0;
}

unint64_t sub_10015E6B8()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = v0;
  sub_1000DF414();
  sub_1000CFB28();
  __chkstk_darwin(v2);
  sub_1000BCED8();
  v4 = sub_1000C4388(v3, enum case for WeatherQueryParameterKey.city(_:));
  WeatherQueryParameterKey.rawValue.getter(v4);
  sub_1000C34CC();
  sub_1000DB6D0();
  sub_1000B42E4();
  if (v0)
  {
    v5 = HIBYTE(v0) & 0xF;
    if ((v0 & 0x2000000000000000) == 0)
      v5 = v0 & 0xFFFFFFFFFFFFLL;
    if (!v5)
    {
      swift_bridgeObjectRelease();
      if (qword_100BC24A8 != -1)
        swift_once(&qword_100BC24A8, sub_1006F3908);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_1000AECD4(v6, (uint64_t)qword_100CAF1E0);
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.error.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        swift_slowDealloc(v11, -1, -1);
      }

      return 0;
    }
  }
  return v1;
}

uint64_t sub_10015E7FC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v9 = String.UTF16View.index(_:offsetBy:)(15, v5, a2);
    sub_1000C515C(v9);
    return v10 | 4;
  }
  else
  {
    v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v5);
    sub_1000C515C(v6);
    return v7 | 8;
  }
}

unsigned __int8 *sub_10015E854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10015EBB4(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease();
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_10015E938(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12;
}

unsigned __int8 *sub_10015E938(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10015EBB4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = sub_10015EC10((uint64_t)sub_10015EC0C, 0, a1, a2);
  v6 = sub_10015EC44(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10015EC10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3;
  v5 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  return String.subscript.getter(15, v5 | (v4 << 16));
}

uint64_t sub_10015EC44(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10015ED88(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1000E628C(v12, 0);
      v5 = sub_10015EE74((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

unint64_t sub_10015ED88(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10015E7FC(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10015E7FC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10015EE74(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = sub_10015E7FC(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = sub_10015E7FC(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

_BYTE *sub_10015F074@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10015F0DC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_BYTE *sub_10015F130@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10015F074(a1, a2);
}

_QWORD *sub_10015F148@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t sub_10015F184(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (!v7 && (sub_100099264(v4, v5, *a2, v6) & 1) == 0)
    return 0;
  v8 = *(int *)(type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0) + 20);
  return static LocationOfInterestType.== infix(_:_:)((char *)a1 + v8, (char *)a2 + v8);
}

void sub_10015F1E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1000F3DD0();
  sub_10011DC48(a1);
  swift_bridgeObjectRelease();
  type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  v2 = sub_10009924C();
  sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  sub_100079F70();
}

Swift::Int sub_10015F25C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  v3 = type metadata accessor for LocationOfInterestType(0);
  sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

Swift::Int sub_10015F310()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  sub_1000F3DD0();
  sub_10011DC48((uint64_t)v3);
  swift_bridgeObjectRelease();
  v0 = sub_10009924C();
  sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

unint64_t sub_10015F39C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B59048, v2);
  sub_1000986E8();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_10015F3E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10015F418 + 4 * byte_10097D770[a1]))(0xD000000000000013, 0x80000001009EF530);
}

uint64_t sub_10015F418(uint64_t a1)
{
  return a1 + 2;
}

void sub_10015F480(char *a1)
{
  sub_10068AE94(*a1);
}

void sub_10015F48C()
{
  unsigned __int8 *v0;

  sub_1004A744C(*v0);
}

void sub_10015F494(uint64_t a1)
{
  char *v1;

  sub_1001D8888(a1, *v1);
}

void sub_10015F49C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001D9F98(a1, *v1);
}

unint64_t sub_10015F4A4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015F39C(*a1);
  *a2 = result;
  return result;
}

void sub_10015F4D0(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_10015F3E0(*v1);
  a1[1] = v3;
  sub_10004A298();
}

void sub_10015F4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37[2];
  id v38;

  sub_1000986AC();
  v2 = v0;
  v4 = v3;
  v35 = v5;
  v36 = v6;
  v7 = (uint64_t)v5;
  sub_1000BA294(&qword_100BC3068);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10007A130();
  v9 = sub_1000BA294(&qword_100BC3070);
  v34 = *(_QWORD *)(v9 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  *(_BYTE *)(v0 + 16) = 1;
  v14 = sub_1000BA294(&qword_100BC3078);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()();
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(1);
  v15 = OBJC_IVAR____TtC7Weather18ListViewTipManager_tipStatus;
  sub_1001104FC();
  sub_100162B54();
  *(_QWORD *)(v0 + v15) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cancellables) = 0;
  v16 = v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = -1;
  sub_10003B59C(v7, v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_notificationsOptInStatusFactory);
  sub_10003B59C((uint64_t)v4, v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_weatherLocationCoalescenceManager);
  *(_QWORD *)&v37[0] = *(_QWORD *)(v0 + 24);
  v17 = v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_debounceTime;
  v18 = (void *)objc_opt_self(NSRunLoop);
  sub_100094EE4();
  v38 = objc_msgSend(v18, "mainRunLoop");
  v19 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  sub_1000BA2E8(v1, v20, v21, v19);
  v22 = sub_10012038C();
  sub_10003D2DC(&qword_100BC3090, &qword_100BC3078);
  v24 = v23;
  sub_10000F1C8((unint64_t *)&qword_100BC3098, (uint64_t (*)(uint64_t))sub_10012038C);
  Publisher.debounce<A>(for:scheduler:options:)(v17, &v38, v1, v14, v22, v24, v25, v26);
  sub_100021A14(v1, &qword_100BC3068);

  swift_release(*(_QWORD *)&v37[0]);
  v27 = sub_100098740((uint64_t)&unk_100B5C728, 24);
  swift_weakInit(v27 + 16, v0);
  sub_10003D2DC(&qword_100BC30A0, &qword_100BC3070);
  v30 = Publisher<>.sink(receiveValue:)(sub_100162BB4, v27, v9, v28, v29);
  v31 = swift_release(v27);
  (*(void (**)(uint64_t, uint64_t, __n128))(v34 + 8))(v13, v9, v31);
  v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cancellables);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cancellables) = v30;
  swift_release(v32);
  sub_100161564(0, 0, 0);
  sub_1000D1568(1);
  sub_1000D1568(2);
  sub_1000D1568(3);
  sub_1000D1568(4);
  sub_10003B59C((uint64_t)v36, (uint64_t)v37);
  v33 = sub_100098740((uint64_t)&unk_100B5C750, 56);
  sub_10003C800(v37, v33 + 16);
  sub_100161564(5, (uint64_t)sub_100162BE0, v33);
  swift_release(v33);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v36);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v35);
  sub_100098640();
}

double sub_10015F84C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_10015F914();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

uint64_t sub_10015F8A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  return dispatch thunk of NotificationsOptInManagerType.didDismissResubscriptionTip()(v1, v2);
}

void sub_10015F8E4(uint64_t a1, __n128 a2)
{
  PassthroughSubject.send(_:)(a1, a2);
  sub_10004A298();
}

double sub_10015F900(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = a1;
  return sub_100161564(4, 0, 0);
}

void sub_10015F914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  NSObject *v59;
  uint64_t *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  unsigned int v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v96;
  _QWORD *v97;
  char v98;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t);
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  os_log_type_t v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  os_log_type_t v138;
  _WORD *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  os_log_type_t v147;
  _WORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  os_log_type_t v153;
  _WORD *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  double v158;
  char v159;
  uint64_t v160;
  os_log_type_t v161;
  _WORD *v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  os_log_type_t v166;
  _WORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  objc_class *v180;
  uint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  void (*v195)(uint64_t);
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  NSObject v200;
  uint64_t (*v201)(uint64_t);
  char v202;

  sub_1000986AC();
  v4 = v0;
  v6 = v5;
  v7 = sub_10009924C();
  v185 = *(_QWORD *)(v7 - 8);
  v186 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v183 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  sub_100079F7C();
  v184 = v11;
  sub_1000BA294(&qword_100BC3118);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_10007A130();
  v190 = sub_1000AE824();
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_1000986FC();
  v194 = v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  v24 = sub_1000DC0C0(v16, v17, v18, v19, v20, v21, v22, v23, v170);
  v192 = type metadata accessor for LocationModel(v24);
  v197 = *(_QWORD *)(v192 - 8);
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_100099234();
  v26 = type metadata accessor for LocationsState(0);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_1000986FC();
  v175 = v28;
  sub_10009D2A4();
  __chkstk_darwin(v29);
  v38 = sub_1000BE990(v30, v31, v32, v33, v34, v35, v36, v37, v171);
  v39 = type metadata accessor for Tips.InvalidationReason(v38);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_100094EC4();
  v41 = *(_QWORD *)(v6 + 64);
  sub_1001625D4();
  if ((v42 & 1) != 0)
  {
    LOBYTE(v200.isa) = *(_BYTE *)(v4 + 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 104))(v1, enum case for Tips.InvalidationReason.actionPerformed(_:), v39);
    v43 = sub_100162BE8();
    Tip.invalidate(reason:)(v1, &type metadata for NotificationsOptInListTip, v43);
    sub_100099254(v1, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
    if (qword_100BC2500 != -1)
      swift_once(&qword_100BC2500, sub_100159654);
    v44 = sub_100098720();
    sub_1000C34E4(v44, (uint64_t)qword_100CAF2E8);
    v45 = sub_10009C0A4();
    if (sub_1000C23F4(v45))
    {
      v46 = (uint8_t *)sub_100098710(2);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, &v200, (os_log_type_t)v39, "Invalidate notification tip due to invalidation before TipKit migration or resubscription tip shown", v46, 2u);
      sub_1000986F0((uint64_t)v46);
    }

  }
  else
  {
    sub_100162090();
    v48 = v47;
    if (qword_100BC1E10 != -1)
      swift_once(&qword_100BC1E10, sub_1001AD394);
    v49 = sub_1000BA294(&qword_100BC3130);
    v50 = sub_1000AECD4(v49, (uint64_t)qword_100CADCF0);
    sub_1000B4304(v50, v48 & 1);
    Tips.Parameter.wrappedValue.setter(&v199, v49);
    sub_1000CDE8C();
  }
  sub_1001623E4(v41);
  v52 = v51;
  if (qword_100BC1F28 != -1)
    swift_once(&qword_100BC1F28, sub_100286D90);
  v53 = sub_1000BA294(&qword_100BC3130);
  v54 = sub_1000AECD4(v53, (uint64_t)qword_100CAE5D8);
  sub_1000B4304(v54, v52 & 1);
  v176 = v53;
  Tips.Parameter.wrappedValue.setter(&v199, v53);
  sub_1000CDE8C();
  v174 = v41;
  v55 = v41 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  sub_10000AB54(v41 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v181, type metadata accessor for LocationsState);
  v177 = v26;
  v56 = v55 + *(int *)(v26 + 48);
  v58 = *(_QWORD *)v56;
  v57 = *(uint64_t (**)(uint64_t))(v56 + 8);
  v59 = *(unsigned __int8 *)(v56 + 16);
  v60 = (uint64_t *)(v4 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState);
  v61 = *(unsigned __int8 *)(v4
                                       + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState
                                       + 16);
  v182 = v59;
  v179 = v4 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState;
  if ((_DWORD)v61 == 255)
  {
    sub_100163980(v58, (uint64_t)v57, v59);
LABEL_16:
    if (qword_100BC2500 != -1)
      swift_once(&qword_100BC2500, sub_100159654);
    v72 = sub_100098720();
    sub_1000AECD4(v72, (uint64_t)qword_100CAF2E8);
    v73 = v59;
    sub_100163980(v58, (uint64_t)v57, v59);
    swift_retain();
    sub_100163980(v58, (uint64_t)v57, v59);
    swift_retain();
    sub_1000C6D40();
    v74 = sub_100099224();
    v178 = (uint64_t)v57;
    v180 = (objc_class *)v58;
    if (sub_1000B42F4(v74))
    {
      v75 = sub_100098710(42);
      v173 = sub_100098710(64);
      *(_DWORD *)v75 = 141558787;
      v199 = v173;
      v200.isa = (Class)1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
      *(_WORD *)(v75 + 12) = 2081;
      v200.isa = v180;
      v201 = v57;
      v202 = (char)v59;
      sub_100163A24();
      v172 = v61;
      v76 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for LocationsOfInterestState);
      v200.isa = (Class)sub_1000CE1C8(v76, v77, &v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
      sub_10003BC58();
      sub_1000DC83C();
      sub_1000DC83C();
      *(_WORD *)(v75 + 22) = 2160;
      v200.isa = (Class)1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
      *(_WORD *)(v75 + 32) = 2081;
      v78 = *(_QWORD *)v179;
      v57 = *(uint64_t (**)(uint64_t))(v179 + 8);
      v79 = *(_BYTE *)(v179 + 16);
      sub_100163A60(*(_QWORD *)v179, (uint64_t)v57, v79);
      v80 = sub_1004905C8(v78, (uint64_t)v57, v79);
      v82 = v81;
      v83 = v78;
      v73 = v59;
      sub_100163A10(v83, (uint64_t)v57, v79);
      v200.isa = (Class)sub_1000CE1C8(v80, v82, &v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
      swift_bridgeObjectRelease(v82);
      sub_1000CFFC0();
      v61 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, v172, "ListViewTipManager detected location of interest state change new=%{private,mask.hash}s, old=%{private,mask.hash}s", (uint8_t *)v75, 0x2Au);
      swift_arrayDestroy(v173, 2);
      sub_1000986F0(v173);
      v84 = v75;
      v58 = (uint64_t)v180;
      sub_1000986F0(v84);
    }
    else
    {
      sub_1000DB1D0();
      sub_1000DB1D0();
      sub_1000CFFC0();
    }

    v85 = v190;
    if (v73 < 2)
    {
      sub_1000C6D40();
      v86 = sub_10009C0A4();
      v87 = v179;
      if (sub_1000C23F4(v86))
      {
        v88 = (uint8_t *)sub_100098710(2);
        *(_WORD *)v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v57, "ListViewTipManager location of interest state is new or saved", v88, 2u);
        sub_1000986F0((uint64_t)v88);
      }

      v89 = *(_QWORD *)(*(_QWORD *)(v181 + *(int *)(v177 + 24)) + 16);
      if (v89)
      {
        sub_1000C1254();
        v92 = v90 + v91;
        v94 = *(_QWORD *)(v93 + 72);
        v95 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v93 + 16);
        v187 = v90;
        v96 = swift_bridgeObjectRetain(v90);
        v97 = _swiftEmptyArrayStorage;
        do
        {
          v95(v2, v92, v192, v96);
          sub_10009BE20();
          (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v2, v192);
          sub_100088FC8(v3, 1, v85);
          if (v98)
          {
            sub_100021A14(v3, &qword_100BC3118);
          }
          else
          {
            sub_10009BBCC(v188, v3);
            sub_10009BBCC(v194, v188);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1000ED1E8();
              v97 = v105;
            }
            v100 = v97[2];
            if (v100 >= v97[3] >> 1)
            {
              sub_1000ED1E8();
              v97 = v106;
            }
            v97[2] = v100 + 1;
            sub_1000C1254();
            v103 = (uint64_t)v97 + v101 + *(_QWORD *)(v102 + 72) * v100;
            v85 = v190;
            sub_10009BBCC(v103, v104);
          }
          v92 += v94;
          --v89;
        }
        while (v89);
        swift_bridgeObjectRelease(v187);
        v87 = v179;
      }
      else
      {
        v97 = _swiftEmptyArrayStorage;
      }
      v144 = (void *)v97[2];
      swift_bridgeObjectRelease(v97);
      LOBYTE(v73) = v182;
      v146 = v178;
      if (!v144)
      {
        sub_1000B3AF8(v145, type metadata accessor for LocationsState);
        v69 = (uint64_t)v180;
        v70 = v178;
        v71 = v182;
        goto LABEL_63;
      }
      sub_1000C6D40();
      v147 = sub_100099224();
      v58 = (uint64_t)v180;
      if (sub_1000B42F4(v147))
      {
        v148 = (_WORD *)sub_100098710(2);
        sub_1000CF710(v148);
        sub_10009D290((void *)&_mh_execute_header, v149, v150, "ListViewTipManager set HomeAndWorkAddedTip.displayTip = true");
        sub_1000986F0(v178);
      }

      if (qword_100BC2508 != -1)
        swift_once(&qword_100BC2508, sub_1006FD9DC);
      v151 = qword_100CAF300;
      goto LABEL_61;
    }
    v87 = v179;
    if (v73 == 2)
    {
      v57 = type metadata accessor for LocationsState;
      sub_10000AB54(v174 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v175, type metadata accessor for LocationsState);
      sub_10016075C();
      v85 = v107;
      sub_1000215BC(v175, type metadata accessor for LocationsState);
      if (*(_QWORD *)(v85 + 16))
      {
        v108 = sub_1000BA294(&qword_100BC3138);
        v109 = *(_QWORD *)(v185 + 72);
        v110 = *(unsigned __int8 *)(v185 + 80);
        v111 = (v110 + 32) & ~v110;
        v112 = swift_allocObject(v108, v111 + 2 * v109, v110 | 7);
        *(_OWORD *)(v112 + 16) = xmmword_10097DA20;
        v196 = v112;
        v113 = v112 + v111;
        v114 = *(void (**)(uint64_t))(v185 + 104);
        v193 = enum case for LocationOfInterestType.home(_:);
        v115 = v186;
        v114(v113);
        v189 = enum case for LocationOfInterestType.work(_:);
        v195 = v114;
        v114(v113 + v109);
        v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v185 + 16);
        v117 = v85 + 56;
        sub_10009EF94();
        v118 = 0;
        v119 = 0;
        v120 = v184;
        v191 = v113;
        while (1)
        {
          v121 = v118;
          v116(v120, v113 + v119 * v109, v115);
          if (!*(_QWORD *)(v85 + 16))
            break;
          v122 = *(_QWORD *)(v85 + 40);
          sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
          v124 = dispatch thunk of Hashable._rawHashValue(seed:)(v122, v115, v123);
          v125 = -1 << *(_BYTE *)(v85 + 32);
          v126 = v124 & ~v125;
          if (((*(_QWORD *)(v117 + ((v126 >> 3) & 0xFFFFFFFFFFFFF8)) >> v126) & 1) == 0)
            break;
          v198 = v121;
          v127 = ~v125;
          while (1)
          {
            v116(v183, *(_QWORD *)(v85 + 48) + v126 * v109, v186);
            sub_10000F1C8(&qword_100BC3140, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
            v129 = dispatch thunk of static Equatable.== infix(_:_:)(v183, v120, v186, v128);
            v130 = *(void (**)(uint64_t, uint64_t))(v185 + 8);
            v130(v183, v186);
            if ((v129 & 1) != 0)
              break;
            v126 = (v126 + 1) & v127;
            v120 = v184;
            if (((*(_QWORD *)(v117 + ((v126 >> 3) & 0xFFFFFFFFFFFFF8)) >> v126) & 1) == 0)
              goto LABEL_71;
          }
          v120 = v184;
          v115 = v186;
          v130(v184, v186);
          v118 = 1;
          v119 = 1;
          v58 = (uint64_t)v180;
          v113 = v191;
          if ((v198 & 1) != 0)
          {
            swift_bridgeObjectRelease(v196);
            v131 = sub_100098718(v85);
            Logger.logObject.getter(v131);
            v132 = sub_100099224();
            LOBYTE(v73) = v182;
            v87 = v179;
            if (sub_1000B42F4(v132))
            {
              v133 = (_WORD *)sub_100098710(2);
              sub_1000CF710(v133);
              sub_10009D290((void *)&_mh_execute_header, v134, v135, "ListViewTipManager set HomeAndWorkUpdatedTip.displayTip = true");
              sub_1000986F0(v184);
            }

            if (qword_100BC21E8 != -1)
              swift_once(&qword_100BC21E8, sub_100560B78);
            v136 = sub_1000AECD4(v176, (uint64_t)qword_100CAED08);
            sub_1000B4304(v136, 1);
            sub_1000B2500();
            v137 = sub_1000CDE8C();
            goto LABEL_68;
          }
        }
LABEL_71:
        sub_1000C0098(v120);
        swift_bridgeObjectRelease(v196);
        v158 = sub_1000986E8();
        ((void (*)(uint64_t, _QWORD, uint64_t, double))v195)(v183, v193, v186, v158);
        v159 = sub_10011DAE0();
        sub_1000C0098(v183);
        if ((v159 & 1) != 0)
        {
          sub_1000986E8();
          Logger.logObject.getter(v160);
          v161 = sub_100099224();
          LOBYTE(v73) = v182;
          v87 = v179;
          if (sub_1000B42F4(v161))
          {
            v162 = (_WORD *)sub_100098710(2);
            sub_1000CF710(v162);
            sub_10009D290((void *)&_mh_execute_header, v163, v164, "ListViewTipManager set HomeUpdatedTip.displayTip = true");
            sub_1000986F0(v186);
          }

          v146 = v178;
          v58 = (uint64_t)v180;
          if (qword_100BC21D8 != -1)
            swift_once(&qword_100BC21D8, sub_10055DF70);
          v151 = qword_100CAECE8;
        }
        else
        {
          ((void (*)(uint64_t, _QWORD, uint64_t))v195)(v183, v189, v186);
          v165 = sub_10011DAE0();
          sub_1000986E8();
          v137 = sub_1000C0098(v183);
          LOBYTE(v73) = v182;
          v146 = v178;
          v87 = v179;
          v58 = (uint64_t)v180;
          if ((v165 & 1) == 0)
            goto LABEL_69;
          Logger.logObject.getter(v137);
          v166 = sub_100099224();
          if (sub_1000B42F4(v166))
          {
            v167 = (_WORD *)sub_100098710(2);
            sub_1000CF710(v167);
            sub_10009D290((void *)&_mh_execute_header, v168, v169, "ListViewTipManager set WorkUpdatedTip.displayTip = true");
            sub_1000986F0(v178);
          }

          if (qword_100BC21D0 != -1)
            swift_once(&qword_100BC21D0, sub_10055B9CC);
          v151 = qword_100CAECD0;
        }
LABEL_61:
        v152 = sub_1000AECD4(v176, (uint64_t)v151);
        sub_1000B4304(v152, 1);
        sub_1000B2500();
        v137 = sub_1000CDE8C();
LABEL_69:
        sub_1000B3AF8(v137, type metadata accessor for LocationsState);
        v155 = *(_QWORD *)v87;
        v156 = *(_QWORD *)(v87 + 8);
        *(_QWORD *)v87 = v58;
        *(_QWORD *)(v87 + 8) = v146;
        v157 = *(_BYTE *)(v87 + 16);
        *(_BYTE *)(v87 + 16) = v73;
        sub_100163A10(v155, v156, v157);
        goto LABEL_70;
      }
      sub_1000986E8();
      sub_1000C6D40();
      v153 = sub_100099224();
      if (sub_1000B42F4(v153))
      {
        v154 = (_WORD *)sub_100098710(2);
        sub_1000CF710(v154);
        v143 = "ListViewTipManager changes is empty";
        goto LABEL_66;
      }
    }
    else
    {
      sub_1000C6D40();
      v138 = sub_100099224();
      if (sub_1000B42F4(v138))
      {
        v140 = (_WORD *)sub_100098710(2);
        sub_1000CF710(v140);
        v143 = "ListViewTipManager location of interest state is none";
LABEL_66:
        sub_10009D290((void *)&_mh_execute_header, v141, v142, v143);
        sub_1000986F0((uint64_t)v57);
      }
    }

LABEL_68:
    v146 = v178;
    goto LABEL_69;
  }
  v62 = (uint64_t)v57;
  v64 = *v60;
  v63 = v60[1];
  sub_1000F434C();
  sub_1000F434C();
  sub_100163A60(v64, v63, v61);
  sub_100923B94(v64, v63, (char)v61);
  v66 = v65;
  sub_1001639C8(v58, v62, v59);
  v67 = v63;
  v57 = (uint64_t (*)(uint64_t))v62;
  sub_100163A10(v64, v67, v61);
  if ((v66 & 1) == 0)
    goto LABEL_16;
  sub_1000B3AF8(v68, type metadata accessor for LocationsState);
  v69 = v58;
  v70 = v62;
  v71 = v59;
LABEL_63:
  sub_1001639C8(v69, v70, v71);
LABEL_70:
  sub_100098640();
}

void sub_10016075C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t (*)(uint64_t), uint64_t);
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  int v143;
  int v144;
  char v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  uint64_t v160;
  os_log_type_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t (*v190)(uint64_t);
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v195)(uint64_t);
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209[2];

  sub_1000986AC();
  v196 = (_QWORD *)v2;
  v197 = v3;
  v5 = v4;
  v6 = sub_10009924C();
  v206 = *(_QWORD *)(v6 - 8);
  v207 = v6;
  sub_10009D98C();
  __chkstk_darwin(v7);
  v198 = (char *)&v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v9);
  v18 = sub_1000DC0C0(v10, v11, v12, v13, v14, v15, v16, v17, v179);
  v19 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(v18);
  v203 = *(_QWORD *)(v19 - 8);
  v204 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_1000986FC();
  v188 = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  sub_1000860D0();
  v187 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  sub_1000860D0();
  v199 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v179 - v27);
  sub_1000BA294(&qword_100BC3118);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_1000986FC();
  v205 = v30;
  sub_10009D2A4();
  __chkstk_darwin(v31);
  sub_1000860D0();
  v191 = v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  sub_1000860D0();
  v195 = v34;
  sub_10009D2A4();
  __chkstk_darwin(v35);
  v44 = sub_1000BE990(v36, v37, v38, v39, v40, v41, v42, v43, v179);
  v45 = type metadata accessor for LocationModel(v44);
  v46 = *(_QWORD *)(v45 - 8);
  v201 = v45;
  v202 = v46;
  sub_10009D98C();
  __chkstk_darwin(v47);
  sub_1000986FC();
  v186 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  sub_1000860D0();
  v190 = v50;
  sub_10009D2A4();
  __chkstk_darwin(v51);
  v53 = (uint64_t (*)(uint64_t))((char *)&v179 - v52);
  __chkstk_darwin(v54);
  sub_1000860D0();
  v180 = v55;
  sub_10009D2A4();
  __chkstk_darwin(v56);
  sub_1000860D0();
  v193 = v57;
  sub_10009D2A4();
  __chkstk_darwin(v58);
  sub_100079F7C();
  v185 = v59;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v60);
  sub_100098728();
  v63 = v62 - v61;
  v192 = type metadata accessor for WeatherCoalescedLocationResult(0, v64);
  v65 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  sub_100099234();
  v66 = (_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_weatherLocationCoalescenceManager);
  sub_1000DB418((_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_weatherLocationCoalescenceManager), *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_weatherLocationCoalescenceManager + 24));
  v184 = type metadata accessor for CurrentLocation(0);
  v69 = sub_1000BA2E8(v63, v67, v68, v184);
  v70 = type metadata accessor for LocationsState(v69);
  v183 = *(_QWORD *)(v5 + *(int *)(v70 + 20));
  v182 = *(_QWORD *)(v5 + *(int *)(v70 + 52));
  sub_1000B3080(v63, v183, (uint64_t)v196, v182);
  sub_100021A14(v63, (uint64_t *)&unk_100C0D170);
  v181 = WeatherCoalescedLocationResult.coalescedLocations.getter(v71);
  v72 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v73 = v192;
  v72(v1, v192);
  sub_1000DB418(v66, v66[3]);
  _s7Weather24LocationCompositionStateOwst_0(v63, 1, 1, v184);
  v74 = v181;
  sub_1000B3080(v63, v183, v197, v182);
  sub_100021A14(v63, (uint64_t *)&unk_100C0D170);
  v196 = (_QWORD *)WeatherCoalescedLocationResult.coalescedLocations.getter(v75);
  v72(v1, v73);
  v76 = (unint64_t)_swiftEmptyArrayStorage;
  v209[0] = (uint64_t)_swiftEmptyArrayStorage;
  v77 = *(_QWORD *)(v74 + 16);
  v197 = (uint64_t)v53;
  v192 = v77;
  if (v77)
  {
    v78 = 0;
    v79 = v201;
    v80 = v185;
    v189 = v28;
    while (v78 < *(_QWORD *)(v74 + 16))
    {
      v76 = v202;
      v81 = v79;
      v82 = (*(unsigned __int8 *)(v202 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80);
      v83 = *(_QWORD *)(v202 + 72);
      v84 = v74;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v202 + 16))(v80, v74 + v82 + v83 * v78, v81);
      v85 = (uint64_t)v194;
      sub_10009BE20();
      v86 = sub_1000AE824();
      v87 = _s7Weather24LocationCompositionStateOwet_0(v85, 1, v86);
      sub_100021A14(v85, &qword_100BC3118);
      if ((_DWORD)v87 == 1)
      {
        sub_100098748(v80, *(uint64_t (**)(uint64_t, uint64_t))(v76 + 8));
        v79 = v81;
        v74 = v84;
      }
      else
      {
        v76 = *(_QWORD *)(v76 + 32);
        ((void (*)(uint64_t, uint64_t, uint64_t))v76)(v193, v80, v81);
        if ((sub_1000CD530() & 1) == 0)
        {
          sub_10009D2B0();
          v87 = v209[0];
        }
        v74 = v84;
        v88 = *(_QWORD *)(v87 + 16);
        if (v88 >= *(_QWORD *)(v87 + 24) >> 1)
        {
          sub_10011ED70();
          v87 = v209[0];
        }
        *(_QWORD *)(v87 + 16) = v88 + 1;
        v89 = v87 + v82 + v88 * v83;
        v79 = v201;
        ((void (*)(unint64_t, uint64_t, uint64_t))v76)(v89, v193, v201);
        v209[0] = v87;
        v53 = (uint64_t (*)(uint64_t))v197;
        v80 = v185;
      }
      ++v78;
      v28 = v189;
      if (v192 == v78)
      {
        v76 = v209[0];
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_66;
  }
  v79 = v201;
LABEL_14:
  sub_100098738();
  v90 = *(_QWORD *)(v76 + 16);
  v91 = v180;
  if (v90)
  {
    v209[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100605B90();
    sub_1000C1254();
    v93 = v76 + v92;
    v95 = *(_QWORD *)(v94 + 72);
    v192 = v76;
    v193 = v95;
    v194 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 16);
    while (1)
    {
      v96 = v194(v91, v93, v79);
      v97 = LocationModel.name.getter(v96);
      v99 = v98;
      v100 = (uint64_t)v195;
      LocationModel.locationOfInterest.getter(v97);
      v101 = (uint64_t (*)(uint64_t))v100;
      v102 = sub_1000AE824();
      v103 = sub_100088FC8(v100, 1, v102);
      if (v104)
        break;
      v105 = v200;
      LocationOfInterest.type.getter(v103);
      sub_100098748((uint64_t)v101, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 8));
      *v28 = v97;
      v28[1] = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))((char *)v28 + *(int *)(v204 + 20), v105, v207);
      v106 = v202;
      sub_100099254(v91, *(uint64_t (**)(uint64_t, uint64_t))(v202 + 8));
      if ((sub_1000CD530() & 1) == 0)
      {
        sub_1000D08D4();
        v101 = (uint64_t (*)(uint64_t))v209[0];
      }
      v53 = (uint64_t (*)(uint64_t))v197;
      v76 = *((_QWORD *)v101 + 2);
      if (v76 >= *((_QWORD *)v101 + 3) >> 1)
      {
        sub_1000C0C40();
        v101 = (uint64_t (*)(uint64_t))v209[0];
      }
      *((_QWORD *)v101 + 2) = v76 + 1;
      sub_1000CDB60();
      sub_100163844((uint64_t)v28, v107 + v108 * v76);
      v93 += v193;
      if (!--v90)
      {
        v109 = swift_release(v192);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_72;
  }
  sub_10009925C();
  v101 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
  v106 = v202;
LABEL_24:
  v209[0] = (uint64_t)_swiftEmptyArrayStorage;
  v110 = (uint64_t)v196;
  v111 = v196[2];
  v112 = v186;
  v195 = v101;
  if (v111)
  {
    v113 = 0;
    while (v113 < *(_QWORD *)(v110 + 16))
    {
      v114 = (*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      v115 = *(_QWORD *)(v106 + 72);
      v116 = (*(uint64_t (**)(uint64_t (*)(uint64_t), unint64_t, uint64_t, __n128))(v106 + 16))(v53, v110 + v114 + v115 * v113, v79, v109);
      v76 = v191;
      LocationModel.locationOfInterest.getter(v116);
      v117 = sub_1000AE824();
      v118 = _s7Weather24LocationCompositionStateOwet_0(v76, 1, v117);
      sub_100021A14(v76, &qword_100BC3118);
      if ((_DWORD)v118 == 1)
      {
        sub_100099254((uint64_t)v53, *(uint64_t (**)(uint64_t, uint64_t))(v106 + 8));
      }
      else
      {
        v119 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(v106 + 32);
        v119((uint64_t)v190, v53, v79);
        if ((sub_1000CD530() & 1) == 0)
        {
          sub_10009D2B0();
          v118 = v209[0];
        }
        v76 = *(_QWORD *)(v118 + 16);
        if (v76 >= *(_QWORD *)(v118 + 24) >> 1)
        {
          sub_10011ED70();
          v118 = v209[0];
        }
        *(_QWORD *)(v118 + 16) = v76 + 1;
        v79 = v201;
        v119(v118 + v114 + v76 * v115, v190, v201);
        v209[0] = v118;
        v112 = v186;
      }
      ++v113;
      v110 = (uint64_t)v196;
      if (v111 == v113)
      {
        v120 = (_QWORD *)v209[0];
        goto LABEL_37;
      }
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v120 = _swiftEmptyArrayStorage;
LABEL_37:
  swift_bridgeObjectRelease(v110);
  v121 = v120[2];
  if (v121)
  {
    v209[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100605B90();
    v122 = (char *)v120
         + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
    v123 = *(_QWORD *)(v106 + 72);
    v196 = v120;
    v197 = v123;
    v202 = *(_QWORD *)(v106 + 16);
    v125 = v200;
    v124 = v201;
    while (1)
    {
      v126 = ((uint64_t (*)(uint64_t, char *, uint64_t))v202)(v112, v122, v124);
      v127 = LocationModel.name.getter(v126);
      v129 = v128;
      v130 = v205;
      LocationModel.locationOfInterest.getter(v127);
      v131 = v130;
      v132 = sub_1000AE824();
      v133 = sub_100088FC8(v131, 1, v132);
      if (v104)
        break;
      LocationOfInterest.type.getter(v133);
      sub_100098748(v205, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 8));
      v134 = v199;
      *v199 = v127;
      v134[1] = v129;
      (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))((char *)v134 + *(int *)(v204 + 20), v125, v207);
      sub_100099254(v112, *(uint64_t (**)(uint64_t, uint64_t))(v106 + 8));
      v76 = v209[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v209[0]) & 1) == 0)
      {
        sub_1000D08D4();
        v76 = v209[0];
      }
      v135 = *(_QWORD *)(v76 + 16);
      if (v135 >= *(_QWORD *)(v76 + 24) >> 1)
      {
        sub_1000C0C40();
        v76 = v209[0];
      }
      *(_QWORD *)(v76 + 16) = v135 + 1;
      sub_1000C1254();
      sub_100163844((uint64_t)v199, v76 + v136 + *(_QWORD *)(v137 + 72) * v135);
      v122 += v197;
      if (!--v121)
      {
        swift_release(v196);
        goto LABEL_47;
      }
    }
LABEL_72:
    __break(1u);
    return;
  }
  sub_10009925C();
  v76 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_47:
  v53 = v195;
  sub_100094EDC();
  sub_1005FC674();
  v139 = v138;
  sub_10009EF94();
  sub_1005FC674();
  v209[0] = v139;
  sub_100162E30(v140);
  v79 = v209[0];
  v141 = *(_QWORD *)(v209[0] + 16);
  if (!v141)
  {
    sub_10003BC58();
LABEL_60:
    sub_1005FC9F8();
    v79 = v157;
    if (qword_100BC2500 == -1)
      goto LABEL_61;
    goto LABEL_70;
  }
  v209[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100605B5C();
  v142 = sub_1002F9440(v79);
  v144 = v143;
  v146 = v145 & 1;
  v205 = v79 + 56;
  v53 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType;
  while ((v142 & 0x8000000000000000) == 0 && v142 < 1 << *(_BYTE *)(v79 + 32))
  {
    if (((*(_QWORD *)(v205 + (((unint64_t)v142 >> 3) & 0xFFFFFFFFFFFFF8)) >> v142) & 1) == 0)
      goto LABEL_68;
    if (*(_DWORD *)(v79 + 36) != v144)
      goto LABEL_69;
    v147 = v187;
    sub_10000AB54(*(_QWORD *)(v79 + 48) + *(_QWORD *)(v203 + 72) * v142, v187, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    v148 = v147;
    v149 = v188;
    sub_100163844(v148, v188);
    (*(void (**)(char *, uint64_t, uint64_t))(v206 + 16))(v198, v149 + *(int *)(v204 + 20), v207);
    sub_1000215BC(v149, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    if ((sub_1000CD530() & 1) == 0)
    {
      sub_100605B5C();
      v149 = v209[0];
    }
    v150 = *(_QWORD *)(v149 + 16);
    if (v150 >= *(_QWORD *)(v149 + 24) >> 1)
    {
      sub_100605B5C();
      v149 = v209[0];
    }
    *(_QWORD *)(v149 + 16) = v150 + 1;
    sub_1000CDB60();
    (*(void (**)(unint64_t, char *))(v153 + 32))(v151 + v152 * v150, v198);
    v209[0] = v149;
    v154 = sub_100163888(v142, v144, v146 & 1, v79);
    v142 = v154;
    v144 = v155;
    v146 = v156 & 1;
    if (!--v141)
    {
      sub_10016396C(v154, v155, v156 & 1);
      sub_10003BC58();
      v53 = v195;
      goto LABEL_60;
    }
  }
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  swift_once(&qword_100BC2500, sub_100159654);
LABEL_61:
  v158 = sub_100098720();
  v159 = sub_1000AECD4(v158, (uint64_t)qword_100CAF2E8);
  swift_bridgeObjectRetain_n(v79, 2);
  sub_100094EDC();
  v160 = sub_10009EF94();
  Logger.logObject.getter(v160);
  v161 = sub_10009C0A4();
  v162 = v161;
  if (os_log_type_enabled(v159, v161))
  {
    v163 = sub_100098710(52);
    LODWORD(v205) = v162;
    v164 = v163;
    v206 = sub_100098710(96);
    v209[0] = v206;
    *(_DWORD *)v164 = 136316163;
    sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
    v165 = swift_bridgeObjectRetain(v79);
    v166 = Set.description.getter(v165);
    v168 = v167;
    sub_10003BC58();
    v208 = sub_1000CE1C8(v166, v168, v209);
    sub_1000FDAC4();
    sub_100098738();
    sub_100098718(v79);
    *(_WORD *)(v164 + 12) = 2160;
    sub_1000C1C6C();
    *(_WORD *)(v164 + 22) = 2081;
    v169 = sub_100094EDC();
    v170 = v204;
    v171 = Array.description.getter(v169, v204);
    v173 = v172;
    swift_bridgeObjectRelease(v53);
    v208 = sub_1000CE1C8(v171, v173, v209);
    sub_1000FDAC4();
    sub_10009D2E0();
    sub_100098718((uint64_t)v53);
    *(_WORD *)(v164 + 32) = 2160;
    sub_1000C1C6C();
    *(_WORD *)(v164 + 42) = 2081;
    v174 = sub_10009EF94();
    v175 = Array.description.getter(v174, v170);
    v177 = v176;
    sub_1000986E8();
    v208 = sub_1000CE1C8(v175, v177, v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, v209);
    swift_bridgeObjectRelease(v177);
    sub_100098718(v76);
    _os_log_impl((void *)&_mh_execute_header, v159, (os_log_type_t)v205, "Location of interest changes = %s, with oldSavedLocationsWithLocationOfInterest %{private,mask.hash}s, with newSavedLocationsWithLocationOfInterest %{private,mask.hash}s", (uint8_t *)v164, 0x34u);
    v178 = v206;
    swift_arrayDestroy(v206, 3);
    sub_1000986F0(v178);
    sub_1000986F0(v164);
  }
  else
  {
    sub_100098718(v79);
    sub_100098718((uint64_t)v53);
    sub_100098718(v76);
  }

  sub_100098640();
}

void sub_1001614AC(char a1)
{
  __asm { BR              X10 }
}

void sub_1001614D8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = &type metadata for HomeAndWorkAddedTip;
  *(_QWORD *)(v0 + 32) = sub_100162DE0();
  sub_10004A298();
}

double sub_100161564(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  v5 = v3;
  sub_1000BA294(&qword_100BC30C8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100094EC4();
  v10 = type metadata accessor for TaskPriority(0);
  v13 = sub_1000BA2E8(v4, v11, v12, v10);
  type metadata accessor for MainActor(v13);
  swift_retain();
  sub_1000FDC6C(a2, a3);
  v15 = static MainActor.shared.getter(v14);
  v16 = sub_100098740((uint64_t)&unk_100B5C778, 64);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v16 + 32) = v5;
  *(_BYTE *)(v16 + 40) = a1;
  *(_QWORD *)(v16 + 48) = a2;
  *(_QWORD *)(v16 + 56) = a3;
  v17 = sub_100966894(v4, (uint64_t)&unk_100BC30D8, v16);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_100161638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 + 64) = a6;
  *(_QWORD *)(v7 + 72) = a7;
  *(_BYTE *)(v7 + 208) = a5;
  *(_QWORD *)(v7 + 56) = a4;
  v8 = type metadata accessor for Tips.Status(0);
  *(_QWORD *)(v7 + 80) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 88) = v9;
  *(_QWORD *)(v7 + 96) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC30B8);
  *(_QWORD *)(v7 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BC30E0);
  *(_QWORD *)(v7 + 112) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 120) = v12;
  *(_QWORD *)(v7 + 128) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BC30E8);
  *(_QWORD *)(v7 + 136) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 144) = v14;
  *(_QWORD *)(v7 + 152) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 160) = v15;
  *(_QWORD *)(v7 + 168) = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15);
  *(_QWORD *)(v7 + 176) = v16;
  *(_QWORD *)(v7 + 184) = v17;
  return swift_task_switch(sub_100161754, v16, v17);
}

uint64_t sub_100161754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  sub_1001614AC(*(_BYTE *)(v0 + 208));
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  sub_1000DB418((_QWORD *)(v0 + 16), v4);
  Tip.statusUpdates.getter(v4, v5);
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v6 = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  v7 = static MainActor.shared.getter(v6);
  *(_QWORD *)(v0 + 192) = v7;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v9 = sub_1000EAEE8(v8);
  return AsyncStream.Iterator.next(isolation:)(v9, v7, &protocol witness table for MainActor);
}

uint64_t sub_100161840()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*v0 + 200));
  swift_release(v2);
  return swift_task_switch(sub_100161894, *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184));
}

uint64_t sub_100161894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  sub_100088FC8(v1, 1, v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 96);
    sub_1000AE82C(*(_QWORD *)(v0 + 144));
    sub_10009925C();
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v1);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v0 + 96), v1, v2);
    sub_1001619C4();
    v8 = sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v9 = static MainActor.shared.getter(v8);
    *(_QWORD *)(v0 + 192) = v9;
    v10 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v11 = sub_1000EAEE8(v10);
    return AsyncStream.Iterator.next(isolation:)(v11, v9, &protocol witness table for MainActor);
  }
}

void sub_1001619C4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  os_log_type_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD v87[3];
  uint64_t v88;

  sub_1000986AC();
  v73 = v1;
  v76 = v2;
  v4 = v3;
  v84 = v5;
  v78 = type metadata accessor for Tips.InvalidationReason(0);
  v82 = *(_QWORD *)(v78 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v77 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  sub_100079F7C();
  v79 = v9;
  v10 = sub_1001104FC();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v81 = ((char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10009D2A4();
  __chkstk_darwin(v13);
  sub_100079F7C();
  v74 = v14;
  v15 = sub_1000BA294(&qword_100BC30B0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  sub_1000BA294(&qword_100BC30B8);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_1000986FC();
  v80 = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  v24 = (char *)&v72 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v72 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v72 - v29;
  v31 = (_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_tipStatus);
  sub_10009922C((uint64_t)v31, (uint64_t)&v88, 0);
  swift_bridgeObjectRetain(*v31);
  sub_1007D4A4C();
  sub_100098738();
  v83 = v11;
  sub_1000E766C((uint64_t)v27);
  sub_1000BCEF0((uint64_t)v27);
  sub_10009922C((uint64_t)v31, (uint64_t)v87, 33);
  v75 = v4;
  sub_10016B3F0((uint64_t)v27, v4);
  swift_endAccess(v87);
  sub_1000E766C((uint64_t)v24);
  sub_1000BCEF0((uint64_t)v24);
  v32 = v19 + *(int *)(v15 + 48);
  v85 = v30;
  sub_10003773C((uint64_t)v30, v19, &qword_100BC30B8);
  sub_10003773C((uint64_t)v24, v32, &qword_100BC30B8);
  v33 = sub_100088FC8(v19, 1, v10);
  if (!v36)
  {
    v35 = v80;
    sub_10003773C(v19, v80, &qword_100BC30B8);
    v37 = sub_100088FC8(v32, 1, v10);
    if (!v36)
    {
      v34 = (uint64_t (**)(uint64_t, uint64_t))v83;
      v63 = v74;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v74, v32, v10);
      sub_10000F1C8(&qword_100BC30C0, (uint64_t (*)(uint64_t))&type metadata accessor for Tips.Status);
      v65 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v63, v10, v64);
      v66 = v34[1];
      v66(v63, v10);
      sub_100021A14((uint64_t)v24, &qword_100BC30B8);
      v66(v35, v10);
      sub_100021A14(v19, &qword_100BC30B8);
      if ((v65 & 1) != 0)
        goto LABEL_33;
LABEL_10:
      v38 = v81;
      sub_1000E766C((uint64_t)v81);
      v39 = v34[11]((uint64_t)v38, v10);
      if (v39 == enum case for Tips.Status.invalidated(_:))
      {
        sub_1000D04F8(v34[12]);
        v41 = v78;
        v40 = v79;
        (*(void (**)(uint64_t, NSObject *, uint64_t))(v82 + 32))(v79, v38, v78);
        if (qword_100BC2500 != -1)
          swift_once(&qword_100BC2500, sub_100159654);
        v42 = sub_100098720();
        sub_1000C34E4(v42, (uint64_t)qword_100CAF2E8);
        v43 = sub_100099224();
        if (sub_1000C1244(v43))
        {
          v44 = sub_100098710(12);
          v45 = sub_100098710(32);
          v87[0] = v45;
          sub_1000DF41C(4.8149e-34);
          v46 = sub_1000C0888();
          v86 = sub_1000C6948(v46, v47);
          v40 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v24 + 8);
          sub_10009D2E0();
          sub_1000BE984((void *)&_mh_execute_header, v38, (os_log_type_t)v34, "Update %s status to invalidated");
          sub_1000C1934();
          sub_1000986F0(v45);
          sub_1000986F0(v44);
        }

        v48 = v76;
        v49 = v77;
        v50 = v82;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v77, enum case for Tips.InvalidationReason.tipClosed(_:), v41);
        v51 = static Tips.InvalidationReason.== infix(_:_:)(v40, v49);
        v52 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
        v52(v49, v41);
        if ((v51 & 1) != 0 && v48)
        {
          v53 = v73;
          v54 = sub_100094EE4();
          v48(v54);
          sub_1000BF8D0((uint64_t)v48, v53);
        }
        v52(v40, v41);
        goto LABEL_33;
      }
      if (v39 == enum case for Tips.Status.pending(_:))
      {
        if (qword_100BC2500 != -1)
          swift_once(&qword_100BC2500, sub_100159654);
        v55 = sub_100098720();
        sub_1000C34E4(v55, (uint64_t)qword_100CAF2E8);
        v56 = sub_100099224();
        if (!sub_1000C1244(v56))
          goto LABEL_32;
        v57 = sub_100098710(12);
        v58 = sub_100098710(32);
        v87[0] = v58;
        sub_1000DF41C(4.8149e-34);
        v59 = sub_1000C0888();
        v61 = sub_1000C6948(v59, v60);
        sub_1000DA3EC(v61);
        sub_10009D2E0();
        v62 = "Update %s status to pending";
      }
      else
      {
        if (v39 != enum case for Tips.Status.available(_:))
        {
          sub_100021A14((uint64_t)v85, &qword_100BC30B8);
          sub_1000D04F8(v34[1]);
          goto LABEL_34;
        }
        if (qword_100BC2500 != -1)
          swift_once(&qword_100BC2500, sub_100159654);
        v67 = sub_100098720();
        sub_1000C34E4(v67, (uint64_t)qword_100CAF2E8);
        v68 = sub_100099224();
        if (!sub_1000C1244(v68))
          goto LABEL_32;
        v57 = sub_100098710(12);
        v58 = sub_100098710(32);
        v87[0] = v58;
        sub_1000DF41C(4.8149e-34);
        v69 = sub_1000C0888();
        v71 = sub_1000C6948(v69, v70);
        sub_1000DA3EC(v71);
        sub_10009D2E0();
        v62 = "Update %s status to available";
      }
      sub_1000BE984((void *)&_mh_execute_header, v38, (os_log_type_t)v34, v62);
      sub_1000C1934();
      sub_1000986F0(v58);
      sub_1000986F0(v57);
LABEL_32:

      goto LABEL_33;
    }
    sub_100094EEC(v37, &qword_100BC30B8);
    v34 = (uint64_t (**)(uint64_t, uint64_t))v83;
    sub_1000D04F8(*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
LABEL_9:
    sub_100021A14(v19, &qword_100BC30B0);
    goto LABEL_10;
  }
  sub_100094EEC(v33, &qword_100BC30B8);
  sub_100088FC8(v32, 1, v10);
  v34 = (uint64_t (**)(uint64_t, uint64_t))v83;
  if (!v36)
    goto LABEL_9;
  sub_100021A14(v19, &qword_100BC30B8);
LABEL_33:
  sub_100021A14((uint64_t)v85, &qword_100BC30B8);
LABEL_34:
  sub_100098640();
}

void sub_100162090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  __n128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;

  sub_1000986AC();
  v3 = v2;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100099234();
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v58 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v54 - v12;
  sub_10003773C(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)&v54 - v12, (uint64_t *)&unk_100C0D170);
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8);
  v66 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 24);
  sub_10003B59C(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_notificationsOptInStatusFactory, (uint64_t)v68);
  v60 = v70;
  v61 = v69;
  v62 = sub_1000DB418(v68, v69);
  v17 = v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn;
  v18 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn);
  LODWORD(v59) = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn + 17);
  HIDWORD(v59) = v18;
  v55 = type metadata accessor for NotificationsOptInState(0);
  v19 = *(int *)(v55 + 40);
  v57 = v17;
  v20 = v17 + v19;
  v63 = v1;
  v64 = v5;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v22 = v1;
  v23 = v14;
  v65 = v4;
  v21(v22, v20, v4);
  v24 = v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  sub_10009922C(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, (uint64_t)&v67, 0);
  HIDWORD(v56) = *(unsigned __int8 *)(v24 + 1);
  HIDWORD(v54) = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
  sub_10003773C((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100C0D170);
  v25 = type metadata accessor for CurrentLocation(0);
  LODWORD(v5) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v25);
  sub_100094EDC();
  swift_bridgeObjectRetain(v16);
  v26 = swift_bridgeObjectRetain(v15);
  if ((_DWORD)v5 == 1)
  {
    sub_100021A14((uint64_t)v10, (uint64_t *)&unk_100C0D170);
  }
  else
  {
    CurrentLocation.id.getter(v26);
    sub_1000215BC((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  sub_1000BF078();
  sub_10009AD1C(v27, v28, v29, v30, v31, v32, v33, v34, v54, v55, v56, v57, v58, v59, v60, v61, (uint64_t)v62, v63, v64,
    v65);
  v36 = v35;
  sub_1000986C4();
  v37 = v58;
  sub_10003773C((uint64_t)v13, v58, (uint64_t *)&unk_100C0D170);
  sub_100088FC8(v37, 1, v25);
  if (v39)
  {
    sub_100021A14(v37, (uint64_t *)&unk_100C0D170);
  }
  else
  {
    CurrentLocation.id.getter(v38);
    sub_1000215BC(v37, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  sub_1000BF078();
  sub_10066D12C(v40, v41, v42, v43, v44, v45, v46, v47, v54, v55, v56, v57, v58, v59, v60, v61, (uint64_t)v62, v63, v64,
    v65);
  v49 = v48;
  swift_bridgeObjectRelease(v15);
  sub_100098738();
  swift_bridgeObjectRelease(v23);
  sub_1000986C4();
  v50 = *(unsigned __int8 *)(v57 + *(int *)(v55 + 44));
  swift_retain();
  v53 = sub_1004E4178(v51);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, char, uint64_t, uint64_t))(v60 + 8))(HIDWORD(v59), v59, v63, HIDWORD(v56), HIDWORD(v54), v36 & 1, v49 & 1, v50, v53, v61, v60);
  v52 = sub_1000AE82C(v64);
  sub_100094EEC(v52, (uint64_t *)&unk_100C0D170);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v68);
  sub_100098640();
}

void sub_1001623E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[24];

  v2 = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  sub_10000AB54(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v5 - v4, type metadata accessor for ViewState);
  v7 = *(_QWORD *)(v6 + *(int *)(v2 + 36) + 8);
  sub_1000215BC(v6, type metadata accessor for ViewState);
  if (v7 == 2)
  {
    v8 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    sub_10009922C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, (uint64_t)v12, 0);
    v9 = LocationAuthorizationState.rawValue.getter(*(_BYTE *)(v8 + 1));
    if (v9 == 0xD000000000000010 && v10 == 0x80000001009EFAB0)
    {
      swift_bridgeObjectRelease(0x80000001009EFAB0);
      goto LABEL_6;
    }
    v11 = sub_100099264(v9, v10, 0xD000000000000010, 0x80000001009EFAB0);
    sub_1000986C4();
    if ((v11 & 1) != 0)
LABEL_6:
      __asm { BR              X10 }
  }
  sub_100079F70();
}

void sub_1001625D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1000986AC();
  v1 = v0;
  v2 = sub_1001104FC();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - v7;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn + 18) & 1) == 0)
  {
    v9 = sub_100094EE4();
    v10 = sub_1004E4178(v9);
    if ((v10 & 0xFE) == 2)
    {
      v11 = v10;
      LOBYTE(v27) = v10;
      v12 = sub_100162BE8();
      Tip.status.getter(&type metadata for NotificationsOptInListTip, v12);
      v13 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
      if (v13 == enum case for Tips.Status.invalidated(_:))
      {
LABEL_14:
        sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
        goto LABEL_15;
      }
      if (v13 != enum case for Tips.Status.pending(_:) && v13 != enum case for Tips.Status.available(_:))
      {
        if (qword_100BC2418 != -1)
          swift_once(&qword_100BC2418, sub_1006F3798);
        v15 = sub_100098720();
        v16 = sub_1000C34E4(v15, (uint64_t)qword_100CAF040);
        v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (_DWORD *)sub_100098710(12);
          v25 = sub_100098710(32);
          v27 = v25;
          v24 = v18;
          *v18 = 136315138;
          v23[1] = v18 + 1;
          LOBYTE(v26) = v11;
          Tip.status.getter(&type metadata for NotificationsOptInListTip, v12);
          v19 = String.init<A>(describing:)(v5);
          v26 = sub_1000CE1C8(v19, v20, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
          sub_1000986C4();
          v21 = (uint64_t)v24;
          sub_1000BE984((void *)&_mh_execute_header, v16, v17, "Unhandled notificationTip.status =%s");
          v22 = v25;
          sub_1000C1934();
          sub_1000986F0(v22);
          sub_1000986F0(v21);
        }

        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_100098640();
}

void sub_100162828()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  sub_10003BC44(v1);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0
                                                           + OBJC_IVAR____TtC7Weather18ListViewTipManager_notificationsOptInStatusFactory));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0
                                                           + OBJC_IVAR____TtC7Weather18ListViewTipManager_weatherLocationCoalescenceManager));
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cancellables));
  sub_100163A10(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState), *(_QWORD *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC7Weather18ListViewTipManager_cachedLocationOfInterestState + 16));
  sub_10004A298();
}

uint64_t sub_1001628B8()
{
  uint64_t v0;

  sub_100162828();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001628DC()
{
  return type metadata accessor for ListViewTipManager(0);
}

uint64_t type metadata accessor for ListViewTipManager(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC2DD8, (uint64_t)&nominal type descriptor for ListViewTipManager);
}

uint64_t sub_1001628F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = &unk_10097D808;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    v4[8] = &unk_10097D820;
    v4[9] = &unk_10097D820;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = &unk_10097D838;
    v4[12] = &unk_10097D850;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

void sub_1001629BC(uint64_t a1, __n128 a2)
{
  sub_10015F8E4(a1, a2);
}

uint64_t sub_1001629DC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 16);
}

double sub_1001629E8(char a1)
{
  return sub_10015F900(a1);
}

uint64_t sub_100162A08()
{
  return 2;
}

uint64_t ReportWeatherMonitor.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for StubListViewTipManager()
{
  return objc_opt_self(_TtC7Weather22StubListViewTipManager);
}

uint64_t storeEnumTagSinglePayload for ListViewTipManager.ListViewTip(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100162A8C + 4 * byte_10097D785[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100162AC0 + 4 * byte_10097D780[v4]))();
}

uint64_t sub_100162AC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100162AC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100162AD0);
  return result;
}

uint64_t sub_100162ADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100162AE4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100162AE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100162AF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100162AFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ListViewTipManager.ListViewTip()
{
  return &type metadata for ListViewTipManager.ListViewTip;
}

unint64_t sub_100162B18()
{
  unint64_t result;

  result = qword_100BC3060;
  if (!qword_100BC3060)
  {
    result = swift_getWitnessTable(&unk_10097D90C, &type metadata for ListViewTipManager.ListViewTip);
    atomic_store(result, (unint64_t *)&qword_100BC3060);
  }
  return result;
}

unint64_t sub_100162B54()
{
  unint64_t result;

  result = qword_100BC3080;
  if (!qword_100BC3080)
  {
    result = swift_getWitnessTable(&unk_10097D8CC, &type metadata for ListViewTipManager.ListViewTip);
    atomic_store(result, (unint64_t *)&qword_100BC3080);
  }
  return result;
}

uint64_t sub_100162B90()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_100162BB4(uint64_t a1)
{
  uint64_t v1;

  return sub_10015F84C(a1, v1);
}

uint64_t sub_100162BBC()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100162BE0()
{
  uint64_t v0;

  return sub_10015F8A8((_QWORD *)(v0 + 16));
}

unint64_t sub_100162BE8()
{
  unint64_t result;

  result = qword_100BC30A8;
  if (!qword_100BC30A8)
  {
    result = swift_getWitnessTable(&unk_10097F28C, &type metadata for NotificationsOptInListTip);
    atomic_store(result, (unint64_t *)&qword_100BC30A8);
  }
  return result;
}

uint64_t sub_100162C24()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  if (v0[6])
    swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100162C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 40);
  v10 = (_QWORD *)swift_task_alloc(dword_100BC30D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10014E920;
  return sub_100161638(a1, v4, v5, v6, v9, v7, v8);
}

unint64_t sub_100162CF0()
{
  unint64_t result;

  result = qword_100BC30F0;
  if (!qword_100BC30F0)
  {
    result = swift_getWitnessTable(&unk_1009AE4A8, &type metadata for WorkUpdatedTip);
    atomic_store(result, (unint64_t *)&qword_100BC30F0);
  }
  return result;
}

unint64_t sub_100162D2C()
{
  unint64_t result;

  result = qword_100BC30F8;
  if (!qword_100BC30F8)
  {
    result = swift_getWitnessTable(&unk_1009AE874, &type metadata for HomeUpdatedTip);
    atomic_store(result, (unint64_t *)&qword_100BC30F8);
  }
  return result;
}

unint64_t sub_100162D68()
{
  unint64_t result;

  result = qword_100BC3100;
  if (!qword_100BC3100)
  {
    result = swift_getWitnessTable(&unk_10098DD34, &type metadata for NotificationsResubscriptionListTip);
    atomic_store(result, (unint64_t *)&qword_100BC3100);
  }
  return result;
}

unint64_t sub_100162DA4()
{
  unint64_t result;

  result = qword_100BC3108;
  if (!qword_100BC3108)
  {
    result = swift_getWitnessTable(&unk_1009AF698, &type metadata for HomeAndWorkUpdatedTip);
    atomic_store(result, (unint64_t *)&qword_100BC3108);
  }
  return result;
}

unint64_t sub_100162DE0()
{
  unint64_t result;

  result = qword_100BC3110;
  if (!qword_100BC3110)
  {
    result = swift_getWitnessTable(&unk_1009C1AA4, &type metadata for HomeAndWorkAddedTip);
    atomic_store(result, (unint64_t *)&qword_100BC3110);
  }
  return result;
}

uint64_t type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC31A8, (uint64_t)&nominal type descriptor for ListViewTipManager.LocationNameAndLocationOfInterestType);
}

uint64_t sub_100162E30(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t i;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t result;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[10];

  v2 = v1;
  v4 = sub_1000BA294(&qword_100BC3128);
  __chkstk_darwin(v4);
  v113 = (uint64_t)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  v119 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v7 = (uint64_t *)((char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v114 = (uint64_t *)((char *)&v111 - v9);
  __chkstk_darwin(v10);
  v126 = (uint64_t *)((char *)&v111 - v11);
  __chkstk_darwin(v12);
  v112 = (uint64_t *)((char *)&v111 - v13);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v111 - v15);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v111 - v18);
  __chkstk_darwin(v20);
  v118 = (uint64_t)&v111 - v21;
  v122 = 0;
  v120 = a1;
  v22 = *(_QWORD *)(a1 + 56);
  v116 = a1 + 56;
  v23 = -1 << *(_BYTE *)(a1 + 32);
  if (-v23 < 64)
    v24 = ~(-1 << -(char)v23);
  else
    v24 = -1;
  v25 = v24 & v22;
  v111 = v23;
  v117 = (unint64_t)(63 - v23) >> 6;
  v115 = v16;
  v125 = v1;
  if ((v24 & v22) == 0)
    goto LABEL_6;
LABEL_5:
  v123 = (v25 - 1) & v25;
  for (i = __clz(__rbit64(v25)) | (v122 << 6); ; i = __clz(__rbit64(v28)) + (v29 << 6))
  {
    v31 = *(_QWORD *)(v119 + 72);
    v32 = v118;
    sub_10000AB54(*(_QWORD *)(v120 + 48) + v31 * i, v118, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    sub_100163844(v32, (uint64_t)v19);
    v33 = *v2;
    if (!*(_QWORD *)(*v2 + 16))
      break;
    Hasher.init(_seed:)(v129);
    v34 = *v19;
    v35 = v19[1];
    swift_bridgeObjectRetain(v35);
    String.hash(into:)(v129, v34, v35);
    swift_bridgeObjectRelease(v35);
    v36 = (char *)v19 + *(int *)(v127 + 20);
    v37 = type metadata accessor for LocationOfInterestType(0);
    sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
    v124 = v37;
    v121 = v38;
    dispatch thunk of Hashable.hash(into:)(v129, v37, v38);
    v39 = Hasher._finalize()();
    v40 = -1 << *(_BYTE *)(v33 + 32);
    v41 = v39 & ~v40;
    if (((*(_QWORD *)(v33 + 56 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
      break;
    v42 = ~v40;
    while (1)
    {
      sub_10000AB54(*(_QWORD *)(v33 + 48) + v41 * v31, (uint64_t)v16, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
      v43 = v16[1];
      v44 = v19[1];
      v45 = *v16 == *v19 && v43 == v44;
      if ((v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v43, *v19, v44, 0) & 1) != 0)
        && (static LocationOfInterestType.== infix(_:_:)((char *)v16 + *(int *)(v127 + 20), v36) & 1) != 0)
      {
        break;
      }
      sub_1000215BC((uint64_t)v16, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
      v41 = (v41 + 1) & v42;
      if (((*(_QWORD *)(v33 + 56 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
        goto LABEL_30;
    }
    sub_1000215BC((uint64_t)v16, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    v70 = *v125;
    Hasher.init(_seed:)(v129);
    v71 = *v19;
    v72 = v19[1];
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v72);
    String.hash(into:)(v129, v71, v72);
    swift_bridgeObjectRelease(v72);
    dispatch thunk of Hashable.hash(into:)(v129, v124, v121);
    v73 = Hasher._finalize()();
    v74 = -1 << *(_BYTE *)(v70 + 32);
    v75 = v73 & ~v74;
    v76 = v70;
    v77 = v70 + 56;
    v78 = *(_QWORD *)(v70 + 56 + ((v75 >> 3) & 0xFFFFFFFFFFFFF8)) >> v75;
    v79 = v112;
    if ((v78 & 1) != 0)
    {
      v124 = ~v74;
      while (1)
      {
        sub_10000AB54(*(_QWORD *)(v76 + 48) + v75 * v31, (uint64_t)v79, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
        v80 = v79[1];
        v81 = v19[1];
        v82 = *v79 == *v19 && v80 == v81;
        if ((v82 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v79, v80, *v19, v81, 0) & 1) != 0)
          && (static LocationOfInterestType.== infix(_:_:)((char *)v79 + *(int *)(v127 + 20), v36) & 1) != 0)
        {
          break;
        }
        sub_1000215BC((uint64_t)v79, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
        v75 = (v75 + 1) & v124;
        if (((*(_QWORD *)(v77 + ((v75 >> 3) & 0xFFFFFFFFFFFFF8)) >> v75) & 1) == 0)
          goto LABEL_54;
      }
      sub_1000215BC((uint64_t)v79, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
      swift_bridgeObjectRelease(v76);
      v2 = v125;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v125);
      v108 = *v2;
      v129[0] = *v2;
      *v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1006044F8(isUniquelyReferenced_nonNull_native, v101, v102, v103, v104, v105, v106, v107, v111, (uint64_t)v112, v113, (uint64_t)v114, (uint64_t)v115, v116, v117, v118, v119, v120, v121,
          v122);
        v108 = v129[0];
      }
      v83 = v113;
      sub_100163844(*(_QWORD *)(v108 + 48) + v75 * v31, v113);
      sub_100815818();
      v109 = *v2;
      *v2 = v129[0];
      swift_bridgeObjectRelease(v109);
      _s7Weather24LocationCompositionStateOwst_0(v83, 0, 1, v127);
    }
    else
    {
LABEL_54:
      swift_bridgeObjectRelease(v76);
      v83 = v113;
      _s7Weather24LocationCompositionStateOwst_0(v113, 1, 1, v127);
      v2 = v125;
    }
    v25 = v123;
    sub_100021A14(v83, &qword_100BC3128);
LABEL_68:
    sub_1000215BC((uint64_t)v19, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    if (v25)
      goto LABEL_5;
LABEL_6:
    v27 = v122 + 1;
    if (__OFADD__(v122, 1))
      goto LABEL_76;
    if (v27 >= v117)
      return sub_100163978(v120);
    v28 = *(_QWORD *)(v116 + 8 * v27);
    v29 = v122 + 1;
    if (!v28)
    {
      v29 = v122 + 2;
      if (v122 + 2 >= v117)
        return sub_100163978(v120);
      v28 = *(_QWORD *)(v116 + 8 * v29);
      if (!v28)
      {
        v29 = v122 + 3;
        if (v122 + 3 >= v117)
          return sub_100163978(v120);
        v28 = *(_QWORD *)(v116 + 8 * v29);
        if (!v28)
        {
          v30 = v122 + 4;
          if (v122 + 4 >= v117)
            return sub_100163978(v120);
          v28 = *(_QWORD *)(v116 + 8 * v30);
          if (!v28)
          {
            while (1)
            {
              v29 = v30 + 1;
              if (__OFADD__(v30, 1))
                goto LABEL_77;
              if (v29 >= v117)
                return sub_100163978(v120);
              v28 = *(_QWORD *)(v116 + 8 * v29);
              ++v30;
              if (v28)
                goto LABEL_19;
            }
          }
          v29 = v122 + 4;
        }
      }
    }
LABEL_19:
    v122 = v29;
    v123 = (v28 - 1) & v28;
  }
LABEL_30:
  v46 = *v125;
  Hasher.init(_seed:)(v129);
  v47 = *v19;
  v48 = v19[1];
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v48);
  String.hash(into:)(v129, v47, v48);
  swift_bridgeObjectRelease(v48);
  v49 = (char *)v19 + *(int *)(v127 + 20);
  v50 = type metadata accessor for LocationOfInterestType(0);
  sub_10000F1C8(&qword_100BC3120, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterestType);
  v124 = v50;
  v121 = v51;
  dispatch thunk of Hashable.hash(into:)(v129, v50, v51);
  v52 = Hasher._finalize()();
  v53 = -1 << *(_BYTE *)(v46 + 32);
  v54 = v52 & ~v53;
  if (((*(_QWORD *)(v46 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) != 0)
  {
    v55 = ~v53;
    while (1)
    {
      sub_10000AB54(*(_QWORD *)(v46 + 48) + v54 * v31, (uint64_t)v7, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
      v56 = v7[1];
      v57 = v19[1];
      v58 = *v7 == *v19 && v56 == v57;
      if ((v58 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v7, v56, *v19, v57, 0) & 1) != 0)
        && (static LocationOfInterestType.== infix(_:_:)((char *)v7 + *(int *)(v127 + 20), v49) & 1) != 0)
      {
        break;
      }
      sub_1000215BC((uint64_t)v7, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
      v54 = (v54 + 1) & v55;
      if (((*(_QWORD *)(v46 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
        goto LABEL_39;
    }
    sub_1000215BC((uint64_t)v7, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    swift_bridgeObjectRelease(v46);
    v2 = v125;
LABEL_67:
    v25 = v123;
    goto LABEL_68;
  }
LABEL_39:
  swift_bridgeObjectRelease(v46);
  v59 = v125;
  v60 = swift_isUniquelyReferenced_nonNull_native(*v125);
  sub_10000AB54((uint64_t)v19, (uint64_t)v126, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
  v128 = *v59;
  v69 = v128;
  *v59 = 0x8000000000000000;
  if (*(_QWORD *)(v69 + 24) > *(_QWORD *)(v69 + 16))
  {
    if ((v60 & 1) == 0)
      sub_1006044F8(v61, v62, v63, v64, v65, v66, v67, v68, v111, (uint64_t)v112, v113, (uint64_t)v114, (uint64_t)v115, v116, v117, v118, v119, v120, v121,
        v122);
LABEL_65:
    v95 = v128;
    *(_QWORD *)(v128 + ((v54 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v54;
    sub_100163844((uint64_t)v126, *(_QWORD *)(v95 + 48) + v54 * v31);
    v96 = *(_QWORD *)(v95 + 16);
    v97 = __OFADD__(v96, 1);
    v98 = v96 + 1;
    if (v97)
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    *(_QWORD *)(v95 + 16) = v98;
    v2 = v125;
    v99 = *v125;
    *v125 = v95;
    swift_bridgeObjectRelease(v99);
    v16 = v115;
    goto LABEL_67;
  }
  if (v60)
    sub_1006015E0();
  else
    sub_1006049AC();
  v84 = v128;
  Hasher.init(_seed:)(v129);
  v85 = v126;
  v86 = *v126;
  v87 = v126[1];
  swift_bridgeObjectRetain(v87);
  String.hash(into:)(v129, v86, v87);
  swift_bridgeObjectRelease(v87);
  v88 = (char *)v85 + *(int *)(v127 + 20);
  dispatch thunk of Hashable.hash(into:)(v129, v124, v121);
  v89 = Hasher._finalize()();
  v90 = -1 << *(_BYTE *)(v84 + 32);
  v54 = v89 & ~v90;
  if (((*(_QWORD *)(v84 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
    goto LABEL_65;
  v91 = ~v90;
  v16 = v114;
  while (1)
  {
    sub_10000AB54(*(_QWORD *)(v84 + 48) + v54 * v31, (uint64_t)v16, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    v92 = v16[1];
    v93 = v126[1];
    v94 = *v16 == *v126 && v92 == v93;
    if ((v94 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v92, *v126, v93, 0) & 1) != 0)
      && (static LocationOfInterestType.== infix(_:_:)((char *)v16 + *(int *)(v127 + 20), v88) & 1) != 0)
    {
      break;
    }
    sub_1000215BC((uint64_t)v16, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
    v54 = (v54 + 1) & v91;
    if (((*(_QWORD *)(v84 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
      goto LABEL_65;
  }
LABEL_78:
  sub_1000215BC((uint64_t)v16, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v127);
  __break(1u);
  return result;
}

uint64_t sub_100163844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

int64_t sub_100163888(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

double sub_10016396C(uint64_t a1, uint64_t a2, char a3)
{
  double result;

  if ((a3 & 1) != 0)
    *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_100163978(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100163980(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 < 2u)
    return swift_bridgeObjectRetain(result);
  if (a3 == 2)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

double sub_1001639C8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  double result;

  if (a3 >= 2u)
  {
    if (a3 == 2)
    {
      swift_bridgeObjectRelease(a1);
      *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  }
  return result;
}

double sub_100163A10(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  double result;

  if (a3 != 0xFF)
    return sub_1001639C8(a1, a2, a3);
  return result;
}

unint64_t sub_100163A24()
{
  unint64_t result;

  result = qword_100BC3148;
  if (!qword_100BC3148)
  {
    result = swift_getWitnessTable(&unk_1009DA1EC, &type metadata for LocationsOfInterestState);
    atomic_store(result, (unint64_t *)&qword_100BC3148);
  }
  return result;
}

uint64_t sub_100163A60(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_100163980(result, a2, a3);
  return result;
}

uint64_t *sub_100163A74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for LocationOfInterestType(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100163B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for LocationOfInterestType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100163B58(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for LocationOfInterestType(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_100163BC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocationOfInterestType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_100163C44(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for LocationOfInterestType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_100163CA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocationOfInterestType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100163D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100163D18);
}

void sub_100163D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100079F70();
  }
  else
  {
    v6 = sub_10009924C();
    _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t sub_100163D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100163D8C);
}

void sub_100163D8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    v7 = sub_10009924C();
    _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_100163DEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10097D988;
  result = type metadata accessor for LocationOfInterestType(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_100163E60()
{
  sub_10000F1C8(&qword_100BC31E0, type metadata accessor for ListViewTipManager.LocationNameAndLocationOfInterestType);
}

void sub_100163E8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if ((v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1) != 0)
    && (v8 = (int *)type metadata accessor for LollipopViewModel(0),
        (static DetailChartDataPoint.== infix(_:_:)((char *)a1 + v8[5], (char *)a2 + v8[5]) & 1) != 0)
    && *(double *)((char *)a1 + v8[6]) == *(double *)((char *)a2 + v8[6]))
  {
    sub_10036B9EC((uint64_t)a1 + v8[7], (uint64_t)a2 + v8[7]);
  }
  else
  {
    sub_100079F70();
  }
}

uint64_t sub_100163F28@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, &v13);
  *(_OWORD *)(inited + 16) = xmmword_10097DA20;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000001009F0EE0;
  v5 = type metadata accessor for LollipopViewModel(0);
  v6 = v1 + *(int *)(v5 + 20);
  v7 = sub_1000BBAF4();
  *(_QWORD *)(inited + 72) = v7;
  v8 = sub_10005F164((_QWORD *)(inited + 48));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v8, v6, v7);
  *(_QWORD *)(inited + 80) = 0x69566C6961746564;
  *(_QWORD *)(inited + 88) = 0xEF6C65646F4D7765;
  v9 = v1 + *(int *)(v5 + 28);
  *(_QWORD *)(inited + 120) = sub_1000BA304();
  v10 = sub_10005F164((_QWORD *)(inited + 96));
  sub_10016413C(v9, (uint64_t)v10);
  v11 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100BC31F8);
  a1[4] = sub_100164180();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0xD000000000000011, 0x800000010097DA90, v11, v5);
}

uint64_t sub_1001640A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1001641C4(&qword_100BC3208, (uint64_t)&unk_10097DA58);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_1001640E0()
{
  return sub_1001641C4(&qword_100BC31E8, (uint64_t)&unk_10097DA30);
}

uint64_t type metadata accessor for LollipopViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BC3268;
  if (!qword_100BC3268)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LollipopViewModel);
  return result;
}

uint64_t sub_10016413C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LollipopDetailViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100164180()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC3200;
  if (!qword_100BC3200)
  {
    v1 = sub_100075EB0(&qword_100BC31F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC3200);
  }
  return result;
}

uint64_t sub_1001641C4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LollipopViewModel(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100164204(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DetailChartDataPoint(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    v14 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16);
    if (EnumCaseMultiPayload == 2)
    {
      v27 = *((_QWORD *)v16 + 1);
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = v27;
      v28 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v29 = v28[5];
      v30 = &v15[v29];
      v31 = &v16[v29];
      v32 = type metadata accessor for AttributedString(0);
      v33 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v32 - 8) + 16);
      v34 = swift_bridgeObjectRetain(v27);
      v33(v30, v31, v32, v34);
      v35 = v28[6];
      v36 = &v15[v35];
      v37 = &v16[v35];
      v38 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v38;
      v39 = v28[7];
      v40 = &v15[v39];
      v41 = &v16[v39];
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      v43 = v28[8];
      v44 = &v15[v43];
      v45 = &v16[v43];
      v46 = *((_QWORD *)v45 + 1);
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = v46;
      v47 = v28[9];
      v48 = &v15[v47];
      v49 = &v16[v47];
      v50 = *((_QWORD *)v49 + 1);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      v51 = v28[10];
      v52 = &v15[v51];
      v53 = &v16[v51];
      v54 = *((_QWORD *)v53 + 1);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *((_QWORD *)v52 + 1) = v54;
      v15[v28[11]] = v16[v28[11]];
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v54);
      v23 = v15;
      v24 = v17;
      v25 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v19 = *((_QWORD *)v16 + 1);
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = v19;
      v20 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v20;
      v21 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 5) = v21;
      v22 = *((_QWORD *)v16 + 7);
      *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
      *((_QWORD *)v15 + 7) = v22;
      v15[64] = v16[64];
      v15[65] = v16[65];
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v23 = v15;
      v24 = v17;
      v25 = 1;
    }
    else
    {
      v55 = *((_QWORD *)v16 + 1);
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = v55;
      v56 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v56;
      v57 = *((_QWORD *)v16 + 4);
      v58 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 4) = v57;
      *((_QWORD *)v15 + 5) = v58;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v58);
      v23 = v15;
      v24 = v17;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return v4;
}

double sub_10016447C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  double result;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  type metadata accessor for LollipopDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6);
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    v9 = v6 + *(int *)(type metadata accessor for TitleAndDetailLollipopDetailViewModel(0) + 20);
    v10 = type metadata accessor for AttributedString(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (EnumCaseMultiPayload)
      return result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

_QWORD *sub_1001645D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v49;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DetailChartDataPoint(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for LollipopDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15);
  v18 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v23 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v23;
    v24 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v25 = v24[5];
    v49 = &v14[v25];
    v26 = &v15[v25];
    v27 = type metadata accessor for AttributedString(0);
    v28 = v16;
    v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
    v30 = swift_bridgeObjectRetain(v23);
    v29(v49, v26, v27, v30);
    v16 = v28;
    v31 = v24[6];
    v32 = &v14[v31];
    v33 = &v15[v31];
    v34 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = v24[7];
    v36 = &v14[v35];
    v37 = &v15[v35];
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
    v39 = v24[8];
    v40 = &v14[v39];
    v41 = &v15[v39];
    v20 = *((_QWORD *)v41 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = v20;
    v42 = v24[9];
    v43 = &v14[v42];
    v44 = &v15[v42];
    v21 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v21;
    v45 = v24[10];
    v46 = &v14[v45];
    v47 = &v15[v45];
    v22 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v22;
    v14[v24[11]] = v15[v24[11]];
    swift_bridgeObjectRetain(v34);
    v19 = v38;
  }
  else
  {
    if ((_DWORD)EnumCaseMultiPayload != 1)
    {
      v20 = *((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *((_QWORD *)v14 + 1) = v20;
      v21 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v14 + 3) = v21;
      v22 = *((_QWORD *)v15 + 5);
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
      *((_QWORD *)v14 + 5) = v22;
      goto LABEL_7;
    }
    v19 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v19;
    v20 = *((_QWORD *)v15 + 3);
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *((_QWORD *)v14 + 3) = v20;
    v21 = *((_QWORD *)v15 + 5);
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 5) = v21;
    v22 = *((_QWORD *)v15 + 7);
    *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
    *((_QWORD *)v14 + 7) = v22;
    v14[64] = v15[64];
    v14[65] = v15[65];
  }
  swift_bridgeObjectRetain(v19);
LABEL_7:
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

_QWORD *sub_1001647EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v47;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  if (a1 != a2)
  {
    v11 = a3[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    sub_100164A90((uint64_t)a1 + v11);
    v14 = type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13);
    v16 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v21 = *((_QWORD *)v13 + 1);
      *((_QWORD *)v12 + 1) = v21;
      v22 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v23 = v22[5];
      v47 = &v12[v23];
      v24 = &v13[v23];
      v25 = type metadata accessor for AttributedString(0);
      v26 = v14;
      v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
      v28 = swift_bridgeObjectRetain(v21);
      v27(v47, v24, v25, v28);
      v14 = v26;
      v29 = v22[6];
      v30 = &v12[v29];
      v31 = &v13[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v32 = *((_QWORD *)v31 + 1);
      *((_QWORD *)v30 + 1) = v32;
      v33 = v22[7];
      v34 = &v12[v33];
      v35 = &v13[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v36 = *((_QWORD *)v35 + 1);
      *((_QWORD *)v34 + 1) = v36;
      v37 = v22[8];
      v38 = &v12[v37];
      v39 = &v13[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v18 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v38 + 1) = v18;
      v40 = v22[9];
      v41 = &v12[v40];
      v42 = &v13[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v19 = *((_QWORD *)v42 + 1);
      *((_QWORD *)v41 + 1) = v19;
      v43 = v22[10];
      v44 = &v12[v43];
      v45 = &v13[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v20 = *((_QWORD *)v45 + 1);
      *((_QWORD *)v44 + 1) = v20;
      v12[v22[11]] = v13[v22[11]];
      swift_bridgeObjectRetain(v32);
      v17 = v36;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload != 1)
      {
        *(_QWORD *)v12 = *(_QWORD *)v13;
        v18 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v12 + 1) = v18;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        v19 = *((_QWORD *)v13 + 3);
        *((_QWORD *)v12 + 3) = v19;
        *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
        v20 = *((_QWORD *)v13 + 5);
        *((_QWORD *)v12 + 5) = v20;
        goto LABEL_8;
      }
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v17 = *((_QWORD *)v13 + 1);
      *((_QWORD *)v12 + 1) = v17;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
      v18 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v12 + 3) = v18;
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      v19 = *((_QWORD *)v13 + 5);
      *((_QWORD *)v12 + 5) = v19;
      *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 6);
      v20 = *((_QWORD *)v13 + 7);
      *((_QWORD *)v12 + 7) = v20;
      v12[64] = v13[64];
      v12[65] = v13[65];
    }
    swift_bridgeObjectRetain(v17);
LABEL_8:
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  return a1;
}

uint64_t sub_100164A90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LollipopDetailViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_100164ACC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = (_OWORD *)((char *)a1 + v10);
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = type metadata accessor for LollipopDetailViewModel(0);
  if (swift_getEnumCaseMultiPayload(v12) == 2)
  {
    *v11 = *v12;
    v14 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v15 = v14[5];
    v16 = (char *)v11 + v15;
    v17 = (char *)v12 + v15;
    v18 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_OWORD *)((char *)v11 + v14[6]) = *(_OWORD *)((char *)v12 + v14[6]);
    *(_OWORD *)((char *)v11 + v14[7]) = *(_OWORD *)((char *)v12 + v14[7]);
    *(_OWORD *)((char *)v11 + v14[8]) = *(_OWORD *)((char *)v12 + v14[8]);
    *(_OWORD *)((char *)v11 + v14[9]) = *(_OWORD *)((char *)v12 + v14[9]);
    *(_OWORD *)((char *)v11 + v14[10]) = *(_OWORD *)((char *)v12 + v14[10]);
    *((_BYTE *)v11 + v14[11]) = *((_BYTE *)v12 + v14[11]);
    swift_storeEnumTagMultiPayload(v11, v13, 2);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100164C24(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DetailChartDataPoint(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  if (a1 != a2)
  {
    v11 = a3[7];
    v12 = (_OWORD *)((char *)a1 + v11);
    v13 = (_OWORD *)((char *)a2 + v11);
    sub_100164A90((uint64_t)a1 + v11);
    v14 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v13) == 2)
    {
      *v12 = *v13;
      v15 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v16 = v15[5];
      v17 = (char *)v12 + v16;
      v18 = (char *)v13 + v16;
      v19 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      *(_OWORD *)((char *)v12 + v15[6]) = *(_OWORD *)((char *)v13 + v15[6]);
      *(_OWORD *)((char *)v12 + v15[7]) = *(_OWORD *)((char *)v13 + v15[7]);
      *(_OWORD *)((char *)v12 + v15[8]) = *(_OWORD *)((char *)v13 + v15[8]);
      *(_OWORD *)((char *)v12 + v15[9]) = *(_OWORD *)((char *)v13 + v15[9]);
      *(_OWORD *)((char *)v12 + v15[10]) = *(_OWORD *)((char *)v13 + v15[10]);
      *((_BYTE *)v12 + v15[11]) = *((_BYTE *)v13 + v15[11]);
      swift_storeEnumTagMultiPayload(v12, v14, 2);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100164D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100164DA4);
}

void sub_100164DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100079F70();
  }
  else
  {
    v6 = sub_1000BBAF4();
    if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v6;
      v8 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_1000BA304();
      v8 = *(int *)(a3 + 28);
    }
    _s7Weather24LocationCompositionStateOwet_0(a1 + v8, a2, v7);
  }
}

uint64_t sub_100164E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100164E38);
}

uint64_t sub_100164E38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1000BBAF4();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BA304();
      v10 = *(int *)(a4 + 28);
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100164EC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = &unk_10097DAD0;
  result = type metadata accessor for DetailChartDataPoint(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for LollipopDetailViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100164F64(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t active;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t, __n128);
  __n128 v137;
  int *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  __n128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t, __n128);
  __n128 v208;
  int *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  __n128 v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(char *, char *, uint64_t, __n128);
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 v282;
  _QWORD *v283;
  uint64_t v284;
  void (*v285)(char *, char *, uint64_t);
  uint64_t v286;
  char *v287;
  char *v288;
  int *v289;
  int *v290;
  char *v291;
  uint64_t *v292;
  uint64_t *v293;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for Location.Identifier(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      active = type metadata accessor for LocationViewerActiveLocationState(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for LocationModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for CurrentLocation(0);
    v290 = a3;
    v293 = a1;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18))
    {
      v19 = sub_1000BA294((uint64_t *)&unk_100C0D170);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_17;
    }
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17);
    if (EnumCaseMultiPayload == 2)
    {
      v25 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v16, v17, v25);
      v22 = v16;
      v23 = v18;
      v24 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v26 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v16, v17, v26);
      v22 = v16;
      v23 = v18;
      v24 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        goto LABEL_16;
      }
      v21 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v16, v17, v21);
      v22 = v16;
      v23 = v18;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
LABEL_16:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
LABEL_17:
    v27 = (int *)type metadata accessor for LocationsState(0);
    v28 = v27[5];
    v29 = *(_QWORD *)&v17[v28];
    *(_QWORD *)&v16[v28] = v29;
    v30 = v27[6];
    v31 = *(_QWORD *)&v17[v30];
    *(_QWORD *)&v16[v30] = v31;
    v32 = v27[7];
    v33 = *(_QWORD *)&v17[v32];
    *(_QWORD *)&v16[v32] = v33;
    v34 = v27[8];
    v35 = *(_QWORD *)&v17[v34];
    *(_QWORD *)&v16[v34] = v35;
    v36 = v27[9];
    v37 = *(_QWORD *)&v17[v36];
    *(_QWORD *)&v16[v36] = v37;
    v38 = v27[10];
    v39 = *(_QWORD *)&v17[v38];
    *(_QWORD *)&v16[v38] = v39;
    v40 = v27[11];
    v41 = *(_QWORD *)&v17[v40];
    *(_QWORD *)&v16[v40] = v41;
    v42 = v27[12];
    v288 = v16;
    v43 = &v16[v42];
    v44 = &v17[v42];
    v284 = *((_QWORD *)v44 + 1);
    v286 = *(_QWORD *)v44;
    v282 = v44[16];
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v41);
    sub_100163980(v286, v284, v282);
    *(_QWORD *)v43 = v286;
    *((_QWORD *)v43 + 1) = v284;
    v43[16] = v282;
    v45 = v27[13];
    v46 = *(_QWORD *)&v17[v45];
    *(_QWORD *)&v288[v45] = v46;
    v47 = v290[9];
    v10 = v293;
    *((_BYTE *)v293 + v290[8]) = *((_BYTE *)a2 + v290[8]);
    *((_BYTE *)v293 + v47) = *((_BYTE *)a2 + v47);
    v48 = v290[10];
    v49 = v290[11];
    v50 = (char *)v293 + v48;
    v51 = (char *)a2 + v48;
    *v50 = *v51;
    v52 = *((_QWORD *)v51 + 1);
    *((_QWORD *)v50 + 1) = v52;
    v53 = (char *)v293 + v49;
    v54 = (char *)a2 + v49;
    v55 = type metadata accessor for Date(0);
    v56 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v55 - 8) + 16);
    swift_bridgeObjectRetain(v46);
    v57 = swift_bridgeObjectRetain(v52);
    v56(v53, v54, v55, v57);
    v58 = v290[13];
    *((_BYTE *)v293 + v290[12]) = *((_BYTE *)a2 + v290[12]);
    *(uint64_t *)((char *)v293 + v58) = *(uint64_t *)((char *)a2 + v58);
    v59 = v290[15];
    *((_BYTE *)v293 + v290[14]) = *((_BYTE *)a2 + v290[14]);
    *((_BYTE *)v293 + v59) = *((_BYTE *)a2 + v59);
    v60 = v290[16];
    v61 = v290[17];
    v62 = *(uint64_t *)((char *)a2 + v60);
    *(uint64_t *)((char *)v293 + v60) = v62;
    *((_BYTE *)v293 + v61) = *((_BYTE *)a2 + v61);
    v63 = v290[18];
    v64 = (uint64_t *)((char *)v293 + v63);
    v65 = (uint64_t *)((char *)a2 + v63);
    v66 = type metadata accessor for LocationWeatherDataState(0);
    swift_bridgeObjectRetain(v62);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, v66))
    {
      v67 = sub_1000BA294(&qword_100BC3380);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      return v10;
    }
    v68 = swift_getEnumCaseMultiPayload(v65);
    if (v68 == 2)
    {
      v72 = v65[1];
      *v64 = *v65;
      v64[1] = v72;
      swift_bridgeObjectRetain(v72);
      v73 = v64;
      v74 = v66;
      v75 = 2;
      goto LABEL_71;
    }
    if (v68 != 1)
    {
      if (v68)
      {
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
LABEL_72:
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, v66);
        return v10;
      }
      v69 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v65) == 1)
      {
        v70 = *v65;
        *v64 = *v65;
        swift_bridgeObjectRetain(v70);
        v71 = 1;
      }
      else
      {
        v83 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v64, v65, v83);
        v71 = 0;
      }
      swift_storeEnumTagMultiPayload(v64, v69, v71);
      v73 = v64;
      v74 = v66;
      v75 = 0;
LABEL_71:
      swift_storeEnumTagMultiPayload(v73, v74, v75);
      goto LABEL_72;
    }
    v285 = (void (*)(char *, char *, uint64_t))v56;
    v76 = v65[1];
    *v64 = *v65;
    v64[1] = v76;
    v77 = (int *)type metadata accessor for WeatherData(0);
    v78 = v77[5];
    v79 = (char *)v64 + v78;
    v80 = (char *)v65 + v78;
    v81 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain(v76);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v80, 1, v81))
    {
      v82 = sub_1000BA294(&qword_100BC3340);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v79, 0, 1, v81);
    }
    v84 = v77[6];
    v85 = (char *)v64 + v84;
    v86 = (char *)v65 + v84;
    v87 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
    v88 = v77[7];
    v89 = (char *)v64 + v88;
    v90 = (char *)v65 + v88;
    v91 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v90, 1, v91))
    {
      v92 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      v285(v89, v90, v55);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v89, 0, 1, v91);
    }
    v93 = v77[8];
    v94 = (_QWORD *)((char *)v64 + v93);
    v95 = (_QWORD *)((char *)v65 + v93);
    v96 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v97 = swift_getEnumCaseMultiPayload(v95);
    v280 = v66;
    if (v97 == 1)
    {
      v102 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v94, v95, v102);
      v99 = v94;
      v100 = v96;
      v101 = 1;
    }
    else
    {
      if (v97)
      {
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        goto LABEL_40;
      }
      v98 = v95[1];
      *v94 = *v95;
      v94[1] = v98;
      swift_bridgeObjectRetain(v98);
      v99 = v94;
      v100 = v96;
      v101 = 0;
    }
    swift_storeEnumTagMultiPayload(v99, v100, v101);
LABEL_40:
    v103 = v77[9];
    v104 = (char *)v64 + v103;
    v105 = (char *)v65 + v103;
    v106 = type metadata accessor for WeatherDataOverrides(0);
    v281 = v55;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v106))
    {
      v107 = sub_1000BA294(&qword_100BC3350);
      memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    }
    else
    {
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v55))
      {
        v108 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
      }
      else
      {
        v285(v104, v105, v55);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v104, 0, 1, v55);
      }
      v109 = *(int *)(v106 + 20);
      v110 = &v104[v109];
      v111 = &v105[v109];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v105[v109], 1, v55))
      {
        v112 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        v285(v110, v111, v55);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v110, 0, 1, v55);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v104, 0, 1, v106);
    }
    v279 = sub_1000BA294(&qword_100BC3358);
    v113 = *(int *)(v279 + 48);
    v283 = v64;
    v114 = (char *)v64 + v113;
    v115 = (char *)v65 + v113;
    v116 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v114, v115, v116);
    v117 = type metadata accessor for PreprocessedWeatherData(0);
    v118 = *(int *)(v117 + 20);
    v119 = *(_QWORD *)&v115[v118];
    *(_QWORD *)&v114[v118] = v119;
    v289 = (int *)v117;
    v291 = v114;
    v120 = *(int *)(v117 + 24);
    v121 = &v114[v120];
    v287 = v115;
    v122 = &v115[v120];
    v123 = *(_QWORD *)&v115[v120 + 8];
    *(_QWORD *)v121 = *(_QWORD *)&v115[v120];
    *((_QWORD *)v121 + 1) = v123;
    v124 = *(_QWORD *)&v115[v120 + 24];
    *((_QWORD *)v121 + 2) = *(_QWORD *)&v115[v120 + 16];
    *((_QWORD *)v121 + 3) = v124;
    v125 = *(_QWORD *)&v115[v120 + 40];
    *((_QWORD *)v121 + 4) = *(_QWORD *)&v115[v120 + 32];
    *((_QWORD *)v121 + 5) = v125;
    v277 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v126 = *(int *)(v277 + 28);
    v127 = &v121[v126];
    v128 = &v122[v126];
    v129 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v125);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v128, 1, v129))
    {
      v130 = sub_1000BA294(&qword_100BC3360);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      v131 = *((_QWORD *)v128 + 1);
      *(_QWORD *)v127 = *(_QWORD *)v128;
      *((_QWORD *)v127 + 1) = v131;
      v132 = *(int *)(v129 + 20);
      v133 = &v127[v132];
      v134 = &v128[v132];
      v135 = type metadata accessor for TemperatureScaleConfiguration(0);
      v136 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v135 - 8) + 16);
      v137 = swift_bridgeObjectRetain(v131);
      v136(v133, v134, v135, v137);
      v138 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v133[v138[5]] = *(_QWORD *)&v134[v138[5]];
      *(_QWORD *)&v133[v138[6]] = *(_QWORD *)&v134[v138[6]];
      *(_QWORD *)&v133[v138[7]] = *(_QWORD *)&v134[v138[7]];
      v139 = v138[8];
      v140 = &v133[v139];
      v141 = &v134[v139];
      v143 = *(_QWORD *)v141;
      v142 = *((_QWORD *)v141 + 1);
      *(_QWORD *)v140 = v143;
      *((_QWORD *)v140 + 1) = v142;
      v133[v138[9]] = v134[v138[9]];
      swift_bridgeObjectRetain(v142);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v127, 0, 1, v129);
    }
    v144 = *(int *)(v277 + 32);
    v145 = &v121[v144];
    v146 = &v122[v144];
    v147 = *((_QWORD *)v146 + 1);
    *(_QWORD *)v145 = *(_QWORD *)v146;
    *((_QWORD *)v145 + 1) = v147;
    v148 = v289[7];
    v149 = &v291[v148];
    v150 = &v287[v148];
    v151 = *(_QWORD *)&v287[v148];
    *(_QWORD *)&v291[v148] = v151;
    v152 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v153 = &v149[v152];
    v154 = &v150[v152];
    v155 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRetain(v151);
    v274 = v155;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v154, 1, v155))
    {
      v156 = sub_1000BA294(&qword_100BC3368);
      memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v153, 0, 1, v155);
    }
    v157 = v289[8];
    v158 = &v291[v157];
    v159 = &v287[v157];
    v160 = *(_QWORD *)&v287[v157 + 8];
    *(_QWORD *)v158 = *(_QWORD *)&v287[v157];
    *((_QWORD *)v158 + 1) = v160;
    v161 = *(_QWORD *)&v287[v157 + 24];
    *((_QWORD *)v158 + 2) = *(_QWORD *)&v287[v157 + 16];
    *((_QWORD *)v158 + 3) = v161;
    v162 = *(_QWORD *)&v287[v157 + 40];
    *((_QWORD *)v158 + 4) = *(_QWORD *)&v287[v157 + 32];
    *((_QWORD *)v158 + 5) = v162;
    v163 = *(_QWORD *)&v287[v157 + 56];
    *((_QWORD *)v158 + 6) = *(_QWORD *)&v287[v157 + 48];
    *((_QWORD *)v158 + 7) = v163;
    v164 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v165 = &v158[v164];
    v166 = &v159[v164];
    swift_bridgeObjectRetain(v160);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v162);
    v167 = swift_bridgeObjectRetain(v163);
    ((void (*)(char *, char *, uint64_t, __n128))v285)(v165, v166, v281, v167);
    v168 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v169 = *(int *)(v168 + 20);
    v170 = &v165[v169];
    v171 = &v166[v169];
    v172 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v171, 1, v172))
    {
      v173 = sub_1000BA294(&qword_100BC3370);
      memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v170, v171, v172);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v170, 0, 1, v172);
    }
    v174 = *(int *)(v168 + 24);
    v175 = &v165[v174];
    v176 = &v166[v174];
    v177 = type metadata accessor for BackgroundMoonData(0);
    v276 = v172;
    v278 = v168;
    v263 = v177;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v176, 1, v177))
    {
      v178 = sub_1000BA294(&qword_100BC3378);
      memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v175, v176, v177);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v175, 0, 1, v177);
    }
    v179 = v289[9];
    v180 = &v291[v179];
    v181 = &v287[v179];
    v182 = *((_QWORD *)v181 + 1);
    *(_QWORD *)v180 = *(_QWORD *)v181;
    *((_QWORD *)v180 + 1) = v182;
    v183 = *((_QWORD *)v181 + 3);
    *((_QWORD *)v180 + 2) = *((_QWORD *)v181 + 2);
    *((_QWORD *)v180 + 3) = v183;
    v184 = *((_QWORD *)v181 + 5);
    *((_QWORD *)v180 + 4) = *((_QWORD *)v181 + 4);
    *((_QWORD *)v180 + 5) = v184;
    v185 = *((_QWORD *)v181 + 7);
    *((_QWORD *)v180 + 6) = *((_QWORD *)v181 + 6);
    *((_QWORD *)v180 + 7) = v185;
    v186 = *((_QWORD *)v181 + 9);
    *((_QWORD *)v180 + 8) = *((_QWORD *)v181 + 8);
    *((_QWORD *)v180 + 9) = v186;
    v187 = *((_QWORD *)v181 + 11);
    *((_QWORD *)v180 + 10) = *((_QWORD *)v181 + 10);
    *((_QWORD *)v180 + 11) = v187;
    v188 = *((_QWORD *)v181 + 13);
    *((_QWORD *)v180 + 12) = *((_QWORD *)v181 + 12);
    *((_QWORD *)v180 + 13) = v188;
    v189 = v289[10];
    v190 = &v291[v189];
    v191 = &v287[v189];
    v272 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v274 - 8) + 16);
    swift_bridgeObjectRetain(v182);
    swift_bridgeObjectRetain(v183);
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRetain(v186);
    swift_bridgeObjectRetain(v187);
    v192 = swift_bridgeObjectRetain(v188);
    v272(v190, v191, v274, v192);
    v193 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
    v194 = &v190[v193];
    v195 = &v191[v193];
    v196 = *((_QWORD *)v195 + 1);
    *(_QWORD *)v194 = *(_QWORD *)v195;
    *((_QWORD *)v194 + 1) = v196;
    v197 = v289[11];
    v198 = &v291[v197];
    v199 = &v287[v197];
    v200 = *((_QWORD *)v199 + 1);
    *(_QWORD *)v198 = *(_QWORD *)v199;
    *((_QWORD *)v198 + 1) = v200;
    v201 = *((_QWORD *)v199 + 3);
    *((_QWORD *)v198 + 2) = *((_QWORD *)v199 + 2);
    *((_QWORD *)v198 + 3) = v201;
    v202 = *((_QWORD *)v199 + 5);
    *((_QWORD *)v198 + 4) = *((_QWORD *)v199 + 4);
    *((_QWORD *)v198 + 5) = v202;
    v203 = v289[12];
    v204 = &v291[v203];
    v205 = &v287[v203];
    v206 = type metadata accessor for PressureTrend(0);
    v207 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v206 - 8) + 16);
    swift_bridgeObjectRetain(v196);
    swift_bridgeObjectRetain(v200);
    swift_bridgeObjectRetain(v201);
    v208 = swift_bridgeObjectRetain(v202);
    v207(v204, v205, v206, v208);
    v209 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v210 = v209[5];
    v211 = &v204[v210];
    v212 = &v205[v210];
    v213 = *((_QWORD *)v212 + 1);
    *(_QWORD *)v211 = *(_QWORD *)v212;
    *((_QWORD *)v211 + 1) = v213;
    v214 = v209[6];
    v215 = &v204[v214];
    v216 = &v205[v214];
    v275 = *((_QWORD *)v216 + 1);
    *(_QWORD *)v215 = *(_QWORD *)v216;
    *((_QWORD *)v215 + 1) = v275;
    v217 = v209[7];
    v218 = &v204[v217];
    v219 = &v205[v217];
    v273 = *((_QWORD *)v219 + 1);
    *(_QWORD *)v218 = *(_QWORD *)v219;
    *((_QWORD *)v218 + 1) = v273;
    *(_QWORD *)&v204[v209[8]] = *(_QWORD *)&v205[v209[8]];
    v220 = v209[9];
    v221 = &v204[v220];
    v222 = &v205[v220];
    v271 = *((_QWORD *)v222 + 1);
    *(_QWORD *)v221 = *(_QWORD *)v222;
    *((_QWORD *)v221 + 1) = v271;
    v223 = v289[13];
    v224 = &v291[v223];
    v225 = &v287[v223];
    v226 = *((_QWORD *)v225 + 1);
    *(_QWORD *)v224 = *(_QWORD *)v225;
    *((_QWORD *)v224 + 1) = v226;
    v227 = *((_QWORD *)v225 + 3);
    *((_QWORD *)v224 + 2) = *((_QWORD *)v225 + 2);
    *((_QWORD *)v224 + 3) = v227;
    v228 = *((_QWORD *)v225 + 5);
    *((_QWORD *)v224 + 4) = *((_QWORD *)v225 + 4);
    *((_QWORD *)v224 + 5) = v228;
    v229 = *((_QWORD *)v225 + 7);
    *((_QWORD *)v224 + 6) = *((_QWORD *)v225 + 6);
    *((_QWORD *)v224 + 7) = v229;
    v230 = *((_QWORD *)v225 + 9);
    *((_QWORD *)v224 + 8) = *((_QWORD *)v225 + 8);
    *((_QWORD *)v224 + 9) = v230;
    v231 = *((_QWORD *)v225 + 11);
    *((_QWORD *)v224 + 10) = *((_QWORD *)v225 + 10);
    *((_QWORD *)v224 + 11) = v231;
    v232 = *((_QWORD *)v225 + 13);
    *((_QWORD *)v224 + 12) = *((_QWORD *)v225 + 12);
    *((_QWORD *)v224 + 13) = v232;
    v269 = *((_QWORD *)v225 + 15);
    *((_QWORD *)v224 + 14) = *((_QWORD *)v225 + 14);
    *((_QWORD *)v224 + 15) = v269;
    v268 = *((_QWORD *)v225 + 17);
    *((_QWORD *)v224 + 16) = *((_QWORD *)v225 + 16);
    *((_QWORD *)v224 + 17) = v268;
    v267 = *((_QWORD *)v225 + 19);
    *((_QWORD *)v224 + 18) = *((_QWORD *)v225 + 18);
    *((_QWORD *)v224 + 19) = v267;
    v266 = *((_QWORD *)v225 + 21);
    *((_QWORD *)v224 + 20) = *((_QWORD *)v225 + 20);
    *((_QWORD *)v224 + 21) = v266;
    v265 = *((_QWORD *)v225 + 23);
    *((_QWORD *)v224 + 22) = *((_QWORD *)v225 + 22);
    *((_QWORD *)v224 + 23) = v265;
    v264 = *((_QWORD *)v225 + 25);
    *((_QWORD *)v224 + 24) = *((_QWORD *)v225 + 24);
    *((_QWORD *)v224 + 25) = v264;
    *((_OWORD *)v224 + 13) = *((_OWORD *)v225 + 13);
    v270 = *((_QWORD *)v225 + 28);
    *((_QWORD *)v224 + 28) = v270;
    v233 = v289[14];
    v234 = &v291[v233];
    v235 = &v287[v233];
    swift_bridgeObjectRetain(v213);
    swift_bridgeObjectRetain(v275);
    swift_bridgeObjectRetain(v273);
    swift_bridgeObjectRetain(v271);
    swift_bridgeObjectRetain(v226);
    swift_bridgeObjectRetain(v227);
    swift_bridgeObjectRetain(v228);
    swift_bridgeObjectRetain(v229);
    swift_bridgeObjectRetain(v230);
    swift_bridgeObjectRetain(v231);
    swift_bridgeObjectRetain(v232);
    swift_bridgeObjectRetain(v269);
    swift_bridgeObjectRetain(v268);
    swift_bridgeObjectRetain(v267);
    swift_bridgeObjectRetain(v266);
    swift_bridgeObjectRetain(v265);
    swift_bridgeObjectRetain(v264);
    v236 = swift_bridgeObjectRetain(v270);
    ((void (*)(char *, char *, uint64_t, __n128))v285)(v234, v235, v281, v236);
    v237 = *(int *)(v278 + 20);
    v238 = &v234[v237];
    v239 = &v235[v237];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v235[v237], 1, v276))
    {
      v240 = sub_1000BA294(&qword_100BC3370);
      memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v276 - 8) + 16))(v238, v239, v276);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v238, 0, 1, v276);
    }
    v241 = *(int *)(v278 + 24);
    v242 = &v234[v241];
    v243 = &v235[v241];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v235[v241], 1, v263))
    {
      v244 = sub_1000BA294(&qword_100BC3378);
      memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v263 - 8) + 16))(v242, v243, v263);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v242, 0, 1, v263);
    }
    v245 = v289[15];
    v246 = &v291[v245];
    v247 = &v287[v245];
    v248 = *((_QWORD *)v247 + 1);
    *(_QWORD *)v246 = *(_QWORD *)v247;
    *((_QWORD *)v246 + 1) = v248;
    v249 = *((_QWORD *)v247 + 3);
    *((_QWORD *)v246 + 2) = *((_QWORD *)v247 + 2);
    *((_QWORD *)v246 + 3) = v249;
    v250 = *((_QWORD *)v247 + 5);
    *((_QWORD *)v246 + 4) = *((_QWORD *)v247 + 4);
    *((_QWORD *)v246 + 5) = v250;
    v251 = *((_QWORD *)v247 + 7);
    *((_QWORD *)v246 + 6) = *((_QWORD *)v247 + 6);
    *((_QWORD *)v246 + 7) = v251;
    v252 = *((_QWORD *)v247 + 9);
    *((_QWORD *)v246 + 8) = *((_QWORD *)v247 + 8);
    *((_QWORD *)v246 + 9) = v252;
    v253 = *((_QWORD *)v247 + 11);
    *((_QWORD *)v246 + 10) = *((_QWORD *)v247 + 10);
    *((_QWORD *)v246 + 11) = v253;
    v254 = *((_QWORD *)v247 + 13);
    *((_QWORD *)v246 + 12) = *((_QWORD *)v247 + 12);
    *((_QWORD *)v246 + 13) = v254;
    v255 = *(int *)(v279 + 64);
    v292 = (_QWORD *)((char *)v283 + v255);
    v256 = (_QWORD *)((char *)v65 + v255);
    v257 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain(v248);
    swift_bridgeObjectRetain(v249);
    swift_bridgeObjectRetain(v250);
    swift_bridgeObjectRetain(v251);
    swift_bridgeObjectRetain(v252);
    swift_bridgeObjectRetain(v253);
    swift_bridgeObjectRetain(v254);
    if (swift_getEnumCaseMultiPayload(v256) == 1)
    {
      v258 = *v256;
      v259 = v292;
      *v292 = *v256;
      swift_bridgeObjectRetain(v258);
      v260 = 1;
    }
    else
    {
      v261 = type metadata accessor for News(0);
      v259 = v292;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v261 - 8) + 16))(v292, v256, v261);
      v260 = 0;
    }
    v10 = v293;
    v66 = v280;
    swift_storeEnumTagMultiPayload(v259, v257, v260);
    v64 = v283;
    v73 = v283;
    v74 = v280;
    v75 = 1;
    goto LABEL_71;
  }
  v9 = *a2;
  *a1 = *a2;
  v10 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v10;
}

char *sub_1001660B4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t active;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t, __n128);
  __n128 v183;
  int *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  void (*v212)(char *, char *, uint64_t, __n128);
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  __n128 v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  void (*v253)(char *, char *, uint64_t, __n128);
  __n128 v254;
  int *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __n128 v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  void (*v342)(char *, char *, uint64_t, __n128);
  __n128 v343;
  int *v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  char *v371;
  void (*v372)(char *, char *, uint64_t, __n128);
  __n128 v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  __n128 v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  void (*v413)(char *, char *, uint64_t, __n128);
  __n128 v414;
  int *v415;
  uint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  char *v422;
  uint64_t v423;
  char *v424;
  char *v425;
  uint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  char *v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  __n128 v442;
  uint64_t v443;
  char *v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  uint64_t v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  void (*v486)(char *, char *, uint64_t, __n128);
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void (*v491)(char *, char *, uint64_t, __n128);
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  void (*v499)(char *, char *, uint64_t, __n128);
  uint64_t v500;
  void (*v501)(char *, char *, uint64_t, __n128);
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  char *v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  char *v516;
  char *v517;
  int *v518;
  int *v519;
  char *v520;
  char *v521;
  uint64_t *v522;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    active = type metadata accessor for LocationViewerActiveLocationState(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  a1[a3[6]] = a2[a3[6]];
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for CurrentLocation(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v18);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17);
      if (EnumCaseMultiPayload == 2)
      {
        v32 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v16, v17, v32);
        v23 = v16;
        v24 = v18;
        v25 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v33 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v16, v17, v33);
        v23 = v16;
        v24 = v18;
        v25 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          goto LABEL_27;
        }
        v22 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v16, v17, v22);
        v23 = v16;
        v24 = v18;
        v25 = 0;
      }
      swift_storeEnumTagMultiPayload(v23, v24, v25);
LABEL_27:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  if (v20)
  {
    sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
LABEL_15:
    v26 = *(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100C0D170) - 8);
LABEL_16:
    memcpy(v16, v17, *(_QWORD *)(v26 + 64));
    goto LABEL_31;
  }
  if (a1 == a2)
    goto LABEL_31;
  sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  v27 = swift_getEnumCaseMultiPayload(v17);
  if (v27 == 2)
  {
    v34 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v16, v17, v34);
    v29 = v16;
    v30 = v18;
    v31 = 2;
  }
  else if (v27 == 1)
  {
    v35 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v16, v17, v35);
    v29 = v16;
    v30 = v18;
    v31 = 1;
  }
  else
  {
    if (v27)
    {
      v26 = *(_QWORD *)(v18 - 8);
      goto LABEL_16;
    }
    v28 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v16, v17, v28);
    v29 = v16;
    v30 = v18;
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v30, v31);
LABEL_31:
  v36 = (int *)type metadata accessor for LocationsState(0);
  v37 = v36[5];
  v38 = *(_QWORD *)&v17[v37];
  *(_QWORD *)&v16[v37] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  v39 = v36[6];
  v40 = *(_QWORD *)&v17[v39];
  *(_QWORD *)&v16[v39] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  v41 = v36[7];
  v42 = *(_QWORD *)&v17[v41];
  *(_QWORD *)&v16[v41] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  v43 = v36[8];
  v44 = *(_QWORD *)&v17[v43];
  *(_QWORD *)&v16[v43] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease();
  v45 = v36[9];
  v46 = *(_QWORD *)&v17[v45];
  *(_QWORD *)&v16[v45] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  v47 = v36[10];
  v48 = *(_QWORD *)&v17[v47];
  *(_QWORD *)&v16[v47] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease();
  v49 = v36[11];
  v50 = *(_QWORD *)&v17[v49];
  *(_QWORD *)&v16[v49] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease();
  v51 = v36[12];
  v52 = &v16[v51];
  v53 = &v17[v51];
  v54 = *(_QWORD *)v53;
  v55 = *((_QWORD *)v53 + 1);
  v56 = v53[16];
  sub_100163980(*(_QWORD *)v53, v55, v56);
  v57 = *(_QWORD *)v52;
  v58 = *((_QWORD *)v52 + 1);
  *(_QWORD *)v52 = v54;
  *((_QWORD *)v52 + 1) = v55;
  v59 = v52[16];
  v52[16] = v56;
  sub_1001639C8(v57, v58, v59);
  v60 = v36[13];
  v61 = *(_QWORD *)&v17[v60];
  *(_QWORD *)&v16[v60] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease();
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  v62 = a3[10];
  v63 = &a1[v62];
  v64 = &a2[v62];
  *v63 = *v64;
  v65 = *((_QWORD *)v64 + 1);
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease();
  v66 = a3[11];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v69 = type metadata accessor for Date(0);
  v70 = *(_QWORD *)(v69 - 8);
  (*(void (**)(char *, char *, uint64_t))(v70 + 24))(v67, v68, v69);
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  a1[a3[15]] = a2[a3[15]];
  v71 = a3[16];
  v72 = *(_QWORD *)&a2[v71];
  *(_QWORD *)&a1[v71] = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease();
  a1[a3[17]] = a2[a3[17]];
  v73 = a3[18];
  v74 = &a1[v73];
  v75 = &a2[v73];
  v76 = type metadata accessor for LocationWeatherDataState(0);
  v77 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v74, 1, v76);
  v78 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v76);
  if (v77)
  {
    if (!v78)
    {
      v79 = swift_getEnumCaseMultiPayload(v75);
      if (v79 == 2)
      {
        *(_QWORD *)v74 = *(_QWORD *)v75;
        v88 = *((_QWORD *)v75 + 1);
        *((_QWORD *)v74 + 1) = v88;
        swift_bridgeObjectRetain(v88);
        v89 = v74;
        v90 = v76;
        v91 = 2;
        goto LABEL_109;
      }
      if (v79 != 1)
      {
        if (v79)
        {
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
LABEL_110:
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, v76);
          return a1;
        }
        v80 = type metadata accessor for NewsDataModel(0);
        if (swift_getEnumCaseMultiPayload(v75) == 1)
        {
          v81 = *(_QWORD *)v75;
          *(_QWORD *)v74 = *(_QWORD *)v75;
          swift_bridgeObjectRetain(v81);
          v82 = 1;
        }
        else
        {
          v99 = type metadata accessor for News(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v74, v75, v99);
          v82 = 0;
        }
        swift_storeEnumTagMultiPayload(v74, v80, v82);
        v89 = v74;
        v90 = v76;
        v91 = 0;
LABEL_109:
        swift_storeEnumTagMultiPayload(v89, v90, v91);
        goto LABEL_110;
      }
      v507 = v70;
      *(_QWORD *)v74 = *(_QWORD *)v75;
      v92 = *((_QWORD *)v75 + 1);
      *((_QWORD *)v74 + 1) = v92;
      v93 = (int *)type metadata accessor for WeatherData(0);
      v94 = v93[5];
      v95 = &v74[v94];
      v96 = &v75[v94];
      v97 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v92);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v96, 1, v97))
      {
        v98 = sub_1000BA294(&qword_100BC3340);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v95, 0, 1, v97);
      }
      v111 = v93[6];
      v112 = &v74[v111];
      v113 = &v75[v111];
      v114 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v112, v113, v114);
      v115 = v93[7];
      v116 = &v74[v115];
      v117 = &v75[v115];
      v118 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v118))
      {
        v119 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v507 + 16))(v116, v117, v69);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v118);
      }
      v120 = v93[8];
      v121 = &v74[v120];
      v122 = &v75[v120];
      v123 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v124 = swift_getEnumCaseMultiPayload(v122);
      v503 = v76;
      v513 = v69;
      if (v124 == 1)
      {
        v129 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v121, v122, v129);
        v126 = v121;
        v127 = v123;
        v128 = 1;
      }
      else
      {
        if (v124)
        {
          memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
          goto LABEL_69;
        }
        *(_QWORD *)v121 = *(_QWORD *)v122;
        v125 = *((_QWORD *)v122 + 1);
        *((_QWORD *)v121 + 1) = v125;
        swift_bridgeObjectRetain(v125);
        v126 = v121;
        v127 = v123;
        v128 = 0;
      }
      swift_storeEnumTagMultiPayload(v126, v127, v128);
LABEL_69:
      v130 = v93[9];
      v131 = &v74[v130];
      v132 = &v75[v130];
      v133 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v132, 1, v133))
      {
        v134 = sub_1000BA294(&qword_100BC3350);
        memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
      }
      else
      {
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v132, 1, v513))
        {
          v135 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v507 + 16))(v131, v132, v513);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v131, 0, 1, v513);
        }
        v146 = *(int *)(v133 + 20);
        v147 = &v131[v146];
        v148 = &v132[v146];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v132[v146], 1, v513))
        {
          v149 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v507 + 16))(v147, v148, v513);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v513);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v131, 0, 1, v133);
      }
      v471 = sub_1000BA294(&qword_100BC3358);
      v159 = *(int *)(v471 + 48);
      v511 = v74;
      v160 = &v74[v159];
      v505 = v75;
      v161 = &v75[v159];
      v162 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v160, v161, v162);
      v163 = type metadata accessor for PreprocessedWeatherData(0);
      v164 = *(int *)(v163 + 20);
      v165 = *(_QWORD *)&v161[v164];
      *(_QWORD *)&v160[v164] = v165;
      v517 = v161;
      v519 = (int *)v163;
      v166 = *(int *)(v163 + 24);
      v515 = v160;
      v167 = &v160[v166];
      v168 = &v161[v166];
      *(_QWORD *)v167 = *(_QWORD *)&v161[v166];
      v169 = *(_QWORD *)&v161[v166 + 8];
      *((_QWORD *)v167 + 1) = v169;
      *((_QWORD *)v167 + 2) = *((_QWORD *)v168 + 2);
      v170 = *((_QWORD *)v168 + 3);
      *((_QWORD *)v167 + 3) = v170;
      *((_QWORD *)v167 + 4) = *((_QWORD *)v168 + 4);
      v171 = *((_QWORD *)v168 + 5);
      *((_QWORD *)v167 + 5) = v171;
      v500 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v172 = *(int *)(v500 + 28);
      v173 = &v167[v172];
      v174 = &v168[v172];
      v175 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain(v165);
      swift_bridgeObjectRetain(v169);
      swift_bridgeObjectRetain(v170);
      swift_bridgeObjectRetain(v171);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v174, 1, v175))
      {
        v176 = sub_1000BA294(&qword_100BC3360);
        memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v173 = *(_QWORD *)v174;
        v177 = *((_QWORD *)v174 + 1);
        *((_QWORD *)v173 + 1) = v177;
        v178 = *(int *)(v175 + 20);
        v179 = &v173[v178];
        v180 = &v174[v178];
        v181 = type metadata accessor for TemperatureScaleConfiguration(0);
        v182 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v181 - 8) + 16);
        v183 = swift_bridgeObjectRetain(v177);
        v182(v179, v180, v181, v183);
        v184 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v179[v184[5]] = *(_QWORD *)&v180[v184[5]];
        *(_QWORD *)&v179[v184[6]] = *(_QWORD *)&v180[v184[6]];
        *(_QWORD *)&v179[v184[7]] = *(_QWORD *)&v180[v184[7]];
        v185 = v184[8];
        v186 = &v179[v185];
        v187 = &v180[v185];
        *(_QWORD *)v186 = *(_QWORD *)v187;
        v188 = *((_QWORD *)v187 + 1);
        *((_QWORD *)v186 + 1) = v188;
        v179[v184[9]] = v180[v184[9]];
        swift_bridgeObjectRetain(v188);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v173, 0, 1, v175);
      }
      v189 = *(int *)(v500 + 32);
      v190 = &v167[v189];
      v191 = &v168[v189];
      *(_QWORD *)v190 = *(_QWORD *)v191;
      v192 = *((_QWORD *)v191 + 1);
      *((_QWORD *)v190 + 1) = v192;
      v193 = v519[7];
      v194 = &v515[v193];
      v195 = &v517[v193];
      v196 = *(_QWORD *)&v517[v193];
      *(_QWORD *)&v515[v193] = v196;
      v197 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v198 = &v194[v197];
      v199 = &v195[v197];
      v200 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain(v192);
      swift_bridgeObjectRetain(v196);
      v494 = v200;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v199, 1, v200))
      {
        v201 = sub_1000BA294(&qword_100BC3368);
        memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(v198, v199, v200);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v198, 0, 1, v200);
      }
      v202 = v519[8];
      v203 = &v515[v202];
      v204 = &v517[v202];
      *(_QWORD *)v203 = *(_QWORD *)&v517[v202];
      v205 = *(_QWORD *)&v517[v202 + 8];
      *((_QWORD *)v203 + 1) = v205;
      *((_QWORD *)v203 + 2) = *(_QWORD *)&v517[v202 + 16];
      v206 = *(_QWORD *)&v517[v202 + 24];
      *((_QWORD *)v203 + 3) = v206;
      *((_QWORD *)v203 + 4) = *(_QWORD *)&v517[v202 + 32];
      v207 = *(_QWORD *)&v517[v202 + 40];
      *((_QWORD *)v203 + 5) = v207;
      *((_QWORD *)v203 + 6) = *(_QWORD *)&v517[v202 + 48];
      v208 = *(_QWORD *)&v517[v202 + 56];
      *((_QWORD *)v203 + 7) = v208;
      v209 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v210 = &v203[v209];
      v211 = &v204[v209];
      v212 = *(void (**)(char *, char *, uint64_t, __n128))(v507 + 16);
      swift_bridgeObjectRetain(v205);
      swift_bridgeObjectRetain(v206);
      swift_bridgeObjectRetain(v207);
      v213 = swift_bridgeObjectRetain(v208);
      v212(v210, v211, v513, v213);
      v214 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v215 = *(int *)(v214 + 20);
      v216 = &v210[v215];
      v217 = &v211[v215];
      v218 = type metadata accessor for Elevation(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v217, 1, v218))
      {
        v219 = sub_1000BA294(&qword_100BC3370);
        memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v216, v217, v218);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v216, 0, 1, v218);
      }
      v220 = *(int *)(v214 + 24);
      v221 = &v210[v220];
      v222 = &v211[v220];
      v223 = type metadata accessor for BackgroundMoonData(0);
      v509 = v214;
      v497 = v218;
      v501 = v212;
      v469 = v223;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v222, 1, v223))
      {
        v224 = sub_1000BA294(&qword_100BC3378);
        memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 16))(v221, v222, v223);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v221, 0, 1, v223);
      }
      v225 = v519[9];
      v226 = &v515[v225];
      v227 = &v517[v225];
      *(_QWORD *)v226 = *(_QWORD *)v227;
      v228 = *((_QWORD *)v227 + 1);
      *((_QWORD *)v226 + 1) = v228;
      *((_QWORD *)v226 + 2) = *((_QWORD *)v227 + 2);
      v229 = *((_QWORD *)v227 + 3);
      *((_QWORD *)v226 + 3) = v229;
      *((_QWORD *)v226 + 4) = *((_QWORD *)v227 + 4);
      v230 = *((_QWORD *)v227 + 5);
      *((_QWORD *)v226 + 5) = v230;
      *((_QWORD *)v226 + 6) = *((_QWORD *)v227 + 6);
      v231 = *((_QWORD *)v227 + 7);
      *((_QWORD *)v226 + 7) = v231;
      *((_QWORD *)v226 + 8) = *((_QWORD *)v227 + 8);
      v232 = *((_QWORD *)v227 + 9);
      *((_QWORD *)v226 + 9) = v232;
      *((_QWORD *)v226 + 10) = *((_QWORD *)v227 + 10);
      v233 = *((_QWORD *)v227 + 11);
      *((_QWORD *)v226 + 11) = v233;
      *((_QWORD *)v226 + 12) = *((_QWORD *)v227 + 12);
      v234 = *((_QWORD *)v227 + 13);
      *((_QWORD *)v226 + 13) = v234;
      v235 = v519[10];
      v236 = &v515[v235];
      v237 = &v517[v235];
      v491 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v494 - 8) + 16);
      swift_bridgeObjectRetain(v228);
      swift_bridgeObjectRetain(v229);
      swift_bridgeObjectRetain(v230);
      swift_bridgeObjectRetain(v231);
      swift_bridgeObjectRetain(v232);
      swift_bridgeObjectRetain(v233);
      v238 = swift_bridgeObjectRetain(v234);
      v491(v236, v237, v494, v238);
      v239 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
      v240 = &v236[v239];
      v241 = &v237[v239];
      *(_QWORD *)v240 = *(_QWORD *)v241;
      v242 = *((_QWORD *)v241 + 1);
      *((_QWORD *)v240 + 1) = v242;
      v243 = v519[11];
      v244 = &v515[v243];
      v245 = &v517[v243];
      *(_QWORD *)v244 = *(_QWORD *)v245;
      v246 = *((_QWORD *)v245 + 1);
      *((_QWORD *)v244 + 1) = v246;
      *((_QWORD *)v244 + 2) = *((_QWORD *)v245 + 2);
      v247 = *((_QWORD *)v245 + 3);
      *((_QWORD *)v244 + 3) = v247;
      *((_QWORD *)v244 + 4) = *((_QWORD *)v245 + 4);
      v248 = *((_QWORD *)v245 + 5);
      *((_QWORD *)v244 + 5) = v248;
      v249 = v519[12];
      v250 = &v515[v249];
      v251 = &v517[v249];
      v252 = type metadata accessor for PressureTrend(0);
      v253 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v252 - 8) + 16);
      swift_bridgeObjectRetain(v242);
      swift_bridgeObjectRetain(v246);
      swift_bridgeObjectRetain(v247);
      v254 = swift_bridgeObjectRetain(v248);
      v253(v250, v251, v252, v254);
      v255 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      v256 = v255[5];
      v257 = &v250[v256];
      v258 = &v251[v256];
      *(_QWORD *)v257 = *(_QWORD *)v258;
      v259 = *((_QWORD *)v258 + 1);
      *((_QWORD *)v257 + 1) = v259;
      v260 = v255[6];
      v261 = &v250[v260];
      v262 = &v251[v260];
      *(_QWORD *)v261 = *(_QWORD *)v262;
      v495 = *((_QWORD *)v262 + 1);
      *((_QWORD *)v261 + 1) = v495;
      v263 = v255[7];
      v264 = &v250[v263];
      v265 = &v251[v263];
      *(_QWORD *)v264 = *(_QWORD *)v265;
      v492 = *((_QWORD *)v265 + 1);
      *((_QWORD *)v264 + 1) = v492;
      *(_QWORD *)&v250[v255[8]] = *(_QWORD *)&v251[v255[8]];
      v266 = v255[9];
      v267 = &v250[v266];
      v268 = &v251[v266];
      *(_QWORD *)v267 = *(_QWORD *)v268;
      v488 = *((_QWORD *)v268 + 1);
      *((_QWORD *)v267 + 1) = v488;
      v269 = v519[13];
      v270 = &v515[v269];
      v271 = &v517[v269];
      *(_QWORD *)v270 = *(_QWORD *)v271;
      v272 = *((_QWORD *)v271 + 1);
      *((_QWORD *)v270 + 1) = v272;
      *((_QWORD *)v270 + 2) = *((_QWORD *)v271 + 2);
      v273 = *((_QWORD *)v271 + 3);
      *((_QWORD *)v270 + 3) = v273;
      *((_QWORD *)v270 + 4) = *((_QWORD *)v271 + 4);
      v274 = *((_QWORD *)v271 + 5);
      *((_QWORD *)v270 + 5) = v274;
      *((_QWORD *)v270 + 6) = *((_QWORD *)v271 + 6);
      v275 = *((_QWORD *)v271 + 7);
      *((_QWORD *)v270 + 7) = v275;
      *((_QWORD *)v270 + 8) = *((_QWORD *)v271 + 8);
      v276 = *((_QWORD *)v271 + 9);
      *((_QWORD *)v270 + 9) = v276;
      *((_QWORD *)v270 + 10) = *((_QWORD *)v271 + 10);
      v277 = *((_QWORD *)v271 + 11);
      *((_QWORD *)v270 + 11) = v277;
      *((_QWORD *)v270 + 12) = *((_QWORD *)v271 + 12);
      v485 = *((_QWORD *)v271 + 13);
      *((_QWORD *)v270 + 13) = v485;
      *((_QWORD *)v270 + 14) = *((_QWORD *)v271 + 14);
      v278 = *((_QWORD *)v271 + 15);
      *((_QWORD *)v270 + 15) = v278;
      *((_QWORD *)v270 + 16) = *((_QWORD *)v271 + 16);
      v279 = *((_QWORD *)v271 + 17);
      *((_QWORD *)v270 + 17) = v279;
      *((_QWORD *)v270 + 18) = *((_QWORD *)v271 + 18);
      v483 = *((_QWORD *)v271 + 19);
      *((_QWORD *)v270 + 19) = v483;
      *((_QWORD *)v270 + 20) = *((_QWORD *)v271 + 20);
      v481 = *((_QWORD *)v271 + 21);
      *((_QWORD *)v270 + 21) = v481;
      *((_QWORD *)v270 + 22) = *((_QWORD *)v271 + 22);
      v479 = *((_QWORD *)v271 + 23);
      *((_QWORD *)v270 + 23) = v479;
      *((_QWORD *)v270 + 24) = *((_QWORD *)v271 + 24);
      v477 = *((_QWORD *)v271 + 25);
      *((_QWORD *)v270 + 25) = v477;
      *((_QWORD *)v270 + 26) = *((_QWORD *)v271 + 26);
      *((_QWORD *)v270 + 27) = *((_QWORD *)v271 + 27);
      v280 = *((_QWORD *)v271 + 28);
      *((_QWORD *)v270 + 28) = v280;
      v281 = v519[14];
      v473 = &v517[v281];
      v475 = &v515[v281];
      swift_bridgeObjectRetain(v259);
      swift_bridgeObjectRetain(v495);
      swift_bridgeObjectRetain(v492);
      swift_bridgeObjectRetain(v488);
      swift_bridgeObjectRetain(v272);
      swift_bridgeObjectRetain(v273);
      swift_bridgeObjectRetain(v274);
      swift_bridgeObjectRetain(v275);
      swift_bridgeObjectRetain(v276);
      swift_bridgeObjectRetain(v277);
      swift_bridgeObjectRetain(v485);
      swift_bridgeObjectRetain(v278);
      swift_bridgeObjectRetain(v279);
      swift_bridgeObjectRetain(v483);
      swift_bridgeObjectRetain(v481);
      swift_bridgeObjectRetain(v479);
      swift_bridgeObjectRetain(v477);
      v282 = swift_bridgeObjectRetain(v280);
      v501(v475, v473, v513, v282);
      v283 = *(int *)(v509 + 20);
      v284 = &v475[v283];
      v285 = &v473[v283];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v473[v283], 1, v497))
      {
        v286 = sub_1000BA294(&qword_100BC3370);
        memcpy(v284, v285, *(_QWORD *)(*(_QWORD *)(v286 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v497 - 8) + 16))(v284, v285, v497);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v284, 0, 1, v497);
      }
      v287 = *(int *)(v509 + 24);
      v288 = &v475[v287];
      v289 = &v473[v287];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v473[v287], 1, v469))
      {
        v290 = sub_1000BA294(&qword_100BC3378);
        memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v469 - 8) + 16))(v288, v289, v469);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v288, 0, 1, v469);
      }
      v291 = v519[15];
      v292 = &v515[v291];
      v293 = &v517[v291];
      *(_QWORD *)v292 = *(_QWORD *)v293;
      v294 = *((_QWORD *)v293 + 1);
      *((_QWORD *)v292 + 1) = v294;
      *((_QWORD *)v292 + 2) = *((_QWORD *)v293 + 2);
      v295 = *((_QWORD *)v293 + 3);
      *((_QWORD *)v292 + 3) = v295;
      *((_QWORD *)v292 + 4) = *((_QWORD *)v293 + 4);
      v296 = *((_QWORD *)v293 + 5);
      *((_QWORD *)v292 + 5) = v296;
      *((_QWORD *)v292 + 6) = *((_QWORD *)v293 + 6);
      v297 = *((_QWORD *)v293 + 7);
      *((_QWORD *)v292 + 7) = v297;
      *((_QWORD *)v292 + 8) = *((_QWORD *)v293 + 8);
      v298 = *((_QWORD *)v293 + 9);
      *((_QWORD *)v292 + 9) = v298;
      *((_QWORD *)v292 + 10) = *((_QWORD *)v293 + 10);
      v299 = *((_QWORD *)v293 + 11);
      *((_QWORD *)v292 + 11) = v299;
      *((_QWORD *)v292 + 12) = *((_QWORD *)v293 + 12);
      v300 = *((_QWORD *)v293 + 13);
      *((_QWORD *)v292 + 13) = v300;
      v301 = *(int *)(v471 + 64);
      v520 = &v511[v301];
      v302 = (_QWORD *)((char *)v505 + v301);
      v303 = type metadata accessor for NewsDataModel(0);
      swift_bridgeObjectRetain(v294);
      swift_bridgeObjectRetain(v295);
      swift_bridgeObjectRetain(v296);
      swift_bridgeObjectRetain(v297);
      swift_bridgeObjectRetain(v298);
      swift_bridgeObjectRetain(v299);
      swift_bridgeObjectRetain(v300);
      if (swift_getEnumCaseMultiPayload(v302) == 1)
      {
        v304 = *v302;
        v305 = v520;
        *(_QWORD *)v520 = *v302;
        swift_bridgeObjectRetain(v304);
        v306 = 1;
      }
      else
      {
        v307 = type metadata accessor for News(0);
        v305 = v520;
        (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v307 - 8) + 16))(v520, v302, v307);
        v306 = 0;
      }
      v74 = v511;
      v76 = v503;
      swift_storeEnumTagMultiPayload(v305, v303, v306);
      v89 = v511;
      v90 = v503;
      v91 = 1;
      goto LABEL_109;
    }
    goto LABEL_40;
  }
  if (!v78)
  {
    if (a1 == a2)
      return a1;
    sub_1000215BC((uint64_t)v74, type metadata accessor for LocationWeatherDataState);
    v84 = swift_getEnumCaseMultiPayload(v75);
    if (v84 == 2)
    {
      *(_QWORD *)v74 = *(_QWORD *)v75;
      v100 = *((_QWORD *)v75 + 1);
      *((_QWORD *)v74 + 1) = v100;
      swift_bridgeObjectRetain(v100);
      v101 = v74;
      v102 = v76;
      v103 = 2;
      goto LABEL_145;
    }
    if (v84 != 1)
    {
      if (v84)
      {
        v83 = *(_QWORD *)(v76 - 8);
        goto LABEL_41;
      }
      v85 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v75) == 1)
      {
        v86 = *(_QWORD *)v75;
        *(_QWORD *)v74 = *(_QWORD *)v75;
        swift_bridgeObjectRetain(v86);
        v87 = 1;
      }
      else
      {
        v136 = type metadata accessor for News(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(v74, v75, v136);
        v87 = 0;
      }
      swift_storeEnumTagMultiPayload(v74, v85, v87);
      v101 = v74;
      v102 = v76;
      v103 = 0;
LABEL_145:
      swift_storeEnumTagMultiPayload(v101, v102, v103);
      return a1;
    }
    v508 = v70;
    *(_QWORD *)v74 = *(_QWORD *)v75;
    v104 = *((_QWORD *)v75 + 1);
    *((_QWORD *)v74 + 1) = v104;
    v105 = (int *)type metadata accessor for WeatherData(0);
    v106 = v105[5];
    v107 = &v74[v106];
    v108 = &v75[v106];
    v109 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain(v104);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v108, 1, v109))
    {
      v110 = sub_1000BA294(&qword_100BC3340);
      memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v107, 0, 1, v109);
    }
    v137 = v105[6];
    v138 = &v74[v137];
    v139 = &v75[v137];
    v140 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
    v141 = v105[7];
    v142 = &v74[v141];
    v143 = &v75[v141];
    v144 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v143, 1, v144))
    {
      v145 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v508 + 16))(v142, v143, v69);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v142, 0, 1, v144);
    }
    v150 = v105[8];
    v151 = &v74[v150];
    v152 = &v75[v150];
    v153 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v154 = swift_getEnumCaseMultiPayload(v152);
    v504 = v76;
    v514 = v69;
    if (v154 == 1)
    {
      v308 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v308 - 8) + 16))(v151, v152, v308);
      v156 = v151;
      v157 = v153;
      v158 = 1;
    }
    else
    {
      if (v154)
      {
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
        goto LABEL_114;
      }
      *(_QWORD *)v151 = *(_QWORD *)v152;
      v155 = *((_QWORD *)v152 + 1);
      *((_QWORD *)v151 + 1) = v155;
      swift_bridgeObjectRetain(v155);
      v156 = v151;
      v157 = v153;
      v158 = 0;
    }
    swift_storeEnumTagMultiPayload(v156, v157, v158);
LABEL_114:
    v309 = v105[9];
    v310 = &v74[v309];
    v311 = &v75[v309];
    v312 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v311, 1, v312))
    {
      v313 = sub_1000BA294(&qword_100BC3350);
      memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v313 - 8) + 64));
    }
    else
    {
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v311, 1, v514))
      {
        v314 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v508 + 16))(v310, v311, v514);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v310, 0, 1, v514);
      }
      v315 = *(int *)(v312 + 20);
      v316 = &v310[v315];
      v317 = &v311[v315];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v311[v315], 1, v514))
      {
        v318 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v318 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v508 + 16))(v316, v317, v514);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v316, 0, 1, v514);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v310, 0, 1, v312);
    }
    v502 = sub_1000BA294(&qword_100BC3358);
    v319 = *(int *)(v502 + 48);
    v512 = v74;
    v320 = &v74[v319];
    v506 = v75;
    v321 = &v75[v319];
    v322 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v322 - 8) + 16))(v320, v321, v322);
    v323 = type metadata accessor for PreprocessedWeatherData(0);
    v324 = *(int *)(v323 + 20);
    v325 = *(_QWORD *)&v321[v324];
    *(_QWORD *)&v320[v324] = v325;
    v516 = v320;
    v518 = (int *)v323;
    v326 = *(int *)(v323 + 24);
    v327 = &v320[v326];
    v521 = v321;
    v328 = &v321[v326];
    *(_QWORD *)v327 = *(_QWORD *)&v321[v326];
    v329 = *(_QWORD *)&v321[v326 + 8];
    *((_QWORD *)v327 + 1) = v329;
    *((_QWORD *)v327 + 2) = *((_QWORD *)v328 + 2);
    v330 = *((_QWORD *)v328 + 3);
    *((_QWORD *)v327 + 3) = v330;
    *((_QWORD *)v327 + 4) = *((_QWORD *)v328 + 4);
    v331 = *((_QWORD *)v328 + 5);
    *((_QWORD *)v327 + 5) = v331;
    v498 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v332 = *(int *)(v498 + 28);
    v333 = &v327[v332];
    v334 = &v328[v332];
    v335 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain(v325);
    swift_bridgeObjectRetain(v329);
    swift_bridgeObjectRetain(v330);
    swift_bridgeObjectRetain(v331);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v334, 1, v335))
    {
      v336 = sub_1000BA294(&qword_100BC3360);
      memcpy(v333, v334, *(_QWORD *)(*(_QWORD *)(v336 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v333 = *(_QWORD *)v334;
      v337 = *((_QWORD *)v334 + 1);
      *((_QWORD *)v333 + 1) = v337;
      v338 = *(int *)(v335 + 20);
      v339 = &v333[v338];
      v340 = &v334[v338];
      v341 = type metadata accessor for TemperatureScaleConfiguration(0);
      v342 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v341 - 8) + 16);
      v343 = swift_bridgeObjectRetain(v337);
      v342(v339, v340, v341, v343);
      v344 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v339[v344[5]] = *(_QWORD *)&v340[v344[5]];
      *(_QWORD *)&v339[v344[6]] = *(_QWORD *)&v340[v344[6]];
      *(_QWORD *)&v339[v344[7]] = *(_QWORD *)&v340[v344[7]];
      v345 = v344[8];
      v346 = &v339[v345];
      v347 = &v340[v345];
      *(_QWORD *)v346 = *(_QWORD *)v347;
      v348 = *((_QWORD *)v347 + 1);
      *((_QWORD *)v346 + 1) = v348;
      v339[v344[9]] = v340[v344[9]];
      swift_bridgeObjectRetain(v348);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v333, 0, 1, v335);
    }
    v349 = *(int *)(v498 + 32);
    v350 = &v327[v349];
    v351 = &v328[v349];
    *(_QWORD *)v350 = *(_QWORD *)v351;
    v352 = *((_QWORD *)v351 + 1);
    *((_QWORD *)v350 + 1) = v352;
    v353 = v518[7];
    v354 = &v516[v353];
    v355 = &v521[v353];
    v356 = *(_QWORD *)&v521[v353];
    *(_QWORD *)&v516[v353] = v356;
    v357 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v358 = &v354[v357];
    v359 = &v355[v357];
    v360 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain(v352);
    swift_bridgeObjectRetain(v356);
    v489 = v360;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v359, 1, v360))
    {
      v361 = sub_1000BA294(&qword_100BC3368);
      memcpy(v358, v359, *(_QWORD *)(*(_QWORD *)(v361 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v360 - 8) + 16))(v358, v359, v360);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v358, 0, 1, v360);
    }
    v362 = v518[8];
    v363 = &v516[v362];
    v364 = &v521[v362];
    *(_QWORD *)v363 = *(_QWORD *)&v521[v362];
    v365 = *(_QWORD *)&v521[v362 + 8];
    *((_QWORD *)v363 + 1) = v365;
    *((_QWORD *)v363 + 2) = *(_QWORD *)&v521[v362 + 16];
    v366 = *(_QWORD *)&v521[v362 + 24];
    *((_QWORD *)v363 + 3) = v366;
    *((_QWORD *)v363 + 4) = *(_QWORD *)&v521[v362 + 32];
    v367 = *(_QWORD *)&v521[v362 + 40];
    *((_QWORD *)v363 + 5) = v367;
    *((_QWORD *)v363 + 6) = *(_QWORD *)&v521[v362 + 48];
    v368 = *(_QWORD *)&v521[v362 + 56];
    *((_QWORD *)v363 + 7) = v368;
    v369 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v370 = &v363[v369];
    v371 = &v364[v369];
    v372 = *(void (**)(char *, char *, uint64_t, __n128))(v508 + 16);
    swift_bridgeObjectRetain(v365);
    swift_bridgeObjectRetain(v366);
    swift_bridgeObjectRetain(v367);
    v373 = swift_bridgeObjectRetain(v368);
    v499 = v372;
    v372(v370, v371, v514, v373);
    v374 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v375 = *(int *)(v374 + 20);
    v376 = &v370[v375];
    v377 = &v371[v375];
    v378 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v377, 1, v378))
    {
      v379 = sub_1000BA294(&qword_100BC3370);
      memcpy(v376, v377, *(_QWORD *)(*(_QWORD *)(v379 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v378 - 8) + 16))(v376, v377, v378);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v376, 0, 1, v378);
    }
    v380 = *(int *)(v374 + 24);
    v381 = &v370[v380];
    v382 = &v371[v380];
    v383 = type metadata accessor for BackgroundMoonData(0);
    v510 = v374;
    v493 = v383;
    v496 = v378;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v382, 1, v383))
    {
      v384 = sub_1000BA294(&qword_100BC3378);
      memcpy(v381, v382, *(_QWORD *)(*(_QWORD *)(v384 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v383 - 8) + 16))(v381, v382, v383);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v381, 0, 1, v383);
    }
    v385 = v518[9];
    v386 = &v516[v385];
    v387 = &v521[v385];
    *(_QWORD *)v386 = *(_QWORD *)v387;
    v388 = *((_QWORD *)v387 + 1);
    *((_QWORD *)v386 + 1) = v388;
    *((_QWORD *)v386 + 2) = *((_QWORD *)v387 + 2);
    v389 = *((_QWORD *)v387 + 3);
    *((_QWORD *)v386 + 3) = v389;
    *((_QWORD *)v386 + 4) = *((_QWORD *)v387 + 4);
    v390 = *((_QWORD *)v387 + 5);
    *((_QWORD *)v386 + 5) = v390;
    *((_QWORD *)v386 + 6) = *((_QWORD *)v387 + 6);
    v391 = *((_QWORD *)v387 + 7);
    *((_QWORD *)v386 + 7) = v391;
    *((_QWORD *)v386 + 8) = *((_QWORD *)v387 + 8);
    v392 = *((_QWORD *)v387 + 9);
    *((_QWORD *)v386 + 9) = v392;
    *((_QWORD *)v386 + 10) = *((_QWORD *)v387 + 10);
    v393 = *((_QWORD *)v387 + 11);
    *((_QWORD *)v386 + 11) = v393;
    *((_QWORD *)v386 + 12) = *((_QWORD *)v387 + 12);
    v394 = *((_QWORD *)v387 + 13);
    *((_QWORD *)v386 + 13) = v394;
    v395 = v518[10];
    v396 = &v516[v395];
    v397 = &v521[v395];
    v486 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v489 - 8) + 16);
    swift_bridgeObjectRetain(v388);
    swift_bridgeObjectRetain(v389);
    swift_bridgeObjectRetain(v390);
    swift_bridgeObjectRetain(v391);
    swift_bridgeObjectRetain(v392);
    swift_bridgeObjectRetain(v393);
    v398 = swift_bridgeObjectRetain(v394);
    v486(v396, v397, v489, v398);
    v399 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
    v400 = &v396[v399];
    v401 = &v397[v399];
    *(_QWORD *)v400 = *(_QWORD *)v401;
    v402 = *((_QWORD *)v401 + 1);
    *((_QWORD *)v400 + 1) = v402;
    v403 = v518[11];
    v404 = &v516[v403];
    v405 = &v521[v403];
    *(_QWORD *)v404 = *(_QWORD *)v405;
    v406 = *((_QWORD *)v405 + 1);
    *((_QWORD *)v404 + 1) = v406;
    *((_QWORD *)v404 + 2) = *((_QWORD *)v405 + 2);
    v407 = *((_QWORD *)v405 + 3);
    *((_QWORD *)v404 + 3) = v407;
    *((_QWORD *)v404 + 4) = *((_QWORD *)v405 + 4);
    v408 = *((_QWORD *)v405 + 5);
    *((_QWORD *)v404 + 5) = v408;
    v409 = v518[12];
    v410 = &v516[v409];
    v411 = &v521[v409];
    v412 = type metadata accessor for PressureTrend(0);
    v413 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v412 - 8) + 16);
    swift_bridgeObjectRetain(v402);
    swift_bridgeObjectRetain(v406);
    swift_bridgeObjectRetain(v407);
    v414 = swift_bridgeObjectRetain(v408);
    v413(v410, v411, v412, v414);
    v415 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v416 = v415[5];
    v417 = &v410[v416];
    v418 = &v411[v416];
    *(_QWORD *)v417 = *(_QWORD *)v418;
    v419 = *((_QWORD *)v418 + 1);
    *((_QWORD *)v417 + 1) = v419;
    v420 = v415[6];
    v421 = &v410[v420];
    v422 = &v411[v420];
    *(_QWORD *)v421 = *(_QWORD *)v422;
    v490 = *((_QWORD *)v422 + 1);
    *((_QWORD *)v421 + 1) = v490;
    v423 = v415[7];
    v424 = &v410[v423];
    v425 = &v411[v423];
    *(_QWORD *)v424 = *(_QWORD *)v425;
    v487 = *((_QWORD *)v425 + 1);
    *((_QWORD *)v424 + 1) = v487;
    *(_QWORD *)&v410[v415[8]] = *(_QWORD *)&v411[v415[8]];
    v426 = v415[9];
    v427 = &v410[v426];
    v428 = &v411[v426];
    *(_QWORD *)v427 = *(_QWORD *)v428;
    v484 = *((_QWORD *)v428 + 1);
    *((_QWORD *)v427 + 1) = v484;
    v429 = v518[13];
    v430 = &v516[v429];
    v431 = &v521[v429];
    *(_QWORD *)v430 = *(_QWORD *)v431;
    v482 = *((_QWORD *)v431 + 1);
    *((_QWORD *)v430 + 1) = v482;
    *((_QWORD *)v430 + 2) = *((_QWORD *)v431 + 2);
    v432 = *((_QWORD *)v431 + 3);
    *((_QWORD *)v430 + 3) = v432;
    *((_QWORD *)v430 + 4) = *((_QWORD *)v431 + 4);
    v433 = *((_QWORD *)v431 + 5);
    *((_QWORD *)v430 + 5) = v433;
    *((_QWORD *)v430 + 6) = *((_QWORD *)v431 + 6);
    v434 = *((_QWORD *)v431 + 7);
    *((_QWORD *)v430 + 7) = v434;
    *((_QWORD *)v430 + 8) = *((_QWORD *)v431 + 8);
    v480 = *((_QWORD *)v431 + 9);
    *((_QWORD *)v430 + 9) = v480;
    *((_QWORD *)v430 + 10) = *((_QWORD *)v431 + 10);
    v435 = *((_QWORD *)v431 + 11);
    *((_QWORD *)v430 + 11) = v435;
    *((_QWORD *)v430 + 12) = *((_QWORD *)v431 + 12);
    v436 = *((_QWORD *)v431 + 13);
    *((_QWORD *)v430 + 13) = v436;
    *((_QWORD *)v430 + 14) = *((_QWORD *)v431 + 14);
    v437 = *((_QWORD *)v431 + 15);
    *((_QWORD *)v430 + 15) = v437;
    *((_QWORD *)v430 + 16) = *((_QWORD *)v431 + 16);
    v438 = *((_QWORD *)v431 + 17);
    *((_QWORD *)v430 + 17) = v438;
    *((_QWORD *)v430 + 18) = *((_QWORD *)v431 + 18);
    v478 = *((_QWORD *)v431 + 19);
    *((_QWORD *)v430 + 19) = v478;
    *((_QWORD *)v430 + 20) = *((_QWORD *)v431 + 20);
    v476 = *((_QWORD *)v431 + 21);
    *((_QWORD *)v430 + 21) = v476;
    *((_QWORD *)v430 + 22) = *((_QWORD *)v431 + 22);
    v474 = *((_QWORD *)v431 + 23);
    *((_QWORD *)v430 + 23) = v474;
    *((_QWORD *)v430 + 24) = *((_QWORD *)v431 + 24);
    v472 = *((_QWORD *)v431 + 25);
    *((_QWORD *)v430 + 25) = v472;
    *((_QWORD *)v430 + 26) = *((_QWORD *)v431 + 26);
    *((_QWORD *)v430 + 27) = *((_QWORD *)v431 + 27);
    v439 = *((_QWORD *)v431 + 28);
    *((_QWORD *)v430 + 28) = v439;
    v440 = v518[14];
    v470 = &v516[v440];
    v441 = &v521[v440];
    swift_bridgeObjectRetain(v419);
    swift_bridgeObjectRetain(v490);
    swift_bridgeObjectRetain(v487);
    swift_bridgeObjectRetain(v484);
    swift_bridgeObjectRetain(v482);
    swift_bridgeObjectRetain(v432);
    swift_bridgeObjectRetain(v433);
    swift_bridgeObjectRetain(v434);
    swift_bridgeObjectRetain(v480);
    swift_bridgeObjectRetain(v435);
    swift_bridgeObjectRetain(v436);
    swift_bridgeObjectRetain(v437);
    swift_bridgeObjectRetain(v438);
    swift_bridgeObjectRetain(v478);
    swift_bridgeObjectRetain(v476);
    swift_bridgeObjectRetain(v474);
    swift_bridgeObjectRetain(v472);
    v442 = swift_bridgeObjectRetain(v439);
    v499(v470, v441, v514, v442);
    v443 = *(int *)(v510 + 20);
    v444 = &v470[v443];
    v445 = &v441[v443];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v441[v443], 1, v496))
    {
      v446 = sub_1000BA294(&qword_100BC3370);
      memcpy(v444, v445, *(_QWORD *)(*(_QWORD *)(v446 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v496 - 8) + 16))(v444, v445, v496);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v444, 0, 1, v496);
    }
    v447 = *(int *)(v510 + 24);
    v448 = &v470[v447];
    v449 = &v441[v447];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v441[v447], 1, v493))
    {
      v450 = sub_1000BA294(&qword_100BC3378);
      memcpy(v448, v449, *(_QWORD *)(*(_QWORD *)(v450 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v493 - 8) + 16))(v448, v449, v493);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v448, 0, 1, v493);
    }
    v451 = v518[15];
    v452 = &v516[v451];
    v453 = &v521[v451];
    *(_QWORD *)v452 = *(_QWORD *)v453;
    v454 = *((_QWORD *)v453 + 1);
    *((_QWORD *)v452 + 1) = v454;
    *((_QWORD *)v452 + 2) = *((_QWORD *)v453 + 2);
    v455 = *((_QWORD *)v453 + 3);
    *((_QWORD *)v452 + 3) = v455;
    *((_QWORD *)v452 + 4) = *((_QWORD *)v453 + 4);
    v456 = *((_QWORD *)v453 + 5);
    *((_QWORD *)v452 + 5) = v456;
    *((_QWORD *)v452 + 6) = *((_QWORD *)v453 + 6);
    v457 = *((_QWORD *)v453 + 7);
    *((_QWORD *)v452 + 7) = v457;
    *((_QWORD *)v452 + 8) = *((_QWORD *)v453 + 8);
    v458 = *((_QWORD *)v453 + 9);
    *((_QWORD *)v452 + 9) = v458;
    *((_QWORD *)v452 + 10) = *((_QWORD *)v453 + 10);
    v459 = *((_QWORD *)v453 + 11);
    *((_QWORD *)v452 + 11) = v459;
    *((_QWORD *)v452 + 12) = *((_QWORD *)v453 + 12);
    v460 = *((_QWORD *)v453 + 13);
    *((_QWORD *)v452 + 13) = v460;
    v461 = *(int *)(v502 + 64);
    v522 = (uint64_t *)&v512[v461];
    v462 = (_QWORD *)((char *)v506 + v461);
    v463 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain(v454);
    swift_bridgeObjectRetain(v455);
    swift_bridgeObjectRetain(v456);
    swift_bridgeObjectRetain(v457);
    swift_bridgeObjectRetain(v458);
    swift_bridgeObjectRetain(v459);
    swift_bridgeObjectRetain(v460);
    if (swift_getEnumCaseMultiPayload(v462) == 1)
    {
      v464 = *v462;
      v465 = v522;
      *v522 = *v462;
      swift_bridgeObjectRetain(v464);
      v466 = 1;
    }
    else
    {
      v467 = type metadata accessor for News(0);
      v465 = v522;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v467 - 8) + 16))(v522, v462, v467);
      v466 = 0;
    }
    swift_storeEnumTagMultiPayload(v465, v463, v466);
    v101 = v512;
    v102 = v504;
    v103 = 1;
    goto LABEL_145;
  }
  sub_1000215BC((uint64_t)v74, type metadata accessor for LocationWeatherDataState);
LABEL_40:
  v83 = *(_QWORD *)(sub_1000BA294(&qword_100BC3380) - 8);
LABEL_41:
  memcpy(v74, v75, *(_QWORD *)(v83 + 64));
  return a1;
}

char *sub_1001683D8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t active;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  int *v160;
  char *v161;
  void (*v162)(char *, char *, uint64_t);
  uint64_t v163;
  char *v164;

  v6 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    active = type metadata accessor for LocationViewerActiveLocationState(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for CurrentLocation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_1000BA294((uint64_t *)&unk_100C0D170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_15;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14);
  if (EnumCaseMultiPayload == 2)
  {
    v22 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v13, v14, v22);
    v19 = v13;
    v20 = v15;
    v21 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v23 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v13, v14, v23);
    v19 = v13;
    v20 = v15;
    v21 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_14;
    }
    v18 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
    v19 = v13;
    v20 = v15;
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v20, v21);
LABEL_14:
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
LABEL_15:
  v24 = (int *)type metadata accessor for LocationsState(0);
  *(_QWORD *)&v13[v24[5]] = *(_QWORD *)&v14[v24[5]];
  *(_QWORD *)&v13[v24[6]] = *(_QWORD *)&v14[v24[6]];
  *(_QWORD *)&v13[v24[7]] = *(_QWORD *)&v14[v24[7]];
  *(_QWORD *)&v13[v24[8]] = *(_QWORD *)&v14[v24[8]];
  *(_QWORD *)&v13[v24[9]] = *(_QWORD *)&v14[v24[9]];
  *(_QWORD *)&v13[v24[10]] = *(_QWORD *)&v14[v24[10]];
  *(_QWORD *)&v13[v24[11]] = *(_QWORD *)&v14[v24[11]];
  v25 = v24[12];
  v26 = &v13[v25];
  v27 = &v14[v25];
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v27[16];
  *(_QWORD *)&v13[v24[13]] = *(_QWORD *)&v14[v24[13]];
  v28 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v28] = a2[v28];
  v29 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = type metadata accessor for Date(0);
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  v34 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[v34] = *(_QWORD *)&a2[v34];
  v35 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  a1[v35] = a2[v35];
  v36 = a3[17];
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  a1[v36] = a2[v36];
  v37 = a3[18];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = type metadata accessor for LocationWeatherDataState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v40))
  {
    v42 = swift_getEnumCaseMultiPayload(v39);
    if (v42 == 1)
    {
      v162 = v33;
      *(_OWORD *)v38 = *(_OWORD *)v39;
      v44 = (int *)type metadata accessor for WeatherData(0);
      v45 = v44[5];
      v46 = &v38[v45];
      v47 = &v39[v45];
      v48 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v48))
      {
        v49 = sub_1000BA294(&qword_100BC3340);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v46, 0, 1, v48);
      }
      v54 = v44[6];
      v55 = &v38[v54];
      v56 = &v39[v54];
      v57 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
      v58 = v44[7];
      v59 = &v38[v58];
      v60 = &v39[v58];
      v61 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v61))
      {
        v62 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v162(v59, v60, v32);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v61);
      }
      v63 = v44[8];
      v64 = &v38[v63];
      v65 = &v39[v63];
      v66 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v65) == 1)
      {
        v67 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v64, v65, v67);
        swift_storeEnumTagMultiPayload(v64, v66, 1);
      }
      else
      {
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      v68 = v44[9];
      v69 = &v38[v68];
      v70 = &v39[v68];
      v71 = type metadata accessor for WeatherDataOverrides(0);
      v157 = v40;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71))
      {
        v72 = sub_1000BA294(&qword_100BC3350);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v32))
        {
          v73 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          v162(v69, v70, v32);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v32);
        }
        v74 = *(int *)(v71 + 20);
        v75 = &v69[v74];
        v76 = &v70[v74];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v32))
        {
          v77 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          v162(v75, v76, v32);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v32);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
      }
      v156 = sub_1000BA294(&qword_100BC3358);
      v78 = *(int *)(v156 + 48);
      v158 = v38;
      v79 = &v38[v78];
      v80 = &v39[v78];
      v81 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
      v82 = (int *)type metadata accessor for PreprocessedWeatherData(0);
      *(_QWORD *)&v79[v82[5]] = *(_QWORD *)&v80[v82[5]];
      v83 = v82[6];
      v161 = v79;
      v84 = &v79[v83];
      v164 = v80;
      v85 = &v80[v83];
      v86 = *(_OWORD *)&v80[v83 + 16];
      *(_OWORD *)v84 = *(_OWORD *)&v80[v83];
      *((_OWORD *)v84 + 1) = v86;
      *((_OWORD *)v84 + 2) = *(_OWORD *)&v80[v83 + 32];
      v87 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v88 = *(int *)(v87 + 28);
      v89 = &v84[v88];
      v90 = &v85[v88];
      v91 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      v160 = v82;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v90, 1, v91))
      {
        v92 = sub_1000BA294(&qword_100BC3360);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v89 = *(_OWORD *)v90;
        v93 = *(int *)(v91 + 20);
        v94 = &v89[v93];
        v95 = &v90[v93];
        v96 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v94, v95, v96);
        v97 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v94[v97[5]] = *(_QWORD *)&v95[v97[5]];
        *(_QWORD *)&v94[v97[6]] = *(_QWORD *)&v95[v97[6]];
        *(_QWORD *)&v94[v97[7]] = *(_QWORD *)&v95[v97[7]];
        *(_OWORD *)&v94[v97[8]] = *(_OWORD *)&v95[v97[8]];
        v94[v97[9]] = v95[v97[9]];
        v82 = v160;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v89, 0, 1, v91);
      }
      *(_OWORD *)&v84[*(int *)(v87 + 32)] = *(_OWORD *)&v85[*(int *)(v87 + 32)];
      v98 = v82[7];
      v99 = &v161[v98];
      v100 = &v164[v98];
      *(_QWORD *)&v161[v98] = *(_QWORD *)&v164[v98];
      v101 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v102 = &v99[v101];
      v103 = &v100[v101];
      v104 = type metadata accessor for WeatherDescription(0);
      v154 = v104;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
      {
        v105 = sub_1000BA294(&qword_100BC3368);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v102, v103, v104);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
      }
      v106 = v82[8];
      v107 = &v161[v106];
      v108 = &v164[v106];
      v109 = *(_OWORD *)&v164[v106 + 16];
      *(_OWORD *)v107 = *(_OWORD *)&v164[v106];
      *((_OWORD *)v107 + 1) = v109;
      v110 = *(_OWORD *)&v164[v106 + 48];
      *((_OWORD *)v107 + 2) = *(_OWORD *)&v164[v106 + 32];
      *((_OWORD *)v107 + 3) = v110;
      v111 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v112 = &v107[v111];
      v113 = &v108[v111];
      v162(&v107[v111], &v108[v111], v32);
      v163 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v114 = *(int *)(v163 + 20);
      v115 = &v112[v114];
      v116 = &v113[v114];
      v117 = type metadata accessor for Elevation(0);
      v155 = v117;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v116, 1, v117))
      {
        v118 = sub_1000BA294(&qword_100BC3370);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v116, v117);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v115, 0, 1, v117);
      }
      v40 = v157;
      v38 = v158;
      v119 = *(int *)(v163 + 24);
      v120 = &v112[v119];
      v121 = &v113[v119];
      v122 = type metadata accessor for BackgroundMoonData(0);
      v159 = v122;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v121, 1, v122))
      {
        v123 = sub_1000BA294(&qword_100BC3378);
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(v120, v121, v122);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, v122);
      }
      memcpy(&v161[v82[9]], &v164[v82[9]], 0x70uLL);
      v124 = v82[10];
      v125 = &v161[v124];
      v126 = &v164[v124];
      (*(void (**)(char *, char *))(*(_QWORD *)(v154 - 8) + 32))(&v161[v124], &v164[v124]);
      v127 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      *(_OWORD *)&v125[*(int *)(v127 + 20)] = *(_OWORD *)&v126[*(int *)(v127 + 20)];
      v128 = v82[11];
      v129 = &v161[v128];
      v130 = &v164[v128];
      v131 = *((_OWORD *)v130 + 1);
      *(_OWORD *)v129 = *(_OWORD *)v130;
      *((_OWORD *)v129 + 1) = v131;
      *((_OWORD *)v129 + 2) = *((_OWORD *)v130 + 2);
      v132 = v82[12];
      v133 = &v161[v132];
      v134 = &v164[v132];
      v135 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 32))(v133, v134, v135);
      v136 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      *(_OWORD *)&v133[v136[5]] = *(_OWORD *)&v134[v136[5]];
      *(_OWORD *)&v133[v136[6]] = *(_OWORD *)&v134[v136[6]];
      *(_OWORD *)&v133[v136[7]] = *(_OWORD *)&v134[v136[7]];
      *(_QWORD *)&v133[v136[8]] = *(_QWORD *)&v134[v136[8]];
      *(_OWORD *)&v133[v136[9]] = *(_OWORD *)&v134[v136[9]];
      memcpy(&v161[v82[13]], &v164[v82[13]], 0xE8uLL);
      v137 = v82[14];
      v138 = &v161[v137];
      v139 = &v164[v137];
      v162(&v161[v137], &v164[v137], v32);
      v140 = *(int *)(v163 + 20);
      v141 = &v138[v140];
      v142 = &v139[v140];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v139[v140], 1, v155))
      {
        v143 = sub_1000BA294(&qword_100BC3370);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v141, v142, v155);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v141, 0, 1, v155);
      }
      v144 = *(int *)(v163 + 24);
      v145 = &v138[v144];
      v146 = &v139[v144];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v146, 1, v159))
      {
        v147 = sub_1000BA294(&qword_100BC3378);
        memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v145, v146, v159);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v145, 0, 1, v159);
      }
      memcpy(&v161[v160[15]], &v164[v160[15]], 0x70uLL);
      v148 = *(int *)(v156 + 64);
      v149 = &v38[v148];
      v150 = &v39[v148];
      v151 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v150))
      {
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        v152 = type metadata accessor for News(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v149, v150, v152);
        swift_storeEnumTagMultiPayload(v149, v151, 0);
      }
      v51 = v38;
      v52 = v157;
      v53 = 1;
    }
    else
    {
      if (v42)
      {
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
LABEL_65:
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, v40);
        return a1;
      }
      v43 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v39))
      {
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v50 = type metadata accessor for News(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v38, v39, v50);
        swift_storeEnumTagMultiPayload(v38, v43, 0);
      }
      v51 = v38;
      v52 = v40;
      v53 = 0;
    }
    swift_storeEnumTagMultiPayload(v51, v52, v53);
    goto LABEL_65;
  }
  v41 = sub_1000BA294(&qword_100BC3380);
  memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  return a1;
}

char *sub_100169108(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t active;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  __int128 v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  int *v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  __int128 v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  int *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void (*v291)(char *, char *, uint64_t);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  int *v305;
  int *v306;
  char *v307;
  char *v308;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    active = type metadata accessor for LocationViewerActiveLocationState(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for CurrentLocation(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v18);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17);
      if (EnumCaseMultiPayload == 2)
      {
        v32 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v16, v17, v32);
        v23 = v16;
        v24 = v18;
        v25 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v33 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v16, v17, v33);
        v23 = v16;
        v24 = v18;
        v25 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          goto LABEL_27;
        }
        v22 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v16, v17, v22);
        v23 = v16;
        v24 = v18;
        v25 = 0;
      }
      swift_storeEnumTagMultiPayload(v23, v24, v25);
LABEL_27:
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  if (v20)
  {
    sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
LABEL_15:
    v26 = *(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100C0D170) - 8);
LABEL_16:
    memcpy(v16, v17, *(_QWORD *)(v26 + 64));
    goto LABEL_31;
  }
  if (a1 == a2)
    goto LABEL_31;
  sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  v27 = swift_getEnumCaseMultiPayload(v17);
  if (v27 == 2)
  {
    v34 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v16, v17, v34);
    v29 = v16;
    v30 = v18;
    v31 = 2;
  }
  else if (v27 == 1)
  {
    v35 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v16, v17, v35);
    v29 = v16;
    v30 = v18;
    v31 = 1;
  }
  else
  {
    if (v27)
    {
      v26 = *(_QWORD *)(v18 - 8);
      goto LABEL_16;
    }
    v28 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v16, v17, v28);
    v29 = v16;
    v30 = v18;
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v30, v31);
LABEL_31:
  v36 = (int *)type metadata accessor for LocationsState(0);
  *(_QWORD *)&v16[v36[5]] = *(_QWORD *)&v17[v36[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[v36[6]] = *(_QWORD *)&v17[v36[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[v36[7]] = *(_QWORD *)&v17[v36[7]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[v36[8]] = *(_QWORD *)&v17[v36[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[v36[9]] = *(_QWORD *)&v17[v36[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[v36[10]] = *(_QWORD *)&v17[v36[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v16[v36[11]] = *(_QWORD *)&v17[v36[11]];
  swift_bridgeObjectRelease();
  v37 = v36[12];
  v38 = &v16[v37];
  v39 = &v17[v37];
  v40 = v39[16];
  v41 = *(_QWORD *)v38;
  v42 = *((_QWORD *)v38 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v43 = v38[16];
  v38[16] = v40;
  sub_1001639C8(v41, v42, v43);
  *(_QWORD *)&v16[v36[13]] = *(_QWORD *)&v17[v36[13]];
  swift_bridgeObjectRelease();
  v44 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v44] = a2[v44];
  v45 = a3[10];
  v46 = &a1[v45];
  v47 = &a2[v45];
  *v46 = *v47;
  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  swift_bridgeObjectRelease();
  v48 = a3[11];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v51 - 8);
  (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v49, v50, v51);
  v53 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[v53] = *(_QWORD *)&a2[v53];
  v54 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  a1[v54] = a2[v54];
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  swift_bridgeObjectRelease();
  v55 = a3[18];
  a1[a3[17]] = a2[a3[17]];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = type metadata accessor for LocationWeatherDataState(0);
  v59 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v58);
  v60 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 1, v58);
  if (v59)
  {
    if (!v60)
    {
      v61 = swift_getEnumCaseMultiPayload(v57);
      if (v61 == 1)
      {
        *(_OWORD *)v56 = *(_OWORD *)v57;
        v66 = (int *)type metadata accessor for WeatherData(0);
        v67 = v66[5];
        v68 = &v56[v67];
        v69 = &v57[v67];
        v70 = type metadata accessor for Locale(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
        {
          v71 = sub_1000BA294(&qword_100BC3340);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
        }
        v82 = v66[6];
        v83 = &v56[v82];
        v84 = &v57[v82];
        v85 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
        v86 = v66[7];
        v87 = &v56[v86];
        v88 = &v57[v86];
        v89 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v88, 1, v89))
        {
          v90 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v87, v88, v51);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v87, 0, 1, v89);
        }
        v91 = v66[8];
        v92 = &v56[v91];
        v93 = &v57[v91];
        v94 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        if (swift_getEnumCaseMultiPayload(v93) == 1)
        {
          v95 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v92, v93, v95);
          swift_storeEnumTagMultiPayload(v92, v94, 1);
        }
        else
        {
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        v96 = v66[9];
        v97 = &v56[v96];
        v98 = &v57[v96];
        v99 = type metadata accessor for WeatherDataOverrides(0);
        v296 = v58;
        v298 = v52;
        v303 = v51;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v98, 1, v99))
        {
          v100 = sub_1000BA294(&qword_100BC3350);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v98, 1, v51))
          {
            v101 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v97, v98, v51);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v97, 0, 1, v51);
          }
          v115 = *(int *)(v99 + 20);
          v116 = &v97[v115];
          v117 = &v98[v115];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v51))
          {
            v118 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v116, v117, v51);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v51);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v97, 0, 1, v99);
        }
        v292 = sub_1000BA294(&qword_100BC3358);
        v129 = *(int *)(v292 + 48);
        v130 = &v56[v129];
        v131 = &v57[v129];
        v132 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 32))(v130, v131, v132);
        v133 = type metadata accessor for PreprocessedWeatherData(0);
        *(_QWORD *)&v130[*(int *)(v133 + 20)] = *(_QWORD *)&v131[*(int *)(v133 + 20)];
        v305 = (int *)v133;
        v307 = v131;
        v134 = *(int *)(v133 + 24);
        v301 = v130;
        v135 = &v130[v134];
        v136 = &v131[v134];
        v137 = *((_OWORD *)v136 + 1);
        *(_OWORD *)v135 = *(_OWORD *)v136;
        *((_OWORD *)v135 + 1) = v137;
        *((_OWORD *)v135 + 2) = *((_OWORD *)v136 + 2);
        v138 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
        v139 = *(int *)(v138 + 28);
        v140 = &v135[v139];
        v141 = &v136[v139];
        v142 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v141, 1, v142))
        {
          v143 = sub_1000BA294(&qword_100BC3360);
          memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v140 = *(_OWORD *)v141;
          v144 = *(int *)(v142 + 20);
          v145 = &v140[v144];
          v146 = &v141[v144];
          v147 = type metadata accessor for TemperatureScaleConfiguration(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 32))(v145, v146, v147);
          v148 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
          *(_QWORD *)&v145[v148[5]] = *(_QWORD *)&v146[v148[5]];
          *(_QWORD *)&v145[v148[6]] = *(_QWORD *)&v146[v148[6]];
          *(_QWORD *)&v145[v148[7]] = *(_QWORD *)&v146[v148[7]];
          *(_OWORD *)&v145[v148[8]] = *(_OWORD *)&v146[v148[8]];
          v145[v148[9]] = v146[v148[9]];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v140, 0, 1, v142);
        }
        *(_OWORD *)&v135[*(int *)(v138 + 32)] = *(_OWORD *)&v136[*(int *)(v138 + 32)];
        v149 = v305[7];
        v150 = &v301[v149];
        v151 = &v307[v149];
        *(_QWORD *)&v301[v149] = *(_QWORD *)&v307[v149];
        v152 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
        v153 = &v150[v152];
        v154 = &v151[v152];
        v155 = type metadata accessor for WeatherDescription(0);
        v294 = v155;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v154, 1, v155))
        {
          v156 = sub_1000BA294(&qword_100BC3368);
          memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v153, v154, v155);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v153, 0, 1, v155);
        }
        v157 = v305[8];
        v158 = &v301[v157];
        v159 = &v307[v157];
        v160 = *(_OWORD *)&v307[v157 + 16];
        *(_OWORD *)v158 = *(_OWORD *)&v307[v157];
        *((_OWORD *)v158 + 1) = v160;
        v161 = *(_OWORD *)&v307[v157 + 48];
        *((_OWORD *)v158 + 2) = *(_OWORD *)&v307[v157 + 32];
        *((_OWORD *)v158 + 3) = v161;
        v162 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
        v163 = &v158[v162];
        v164 = &v159[v162];
        v165 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
        v165(&v158[v162], v164, v303);
        v166 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
        v167 = *(int *)(v166 + 20);
        v168 = &v163[v167];
        v169 = &v164[v167];
        v170 = type metadata accessor for Elevation(0);
        v300 = v170;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v169, 1, v170))
        {
          v171 = sub_1000BA294(&qword_100BC3370);
          memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32))(v168, v169, v170);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v168, 0, 1, v170);
        }
        v58 = v296;
        v172 = *(int *)(v166 + 24);
        v173 = &v163[v172];
        v174 = &v164[v172];
        v175 = type metadata accessor for BackgroundMoonData(0);
        v290 = v175;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v174, 1, v175))
        {
          v176 = sub_1000BA294(&qword_100BC3378);
          memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 32))(v173, v174, v175);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v173, 0, 1, v175);
        }
        memcpy(&v301[v305[9]], &v307[v305[9]], 0x70uLL);
        v177 = v305[10];
        v178 = &v301[v177];
        v179 = &v307[v177];
        (*(void (**)(char *, char *))(*(_QWORD *)(v294 - 8) + 32))(&v301[v177], &v307[v177]);
        v180 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
        *(_OWORD *)&v178[*(int *)(v180 + 20)] = *(_OWORD *)&v179[*(int *)(v180 + 20)];
        v181 = v305[11];
        v182 = &v301[v181];
        v183 = &v307[v181];
        v184 = *((_OWORD *)v183 + 1);
        *(_OWORD *)v182 = *(_OWORD *)v183;
        *((_OWORD *)v182 + 1) = v184;
        *((_OWORD *)v182 + 2) = *((_OWORD *)v183 + 2);
        v185 = v305[12];
        v186 = &v301[v185];
        v187 = &v307[v185];
        v188 = type metadata accessor for PressureTrend(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32))(v186, v187, v188);
        v189 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
        *(_OWORD *)&v186[v189[5]] = *(_OWORD *)&v187[v189[5]];
        *(_OWORD *)&v186[v189[6]] = *(_OWORD *)&v187[v189[6]];
        *(_OWORD *)&v186[v189[7]] = *(_OWORD *)&v187[v189[7]];
        *(_QWORD *)&v186[v189[8]] = *(_QWORD *)&v187[v189[8]];
        *(_OWORD *)&v186[v189[9]] = *(_OWORD *)&v187[v189[9]];
        memcpy(&v301[v305[13]], &v307[v305[13]], 0xE8uLL);
        v190 = v305[14];
        v191 = &v301[v190];
        v192 = &v307[v190];
        v165(&v301[v190], &v307[v190], v303);
        v193 = *(int *)(v166 + 20);
        v194 = &v191[v193];
        v195 = &v192[v193];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v192[v193], 1, v300))
        {
          v196 = sub_1000BA294(&qword_100BC3370);
          memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v300 - 8) + 32))(v194, v195, v300);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v194, 0, 1, v300);
        }
        v197 = *(int *)(v166 + 24);
        v198 = &v191[v197];
        v199 = &v192[v197];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v199, 1, v290))
        {
          v200 = sub_1000BA294(&qword_100BC3378);
          memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v290 - 8) + 32))(v198, v199, v290);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v198, 0, 1, v290);
        }
        memcpy(&v301[v305[15]], &v307[v305[15]], 0x70uLL);
        v201 = *(int *)(v292 + 64);
        v202 = &v56[v201];
        v203 = &v57[v201];
        v204 = type metadata accessor for NewsDataModel(0);
        if (swift_getEnumCaseMultiPayload(v203))
        {
          memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
        }
        else
        {
          v205 = type metadata accessor for News(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 32))(v202, v203, v205);
          swift_storeEnumTagMultiPayload(v202, v204, 0);
        }
        v73 = v56;
        v74 = v296;
        v75 = 1;
      }
      else
      {
        if (v61)
        {
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
LABEL_105:
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v58);
          return a1;
        }
        v62 = type metadata accessor for NewsDataModel(0);
        if (swift_getEnumCaseMultiPayload(v57))
        {
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          v72 = type metadata accessor for News(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v56, v57, v72);
          swift_storeEnumTagMultiPayload(v56, v62, 0);
        }
        v73 = v56;
        v74 = v58;
        v75 = 0;
      }
      swift_storeEnumTagMultiPayload(v73, v74, v75);
      goto LABEL_105;
    }
  }
  else
  {
    if (!v60)
    {
      if (a1 == a2)
        return a1;
      sub_1000215BC((uint64_t)v56, type metadata accessor for LocationWeatherDataState);
      v64 = swift_getEnumCaseMultiPayload(v57);
      if (v64 == 1)
      {
        *(_OWORD *)v56 = *(_OWORD *)v57;
        v76 = (int *)type metadata accessor for WeatherData(0);
        v77 = v76[5];
        v78 = &v56[v77];
        v79 = &v57[v77];
        v80 = type metadata accessor for Locale(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v79, 1, v80))
        {
          v81 = sub_1000BA294(&qword_100BC3340);
          memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v78, 0, 1, v80);
        }
        v106 = v76[6];
        v107 = &v56[v106];
        v108 = &v57[v106];
        v109 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
        v110 = v76[7];
        v111 = &v56[v110];
        v112 = &v57[v110];
        v113 = sub_1000BA294(&qword_100BC3348);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v112, 1, v113))
        {
          v114 = type metadata accessor for WeatherData.CachingState(0);
          memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v111, v112, v51);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, v113);
        }
        v119 = v76[8];
        v120 = &v56[v119];
        v121 = &v57[v119];
        v122 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        if (swift_getEnumCaseMultiPayload(v121) == 1)
        {
          v123 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v120, v121, v123);
          swift_storeEnumTagMultiPayload(v120, v122, 1);
        }
        else
        {
          memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        v124 = v76[9];
        v125 = &v56[v124];
        v126 = &v57[v124];
        v127 = type metadata accessor for WeatherDataOverrides(0);
        v297 = v58;
        v299 = v52;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v126, 1, v127))
        {
          v128 = sub_1000BA294(&qword_100BC3350);
          memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
        }
        else
        {
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v126, 1, v51))
          {
            v207 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v125, v126, v51);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v125, 0, 1, v51);
          }
          v208 = *(int *)(v127 + 20);
          v209 = &v125[v208];
          v210 = &v126[v208];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v210, 1, v51))
          {
            v211 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
            memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v209, v210, v51);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v209, 0, 1, v51);
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v125, 0, 1, v127);
        }
        v295 = sub_1000BA294(&qword_100BC3358);
        v212 = *(int *)(v295 + 48);
        v213 = &v56[v212];
        v214 = &v57[v212];
        v215 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 32))(v213, v214, v215);
        v216 = type metadata accessor for PreprocessedWeatherData(0);
        *(_QWORD *)&v213[*(int *)(v216 + 20)] = *(_QWORD *)&v214[*(int *)(v216 + 20)];
        v306 = (int *)v216;
        v308 = v214;
        v217 = *(int *)(v216 + 24);
        v302 = v213;
        v218 = &v213[v217];
        v219 = &v214[v217];
        v220 = *(_OWORD *)&v214[v217 + 16];
        *(_OWORD *)v218 = *(_OWORD *)&v214[v217];
        *((_OWORD *)v218 + 1) = v220;
        *((_OWORD *)v218 + 2) = *(_OWORD *)&v214[v217 + 32];
        v221 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
        v222 = *(int *)(v221 + 28);
        v223 = &v218[v222];
        v224 = &v219[v222];
        v225 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
        v304 = v51;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v224, 1, v225))
        {
          v226 = sub_1000BA294(&qword_100BC3360);
          memcpy(v223, v224, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v223 = *(_OWORD *)v224;
          v227 = *(int *)(v225 + 20);
          v228 = v221;
          v229 = &v223[v227];
          v230 = &v224[v227];
          v231 = type metadata accessor for TemperatureScaleConfiguration(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v231 - 8) + 32))(v229, v230, v231);
          v232 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
          *(_QWORD *)&v229[v232[5]] = *(_QWORD *)&v230[v232[5]];
          *(_QWORD *)&v229[v232[6]] = *(_QWORD *)&v230[v232[6]];
          *(_QWORD *)&v229[v232[7]] = *(_QWORD *)&v230[v232[7]];
          *(_OWORD *)&v229[v232[8]] = *(_OWORD *)&v230[v232[8]];
          v229[v232[9]] = v230[v232[9]];
          v221 = v228;
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v223, 0, 1, v225);
        }
        *(_OWORD *)&v218[*(int *)(v221 + 32)] = *(_OWORD *)&v219[*(int *)(v221 + 32)];
        v233 = v306[7];
        v234 = &v302[v233];
        v235 = &v308[v233];
        *(_QWORD *)&v302[v233] = *(_QWORD *)&v308[v233];
        v236 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
        v237 = &v234[v236];
        v238 = &v235[v236];
        v239 = type metadata accessor for WeatherDescription(0);
        v289 = v239;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v238, 1, v239))
        {
          v240 = sub_1000BA294(&qword_100BC3368);
          memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v239 - 8) + 32))(v237, v238, v239);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v237, 0, 1, v239);
        }
        v241 = v306[8];
        v242 = &v302[v241];
        v243 = &v308[v241];
        v244 = *(_OWORD *)&v308[v241 + 16];
        *(_OWORD *)v242 = *(_OWORD *)&v308[v241];
        *((_OWORD *)v242 + 1) = v244;
        v245 = *(_OWORD *)&v308[v241 + 48];
        *((_OWORD *)v242 + 2) = *(_OWORD *)&v308[v241 + 32];
        *((_OWORD *)v242 + 3) = v245;
        v246 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
        v247 = &v242[v246];
        v248 = &v243[v246];
        v291 = *(void (**)(char *, char *, uint64_t))(v299 + 32);
        v291(&v242[v246], &v243[v246], v304);
        v249 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
        v250 = *(int *)(v249 + 20);
        v251 = &v247[v250];
        v252 = &v248[v250];
        v253 = type metadata accessor for Elevation(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v252, 1, v253))
        {
          v254 = sub_1000BA294(&qword_100BC3370);
          memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v254 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v253 - 8) + 32))(v251, v252, v253);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v251, 0, 1, v253);
        }
        v255 = *(int *)(v249 + 24);
        v256 = &v247[v255];
        v257 = &v248[v255];
        v258 = type metadata accessor for BackgroundMoonData(0);
        v293 = v258;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v257, 1, v258))
        {
          v259 = sub_1000BA294(&qword_100BC3378);
          memcpy(v256, v257, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v258 - 8) + 32))(v256, v257, v258);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v256, 0, 1, v258);
        }
        memcpy(&v302[v306[9]], &v308[v306[9]], 0x70uLL);
        v260 = v306[10];
        v261 = &v302[v260];
        v262 = &v308[v260];
        (*(void (**)(char *, char *))(*(_QWORD *)(v289 - 8) + 32))(&v302[v260], &v308[v260]);
        v263 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
        *(_OWORD *)&v261[*(int *)(v263 + 20)] = *(_OWORD *)&v262[*(int *)(v263 + 20)];
        v264 = v306[11];
        v265 = &v302[v264];
        v266 = &v308[v264];
        v267 = *((_OWORD *)v266 + 1);
        *(_OWORD *)v265 = *(_OWORD *)v266;
        *((_OWORD *)v265 + 1) = v267;
        *((_OWORD *)v265 + 2) = *((_OWORD *)v266 + 2);
        v268 = v306[12];
        v269 = &v302[v268];
        v270 = &v308[v268];
        v271 = type metadata accessor for PressureTrend(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v271 - 8) + 32))(v269, v270, v271);
        v272 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
        *(_OWORD *)&v269[v272[5]] = *(_OWORD *)&v270[v272[5]];
        *(_OWORD *)&v269[v272[6]] = *(_OWORD *)&v270[v272[6]];
        *(_OWORD *)&v269[v272[7]] = *(_OWORD *)&v270[v272[7]];
        *(_QWORD *)&v269[v272[8]] = *(_QWORD *)&v270[v272[8]];
        *(_OWORD *)&v269[v272[9]] = *(_OWORD *)&v270[v272[9]];
        memcpy(&v302[v306[13]], &v308[v306[13]], 0xE8uLL);
        v273 = v306[14];
        v274 = &v302[v273];
        v275 = &v308[v273];
        v291(&v302[v273], &v308[v273], v304);
        v276 = *(int *)(v249 + 20);
        v277 = &v274[v276];
        v278 = &v275[v276];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v275[v276], 1, v253))
        {
          v279 = sub_1000BA294(&qword_100BC3370);
          memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v253 - 8) + 32))(v277, v278, v253);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v277, 0, 1, v253);
        }
        v280 = *(int *)(v249 + 24);
        v281 = &v274[v280];
        v282 = &v275[v280];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v282, 1, v293))
        {
          v283 = sub_1000BA294(&qword_100BC3378);
          memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v293 - 8) + 32))(v281, v282, v293);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v281, 0, 1, v293);
        }
        memcpy(&v302[v306[15]], &v308[v306[15]], 0x70uLL);
        v284 = *(int *)(v295 + 64);
        v285 = &v56[v284];
        v286 = &v57[v284];
        v287 = type metadata accessor for NewsDataModel(0);
        if (swift_getEnumCaseMultiPayload(v286))
        {
          memcpy(v285, v286, *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64));
        }
        else
        {
          v288 = type metadata accessor for News(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v288 - 8) + 32))(v285, v286, v288);
          swift_storeEnumTagMultiPayload(v285, v287, 0);
        }
        v103 = v56;
        v104 = v297;
        v105 = 1;
      }
      else
      {
        if (v64)
        {
          v63 = *(_QWORD *)(v58 - 8);
          goto LABEL_40;
        }
        v65 = type metadata accessor for NewsDataModel(0);
        if (swift_getEnumCaseMultiPayload(v57))
        {
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          v102 = type metadata accessor for News(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v56, v57, v102);
          swift_storeEnumTagMultiPayload(v56, v65, 0);
        }
        v103 = v56;
        v104 = v58;
        v105 = 0;
      }
      swift_storeEnumTagMultiPayload(v103, v104, v105);
      return a1;
    }
    sub_1000215BC((uint64_t)v56, type metadata accessor for LocationWeatherDataState);
  }
  v63 = *(_QWORD *)(sub_1000BA294(&qword_100BC3380) - 8);
LABEL_40:
  memcpy(v56, v57, *(_QWORD *)(v63 + 64));
  return a1;
}

uint64_t sub_10016A9A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  sub_100098780();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  sub_1000BE878();
  sub_100088FF0();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_17:
    v8 = v4 + v11;
    return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
  }
  type metadata accessor for LocationsState(0);
  sub_100088FF0();
  if (v12)
  {
    v7 = v13;
    v11 = a3[7];
    goto LABEL_17;
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    sub_100098778();
    sub_100088FF0();
    if (v9)
    {
      v7 = v16;
      v11 = a3[11];
    }
    else
    {
      v7 = sub_1000BA294(&qword_100BC3380);
      v11 = a3[18];
    }
    goto LABEL_17;
  }
  v14 = *(_QWORD *)(v4 + a3[10] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

void sub_10016AA84(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_100098780();
  sub_10009D2E8();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    sub_1000BE878();
    sub_10009D2E8();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      type metadata accessor for LocationsState(0);
      sub_10009D2E8();
      if (v14)
      {
        v9 = v15;
        v13 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(v5 + a4[10] + 8) = (v4 - 1);
          return;
        }
        sub_100098778();
        sub_10009D2E8();
        if (v11)
        {
          v9 = v16;
          v13 = a4[11];
        }
        else
        {
          v9 = sub_1000BA294(&qword_100BC3380);
          v13 = a4[18];
        }
      }
    }
    v10 = v5 + v13;
  }
  _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t sub_10016AB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentStatusBanner(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10016ABA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v9 = a2[8];
    *(_QWORD *)(a1 + 64) = v9;
    v10 = *(int *)(a3 + 40);
    v11 = (char *)a2 + v10;
    v12 = (void *)(a1 + v10);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v13 = type metadata accessor for Date(0);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13))
    {
      v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v12, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v11, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v13);
    }
  }
  return v3;
}

uint64_t sub_10016ACE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Date(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t sub_10016AD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(int *)(a3 + 40);
  v10 = (const void *)(a2 + v9);
  v11 = (void *)(a1 + v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = type metadata accessor for Date(0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12))
  {
    v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v11, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, v10, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v12);
  }
  return a1;
}

uint64_t sub_10016AE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(int *)(a3 + 40);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    v17 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v18 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  return a1;
}

uint64_t sub_10016B01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 40);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9))
  {
    v10 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, v7, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_10016B0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(int *)(a3 + 40);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13);
  if (!v14)
  {
    v16 = *(_QWORD *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
  return a1;
}

uint64_t sub_10016B234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016B240);
}

uint64_t sub_10016B240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_10016B2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016B2C4);
}

void sub_10016B2C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 40), a2, a2, v7);
  }
}

uint64_t type metadata accessor for SevereNotificationContent(uint64_t a1)
{
  uint64_t result;

  result = qword_100BC34F0;
  if (!qword_100BC34F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SevereNotificationContent);
  return result;
}

void sub_10016B364(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10097DC30;
  v4[1] = &unk_10097DC30;
  v4[2] = &unk_10097DC30;
  v4[3] = &unk_10097DC30;
  v4[4] = &unk_10097DC48;
  v4[5] = &unk_10097DC60;
  sub_10015BB24(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_10016B3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  sub_1000BA294(&qword_100BC30B8);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  type metadata accessor for Tips.Status(0);
  sub_10011DAEC();
  __chkstk_darwin(v11);
  sub_100094EC4();
  sub_100088FC8(a1, 1, v2);
  if (v12)
  {
    sub_1000987A0(a1);
    sub_10016CDD0(a2, v10);
    sub_1000987A0(v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, a1, v2);
    sub_10016D5FC(v3, a2);
  }
  sub_10009D300();
}

void sub_10016B4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10011E834((_OWORD *)a1, v5);
    sub_10016D668(v5, a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100021A14(a1, &qword_100C0B800);
    sub_10016CF10(a2, v5);
    swift_bridgeObjectRelease();
    sub_100021A14((uint64_t)v5, &qword_100C0B800);
  }
}

void sub_10016B54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000BA294(&qword_100BC3370);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  type metadata accessor for Elevation(0);
  sub_10011DAEC();
  __chkstk_darwin(v11);
  v12 = sub_1000C1940();
  sub_100088FC8(v12, v13, v2);
  if (v14)
  {
    sub_1000987A0(a1);
    sub_10016D034(v10);
    v15 = sub_100098778();
    sub_10003BC44(v15);
    sub_1000987A0(v10);
  }
  else
  {
    sub_1000F4060(v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    sub_10016D7B8(v3, a2);
    v16 = sub_100098778();
    sub_10003BC44(v16);
  }
  sub_10009D300();
}

void sub_10016B618()
{
  sub_100012124();
}

void sub_10016B634()
{
  sub_10016B66C();
}

void sub_10016B650()
{
  sub_100012124();
}

void sub_10016B66C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000D93C4();
  v14 = v2;
  v15 = v3;
  sub_1000FC5C4();
  v5 = v4;
  sub_1000BA294(v6);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_10009E540();
  sub_100094EF4();
  sub_1000DC0D8();
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  sub_100088FC8(v5, 1, v11);
  if (v12)
  {
    sub_1000987A0(v5);
    sub_10016D2C8();
    sub_1000986E8();
    sub_1000987A0(v1);
  }
  else
  {
    sub_10007802C(v5, (uint64_t)v10, v0);
    sub_10016D830();
    sub_1000986E8();
  }
  sub_100098640();
}

void sub_10016B744(uint64_t a1, uint64_t a2)
{
  sub_10016B77C(a1, a2, &qword_100BC36C8, (uint64_t)type metadata accessor for SunriseSunsetDaylightCalculator.SunActivity, (uint64_t)&unk_100BC36D0);
}

void sub_10016B760(uint64_t a1, uint64_t a2)
{
  sub_10016B77C(a1, a2, &qword_100BC36D8, (uint64_t)type metadata accessor for MonthSunAverage, (uint64_t)&unk_100BC36E0);
}

void sub_10016B77C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1000BA294(a3);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100094EC4();
  sub_1000C0894();
  sub_1000DC0D8();
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - v12;
  sub_100088FC8(a1, 1, v14);
  if (v15)
  {
    sub_10009E47C(a1);
    sub_10016D3F8(v5);
    v16 = sub_100098778();
    sub_10003BC44(v16);
    sub_10009E47C(v5);
  }
  else
  {
    sub_1000B308C(a1, (uint64_t)v13);
    sub_10016D92C(v13, a2, a5, a4);
    v17 = sub_100098778();
    sub_10003BC44(v17);
  }
  sub_10009D300();
}

void sub_10016B858(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v8 = sub_1000BA294(&qword_100BC3548);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098728();
  v25 = type metadata accessor for SevereNotificationContent(0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v15 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v15);
  v16 = sub_10016C5B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SevereNotificationContent.CodingKeys, &type metadata for SevereNotificationContent.CodingKeys, v16, v15, v14);
  if (v2)
  {
    sub_1000CC7B4();
  }
  else
  {
    v31 = 0;
    *(_QWORD *)v13 = sub_100098790((uint64_t)&v31);
    *(_QWORD *)(v13 + 8) = v17;
    v30 = 1;
    *(_QWORD *)(v13 + 16) = sub_100098790((uint64_t)&v30);
    *(_QWORD *)(v13 + 24) = v18;
    v29 = 2;
    *(_QWORD *)(v13 + 32) = sub_100098790((uint64_t)&v29);
    *(_QWORD *)(v13 + 40) = v19;
    v28 = 3;
    *(_QWORD *)(v13 + 48) = sub_100098790((uint64_t)&v28);
    *(_QWORD *)(v13 + 56) = v20;
    v27 = 4;
    *(_BYTE *)(v13 + 72) = KeyedDecodingContainer.decode(_:forKey:)(&v27, v8) & 1;
    v21 = type metadata accessor for Date(0);
    v26 = 7;
    sub_100086DA4(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v26, v8, v21);
    sub_10016C5F4(v7, v13 + *(int *)(v25 + 40));
    sub_10016BBC0();
    v23 = v22;
    sub_1000C5AC8(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    *(_QWORD *)(v13 + 64) = v23;
    sub_10016C63C(v13, a2);
    sub_1000CC7B4();
    sub_10016C680(v13);
  }
}

void sub_10016BBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v6 = 5;
  v1 = sub_1000BA294(&qword_100BC3548);
  v2 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v6, v1);
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v3)
    {
      *((_QWORD *)&v8 + 1) = &type metadata for String;
      *(_QWORD *)&v7 = v2;
      *((_QWORD *)&v7 + 1) = v3;
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    sub_10016B4BC((uint64_t)&v7, 0x6E6F697461636F4CLL, 0xE800000000000000);
    v6 = 6;
    v4 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v6, v1);
    if (v5)
    {
      *((_QWORD *)&v8 + 1) = &type metadata for String;
      *(_QWORD *)&v7 = v4;
      *((_QWORD *)&v7 + 1) = v5;
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    sub_10016B4BC((uint64_t)&v7, 0x55736C6961746544, 0xEA00000000004C52);
  }
}

void sub_10016BD14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  _BYTE v29[32];

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BC3568);
  __chkstk_darwin(v5);
  sub_100098694();
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = sub_10016C5B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SevereNotificationContent.CodingKeys, &type metadata for SevereNotificationContent.CodingKeys, v8, v6, v7);
  v9 = *(_QWORD *)v3;
  v10 = *(_QWORD *)(v3 + 8);
  v29[0] = 0;
  sub_1000DB6E0(v9, v10);
  if (v2)
    goto LABEL_12;
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  v29[0] = 1;
  sub_1000DB6E0(v11, v12);
  v13 = *(_QWORD *)(v3 + 32);
  v14 = *(_QWORD *)(v3 + 40);
  v29[0] = 2;
  sub_1000DB6E0(v13, v14);
  v15 = *(_QWORD *)(v3 + 48);
  v16 = *(_QWORD *)(v3 + 56);
  v29[0] = 3;
  sub_1000DB6E0(v15, v16);
  v17 = *(unsigned __int8 *)(v3 + 72);
  v29[0] = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v17, v29, v5);
  v18 = v3 + *(int *)(type metadata accessor for SevereNotificationContent(0) + 40);
  v29[0] = 7;
  v19 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v20 = sub_10016E888();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v18, v29, v5, v19, v20);
  if (!*(_QWORD *)(v3 + 64))
  {
LABEL_12:
    sub_1000CE4D0();
    return;
  }
  sub_1007D4AFC();
  if (v28)
  {
    v21 = sub_1000BED78();
    if ((sub_1000AE838(v21, v22, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
    {
      v27[0] = 5;
      sub_1000BD908(v25, v26, (uint64_t)v27);
      sub_10009EE2C();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10009EE2C();
    }
  }
  else
  {
    sub_100021A14((uint64_t)v27, &qword_100C0B800);
  }
  sub_1007D4AFC();
  if (v28)
  {
    v23 = sub_1000BED78();
    if ((sub_1000AE838(v23, v24, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
    {
      v27[0] = 6;
      sub_1000BD908(v25, v26, (uint64_t)v27);
      swift_bridgeObjectRelease();
    }
    sub_10009EE2C();
    goto LABEL_12;
  }
  sub_1000CE4D0();
  sub_100021A14((uint64_t)v27, &qword_100C0B800);
}

BOOL static LocationSessionTrigger.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void _s7Weather22LocationSessionTriggerO4hash4intoys6HasherVz_tF_0(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_10016BFF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v17;
  char v19;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x80000001009F0F30;
    if (a2 == 0x80000001009F0F30)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001009F0F30, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x6C61636974697263 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636974697263, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0x55736C6961746564 && a2 == 0xEA00000000004C52)
  {
    v17 = 0xEA00000000004C52;
    goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55736C6961746564, 0xEA00000000004C52, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v17);
    return 6;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEE00656D69546E6FLL)
  {
    swift_bridgeObjectRelease(0xEE00656D69546E6FLL);
    return 7;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEE00656D69546E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_10016C33C()
{
  return 8;
}

Swift::Int sub_10016C344(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t static HeaderLineLimitKey.defaultValue.getter()
{
  return 0;
}

uint64_t sub_10016C394(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016C3C4 + 4 * byte_10097DBF0[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_10016C3C4()
{
  return 0x656C746974627573;
}

uint64_t sub_10016C3DC()
{
  return 2036625250;
}

unint64_t sub_10016C3EC()
{
  return 0xD000000000000010;
}

uint64_t sub_10016C408()
{
  return 0x6C61636974697263;
}

uint64_t sub_10016C420()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10016C438()
{
  return 0x55736C6961746564;
}

uint64_t sub_10016C454()
{
  return 0x6974617269707865;
}

BOOL sub_10016C478(char *a1, char *a2)
{
  return static LocationSessionTrigger.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10016C484()
{
  unsigned __int8 *v0;

  return sub_10016C344(*v0);
}

void sub_10016C48C(uint64_t a1)
{
  unsigned __int8 *v1;

  _s7Weather22LocationSessionTriggerO4hash4intoys6HasherVz_tF_0(a1, *v1);
}

Swift::Int sub_10016C494()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10016C4D4()
{
  unsigned __int8 *v0;

  return sub_10016C394(*v0);
}

uint64_t sub_10016C4DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10016BFF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016C500()
{
  return static HeaderLineLimitKey.defaultValue.getter();
}

uint64_t sub_10016C51C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10016C33C();
  *a1 = result;
  return result;
}

uint64_t sub_10016C540(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016C5B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016C568(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016C5B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10016C590(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10016B858(a1, a2);
}

void sub_10016C5A4(_QWORD *a1)
{
  sub_10016BD14(a1);
}

unint64_t sub_10016C5B8()
{
  unint64_t result;

  result = qword_100BC3550;
  if (!qword_100BC3550)
  {
    result = swift_getWitnessTable(&unk_10097DD8C, &type metadata for SevereNotificationContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BC3550);
  }
  return result;
}

uint64_t sub_10016C5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016C63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SevereNotificationContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016C680(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SevereNotificationContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10016C6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000DF434();
  type metadata accessor for Date(v0);
  sub_1000C1960((unint64_t *)&qword_100BC3588, v1, (uint64_t)&protocol conformance descriptor for Date);
  sub_1000C5174(v2);
  sub_1000C5AB8();
  sub_10004A2A0();
}

unint64_t sub_10016C720(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_10016ED6C(*(_QWORD *)(v1 + 40), a1);
  return sub_10016C954(v3, a1);
}

uint64_t sub_10016C748(uint64_t a1)
{
  return sub_10016C770(a1, (uint64_t (*)(uint64_t))sub_10015F3E0, sub_10016C9EC);
}

uint64_t sub_10016C75C(uint64_t a1)
{
  return sub_10016C770(a1, (uint64_t (*)(uint64_t))&UVIndex.ExposureCategory.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))sub_10016CC30);
}

uint64_t sub_10016C770(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _BYTE v10[72];

  sub_1000D0BF8(a1);
  v5 = a2(a1);
  String.hash(into:)(v10, v5, v6);
  sub_1000986E8();
  v7 = sub_10007A148();
  return a3(a1, v7);
}

uint64_t sub_10016C7E0(uint64_t a1)
{
  Swift::Int v1;
  _BYTE v3[72];

  sub_1000D0BF8(a1);
  String.hash(into:)(v3, 0x6E6F697469736F70, 0xE800000000000000);
  v1 = sub_10007A148();
  return sub_10016CDA4(v1);
}

void sub_10016C828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000DF434();
  type metadata accessor for LocationOfInterestType(v0);
  sub_1000C1960(&qword_100BC3120, v1, (uint64_t)&protocol conformance descriptor for LocationOfInterestType);
  sub_1000C5174(v2);
  sub_1000C5AB8();
  sub_10004A2A0();
}

void sub_10016C88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000DF434();
  type metadata accessor for Location(v0);
  sub_1000C1960(&qword_100BC35B0, v1, (uint64_t)&protocol conformance descriptor for Location);
  sub_1000C5174(v2);
  sub_1000C5AB8();
  sub_10004A2A0();
}

void sub_10016C8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000DF434();
  type metadata accessor for DetailChartCondition(v0);
  sub_1000C1960(&qword_100BC3598, v1, (uint64_t)&protocol conformance descriptor for DetailChartCondition);
  sub_1000C5174(v2);
  sub_1000C5AB8();
  sub_10004A2A0();
}

unint64_t sub_10016C954(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10016C9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10016CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = UVIndex.ExposureCategory.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v5));
    v9 = v8;
    v10 = UVIndex.ExposureCategory.rawValue.getter(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = UVIndex.ExposureCategory.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v5));
          v9 = v17;
          v18 = UVIndex.ExposureCategory.rawValue.getter(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_10016CDA4(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_10016CDD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_10016C770(a1, (uint64_t (*)(uint64_t))sub_10015F3E0, sub_10016C9EC);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16 = *v3;
    v9 = *v3;
    *v3 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    sub_1000BA294(&qword_100BC3678);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    v11 = *(_QWORD *)(v16 + 56);
    v12 = type metadata accessor for Tips.Status(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a2, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v6, v12);
    v13 = sub_100162B54();
    _NativeDictionary._delete(at:)(v6, v16, &type metadata for ListViewTipManager.ListViewTip, v12, v13);
    *v3 = v16;
    swift_bridgeObjectRelease();
    return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, v12);
  }
  else
  {
    v15 = type metadata accessor for Tips.Status(0);
    return _s7Weather24LocationCompositionStateOwst_0(a2, 1, 1, v15);
  }
}

double sub_10016CF10@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v6;
  char v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain(*v2);
  v6 = sub_1000991C8(a1);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v13 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_1000BA294(&qword_100BC3560);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    swift_bridgeObjectRelease();
    sub_10011E834((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v6), a2);
    _NativeDictionary._delete(at:)(v6, v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    *v3 = v13;
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10016D034@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  swift_bridgeObjectRetain(*v1);
  sub_10016C6BC();
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v18 = *v2;
    v9 = *v2;
    *v2 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    sub_1000BA294(&qword_100BC36C0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    v11 = *(_QWORD *)(v18 + 48);
    v12 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v5, v12);
    v13 = *(_QWORD *)(v18 + 56);
    v14 = type metadata accessor for Elevation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v5, v14);
    sub_100086DA4((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    _NativeDictionary._delete(at:)(v5, v18, v12, v14, v15);
    *v2 = v18;
    swift_bridgeObjectRelease();
    return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v14);
  }
  else
  {
    v17 = type metadata accessor for Elevation(0);
    return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v17);
  }
}

double sub_10016D1AC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100006964(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_1000BA294(&qword_100BC3698);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    sub_10011F394(*(_QWORD *)(v14 + 48) + 40 * v7);
    sub_10011E834((_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v7), a2);
    _NativeDictionary._delete(at:)(v7, v14, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v12 = *v3;
    *v3 = v14;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10016D2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  sub_1000D93C4();
  sub_1000DA404();
  sub_10009BE34();
  sub_1000E7678();
  if ((v1 & 1) != 0)
  {
    sub_1000BCF00();
    v3 = sub_1000DD680();
    v11 = sub_10009D314(v3, v4, v5, v6, v7, v8, v9, v10, v27, v29);
    sub_1000CDB78(v11, v12, v13, v14, v15, v16, v17, v18, v28, v30);
    v19 = *(_QWORD *)(v1 + 56);
    v20 = sub_1000C0894();
    sub_1000C652C();
    sub_1000B308C(v19 + v21 * v2, v0);
    _NativeDictionary._delete(at:)(v2, v1, &type metadata for String, v20, &protocol witness table for String);
    sub_100099850();
    v22 = sub_1000CF71C();
    v25 = v20;
  }
  else
  {
    sub_1000C0894();
    v22 = sub_1000C34B8();
  }
  return sub_1000D10BC(v22, v23, v24, v25);
}

uint64_t sub_10016D35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  sub_1000D93C4();
  sub_1000DA404();
  sub_10009BE34();
  sub_1000E7678();
  if ((v1 & 1) != 0)
  {
    sub_1000BCF00();
    v3 = sub_1000DD680();
    v11 = sub_10009D314(v3, v4, v5, v6, v7, v8, v9, v10, v28, v30);
    sub_1000CDB78(v11, v12, v13, v14, v15, v16, v17, v18, v29, v31);
    v19 = *(_QWORD *)(v1 + 56);
    v20 = sub_1000C0894();
    sub_1000C6954();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v0, v19 + v21 * v2, v20);
    _NativeDictionary._delete(at:)(v2, v1, &type metadata for String, v20, &protocol witness table for String);
    sub_100099850();
    v23 = sub_1000CF71C();
    v26 = v20;
  }
  else
  {
    sub_1000C0894();
    v23 = sub_1000C34B8();
  }
  return sub_1000D10BC(v23, v24, v25, v26);
}

uint64_t sub_10016D3F8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_10016C6BC();
  sub_1000E7678();
  if ((v4 & 1) != 0)
  {
    sub_1000BCF00();
    v5 = sub_1000DD680();
    sub_10009D314(v5, v6, v7, v8, v9, v10, v11, v12, v26, v27);
    v13 = *(_QWORD *)(v28 + 48);
    v14 = sub_100098778();
    sub_1000C6954();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13 + v15 * v2, v14);
    v17 = *(_QWORD *)(v28 + 56);
    v18 = sub_1000C0894();
    sub_1000C652C();
    sub_1000B308C(v17 + v19 * v2, a1);
    sub_100086DA4((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    _NativeDictionary._delete(at:)(v2, v28, v14, v18, v20);
    sub_100099850();
    v21 = sub_1000CF71C();
    v24 = v18;
  }
  else
  {
    sub_1000C0894();
    v21 = sub_1000C34B8();
  }
  return _s7Weather24LocationCompositionStateOwst_0(v21, v22, v23, v24);
}

uint64_t sub_10016D508()
{
  uint64_t v0;
  char v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_1000D93C4();
  sub_1000FC444();
  sub_10016C88C();
  sub_1000DC334();
  if ((v1 & 1) == 0)
    return 0;
  sub_10011DC54();
  sub_1000C1270();
  v2 = sub_1000BA294(&qword_100BC35D0);
  sub_1000CFB3C(v2, v3, v4, v5, v6, v7, v8, v9, v18, v19);
  v10 = *(_QWORD *)(v20 + 48);
  v11 = type metadata accessor for Location(0);
  sub_1000C6954();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10 + v12 * v0, v11);
  v14 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v0);
  v15 = sub_1000BA294(&qword_100BC35D8);
  sub_100086DA4(&qword_100BC35B0, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  _NativeDictionary._delete(at:)(v0, v20, v11, v15, v16);
  sub_1000BE700();
  return v14;
}

double sub_10016D5FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_10016D978(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10016D668(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  *v3 = 0x8000000000000000;
  sub_10016DAA8(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *v3 = v9;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10016D6E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;

  sub_1000BD214();
  v0 = sub_1000C1C84();
  v3 = sub_10016DBC4(v0, v1, v2);
  v11 = sub_100099274(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

#error "10016D758: call analysis failed (funcsize=15)"

double sub_10016D764(double a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  uint64_t v15;

  sub_1000BD214();
  v2 = sub_1000C1C84();
  sub_10016DF14(v2, v3, v4, a1);
  sub_100099274(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10016D7B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_10016E024(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10016D824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000FE344(a1, a2, a3, (uint64_t)sub_10016E198, a5, a6, a7, a8, a9, a10);
}

double sub_10016D830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_1000D93C4();
  sub_1000BD214();
  sub_1000D1574();
  sub_10016E380();
  v8 = sub_10009D998(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11);
  return sub_1000C34F8(v8);
}

#error "10016D8A8: call analysis failed (funcsize=15)"

double sub_10016D8B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  sub_1000D93C4();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = sub_1000BD214();
  v25 = *v0;
  *v0 = 0x8000000000000000;
  sub_10016E538(v12, v10, v8, v6, v4, v2, v13);
  v22 = sub_100099274(v14, v15, v16, v17, v18, v19, v20, v21, v24, v25);
  return sub_1000C34F8(v22);
}

#error "10016D96C: call analysis failed (funcsize=19)"

uint64_t sub_10016D978(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_10016C770(a2, (uint64_t (*)(uint64_t))sub_10015F3E0, sub_10016C9EC);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000BA294(&qword_100BC3678);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_10016C770(a2, (uint64_t (*)(uint64_t))sub_10015F3E0, sub_10016C9EC);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ListViewTipManager.ListViewTip);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return sub_10016E794(v14, a2, a1, v18);
  v19 = v18[7];
  v20 = type metadata accessor for Tips.Status(0);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v14, a1, v20);
}

void sub_10016DAA8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1000991C8(a2);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000BA294(&qword_100BC3560);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1000991C8(a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_QWORD *)(v20[7] + 32 * v16);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
    sub_10011E834(a1, v21);
  }
  else
  {
    sub_10016E820(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

uint64_t sub_10016DBC4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  char v17;
  _QWORD *v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1000BFD34(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000BA294(&qword_100BC3580);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = sub_1000BFD34(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return sub_10016E904(v14, a2, a1, v18);
  *(_QWORD *)(v18[7] + 8 * v14) = a1;
  return result;
}

void sub_10016DCB8()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_1000D93C4();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_100098778();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100094EC4();
  sub_10016C6BC();
  sub_1000CC7A0();
  if (v12)
  {
    __break(1u);
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v13 = v10;
  v14 = v11;
  sub_1000BA294(&qword_100BC36E8);
  if (sub_1000ED1F4(v3 & 1))
  {
    sub_10016C6BC();
    sub_1000BDC1C();
    if (!v16)
      goto LABEL_11;
    v13 = v15;
  }
  v17 = *v0;
  if ((v14 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v18 + 8 * v13) = v7;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v5, v8);
    sub_10016ECC4(v13, v1, v7, v17);
  }
  sub_100098640();
}

void sub_10016DDBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v27 = a2;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  sub_10016C6BC();
  v16 = v13[2];
  v17 = (v15 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  v19 = v14;
  v20 = v15;
  sub_1000BA294(&qword_100BC36B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18))
    goto LABEL_5;
  sub_10016C6BC();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v19 = v21;
LABEL_5:
  v23 = *v5;
  if ((v20 & 1) != 0)
  {
    v24 = (uint64_t *)(v23[7] + 16 * v19);
    swift_bridgeObjectRelease();
    v25 = v27;
    *v24 = a1;
    v24[1] = v25;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    sub_10016E948(v19, (uint64_t)v12, a1, v27, v23);
  }
}

void sub_10016DF14(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_10016C720(a4);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000BA294(&qword_100BC36B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v15))
    goto LABEL_5;
  v18 = sub_10016C720(a4);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CGFloat);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *v21 = a1;
    v21[1] = a2;
  }
  else
  {
    sub_10016E9E8(v16, a1, a2, v20, a4);
  }
}

uint64_t sub_10016E024(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  sub_10016C6BC();
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  sub_1000BA294(&qword_100BC36C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  sub_10016C6BC();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    v24 = type metadata accessor for Elevation(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18, a1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_10016EA30(v18, (uint64_t)v11, a1, v22);
  }
}

void sub_10016E198(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1000991C8(a2);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000BA294(&qword_100BC3670);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1000991C8(a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v20[7] + 8 * v16) = a1;
  }
  else
  {
    sub_1000FE4A8(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }
}

void sub_10016E2A4(uint64_t a1, uint64_t a2, char a3)
{
  Swift::Int *v3;
  uint64_t *v4;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = v3;
  v8 = *v3;
  sub_10016C7E0(a1);
  sub_1000CC7A0();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  sub_1000BA294(&qword_100BC35A8);
  v14 = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8);
  if (!v14)
    goto LABEL_5;
  v15 = sub_10016C7E0(v14);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OpenL2DescriptorParamKeys);
    __break(1u);
    return;
  }
  v12 = v15;
LABEL_5:
  v17 = *v4;
  if ((v13 & 1) != 0)
  {
    v18 = (uint64_t *)(*(_QWORD *)(v17 + 56) + 16 * v12);
    swift_bridgeObjectRelease();
    *v18 = a1;
    v18[1] = a2;
    sub_10009D300();
  }
  else
  {
    sub_10016EAE8(v12, a1, a2, v17);
  }
}

void sub_10016E380()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD **v2;
  unint64_t v3;
  char v4;
  char v5;
  void (*v6)(_QWORD);
  void (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000D93C4();
  v7 = v6;
  sub_1000DC84C();
  v9 = v8;
  sub_1000ECED8(v8, v10);
  sub_1000CC7A0();
  if (v11)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  sub_1000EF934();
  if (sub_1000C20CC(v5 & 1))
  {
    sub_1000E7B84();
    sub_1000BDC1C();
    if (!v13)
      goto LABEL_10;
    v3 = v12;
  }
  v14 = *v2;
  if ((v4 & 1) != 0)
  {
    v15 = v14[7];
    v7(0);
    sub_1000C652C();
    sub_1000EDEA8(v9, v15 + v16 * v3, (uint64_t (*)(_QWORD))v7);
    sub_100098640();
  }
  else
  {
    sub_10016EB28(v3, v1, v0, v9, v14, v7);
    sub_1000D1C04(v0);
  }
}

void sub_10016E43C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  unint64_t v23;

  sub_1000F9020(a2, a3);
  sub_1000CC7A0();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  sub_1000BA294(&qword_100BC3610);
  if (!sub_1000ED1F4(a4 & 1))
    goto LABEL_5;
  v14 = sub_1000987A8();
  v16 = sub_1000F9020(v14, v15);
  if ((v13 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ContentStatusBanner.Placement);
    __break(1u);
    return;
  }
  v12 = v16;
LABEL_5:
  v18 = *v4;
  if ((v13 & 1) != 0)
  {
    v19 = *(_QWORD *)(v18 + 56);
    sub_10009985C();
    sub_1000C652C();
    sub_1000EDEA8(a1, v19 + v20 * v12, v21);
    sub_10009D300();
  }
  else
  {
    sub_10016EBA4(v12, a2, a3, a1, v18);
    v22 = sub_1000987A8();
    sub_10013BB0C(v22, v23);
  }
}

void sub_10016E538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  Swift::Int v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v16 = sub_1000991C8(a5);
  v18 = v15[2];
  v19 = (v17 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_9;
  }
  v21 = v16;
  v22 = v17;
  sub_1000BA294(&qword_100BC35E0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a7 & 1, v20))
    goto LABEL_5;
  v23 = sub_1000991C8(a5);
  if ((v22 & 1) != (v24 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v21 = v23;
LABEL_5:
  v25 = *v8;
  if ((v22 & 1) != 0)
  {
    v26 = (uint64_t *)(v25[7] + 32 * v21);
    *v26 = a1;
    v26[1] = a2;
    v26[2] = a3;
    v26[3] = a4;
  }
  else
  {
    sub_10016EBEC(v21, a5, a6, a1, a2, a3, a4, v25);
    swift_bridgeObjectRetain(a6);
  }
}

void sub_10016E680()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD);
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD);

  sub_1000D93C4();
  v20 = v2;
  v21 = v3;
  v5 = v4;
  v7 = v6;
  v8 = sub_100098778();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10009E540();
  sub_10016C6BC();
  sub_1000CC7A0();
  if (v12)
  {
    __break(1u);
    goto LABEL_10;
  }
  v13 = v10;
  v14 = v11;
  sub_1000BA294(v5);
  if (sub_1000C20CC(v7 & 1))
  {
    sub_10016C6BC();
    if ((v14 & 1) == (v16 & 1))
    {
      v13 = v15;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
LABEL_5:
  v17 = *v0;
  if ((v14 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 + 56);
    v21(0);
    sub_1000C652C();
    sub_1000EDEA8(v20, v18 + v19 * v13, (uint64_t (*)(_QWORD))v21);
  }
  else
  {
    sub_1000F4060(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    sub_10016EC3C(v13, v1, v20, v17, v21);
  }
  sub_100098640();
}

uint64_t sub_10016E794(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for Tips.Status(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

_OWORD *sub_10016E820(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10011E834(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_10016E888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC3570;
  if (!qword_100BC3570)
  {
    v1 = sub_100075EB0((uint64_t *)&unk_100BD35A0);
    sub_100086DA4(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BC3570);
  }
  return result;
}

unint64_t sub_10016E904(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_10016E948(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

unint64_t sub_10016E9E8(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(double *)(a4[6] + 8 * result) = a5;
  v5 = (_QWORD *)(a4[7] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10016EA30(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for Elevation(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_10016EAE8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  *(_QWORD *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  v4 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * result);
  *v4 = a2;
  v4[1] = a3;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v7;
  return result;
}

void sub_10016EB28(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(_QWORD))
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  a6(0);
  sub_1000C652C();
  sub_1000C00A0(v11, v9 + v10 * a1);
  sub_1000DC65C();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    a5[2] = v12;
    sub_10004A2A0();
  }
}

void sub_10016EBA4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  char v13;

  v9 = sub_1000B4340(a1, a2, a3, a4, a5);
  type metadata accessor for ContentStatusBanner(v9);
  sub_1000C652C();
  sub_10007802C(v6, v8 + v10 * v7, v11);
  sub_1000DC65C();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v12;
    sub_100079F70();
  }
}

unint64_t sub_10016EBEC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

void sub_10016EC3C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_100109840(a1, a2, a3, a4);
  v10 = *(_QWORD *)(v9 + 48);
  sub_100098778();
  sub_1000C6954();
  (*(void (**)(unint64_t, uint64_t))(v12 + 32))(v10 + v11 * a1, a2);
  v13 = *(_QWORD *)(a4 + 56);
  a5(0);
  sub_1000C652C();
  sub_1000C00A0(v15, v13 + v14 * a1);
  sub_1000DC65C();
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v16;
    sub_10004A2A0();
  }
}

void sub_10016ECB8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10016ECC4(a1, a2, a3, a4);
}

void sub_10016ECC4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  sub_100109840(a1, a2, a3, a4);
  v9 = *(_QWORD *)(v8 + 48);
  v10(0);
  sub_1000C6954();
  (*(void (**)(unint64_t, uint64_t))(v12 + 32))(v9 + v11 * a1, a2);
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * a1) = a3;
  sub_1000DC65C();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v13;
    sub_10004A2A0();
  }
}

unint64_t sub_10016ED30()
{
  unint64_t result;

  result = qword_100BC3618;
  if (!qword_100BC3618)
  {
    result = swift_getWitnessTable(&unk_1009B8B00, &type metadata for ContentStatusBanner.Placement);
    atomic_store(result, (unint64_t *)&qword_100BC3618);
  }
  return result;
}

uint64_t sub_10016ED6C(uint64_t a1, double a2)
{
  double v2;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = a2;
  else
    v2 = 0.0;
  return static Hasher._hash(seed:_:)(a1, *(_QWORD *)&v2);
}

uint64_t getEnumTagSinglePayload for SevereNotificationContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SevereNotificationContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10016EE50 + 4 * byte_10097DC09[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10016EE84 + 4 * byte_10097DC04[v4]))();
}

uint64_t sub_10016EE84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016EE8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016EE94);
  return result;
}

uint64_t sub_10016EEA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016EEA8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10016EEAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016EEB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SevereNotificationContent.CodingKeys()
{
  return &type metadata for SevereNotificationContent.CodingKeys;
}

unint64_t sub_10016EED4()
{
  unint64_t result;

  result = qword_100BC3680;
  if (!qword_100BC3680)
  {
    result = swift_getWitnessTable(&unk_10097DD64, &type metadata for SevereNotificationContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BC3680);
  }
  return result;
}

unint64_t sub_10016EF14()
{
  unint64_t result;

  result = qword_100BC3688;
  if (!qword_100BC3688)
  {
    result = swift_getWitnessTable(&unk_10097DCD4, &type metadata for SevereNotificationContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BC3688);
  }
  return result;
}

unint64_t sub_10016EF54()
{
  unint64_t result;

  result = qword_100BC3690;
  if (!qword_100BC3690)
  {
    result = swift_getWitnessTable(&unk_10097DCFC, &type metadata for SevereNotificationContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BC3690);
  }
  return result;
}

uint64_t sub_10016EF90(_OWORD *a1, uint64_t a2)
{
  assignWithTake for AnyEquatable(a2, a1);
  return a2;
}

uint64_t sub_10016EFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v10;

  v6 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v6, &v10);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 0x6E6F69746361;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for WeatherDataLoadMonitoringAction;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  v8 = Dictionary.init(dictionaryLiteral:)(inited);
  a3[3] = sub_1000BA294(&qword_100BC36F8);
  a3[4] = sub_10016F138();
  sub_10005F164(a3);
  return ShortDescription.init(name:_:)(0x4472656874616577, 0xEB00000000617461, v8, &type metadata for MonitoringAction);
}

uint64_t sub_10016F0C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_10016EFCC(*v1, v1[1], a1);
}

uint64_t sub_10016F0D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016F17C();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_10016F0FC()
{
  unint64_t result;

  result = qword_100BC36F0;
  if (!qword_100BC36F0)
  {
    result = swift_getWitnessTable(&unk_10097DDE0, &type metadata for MonitoringAction);
    atomic_store(result, (unint64_t *)&qword_100BC36F0);
  }
  return result;
}

unint64_t sub_10016F138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC3700;
  if (!qword_100BC3700)
  {
    v1 = sub_100075EB0(&qword_100BC36F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BC3700);
  }
  return result;
}

unint64_t sub_10016F17C()
{
  unint64_t result;

  result = qword_100BC3708;
  if (!qword_100BC3708)
  {
    result = swift_getWitnessTable(&unk_10097DE08, &type metadata for MonitoringAction);
    atomic_store(result, (unint64_t *)&qword_100BC3708);
  }
  return result;
}

_QWORD *assignWithCopy for ExternalSearchQuery(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for ExternalSearchQuery(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MonitoringAction()
{
  return &type metadata for MonitoringAction;
}

void sub_10016F238(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  objc_class *v6;
  NSBundle v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  NSBundle v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1000BA330();
  v3._object = (void *)0x80000001009F0F70;
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v4._countAndFlagsBits = 0x612074726F706552;
  v4._object = (void *)0xEF6575737349206ELL;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, *(Swift::String *)(&v23 - 1));

  v6 = (objc_class *)sub_1000BBAFC();
  sub_1000BA330();
  v7.super.isa = v6;
  v12 = sub_1000BA340(v8, 0x80000001009F0FD0, 0, 0, v7, v9, v10, v11);
  v14 = v13;

  v15 = (objc_class *)sub_1000BBAFC();
  sub_1000BA330();
  v16.super.isa = v15;
  v20 = sub_1000BA340(0x65726F4D20656553, 0xE800000000000000, 0, 0, v16, v17, v18, v19);
  v22 = v21;

  *(_QWORD *)a1 = 0xD00000000000001BLL;
  *(_QWORD *)(a1 + 8) = 0x80000001009F0F50;
  *(_BYTE *)(a1 + 16) = 0;
  *(Swift::String *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v22;
}

double destroy for ReportWeatherTipViewViewModel(uint64_t *a1)
{
  double result;

  sub_10016F41C(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_10016F41C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ReportWeatherTipViewViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10009D328(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for ReportWeatherTipViewViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10009D328(*(_QWORD *)a2, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10016F41C(v7, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for ReportWeatherTipViewViewModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for ReportWeatherTipViewViewModel(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10016F41C(v5, v6);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReportWeatherTipViewViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReportWeatherTipViewViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReportWeatherTipViewViewModel()
{
  return &type metadata for ReportWeatherTipViewViewModel;
}

double sub_10016F680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;

  v1 = v0;
  v2 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for LocationHeaderView(0);
  v6 = v0 + v5[21];
  v7 = (uint64_t *)(v0 + v5[18]);
  v8 = *v7;
  v9 = v7[1];
  v10 = *((unsigned __int8 *)v7 + 16);
  v11 = v7[3];
  v12 = static Font.largeTitle.getter();
  v13 = Text.font(_:)(v12, v8, v9, v10, v11);
  v15 = v14;
  LOBYTE(v8) = v16;
  v18 = v17;
  swift_release(v12);
  v19 = type metadata accessor for Text.WritingMode(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v19);
  Text.Measurements.size(of:in:writingMode:)(v13, v15, v8 & 1, v18, v4, INFINITY, INFINITY);
  v21 = v20;
  sub_1000D31B4(v13, v15, v8 & 1);
  swift_bridgeObjectRelease(v18);
  sub_100021A14((uint64_t)v4, &qword_100BC39D0);
  v22 = v1 + v5[19];
  v23 = *(_QWORD *)(v22 + 24);
  if (v23)
  {
    v25 = *(_QWORD *)v22;
    v26 = *(_DWORD *)(v22 + 16) & 1;
    v27 = *(_QWORD *)v22;
    v41 = *(_QWORD *)(v22 + 8);
    v24 = v41;
    sub_1000D55D4(v27, v41, v26);
    swift_bridgeObjectRetain(v23);
    v28 = sub_10016F8E0();
    v42 = v26;
    v29 = Text.font(_:)(v28, v25, v24, v26, v23);
    v31 = v30;
    v40 = v6;
    v33 = v32;
    v35 = v34;
    swift_release(v28);
    v36 = v33 & 1;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v19);
    Text.Measurements.size(of:in:writingMode:)(v29, v31, v36, v35, v4, INFINITY, INFINITY);
    v38 = v37;
    sub_1000D31B4(v29, v31, v36);
    swift_bridgeObjectRelease(v35);
    sub_1000D31B4(v25, v41, v26);
    swift_bridgeObjectRelease(v23);
    sub_100021A14((uint64_t)v4, &qword_100BC39D0);
  }
  else
  {
    v38 = 0.0;
  }
  return v21 + v38;
}

uint64_t sub_10016F8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for Font.TextStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_BYTE *)(v0 + *(int *)(type metadata accessor for LocationHeaderView(0) + 64) + 161);
  v6 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Font.TextStyle.footnote(_:), v1);
  if ((v5 & 1) != 0)
    static Font.Weight.semibold.getter(v6);
  else
    static Font.Weight.bold.getter(v6);
  v7 = static Font.system(_:weight:)(v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v7;
}

uint64_t sub_10016F99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for LocationHeaderView(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 64) + 138);
  sub_100080C0C(v0, (uint64_t)v7, v9);
  if (v8 == 1)
  {
    sub_10006BCFC((uint64_t)v7, type metadata accessor for LocationHeaderView);
LABEL_5:
    sub_100117228(v10);
    sub_10041934C(v3);
    v16 = v17;
    sub_10006BCFC((uint64_t)v3, type metadata accessor for DisplayMetrics);
    return v16;
  }
  v11 = &v7[*(int *)(v4 + 44)];
  v12 = *(_QWORD *)v11;
  v13 = v11[8];
  sub_10008D47C(*(_QWORD *)v11, v13);
  sub_100109B54();
  v15 = v14;
  sub_1000B15F8(v12, v13);
  sub_10006BCFC((uint64_t)v7, type metadata accessor for LocationHeaderView);
  if ((v15 & 1) == 0)
    goto LABEL_5;
  return 0;
}

uint64_t sub_10016FB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v16;

  v1 = type metadata accessor for LocationHeaderView(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v16 - v5;
  v7 = sub_1001093D4();
  sub_100080C0C(v0, (uint64_t)v6, type metadata accessor for LocationHeaderView);
  if ((v7 & 1) != 0)
  {
    v8 = v6[*(int *)(v1 + 64) + 138];
    sub_100080C0C((uint64_t)v6, (uint64_t)v4, type metadata accessor for LocationHeaderView);
    if ((v8 & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v10 = &v4[*(int *)(v1 + 44)];
      v11 = *(_QWORD *)v10;
      v12 = v10[8];
      sub_10008D47C(*(_QWORD *)v10, v12);
      sub_100109B54();
      v14 = v13;
      sub_1000B15F8(v11, v12);
      v9 = v14 ^ 1;
    }
    sub_10006BCFC((uint64_t)v4, type metadata accessor for LocationHeaderView);
  }
  else
  {
    v9 = 0;
  }
  sub_10006BCFC((uint64_t)v6, type metadata accessor for LocationHeaderView);
  return v9 & 1;
}

void sub_10016FC40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23)
{
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  unsigned __int8 v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;

  v79 = a8;
  LODWORD(v77) = a5;
  v74 = a23;
  v69 = a22;
  v71 = a21;
  v70 = a20;
  v83 = a19;
  v67 = a18;
  v73 = a17;
  v72 = a16;
  v84 = a15;
  v66 = a14;
  v81 = a12;
  v82 = a13;
  v80 = a10;
  v30 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v30);
  v32 = (char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a9;
  v34 = a9 + *(int *)(type metadata accessor for LocationHeaderViewMeasurements(0) + 32);
  v78 = a1;
  sub_100080C0C(a1, v34, type metadata accessor for DisplayMetrics);
  v35 = type metadata accessor for Text.WritingMode(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 1, 1, v35);
  v36 = v77 & 1;
  v75 = a3;
  v76 = a4;
  v68 = v77 & 1;
  v77 = a6;
  v37 = Text.Measurements.size(of:in:writingMode:)(a3, a4, v36, a6, v32, INFINITY, INFINITY);
  v39 = v38;
  sub_100021A14((uint64_t)v32, &qword_100BC39D0);
  v65 = a11;
  v64 = a7;
  if (a11)
  {
    v40 = v80 & 1;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 1, 1, v35);
    v41 = v79;
    sub_1000D55D4(a7, v79, v40);
    swift_bridgeObjectRetain(a11);
    v85 = v40;
    v42 = Text.Measurements.size(of:in:writingMode:)(a7, v41, v40, a11, v32, INFINITY, INFINITY);
    v44 = v43;
    sub_1000D31B4(a7, v41, v40);
    swift_bridgeObjectRelease(a11);
    sub_100021A14((uint64_t)v32, &qword_100BC39D0);
    if (v37 <= v42)
      v37 = v42;
    v39 = v39 + v44;
  }
  v45 = v33;
  *(double *)v33 = v37;
  *(double *)(v33 + 8) = v39;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 1, 1, v35);
  v66 &= 1u;
  v46 = Text.Measurements.size(of:in:writingMode:)(v81, v82, v66, v84, v32, INFINITY, INFINITY);
  v48 = v47;
  sub_100021A14((uint64_t)v32, &qword_100BC39D0);
  *(double *)(v33 + 16) = v46;
  *(_QWORD *)(v33 + 24) = v48;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 1, 1, v35);
  v49 = v67 & 1;
  v50 = v72;
  v51 = v73;
  v52 = Text.Measurements.size(of:in:writingMode:)(v72, v73, v67 & 1, v83, v32, INFINITY, INFINITY);
  v54 = v53;
  sub_100021A14((uint64_t)v32, &qword_100BC39D0);
  *(double *)(v33 + 32) = v52;
  *(_QWORD *)(v33 + 40) = v54;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 1, 1, v35);
  v55 = v69 & 1;
  v56 = v70;
  v57 = v71;
  v58 = v74;
  v59 = Text.Measurements.size(of:in:writingMode:)(v70, v71, v69 & 1, v74, v32, INFINITY, INFINITY);
  v61 = v60;
  sub_1000D31B4(v56, v57, v55);
  swift_bridgeObjectRelease(v58);
  sub_1000D31B4(v50, v51, v49);
  swift_bridgeObjectRelease(v83);
  sub_1000D31B4(v81, v82, v66);
  swift_bridgeObjectRelease(v84);
  sub_10010F9B0(v64, v79, v80, v65);
  sub_1000D31B4(v75, v76, v68);
  swift_bridgeObjectRelease(v77);
  v62 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(a2, v62);
  sub_10006BCFC(v78, type metadata accessor for DisplayMetrics);
  sub_100021A14((uint64_t)v32, &qword_100BC39D0);
  *(double *)(v45 + 48) = v59;
  *(_QWORD *)(v45 + 56) = v61;
}

void sub_10017009C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[4];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v56 = a4;
  v57 = a8;
  v61 = a6;
  v62 = a7;
  v59 = a3;
  v60 = a5;
  v58 = a2;
  v51 = a13;
  v54 = a12;
  v55 = a14;
  v52 = a10;
  v53 = a11;
  v16 = type metadata accessor for ContentSizeCategory(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = &v50[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  v22 = &v50[-v21];
  v23 = sub_1000BA294(&qword_100BC39E8);
  v24 = __chkstk_darwin(v23);
  v26 = &v50[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __chkstk_darwin(v24);
  v29 = &v50[-v28];
  __chkstk_darwin(v27);
  v31 = &v50[-v30];
  type metadata accessor for LocationHeaderView(0);
  sub_100109D64();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v20, v22, v16);
  v32 = (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 88))(v20, v16);
  if (v32 == enum case for ContentSizeCategory.extraSmall(_:)
    || v32 == enum case for ContentSizeCategory.small(_:)
    || v32 == enum case for ContentSizeCategory.medium(_:)
    || v32 == enum case for ContentSizeCategory.large(_:)
    || v32 == enum case for ContentSizeCategory.extraLarge(_:)
    || v32 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v32 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    v39 = (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v22, v16);
LABEL_37:
    v46 = static HorizontalAlignment.center.getter(v39);
    goto LABEL_38;
  }
  v40 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
  if (v32 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v32 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v32 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v32 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v32 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    v40(v20, v16);
    v39 = ((uint64_t (*)(_BYTE *, uint64_t))v40)(v22, v16);
    goto LABEL_37;
  }
  v45 = ((uint64_t (*)(_BYTE *, uint64_t))v40)(v22, v16);
  v46 = static HorizontalAlignment.leading.getter(v45);
LABEL_38:
  *(_QWORD *)v29 = v46;
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 0;
  v47 = sub_1000BA294(&qword_100BC39F0);
  sub_10017040C(a1, v58, v59, v56 & 1, v60, v61, v62, v57 & 1, &v29[*(int *)(v47 + 44)], v52, v53, v54, v51 & 1, v55);
  sub_1000787D4((uint64_t)v29, (uint64_t)v31, &qword_100BC39E8);
  sub_100037768((uint64_t)v31, (uint64_t)v26, &qword_100BC39E8);
  *(_QWORD *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 1;
  v48 = sub_1000BA294(&qword_100BC39F8);
  sub_100037768((uint64_t)v26, a9 + *(int *)(v48 + 48), &qword_100BC39E8);
  v49 = a9 + *(int *)(v48 + 64);
  *(_QWORD *)v49 = 0;
  *(_BYTE *)(v49 + 8) = 1;
  sub_100021A14((uint64_t)v31, &qword_100BC39E8);
  sub_100021A14((uint64_t)v26, &qword_100BC39E8);
}

void sub_10017040C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  uint64_t (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t OpaqueTypeConformance2;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t (*v148)(char *, uint64_t);
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t *v162;
  int v163;
  char *v164;
  int v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD v184[6];
  unsigned __int8 v185;
  uint64_t v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;

  v165 = a8;
  v173 = a7;
  v172 = a6;
  v169 = a5;
  v163 = a4;
  v168 = a3;
  v166 = a2;
  v180 = a9;
  v15 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v15);
  v137 = (uint64_t *)((char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v174 = type metadata accessor for AccessibilityChildBehavior(0);
  v170 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v167 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_1000BA294(&qword_100BC3A00);
  __chkstk_darwin(v171);
  v162 = (uint64_t *)((char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v177 = sub_1000BA294(&qword_100BC3A08);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (unint64_t)&v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BC3A10);
  v21 = __chkstk_darwin(v20);
  v179 = (uint64_t)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v164 = (char *)&v136 - v24;
  __chkstk_darwin(v23);
  v183 = (uint64_t)&v136 - v25;
  v26 = type metadata accessor for ContentSizeCategory(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v154 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v155 = (char *)&v136 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v136 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v136 - v35;
  v37 = sub_1000BA294(&qword_100BC3A18);
  __chkstk_darwin(v37);
  v39 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000BA294(&qword_100BC3A20);
  __chkstk_darwin(v40);
  v42 = (char *)&v136 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1000BA294(&qword_100BC3A28);
  __chkstk_darwin(v43);
  v153 = (char *)&v136 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000BA294(&qword_100BC3A30);
  v45 = __chkstk_darwin(v152);
  v178 = (uint64_t)&v136 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v151 = (uint64_t)&v136 - v48;
  __chkstk_darwin(v47);
  v181 = (uint64_t)&v136 - v49;
  v50 = sub_10016F99C();
  v52 = v51 & 1;
  static Alignment.center.getter(v50);
  _FrameLayout.init(width:height:alignment:)(0, 1, v50, v52);
  v161 = v184[5];
  v160 = v185;
  v159 = v186;
  v158 = v187;
  v157 = v188;
  v156 = v189;
  sub_100056D78((uint64_t)v39);
  v53 = sub_10016F680();
  static Alignment.center.getter(v54);
  _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&v53, 0);
  sub_100037768((uint64_t)v39, (uint64_t)v42, &qword_100BC3A18);
  v55 = &v42[*(int *)(v40 + 36)];
  v56 = v191;
  *(_OWORD *)v55 = v190;
  *((_OWORD *)v55 + 1) = v56;
  *((_OWORD *)v55 + 2) = v192;
  sub_100021A14((uint64_t)v39, &qword_100BC3A18);
  v57 = type metadata accessor for LocationHeaderView(0);
  v58 = *(int *)(v57 + 28);
  v182 = a1;
  v149 = a1 + v58;
  sub_100109D64();
  v150 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v150(v34, v36, v26);
  v148 = *(uint64_t (**)(char *, uint64_t))(v27 + 88);
  v59 = v148(v34, v26);
  v60 = 0;
  v61 = enum case for ContentSizeCategory.extraExtraLarge(_:);
  v62 = enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  v147 = enum case for ContentSizeCategory.extraSmall(_:);
  v146 = enum case for ContentSizeCategory.small(_:);
  v63 = v59 == enum case for ContentSizeCategory.extraSmall(_:) || v59 == enum case for ContentSizeCategory.small(_:);
  v145 = enum case for ContentSizeCategory.medium(_:);
  v64 = v63 || v59 == enum case for ContentSizeCategory.medium(_:);
  v144 = enum case for ContentSizeCategory.large(_:);
  v65 = v64 || v59 == enum case for ContentSizeCategory.large(_:);
  v143 = enum case for ContentSizeCategory.extraLarge(_:);
  if (!v65
    && v59 != enum case for ContentSizeCategory.extraLarge(_:)
    && v59 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v59 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    if (v59 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v59 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v59 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v59 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v59 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v60 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v34, v26);
      v60 = 0;
    }
  }
  v73 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
  v74 = v73(v36, v26);
  if (v60)
    static Alignment.leading.getter(v74);
  else
    static Alignment.center.getter(v74);
  v75 = v57;
  v142 = a14;
  v138 = a13;
  v141 = a12;
  v140 = a11;
  v139 = a10;
  v76 = (uint64_t)v153;
  sub_100945BA0();
  sub_100021A14((uint64_t)v42, &qword_100BC3A20);
  v77 = sub_10016FB08();
  v78 = sub_100116FEC();
  v184[0] = 0;
  State.init(wrappedValue:)(v184, &type metadata for CGFloat);
  v79 = v193;
  v80 = v194;
  v81 = v151;
  sub_100037768(v76, v151, &qword_100BC3A28);
  v82 = v81 + *(int *)(v152 + 36);
  *(_BYTE *)v82 = v77 & 1;
  *(double *)(v82 + 8) = v78;
  *(_QWORD *)(v82 + 16) = v79;
  *(_QWORD *)(v82 + 24) = v80;
  sub_100021A14(v76, &qword_100BC3A28);
  sub_1000787D4(v81, v181, &qword_100BC3A30);
  v83 = v155;
  sub_100109D64();
  v84 = v154;
  v150(v154, v83, v26);
  v85 = v148(v84, v26);
  if (v85 != v147 && v85 != v146 && v85 != v145 && v85 != v144 && v85 != v143 && v85 != v61 && v85 != v62)
  {
    if (v85 == enum case for ContentSizeCategory.accessibilityMedium(_:)
      || v85 == enum case for ContentSizeCategory.accessibilityLarge(_:)
      || v85 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      || v85 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      || v85 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v96 = v73(v83, v26);
      v97 = static Alignment.topLeading.getter(v96);
      goto LABEL_73;
    }
    v73(v84, v26);
  }
  v99 = v73(v83, v26);
  v97 = static Alignment.top.getter(v99);
LABEL_73:
  v100 = (uint64_t)v162;
  *v162 = v97;
  *(_QWORD *)(v100 + 8) = v98;
  v101 = sub_1000BA294(&qword_100BC3A38);
  v102 = v182;
  sub_100171130(v182, v166, v168, v163 & 1, v169, v172, v173, v165 & 1, v100 + *(int *)(v101 + 44), v139, v140, v141, v138 & 1, v142);
  v103 = v167;
  static AccessibilityChildBehavior.ignore.getter(v104);
  sub_10007AB60((uint64_t)&unk_100BC3A40);
  v106 = v105;
  v107 = (char *)v175;
  v108 = v171;
  View.accessibilityElement(children:)(v103, v171, v105);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v103, v174);
  sub_100021A14(v100, &qword_100BC3A00);
  v109 = v102 + *(int *)(v75 + 64);
  v111 = *(_QWORD *)(v109 + 144);
  v110 = *(_QWORD *)(v109 + 152);
  v193 = v111;
  v194 = v110;
  v184[0] = v108;
  v184[1] = v106;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v184, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v113 = sub_100114EF8();
  v114 = (uint64_t)v164;
  v115 = v177;
  View.accessibilityLabel<A>(_:)(&v193, v177, &type metadata for String, OpaqueTypeConformance2, v113);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v107, v115);
  sub_1000787D4(v114, v183, &qword_100BC3A10);
  v116 = sub_1001155A4();
  LODWORD(v177) = v116;
  if ((v116 & 1) != 0)
  {
    v182 = 0;
    v176 = 0;
    v175 = 0;
    v174 = 0;
    v173 = 0;
    v117 = 0;
    v118 = 0;
  }
  else
  {
    v119 = v137;
    sub_100117228(v116);
    sub_10041941C(v119);
    v121 = v120;
    v123 = v122 & 1;
    sub_10006BCFC((uint64_t)v119, type metadata accessor for DisplayMetrics);
    static Alignment.center.getter(v124);
    v182 = 1;
    _FrameLayout.init(width:height:alignment:)(0, 1, v121, v123);
    v176 = v193;
    v175 = v194;
    v174 = v195;
    v173 = v196;
    v117 = v197;
    v118 = v198;
  }
  v125 = v181;
  v126 = v178;
  sub_100037768(v181, v178, &qword_100BC3A30);
  v127 = v183;
  v128 = v179;
  sub_100037768(v183, v179, &qword_100BC3A10);
  v129 = v180;
  *v180 = 0;
  *((_BYTE *)v129 + 8) = 1;
  v129[2] = v161;
  *((_BYTE *)v129 + 24) = v160;
  v129[4] = v159;
  *((_BYTE *)v129 + 40) = v158;
  v130 = v156;
  v129[6] = v157;
  v129[7] = v130;
  v131 = (int *)sub_1000BA294(&qword_100BC3A48);
  sub_100037768(v126, (uint64_t)v129 + v131[12], &qword_100BC3A30);
  sub_100037768(v128, (uint64_t)v129 + v131[16], &qword_100BC3A10);
  v132 = (char *)v129 + v131[20];
  v133 = v182;
  *(_QWORD *)v132 = 0;
  *((_QWORD *)v132 + 1) = v133;
  v134 = (char *)v175;
  *((_QWORD *)v132 + 2) = v176;
  *((_QWORD *)v132 + 3) = v134;
  v135 = v173;
  *((_QWORD *)v132 + 4) = v174;
  *((_QWORD *)v132 + 5) = v135;
  *((_QWORD *)v132 + 6) = v117;
  *((_QWORD *)v132 + 7) = v118;
  v132[64] = v177 & 1;
  sub_100021A14(v127, &qword_100BC3A10);
  sub_100021A14(v125, &qword_100BC3A30);
  sub_100021A14(v128, &qword_100BC3A10);
  sub_100021A14(v126, &qword_100BC3A30);
}

void sub_100171130(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double *v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *v61;
  _BYTE *v62;
  char v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  char v67;
  _BYTE *v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _BYTE *v74;
  char v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE v100[4];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t *v108;
  _BYTE *v109;
  _BYTE *v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _QWORD v131[3];

  v112 = a8;
  v117 = a7;
  v116 = a6;
  v115 = a5;
  v111 = a4;
  v114 = a3;
  v113 = a2;
  v121 = sub_1000BA294(&qword_100BC3A50);
  __chkstk_darwin(v121);
  v17 = &v100[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v107 = type metadata accessor for ConditionSummaryModifier(0);
  __chkstk_darwin(v107);
  v108 = (uint64_t *)&v100[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v120 = sub_1000BA294(&qword_100BC3A58);
  __chkstk_darwin(v120);
  v118 = &v100[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v119 = sub_1000BA294(&qword_100BC3A60);
  v20 = __chkstk_darwin(v119);
  v106 = &v100[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v109 = &v100[-v22];
  v130 = sub_1000BA294(&qword_100BC3A68);
  __chkstk_darwin(v130);
  v127 = &v100[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v123 = type metadata accessor for LocationHeaderView(0);
  v24 = __chkstk_darwin(v123);
  v124 = &v100[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v125 = &v100[-v26];
  v27 = sub_1000BA294(&qword_100BC3A70);
  v28 = __chkstk_darwin(v27);
  v129 = &v100[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v28);
  v31 = &v100[-v30];
  v32 = sub_1000BA294(&qword_100BC3A78);
  __chkstk_darwin(v32);
  v34 = &v100[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = sub_1000BA294(&qword_100BC3A80);
  __chkstk_darwin(v35);
  v37 = &v100[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = sub_1000BA294(&qword_100BC3A88);
  __chkstk_darwin(v38);
  v40 = &v100[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v122 = sub_1000BA294(&qword_100BC3A90);
  v41 = __chkstk_darwin(v122);
  v43 = &v100[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v41);
  v110 = &v100[-v44];
  v45 = sub_1000BA294(&qword_100BC3A98);
  v46 = __chkstk_darwin(v45);
  v126 = &v100[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v46);
  v49 = &v100[-v48];
  v50 = sub_1001155A4();
  v128 = v31;
  if ((v50 & 1) != 0)
  {
    v51 = 1;
    v52 = v122;
    v53 = v123;
  }
  else
  {
    v105 = a14;
    v101 = a13;
    v104 = a12;
    v103 = a11;
    v102 = a10;
    sub_100024310(a1);
    v54 = sub_10013E734();
    sub_100037768((uint64_t)v34, (uint64_t)v37, &qword_100BC3A78);
    v55 = (double *)&v37[*(int *)(v35 + 36)];
    *v55 = 0.0;
    v55[1] = v54;
    sub_100021A14((uint64_t)v34, &qword_100BC3A78);
    v56 = sub_100116FEC();
    *(_QWORD *)v40 = static HorizontalAlignment.center.getter(v57);
    *((_QWORD *)v40 + 1) = 0;
    v40[16] = 0;
    v58 = sub_1000BA294(&qword_100BC3AA0);
    sub_1001720D0(a1, v113, v114, v111 & 1, v115, (uint64_t)v37, v116, v117, (uint64_t)&v40[*(int *)(v58 + 44)], v56, v112 & 1, v102, v103, v104, v101 & 1, v105);
    sub_100021A14((uint64_t)v37, &qword_100BC3A80);
    v53 = v123;
    if (*(_QWORD *)(a1 + *(int *)(v123 + 76) + 24))
      v59 = -14.0;
    else
      v59 = -12.0;
    sub_100037768((uint64_t)v40, (uint64_t)v43, &qword_100BC3A88);
    v60 = v122;
    v61 = (double *)&v43[*(int *)(v122 + 36)];
    *v61 = 0.0;
    v61[1] = v59;
    sub_100021A14((uint64_t)v40, &qword_100BC3A88);
    v62 = v110;
    sub_1000787D4((uint64_t)v43, (uint64_t)v110, &qword_100BC3A90);
    sub_1000787D4((uint64_t)v62, (uint64_t)v49, &qword_100BC3A90);
    v51 = 0;
    v52 = v60;
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v49, v51, 1, v52);
  v63 = sub_1001093D4();
  v64 = v125;
  sub_100080C0C(a1, (uint64_t)v125, type metadata accessor for LocationHeaderView);
  v65 = (uint64_t)v127;
  v66 = v124;
  if ((v63 & 1) == 0)
  {
    v67 = v64[*(int *)(v53 + 64) + 138];
    sub_100080C0C((uint64_t)v64, (uint64_t)v124, type metadata accessor for LocationHeaderView);
    if ((v67 & 1) != 0)
    {
      sub_10006BCFC((uint64_t)v66, type metadata accessor for LocationHeaderView);
      sub_10006BCFC((uint64_t)v64, type metadata accessor for LocationHeaderView);
    }
    else
    {
      v68 = &v66[*(int *)(v53 + 44)];
      v69 = *(_QWORD *)v68;
      v70 = v68[8];
      sub_10008D47C(*(_QWORD *)v68, v70);
      sub_100109B54();
      v72 = v71;
      sub_1000B15F8(v69, v70);
      sub_10006BCFC((uint64_t)v66, type metadata accessor for LocationHeaderView);
      sub_10006BCFC((uint64_t)v64, type metadata accessor for LocationHeaderView);
      if ((v72 & 1) != 0)
        goto LABEL_12;
    }
    v95 = 1;
    v96 = (uint64_t)v128;
    goto LABEL_17;
  }
  sub_10006BCFC((uint64_t)v64, type metadata accessor for LocationHeaderView);
LABEL_12:
  v73 = sub_10016FB08();
  v74 = v118;
  sub_100171B20((uint64_t)v118);
  if ((v73 & 1) != 0)
  {
    v75 = sub_10016FB08();
    v76 = sub_100116FEC();
    v77 = v76 + sub_10016F680() + 0.0;
    v78 = type metadata accessor for LocationHeaderViewFrameCoordinator(0);
    sub_10007A100((uint64_t)&unk_100BC3988);
    v80 = Environment.init<A>(_:)(v78, v78, v79);
    v81 = (uint64_t)v108;
    *v108 = v80;
    *(_BYTE *)(v81 + 8) = v82 & 1;
    v83 = (int *)v107;
    v84 = (_QWORD *)(v81 + *(int *)(v107 + 20));
    *v84 = swift_getKeyPath(&unk_10097E238);
    v85 = sub_1000BA294(&qword_100BC39B0);
    swift_storeEnumTagMultiPayload(v84, v85, 0);
    *(_BYTE *)(v81 + v83[6]) = v75 & 1;
    *(double *)(v81 + v83[7]) = v77;
    *(_QWORD *)(v81 + v83[8]) = 0x3FE999999999999ALL;
    *(_QWORD *)(v81 + v83[9]) = 0x3FF0000000000000;
    v86 = (_QWORD *)(v81 + v83[10]);
    v131[0] = 0;
    State.init(wrappedValue:)(v131, &type metadata for CGFloat);
    v87 = v131[2];
    *v86 = v131[1];
    v86[1] = v87;
    v88 = v106;
    sub_100037768((uint64_t)v74, (uint64_t)v106, &qword_100BC3A58);
    v89 = v119;
    sub_10007802C(v81, (uint64_t)&v88[*(int *)(v119 + 36)], type metadata accessor for ConditionSummaryModifier);
    sub_100021A14((uint64_t)v74, &qword_100BC3A58);
    v90 = &qword_100BC3A60;
    v74 = v109;
    sub_1000787D4((uint64_t)v88, (uint64_t)v109, &qword_100BC3A60);
    sub_100037768((uint64_t)v74, (uint64_t)v17, &qword_100BC3A60);
    swift_storeEnumTagMultiPayload(v17, v121, 0);
    v91 = sub_100177B38();
    v92 = sub_100177BBC();
    v93 = v17;
    v94 = v89;
  }
  else
  {
    v90 = &qword_100BC3A58;
    sub_100037768((uint64_t)v74, (uint64_t)v17, &qword_100BC3A58);
    swift_storeEnumTagMultiPayload(v17, v121, 1);
    v91 = sub_100177B38();
    v92 = sub_100177BBC();
    v93 = v17;
    v94 = v119;
  }
  _ConditionalContent<>.init(storage:)(v93, v94, v120, v91, v92);
  sub_100021A14((uint64_t)v74, v90);
  v96 = (uint64_t)v128;
  sub_1000787D4(v65, (uint64_t)v128, &qword_100BC3A68);
  v95 = 0;
LABEL_17:
  _s7Weather24LocationCompositionStateOwst_0(v96, v95, 1, v130);
  v97 = v126;
  sub_100037768((uint64_t)v49, (uint64_t)v126, &qword_100BC3A98);
  v98 = v129;
  sub_100037768(v96, (uint64_t)v129, &qword_100BC3A70);
  sub_100037768((uint64_t)v97, a9, &qword_100BC3A98);
  v99 = sub_1000BA294(&qword_100BC3AA8);
  sub_100037768((uint64_t)v98, a9 + *(int *)(v99 + 48), &qword_100BC3A70);
  sub_100021A14(v96, &qword_100BC3A70);
  sub_100021A14((uint64_t)v49, &qword_100BC3A98);
  sub_100021A14((uint64_t)v98, &qword_100BC3A70);
  sub_100021A14((uint64_t)v97, &qword_100BC3A98);
}

