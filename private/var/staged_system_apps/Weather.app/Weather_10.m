uint64_t sub_10051B010(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v15[5];

  v6 = type metadata accessor for Location(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AveragesDetailViewModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v15[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a1) = *a1;
  sub_10003B59C(a4 + 16, (uint64_t)v15);
  sub_1000DB418(v15, v15[3]);
  swift_retain();
  sub_10017BA58();
  swift_release();
  sub_100487628();
  sub_1000215BC((uint64_t)v12, type metadata accessor for AveragesDetailViewModel);
  sub_100596D14((int)a1, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v15);
}

void sub_10051B140(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _BYTE __src[74];
  _BYTE v27[56];
  _QWORD v28[6];

  type metadata accessor for AveragesDetailViewModel(0);
  sub_10009D98C();
  __chkstk_darwin(v3);
  v5 = &__src[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v8 = &__src[-v7 - 8];
  type metadata accessor for DetailViewVisibilityTrackerModel(0);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = (char *)(v11 - v10);
  sub_100094EE4();
  sub_10017BA58();
  sub_10009880C();
  sub_100487740((uint64_t)v8, v12);
  v14 = v1[5];
  v13 = v1[6];
  v15 = sub_1000DB418(v1 + 2, v14);
  v28[3] = v14;
  v28[4] = *(_QWORD *)(v13 + 8);
  v16 = sub_10005F164(v28);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v16, v15, v14);
  sub_100094EE4();
  sub_10017BA58();
  sub_10009880C();
  v17 = sub_100487448();
  v19 = v18;
  sub_1000215BC((uint64_t)v8, type metadata accessor for AveragesDetailViewModel);
  sub_100094EE4();
  sub_10017BA58();
  sub_10009880C();
  sub_1000215BC((uint64_t)v5, type metadata accessor for AveragesDetailViewModel);
  sub_10051BB28((uint64_t)v1, (uint64_t)v27);
  *a1 = swift_getKeyPath(&unk_1009AAB28);
  v20 = sub_1000BA294(&qword_100BC4F28);
  swift_storeEnumTagMultiPayload(a1, v20, 0);
  v21 = (int *)sub_1000BA294(&qword_100BEC1E8);
  sub_100080C0C((uint64_t)v12, (uint64_t)a1 + v21[9], type metadata accessor for DetailViewVisibilityTrackerModel);
  sub_10003B59C((uint64_t)v28, (uint64_t)a1 + v21[10]);
  v22 = (_QWORD *)((char *)a1 + v21[11]);
  *v22 = v17;
  v22[1] = v19;
  v23 = (_QWORD *)((char *)a1 + v21[12]);
  *v23 = 0xD000000000000019;
  v23[1] = 0x80000001009FE7B0;
  *((_BYTE *)a1 + v21[13]) = 0;
  v24 = (_QWORD *)((char *)a1 + v21[14]);
  *v24 = 0;
  v24[1] = 0;
  *((_BYTE *)a1 + v21[15]) = 1;
  sub_10051B398();
  sub_10051DF84((uint64_t)v27);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
  sub_1000215BC((uint64_t)v12, type metadata accessor for DetailViewVisibilityTrackerModel);
  memcpy((char *)a1 + v21[16], __src, 0x4AuLL);
  sub_100098640();
}

void sub_10051B398()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;

  v0 = type metadata accessor for AveragesDetailViewModel(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_10017BA58();
  swift_release();
  v3 = (char *)sub_10051B440 + 4 * byte_1009AAAB0[swift_getEnumCaseMultiPayload(v2)];
  __asm { BR              X10 }
}

uint64_t sub_10051B440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = v1 + *(int *)(sub_1000BA294(&qword_100BE4A50) + 48);
  *(_OWORD *)(v0 + 25) = 0u;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  v3 = sub_1000BA294(&qword_100BEC228);
  sub_10003D2DC(&qword_100BEC220, &qword_100BEC228);
  _ConditionalContent<>.init(storage:)(v0, &type metadata for EmptyView, v3, &protocol witness table for EmptyView, v4);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_BYTE *)(v0 + 200);
  v7 = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 176) = v7;
  *(_QWORD *)(v0 + 192) = v5;
  *(_BYTE *)(v0 + 200) = v6;
  *(_BYTE *)(v0 + 233) = 0;
  v8 = sub_1000BA294(&qword_100BEC210);
  v9 = sub_1000BA294(&qword_100BEC208);
  v10 = sub_10051E020();
  v11 = sub_10051E0A4();
  _ConditionalContent<>.init(storage:)(v0 + 160, v8, v9, v10, v11);
  v12 = type metadata accessor for Location(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v2, v12);
}

void sub_10051B8DC(_QWORD *a1@<X8>)
{
  *a1 = 0x7049206D65726F4CLL;
  a1[1] = 0xEB000000006D7573;
}

void sub_10051B900(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_10051B93C(a1, a2 + 24);
}

void sub_10051B93C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  _QWORD __src[13];
  _BYTE __dst[97];

  v4 = swift_allocObject(&unk_100B7D668, 112, 7);
  memcpy((void *)(v4 + 16), a1, 0x60uLL);
  LOBYTE(__src[12]) = 0;
  __src[10] = sub_10067962C;
  __src[11] = 0;
  __src[0] = sub_1000BA294(&qword_100BC6738);
  sub_1001CD8F0(a1);
  if (qword_100BC1F00 != -1)
    swift_once(&qword_100BC1F00, sub_10014C654);
  swift_beginAccess(&xmmword_100CAE588, v6, 0, 0);
  sub_100037768((uint64_t)&xmmword_100CAE588, (uint64_t)__dst, &qword_100BCED50);
  if (*(_QWORD *)&__dst[24])
  {
    sub_10003C800((__int128 *)__dst, (uint64_t)&__src[3]);
    __src[1] = sub_10040BD2C;
    __src[2] = v4;
    v5 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    __src[8] = _swiftEmptyArrayStorage;
    __src[9] = v5;
    memcpy(__dst, __src, sizeof(__dst));
    sub_100037768((uint64_t)__dst, (uint64_t)__src, &qword_100BC66A0);
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
    sub_100037768((uint64_t)__src, a2 + 16, &qword_100BC66A0);
    *(_QWORD *)(a2 + 120) = 0;
    *(_BYTE *)(a2 + 128) = 1;
    *(_QWORD *)(a2 + 136) = 0;
    *(_BYTE *)(a2 + 144) = 1;
    sub_100021A14((uint64_t)__dst, &qword_100BC66A0);
    sub_100021A14((uint64_t)__src, &qword_100BC66A0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10051BAD4()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1000BA294(&qword_100BEC2C8);
  Binding.projectedValue.getter(v0);
  return v2;
}

uint64_t sub_10051BB28(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for HomeAndWorkRefinementView(a2, a1);
  return a2;
}

uint64_t sub_10051BB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata3;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_100075EB0(&qword_100BD6D50);
  v6 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v5, &type metadata for AveragesDetailPickerView, v6, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v10 = type metadata accessor for VStack(0, v8, WitnessTable);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = &v22[-v15];
  v17 = *(_QWORD *)(a1 + 24);
  v23 = v6;
  v24 = v17;
  v25 = v2;
  v18 = j___s7SwiftUI19HorizontalAlignmentV6centerACvgZ(v8);
  VStack.init(alignment:spacing:content:)(v18, 0, 0, sub_10051E590, v22, v8, WitnessTable);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v10);
  sub_1000B2074(v13, v10, v19);
  v20 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v20(v13, v10);
  sub_1000B1100((uint64_t)v16, v10, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v16, v10);
}

double sub_10051BCE8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36[3];
  _QWORD v37[3];
  _QWORD v38[2];
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;

  v35 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - v11;
  static Alignment.center.getter(v13);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4024000000000000, 0);
  v34 = v48[3];
  v14 = v49;
  v33 = v50;
  HIDWORD(v32) = v51;
  v31 = v52;
  v30 = v53;
  type metadata accessor for AveragesContentView(0, a2, a3, v15);
  v16 = sub_10051BAD4();
  v18 = v17;
  v20 = v19 & 1;
  (*(void (**)(void))(a1 + 24))();
  sub_1000B2074(v9, a2, a3);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v9, a2);
  v40 = 0;
  v41 = 1;
  v42 = v34;
  v43 = v14;
  v44 = v33;
  v45 = BYTE4(v32);
  v46 = v31;
  v47 = v30;
  v38[0] = v16;
  v38[1] = v18;
  v39 = v20;
  v48[0] = &v40;
  v48[1] = v38;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, a2);
  v48[2] = v9;
  swift_retain();
  swift_retain();
  v37[0] = sub_1000BA294(&qword_100BD6D50);
  v37[1] = &type metadata for AveragesDetailPickerView;
  v37[2] = a2;
  v36[0] = sub_10051E59C();
  v22 = sub_10051E600();
  sub_10052800C((uint64_t)v48, 3, (uint64_t)v37, (uint64_t)v36, v23, v24, v25, v26, v29, v30, v31, v32, v33, v34, v35, v36[0], v22, a3);
  v21(v12, a2);
  swift_release();
  v27 = swift_release();
  ((void (*)(char *, uint64_t, __n128))v21)(v9, a2, v27);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_10051BF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10051BB5C(a1, a2);
}

void sub_10051BF90(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v33 = type metadata accessor for SegmentedPickerStyle(0);
  v34 = *(_QWORD *)(v33 - 8);
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100098728();
  v4 = v3 - v2;
  v5 = sub_1000BA294(&qword_100BEC398);
  v32 = *(_QWORD *)(v5 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = sub_1000BA294(&qword_100BEC3A0);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = LocalizedStringKey.init(stringLiteral:)(0x7365676172657641, 0xE800000000000000);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = sub_1000BA294(&qword_100BEC2C8);
  Binding.projectedValue.getter(v22);
  v23 = sub_1000BA294(&qword_100BEC3A8);
  v24 = sub_10051EA64();
  v25 = sub_10051EAA0();
  v26 = Picker<>.init(_:selection:content:)(v15, v17, v19 & 1, v21, &v36, sub_10051C1E8, 0, &type metadata for AveragesKind, v23, v24, v25);
  SegmentedPickerStyle.init()(v26);
  sub_10003D2DC(&qword_100BEC3C0, &qword_100BEC398);
  View.pickerStyle<A>(_:)(v4, v5, v33, v27, &protocol witness table for SegmentedPickerStyle);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v4, v33);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v9, v5);
  LOBYTE(v17) = static Edge.Set.horizontal.getter(v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v14, v31);
  v29 = a1 + *(int *)(sub_1000BA294(&qword_100BEC3C8) + 36);
  *(_BYTE *)v29 = v17;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  *(_BYTE *)(v29 + 40) = 1;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v14, v31);
  sub_100098640();
}

uint64_t sub_10051C1E8()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _UNKNOWN **v6;

  v6 = &off_100B5AB18;
  KeyPath = swift_getKeyPath(&unk_1009AADA0);
  v1 = sub_1000BA294(&qword_100BEC3D0);
  sub_10003D2DC(&qword_100BEC3D8, &qword_100BEC3D0);
  v3 = v2;
  v4 = sub_10051EA64();
  return ForEach<>.init(_:id:content:)(&v6, KeyPath, sub_10051C2A0, 0, v1, &type metadata for Text, v3, v4, &protocol witness table for Text);
}

uint64_t sub_10051C2A0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = sub_100929414(*a1);
  v9[1] = v3;
  v4 = sub_100114EF8();
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7 & 1;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

void sub_10051C2F8(uint64_t a1@<X8>)
{
  sub_10051BF90(a1);
}

uint64_t sub_10051C304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __n128 v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;

  v29 = a1;
  v2 = type metadata accessor for ScrollIndicatorVisibility(0);
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BEC2D0);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BEC2D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Axis.Set.vertical.getter(v12);
  v31 = v1;
  v14 = sub_1000BA294(&qword_100BEC2E0);
  sub_10003D2DC(&qword_100BEC2E8, &qword_100BEC2E0);
  v16 = ScrollView.init(_:showsIndicators:content:)(v13, 1, sub_10051E63C, v30, v14, v15);
  v17 = static ScrollIndicatorVisibility.never.getter(v16);
  v18 = static Axis.Set.vertical.getter(v17);
  v20 = static Axis.Set.horizontal.getter(v19);
  v21 = Axis.Set.init(rawValue:)(0);
  v22 = Axis.Set.init(rawValue:)(v21);
  if (Axis.Set.init(rawValue:)(v22 & v18) != v18)
    v21 = Axis.Set.init(rawValue:)(v21 | v18);
  v23 = Axis.Set.init(rawValue:)(v21);
  if (Axis.Set.init(rawValue:)(v23 & v20) != v20)
    v21 = Axis.Set.init(rawValue:)(v21 | v20);
  sub_10003D2DC(&qword_100BEC2F0, &qword_100BEC2D0);
  View.scrollIndicators(_:axes:)(v4, v21, v5, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v29, v11, v8);
}

uint64_t sub_10051C538(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  _QWORD v7[4];
  _BYTE __src[72];

  sub_10051DFB0(a1, (uint64_t)__src);
  v1 = swift_allocObject(&unk_100B7D840, 88, 7);
  memcpy((void *)(v1 + 16), __src, 0x48uLL);
  v2 = sub_1000BA294(&qword_100BEC2F8);
  v3 = sub_100075EB0(&qword_100BEC300);
  sub_10003D2DC(&qword_100BEC308, &qword_100BEC300);
  v7[0] = v3;
  v7[1] = &type metadata for Bool;
  v7[2] = v4;
  v7[3] = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  return ScrollEventStateReader.init(content:)(sub_10051E648, v1, v2, OpaqueTypeConformance2);
}

double sub_10051C620(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double (*v17)@<D0>(uint64_t@<X8>);
  uint64_t v18;
  _QWORD __src[9];

  v3 = sub_1000BA294(&qword_100BEC2C8);
  Binding.projectedValue.getter(v3);
  v4 = __src[0];
  v5 = __src[1];
  v6 = __src[2];
  sub_10051DFB0(a2, (uint64_t)__src);
  v7 = swift_allocObject(&unk_100B7D868, 88, 7);
  v8 = memcpy((void *)(v7 + 16), __src, 0x48uLL);
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = sub_10051E654;
  v18 = v7;
  v13 = ScrollEventState.isScrolling.getter(v8) & 1;
  sub_10051DFB0(a2, (uint64_t)__src);
  v9 = swift_allocObject(&unk_100B7D890, 88, 7);
  memcpy((void *)(v9 + 16), __src, 0x48uLL);
  v10 = sub_1000BA294(&qword_100BEC300);
  sub_10003D2DC(&qword_100BEC308, &qword_100BEC300);
  View.onChange<A>(of:initial:_:)(&v13, 0, sub_10051E6A0, v9, v10, &type metadata for Bool, v11, &protocol witness table for Bool);
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_10051C7A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  sub_10003B59C(a1 + 24, a2);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

void sub_10051C7DC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (*a2 == 1)
  {
    sub_1000DB418((_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 48));
    sub_100597030();
  }
}

void sub_10051C818(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  int *v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  void (**v32)(uint64_t@<X8>);
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[48];
  char v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[64];
  Swift::String v55;

  v2 = v1;
  v49 = a1;
  v3 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)sub_1000BA294(&qword_100BEC3E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000BA294(&qword_100BEC3E8);
  __chkstk_darwin(v47);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v48 = (uint64_t)&v47 - v12;
  v13 = v2[5];
  sub_10003B59C((uint64_t)v2, (uint64_t)&v53);
  if (v13 < 0)
  {
    v52 = v13 & 0x7FFFFFFFFFFFFFFFLL;
    sub_10051EAFC(&v52, (uint64_t)v50);
    v51 = 1;
    v16 = sub_10051EB38();
    v17 = sub_10051EB74();
    swift_retain();
    _ConditionalContent<>.init(storage:)(v50, &type metadata for PrecipitationAveragesDetailView, &type metadata for TemperatureAveragesDetailView, v16, v17);
    sub_10051EBB0((uint64_t)&v52);
  }
  else
  {
    v52 = v13;
    sub_10051EBE4(&v52, (uint64_t)v50);
    v51 = 0;
    v14 = sub_10051EB38();
    v15 = sub_10051EB74();
    swift_retain();
    _ConditionalContent<>.init(storage:)(v50, &type metadata for PrecipitationAveragesDetailView, &type metadata for TemperatureAveragesDetailView, v14, v15);
    sub_10051EC20((uint64_t)&v52);
  }
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v55._countAndFlagsBits = 0xD000000000000051;
  v55._object = (void *)0x8000000100A09210;
  v19._object = (void *)0x8000000100A091F0;
  v19._countAndFlagsBits = 0xD000000000000017;
  v20._countAndFlagsBits = 0x736E6F6974704FLL;
  v20._object = (void *)0xE700000000000000;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v55);

  v22 = (uint64_t)&v5[v3[6]];
  v23 = type metadata accessor for WeatherDescription(0);
  _s7Weather24LocationCompositionStateOwst_0(v22, 1, 1, v23);
  v24 = &v5[v3[7]];
  v25 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
  swift_storeEnumTagMultiPayload(v24, v25, 3);
  v26 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
  swift_storeEnumTagMultiPayload(v24, v26, 7);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)&v5[v3[8]], 1, 1, v26);
  *(_OWORD *)v5 = xmmword_1009AADC0;
  v5[16] = 1;
  *(Swift::String *)(v5 + 24) = v21;
  v5[v3[9]] = 0;
  v5[v3[10]] = 0;
  v27 = v2[3];
  v28 = v2[4];
  v29 = sub_1000DB418(v2, v27);
  v30 = &v8[v6[10]];
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = *(_QWORD *)(v28 + 8);
  v31 = sub_10005F164(v30);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v31, v29, v27);
  sub_10007802C((uint64_t)v5, (uint64_t)v8, type metadata accessor for ConditionDetailPlatterViewModel);
  v8[v6[9]] = 0;
  v32 = (void (**)(uint64_t@<X8>))&v8[v6[11]];
  *v32 = sub_10051CD0C;
  v32[1] = 0;
  v33 = v6[12];
  swift_beginAccess(&unk_100BE0830, &v52, 1, 0);
  *(double *)&v8[v33] = sub_10040908C();
  LOBYTE(v33) = static Edge.Set.bottom.getter(v34);
  v35 = sub_1004092CC();
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_100037768((uint64_t)v8, (uint64_t)v10, &qword_100BEC3E0);
  v43 = &v10[*(int *)(v47 + 36)];
  *v43 = v33;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  sub_100021A14((uint64_t)v8, &qword_100BEC3E0);
  v44 = v48;
  sub_1000787D4((uint64_t)v10, v48, &qword_100BEC3E8);
  sub_100037768((uint64_t)v54, (uint64_t)v50, &qword_100BEC400);
  sub_100037768(v44, (uint64_t)v10, &qword_100BEC3E8);
  v45 = v49;
  sub_100037768((uint64_t)v50, v49, &qword_100BEC400);
  v46 = sub_1000BA294(&qword_100BEC408);
  sub_100037768((uint64_t)v10, v45 + *(int *)(v46 + 48), &qword_100BEC3E8);
  sub_100021A14(v44, &qword_100BEC3E8);
  sub_100021A14((uint64_t)v54, &qword_100BEC400);
  sub_100021A14((uint64_t)v10, &qword_100BEC3E8);
  sub_100021A14((uint64_t)v50, &qword_100BEC400);
}

void sub_10051CD0C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = sub_1000BA294(&qword_100BD22A8);
  *(_QWORD *)(a1 + 80) = sub_100679698;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)a1 = v2;
  if (qword_100BC1F00 != -1)
    swift_once(&qword_100BC1F00, sub_10014C654);
  swift_beginAccess(&xmmword_100CAE588, v6, 0, 0);
  sub_100037768((uint64_t)&xmmword_100CAE588, (uint64_t)&v4, &qword_100BCED50);
  if (v5)
  {
    sub_10003C800(&v4, a1 + 24);
    *(_QWORD *)(a1 + 8) = sub_10051CDF8;
    *(_QWORD *)(a1 + 16) = 0;
    v3 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    *(_QWORD *)(a1 + 64) = _swiftEmptyArrayStorage;
    *(_QWORD *)(a1 + 72) = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10051CDF8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000DB418(a1, a1[3]);
  return sub_1008223A4(a2);
}

uint64_t sub_10051CE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  __n128 v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v34 = a3;
  v5 = type metadata accessor for ScrollIndicatorVisibility(0);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BEC310);
  v31 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BA294(&qword_100BEC318);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = static Axis.Set.vertical.getter(v15);
  v36 = a1;
  v37 = a2;
  v17 = sub_1000BA294(&qword_100BEC320);
  v18 = sub_100075EB0(&qword_100BEC328);
  sub_10003D2DC(&qword_100BEC330, &qword_100BEC328);
  v38[0] = v18;
  v38[1] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v38, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  v21 = ScrollView.init(_:showsIndicators:content:)(v16, 1, sub_10051E6A8, v35, v17, OpaqueTypeConformance2);
  v22 = static ScrollIndicatorVisibility.never.getter(v21);
  v23 = static Axis.Set.vertical.getter(v22);
  v25 = static Axis.Set.horizontal.getter(v24);
  v26 = Axis.Set.init(rawValue:)(0);
  v27 = Axis.Set.init(rawValue:)(v26);
  if (Axis.Set.init(rawValue:)(v27 & v23) != v23)
    v26 = Axis.Set.init(rawValue:)(v26 | v23);
  v28 = Axis.Set.init(rawValue:)(v26);
  if (Axis.Set.init(rawValue:)(v28 & v25) != v25)
    v26 = Axis.Set.init(rawValue:)(v26 | v25);
  sub_10003D2DC(&qword_100BEC338, &qword_100BEC310);
  View.scrollIndicators(_:axes:)(v7, v26, v8, v29);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v34, v14, v11);
}

void sub_10051D08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for RedactionReasons(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BEC328);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.leading.getter(v11);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v12 = sub_1000BA294(&qword_100BEC340);
  v13 = sub_10051D1CC(a1, a2, &v10[*(int *)(v12 + 44)]);
  static RedactionReasons.placeholder.getter(v13);
  sub_10003D2DC(&qword_100BEC330, &qword_100BEC328);
  View.redacted(reason:)(v7, v8, v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100021A14((uint64_t)v10, &qword_100BEC328);
}

uint64_t sub_10051D1CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  double v59;
  double *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int *v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  _OWORD v168[2];
  uint64_t v169;
  _OWORD v170[3];
  Swift::String v171;

  v165 = a1;
  v154 = a3;
  v149 = type metadata accessor for ConditionDetailLegendView(0);
  __chkstk_darwin(v149);
  v151 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_1000BA294(&qword_100BDCA78);
  __chkstk_darwin(v150);
  v153 = (uint64_t)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v152 = (uint64_t)&v132 - v8;
  v147 = type metadata accessor for CircularProgressViewStyle(0, v7);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_1000BA294(&qword_100BEC348);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v134);
  v135 = (double *)((char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1000BA294(&qword_100BE33B0);
  __chkstk_darwin(v12);
  v138 = (uint64_t)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_1000BA294(&qword_100BEC350);
  __chkstk_darwin(v136);
  v139 = (uint64_t)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_1000BA294(&qword_100BEC358);
  __chkstk_darwin(v137);
  v141 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_1000BA294(&qword_100BEC360);
  __chkstk_darwin(v140);
  v148 = (uint64_t)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v164 = (uint64_t)&v132 - v18;
  v133 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  __chkstk_darwin(v133);
  v20 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for TimeZone(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v22 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DetailHeroChartLollipopModel(0);
  __chkstk_darwin(v160);
  v28 = (uint64_t *)((char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = type metadata accessor for DetailHeroChartHeaderView(0);
  __chkstk_darwin(v159);
  v30 = (uint64_t *)((char *)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = sub_1000BA294(&qword_100BEC368);
  v166 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v162 = (char *)&v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v161 = (char *)&v132 - v33;
  v34 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v171._countAndFlagsBits = 0xD000000000000060;
  v171._object = (void *)0x8000000100A09180;
  v35._object = (void *)0x8000000100A09150;
  v35._countAndFlagsBits = 0xD000000000000025;
  v36._countAndFlagsBits = 0x76412065766F6241;
  v36._object = (void *)0xED00006567617265;
  v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v171);
  countAndFlagsBits = v37._countAndFlagsBits;
  object = v37._object;

  v38 = swift_bridgeObjectRetain_n(a2, 2);
  v39 = Date.init()(v38);
  static TimeZone.current.getter(v39);
  v40 = Date.formattedShortMonthAndDay(timeZone:)(v22);
  v42 = v41;
  (*(void (**)(char *, uint64_t))(v157 + 8))(v22, v158);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v43 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
  AttributedString.init(stringLiteral:)(8224, 0xE200000000000000);
  *v28 = v40;
  v28[1] = v42;
  *(_OWORD *)((char *)v28 + v43[6]) = xmmword_100988D00;
  v44 = (uint64_t *)((char *)v28 + v43[7]);
  *v44 = 0;
  v44[1] = 0xE000000000000000;
  v45 = (uint64_t *)((char *)v28 + v43[8]);
  *v45 = 0;
  v45[1] = 0;
  v46 = (uint64_t *)((char *)v28 + v43[9]);
  *v46 = 8224;
  v46[1] = 0xE200000000000000;
  *(_OWORD *)((char *)v28 + v43[10]) = xmmword_100988D00;
  *((_BYTE *)v28 + v43[11]) = 0;
  v47 = type metadata accessor for LollipopDetailViewModel(0);
  swift_storeEnumTagMultiPayload(v28, v47, 2);
  swift_storeEnumTagMultiPayload(v28, v160, 0);
  v48 = (uint64_t)object;
  *v30 = countAndFlagsBits;
  v30[1] = v48;
  v49 = v165;
  v30[2] = 0;
  v30[3] = 0xE000000000000000;
  v30[4] = v49;
  v30[5] = a2;
  v30[6] = v49;
  v30[7] = a2;
  v160 = a2;
  v50 = v159;
  sub_10007802C((uint64_t)v28, (uint64_t)v30 + *(int *)(v159 + 20), type metadata accessor for DetailHeroChartLollipopModel);
  *(_QWORD *)&v170[0] = 0x3FF0000000000000;
  v51 = sub_10010D1D0();
  ScaledMetric.init(wrappedValue:)(v170, &type metadata for Double, v51);
  v52 = enum case for DynamicTypeSize.accessibility1(_:);
  v53 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v20, v52, v53);
  sub_10000F1C8(&qword_100C0A550, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v20, v20, v53, v54) & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  sub_10000F1C8(&qword_100BEC370, type metadata accessor for DetailHeroChartHeaderView);
  v56 = v55;
  sub_10003D2DC(&qword_100BC4E30, (uint64_t *)&unk_100C0A510);
  v57 = v162;
  View.dynamicTypeSize<A>(_:)(v20, v50, v133, v56, v58);
  sub_100021A14((uint64_t)v20, (uint64_t *)&unk_100C0A510);
  sub_1000215BC((uint64_t)v30, type metadata accessor for DetailHeroChartHeaderView);
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v161, v57, v163);
  if (qword_100BC20C0 != -1)
LABEL_5:
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v170, 33, 0);
  v59 = sub_1004043D0();
  v60 = v135;
  v61 = (char *)v135 + *(int *)(v134 + 20);
  v62 = enum case for RoundedCornerStyle.continuous(_:);
  v63 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v61, v62, v63);
  *v60 = v59;
  v60[1] = v59;
  sub_10040441C();
  v65 = v64;
  swift_endAccess(v170);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v168, 0, 0, 1.0, 10.0, 0.0);
  v66 = v138;
  sub_100080C0C((uint64_t)v60, v138, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v67 = v66 + *(int *)(sub_1000BA294(&qword_100BDCBF8) + 36);
  v68 = v168[1];
  *(_OWORD *)v67 = v168[0];
  *(_OWORD *)(v67 + 16) = v68;
  *(_QWORD *)(v67 + 32) = v169;
  v69 = sub_1000BA294(&qword_100BDCC00);
  *(_QWORD *)(v66 + *(int *)(v69 + 52)) = v65;
  *(_WORD *)(v66 + *(int *)(v69 + 56)) = 256;
  v70 = static Alignment.center.getter(v69);
  v72 = v71;
  v73 = (uint64_t *)(v66 + *(int *)(sub_1000BA294(&qword_100BDCC08) + 36));
  *v73 = v70;
  v73[1] = v72;
  sub_1000215BC((uint64_t)v60, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v74 = sub_1004043F8();
  static Alignment.center.getter(v75);
  _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&v74, 0);
  v76 = v139;
  sub_100037768(v66, v139, &qword_100BE33B0);
  v77 = (_OWORD *)(v76 + *(int *)(v136 + 36));
  v78 = v170[1];
  *v77 = v170[0];
  v77[1] = v78;
  v77[2] = v170[2];
  sub_100021A14(v66, &qword_100BE33B0);
  v80 = static Alignment.center.getter(v79);
  v82 = v81;
  v83 = (uint64_t)v141;
  v84 = &v141[*(int *)(v137 + 36)];
  v85 = v142;
  v86 = ProgressView<>.init<>()();
  v87 = v145;
  CircularProgressViewStyle.init()(v86);
  sub_10003D2DC(&qword_100BEC378, &qword_100BEC348);
  v89 = v88;
  sub_10000F1C8(&qword_100BEC380, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle);
  v90 = v144;
  v91 = v147;
  View.progressViewStyle<A>(_:)(v87, v144, v147, v89, v92);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v87, v91);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v85, v90);
  v93 = (uint64_t *)&v84[*(int *)(sub_1000BA294(&qword_100BEC388) + 36)];
  *v93 = v80;
  v93[1] = v82;
  sub_1000787D4(v76, v83, &qword_100BEC350);
  LOBYTE(v80) = static Edge.Set.horizontal.getter(v94);
  swift_beginAccess(&unk_100BE0830, v167, 1, 0);
  v95 = sub_10040908C();
  v96 = EdgeInsets.init(_all:)(v95);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  v103 = v148;
  sub_100037768(v83, v148, &qword_100BEC358);
  v104 = v103 + *(int *)(v140 + 36);
  *(_BYTE *)v104 = v80;
  *(double *)(v104 + 8) = v96;
  *(_QWORD *)(v104 + 16) = v98;
  *(_QWORD *)(v104 + 24) = v100;
  *(_QWORD *)(v104 + 32) = v102;
  *(_BYTE *)(v104 + 40) = 0;
  sub_100021A14(v83, &qword_100BEC358);
  sub_1000787D4(v103, v164, &qword_100BEC360);
  v105 = v160;
  swift_bridgeObjectRetain();
  sub_10051AC44(0, 2, v165, v105);
  v107 = v106;
  v108 = (uint64_t)v151;
  Text.Measurements.init()(v109);
  *(_QWORD *)v108 = v107;
  *(_QWORD *)(v108 + 8) = 0;
  *(_QWORD *)(v108 + 16) = 0xE000000000000000;
  *(_BYTE *)(v108 + 24) = 1;
  sub_10040447C();
  v111 = v110;
  v113 = v112;
  v115 = v114;
  v117 = v116;
  LOBYTE(v107) = static Edge.Set.all.getter(v118);
  v119 = v153;
  sub_100080C0C(v108, v153, type metadata accessor for ConditionDetailLegendView);
  v120 = v119 + *(int *)(v150 + 36);
  *(_BYTE *)v120 = v107;
  *(_QWORD *)(v120 + 8) = v111;
  *(_QWORD *)(v120 + 16) = v113;
  *(_QWORD *)(v120 + 24) = v115;
  *(_QWORD *)(v120 + 32) = v117;
  *(_BYTE *)(v120 + 40) = 0;
  sub_1000215BC(v108, type metadata accessor for ConditionDetailLegendView);
  v121 = v152;
  sub_1000787D4(v119, v152, &qword_100BDCA78);
  v122 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
  v123 = v162;
  v124 = v161;
  v125 = v163;
  v122(v162, v161, v163);
  v126 = v164;
  sub_100037768(v164, v103, &qword_100BEC360);
  sub_100037768(v121, v119, &qword_100BDCA78);
  v127 = v154;
  v122(v154, v123, v125);
  v128 = (int *)sub_1000BA294(&qword_100BEC390);
  sub_100037768(v103, (uint64_t)&v127[v128[12]], &qword_100BEC360);
  sub_100037768(v119, (uint64_t)&v127[v128[16]], &qword_100BDCA78);
  v129 = &v127[v128[20]];
  *(_QWORD *)v129 = 0;
  v129[8] = 1;
  *((_QWORD *)v129 + 2) = 0x3FF0000000000000;
  sub_100021A14(v121, &qword_100BDCA78);
  sub_100021A14(v126, &qword_100BEC360);
  v130 = *(void (**)(char *, uint64_t))(v166 + 8);
  v130(v124, v125);
  sub_100021A14(v119, &qword_100BDCA78);
  sub_100021A14(v103, &qword_100BEC360);
  return ((uint64_t (*)(char *, uint64_t))v130)(v123, v125);
}

uint64_t sub_10051DF78@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10051CE2C(*v1, v1[1], a1);
}

uint64_t sub_10051DF84(uint64_t a1)
{
  destroy for HomeAndWorkRefinementView(a1);
  return a1;
}

uint64_t sub_10051DFB0(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for AveragesScrollView(a2, a1);
  return a2;
}

unint64_t sub_10051DFE4()
{
  unint64_t result;

  result = qword_100BEC200;
  if (!qword_100BEC200)
  {
    result = swift_getWitnessTable(&unk_1009AAC20, &type metadata for AveragesScrollView);
    atomic_store(result, (unint64_t *)&qword_100BEC200);
  }
  return result;
}

unint64_t sub_10051E020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEC218;
  if (!qword_100BEC218)
  {
    v1 = sub_100075EB0(&qword_100BEC210);
    sub_10003D2DC(&qword_100BEC220, &qword_100BEC228);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEC218);
  }
  return result;
}

unint64_t sub_10051E0A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEC230[0];
  if (!qword_100BEC230[0])
  {
    v1 = sub_100075EB0(&qword_100BEC208);
    sub_10003D2DC(&qword_100BEC1F8, &qword_100BEC1F0);
    sub_10051DFE4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, qword_100BEC230);
  }
  return result;
}

uint64_t sub_10051E128(uint64_t a1)
{
  destroy for AveragesScrollView(a1);
  return a1;
}

void sub_10051E158(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10051B900((_QWORD *)(v1 + 16), a1);
}

void sub_10051E168(_BYTE *a1@<X8>)
{
  sub_10051AF68(a1);
}

uint64_t sub_10051E178()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10051E1AC(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_10051B010(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

double destroy for AveragesScrollView(uint64_t a1)
{
  double result;

  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 24));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AveragesScrollView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t *, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a2 + 3;
  v7 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t *, uint64_t, __n128))(v7 - 8);
  swift_retain(v4);
  v10 = swift_retain(v5);
  v9(a1 + 24, v6, v8, v10);
  v11 = a2[8];
  *(_QWORD *)(a1 + 64) = v11;
  swift_retain(v11 & 0x7FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t assignWithCopy for AveragesScrollView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  sub_100094D04((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AveragesScrollView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AveragesScrollView()
{
  return &type metadata for AveragesScrollView;
}

ValueMetadata *type metadata accessor for AveragesLoadingView()
{
  return &type metadata for AveragesLoadingView;
}

uint64_t sub_10051E3B0(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[4]);
}

uint64_t sub_10051E3E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *sub_10051E434(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v9 = a2[3];
  v8 = a2[4];
  v10 = a1[4];
  a1[3] = v9;
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

uint64_t sub_10051E4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t type metadata accessor for AveragesContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AveragesContentView);
}

void sub_10051E510()
{
  sub_10003D2DC(&qword_100BEC2B8, &qword_100BEC1E8);
}

uint64_t sub_10051E53C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB80D0, 1);
}

uint64_t sub_10051E54C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB80A8, 1);
}

uint64_t sub_10051E55C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AB8074, 1);
}

double sub_10051E590@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10051BCE8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10051E59C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD6D68;
  if (!qword_100BD6D68)
  {
    v1 = sub_100075EB0(&qword_100BD6D50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BD6D68);
  }
  return result;
}

unint64_t sub_10051E600()
{
  unint64_t result;

  result = qword_100BEC2C0;
  if (!qword_100BEC2C0)
  {
    result = swift_getWitnessTable(&unk_1009AAD44, &type metadata for AveragesDetailPickerView);
    atomic_store(result, (unint64_t *)&qword_100BEC2C0);
  }
  return result;
}

uint64_t sub_10051E63C()
{
  uint64_t v0;

  return sub_10051C538(*(uint64_t **)(v0 + 16));
}

double sub_10051E648(uint64_t a1)
{
  uint64_t v1;

  return sub_10051C620(a1, (uint64_t *)(v1 + 16));
}

double sub_10051E654@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10051C7A4(v1 + 16, a1);
}

uint64_t sub_10051E660()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 40));
  swift_release();
  return swift_deallocObject(v0, 88, 7);
}

void sub_10051E6A0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  sub_10051C7DC(a1, a2, v2 + 16);
}

void sub_10051E6A8()
{
  uint64_t v0;

  sub_10051D08C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10051E6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  sub_100094EE4();
  sub_10004A298();
}

uint64_t *assignWithCopy for AveragesDetailPickerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for AveragesDetailPickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AveragesDetailPickerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AveragesDetailPickerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AveragesDetailPickerView()
{
  return &type metadata for AveragesDetailPickerView;
}

double destroy for AveragesLoadedView(_QWORD *a1)
{
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AveragesLoadedView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v5 & 0x7FFFFFFFFFFFFFFFLL);
  return a1;
}

_QWORD *assignWithCopy for AveragesLoadedView(_QWORD *a1, _QWORD *a2)
{
  sub_100094D04(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AveragesLoadedView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AveragesLoadedView()
{
  return &type metadata for AveragesLoadedView;
}

uint64_t sub_10051E930(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;

  v1 = *a1;
  v2 = sub_100075EB0(&qword_100BD6D50);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v2, &type metadata for AveragesDetailPickerView, v1, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v6 = type metadata accessor for VStack(255, v4, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v6);
}

uint64_t sub_10051E9B4(uint64_t a1)
{
  return sub_10051E9DC(a1, &qword_100BEC2D0, &qword_100BEC2F0);
}

uint64_t sub_10051E9C8(uint64_t a1)
{
  return sub_10051E9DC(a1, &qword_100BEC310, &qword_100BEC338);
}

uint64_t sub_10051E9DC(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = sub_100075EB0(a2);
  sub_10003D2DC(a3, a2);
  v8[0] = v5;
  v8[1] = v6;
  return swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
}

uint64_t sub_10051EA44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8120, 1);
}

uint64_t sub_10051EA54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB80F8, 1);
}

unint64_t sub_10051EA64()
{
  unint64_t result;

  result = qword_100BEC3B0;
  if (!qword_100BEC3B0)
  {
    result = swift_getWitnessTable(&unk_1009DB2B8, &type metadata for AveragesKind);
    atomic_store(result, (unint64_t *)&qword_100BEC3B0);
  }
  return result;
}

unint64_t sub_10051EAA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEC3B8;
  if (!qword_100BEC3B8)
  {
    v1 = sub_100075EB0(&qword_100BEC3A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEC3B8);
  }
  return result;
}

uint64_t sub_10051EAFC(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for TemperatureAveragesDetailView(a2, a1);
  return a2;
}

unint64_t sub_10051EB38()
{
  unint64_t result;

  result = qword_100BEC3F0;
  if (!qword_100BEC3F0)
  {
    result = swift_getWitnessTable(&unk_1009D0FD0, &type metadata for PrecipitationAveragesDetailView);
    atomic_store(result, (unint64_t *)&qword_100BEC3F0);
  }
  return result;
}

unint64_t sub_10051EB74()
{
  unint64_t result;

  result = qword_100BEC3F8;
  if (!qword_100BEC3F8)
  {
    result = swift_getWitnessTable(&unk_100980F90, &type metadata for TemperatureAveragesDetailView);
    atomic_store(result, (unint64_t *)&qword_100BEC3F8);
  }
  return result;
}

uint64_t sub_10051EBB0(uint64_t a1)
{
  destroy for TemperatureAveragesDetailView(a1);
  return a1;
}

uint64_t sub_10051EBE4(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for TemperatureAveragesDetailView(a2, a1);
  return a2;
}

uint64_t sub_10051EC20(uint64_t a1)
{
  destroy for TemperatureAveragesDetailView(a1);
  return a1;
}

unint64_t sub_10051EC58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  result = qword_100BEC410;
  if (!qword_100BEC410)
  {
    v1 = sub_100075EB0(&qword_100BEC3C8);
    v2 = sub_100075EB0(&qword_100BEC398);
    v3 = type metadata accessor for SegmentedPickerStyle(255);
    sub_10003D2DC(&qword_100BEC3C0, &qword_100BEC398);
    v5[0] = v2;
    v5[1] = v3;
    v5[2] = v4;
    v5[3] = &protocol witness table for SegmentedPickerStyle;
    swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEC410);
  }
  return result;
}

void sub_10051ED24()
{
  sub_10003D2DC(&qword_100BEC418, &qword_100BEC420);
}

uint64_t *sub_10051ED50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

double sub_10051EDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10051EE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10051EE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10051EF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10051EF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10051EFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10051EFE4);
}

uint64_t sub_10051EFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for Date(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_10051F060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10051F06C);
}

uint64_t sub_10051F06C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for Date(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_10051F0E4()
{
  sub_100695FD0();
}

uint64_t sub_10051F0F8(uint64_t a1)
{
  return sub_100695FFC(a1);
}

void sub_10051F10C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];

  v102 = a3;
  v101 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v100 = v5;
  sub_10009D2A4();
  __chkstk_darwin(v6);
  v99 = (uint64_t)&v81 - v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v81 - v9;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v83 = (uint64_t)&v81 - v18;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v97 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  v96 = (uint64_t)&v81 - v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  v94 = v26;
  v95 = (uint64_t)&v81 - v25;
  if (a1)
  {
    v27 = v13;
    sub_1000E7174();
    v37 = v28 + 50;
    v38 = v28 + 51;
    v39 = v28 + 52;
    v40 = v28 + 57;
    v41 = v28 + 58;
    v42 = v28 + 59;
    v43 = v28 + 60;
    v44 = (char *)(v28 + 20);
  }
  else
  {
    sub_1000E7174();
    v37 = v28 + 50;
    v38 = v28 + 51;
    v39 = v28 + 52;
    v40 = v28 + 57;
    v41 = v28 + 58;
    v42 = v28 + 59;
    v43 = v28 + 60;
    v44 = (char *)(v28 + 20);
    v27 = v13;
  }
  v45 = *v44;
  v46 = *v28;
  v47 = *v29;
  v85 = *v30;
  v84 = *v31;
  v48 = *v32;
  v49 = *v33;
  v50 = *v34;
  v51 = *v35;
  v52 = *v36;
  v88 = *v37;
  v89 = v52;
  v53 = *v38;
  v86 = *v39;
  v87 = v53;
  v54 = *v40;
  v92 = *v41;
  v93 = v54;
  v55 = *v42;
  v90 = *v43;
  v91 = v55;
  v56 = v102 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_map;
  sub_1000992EC(v102 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_map, (uint64_t)v103);
  sub_10003773C(v56, v27, &qword_100BC4A98);
  v57 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v27, 1, v57) == 1)
  {
    sub_100021A14(v27, &qword_100BC4A98);
    v58 = 1;
    v59 = v94;
  }
  else
  {
    v82 = v51;
    sub_10009D3BC(v27 + *(int *)(v57 + 20), (uint64_t)v16);
    sub_1000215BC(v27, type metadata accessor for LocationComponentContainerViewModel);
    v60 = v83;
    sub_10007C77C((uint64_t)v16, v83, type metadata accessor for LocationComponentViewModel);
    if ((v45 & 1) != 0)
    {
      sub_1000215BC(v60, type metadata accessor for LocationComponentViewModel);
      v58 = 1;
      v59 = v94;
    }
    else
    {
      v59 = v94;
      sub_10007C77C(v60, v94, type metadata accessor for LocationComponentViewModel);
      v58 = 0;
      v61 = (_QWORD *)(v59 + *(int *)(v101 + 20));
      *v61 = v48;
      v61[1] = v49;
      v62 = v82;
      v61[2] = v50;
      v61[3] = v62;
    }
  }
  v63 = v101;
  _s7Weather24LocationCompositionStateOwst_0(v59, v58, 1, v101);
  v64 = v95;
  sub_1002228F0(v59, v95);
  v65 = v96;
  _s7Weather24LocationCompositionStateOwst_0(v96, 1, 1, v63);
  v66 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v67 = v98;
  sub_100098A1C(v66, v98);
  v68 = (_QWORD *)(v67 + *(int *)(v63 + 20));
  *v68 = v46;
  v68[1] = v47;
  v69 = v84;
  v68[2] = v85;
  v68[3] = v69;
  v70 = v97;
  sub_10003773C(v64, v97, &qword_100BCC760);
  v71 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v72 = v99;
  sub_100098A1C(v71, v99);
  v73 = (_QWORD *)(v72 + *(int *)(v63 + 20));
  v74 = v88;
  *v73 = v89;
  v73[1] = v74;
  v75 = v86;
  v73[2] = v87;
  v73[3] = v75;
  v76 = sub_1000CD630(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v77 = v100;
  sub_100098A1C(v76, v100);
  v78 = (_QWORD *)(v77 + *(int *)(v63 + 20));
  v79 = v92;
  *v78 = v93;
  v78[1] = v79;
  v80 = v90;
  v78[2] = v91;
  v78[3] = v80;
  sub_10087CED0(v65, v67, v70, v72, v77);
  sub_100021A14(v64, &qword_100BCC760);
  sub_100098640();
}

void sub_10051F604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 *v76;
  __n128 *v77;
  uint64_t v78;
  uint64_t v79;
  __n128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  _BYTE v135[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000878BC();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1;
  v12 = a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_map, (uint64_t)v135);
  sub_10003773C(v12, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v13 = sub_1000BA294(&qword_100BCC750);
    v14 = swift_allocObject(v13, 272, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10097FA60;
    v15 = sub_1000BA294(&qword_100BCC758);
    v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = *(_QWORD *)(v7 + 72);
    v18 = v15;
    v19 = (__n128 *)sub_1000C2514(v15, v16 + v17);
    v20 = sub_100099954(v19, (__n128)xmmword_10097CA50);
    v21 = v11;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_severeAlert, (uint64_t)v20 + v16);
    *(_QWORD *)(v14 + 32) = sub_1000B4580();
    *(_QWORD *)(v14 + 40) = v22;
    *(_QWORD *)(v14 + 48) = v23;
    v24 = (__n128 *)sub_1000C3C18();
    sub_1000CD818(v24);
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_nextHourPrecipitation, v25);
    *(_QWORD *)(v14 + 56) = sub_1000B4580();
    *(_QWORD *)(v14 + 64) = v26;
    *(_QWORD *)(v14 + 72) = v27;
    v28 = (__n128 *)sub_1000C3C18();
    sub_1000CD818(v28);
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_newsArticle, v29);
    *(_QWORD *)(v14 + 80) = sub_1000B4580();
    *(_QWORD *)(v14 + 88) = v30;
    *(_QWORD *)(v14 + 96) = v31;
    v32 = (__n128 *)sub_1000C3C18();
    sub_1000CD818(v32);
    sub_10009D3BC(*(_QWORD *)(v11 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v33);
    *(_QWORD *)(v14 + 104) = sub_1000B4580();
    *(_QWORD *)(v14 + 112) = v34;
    *(_QWORD *)(v14 + 120) = v35;
    v36 = sub_1000C3C18();
    *(_OWORD *)(v36 + 16) = v134;
    sub_10009D3BC(*(_QWORD *)(v11 + 16) + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v36 + v16);
    *(_QWORD *)(v14 + 128) = sub_100080C44(v36);
    *(_QWORD *)(v14 + 136) = v37;
    *(_QWORD *)(v14 + 144) = v38;
    v39 = v17;
    v131 = v16 + 2 * v17;
    v40 = (__n128 *)sub_1000C2514(v18, v131);
    v41 = (char *)sub_100099954(v40, (__n128)xmmword_10097DA20) + v16;
    v42 = *(_QWORD *)(v11 + 16);
    v43 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v43, v44);
    sub_1000C3608(v42 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v41[v39]);
    *(_QWORD *)(v14 + 152) = sub_1000B4580();
    *(_QWORD *)(v14 + 160) = v45;
    *(_QWORD *)(v14 + 168) = v46;
    v47 = (__n128 *)sub_1000C2514(v18, v131);
    sub_100098A24(v47);
    v130 = v21;
    v48 = *(_QWORD *)(v21 + 16);
    v49 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_10008611C(v49, v50);
    sub_10008611C(v48 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v41[v39]);
    *(_QWORD *)(v14 + 176) = sub_1000B4580();
    *(_QWORD *)(v14 + 184) = v51;
    *(_QWORD *)(v14 + 192) = v52;
    v53 = (__n128 *)sub_1000C2514(v18, v131);
    sub_100098A24(v53);
    v54 = *(_QWORD *)(v21 + 16);
    v55 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v55, v56);
    sub_100095B78(v54 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v41[v39], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v14 + 200) = sub_1000B4580();
    *(_QWORD *)(v14 + 208) = v57;
    *(_QWORD *)(v14 + 216) = v58;
    v59 = (__n128 *)sub_1000C2514(v18, v131);
    sub_100098A24(v59);
    v60 = *(_QWORD *)(v21 + 16);
    v61 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_100098A1C(v61, v62);
    sub_100098A1C(v60 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v41[v39]);
    *(_QWORD *)(v14 + 224) = sub_1000B4580();
    *(_QWORD *)(v14 + 232) = v63;
    *(_QWORD *)(v14 + 240) = v64;
    v65 = sub_1000C2514(v18, v131);
    *(_OWORD *)(v65 + 16) = v134;
    v66 = *(_QWORD *)(v130 + 16);
    sub_100098A1C(v66 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v65 + v16);
    sub_100098A1C(v66 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v65 + v16 + v39);
    *(_QWORD *)(v14 + 248) = sub_100080C44(v65);
    *(_QWORD *)(v14 + 256) = v67;
    *(_QWORD *)(v14 + 264) = v68;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v69 = sub_1000BA294(&qword_100BCC750);
    v70 = swift_allocObject(v69, 296, 7);
    *(_OWORD *)(v70 + 16) = xmmword_100989890;
    v71 = sub_1000BA294(&qword_100BCC758);
    v133 = *(_QWORD *)(v7 + 72);
    v72 = *(unsigned __int8 *)(v7 + 80);
    v73 = (v72 + 32) & ~v72;
    v74 = v72 | 7;
    v75 = v71;
    v76 = (__n128 *)sub_1000C3600(v71, v73 + v133);
    v77 = sub_100099954(v76, (__n128)xmmword_10097CA50);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_severeAlert, (uint64_t)v77 + v73);
    *(_QWORD *)(v70 + 32) = sub_1000B4588();
    *(_QWORD *)(v70 + 40) = v78;
    *(_QWORD *)(v70 + 48) = v79;
    v80 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v80);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_nextHourPrecipitation, v81);
    *(_QWORD *)(v70 + 56) = sub_1000B4588();
    *(_QWORD *)(v70 + 64) = v82;
    *(_QWORD *)(v70 + 72) = v83;
    v84 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v84);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather25NoAqiSevereNhpNewsContent8_Storage_newsArticle, v85);
    *(_QWORD *)(v70 + 80) = sub_1000B4588();
    *(_QWORD *)(v70 + 88) = v86;
    *(_QWORD *)(v70 + 96) = v87;
    v88 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v88);
    sub_1000B4590(v89 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v90);
    *(_QWORD *)(v70 + 104) = sub_1000B4588();
    *(_QWORD *)(v70 + 112) = v91;
    *(_QWORD *)(v70 + 120) = v92;
    v93 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v93);
    sub_1000B4590(v94 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v95);
    *(_QWORD *)(v70 + 128) = sub_1000B4588();
    *(_QWORD *)(v70 + 136) = v96;
    *(_QWORD *)(v70 + 144) = v97;
    v98 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v98);
    sub_1000B4590(v10, v99);
    *(_QWORD *)(v70 + 152) = sub_1000B4580();
    *(_QWORD *)(v70 + 160) = v100;
    *(_QWORD *)(v70 + 168) = v101;
    v132 = v73 + 2 * v133;
    v102 = (__n128 *)swift_allocObject(v75, v132, v74);
    v103 = (char *)sub_100099954(v102, (__n128)xmmword_10097DA20) + v73;
    v104 = *(_QWORD *)(a1 + 16);
    v105 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v105, v106);
    sub_1000C3608(v104 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v103[v133]);
    *(_QWORD *)(v70 + 176) = sub_1000B4588();
    *(_QWORD *)(v70 + 184) = v107;
    *(_QWORD *)(v70 + 192) = v108;
    v109 = (__n128 *)sub_1000C3600(v75, v132);
    sub_1000C0D34(v109);
    v110 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_100098A1C(v110, v111);
    sub_100098A1C(v104 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v103[v133]);
    *(_QWORD *)(v70 + 200) = sub_1000B4588();
    *(_QWORD *)(v70 + 208) = v112;
    *(_QWORD *)(v70 + 216) = v113;
    v114 = (__n128 *)sub_1000C3600(v75, v132);
    sub_1000C0D34(v114);
    v115 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v115, v116);
    sub_1000C3608(v104 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v103[v133]);
    *(_QWORD *)(v70 + 224) = sub_1000B4588();
    *(_QWORD *)(v70 + 232) = v117;
    *(_QWORD *)(v70 + 240) = v118;
    v119 = sub_1000C3600(v75, v132);
    *(_OWORD *)(v119 + 16) = v134;
    v120 = v119 + v73;
    v121 = *(_QWORD *)(a1 + 16);
    v122 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_10008611C(v122, v123);
    sub_10008611C(v121 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v120 + v133);
    *(_QWORD *)(v70 + 248) = sub_1000B4588();
    *(_QWORD *)(v70 + 256) = v124;
    *(_QWORD *)(v70 + 264) = v125;
    v126 = sub_1000C3600(v75, v132);
    *(_OWORD *)(v126 + 16) = v134;
    v127 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v127 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v126 + v73, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v127 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v126 + v73 + v133, type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v70 + 272) = sub_100080C44(v126);
    *(_QWORD *)(v70 + 280) = v128;
    *(_QWORD *)(v70 + 288) = v129;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_10051FDB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  v20 = v4;
  sub_10009D2A4();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v19 = v17;
  swift_release(v16);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather39LocationNoAqiSevereNhpNewsConfiguration8_Storage_map);
  sub_1000BD32C();
  sub_1000C5218();
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v2);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather39LocationNoAqiSevereNhpNewsConfiguration8_Storage_newsArticle);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather39LocationNoAqiSevereNhpNewsConfiguration8_Storage_nextHourPrecipitation);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather39LocationNoAqiSevereNhpNewsConfiguration8_Storage_severeAlert);
  v18 = v20;
  sub_1000BD32C();
  sub_1000C5218();
  sub_1001ECDB4(v19, v15, v10, v8, v18);
  sub_100098640();
}

uint64_t sub_10051FF60(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  id v13;
  __n128 v14;
  _BYTE v15[16];

  v3 = type metadata accessor for LocationModel(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100098728();
  v7 = v6 - v5;
  v8 = OBJC_IVAR____TtCV7Weather25LocationViewerPageControl11Coordinator_pages;
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtCV7Weather25LocationViewerPageControl11Coordinator_pages) + 16);
  result = (uint64_t)sub_1000C4B24();
  if (result < 0 || result >= v9)
    return result;
  result = (uint64_t)sub_1000C4B24();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v1 + v8);
  if ((unint64_t)result >= *(_QWORD *)(v11 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v7, v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * result, v3);
  v12 = objc_msgSend(a1, "interactionState");
  if (v12 == (id)2)
  {
    v13 = 0;
  }
  else
  {
    v12 = (id)static Animation.default.getter(v12);
    v13 = v12;
  }
  __chkstk_darwin(v12);
  *(_QWORD *)&v15[-16] = v1;
  *(_QWORD *)&v15[-8] = v7;
  withAnimation<A>(_:_:)(v13, sub_100520298, &v15[-32], &type metadata for () + 1);
  v14 = swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v7, v3, v14);
}

uint64_t sub_1005200C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v2 = type metadata accessor for Location.Identifier(0);
  __chkstk_darwin(v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_1000BA294(&qword_100BECFA0);
  __chkstk_darwin(v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a1 + OBJC_IVAR____TtCV7Weather25LocationViewerPageControl11Coordinator_selection;
  swift_beginAccess(v8, v12, 0, 0);
  v9 = sub_1005202B0(v8, (uint64_t)v7);
  LocationModel.identifier.getter(v9);
  Binding.wrappedValue.setter(v4, v5);
  return sub_100021A68((uint64_t)v7, &qword_100BECFA0);
}

uint64_t sub_100520208()
{
  uint64_t v0;

  sub_100021A68(v0 + OBJC_IVAR____TtCV7Weather25LocationViewerPageControl11Coordinator_selection, &qword_100BECFA0);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100520250()
{
  return type metadata accessor for LocationViewerPageControl.Coordinator(0);
}

void sub_100520264(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10013079C(&qword_100BED050, (uint64_t)&unk_1009AAEF8);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_100520298()
{
  uint64_t v0;

  return sub_1005200C0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1005202B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BECFA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005202F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v6 = *(int *)(a3 + 24);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (uint64_t)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v10 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
    v11 = (char *)v7 + v10;
    v12 = v8 + v10;
    v13 = type metadata accessor for Location.Identifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_1005203BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (_QWORD *)(a1 + v4);
  v6 = a2 + v4;
  v7 = *(_QWORD *)(a2 + v4 + 8);
  *v5 = *(_QWORD *)(a2 + v4);
  v5[1] = v7;
  v8 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v9 = (char *)v5 + v8;
  v10 = v6 + v8;
  v11 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_100520440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = (_QWORD *)(a2 + v6);
  *(_QWORD *)(a1 + v6) = *v8;
  swift_release();
  *(_QWORD *)(v7 + 8) = v8[1];
  swift_release();
  v9 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v10 = v7 + v9;
  v11 = (char *)v8 + v9;
  v12 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_1005204EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005204F8);
}

uint64_t sub_1005204F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BECFA0);
    return _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100520570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10052057C);
}

_QWORD *sub_10052057C(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BECFA0);
    return (_QWORD *)_s7Weather24LocationCompositionStateOwst_0((uint64_t)v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1005205EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100520630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v0 = type metadata accessor for LocationViewComponent(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for LocationComponentContainerViewModel(0);
  __chkstk_darwin(v1);
  v40 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v3);
  sub_1000860D0();
  v39 = v4;
  sub_10009D2A4();
  __chkstk_darwin(v5);
  sub_1000860D0();
  v38 = v6;
  sub_10009D2A4();
  __chkstk_darwin(v7);
  sub_1000860D0();
  v37 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_1000860D0();
  v42 = v10;
  sub_10009D2A4();
  __chkstk_darwin(v11);
  sub_1000860D0();
  v41 = v12;
  sub_10009D2A4();
  v14 = __chkstk_darwin(v13);
  v34 = (uint64_t)&v33 - v15;
  v16 = __chkstk_darwin(v14);
  v35 = (uint64_t)&v33 - v17;
  v18 = __chkstk_darwin(v16);
  v36 = (uint64_t)&v33 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v33 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v33 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v33 - v26;
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_hourlyForecast);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_dailyForecast);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_uvIndex);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_sunriseSunset);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_wind);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_precipitationTotal);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_feelsLike);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_humidity);
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_visibility);
  v28 = v37;
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_pressure);
  v29 = v38;
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_averages);
  v30 = v39;
  sub_1000BC49C();
  sub_1000BAD5C();
  sub_1000BAFC0(OBJC_IVAR____TtCV7Weather37LocationCommonConfigurationComponents8_Storage_moon);
  v31 = (uint64_t)v40;
  sub_1000BC49C();
  sub_1000BAD5C();
  v32 = type metadata accessor for LocationCommonViewComponents._Storage(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  sub_1001DD3BC((uint64_t)v27, (uint64_t)v25, (uint64_t)v22, v36, v35, v34, v41, v42, v28, v29, v30, v31);
}

_QWORD *sub_1005209B4(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v8 = a3[10];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
  }
  return v4;
}

uint64_t sub_100520AAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  v8 = a3[10];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100520B98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  return a1;
}

uint64_t sub_100520C50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

void sub_100520D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100079F70();
  }
  else
  {
    v6 = sub_100098778();
    _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 40), a2, v6);
  }
}

uint64_t sub_100520D90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100098778();
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_100520DF8(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, char a13, char a14)
{
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[4];
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v89 = a8;
  v101 = a7;
  v86 = a5;
  v87 = a6;
  v100 = a4;
  LODWORD(v94) = a3;
  v99 = a9;
  v16 = a1;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v93 = v18;
  v19 = sub_100098778();
  v90 = *(_QWORD *)(v19 - 8);
  v91 = v19;
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v103 = v21;
  v97 = sub_1000D18E8();
  sub_10009D98C();
  __chkstk_darwin(v22);
  v98 = &v84[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10009D2A4();
  __chkstk_darwin(v24);
  sub_1000860D0();
  v102 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_1000860D0();
  v96 = v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  sub_1000860D0();
  v95 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_1000860D0();
  v92 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v88 = v33;
  sub_10009D2A4();
  v35 = __chkstk_darwin(v34);
  v37 = &v84[-v36];
  v38 = __chkstk_darwin(v35);
  v40 = &v84[-v39];
  v41 = __chkstk_darwin(v38);
  v43 = &v84[-v42];
  v44 = __chkstk_darwin(v41);
  v46 = &v84[-v45];
  v47 = __chkstk_darwin(v44);
  v49 = &v84[-v48];
  v50 = __chkstk_darwin(v47);
  v52 = &v84[-v51];
  __chkstk_darwin(v50);
  v54 = &v84[-v53];
  sub_10005EAA0(v14, (uint64_t)&v84[-v53]);
  if (v16 == 2)
    v55 = *v54;
  else
    v55 = v16 & 1;
  v85 = v55;
  v56 = v94;
  sub_10005EA64((uint64_t)v54);
  sub_1000D90D0();
  if (a2)
  {
    v94 = a2;
  }
  else
  {
    v94 = *((_QWORD *)v52 + 1);
    swift_bridgeObjectRetain(v94);
  }
  v57 = v100;
  swift_bridgeObjectRetain(a2);
  sub_10005EA64((uint64_t)v52);
  sub_10005EAA0(v14, (uint64_t)v49);
  if (v56 == 2)
    v58 = v49[16];
  else
    v58 = v56 & 1;
  v100 = v58;
  v59 = v96;
  v60 = v86;
  sub_10005EA64((uint64_t)v49);
  sub_1000CD82C();
  if (v57 == 2)
    v61 = v46[17];
  else
    v61 = v57 & 1;
  LODWORD(v96) = v61;
  v62 = (int *)v97;
  v63 = v93;
  v64 = v87;
  sub_10005EA64((uint64_t)v46);
  sub_100098E7C();
  if (v60 == 2)
    v65 = v43[18];
  else
    v65 = v60 & 1;
  LODWORD(v97) = v65;
  v66 = (uint64_t)v98;
  v67 = v95;
  sub_10005EA64((uint64_t)v43);
  sub_1000C1710();
  if (v64 == 2)
    v68 = v40[19];
  else
    v68 = v64 & 1;
  LODWORD(v98) = v68;
  v69 = v91;
  v70 = v89;
  sub_10005EA64((uint64_t)v40);
  sub_10007C714(v101, v63);
  sub_10005EAA0(v14, (uint64_t)v37);
  if (_s7Weather24LocationCompositionStateOwet_0(v63, 1, v69) == 1)
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v90 + 16))(v103, &v37[v62[10]], v69);
    sub_10005EA64((uint64_t)v37);
    sub_1001C8EF4(v63);
  }
  else
  {
    sub_10005EA64((uint64_t)v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 32))(v103, v63, v69);
  }
  v71 = v92;
  v72 = v88;
  v73 = a10;
  sub_100098E7C();
  if (v70 == 2)
    v74 = *(_BYTE *)(v72 + v62[11]);
  else
    v74 = v70 & 1;
  sub_10005EA64(v72);
  sub_1000C1710();
  if (a10 == 3)
    v73 = *(_BYTE *)(v71 + v62[12]);
  sub_10005EA64(v71);
  sub_10005EAA0(v14, v67);
  if (a11 == 2)
    v75 = *(_BYTE *)(v67 + v62[13]);
  else
    v75 = a11 & 1;
  sub_10005EA64(v67);
  sub_1000D90D0();
  if (a12 == 2)
    v76 = *(_BYTE *)(v59 + v62[14]);
  else
    v76 = a12 & 1;
  sub_10005EA64(v59);
  v77 = v102;
  sub_10005EAA0(v14, v102);
  if (a13 == 2)
    v78 = *(_BYTE *)(v77 + v62[15]);
  else
    v78 = a13 & 1;
  v79 = v77;
  v80 = v85;
  sub_10005EA64(v79);
  sub_1000CD82C();
  if (a14 == 2)
    v81 = *(_BYTE *)(v66 + v62[16]);
  else
    v81 = a14 & 1;
  v82 = v99;
  v83 = v94;
  sub_10005EA64(v66);
  sub_100521308(v80, v83, v100, v96, v97, (char)v98, v103, v74, v82, v73, v75, v76, v78, v81);
  sub_100098640();
}

void sub_100521308(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, char a13, char a14)
{
  int *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  *(_BYTE *)(a9 + 18) = a5;
  *(_BYTE *)(a9 + 19) = a6;
  v17 = (int *)sub_1000D18E8();
  v18 = a9 + v17[10];
  v19 = sub_100098778();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a7, v19);
  *(_BYTE *)(a9 + v17[11]) = a8;
  *(_BYTE *)(a9 + v17[12]) = a10;
  *(_BYTE *)(a9 + v17[13]) = a11;
  *(_BYTE *)(a9 + v17[14]) = a12;
  *(_BYTE *)(a9 + v17[15]) = a13;
  *(_BYTE *)(a9 + v17[16]) = a14;
  sub_100098640();
}

uint64_t sub_1005213C0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 0xD00000000000001BLL)
  {
    v4 = 0x8000000100A09450;
    if (a2 == 0x8000000100A09450)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100A09450, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v6 = 0x8000000100A09470;
    if (a2 == 0x8000000100A09470)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A09470, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x5364657265746E65 && a2 == 0xEF73676E69747465)
  {
    v8 = 0xEF73676E69747465;
    goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5364657265746E65, 0xEF73676E69747465, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100A09490)
  {
    v9 = 0x8000000100A09490;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100A09490, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x8000000100A094B0)
  {
    v10 = 0x8000000100A094B0;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100A094B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100A094E0)
  {
    v11 = 0x8000000100A094E0;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100A094E0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000014)
  {
    v12 = 0x8000000100A09500;
    if (a2 == 0x8000000100A09500)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A09500, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100A09520)
  {
    v13 = 0x8000000100A09520;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100A09520, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_47;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100A09540)
  {
    v14 = 0x8000000100A09540;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100A09540, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100A09560)
  {
    v15 = 0x8000000100A09560;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100A09560, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v16 = 0x8000000100A09580;
    if (a2 == 0x8000000100A09580)
      goto LABEL_64;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100A09580, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x8000000100A095A0)
  {
    v17 = 0x8000000100A095A0;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100A095A0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_70;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001009F4B80)
  {
    swift_bridgeObjectRelease(0x80000001009F4B80);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001009F4B80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_10052188C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005218C8 + 4 * byte_1009AAF90[a1]))(0xD00000000000001BLL, 0x8000000100A09450);
}

unint64_t sub_1005218C8()
{
  return 0xD000000000000014;
}

uint64_t sub_1005219A8(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v22;
  uint64_t v23;

  v3 = v1;
  v5 = sub_1000BA294(&qword_100BED130);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_100522148();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotificationsOptInState.CodingKeys, &type metadata for NotificationsOptInState.CodingKeys, v12, v10, v11);
  v13 = *v3;
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, &v23, v5);
  if (!v2)
  {
    v23 = *((_QWORD *)v3 + 1);
    v22 = 1;
    v14 = sub_1000BA294(&qword_100BE1330);
    v15 = sub_10041728C(&qword_100BE1348, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    sub_1000C1704((uint64_t)&v23, (uint64_t)&v22, v5, v14, v15);
    sub_1000BAFCC(v3[16], 2);
    sub_1000BAFCC(v3[17], 3);
    sub_1000BAFCC(v3[18], 4);
    sub_1000BAFCC(v3[19], 5);
    v16 = (int *)type metadata accessor for NotificationsOptInState(0);
    v17 = (uint64_t)&v3[v16[10]];
    LOBYTE(v23) = 6;
    v18 = type metadata accessor for Date(0);
    v19 = sub_1001196A4(&qword_100BC3578, (uint64_t)&protocol conformance descriptor for Date);
    sub_1000C1704(v17, (uint64_t)&v23, v5, v18, v19);
    sub_1000BAFCC(v3[v16[11]], 7);
    LOBYTE(v23) = v3[v16[12]];
    v22 = 8;
    v20 = sub_1005221C0();
    sub_1000C1704((uint64_t)&v23, (uint64_t)&v22, v5, (uint64_t)&type metadata for TipViewPlacement, v20);
    sub_1000BAFCC(v3[v16[13]], 9);
    sub_1000BAFCC(v3[v16[14]], 10);
    sub_1000BAFCC(v3[v16[15]], 11);
    sub_1000BAFCC(v3[v16[16]], 12);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100521C48(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v23 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v23 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v20 = sub_1000BA294(&qword_100BED118);
  __chkstk_darwin(v20);
  sub_100098728();
  v22 = (int *)type metadata accessor for NotificationsOptInState(0);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v24 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_100522148();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotificationsOptInState.CodingKeys, &type metadata for NotificationsOptInState.CodingKeys, v13, v11, v12);
  if (v2)
  {
    sub_1000B4838();
  }
  else
  {
    LOBYTE(v26) = 0;
    *(_BYTE *)v24 = sub_1000C2C0C((uint64_t)&v26, v20) & 1;
    sub_1000BA294(&qword_100BE1330);
    v25 = 1;
    v14 = sub_10041728C(&qword_100BE1338, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    sub_1000DDC78(v14, (uint64_t)&v25);
    *(_QWORD *)(v24 + 8) = v26;
    *(_BYTE *)(v24 + 16) = sub_1000BC4A4(2) & 1;
    *(_BYTE *)(v24 + 17) = sub_1000BC4A4(3) & 1;
    *(_BYTE *)(v24 + 18) = sub_1000BC4A4(4) & 1;
    *(_BYTE *)(v24 + 19) = sub_1000BC4A4(5) & 1;
    LOBYTE(v26) = 6;
    v15 = sub_1001196A4(&qword_100BC3558, (uint64_t)&protocol conformance descriptor for Date);
    sub_1000DDC78(v15, (uint64_t)&v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v24 + v22[10], v8, v23);
    *(_BYTE *)(v24 + v22[11]) = sub_1000BC4A4(7) & 1;
    v25 = 8;
    sub_100522184();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for TipViewPlacement, &v25, v20);
    *(_BYTE *)(v24 + v22[12]) = v26;
    v16 = sub_1000BC4A4(9);
    sub_1000E7198(v16, v22[13]);
    LOBYTE(v26) = 10;
    v17 = sub_1000C2C0C((uint64_t)&v26, v20);
    sub_1000E7198(v17, v22[14]);
    LOBYTE(v26) = 11;
    v18 = sub_1000C2C0C((uint64_t)&v26, v20);
    sub_1000E7198(v18, v22[15]);
    LOBYTE(v26) = 12;
    v19 = sub_1000C2C0C((uint64_t)&v26, v20);
    sub_1000DD08C();
    *(_BYTE *)(v24 + v22[16]) = v19 & 1;
    sub_10005EAA0(v24, a2);
    sub_1000B4838();
    sub_10005EA64(v24);
  }
}

uint64_t sub_100522078()
{
  unsigned __int8 *v0;

  return sub_10052188C(*v0);
}

uint64_t sub_100522080@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005213C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005220A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100522148();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005220CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100522148();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005220F4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100521C48(a1, a2);
}

uint64_t sub_100522108(_QWORD *a1)
{
  return sub_1005219A8(a1);
}

void sub_10052211C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_100696020(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SBYTE1(vars8), SBYTE2(vars8), SBYTE3(vars8), SBYTE4(vars8), SBYTE5(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_100522130()
{
  sub_1006962D4();
}

unint64_t sub_100522148()
{
  unint64_t result;

  result = qword_100BED120;
  if (!qword_100BED120)
  {
    result = swift_getWitnessTable(&unk_1009AB184, &type metadata for NotificationsOptInState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BED120);
  }
  return result;
}

unint64_t sub_100522184()
{
  unint64_t result;

  result = qword_100BED128;
  if (!qword_100BED128)
  {
    result = swift_getWitnessTable(&unk_10098142C, &type metadata for TipViewPlacement);
    atomic_store(result, (unint64_t *)&qword_100BED128);
  }
  return result;
}

unint64_t sub_1005221C0()
{
  unint64_t result;

  result = qword_100BED138;
  if (!qword_100BED138)
  {
    result = swift_getWitnessTable(&unk_100981404, &type metadata for TipViewPlacement);
    atomic_store(result, (unint64_t *)&qword_100BED138);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NotificationsOptInState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 12) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v5 = v6 - 13;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationsOptInState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1005222D0 + 4 * byte_1009AAFA2[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100522304 + 4 * byte_1009AAF9D[v4]))();
}

uint64_t sub_100522304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10052230C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100522314);
  return result;
}

uint64_t sub_100522320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100522328);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_10052232C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100522334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationsOptInState.CodingKeys()
{
  return &type metadata for NotificationsOptInState.CodingKeys;
}

unint64_t sub_100522354()
{
  unint64_t result;

  result = qword_100BED140;
  if (!qword_100BED140)
  {
    result = swift_getWitnessTable(&unk_1009AB15C, &type metadata for NotificationsOptInState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BED140);
  }
  return result;
}

unint64_t sub_100522394()
{
  unint64_t result;

  result = qword_100BED148;
  if (!qword_100BED148)
  {
    result = swift_getWitnessTable(&unk_1009AB0CC, &type metadata for NotificationsOptInState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BED148);
  }
  return result;
}

unint64_t sub_1005223D4()
{
  unint64_t result;

  result = qword_100BED150;
  if (!qword_100BED150)
  {
    result = swift_getWitnessTable(&unk_1009AB0F4, &type metadata for NotificationsOptInState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BED150);
  }
  return result;
}

void sub_100522410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  void (*v33)(uint64_t, uint64_t);
  _QWORD v34[2];

  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = sub_1000BA294(&qword_100BCD780);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  sub_1000BA294(&qword_100BCD680);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_10009883C();
  v18 = v16 - v17;
  __chkstk_darwin(v19);
  sub_10009E3CC();
  __chkstk_darwin(v20);
  v22 = (char *)v34 - v21;
  sub_100522690(a1, a2);
  if ((v23 & 1) == 0)
    goto LABEL_13;
  v24 = type metadata accessor for ToolbarSearchViewModel(0);
  v25 = a1;
  v26 = a2;
  v27 = v24;
  v28 = *(int *)(v24 + 20);
  v34[0] = v25;
  sub_10006F614(v25 + v28, (uint64_t)v22);
  v34[1] = v27;
  sub_10006F614(v26 + *(int *)(v27 + 20), v2);
  v29 = v14 + *(int *)(v10 + 48);
  sub_10006F614((uint64_t)v22, v14);
  sub_10006F614(v2, v29);
  sub_100098750(v14);
  if (v30)
  {
    sub_1000BA874(v2);
    sub_1000BA874((uint64_t)v22);
    sub_100098750(v29);
    if (v30)
    {
      sub_100021A3C(v14, &qword_100BCD680);
LABEL_12:
      sub_10094907C();
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  sub_10006F614(v14, v18);
  sub_100098750(v29);
  if (v30)
  {
    sub_100021A3C(v2, &qword_100BCD680);
    sub_100021A3C((uint64_t)v22, &qword_100BCD680);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
LABEL_10:
    sub_100021A3C(v14, &qword_100BCD780);
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v29, v5);
  v31 = sub_100062598();
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v9, v5, v31);
  v33 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v33(v9, v5);
  sub_1000BA874(v2);
  sub_1000BA874((uint64_t)v22);
  v33(v18, v5);
  sub_1000BA874(v14);
  if ((v32 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  sub_100098640();
}

void sub_100522690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[2];

  type metadata accessor for PreviewLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_10009883C();
  v21[0] = v5 - v6;
  __chkstk_darwin(v7);
  v21[1] = (char *)v21 - v8;
  type metadata accessor for ToolbarSearchViewModel.State(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009883C();
  __chkstk_darwin(v10);
  sub_10009E3CC();
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  sub_1000BA294(&qword_100BED158);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v19 = v16 - v15 + *(int *)(v18 + 48);
  sub_100522B80(a1, v16 - v15);
  sub_100522B80(a2, v19);
  v20 = (char *)sub_1005227FC + 4 * byte_1009AB1E0[swift_getEnumCaseMultiPayload(v17)];
  __asm { BR              X10 }
}

void sub_1005227FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100522B80(v0, v1);
  v2 = sub_1000BA678();
  if ((_DWORD)v2)
    sub_100021A3C(v0, &qword_100BED158);
  else
    sub_1000DF71C(v2, type metadata accessor for ToolbarSearchViewModel.State);
  sub_100098640();
}

uint64_t type metadata accessor for ToolbarSearchViewModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BED1C0, (uint64_t)&nominal type descriptor for ToolbarSearchViewModel);
}

uint64_t type metadata accessor for ToolbarSearchViewModel.State(uint64_t a1)
{
  return sub_100098190(a1, qword_100BED270, (uint64_t)&nominal type descriptor for ToolbarSearchViewModel.State);
}

uint64_t sub_100522B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarSearchViewModel.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100522BC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *result;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ToolbarSearchViewModel.State(0);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 1u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10 = a1;
        v11 = v7;
        v12 = 1;
        goto LABEL_9;
      case 2u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        v10 = a1;
        v11 = v7;
        v12 = 2;
        goto LABEL_9;
      case 3u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        swift_bridgeObjectRetain();
        v16 = (char *)a2 + *(int *)(sub_1000BA294(&qword_100BED160) + 48);
        type metadata accessor for PreviewLocation(0);
        v17 = (char *)&loc_100522D1C + 4 * byte_1009AB1E9[swift_getEnumCaseMultiPayload(v16)];
        __asm { BR              X10 }
        return result;
      case 4u:
        v18 = a2[1];
        *a1 = *a2;
        a1[1] = v18;
        v19 = a2[3];
        a1[2] = a2[2];
        a1[3] = v19;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10 = a1;
        v11 = v7;
        v12 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v20 = *(int *)(a3 + 20);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for Location.Identifier(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
    {
      v24 = sub_1000BA294(&qword_100BCD680);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

double sub_100522F60(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for ToolbarSearchViewModel.State(0);
  switch(swift_getEnumCaseMultiPayload(a1))
  {
    case 1u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease();
      v4 = (id *)(a1 + *(int *)(sub_1000BA294(&qword_100BED160) + 48));
      type metadata accessor for PreviewLocation(0);
      switch(swift_getEnumCaseMultiPayload(v4))
      {
        case 0u:
          v5 = type metadata accessor for Location(0);
          goto LABEL_11;
        case 1u:
          v5 = type metadata accessor for LocationOfInterest(0);
LABEL_11:
          (*(void (**)(id *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
          break;
        case 2u:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = (uint64_t)v4 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
          v10 = type metadata accessor for Location(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, v10))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
          break;
        case 3u:
          goto LABEL_6;
        default:
          goto LABEL_7;
      }
      break;
    case 4u:
LABEL_5:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
LABEL_7:
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Location.Identifier(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

_QWORD *sub_100523118(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;

  v6 = type metadata accessor for ToolbarSearchViewModel.State(0);
  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 1u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = v6;
      v11 = 1;
      goto LABEL_7;
    case 2u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = v6;
      v11 = 2;
      goto LABEL_7;
    case 3u:
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain();
      v14 = (char *)a2 + *(int *)(sub_1000BA294(&qword_100BED160) + 48);
      type metadata accessor for PreviewLocation(0);
      v15 = (char *)&loc_100523244 + 4 * byte_1009AB1F9[swift_getEnumCaseMultiPayload(v14)];
      __asm { BR              X10 }
      return result;
    case 4u:
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      v17 = a2[3];
      a1[2] = a2[2];
      a1[3] = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = v6;
      v11 = 4;
LABEL_7:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v18 = *(int *)(a3 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = sub_1000BA294(&qword_100BCD680);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_100523488(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;

  if (a1 != a2)
  {
    sub_1000B56C0((uint64_t)a1, type metadata accessor for ToolbarSearchViewModel.State);
    v6 = type metadata accessor for ToolbarSearchViewModel.State(0);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = v6;
        v9 = 1;
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = v6;
        v9 = 2;
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v10 = (char *)a2 + *(int *)(sub_1000BA294(&qword_100BED160) + 48);
        type metadata accessor for PreviewLocation(0);
        v11 = (char *)&loc_1005235EC + 4 * byte_1009AB201[swift_getEnumCaseMultiPayload(v10)];
        __asm { BR              X10 }
        return result;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = v6;
        v9 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Location.Identifier(0);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15);
  if (!v16)
  {
    v18 = *(_QWORD *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_14;
  }
  if (v17)
  {
LABEL_14:
    v19 = sub_1000BA294(&qword_100BCD680);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
LABEL_15:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1005238B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *__dst;

  v6 = type metadata accessor for ToolbarSearchViewModel.State(0);
  if (swift_getEnumCaseMultiPayload(a2) != 3)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    goto LABEL_15;
  }
  *a1 = *a2;
  v7 = *(int *)(sub_1000BA294(&qword_100BED160) + 48);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PreviewLocation(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      v16 = type metadata accessor for SearchLocation(0);
      v17 = *(int *)(v16 + 32);
      __dst = &v8[v17];
      v18 = &v9[v17];
      v19 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000BA294(&qword_100BC35F8);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(__dst, v18, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v19);
      }
      v22 = *(int *)(v16 + 36);
      v23 = &v8[v22];
      v24 = &v9[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      v23[16] = v24[16];
      v13 = v8;
      v14 = v10;
      v15 = 2;
      goto LABEL_13;
    case 1:
      v21 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v8, v9, v21);
      v13 = v8;
      v14 = v10;
      v15 = 1;
      goto LABEL_13;
    case 0:
      v12 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
      v13 = v8;
      v14 = v10;
      v15 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      goto LABEL_14;
  }
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_14:
  swift_storeEnumTagMultiPayload(a1, v6, 3);
LABEL_15:
  v25 = *(int *)(a3 + 20);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28))
  {
    v29 = sub_1000BA294(&qword_100BCD680);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_100523B70(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *__dst;

  if (a1 != a2)
  {
    sub_1000B56C0((uint64_t)a1, type metadata accessor for ToolbarSearchViewModel.State);
    v6 = type metadata accessor for ToolbarSearchViewModel.State(0);
    if (swift_getEnumCaseMultiPayload(a2) != 3)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_16;
    }
    *a1 = *a2;
    v7 = *(int *)(sub_1000BA294(&qword_100BED160) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PreviewLocation(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9);
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      v16 = type metadata accessor for SearchLocation(0);
      v17 = *(int *)(v16 + 32);
      __dst = &v8[v17];
      v18 = &v9[v17];
      v19 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000BA294(&qword_100BC35F8);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(__dst, v18, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v19);
      }
      v22 = *(int *)(v16 + 36);
      v23 = &v8[v22];
      v24 = &v9[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      v23[16] = v24[16];
      v13 = v8;
      v14 = v10;
      v15 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v21 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v8, v9, v21);
      v13 = v8;
      v14 = v10;
      v15 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_15:
        swift_storeEnumTagMultiPayload(a1, v6, 3);
        goto LABEL_16;
      }
      v12 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
      v13 = v8;
      v14 = v10;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    goto LABEL_15;
  }
LABEL_16:
  v25 = *(int *)(a3 + 20);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for Location.Identifier(0);
  v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v28);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v28);
  if (!v29)
  {
    v31 = *(_QWORD *)(v28 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v26, v27, v28);
      goto LABEL_22;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v28);
    goto LABEL_21;
  }
  if (v30)
  {
LABEL_21:
    v32 = sub_1000BA294(&qword_100BCD680);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v28);
LABEL_22:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100523E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100523EA0);
}

uint64_t sub_100523EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_1000D96F0();
  if (v7 == (_DWORD)v3)
  {
    v8 = v6;
    v9 = v4;
    return _s7Weather24LocationCompositionStateOwet_0(v9, v3, v8);
  }
  v10 = sub_1000BA294(&qword_100BCD680);
  if (*(_DWORD *)(*(_QWORD *)(v10 - 8) + 84) == (_DWORD)v3)
  {
    v8 = v10;
    v9 = v4 + *(int *)(a3 + 20);
    return _s7Weather24LocationCompositionStateOwet_0(v9, v3, v8);
  }
  v12 = *(_QWORD *)(v4 + *(int *)(a3 + 24));
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_100523F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100523F3C);
}

uint64_t sub_100523F3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_1000D96F0();
  if (v9 == a3)
  {
    v10 = v8;
    v11 = v5;
    return _s7Weather24LocationCompositionStateOwst_0(v11, v4, v4, v10);
  }
  result = sub_1000BA294(&qword_100BCD680);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v10 = result;
    v11 = v5 + *(int *)(a4 + 20);
    return _s7Weather24LocationCompositionStateOwst_0(v11, v4, v4, v10);
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 24)) = (v4 - 1);
  return result;
}

void sub_100523FC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for ToolbarSearchViewModel.State(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10015A1D4(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100524058(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 1u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        v9 = a2[2];
        v10 = a2[3];
        a1[2] = v9;
        a1[3] = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11 = a1;
        v12 = a3;
        v13 = 1;
        goto LABEL_9;
      case 2u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        swift_bridgeObjectRetain();
        v11 = a1;
        v12 = a3;
        v13 = 2;
        goto LABEL_9;
      case 3u:
        v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        swift_bridgeObjectRetain();
        v17 = (char *)a2 + *(int *)(sub_1000BA294(&qword_100BED160) + 48);
        type metadata accessor for PreviewLocation(0);
        v18 = (char *)&loc_1005241A0 + 4 * byte_1009AB209[swift_getEnumCaseMultiPayload(v17)];
        __asm { BR              X10 }
        return result;
      case 4u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        v20 = a2[3];
        a1[2] = a2[2];
        a1[3] = v20;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11 = a1;
        v12 = a3;
        v13 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v11, v12, v13);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_10052434C(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(swift_getEnumCaseMultiPayload(a1))
  {
    case 1u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease();
      v2 = (id *)(a1 + *(int *)(sub_1000BA294(&qword_100BED160) + 48));
      type metadata accessor for PreviewLocation(0);
      switch(swift_getEnumCaseMultiPayload(v2))
      {
        case 0u:
          v3 = type metadata accessor for Location(0);
          goto LABEL_8;
        case 1u:
          v3 = type metadata accessor for LocationOfInterest(0);
LABEL_8:
          v4 = v3;
          v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
          v6 = (uint64_t)v2;
          goto LABEL_9;
        case 2u:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = (uint64_t)v2 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
          v8 = type metadata accessor for Location(0);
          if (_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
            return;
          v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
          v6 = v7;
          v4 = v8;
LABEL_9:
          v5(v6, v4);
          break;
        case 3u:
          goto LABEL_6;
        default:
          return;
      }
      return;
    case 4u:
LABEL_5:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

_QWORD *sub_1005244A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;

  switch(swift_getEnumCaseMultiPayload(a2))
  {
    case 1u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = a2[2];
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = a3;
      v11 = 1;
      goto LABEL_7;
    case 2u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = a3;
      v11 = 2;
      goto LABEL_7;
    case 3u:
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain();
      v14 = (char *)a2 + *(int *)(sub_1000BA294(&qword_100BED160) + 48);
      type metadata accessor for PreviewLocation(0);
      v15 = (char *)&loc_1005245C8 + 4 * byte_1009AB219[swift_getEnumCaseMultiPayload(v14)];
      __asm { BR              X10 }
      return result;
    case 4u:
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      v17 = a2[3];
      a1[2] = a2[2];
      a1[3] = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = a3;
      v11 = 4;
LABEL_7:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_100524774(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *result;

  if (a1 != a2)
  {
    sub_1000B56C0((uint64_t)a1, type metadata accessor for ToolbarSearchViewModel.State);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 1;
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 2;
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v9 = (char *)a2 + *(int *)(sub_1000BA294(&qword_100BED160) + 48);
        type metadata accessor for PreviewLocation(0);
        v10 = (char *)&loc_1005248CC + 4 * byte_1009AB221[swift_getEnumCaseMultiPayload(v9)];
        __asm { BR              X10 }
        return result;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 4;
LABEL_8:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *sub_100524AA8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  if (swift_getEnumCaseMultiPayload(a2) == 3)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_1000BA294(&qword_100BED160) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for PreviewLocation(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8);
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      v15 = type metadata accessor for SearchLocation(0);
      v16 = *(int *)(v15 + 32);
      v17 = &v7[v16];
      v18 = &v8[v16];
      v19 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
      }
      v22 = *(int *)(v15 + 36);
      v23 = &v7[v22];
      v24 = &v8[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      v23[16] = v24[16];
      v12 = v7;
      v13 = v9;
      v14 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v21 = type metadata accessor for LocationOfInterest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v7, v8, v21);
      v12 = v7;
      v13 = v9;
      v14 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_14:
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        return a1;
      }
      v11 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
      v12 = v7;
      v13 = v9;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
    goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_100524CC4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  if (a1 != a2)
  {
    sub_1000B56C0((uint64_t)a1, type metadata accessor for ToolbarSearchViewModel.State);
    if (swift_getEnumCaseMultiPayload(a2) == 3)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_1000BA294(&qword_100BED160) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for PreviewLocation(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8);
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
        *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
        v15 = type metadata accessor for SearchLocation(0);
        v16 = *(int *)(v15 + 32);
        v17 = &v7[v16];
        v18 = &v8[v16];
        v19 = type metadata accessor for Location(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
        {
          v20 = sub_1000BA294(&qword_100BC35F8);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
        }
        v22 = *(int *)(v15 + 36);
        v23 = &v7[v22];
        v24 = &v8[v22];
        *(_OWORD *)v23 = *(_OWORD *)v24;
        v23[16] = v24[16];
        v12 = v7;
        v13 = v9;
        v14 = 2;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v21 = type metadata accessor for LocationOfInterest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v7, v8, v21);
        v12 = v7;
        v13 = v9;
        v14 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_15:
          swift_storeEnumTagMultiPayload(a1, a3, 3);
          return a1;
        }
        v11 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
        v12 = v7;
        v13 = v9;
        v14 = 0;
      }
      swift_storeEnumTagMultiPayload(v12, v13, v14);
      goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100524EF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[5];

  v5[0] = &unk_1009AB2A0;
  v5[1] = &unk_1009AB2B8;
  v5[2] = &unk_1009AB2D0;
  result = type metadata accessor for PreviewLocation(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_1009AB2D0, *(_QWORD *)(result - 8) + 64);
    v5[3] = v4;
    v5[4] = &unk_1009AB2B8;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v5);
    return 0;
  }
  return result;
}

id sub_100524F98()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  id v6;
  _QWORD v9[5];

  sub_100043CA8(v0, (uint64_t)v9);
  v1 = sub_100068EB4((uint64_t)v9, v9[3]);
  v2 = __chkstk_darwin(v1);
  v4 = (uint64_t **)((char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t **, __n128))(v5 + 16))(v4, v2);
  v6 = sub_10052570C(*v4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v9);
  return v6;
}

id sub_10052502C()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String_optional v26;
  NSBundle v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  NSBundle v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  id v41;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  Swift::String v49;

  v0 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 60.0);
  v1 = (void *)objc_opt_self(_UIImageSymbolConfiguration);
  v2 = objc_msgSend(v1, "configurationWithFont:scale:", v0, -1);

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
  v4 = objc_msgSend(v1, "configurationWithHierarchicalColor:", v3);

  sub_100120444();
  v47 = v2;
  v5 = sub_100292720(0x616C732E6C6C6562, 0xEF6C6C69662E6873, v2);
  v45 = v4;
  v46 = v5;
  if (v5)
    v6 = objc_msgSend(v5, "imageByApplyingSymbolConfiguration:", v4);
  else
    v6 = 0;
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_1000BA330();
  v10 = sub_1000BAFE4(v8, v9, (uint64_t)"Local weather notifications are off.");
  v12 = v11;

  v14 = sub_1000C3CB4(v13, "mainBundle");
  sub_1000BA330();
  v17 = sub_1000BAFE4(v15, v16, (uint64_t)"Weather needs permission to always use your location to send you notifications about local weather. You can enable this in Settings.");
  v19 = v18;

  v20 = objc_allocWithZone((Class)OBWelcomeController);
  v44 = v6;
  v21 = sub_100292A78(v10, v12, v17, v19, v6);
  v22 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  v23 = sub_1000C3CB4((uint64_t)v22, "mainBundle");
  sub_1000BA330();
  sub_1000C29F4();
  v24 = 0xD00000000000001FLL;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, v27, v28, *(Swift::String *)(&v43 - 1));

  sub_100292B14(v29._countAndFlagsBits, (uint64_t)v29._object, 0, v22);
  v30 = sub_1000BA294(&qword_100BED2E8);
  UIViewControllerRepresentableContext.coordinator.getter(&v48, v30);
  v31 = v48;
  objc_msgSend(v22, "addTarget:action:forControlEvents:", v48, "goToSettingsButtonTapped", 64);

  v32 = objc_msgSend(v21, "buttonTray");
  objc_msgSend(v32, "addButton:", v22);

  v33 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
  v34 = sub_1000C3CB4((uint64_t)v33, "mainBundle");
  sub_1000BA330();
  sub_1000C29F4();
  v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, v37, v38, v49);

  sub_100292B14(v39._countAndFlagsBits, (uint64_t)v39._object, 0, v33);
  UIViewControllerRepresentableContext.coordinator.getter(&v48, v30);
  v40 = v48;
  objc_msgSend(v33, "addTarget:action:forControlEvents:", v48, "notNowButtonTapped", 64);

  v41 = objc_msgSend(v21, "buttonTray");
  objc_msgSend(v41, "addButton:", v33);

  objc_msgSend(v21, "setModalPresentationStyle:", 2);
  return v21;
}

id sub_100525490()
{
  return sub_10052502C();
}

id sub_1005254A4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100524F98();
  *a1 = result;
  return result;
}

uint64_t sub_1005254C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005256D0();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100525518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005256D0();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100525568(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005256D0();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_1005255CC(uint64_t (*a1)(void))
{
  uint64_t v1;

  sub_1000DB418((_QWORD *)(v1 + OBJC_IVAR____TtCV7Weather33NotificationLoweredPermissionView11Coordinator_interactor), *(_QWORD *)(v1 + OBJC_IVAR____TtCV7Weather33NotificationLoweredPermissionView11Coordinator_interactor + 24));
  return a1();
}

uint64_t type metadata accessor for NotificationLoweredPermissionView.Coordinator()
{
  return objc_opt_self(_TtCV7Weather33NotificationLoweredPermissionView11Coordinator);
}

ValueMetadata *type metadata accessor for NotificationLoweredPermissionView()
{
  return &type metadata for NotificationLoweredPermissionView;
}

unint64_t sub_100525694()
{
  unint64_t result;

  result = qword_100BED2D8;
  if (!qword_100BED2D8)
  {
    result = swift_getWitnessTable(&unk_1009AB39C, &type metadata for NotificationLoweredPermissionView);
    atomic_store(result, (unint64_t *)&qword_100BED2D8);
  }
  return result;
}

unint64_t sub_1005256D0()
{
  unint64_t result;

  result = qword_100BED2E0;
  if (!qword_100BED2E0)
  {
    result = swift_getWitnessTable(&unk_1009AB324, &type metadata for NotificationLoweredPermissionView);
    atomic_store(result, (unint64_t *)&qword_100BED2E0);
  }
  return result;
}

id sub_10052570C(uint64_t *a1)
{
  uint64_t v1;
  objc_class *v2;
  id v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  _UNKNOWN **v16;

  v15 = *a1;
  v1 = v15;
  v16 = &off_100B755A8;
  v14[0] = a1;
  v2 = (objc_class *)type metadata accessor for NotificationLoweredPermissionView.Coordinator();
  v3 = objc_allocWithZone(v2);
  v4 = sub_100068EB4((uint64_t)v14, v15);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v8 + 16))(v7, v5);
  v9 = *v7;
  v13[3] = v1;
  v13[4] = &off_100B755A8;
  v13[0] = v9;
  sub_100043CA8((uint64_t)v13, (uint64_t)v3 + OBJC_IVAR____TtCV7Weather33NotificationLoweredPermissionView11Coordinator_interactor);
  v12.receiver = v3;
  v12.super_class = v2;
  v10 = objc_msgSendSuper2(&v12, "init");
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v13);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
  return v10;
}

void sub_1005257F8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for HourlyForecastComponentViewModelFactory, (uint64_t)&off_100B750C0, a2);
}

uint64_t sub_10052580C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = type metadata accessor for WeatherForecastDescriptionStringBuilder(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v3, 0xD000000000000017, 0x8000000100A09720, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for HourlyForecastComponentViewModelFactory();
    result = swift_allocObject(v6, 24, 7);
    *(_QWORD *)(result + 16) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100525890@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BED510);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for HumidityComponentViewModelFactory();
    result = swift_allocObject(v8, 24, 7);
    *(_QWORD *)(result + 16) = v7;
    a2[3] = v8;
    a2[4] = (uint64_t)&off_100B646E8;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100525918(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for MapComponentViewModelFactory, (uint64_t)&off_100B78150, a1);
}

void sub_10052592C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for MoonComponentViewModelFactory, (uint64_t)&off_100B89410, a2);
}

uint64_t sub_100525940(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BCC9A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (v14)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1000DB418(a1, v6);
    v8 = sub_1000BA294(&qword_100BCC9B0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
    if (v12)
    {
      v9 = type metadata accessor for MoonComponentViewModelFactory();
      v10 = swift_allocObject(v9, 96, 7);
      sub_10003C800(&v13, v10 + 16);
      sub_10003C800(&v11, v10 + 56);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100525A1C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t HourPrecipitationStringBuilder;
  uint64_t v11;
  uint64_t HourPrecipitationComponentViewModelFactory;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BE8768);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v15)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_1000DB418(a1, v8);
    HourPrecipitationStringBuilder = type metadata accessor for NextHourPrecipitationStringBuilder(0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(HourPrecipitationStringBuilder, HourPrecipitationStringBuilder, v8, v9);
    if (result)
    {
      v11 = result;
      HourPrecipitationComponentViewModelFactory = type metadata accessor for NextHourPrecipitationComponentViewModelFactory();
      v13 = swift_allocObject(HourPrecipitationComponentViewModelFactory, 64, 7);
      result = sub_10003C800(&v14, v13 + 16);
      *(_QWORD *)(v13 + 56) = v11;
      a2[3] = HourPrecipitationComponentViewModelFactory;
      a2[4] = (uint64_t)&off_100B82650;
      *a2 = v13;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100525B04(uint64_t a1)
{
  return sub_100525B18(a1, (uint64_t (*)(_QWORD))&type metadata accessor for NextHourPrecipitationStringBuilder, (uint64_t (*)(void))&NextHourPrecipitationStringBuilder.init());
}

uint64_t sub_100525B18(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(void))
{
  uint64_t v4;

  v4 = a2(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  return a3();
}

uint64_t sub_100525B50@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v8)
  {
    v7 = sub_100123C18();
    a2[3] = sub_1000BA294(&qword_100BED500);
    a2[4] = v7;
    result = swift_allocObject(&unk_100B7DD50, 48, 7);
    *a2 = result;
    *(_QWORD *)(result + 16) = v8;
    *(_OWORD *)(result + 24) = v9;
    *(_QWORD *)(result + 40) = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100525C04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v8)
  {
    v7 = type metadata accessor for NotificationsOptInComponentViewModelFactory();
    result = swift_allocObject(v7, 48, 7);
    *(_QWORD *)(result + 16) = v8;
    *(_OWORD *)(result + 24) = v9;
    *(_QWORD *)(result + 40) = v10;
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100B71CC8;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100525CA8(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for NotificationsResubscriptionComponentViewModelFactory, (uint64_t)&off_100B68248, a1);
}

void sub_100525CBC(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for PressureComponentViewModelFactory, (uint64_t)&off_100B9B128, a1);
}

uint64_t sub_100525CD0()
{
  uint64_t v0;

  v0 = type metadata accessor for PressureComponentViewModelFactory();
  return swift_allocObject(v0, 16, 7);
}

void sub_100525CF0(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for PrecipitationTotalComponentViewModelFactory, (uint64_t)&off_100B86338, a2);
}

uint64_t sub_100525D04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BED4F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = result;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BCF670);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (!v17)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BD21E8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (v15)
  {
    v13 = type metadata accessor for PrecipitationTotalComponentViewModelFactory();
    swift_allocObject(v13, 104, 7);
    return sub_10063D8F4(v6, &v16, &v14);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100525E18(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for ReportWeatherComponentViewModelFactory, (uint64_t)&off_100B89268, a1);
}

uint64_t sub_100525E2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for SevereAlertComponentViewModelFactory(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = SevereAlertComponentStringsBuilder.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B90A50;
  *a1 = v3;
  return result;
}

uint64_t sub_100525E8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for SunriseSunsetEventCalculator(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_1000BA294(&qword_100BED3B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (result)
  {
    v11 = result;
    SunriseSunsetEventCalculator.init()(result);
    v12 = type metadata accessor for SunriseSunsetViewModelFactory(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    result = SunriseSunsetViewModelFactory.init(stringBuilder:sunriseSunsetEventCalculator:)(v11, v6);
    a2[3] = v12;
    a2[4] = (uint64_t)&protocol witness table for SunriseSunsetViewModelFactory;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100525F74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = type metadata accessor for SunriseSunsetEventCalculator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SunriseSunsetEventCalculator.init()(v8);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_1000BA294(&qword_100BED4B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (v17)
  {
    v13 = type metadata accessor for SunriseSunsetComponentViewModelFactory(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14 + OBJC_IVAR____TtC7Weather38SunriseSunsetComponentViewModelFactory_sunriseSunsetEventCalculator, v7, v4);
    result = sub_10003C800(&v16, v14 + OBJC_IVAR____TtC7Weather38SunriseSunsetComponentViewModelFactory_viewModelFactory);
    a2[3] = v13;
    a2[4] = (uint64_t)&off_100B68510;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100526090(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for AveragesComponentViewModelFactory, (uint64_t)&off_100B71298, a2);
}

uint64_t sub_1005260A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BED4C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v15)
  {
    v5 = sub_100068EB4((uint64_t)v14, v15);
    v6 = __chkstk_darwin(v5);
    (*(void (**)(__n128))(v7 + 16))(v6);
    v13[3] = &type metadata for AveragesStringBuilder;
    v13[4] = &off_100B72498;
    v8 = type metadata accessor for AveragesComponentViewModelFactory();
    v9 = swift_allocObject(v8, 56, 7);
    v10 = sub_100068EB4((uint64_t)v13, (uint64_t)&type metadata for AveragesStringBuilder);
    v11 = __chkstk_darwin(v10);
    (*(void (**)(__n128))(v12 + 16))(v11);
    *(_QWORD *)(v9 + 40) = &type metadata for AveragesStringBuilder;
    *(_QWORD *)(v9 + 48) = &off_100B72498;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v13);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v14);
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1005261F4(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for AveragesStringBuilder;
  *(_QWORD *)(a1 + 32) = &off_100B72498;
}

void sub_10052620C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for UVIndexComponentViewModelFactory, (uint64_t)&off_100B8B698, a2);
}

uint64_t sub_100526220(_QWORD *a1)
{
  return sub_10052625C(a1, &qword_100BED4F0, (uint64_t (*)(uint64_t))type metadata accessor for UVIndexComponentViewModelFactory);
}

void sub_100526234(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004C680(a1, (uint64_t (*)(_QWORD))type metadata accessor for VisibilityComponentViewModelFactory, (uint64_t)&off_100B884B0, a2);
}

uint64_t sub_100526248(_QWORD *a1)
{
  return sub_10052625C(a1, &qword_100BED4E8, (uint64_t (*)(uint64_t))type metadata accessor for VisibilityComponentViewModelFactory);
}

uint64_t sub_10052625C(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_1000DB418(a1, v5);
  v8 = sub_1000BA294(a2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v5, v6);
  if (result)
  {
    v10 = sub_10009C82C();
    v11 = a3(v10);
    result = swift_allocObject(v11, 24, 7);
    *(_QWORD *)(result + 16) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1005262D8(uint64_t *a1@<X8>)
{
  sub_10002731C((uint64_t (*)(_QWORD))type metadata accessor for WindComponentViewModelFactory, (uint64_t)&off_100B82B58, a1);
}

uint64_t sub_1005262EC()
{
  uint64_t v0;

  v0 = type metadata accessor for WindComponentViewModelFactory();
  return swift_allocObject(v0, 16, 7);
}

uint64_t sub_10052630C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100526338()
{
  uint64_t v0;

  sub_1000C602C();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100526358()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10052637C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for LocationModel(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  sub_1000C602C();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

_QWORD *sub_1005263F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  a21[5] = type metadata accessor for AirQualityComponentViewModelFactory();
  a21[6] = &off_100B9A100;
  a21[2] = a1;
  a21[10] = type metadata accessor for AveragesComponentViewModelFactory();
  a21[11] = &off_100B71298;
  a21[7] = a2;
  a21[15] = type metadata accessor for DailyForecastComponentViewModelFactory();
  a21[16] = &off_100B6CE40;
  a21[12] = a3;
  a21[20] = type metadata accessor for FeelsLikeComponentViewModelFactory();
  a21[21] = &off_100B95C68;
  a21[17] = a4;
  a21[25] = type metadata accessor for HourlyForecastComponentViewModelFactory();
  a21[26] = &off_100B750C0;
  a21[22] = a5;
  a21[30] = type metadata accessor for HumidityComponentViewModelFactory();
  a21[31] = &off_100B646E8;
  a21[27] = a6;
  a21[35] = type metadata accessor for MapComponentViewModelFactory();
  a21[36] = &off_100B78150;
  a21[32] = a7;
  a21[40] = type metadata accessor for MoonComponentViewModelFactory();
  a21[41] = &off_100B89410;
  a21[37] = a8;
  a21[45] = type metadata accessor for NewsArticleComponentViewModelFactory();
  a21[46] = &off_100B7D058;
  a21[42] = a9;
  a21[50] = type metadata accessor for NextHourPrecipitationComponentViewModelFactory();
  a21[51] = &off_100B82650;
  a21[47] = a10;
  a21[55] = type metadata accessor for NotificationsOptInComponentViewModelFactory();
  a21[56] = &off_100B71CC8;
  a21[52] = a11;
  a21[60] = type metadata accessor for NotificationsResubscriptionComponentViewModelFactory();
  a21[61] = &off_100B68248;
  a21[57] = a12;
  a21[65] = type metadata accessor for PressureComponentViewModelFactory();
  a21[66] = &off_100B9B128;
  a21[62] = a13;
  a21[70] = type metadata accessor for PrecipitationTotalComponentViewModelFactory();
  a21[71] = &off_100B86338;
  a21[67] = a14;
  a21[75] = type metadata accessor for ReportWeatherComponentViewModelFactory();
  a21[76] = &off_100B89268;
  a21[72] = a15;
  a21[80] = type metadata accessor for SevereAlertComponentViewModelFactory(0);
  a21[81] = &off_100B90A50;
  a21[77] = a16;
  a21[85] = type metadata accessor for SunriseSunsetComponentViewModelFactory(0);
  a21[86] = &off_100B68510;
  a21[82] = a17;
  a21[90] = type metadata accessor for UVIndexComponentViewModelFactory();
  a21[91] = &off_100B8B698;
  a21[87] = a18;
  a21[95] = type metadata accessor for VisibilityComponentViewModelFactory();
  a21[96] = &off_100B884B0;
  a21[92] = a19;
  a21[100] = type metadata accessor for WindComponentViewModelFactory();
  a21[101] = &off_100B82B58;
  a21[97] = a20;
  return a21;
}

_QWORD *sub_1005266E0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 *a12, _QWORD *a13)
{
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  void (*v36)(_BYTE *, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v50[12];
  int v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _UNKNOWN **v68;

  v58 = a8;
  v59 = a2;
  v54 = a6;
  v55 = a7;
  v61 = a4;
  v62 = a5;
  v60 = a3;
  v63 = a1;
  v13 = a12;
  v14 = type metadata accessor for LocationModel(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = &v50[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v20 = &v50[-v19];
  v67 = type metadata accessor for NetworkActivityManager();
  v68 = &off_100B6D7E8;
  *(_QWORD *)&v66 = a11;
  if (qword_100BC2400 != -1)
    swift_once(&qword_100BC2400, sub_1001597C4);
  v56 = a9;
  v57 = a10;
  v21 = type metadata accessor for Logger(0);
  sub_1000AECD4(v21, (uint64_t)qword_100CAEFF8);
  v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
  v23 = v63;
  v22(v20, (uint64_t)v63, v14);
  v24 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v22)(v18, v23, v14);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    v28 = swift_slowAlloc(42, -1);
    v53 = a12;
    v29 = v28;
    v30 = swift_slowAlloc(64, -1);
    v52 = v30;
    *(_DWORD *)v29 = 141558787;
    v64 = 1752392040;
    v65 = v30;
    v31 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    *(_WORD *)(v29 + 12) = 2081;
    v51 = v27;
    v32 = LocationModel.name.getter(v31);
    v34 = v33;
    v64 = sub_1000CE1C8(v32, v33, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    v35 = swift_bridgeObjectRelease(v34);
    v36 = *(void (**)(_BYTE *, uint64_t, __n128))(v15 + 8);
    v36(v20, v14, v35);
    *(_WORD *)(v29 + 22) = 2160;
    v64 = 1752392040;
    v37 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    *(_WORD *)(v29 + 32) = 2081;
    v38 = LocationModel.id.getter(v37);
    v40 = v39;
    v64 = sub_1000CE1C8(v38, v39, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    v41 = swift_bridgeObjectRelease(v40);
    v36(v18, v14, v41);
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v51, "Initializing Location module for location: name=%{private,mask.hash}s, id=%{private,mask.hash}s", (uint8_t *)v29, 0x2Au);
    v42 = v52;
    swift_arrayDestroy(v52, 2);
    swift_slowDealloc(v42, -1, -1);
    v43 = v29;
    v13 = v53;
    swift_slowDealloc(v43, -1, -1);

    ((void (*)(_BYTE *, uint64_t))v36)(v63, v14);
  }
  else
  {

    v44 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
    v44(v18, v14);
    v44(v20, v14);
    v44(v63, v14);
  }
  v45 = v60;
  a13[2] = v59;
  a13[3] = v45;
  v46 = v62;
  a13[4] = v61;
  a13[5] = v46;
  v47 = v55;
  a13[6] = v54;
  a13[7] = v47;
  v48 = v56;
  a13[8] = v58;
  a13[9] = v48;
  a13[10] = v57;
  sub_10003C800(&v66, (uint64_t)(a13 + 11));
  sub_10003C800(v13, (uint64_t)(a13 + 16));
  return a13;
}

_QWORD *sub_100526A54(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 *a12)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  v27 = a7;
  v28 = a8;
  v25 = a5;
  v26 = a6;
  v30 = type metadata accessor for NetworkActivityManager();
  v31 = &off_100B6D7E8;
  v29[0] = a11;
  v16 = type metadata accessor for LocationModule();
  v17 = (_QWORD *)swift_allocObject(v16, 168, 7);
  v18 = sub_100068EB4((uint64_t)v29, v30);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_1005266E0(a1, a2, a3, a4, v25, v26, v27, v28, a9, a10, *v20, a12, v17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v29);
  return v22;
}

_QWORD *sub_100526B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, _QWORD **a20)
{
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  _QWORD *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _UNKNOWN **v133;
  _QWORD v134[3];
  uint64_t v135;
  _UNKNOWN **v136;
  _QWORD v137[3];
  uint64_t v138;
  _UNKNOWN **v139;
  _QWORD v140[3];
  uint64_t v141;
  _UNKNOWN **v142;
  _QWORD v143[3];
  uint64_t v144;
  _UNKNOWN **v145;
  _QWORD v146[3];
  uint64_t v147;
  _UNKNOWN **v148;
  _QWORD v149[3];
  uint64_t v150;
  _UNKNOWN **v151;
  _QWORD v152[3];
  uint64_t v153;
  _UNKNOWN **v154;
  _QWORD v155[3];
  uint64_t v156;
  _UNKNOWN **v157;
  _QWORD v158[3];
  uint64_t v159;
  _UNKNOWN **v160;
  _QWORD v161[3];
  uint64_t HourPrecipitationComponentViewModelFactory;
  _UNKNOWN **v163;
  _QWORD v164[3];
  uint64_t v165;
  _UNKNOWN **v166;
  _QWORD v167[3];
  uint64_t v168;
  _UNKNOWN **v169;
  _QWORD v170[3];
  uint64_t v171;
  _UNKNOWN **v172;
  _QWORD v173[3];
  uint64_t v174;
  _UNKNOWN **v175;
  _QWORD v176[3];
  uint64_t v177;
  _UNKNOWN **v178;
  _QWORD v179[3];
  uint64_t v180;
  _UNKNOWN **v181;
  _QWORD v182[3];
  uint64_t v183;
  _UNKNOWN **v184;
  _QWORD v185[3];
  uint64_t v186;
  _UNKNOWN **v187;
  _QWORD v188[3];
  uint64_t v189;
  _UNKNOWN **v190;

  v118 = a8;
  v128 = a18;
  v126 = a17;
  v125 = a16;
  v124 = a15;
  v123 = a14;
  v122 = a13;
  v121 = a12;
  v120 = a11;
  v119 = a10;
  v127 = a19;
  v130 = *a20;
  v189 = type metadata accessor for AirQualityComponentViewModelFactory();
  v190 = &off_100B9A100;
  v188[0] = a1;
  v186 = type metadata accessor for AveragesComponentViewModelFactory();
  v187 = &off_100B71298;
  v185[0] = a2;
  v183 = type metadata accessor for DailyForecastComponentViewModelFactory();
  v184 = &off_100B6CE40;
  v182[0] = a3;
  v180 = type metadata accessor for FeelsLikeComponentViewModelFactory();
  v181 = &off_100B95C68;
  v179[0] = a4;
  v178 = &off_100B750C0;
  v177 = type metadata accessor for HourlyForecastComponentViewModelFactory();
  v176[0] = a5;
  v175 = &off_100B646E8;
  v174 = type metadata accessor for HumidityComponentViewModelFactory();
  v173[0] = a6;
  v172 = &off_100B78150;
  v171 = type metadata accessor for MapComponentViewModelFactory();
  v170[0] = a7;
  v169 = &off_100B89410;
  v168 = type metadata accessor for MoonComponentViewModelFactory();
  v167[0] = v118;
  v166 = &off_100B7D058;
  v165 = type metadata accessor for NewsArticleComponentViewModelFactory();
  v164[0] = a9;
  v163 = &off_100B82650;
  HourPrecipitationComponentViewModelFactory = type metadata accessor for NextHourPrecipitationComponentViewModelFactory();
  v161[0] = a10;
  v159 = type metadata accessor for NotificationsOptInComponentViewModelFactory();
  v160 = &off_100B71CC8;
  v158[0] = a11;
  v156 = type metadata accessor for NotificationsResubscriptionComponentViewModelFactory();
  v157 = &off_100B68248;
  v155[0] = a12;
  v153 = type metadata accessor for PressureComponentViewModelFactory();
  v154 = &off_100B9B128;
  v152[0] = a13;
  v150 = type metadata accessor for PrecipitationTotalComponentViewModelFactory();
  v151 = &off_100B86338;
  v149[0] = a14;
  v147 = type metadata accessor for ReportWeatherComponentViewModelFactory();
  v148 = &off_100B89268;
  v146[0] = a15;
  v144 = type metadata accessor for SevereAlertComponentViewModelFactory(0);
  v145 = &off_100B90A50;
  v143[0] = a16;
  v141 = type metadata accessor for SunriseSunsetComponentViewModelFactory(0);
  v142 = &off_100B68510;
  v140[0] = a17;
  v138 = type metadata accessor for UVIndexComponentViewModelFactory();
  v139 = &off_100B8B698;
  v137[0] = a18;
  v135 = type metadata accessor for VisibilityComponentViewModelFactory();
  v136 = &off_100B884B0;
  v134[0] = a19;
  v132 = v130;
  v133 = &off_100B82B58;
  v131[0] = a20;
  v27 = type metadata accessor for LocationComponentViewModelFactory();
  v130 = (_QWORD *)swift_allocObject(v27, 816, 7);
  v28 = sub_100068EB4((uint64_t)v188, v189);
  v29 = __chkstk_darwin(v28);
  v129 = (uint64_t *)((char *)&v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v31 + 16))(v29);
  v32 = sub_100068EB4((uint64_t)v185, v186);
  v33 = __chkstk_darwin(v32);
  v128 = (uint64_t *)((char *)&v118 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v35 + 16))(v33);
  v36 = sub_100068EB4((uint64_t)v182, v183);
  v37 = __chkstk_darwin(v36);
  v127 = (uint64_t *)((char *)&v118 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v39 + 16))(v37);
  v40 = sub_100068EB4((uint64_t)v179, v180);
  v41 = __chkstk_darwin(v40);
  v126 = (uint64_t *)((char *)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v43 + 16))(v41);
  v44 = sub_100068EB4((uint64_t)v176, v177);
  v45 = __chkstk_darwin(v44);
  v125 = (uint64_t *)((char *)&v118 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v47 + 16))(v45);
  v48 = sub_100068EB4((uint64_t)v173, v174);
  v49 = __chkstk_darwin(v48);
  v124 = (uint64_t *)((char *)&v118 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v51 + 16))(v49);
  v52 = sub_100068EB4((uint64_t)v170, v171);
  v53 = __chkstk_darwin(v52);
  v123 = (uint64_t *)((char *)&v118 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v55 + 16))(v53);
  v56 = sub_100068EB4((uint64_t)v167, v168);
  v57 = __chkstk_darwin(v56);
  v122 = (uint64_t *)((char *)&v118 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v59 + 16))(v57);
  v60 = sub_100068EB4((uint64_t)v164, v165);
  v61 = __chkstk_darwin(v60);
  v121 = (uint64_t *)((char *)&v118 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v63 + 16))(v61);
  v64 = sub_100068EB4((uint64_t)v161, HourPrecipitationComponentViewModelFactory);
  v65 = __chkstk_darwin(v64);
  v120 = (uint64_t *)((char *)&v118 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v67 + 16))(v65);
  v68 = sub_100068EB4((uint64_t)v158, v159);
  v69 = __chkstk_darwin(v68);
  v119 = (uint64_t *)((char *)&v118 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v71 + 16))(v69);
  v72 = sub_100068EB4((uint64_t)v155, v156);
  v73 = __chkstk_darwin(v72);
  v118 = (uint64_t *)((char *)&v118 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128))(v75 + 16))(v73);
  v76 = sub_100068EB4((uint64_t)v152, v153);
  v77 = __chkstk_darwin(v76);
  v79 = (uint64_t *)((char *)&v118 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v80 + 16))(v79, v77);
  v81 = sub_100068EB4((uint64_t)v149, v150);
  v82 = __chkstk_darwin(v81);
  v84 = (uint64_t *)((char *)&v118 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v85 + 16))(v84, v82);
  v86 = sub_100068EB4((uint64_t)v146, v147);
  v87 = __chkstk_darwin(v86);
  v89 = (uint64_t *)((char *)&v118 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v90 + 16))(v89, v87);
  v91 = sub_100068EB4((uint64_t)v143, v144);
  v92 = __chkstk_darwin(v91);
  v94 = (uint64_t *)((char *)&v118 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v95 + 16))(v94, v92);
  v96 = sub_100068EB4((uint64_t)v140, v141);
  v97 = __chkstk_darwin(v96);
  v99 = (uint64_t *)((char *)&v118 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v100 + 16))(v99, v97);
  v101 = sub_100068EB4((uint64_t)v137, v138);
  v102 = __chkstk_darwin(v101);
  v104 = (uint64_t *)((char *)&v118 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v105 + 16))(v104, v102);
  v106 = sub_100068EB4((uint64_t)v134, v135);
  v107 = __chkstk_darwin(v106);
  v109 = (uint64_t *)((char *)&v118 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v110 + 16))(v109, v107);
  v111 = sub_100068EB4((uint64_t)v131, (uint64_t)v132);
  v112 = __chkstk_darwin(v111);
  v114 = (uint64_t *)((char *)&v118 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v115 + 16))(v114, v112);
  v116 = sub_1005263F0(*v129, *v128, *v127, *v126, *v125, *v124, *v123, *v122, *v121, *v120, *v119, *v118, *v79, *v84, *v89, *v94, *v99, *v104, *v109,
           *v114,
           v130);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v131);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v134);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v137);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v140);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v143);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v146);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v149);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v152);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v155);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v158);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v161);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v164);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v167);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v170);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v173);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v176);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v179);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v182);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v185);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v188);
  return v116;
}

uint64_t sub_100527604(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String *v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String *v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  __int128 v37;
  uint64_t v38;
  _UNKNOWN **v39;
  __int128 v40;
  uint64_t v41;
  _UNKNOWN **v42;
  Swift::String v43;
  Swift::String v44;

  v41 = type metadata accessor for LocationComponentViewModelFactory();
  v42 = &off_100B6D6D0;
  *(_QWORD *)&v40 = a1;
  v38 = type metadata accessor for LocationContentViewModelFactory();
  v39 = &off_100B999F8;
  *(_QWORD *)&v37 = a3;
  v13 = a8 + OBJC_IVAR____TtC7Weather24LocationViewModelFactory_lastWeatherData;
  v14 = type metadata accessor for WeatherData(0);
  _s7Weather24LocationCompositionStateOwst_0(v13, 1, 1, v14);
  v15 = a8 + OBJC_IVAR____TtC7Weather24LocationViewModelFactory_lastNewsData;
  v16 = type metadata accessor for NewsDataModel(0);
  _s7Weather24LocationCompositionStateOwst_0(v15, 1, 1, v16);
  v17 = a8 + OBJC_IVAR____TtC7Weather24LocationViewModelFactory_lastViewModel;
  v18 = type metadata accessor for LocationViewModel(0);
  _s7Weather24LocationCompositionStateOwst_0(v17, 1, 1, v18);
  v19 = a8 + OBJC_IVAR____TtC7Weather24LocationViewModelFactory_lastPreprocessedDataUuid;
  v20 = type metadata accessor for UUID(0);
  _s7Weather24LocationCompositionStateOwst_0(v19, 1, 1, v20);
  v21 = OBJC_IVAR____TtC7Weather24LocationViewModelFactory_logger;
  sub_100120350();
  *(_QWORD *)(a8 + v21) = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD000000000000012, 0x8000000100A09740);
  v22 = (Swift::String *)(a8 + OBJC_IVAR____TtC7Weather24LocationViewModelFactory_myLocationString);
  v23 = (void *)objc_opt_self(NSBundle);
  v24 = objc_msgSend(v23, "mainBundle");
  v43._countAndFlagsBits = 0xD00000000000003DLL;
  v43._object = (void *)0x8000000100A09760;
  v25._countAndFlagsBits = 0x7461636F4C20794DLL;
  v25._object = (void *)0xEB000000006E6F69;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v43);

  *v22 = v27;
  v28 = (Swift::String *)(a8 + OBJC_IVAR____TtC7Weather24LocationViewModelFactory_myLocationAllCapsString);
  v29 = objc_msgSend(v23, "mainBundle");
  v44._countAndFlagsBits = 0xD000000000000053;
  v44._object = (void *)0x8000000100A097A0;
  v30._countAndFlagsBits = 0x5441434F4C20594DLL;
  v30._object = (void *)0xEB000000004E4F49;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v44);

  *v28 = v32;
  sub_10003C800(&v40, a8 + 16);
  sub_10003C800(a2, a8 + 56);
  sub_10003C800(&v37, a8 + 96);
  sub_10003C800(a4, a8 + 136);
  sub_10003C800(a5, a8 + 176);
  sub_10003C800(a6, a8 + 216);
  sub_10003C800(a7, a8 + 256);
  return a8;
}

uint64_t sub_1005278F0(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;

  v32 = type metadata accessor for LocationComponentViewModelFactory();
  v33 = &off_100B6D6D0;
  v31[0] = a1;
  v29 = type metadata accessor for LocationContentViewModelFactory();
  v30 = &off_100B999F8;
  v28[0] = a3;
  v14 = type metadata accessor for LocationViewModelFactory(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = sub_100068EB4((uint64_t)v31, v32);
  v17 = __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
  v21 = sub_100068EB4((uint64_t)v28, v29);
  v22 = __chkstk_darwin(v21);
  v24 = (_QWORD *)((char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  v26 = sub_100527604(*v19, a2, *v24, a4, a5, a6, a7, v15);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
  return v26;
}

uint64_t sub_100527A70()
{
  uint64_t v0;

  sub_1000C602C();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100527A98()
{
  uint64_t v0;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 96, 7);
}

_QWORD *sub_100527AE8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  _QWORD *v21;

  v20 = a2;
  v19 = sub_1000BA294(&qword_100BCF318);
  v6 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v17 = v3;
    v21 = _swiftEmptyArrayStorage;
    sub_100606188();
    v10 = v21;
    v11 = *(_QWORD *)(type metadata accessor for MeasuredLocationViewerView.LocationTabPageModel(0) - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v18 = *(_QWORD *)(v11 + 72);
    do
    {
      v13 = a3;
      v14 = v20(v12);
      LocationModel.identifier.getter(v14);
      v21 = v10;
      v15 = v10[2];
      if (v15 >= v10[3] >> 1)
      {
        sub_100606188();
        v10 = v21;
      }
      v10[2] = v15 + 1;
      sub_1000787D4((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v15, &qword_100BCF318);
      v12 += v18;
      --v9;
      a3 = v13;
    }
    while (v9);
    swift_release(v13);
  }
  else
  {
    swift_release(a3);
    return _swiftEmptyArrayStorage;
  }
  return v10;
}

double sub_100527C94@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100527CB4(a1, 0, a2);
}

uint64_t sub_100527C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100527DD8(a1, a2, a3, 0);
}

double sub_100527CA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100527F24(a1, 0, a2);
}

double sub_100527CAC@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100527CB4(a1, 1, a2);
}

double sub_100527CB4@<D0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[3];
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  char v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[24];

  v7 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a1 + 5);
  v9 = a1[1] & 1;
  v10 = a1[3] & 1;
  v19 = *(__int128 *)((char *)a1 + 24);
  v11 = a1[1];
  v32 = *a1;
  v6 = v32;
  v33 = v11;
  sub_100542DC0((uint64_t)&v32, (uint64_t)v35);
  v34 = *((_QWORD *)&v33 + 1);
  v30 = a1[2];
  v31 = *((_BYTE *)a1 + 48);
  v20[0] = v6;
  v20[1] = v7;
  v20[2] = v9;
  v21 = v19;
  v22 = v8;
  v23 = v10;
  v24 = a2;
  sub_100542DFC((uint64_t)v35);
  sub_100373040(&v34);
  sub_10017989C(&v30);
  v12 = sub_1000BA294(&qword_100BCD898);
  v13 = sub_100157390();
  sub_1000DC074((uint64_t)v20, v12, v12, v13);
  v14 = v28;
  v15 = v29;
  result = *(double *)&v25;
  v17 = v26;
  v18 = v27;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v17;
  *(_OWORD *)(a3 + 32) = v18;
  *(_BYTE *)(a3 + 48) = v14;
  *(_BYTE *)(a3 + 49) = v15;
  return result;
}

uint64_t sub_100527DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100527DD8(a1, a2, a3, 1);
}

uint64_t sub_100527DD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v8 = a4;
  swift_retain();
  sub_100094EE4();
  swift_retain();
  v4 = sub_1000BA294(&qword_100BC4E18);
  v5 = sub_1001A865C();
  sub_1000DC074((uint64_t)v7, v4, v4, v5);
  return v9;
}

void sub_100527E58(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  _QWORD v12[5];
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[2] & 1;
  v18 = *a1;
  v12[0] = v18;
  v12[1] = v3;
  v12[2] = v6;
  v12[3] = v4;
  v12[4] = v5;
  v13 = 1;
  sub_10017989C(&v18);
  sub_100094EE4();
  swift_retain();
  v7 = sub_100098B10();
  sub_1000BE924((uint64_t)&qword_100BEC220);
  _ConditionalContent<>.init(storage:)(v12, &type metadata for EmptyView, v7, &protocol witness table for EmptyView, v8);
  v9 = v16;
  v10 = v17;
  v11 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 32) = v9;
  *(_BYTE *)(a2 + 40) = v10;
  sub_100542EB4();
}

double sub_100527F1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100527F24(a1, 1, a2);
}

double sub_100527F24@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[8];
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 16) & 1;
  v10 = *(_BYTE *)(a1 + 48) & 1;
  v18[0] = *(_QWORD *)a1;
  v18[1] = v4;
  v18[2] = v9;
  v18[3] = v5;
  v18[4] = v6;
  v18[5] = v7;
  v18[6] = v10;
  v18[7] = v8;
  v19 = a2;
  sub_1000D55D4(v18[0], v4, v9);
  swift_bridgeObjectRetain();
  sub_1000D55D4(v6, v7, v10);
  swift_bridgeObjectRetain();
  v11 = sub_100098B10();
  sub_1000BE924((uint64_t)&unk_100BEE7F0);
  sub_1000DC074((uint64_t)v18, v11, v11, v12);
  v13 = v24;
  result = *(double *)&v20;
  v15 = v21;
  v16 = v22;
  v17 = v23;
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v15;
  *(_OWORD *)(a3 + 32) = v16;
  *(_OWORD *)(a3 + 48) = v17;
  *(_BYTE *)(a3 + 64) = v13;
  return result;
}

void sub_10052800C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t TupleTypeMetadata;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_10008900C();
  a17 = v19;
  a18 = v21;
  v23 = v22;
  v24 = v20;
  v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if (v22 == 1)
  {
    TupleTypeMetadata = *v26;
  }
  else
  {
    v18 = (char *)&a9;
    __chkstk_darwin(v20);
    sub_100098728();
    v30 = (_QWORD *)(v29 - v28);
    if (v23)
    {
      v31 = v26;
      v32 = v30;
      v33 = v23;
      do
      {
        v34 = *v31++;
        *v32++ = v34;
        --v33;
      }
      while (v33);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata(0, v23, v30, 0, 0);
  }
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_100098694();
  if (v23)
  {
    v36 = (int *)(TupleTypeMetadata + 32);
    v37 = v23;
    do
    {
      if (v23 == 1)
        v38 = 0;
      else
        v38 = *v36;
      v40 = *v26++;
      v39 = v40;
      v41 = *v24++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(&v18[v38], v41);
      v36 += 4;
      --v37;
    }
    while (v37);
  }
  v42 = sub_100087924();
  TupleView.init(_:)(v42);
  sub_10009D300();
}

uint64_t sub_100528114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t WitnessTable;
  _QWORD v26[2];
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = v7;
  v26[0] = a6;
  v26[1] = a7;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = __chkstk_darwin(a1);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for _LayoutRoot(0, v18, v19, v15);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, v8, a3, v21);
  _LayoutRoot.init(_:)(v17, a3, a5);
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = v26[0];
  v32 = a1;
  v33 = a2;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _LayoutRoot<A>, v20);
  return _VariadicView.Tree.init(_:content:)(v23, sub_100540528, v27, v20, a4, WitnessTable);
}

void sub_100528244(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1000BF79C(a1, a2, a3, &qword_100BED388, (uint64_t)sub_10014D2DC, a4);
}

void sub_100528258(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1000BF79C(a1, a2, a3, &qword_100BE6600, (uint64_t)sub_10067968C, a4);
}

void sub_10052826C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  sub_100528280(a1, a2, a3, a4, a5, (uint64_t)sub_100542E30, (uint64_t)sub_100542E44);
}

void sub_100528280(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if ((a3 & 1) != 0)
  {
    v10 = a1;
    v20 = 0;
    swift_retain();
    Transaction.animation.setter(v11);
    Transaction.animationFrameInterval.setter(0, 1);
    v12 = sub_10015BE34(v10);
    if ((_DWORD)v12)
    {
      v13 = v12;
      Transaction.animationFrameInterval.setter(0x3F81111111111111, 0);
      v19 = 0;
      v12 = Transaction.animationReason.setter(v13);
    }
    __chkstk_darwin(v12);
    v17 = a4;
    v18 = a5;
    v14 = sub_100094EE4();
    withTransaction<A>(_:_:)(v14, a7, v16, (char *)&type metadata for () + 8);
    sub_10009880C();
    sub_10009880C();
  }
  else
  {
    __chkstk_darwin(a1);
    v17 = a4;
    v18 = a5;
    withTransaction<A>(_:_:)(0, v15, v16, (char *)&type metadata for () + 8);
  }
  sub_10004A2A0();
}

void sub_1005283AC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  BOOL (*v14)(uint64_t);
  uint64_t v15;

  v6 = a1 & 1;
  v7 = swift_allocObject(&unk_100B7E870, 40, 7);
  *(_BYTE *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  swift_bridgeObjectRetain(a3);
  sub_1000BFAB4();
  v8 = *(_QWORD *)(*v3 + 16);
  sub_1000BFAA8(v8);
  v9 = *v3;
  *(_QWORD *)(v9 + 16) = v8 + 1;
  v10 = v9 + 16 * v8;
  *(_QWORD *)(v10 + 32) = sub_100542DA8;
  *(_QWORD *)(v10 + 40) = v7;
  *v3 = v9;
  v11 = swift_allocObject(&unk_100B7E898, 17, 7);
  *(_BYTE *)(v11 + 16) = v6;
  v12[0] = v6;
  v13 = &type metadata for LocationViewPresentationKind;
  v14 = sub_100542DB8;
  v15 = v11;
  sub_1000BFAC0((uint64_t)v12, (uint64_t)&type metadata for LocationViewPresentationKind);
  sub_1000C013C();
}

void sub_10052849C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  BOOL (*v14)(uint64_t);
  uint64_t v15;

  v7 = swift_allocObject(&unk_100B7E640, 40, 7);
  *(_BYTE *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  swift_bridgeObjectRetain(a3);
  sub_1000BFAB4();
  v8 = *(_QWORD *)(*v3 + 16);
  sub_1000BFAA8(v8);
  v9 = *v3;
  *(_QWORD *)(v9 + 16) = v8 + 1;
  v10 = v9 + 16 * v8;
  *(_QWORD *)(v10 + 32) = sub_100540500;
  *(_QWORD *)(v10 + 40) = v7;
  *v3 = v9;
  v11 = swift_allocObject(&unk_100B7E668, 17, 7);
  *(_BYTE *)(v11 + 16) = a1;
  v12[0] = a1;
  v13 = &type metadata for InteractiveMapPresentationContext;
  v14 = sub_100540510;
  v15 = v11;
  sub_1000BFAC0((uint64_t)v12, (uint64_t)&type metadata for InteractiveMapPresentationContext);
}

void sub_10052859C()
{
  uint64_t v0;

  v0 = sub_10009EFC4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_1005285B8(char *a1)
{
  sub_100087918(a1);
  sub_10004A298();
}

void sub_1005285D0(_BYTE *a1, uint64_t (*a2)(void))
{
  char v3;

  sub_10009BD28((uint64_t)a1, a2);
  if (*a1 != v3)
    *a1 = v3;
  sub_100089028();
}

BOOL sub_100528608(uint64_t a1, uint64_t (*a2)(void))
{
  _BOOL8 result;
  CGRect v4;

  sub_10009BD28(a1, a2);
  result = CGRectEqualToRect(*(CGRect *)a1, v4);
  if (!result)
  {
    *(CGFloat *)a1 = v4.origin.x;
    *(CGFloat *)(a1 + 8) = v4.origin.y;
    *(CGFloat *)(a1 + 16) = v4.size.width;
    *(CGFloat *)(a1 + 24) = v4.size.height;
  }
  return result;
}

uint64_t sub_100528674(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;
  CGRect v4;
  char v5;

  result = sub_10009BD28(a1, a2);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((v5 & 1) != 0)
      return result;
LABEL_6:
    *(CGFloat *)a1 = v4.origin.x;
    *(CGFloat *)(a1 + 8) = v4.origin.y;
    *(CGFloat *)(a1 + 16) = v4.size.width;
    *(CGFloat *)(a1 + 24) = v4.size.height;
    *(_BYTE *)(a1 + 32) = v5;
    return result;
  }
  if ((v5 & 1) != 0)
    goto LABEL_6;
  result = CGRectEqualToRect(*(CGRect *)a1, v4);
  if ((result & 1) == 0)
    goto LABEL_6;
  return result;
}

void sub_1005286FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100528710(a1, a2, a3, (uint64_t)type metadata accessor for LocationViewGeometry, (uint64_t)sub_10079657C, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_100528710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, char *);
  uint64_t (*v22)(uint64_t, char *);
  void (*v23)(_QWORD);
  uint64_t (*v24)(_QWORD);
  void (*v25)(__n128);
  void (*v26)(__n128);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD);

  sub_10008900C();
  a17 = v19;
  a18 = v20;
  v22 = v21;
  v24 = (uint64_t (*)(_QWORD))v23;
  v26 = v25;
  v28 = v27;
  v23(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100089068();
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&a9 - v32;
  v26(v31);
  sub_100080C0C(v28, v18, v24);
  v34 = v22(v18, v33);
  sub_1001092A4();
  sub_1001092A4();
  if ((v34 & 1) == 0)
  {
    sub_10009DB74();
    sub_10007802C(v35, v36, v37);
  }
  sub_10009D300();
}

void sub_1005287CC(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_10009BD28((uint64_t)a1, a2);
  v3 = a1[3];
  v4 = v18;
  if (v3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = a1[2];
    if (v19)
    {
      sub_10010F980(*a1, a1[1], a1[2], a1[3]);
      v8 = sub_100087924();
      sub_1000D55D4(v8, v9, v18 & 1);
      *(_QWORD *)&v10 = swift_bridgeObjectRetain().n128_u64[0];
      v11 = static Text.== infix(_:_:)(v5, v6, v7 & 1, v3, v16, v10);
      v12 = sub_100087924();
      sub_1000D31B4(v12, v13, v18 & 1);
      swift_bridgeObjectRelease();
      sub_10011DCC4();
      if ((v11 & 1) != 0)
      {
        v14 = sub_100087924();
        sub_10010F9B0(v14, v15, v18, v19);
        return;
      }
      sub_10011DCC4();
      v4 = v18;
    }
    else
    {
      sub_1000D31B4(*a1, a1[1], v7 & 1);
      swift_bridgeObjectRelease();
    }
    goto LABEL_9;
  }
  if (v19)
  {
LABEL_9:
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v4;
    a1[3] = v19;
  }
}

void sub_100528914()
{
  uint64_t v0;

  v0 = sub_10011E198();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100528930()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100542E9C();
  *v0 = v1;
  sub_10004A298();
}

void sub_10052894C(double *a1)
{
  sub_100542E64(a1);
  sub_10004A298();
}

uint64_t sub_100528964(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v9;

  v9 = a2 & 1;
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  return dispatch thunk of ContextType.use<A>(_:for:name:)(&v9, &type metadata for LocationViewPresentationKind, a3, a4, &type metadata for LocationViewPresentationKind, v6, v7);
}

uint64_t sub_1005289D4(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v9;

  v9 = a2;
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  return dispatch thunk of ContextType.use<A>(_:for:name:)(&v9, &type metadata for InteractiveMapPresentationContext, a3, a4, &type metadata for InteractiveMapPresentationContext, v6, v7);
}

void sub_100528A40(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a2)
    a2(a1);
  sub_10052849C(a4, a5, a6);
}

BOOL sub_100528A9C(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v4;
  _BYTE v5[32];

  sub_1000CE46C(a1, (uint64_t)v5);
  return swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for LocationViewPresentationKind, 6)&& v4 != 2&& ((v4 ^ a2) & 1) == 0;
}

BOOL sub_100528B14(uint64_t a1, char a2)
{
  char v4;
  _BYTE v5[32];

  sub_1000CE46C(a1, (uint64_t)v5);
  return swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for InteractiveMapPresentationContext, 6)&& v4 != 3&& v4 == a2;
}

uint64_t sub_100528B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1000986AC();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  *(_QWORD *)(v25 + 168) = swift_getKeyPath(&unk_1009AC320);
  *(_BYTE *)(v26 + 176) = 0;
  *(_QWORD *)v26 = v24;
  sub_10003C800(v22, v26 + 16);
  *(_QWORD *)(v26 + 8) = v18;
  *(_QWORD *)(v26 + 56) = v20;
  *(_QWORD *)(v26 + 64) = v16;
  *(_QWORD *)(v26 + 72) = v14;
  sub_10003C800(v12, v26 + 80);
  *(_QWORD *)(v26 + 160) = v10;
  return sub_10003C800(a9, v26 + 120);
}

uint64_t sub_100528C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for LocationModel(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF64C();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_1000BF3B4();
  LocationModel.identifier.getter(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100528D1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  id v31;
  _BYTE *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[12];
  unsigned int v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = a1;
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v58 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Location.Identifier(0);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  __chkstk_darwin(v5);
  v7 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v8);
  v10 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1000BA294(&qword_100C0B8D0);
  __chkstk_darwin(v11);
  *(_QWORD *)&v61 = &v55[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocationModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v57 = &v55[-v18];
  v62 = v1;
  sub_1000BF64C();
  v19 = *(_QWORD *)&v10[*(int *)(v8 + 20)];
  swift_bridgeObjectRetain();
  sub_1000BF3B4();
  v20 = *(_QWORD *)(v19 + 16);
  v59 = v3;
  v60 = v2;
  if (v20)
  {
    v21 = v19 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v22 = *(_QWORD *)(v14 + 72);
    v23 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v14 + 16);
    v24 = swift_bridgeObjectRetain();
    while (1)
    {
      v25 = v23(v16, v21, v13, v24);
      LocationModel.identifier.getter(v25);
      v26 = static Location.Identifier.== infix(_:_:)(v7, v65);
      (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v7, v64);
      if ((v26 & 1) != 0)
        break;
      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
      v21 += v22;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v29 = swift_bridgeObjectRelease();
    v28 = v61;
    (*(void (**)(_QWORD, _BYTE *, uint64_t, __n128))(v14 + 32))(v61, v16, v13, v29);
    v27 = 0;
  }
  else
  {
LABEL_6:
    v27 = 1;
    v28 = v61;
  }
  _s7Weather24LocationCompositionStateOwst_0(v28, v27, 1, v13);
  swift_bridgeObjectRelease();
  if (_s7Weather24LocationCompositionStateOwet_0(v28, 1, v13) == 1)
  {
    sub_100021A14(v28, &qword_100C0B8D0);
  }
  else
  {
    v30 = (uint64_t)v57;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 32))(v57, v28, v13);
    v31 = *(id *)(v62 + 64);
    v32 = v58;
    v33 = v31;
    v34 = OSSignpostID.init(log:)(v31);
    v56 = static os_signpost_type_t.event.getter(v34);
    v35 = sub_1000BA294(&qword_100BC3C38);
    v36 = swift_allocObject(v35, 72, 7);
    v61 = xmmword_10097CA50;
    *(_OWORD *)(v36 + 16) = xmmword_10097CA50;
    v37 = LocationModel.name.getter(v36);
    v39 = v38;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    v40 = sub_1000B2E24();
    *(_QWORD *)(v36 + 64) = v40;
    *(_QWORD *)(v36 + 32) = v37;
    *(_QWORD *)(v36 + 40) = v39;
    os_signpost(_:dso:log:name:signpostID:_:_:)(v56, &_mh_execute_header, v33, "Weather:swipeBindingSetter", 26, 2, v32, "location %{private}s", 20, 2, v36);
    swift_bridgeObjectRelease();
    v42 = static os_signpost_type_t.begin.getter(v41);
    v43 = swift_allocObject(v35, 72, 7);
    *(_OWORD *)(v43 + 16) = v61;
    v44 = LocationModel.name.getter(v43);
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    *(_QWORD *)(v43 + 64) = v40;
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v45;
    LOBYTE(v53) = 2;
    os_signpost(_:dso:log:name:signpostID:_:_:)(v42, &_mh_execute_header, v33, "Weather:swipeHandler", 20, 2, v32, "location %{private}s", 20, v53, v43);
    swift_bridgeObjectRelease();
    sub_1000DB418((_QWORD *)(v62 + 24), *(_QWORD *)(v62 + 48));
    sub_10051A6FC(v30);
    v47 = static os_signpost_type_t.end.getter(v46);
    v48 = swift_allocObject(v35, 72, 7);
    *(_OWORD *)(v48 + 16) = v61;
    v49 = LocationModel.name.getter(v48);
    *(_QWORD *)(v48 + 56) = &type metadata for String;
    *(_QWORD *)(v48 + 64) = v40;
    *(_QWORD *)(v48 + 32) = v49;
    *(_QWORD *)(v48 + 40) = v50;
    LOBYTE(v54) = 2;
    os_signpost(_:dso:log:name:signpostID:_:_:)(v47, &_mh_execute_header, v33, "Weather:swipeHandler", 20, 2, v32, "location %{private}s", 20, v54, v48);
    v51 = swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t, __n128))(v59 + 8))(v32, v60, v51);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
}

uint64_t sub_100529230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 24));

  v1 = v0
     + OBJC_IVAR____TtC7WeatherP33_971182080BE1A8931C9C36EF48C83CFF28LocationViewerBindingWrapper___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10052928C()
{
  uint64_t v0;

  v0 = sub_100529230();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005292AC()
{
  return type metadata accessor for LocationViewerBindingWrapper(0);
}

uint64_t type metadata accessor for LocationViewerBindingWrapper(uint64_t a1)
{
  return sub_100098190(a1, qword_100BED5F8, (uint64_t)&nominal type descriptor for LocationViewerBindingWrapper);
}

uint64_t sub_1005292C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1005314F8(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64, (uint64_t)"(", (uint64_t)&value witness table for Builtin.UnknownObject + 64);
}

double sub_1005292EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  double result;

  v0 = (_QWORD *)type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  sub_10004037C((uint64_t)v0, qword_100BED548);
  sub_1000AECD4((uint64_t)v0, (uint64_t)qword_100BED548);
  v1 = sub_1000BDD30();
  v2 = type metadata accessor for SettingReader(v1);
  static SettingReader.shared.getter(v2);
  static Settings.VFX.animatedBackgrounds.getter(v3);
  Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  sub_10009880C();
  SettingReader.read<A>(_:)(v0);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_100529378(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t (**v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v59 = a2;
  v60 = a1;
  v2 = type metadata accessor for MeasuredLocationViewerView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  v56 = v3;
  __chkstk_darwin(v2);
  v57 = v4;
  v58 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for ContentStatusBanner(0);
  v5 = __chkstk_darwin(v55);
  v54 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v53 = (uint64_t)&v49 - v7;
  v8 = type metadata accessor for LocationModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Location.Identifier(0);
  v51 = *(_QWORD *)(v12 - 8);
  v52 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocationViewerViewModel(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  v21 = (int *)type metadata accessor for LocationViewBannerContainer(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF64C();
  v24 = *(_QWORD *)&v20[*(int *)(v15 + 48)];
  swift_bridgeObjectRetain(v24);
  sub_1000BF3B4();
  sub_1000BF64C();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v18, v8);
  sub_1000BF3B4();
  LocationModel.identifier.getter(v25);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v27 = Location.Identifier.id.getter(v26);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v52);
  sub_100121C6C(v27, v29, v24);
  v30 = v29;
  v31 = v60;
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v24);
  sub_10003B59C(v31 + *(int *)(v50 + 84), (uint64_t)&v23[v21[5]]);
  v32 = &v23[v21[6]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_1009AB958);
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  v32[32] = 0;
  v33 = &v23[v21[7]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1009AB878);
  v34 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  if (qword_100BC21C8 != -1)
    swift_once(&qword_100BC21C8, sub_10013BB30);
  v35 = v55;
  v36 = sub_1000AECD4(v55, (uint64_t)qword_100BED5B0);
  v37 = v53;
  sub_100080C0C(v36, v53, type metadata accessor for ContentStatusBanner);
  v38 = v54;
  sub_100080C0C(v37, v54, type metadata accessor for ContentStatusBanner);
  State.init(wrappedValue:)(v38, v35);
  sub_1000BF3B4();
  v39 = v58;
  sub_100080C0C(v31, v58, type metadata accessor for MeasuredLocationViewerView);
  v40 = *(unsigned __int8 *)(v56 + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = swift_allocObject(&unk_100B7DFE0, v41 + v57, v40 | 7);
  sub_10007802C(v39, v42 + v41, type metadata accessor for MeasuredLocationViewerView);
  v44 = static Alignment.center.getter(v43);
  v46 = v45;
  v47 = v59;
  sub_100080C0C((uint64_t)v23, v59, type metadata accessor for LocationViewBannerContainer);
  v48 = (uint64_t (**)(uint64_t))(v47 + *(int *)(sub_1000BA294(&qword_100BED8F8) + 36));
  *v48 = sub_100537420;
  v48[1] = (uint64_t (*)(uint64_t))v42;
  v48[2] = (uint64_t (*)(uint64_t))v44;
  v48[3] = v46;
  sub_1000BF3B4();
}

void sub_1005297C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v5 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BED900);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_1000BA294(&qword_100BED908);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BED910);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = static Alignment.center.getter(v15);
  v10[1] = v18;
  v19 = sub_1000BA294(&qword_100BED918);
  sub_100070FA0(a2, a1, (uint64_t)v10 + *(int *)(v19 + 44));
  KeyPath = swift_getKeyPath(&unk_1009AB9D0);
  v21 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  v22 = sub_1000BA294(&qword_100BED920);
  sub_100080C0C(a1, (uint64_t)v21 + *(int *)(v22 + 28), type metadata accessor for ContentStatusBannerPresentationMetrics);
  *v21 = KeyPath;
  sub_1000787D4((uint64_t)v10, (uint64_t)v13, &qword_100BED900);
  sub_1000BF684();
  v24 = v23;
  v25 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  sub_100037768(a1 + *(int *)(v25 + 20), (uint64_t)v7, &qword_100BC3620);
  v26 = type metadata accessor for ContentStatusBanner(0);
  LOBYTE(a1) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v26) != 1;
  sub_100021A14((uint64_t)v7, &qword_100BC3620);
  sub_100037768((uint64_t)v13, (uint64_t)v17, &qword_100BED908);
  v27 = &v17[*(int *)(v14 + 36)];
  *(_QWORD *)v27 = v24;
  v27[8] = a1;
  sub_100021A14((uint64_t)v13, &qword_100BED908);
  sub_1000787D4((uint64_t)v17, v29, &qword_100BED910);
}

uint64_t sub_100529A14()
{
  sub_100537474();
  return EnvironmentValues.subscript.getter(&_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVN, &_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVN);
}

void sub_100529A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v9 = a5(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v12 - v10;
  sub_100080C0C(a1, (uint64_t)&v12 - v10, a5);
  a6(v11);
  sub_10004A2A0();
}

void sub_100529AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1, (uint64_t)v4, type metadata accessor for ContentStatusBannerPresentationMetrics);
  sub_100537474();
  EnvironmentValues.subscript.setter(v4, &_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVN, &_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVN);
  sub_1000BF3B4();
}

void sub_100529B60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a1;
  v37 = a2;
  v3 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MeasuredLocationViewerView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_1000BA294(&qword_100BED9F8);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000BA294(&qword_100BED958);
  v13 = __chkstk_darwin(v36);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC22D8 != -1)
    v13 = swift_once(&qword_100BC22D8, sub_1005E696C);
  if (byte_100CAEE78 == 1)
  {
    sub_10052A1D8(v35, (uint64_t)v15);
    sub_100037768((uint64_t)v15, (uint64_t)v12, &qword_100BED958);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v16 = sub_1000BA294(&qword_100BED9D0);
    v17 = sub_10053751C();
    v18 = sub_10053775C();
    _ConditionalContent<>.init(storage:)(v12, v36, v16, v17, v18);
    sub_100021A14((uint64_t)v15, &qword_100BED958);
  }
  else
  {
    v19 = static Alignment.center.getter(v13);
    v33 = v20;
    v34 = v19;
    sub_100080C0C(v2, (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MeasuredLocationViewerView);
    sub_100080C0C(v35, (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContentStatusBannerPresentationMetrics);
    v21 = *(unsigned __int8 *)(v8 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = *(unsigned __int8 *)(v4 + 80);
    v24 = (v9 + v23 + v22) & ~v23;
    v25 = swift_allocObject(&unk_100B7E008, v24 + v5, v21 | v23 | 7);
    sub_10007802C((uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v22, type metadata accessor for MeasuredLocationViewerView);
    sub_10007802C((uint64_t)v6, v25 + v24, type metadata accessor for ContentStatusBannerPresentationMetrics);
    KeyPath = swift_getKeyPath(&unk_1009AB9F8);
    v27 = sub_10000854C(KeyPath);
    v28 = v33;
    *(_QWORD *)v12 = v34;
    *((_QWORD *)v12 + 1) = v28;
    *((_QWORD *)v12 + 2) = KeyPath;
    v12[24] = 0;
    *((_QWORD *)v12 + 4) = sub_100537A2C;
    *((_QWORD *)v12 + 5) = v25;
    *((_QWORD *)v12 + 6) = v27;
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v29 = sub_1000BA294(&qword_100BED9D0);
    v30 = sub_10053751C();
    v31 = sub_10053775C();
    _ConditionalContent<>.init(storage:)(v12, v36, v29, v30, v31);
  }
}

void sub_100529E44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];

  v3 = v2;
  v52 = a1;
  v57 = a2;
  v4 = type metadata accessor for MeasuredLocationViewerView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  v6 = *(_QWORD *)(v5 + 64);
  v53 = v5;
  v54 = v6;
  __chkstk_darwin(v4);
  v51 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v56);
  v50 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1000BA294(&qword_100BED9E8);
  __chkstk_darwin(v55);
  v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF64C();
  v14 = &v13[*(int *)(v11 + 56)];
  v16 = *((_QWORD *)v14 + 4);
  v48 = *((_QWORD *)v14 + 5);
  v15 = v48;
  swift_bridgeObjectRetain(v48);
  sub_1000BF3B4();
  sub_1000BF64C();
  v17 = &v13[*(int *)(v11 + 56)];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain(v18);
  sub_1000BF3B4();
  v58[0] = v19;
  v58[1] = v18;
  v20 = sub_100114EF8();
  v21 = Text.init<A>(_:)(v58, &type metadata for String, v20);
  v44 = v21;
  v23 = v22;
  v25 = v24;
  v49 = v24;
  LODWORD(v19) = v26 & 1;
  v27 = sub_10052AC34();
  v46 = v28;
  v47 = v29;
  v31 = v30;
  v32 = sub_10052AD1C((uint64_t)v3, v16, v15, 0, (uint64_t)_swiftEmptyArrayStorage, v21, v23, v19, v25, v27, v28, v30, v29);
  *v10 = static Alignment.topTrailing.getter();
  v10[1] = v33;
  v34 = sub_1000BA294(&qword_100BEDC38);
  sub_10052B05C(v3, v52, (uint64_t)v10 + *(int *)(v34 + 44), v32);
  v35 = v50;
  sub_100117228();
  v36 = v51;
  sub_100080C0C((uint64_t)v3, v51, type metadata accessor for MeasuredLocationViewerView);
  v37 = *(unsigned __int8 *)(v53 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = swift_allocObject(&unk_100B7E1E8, v38 + v54, v37 | 7);
  sub_10007802C(v36, v39 + v38, type metadata accessor for MeasuredLocationViewerView);
  sub_10007AB60((uint64_t)&unk_100BED9F0);
  v41 = v40;
  sub_10007A100((uint64_t)&unk_100BC5B78);
  View.onChange<A>(of:initial:_:)(v35, 0, sub_100538640, v39, v55, v56, v41, v42);
  swift_release(v39);
  sub_10010F9B0(v27, v46, v31, v47);
  sub_1000D31B4(v44, v23, v19);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v49);
  sub_1000BF3B4();
  sub_100021A14((uint64_t)v10, &qword_100BED9E8);
}

void sub_10052A1D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[3];
  char v41;
  _BYTE v42[64];

  v3 = v2;
  v34 = a2;
  v5 = sub_1000BA294(&qword_100BEDA00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BED978);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BED968);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000572C0(a1, (uint64_t)v8);
  v15 = (int *)type metadata accessor for MeasuredLocationViewerView(0);
  v16 = (char *)v3 + v15[24];
  v17 = *((_OWORD *)v16 + 1);
  v40[0] = *(_OWORD *)v16;
  v40[1] = v17;
  v40[2] = *((_OWORD *)v16 + 2);
  v41 = v16[48];
  sub_1000787D4((uint64_t)v40, (uint64_t)v42, &qword_100BC39C8);
  sub_100116E14((uint64_t)v42);
  sub_100116E74();
  sub_100116E14((uint64_t)v40);
  v18 = v36;
  static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(v18, 0, 0, 1);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
  v20 = &v11[*(int *)(v9 + 36)];
  v21 = v38;
  *(_OWORD *)v20 = v37;
  *((_OWORD *)v20 + 1) = v21;
  *((_OWORD *)v20 + 2) = v39;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = *(uint64_t *)((char *)v3 + v15[16]);
  v23 = (uint64_t)v3 + v15[20];
  v24 = &v14[*(int *)(v12 + 36)];
  v35 = *(_OWORD *)((char *)v3 + v15[19]);
  sub_10003B59C(v23, (uint64_t)(v24 + 24));
  v25 = *v3;
  swift_retain();
  swift_unknownObjectRetain(v35);
  v26 = Namespace.wrappedValue.getter(v25);
  *(_QWORD *)v24 = v22;
  *(_OWORD *)(v24 + 8) = v35;
  *((_QWORD *)v24 + 8) = v26;
  v27 = type metadata accessor for WeatherVFXConditionBackground(0);
  sub_10007A100((uint64_t)&qword_100BD0870);
  *((_QWORD *)v24 + 9) = EnvironmentObject.init()(v27, v28);
  *((_QWORD *)v24 + 10) = v29;
  sub_1000787D4((uint64_t)v11, (uint64_t)v14, &qword_100BED978);
  v30 = static SafeAreaRegions.all.getter();
  LOBYTE(v25) = static Edge.Set.all.getter();
  v31 = v34;
  sub_100037768((uint64_t)v14, v34, &qword_100BED968);
  v32 = v31 + *(int *)(sub_1000BA294(&qword_100BED958) + 36);
  *(_QWORD *)v32 = v30;
  *(_BYTE *)(v32 + 8) = v25;
  sub_100021A14((uint64_t)v14, &qword_100BED968);
}

void sub_10052A4C8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[3];
  char v94;
  char v95[8];

  v86 = a3;
  v83 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v83);
  v82 = (double *)((char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = type metadata accessor for LocationModel(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v9);
  v73 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Location.Identifier(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BEDA00);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000BA294(&qword_100BED978);
  __chkstk_darwin(v72);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v87 = sub_1000BA294(&qword_100BED968);
  __chkstk_darwin(v87);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000BA294(&qword_100BEDC10);
  __chkstk_darwin(v88);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_1000BA294(&qword_100BEDC18);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1000BA294(&qword_100BEDC20);
  __chkstk_darwin(v77);
  v78 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000572C0(a2, (uint64_t)v16);
  v25 = (int *)type metadata accessor for MeasuredLocationViewerView(0);
  v26 = (char *)a1 + v25[24];
  v27 = *((_OWORD *)v26 + 1);
  v93[0] = *(_OWORD *)v26;
  v93[1] = v27;
  v93[2] = *((_OWORD *)v26 + 2);
  v94 = v26[48];
  sub_1000787D4((uint64_t)v93, (uint64_t)v95, &qword_100BC39C8);
  sub_100116E14((uint64_t)v95);
  sub_100116E74();
  sub_100116E14((uint64_t)v93);
  v28 = v89;
  static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(v28, 0, 0, 1);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v16, v13);
  v30 = &v18[*(int *)(v72 + 36)];
  v31 = v91;
  *(_OWORD *)v30 = v90;
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v92;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v32 = *(uint64_t *)((char *)a1 + v25[16]);
  v33 = (uint64_t)a1 + v25[20];
  v34 = &v20[*(int *)(v87 + 36)];
  v87 = *(_OWORD *)((char *)a1 + v25[19]);
  sub_10003B59C(v33, (uint64_t)(v34 + 24));
  v35 = *a1;
  swift_retain();
  swift_unknownObjectRetain(v87);
  v36 = Namespace.wrappedValue.getter(v35);
  *(_QWORD *)v34 = v32;
  *(_OWORD *)(v34 + 8) = v87;
  *((_QWORD *)v34 + 8) = v36;
  v37 = type metadata accessor for WeatherVFXConditionBackground(0);
  sub_10007A100((uint64_t)&qword_100BD0870);
  *((_QWORD *)v34 + 9) = EnvironmentObject.init()(v37, v38);
  *((_QWORD *)v34 + 10) = v39;
  sub_1000787D4((uint64_t)v18, (uint64_t)v20, &qword_100BED978);
  sub_100037768((uint64_t)v20, (uint64_t)v22, &qword_100BED968);
  *(_QWORD *)&v22[*(int *)(v88 + 36)] = 0x40B3880000000000;
  sub_100021A14((uint64_t)v20, &qword_100BED968);
  v40 = v73;
  sub_1000BF64C();
  v41 = v75;
  v42 = v74;
  v43 = v76;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, v40, v76);
  sub_1000BF3B4();
  *(_QWORD *)&v87 = v12;
  LocationModel.identifier.getter(v44);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  v45 = *(uint64_t *)((char *)a1 + v25[18]);
  if (qword_100BC1EE0 != -1)
    swift_once(&qword_100BC1EE0, sub_100155298);
  v46 = type metadata accessor for RoundedCornerStyle(0);
  v47 = sub_1000AECD4(v46, (uint64_t)qword_100CAE560);
  v48 = v83;
  v49 = v82;
  v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))((char *)v82 + *(int *)(v83 + 20), v47, v46);
  *v49 = a4;
  v49[1] = a4;
  v51 = static MatchedGeometryProperties.position.getter(v50);
  v52 = static MatchedGeometryProperties.clipRect.getter();
  if ((_DWORD)v51)
  {
    if ((v52 & ~(_DWORD)v51) == 0)
      goto LABEL_9;
  }
  else if (!v52)
  {
    v51 = 0;
    goto LABEL_9;
  }
  v51 = v52 | v51;
LABEL_9:
  v53 = static UnitPoint.top.getter();
  v55 = v54;
  v56 = sub_100538598();
  sub_10007A100((uint64_t)&unk_100BC3638);
  v58 = v57;
  sub_10007A100((uint64_t)&unk_100BEDC30);
  v70 = v56;
  v59 = v79;
  v60 = v87;
  v61 = v45;
  v62 = v85;
  View.matchedGeometryEffect<A, B>(id:in:clipShape:properties:anchor:isSource:)(v87, v61, v49, v51, 1, v88, v85, v48, v53, v55, v70, v58, v63);
  sub_1000BF3B4();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v60, v62);
  sub_100021A14((uint64_t)v22, &qword_100BEDC10);
  v64 = static SafeAreaRegions.all.getter();
  v65 = static Edge.Set.all.getter();
  v66 = v80;
  v67 = (uint64_t)v78;
  v68 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v78, v59, v81);
  v69 = v67 + *(int *)(v77 + 36);
  *(_QWORD *)v69 = v64;
  *(_BYTE *)(v69 + 8) = v65;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v59, v68);
  sub_1000787D4(v67, v86, &qword_100BEDC20);
}

uint64_t sub_10052AC34()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[2];

  v0 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v0);
  v2 = (char *)v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000BF64C();
  v3 = &v2[*(int *)(v0 + 56)];
  v5 = *((_QWORD *)v3 + 2);
  v4 = *((_QWORD *)v3 + 3);
  swift_bridgeObjectRetain(v4);
  sub_1000BF3B4();
  if (!v4)
    return 0;
  v8[0] = v5;
  v8[1] = v4;
  v6 = sub_100114EF8();
  return Text.init<A>(_:)(v8, &type metadata for String, v6);
}

double sub_10052AD1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v61 = a8;
  v62 = a6;
  v63 = a7;
  v60 = a9;
  v18 = sub_1000BA294(&qword_100BC39D0);
  __chkstk_darwin(v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1 + *(int *)(type metadata accessor for MeasuredLocationViewerView(0) + 56);
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  sub_10008D47C(*(_QWORD *)v21, v23);
  sub_100109B54();
  v25 = v24;
  sub_1000B15F8(v22, v23);
  v26 = sub_10004EE20(v25 & 1);
  v27 = Text.font(_:)(v26, a2, a3, a4 & 1, a5);
  v29 = v28;
  LOBYTE(a5) = v30;
  v32 = v31;
  swift_release(v26);
  v33 = type metadata accessor for Text.WritingMode(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 1, 1, v33);
  Text.Measurements.size(of:in:writingMode:)(v27, v29, a5 & 1, v32, v20, INFINITY, INFINITY);
  v35 = v34;
  sub_1000D31B4(v27, v29, a5 & 1);
  swift_bridgeObjectRelease(v32);
  sub_100021A14((uint64_t)v20, &qword_100BC39D0);
  v36 = static Font.largeTitle.getter();
  v37 = Text.font(_:)(v36, v62, v63, v61 & 1, v60);
  v39 = v38;
  LOBYTE(v32) = v40;
  v42 = v41;
  swift_release(v36);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 1, 1, v33);
  Text.Measurements.size(of:in:writingMode:)(v37, v39, v32 & 1, v42, v20, INFINITY, INFINITY);
  v44 = v43;
  sub_1000D31B4(v37, v39, v32 & 1);
  swift_bridgeObjectRelease(v42);
  sub_100021A14((uint64_t)v20, &qword_100BC39D0);
  v45 = v35 + v44;
  if (a13)
  {
    v62 = a10;
    v63 = a11;
    sub_1000D55D4(a10, a11, a12 & 1);
    swift_bridgeObjectRetain(a13);
    v47 = static Font.headline.getter(v46);
    v48 = Font.smallCaps()();
    swift_release(v47);
    v64 = a12 & 1;
    v49 = Text.font(_:)(v48, a10, a11, a12 & 1, a13);
    v51 = v50;
    v52 = v33;
    v54 = v53;
    v56 = v55;
    swift_release(v48);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 1, 1, v52);
    Text.Measurements.size(of:in:writingMode:)(v49, v51, v54 & 1, v56, v20, INFINITY, INFINITY);
    v58 = v57;
    sub_1000D31B4(v49, v51, v54 & 1);
    swift_bridgeObjectRelease(v56);
    sub_1000D31B4(v62, v63, a12 & 1);
    swift_bridgeObjectRelease(a13);
    sub_100021A14((uint64_t)v20, &qword_100BC39D0);
    v45 = v45 + v58;
  }
  return ceil(v45);
}

void sub_10052B05C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t KeyPath;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t __src[14];
  _QWORD __dst[14];

  v46 = a2;
  v47 = a3;
  v6 = sub_1000BA294(&qword_100BEDC40);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v46 - v10);
  v12 = (int *)sub_1000BA294(&qword_100BEDC48);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v46 - v17;
  v19 = static Color.clear.getter(v16);
  v20 = (int *)type metadata accessor for MeasuredLocationViewerView(0);
  v21 = *(uint64_t *)((char *)a1 + v20[16]);
  v22 = v20[19];
  v23 = (uint64_t)a1 + v20[20];
  v48 = *(_OWORD *)((char *)a1 + v22);
  sub_10003B59C(v23, (uint64_t)&__src[3]);
  v24 = *a1;
  swift_retain();
  swift_unknownObjectRetain(v48);
  v25 = Namespace.wrappedValue.getter(v24);
  __src[0] = v21;
  *(_OWORD *)&__src[1] = v48;
  __src[8] = v25;
  v26 = type metadata accessor for WeatherVFXConditionBackground(0);
  sub_10007A100((uint64_t)&qword_100BD0870);
  __src[9] = EnvironmentObject.init()(v26, v27);
  __src[10] = v28;
  sub_100154044(__src, (uint64_t)&__dst[1]);
  __dst[0] = v19;
  v29 = sub_100154018(__src);
  v30 = static SafeAreaRegions.all.getter(v29);
  LOBYTE(v24) = static Edge.Set.all.getter();
  sub_100037768((uint64_t)__dst, (uint64_t)__src, &qword_100BEDC50);
  __src[12] = v30;
  LOBYTE(__src[13]) = v24;
  sub_100021A14((uint64_t)__dst, &qword_100BEDC50);
  memcpy(__dst, __src, 0x69uLL);
  v31 = &v18[v12[16]];
  *(_QWORD *)v31 = swift_getKeyPath(&unk_1009AB9D0);
  v32 = sub_1000BA294(&qword_100BEDC58);
  swift_storeEnumTagMultiPayload(v31, v32, 0);
  v33 = &v18[v12[17]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1009AB878);
  v34 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  v35 = &v18[v12[18]];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_1009AB820);
  *(_OWORD *)(v35 + 8) = 0u;
  *(_OWORD *)(v35 + 24) = 0u;
  *(_OWORD *)(v35 + 40) = 0u;
  *(_OWORD *)(v35 + 56) = 0u;
  v35[72] = 0;
  v36 = &v18[v12[19]];
  KeyPath = swift_getKeyPath(&unk_1009AB958);
  *(_QWORD *)v36 = KeyPath;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 3) = 0;
  v36[32] = 0;
  *(double *)v18 = a4;
  *((_QWORD *)v18 + 1) = 0x4046000000000000;
  v38 = &v18[v12[14]];
  *(_QWORD *)v38 = static VerticalAlignment.center.getter(KeyPath);
  *((_QWORD *)v38 + 1) = 0;
  v38[16] = 0;
  v39 = sub_1000BA294(&qword_100BEDC60);
  v40 = (uint64_t)&v38[*(int *)(v39 + 44)];
  *v11 = static Alignment.center.getter(v39);
  v11[1] = v41;
  v42 = sub_1000BA294(&qword_100BEDC68);
  sub_10052B4A0((uint64_t)a1, v46, (uint64_t)v11 + *(int *)(v42 + 44));
  sub_100037768((uint64_t)v11, (uint64_t)v9, &qword_100BEDC40);
  sub_100037768((uint64_t)v9, v40, &qword_100BEDC40);
  v43 = v40 + *(int *)(sub_1000BA294(&qword_100BEDC70) + 48);
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 0;
  sub_100021A14((uint64_t)v11, &qword_100BEDC40);
  sub_100021A14((uint64_t)v9, &qword_100BEDC40);
  sub_10052B74C((uint64_t)a1, (uint64_t)&v18[v12[15]], a4);
  sub_100037768((uint64_t)__dst, (uint64_t)__src, &qword_100BEDC78);
  sub_100037768((uint64_t)v18, (uint64_t)v15, &qword_100BEDC48);
  v44 = v47;
  sub_100037768((uint64_t)__src, v47, &qword_100BEDC78);
  v45 = sub_1000BA294(&qword_100BEDC80);
  sub_100037768((uint64_t)v15, v44 + *(int *)(v45 + 48), &qword_100BEDC48);
  sub_100021A14((uint64_t)v18, &qword_100BEDC48);
  sub_100021A14((uint64_t)__dst, &qword_100BEDC78);
  sub_100021A14((uint64_t)v15, &qword_100BEDC48);
  sub_100021A14((uint64_t)__src, &qword_100BEDC78);
}

void sub_10052B4A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a2;
  v29 = a3;
  v4 = sub_1000BA294(&qword_100BEDC88);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000BA294(&qword_100BEDC90);
  v7 = __chkstk_darwin(v28);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v26 - v10;
  v12 = sub_1000BA294(&qword_100BEDA00);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BEDC98);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v26 - v20;
  sub_1000572C0(v27, (uint64_t)v15);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v15, v12);
  *(_QWORD *)&v19[*(int *)(v16 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_1000787D4((uint64_t)v19, (uint64_t)v21, &qword_100BEDC98);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v23 = sub_1000BA294(&qword_100BEDCA0);
  sub_10052BC3C(a1, (uint64_t)&v6[*(int *)(v23 + 44)]);
  sub_100037768((uint64_t)v6, (uint64_t)v11, &qword_100BEDC88);
  *(_QWORD *)&v11[*(int *)(v28 + 36)] = 0x3FF0000000000000;
  sub_100021A14((uint64_t)v6, &qword_100BEDC88);
  sub_100037768((uint64_t)v21, (uint64_t)v19, &qword_100BEDC98);
  sub_100037768((uint64_t)v11, (uint64_t)v9, &qword_100BEDC90);
  v24 = v29;
  sub_100037768((uint64_t)v19, v29, &qword_100BEDC98);
  v25 = sub_1000BA294(&qword_100BEDCA8);
  sub_100037768((uint64_t)v9, v24 + *(int *)(v25 + 48), &qword_100BEDC90);
  sub_100021A14((uint64_t)v11, &qword_100BEDC90);
  sub_100021A14((uint64_t)v21, &qword_100BEDC98);
  sub_100021A14((uint64_t)v9, &qword_100BEDC90);
  sub_100021A14((uint64_t)v19, &qword_100BEDC98);
}

void sub_10052B74C(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34[2];

  v33 = a2;
  v5 = type metadata accessor for LocationModel(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Location.Identifier(0);
  v31 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for PinnedMapView(0);
  __chkstk_darwin(v15);
  v17 = (double *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for MeasuredLocationViewerView(0);
  sub_10003B59C(a1 + *(int *)(v18 + 68), (uint64_t)v34);
  sub_1000BF64C();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  sub_1000BF3B4();
  LocationModel.identifier.getter(v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = a1 + *(int *)(v18 + 28);
  v21 = *(_QWORD *)v20;
  v22 = *(unsigned __int8 *)(v20 + 8);
  LOBYTE(v5) = *(_BYTE *)(v20 + 9);
  sub_100082BE8(*(_QWORD *)v20, v22, v5);
  sub_1007A5CB0();
  v24 = v23;
  LOBYTE(v8) = v25;
  sub_100082C5C(v21, v22, v5);
  if ((v8 & 1) != 0)
    v24 = Namespace.wrappedValue.getter(0);
  sub_10003C800(v34, (uint64_t)v17);
  v17[5] = a3;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))((char *)v17 + v15[6], v14, v32);
  *(_QWORD *)((char *)v17 + v15[7]) = v24;
  v26 = (char *)v17 + v15[8];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1009AB878);
  v27 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = (char *)v17 + v15[9];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_1009AB820);
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  v28[72] = 0;
  v29 = (char *)v17 + v15[10];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_1009ABBB0);
  v29[8] = 0;
  sub_10007802C((uint64_t)v17, v33, type metadata accessor for PinnedMapView);
}

void sub_10052BA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void **aBlock;
  uint64_t v18;
  void (*v19)(uint64_t, void *);
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  char v23;

  v1 = v0;
  v2 = sub_10007A064();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter();
  if (qword_100BC2668 != -1)
    swift_once(&qword_100BC2668, sub_100824A24);
  SettingReader.read<A>(_:)(&aBlock);
  sub_10009880C();
  if (aBlock == 1)
  {
    v6 = v0 + *(int *)(v2 + 100);
    v7 = *(_BYTE *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    LOBYTE(aBlock) = v7;
    v18 = v8;
    v23 = 1;
    v9 = sub_1000BA294(&qword_100BC5608);
    State.wrappedValue.setter(&v23, v9);
    v10 = (void *)objc_opt_self(NSTimer);
    sub_100080C0C(v1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MeasuredLocationViewerView);
    v11 = *(unsigned __int8 *)(v3 + 80);
    v12 = (v11 + 16) & ~v11;
    v13 = swift_allocObject(&unk_100B7E210, v12 + v4, v11 | 7);
    sub_10007802C((uint64_t)v5, v13 + v12, type metadata accessor for MeasuredLocationViewerView);
    v21 = sub_100538658;
    v22 = v13;
    aBlock = _NSConcreteStackBlock;
    v18 = 1107296256;
    v19 = sub_10021BA7C;
    v20 = &unk_100B7E228;
    v14 = _Block_copy(&aBlock);
    swift_release(v22);
    v15 = objc_msgSend(v10, "scheduledTimerWithTimeInterval:repeats:block:", 0, v14, 0.5);
    _Block_release(v14);

  }
  sub_10004A2A0();
}

uint64_t sub_10052BBD8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[9];
  uint64_t v8;

  v2 = (char *)(a2 + *(int *)(type metadata accessor for MeasuredLocationViewerView(0) + 100));
  v3 = *v2;
  v4 = *((_QWORD *)v2 + 1);
  v7[1] = v3;
  v8 = v4;
  v7[0] = 0;
  v5 = sub_1000BA294(&qword_100BC5608);
  return State.wrappedValue.setter(v7, v5);
}

void sub_10052BC3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _OWORD v35[3];
  _OWORD v36[2];
  char v37;
  _BYTE v38[48];

  v4 = type metadata accessor for PageControl(0);
  __chkstk_darwin(v4);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BEDCB0);
  __chkstk_darwin(v7);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BEDCB8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v35 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)v35 - v17;
  v19 = sub_10003EA14((uint64_t)v6);
  static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(0, 1, 0x4038000000000000, 0);
  sub_100080C0C((uint64_t)v6, (uint64_t)v9, type metadata accessor for PageControl);
  v20 = &v9[*(int *)(v7 + 36)];
  v21 = v35[1];
  *(_OWORD *)v20 = v35[0];
  *((_OWORD *)v20 + 1) = v21;
  *((_OWORD *)v20 + 2) = v35[2];
  sub_1000BF3B4();
  LOBYTE(v6) = static Edge.Set.bottom.getter();
  v22 = a1 + *(int *)(type metadata accessor for MeasuredLocationViewerView(0) + 52);
  v23 = *(_OWORD *)(v22 + 16);
  v36[0] = *(_OWORD *)v22;
  v36[1] = v23;
  v37 = *(_BYTE *)(v22 + 32);
  sub_1000787D4((uint64_t)v36, (uint64_t)v38, &qword_100BC3BB0);
  sub_1001171F4((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55E4);
  sub_10011740C();
  v25 = v24;
  sub_1001171F4((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31C4);
  v26 = EdgeInsets.init(_all:)(fmax(v25, 10.0));
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_100037768((uint64_t)v9, (uint64_t)v16, &qword_100BEDCB0);
  v33 = &v16[*(int *)(v10 + 36)];
  *v33 = (char)v6;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100021A14((uint64_t)v9, &qword_100BEDCB0);
  sub_1000787D4((uint64_t)v16, (uint64_t)v18, &qword_100BEDCB8);
  sub_100037768((uint64_t)v18, (uint64_t)v13, &qword_100BEDCB8);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  v34 = sub_1000BA294(&qword_100BEDCC0);
  sub_100037768((uint64_t)v13, a2 + *(int *)(v34 + 48), &qword_100BEDCB8);
  sub_100021A14((uint64_t)v18, &qword_100BEDCB8);
  sub_100021A14((uint64_t)v13, &qword_100BEDCB8);
}

void sub_10052BF14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t OpaqueTypeConformance2;
  uint64_t v146;
  uint64_t v147;
  __n128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[2];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _OWORD v214[2];
  char v215;
  char v216[8];

  v204 = a2;
  v208 = a3;
  v184 = type metadata accessor for AccessibilityChildBehavior(0);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v182 = (char *)&v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for Image.Scale(0);
  v173 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v172 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_1000BA294(&qword_100BEDA10);
  __chkstk_darwin(v158);
  v157 = (uint64_t *)((char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v162 = sub_1000BA294(&qword_100BEDA18);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_1000BA294(&qword_100BEDA20);
  __chkstk_darwin(v156);
  v164 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_1000BA294(&qword_100BEDA28);
  __chkstk_darwin(v160);
  v165 = (uint64_t)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_1000BA294(&qword_100BEDA30);
  __chkstk_darwin(v163);
  v169 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_1000BA294(&qword_100BEDA38);
  __chkstk_darwin(v166);
  v171 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_1000BA294(&qword_100BEDA40);
  __chkstk_darwin(v167);
  v170 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_1000BA294(&qword_100BEDA48);
  __chkstk_darwin(v168);
  v174 = (uint64_t)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_1000BA294(&qword_100BEDA50);
  __chkstk_darwin(v178);
  v176 = (uint64_t)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_1000BA294(&qword_100BEDA58);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v179 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_1000BA294(&qword_100BEDA60);
  __chkstk_darwin(v206);
  v177 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BEDA68);
  v18 = __chkstk_darwin(v17);
  v207 = (uint64_t)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v201 = (char *)&v154 - v20;
  v203 = sub_1000BA294(&qword_100BEDA70);
  __chkstk_darwin(v203);
  v202 = (uint64_t)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MeasuredLocationViewerView(0);
  v198 = *(_QWORD *)(v22 - 8);
  v199 = *(_QWORD *)(v198 + 64);
  __chkstk_darwin(v22);
  v197 = (uint64_t)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v195 = *(_QWORD *)(v24 - 8);
  v196 = *(_QWORD *)(v195 + 64);
  __chkstk_darwin(v24);
  v194 = (uint64_t)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v192);
  v27 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000BA294(&qword_100BECFA0);
  __chkstk_darwin(v28);
  v187 = (uint64_t)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_1000BA294(&qword_100BEDA78);
  __chkstk_darwin(v200);
  v193 = (uint64_t)&v154 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000BA294(&qword_100BEDA80);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = v31;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v154 - v37;
  v39 = sub_1000BA294(&qword_100BEDA88);
  v40 = __chkstk_darwin(v39);
  v205 = (uint64_t)&v154 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v209 = (uint64_t)&v154 - v42;
  v43 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1007A61E8();
  v45 = v44;
  swift_release(v43);
  v46 = type metadata accessor for LocationViewerBindingWrapper(0);
  sub_10007A100((uint64_t)&unk_100BED878);
  v191 = v38;
  Bindable<A>.init(wrappedValue:)(v45, v46, v47);
  v188 = sub_10006210C();
  Bindable.projectedValue.getter(v33);
  KeyPath = swift_getKeyPath(&unk_1009ABA48);
  v190 = v33;
  Bindable<A>.subscript.getter(KeyPath, v33);
  swift_release(KeyPath);
  v189 = *(void (**)(char *, uint64_t))(v32 + 8);
  v189(v36, v33);
  sub_10003CE1C();
  v186 = v49;
  v185 = v50;
  v51 = *(_QWORD *)(a1 + *(int *)(v22 + 112));
  v155 = v22;
  swift_retain();
  sub_1000BF64C();
  LODWORD(v45) = v27[*(int *)(v192 + 36)];
  sub_1000BF3B4();
  v52 = v194;
  sub_100080C0C(v204, v194, type metadata accessor for ContentStatusBannerPresentationMetrics);
  v53 = v197;
  sub_100080C0C(a1, v197, type metadata accessor for MeasuredLocationViewerView);
  v54 = *(unsigned __int8 *)(v195 + 80);
  v55 = (v54 + 16) & ~v54;
  v56 = *(unsigned __int8 *)(v198 + 80);
  v57 = (v196 + v56 + v55) & ~v56;
  v58 = swift_allocObject(&unk_100B7E0A8, v57 + v199, v54 | v56 | 7);
  v59 = v58 + v55;
  v60 = (uint64_t)v201;
  sub_10007802C(v52, v59, type metadata accessor for ContentStatusBannerPresentationMetrics);
  sub_10007802C(v53, v58 + v57, type metadata accessor for MeasuredLocationViewerView);
  v61 = v193;
  v62 = v58;
  v63 = a1;
  sub_10052D230((uint64_t)v188, v187, v186, v185, v51, v45, (uint64_t (*)(uint64_t))sub_100537F24, v62, v193);
  v64 = v202;
  sub_100037768(v61, v202, &qword_100BEDA78);
  swift_storeEnumTagMultiPayload(v64, v203, 0);
  v65 = sub_1000BA294(&qword_100BEDA90);
  sub_10007AB60((uint64_t)&unk_100BEDA98);
  v67 = v66;
  v68 = sub_100537F94();
  _ConditionalContent<>.init(storage:)(v64, v200, v65, v67, v68);
  sub_100021A14(v61, &qword_100BEDA78);
  v189(v191, v190);
  v69 = sub_100037C54();
  v70 = 1;
  if ((v69 & 1) != 0)
  {
    v71 = static VerticalAlignment.center.getter(v69);
    v72 = (uint64_t)v157;
    *v157 = v71;
    *(_QWORD *)(v72 + 8) = 0;
    *(_BYTE *)(v72 + 16) = 1;
    v73 = sub_1000BA294(&qword_100BEDAC8);
    sub_10052D500(a1, (char *)(v72 + *(int *)(v73 + 44)));
    sub_10007AB60((uint64_t)&unk_100BEDAD0);
    v75 = v74;
    v76 = sub_100139354();
    v77 = v159;
    View.buttonStyle<A>(_:)(v76, v158, &type metadata for BottomBarButtonStyle, v75, v76);
    sub_100021A14(v72, &qword_100BEDA10);
    v79 = static Edge.Set.horizontal.getter(v78);
    v80 = EdgeInsets.init(_all:)(12.0);
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v87 = v161;
    v88 = (uint64_t)v164;
    v89 = v162;
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v164, v77, v162);
    v90 = v88 + *(int *)(v156 + 36);
    *(_BYTE *)v90 = v79;
    *(double *)(v90 + 8) = v80;
    *(_QWORD *)(v90 + 16) = v82;
    *(_QWORD *)(v90 + 24) = v84;
    *(_QWORD *)(v90 + 32) = v86;
    *(_BYTE *)(v90 + 40) = 0;
    v91 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v77, v89);
    static Alignment.center.getter(v91);
    _FrameLayout.init(width:height:alignment:)(0, 1, 0x4046000000000000, 0);
    v92 = v165;
    sub_100037768(v88, v165, &qword_100BEDA20);
    v93 = (_OWORD *)(v92 + *(int *)(v160 + 36));
    v94 = v212;
    *v93 = v211;
    v93[1] = v94;
    v93[2] = v213;
    sub_100021A14(v88, &qword_100BEDA20);
    v95 = v173;
    v96 = v172;
    v97 = v175;
    (*(void (**)(char *, _QWORD, uint64_t))(v173 + 104))(v172, enum case for Image.Scale.large(_:), v175);
    v98 = swift_getKeyPath(&unk_1009ABA70);
    v99 = (uint64_t)v169;
    v100 = (uint64_t *)&v169[*(int *)(v163 + 36)];
    v101 = sub_1000BA294(&qword_100BCF148);
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))((char *)v100 + *(int *)(v101 + 28), v96, v97);
    *v100 = v98;
    sub_100037768(v92, v99, &qword_100BEDA28);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
    sub_100021A14(v92, &qword_100BEDA28);
    LOBYTE(v98) = static Edge.Set.bottom.getter();
    v102 = v63 + *(int *)(v155 + 52);
    v103 = *(_OWORD *)(v102 + 16);
    v214[0] = *(_OWORD *)v102;
    v214[1] = v103;
    v215 = *(_BYTE *)(v102 + 32);
    sub_1000787D4((uint64_t)v214, (uint64_t)v216, &qword_100BC3BB0);
    sub_1001171F4((uint64_t)v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55E4);
    sub_10011740C();
    v105 = v104;
    sub_1001171F4((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31C4);
    v106 = EdgeInsets.init(_all:)(v105);
    v108 = v107;
    v110 = v109;
    v112 = v111;
    v113 = v171;
    sub_100037768(v99, v171, &qword_100BEDA30);
    v114 = v113 + *(int *)(v166 + 36);
    *(_BYTE *)v114 = v98;
    *(double *)(v114 + 8) = v106;
    *(_QWORD *)(v114 + 16) = v108;
    *(_QWORD *)(v114 + 24) = v110;
    *(_QWORD *)(v114 + 32) = v112;
    *(_BYTE *)(v114 + 40) = 0;
    sub_100021A14(v99, &qword_100BEDA30);
    v116 = static Alignment.center.getter(v115);
    v118 = v117;
    v119 = (uint64_t)v170;
    v120 = (uint64_t)&v170[*(int *)(v167 + 36)];
    sub_10052E870(v63, v120);
    v121 = (uint64_t *)(v120 + *(int *)(sub_1000BA294(&qword_100BEDAE0) + 36));
    *v121 = v116;
    v121[1] = v118;
    sub_1000787D4(v113, v119, &qword_100BEDA38);
    v122 = v174;
    sub_100037768(v119, v174, &qword_100BEDA40);
    *(_BYTE *)(v122 + *(int *)(v168 + 36)) = 1;
    sub_100021A14(v119, &qword_100BEDA40);
    v123 = swift_getKeyPath(&unk_1009ABAA0);
    v124 = static Alignment.top.getter(v123);
    v126 = v125;
    v127 = v176;
    sub_100037768(v122, v176, &qword_100BEDA48);
    v128 = v178;
    v129 = v127 + *(int *)(v178 + 36);
    *(_QWORD *)v129 = v123;
    *(_BYTE *)(v129 + 8) = 0;
    *(_QWORD *)(v129 + 16) = v124;
    *(_QWORD *)(v129 + 24) = v126;
    sub_100021A14(v122, &qword_100BEDA48);
    v130 = v182;
    static AccessibilityChildBehavior.contain.getter(v131);
    v132 = sub_10053806C();
    v133 = v179;
    View.accessibilityElement(children:)(v130, v128, v132);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v130, v184);
    sub_100021A14(v127, &qword_100BEDA50);
    v134 = LocalizedStringKey.init(stringLiteral:)(0x7261626C6F6F54, 0xE700000000000000);
    v138 = Text.init(_:tableName:bundle:comment:)(v134, v136, v135 & 1, v137, 0, 0, 0, 0);
    v140 = v139;
    v142 = v141;
    v144 = v143 & 1;
    v210[0] = v128;
    v210[1] = v132;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v210, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v146 = (uint64_t)v177;
    v147 = v181;
    View.accessibilityLabel(_:)(v138, v140, v144, v142, v181, OpaqueTypeConformance2);
    sub_1000D31B4(v138, v140, v144);
    v148 = swift_bridgeObjectRelease(v142);
    (*(void (**)(char *, uint64_t, __n128))(v180 + 8))(v133, v147, v148);
    sub_1000787D4(v146, v60, &qword_100BEDA60);
    v70 = 0;
  }
  _s7Weather24LocationCompositionStateOwst_0(v60, v70, 1, v206);
  v149 = v209;
  v150 = v205;
  sub_100037768(v209, v205, &qword_100BEDA88);
  v151 = v207;
  sub_100037768(v60, v207, &qword_100BEDA68);
  v152 = v208;
  sub_100037768(v150, v208, &qword_100BEDA88);
  v153 = sub_1000BA294(&qword_100BEDAC0);
  sub_100037768(v151, v152 + *(int *)(v153 + 48), &qword_100BEDA68);
  sub_100021A14(v60, &qword_100BEDA68);
  sub_100021A14(v149, &qword_100BEDA88);
  sub_100021A14(v151, &qword_100BEDA68);
  sub_100021A14(v150, &qword_100BEDA88);
}

uint64_t sub_10052CF20(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Location.Identifier(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return sub_100528D1C((uint64_t)v5);
}

uint64_t sub_10052CFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *a4 = static Alignment.center.getter(a1);
  a4[1] = v8;
  v9 = sub_1000BA294(&qword_100BEDC08);
  return sub_10052CFFC(a1, a2, a3, (uint64_t)a4 + *(int *)(v9 + 44));
}

uint64_t sub_10052CFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v7 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocationModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  sub_100080C0C(v27, (uint64_t)v12, type metadata accessor for ContentStatusBannerPresentationMetrics);
  v17 = Namespace.wrappedValue.getter(*a3);
  type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000BF64C();
  LOBYTE(v7) = v9[*(int *)(v7 + 28)];
  sub_1000BF3B4();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a4, v16, v13);
  v18 = (int *)type metadata accessor for LocationViewPage(0);
  sub_10007802C((uint64_t)v12, a4 + v18[5], type metadata accessor for ContentStatusBannerPresentationMetrics);
  *(_QWORD *)(a4 + v18[6]) = v17;
  *(_BYTE *)(a4 + v18[7]) = v7;
  *(_QWORD *)(a4 + v18[8]) = 0x4046000000000000;
  v19 = (_QWORD *)(a4 + v18[9]);
  *v19 = swift_getKeyPath(&unk_1009AB7F8);
  v20 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = a4 + v18[10];
  v22 = type metadata accessor for PageControlDisplayState(0);
  sub_10007A100((uint64_t)&unk_100BED880);
  result = Environment.init<A>(_:)(v22, v22, v23);
  *(_QWORD *)v21 = result;
  *(_BYTE *)(v21 + 8) = v25 & 1;
  return result;
}

void sub_10052D230(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  __int128 v44;

  v39 = a4;
  v40 = a8;
  v41 = a1;
  v42 = a7;
  v38 = a6;
  v37 = a2;
  v12 = sub_1000BA294(&qword_100BEDBF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v36 - v16;
  v18 = (int *)sub_1000BA294(&qword_100BEDA78);
  v19 = a9 + v18[17];
  LOBYTE(v43) = 0;
  State.init(wrappedValue:)(&v43, &type metadata for Bool);
  v20 = *((_QWORD *)&v44 + 1);
  *(_BYTE *)v19 = v44;
  *(_QWORD *)(v19 + 8) = v20;
  v21 = a9 + v18[18];
  LOBYTE(v43) = 0;
  State.init(wrappedValue:)(&v43, &type metadata for Bool);
  v22 = *((_QWORD *)&v44 + 1);
  *(_BYTE *)v21 = v44;
  *(_QWORD *)(v21 + 8) = v22;
  v23 = sub_1000BA294(&qword_100BEDBF8);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 1, 1, v23);
  sub_100037768((uint64_t)v17, (uint64_t)v15, &qword_100BEDBF0);
  State.init(wrappedValue:)(v15, v12);
  sub_100021A14((uint64_t)v17, &qword_100BEDBF0);
  v24 = v18[20];
  v43 = 0;
  State.init(wrappedValue:)(&v43, &type metadata for Int);
  *(_OWORD *)(a9 + v24) = v44;
  v25 = a9 + v18[22];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_1009ABB30);
  *(_BYTE *)(v25 + 8) = 0;
  v26 = a9 + v18[23];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1009ABB58);
  *(_BYTE *)(v26 + 8) = 0;
  v27 = a9 + v18[24];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1009ABB88);
  *(_BYTE *)(v27 + 8) = 0;
  v28 = v37;
  sub_100037768(v37, a9, &qword_100BECFA0);
  v29 = a9 + v18[13];
  v30 = sub_1000BA294(&qword_100BECFA0);
  Binding.wrappedValue.getter(v30);
  *(_QWORD *)(v29 + *(int *)(sub_1000BA294(&qword_100BEDC00) + 28)) = 0;
  *(_BYTE *)(a9 + v18[21]) = v38;
  v31 = (_QWORD *)(a9 + v18[15]);
  v32 = v39;
  *v31 = a3;
  v31[1] = v32;
  *(_QWORD *)(a9 + v18[16]) = a5;
  swift_retain();
  swift_retain();
  v33 = v40;
  swift_retain();
  v34 = v41;
  v35 = sub_100527AE8(v41, v42, v33);
  swift_release(a3);
  swift_release(a5);
  sub_100021A14(v28, &qword_100BECFA0);
  swift_release(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(a9 + v18[14]) = v35;
}

uint64_t sub_10052D500@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  int *v130;
  void (*v131)(char *, uint64_t);
  _QWORD v133[2];
  void (*v134)(char *, uint64_t);
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  _QWORD __src[14];

  v168 = a2;
  v149 = sub_1000BA294(&qword_100BEDB60);
  v3 = __chkstk_darwin(v149);
  v145 = (char *)v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v148 = (char *)v133 - v5;
  v167 = sub_1000BA294(&qword_100BEDB68);
  v147 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v146 = (char *)v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for UserInterfaceSizeClass(0);
  v159 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v133[0] = (char *)v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v156);
  v160 = (char *)v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5A68);
  v10 = __chkstk_darwin(v9);
  v150 = (uint64_t)v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v157 = (char *)v133 - v13;
  __chkstk_darwin(v12);
  v158 = (char *)v133 - v14;
  v15 = sub_1000BA294(&qword_100BEDB70);
  v16 = __chkstk_darwin(v15);
  v166 = (uint64_t)v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v164 = (char *)v133 - v18;
  v19 = sub_1000BA294(&qword_100BEDB78);
  v20 = __chkstk_darwin(v19);
  v165 = (uint64_t)v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v174 = (uint64_t)v133 - v22;
  v23 = type metadata accessor for PageControl(0);
  __chkstk_darwin(v23);
  v152 = (uint64_t)v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_1000BA294(&qword_100BEDB80);
  v25 = __chkstk_darwin(v154);
  v163 = (uint64_t)v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v153 = (uint64_t)v133 - v28;
  __chkstk_darwin(v27);
  v172 = (uint64_t)v133 - v29;
  v169 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v169);
  v31 = (char *)v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for MeasuredLocationViewerView(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 64);
  __chkstk_darwin(v32);
  v35 = (char *)v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_1000BA294((uint64_t *)&unk_100C0A3F0);
  v162 = *(char **)(v170 - 8);
  __chkstk_darwin(v170);
  v37 = (char *)v133 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_1000BA294(&qword_100BEDB88);
  __chkstk_darwin(v171);
  v39 = (char *)v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_1000BA294(&qword_100BEDB90);
  v176 = *(_QWORD **)(v173 - 8);
  v40 = __chkstk_darwin(v173);
  v42 = (char *)v133 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v175 = (char *)v133 - v43;
  v151 = a1;
  sub_100080C0C(a1, (uint64_t)v35, type metadata accessor for MeasuredLocationViewerView);
  v44 = *(unsigned __int8 *)(v33 + 80);
  v45 = (v44 + 16) & ~v44;
  v137 = v45 + v34;
  v136 = v44 | 7;
  v46 = swift_allocObject(&unk_100B7E0D0, v45 + v34, v44 | 7);
  v138 = v45;
  v140 = v35;
  sub_10007802C((uint64_t)v35, v46 + v45, type metadata accessor for MeasuredLocationViewerView);
  Button.init(action:label:)(sub_100538338, v46, sub_10052E478, 0, &type metadata for Image, &protocol witness table for Image);
  v155 = v32;
  v133[1] = a1 + *(int *)(v32 + 60);
  sub_1000BF64C();
  LOBYTE(a1) = v31[*(int *)(v169 + 44)];
  v142 = v31;
  sub_1000BF3B4();
  KeyPath = swift_getKeyPath(&unk_1009ABAD0);
  v48 = swift_allocObject(&unk_100B7E0F8, 17, 7);
  *(_BYTE *)(v48 + 16) = (a1 & 1) == 0;
  v49 = v162;
  v50 = v170;
  v135 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v162 + 2);
  v135(v39, v37, v170);
  v51 = v171;
  v52 = (uint64_t *)&v39[*(int *)(v171 + 36)];
  *v52 = KeyPath;
  v52[1] = (uint64_t)sub_1001545E8;
  v52[2] = v48;
  v53 = (void (*)(char *, uint64_t))*((_QWORD *)v49 + 1);
  v143 = v37;
  v134 = v53;
  v53(v37, v50);
  v54 = sub_1000BA294(&qword_100BEDB98);
  v55 = sub_100157164();
  sub_10007AB60((uint64_t)&unk_100BEDBB0);
  v139 = v55;
  v141 = v56;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_10052E4A8, 0, v51, v54, v55);
  v144 = v39;
  sub_100021A14((uint64_t)v39, &qword_100BEDB88);
  v57 = (void (*)(char *, char *, uint64_t))v176[4];
  v58 = v151;
  v162 = v42;
  v57(v175, v42, v173);
  v59 = v152;
  v60 = sub_10003EA14(v152);
  v61 = static Alignment.center.getter(v60);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(__src, 0, 0, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0, 1, v61, v62);
  v63 = v153;
  sub_100080C0C(v59, v153, type metadata accessor for PageControl);
  memcpy((void *)(v63 + *(int *)(v154 + 36)), __src, 0x70uLL);
  sub_1000BF3B4();
  sub_1000787D4(v63, v172, &qword_100BEDB80);
  if (qword_100BC21A8 != -1)
    swift_once(&qword_100BC21A8, sub_10012F04C);
  if (byte_100BED560 == 1)
  {
    v64 = v174;
    sub_10052EF10(v58, v174);
    v65 = 0;
  }
  else
  {
    v65 = 1;
    v64 = v174;
  }
  v66 = v161;
  v67 = (uint64_t)v160;
  v68 = v159;
  v69 = (uint64_t)v158;
  v70 = (uint64_t)v157;
  v71 = sub_1000BA294(&qword_100BEDBB8);
  v72 = _s7Weather24LocationCompositionStateOwst_0(v64, v65, 1, v71);
  sub_10011AA68(v72);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v70, enum case for UserInterfaceSizeClass.compact(_:), v66);
  _s7Weather24LocationCompositionStateOwst_0(v70, 0, 1, v66);
  v73 = v67 + *(int *)(v156 + 48);
  sub_100037768(v69, v67, &qword_100BC5A68);
  sub_100037768(v70, v73, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v67, 1, v66) != 1)
  {
    v74 = v150;
    sub_100037768(v67, v150, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v73, 1, v66) != 1)
    {
      v161 = v54;
      v75 = v70;
      v76 = v74;
      v77 = v133[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v68 + 32))(v133[0], v73, v66);
      sub_10007A100((uint64_t)&qword_100BC5AB8);
      v79 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v77, v66, v78);
      v80 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v80(v77, v66);
      sub_100021A14(v75, &qword_100BC5A68);
      sub_100021A14(v69, &qword_100BC5A68);
      v80(v76, v66);
      sub_100021A14(v67, &qword_100BC5A68);
      if ((v79 & 1) != 0)
        goto LABEL_13;
LABEL_14:
      v120 = 1;
      v119 = v167;
      v118 = (uint64_t)v164;
      goto LABEL_15;
    }
    sub_100021A14(v70, &qword_100BC5A68);
    sub_100021A14(v69, &qword_100BC5A68);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v74, v66);
LABEL_11:
    sub_100021A14(v67, &qword_100BC5E60);
    goto LABEL_14;
  }
  sub_100021A14(v70, &qword_100BC5A68);
  sub_100021A14(v69, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v73, 1, v66) != 1)
    goto LABEL_11;
  v161 = v54;
  sub_100021A14(v67, &qword_100BC5A68);
LABEL_13:
  v81 = (uint64_t)v140;
  sub_100080C0C(v58, (uint64_t)v140, type metadata accessor for MeasuredLocationViewerView);
  v82 = swift_allocObject(&unk_100B7E120, v137, v136);
  sub_10007802C(v81, v82 + v138, type metadata accessor for MeasuredLocationViewerView);
  v83 = v143;
  Button.init(action:label:)(sub_100538354, v82, sub_10052E6B4, 0, &type metadata for Image, &protocol witness table for Image);
  v84 = v142;
  sub_1000BF64C();
  LOBYTE(v82) = v84[*(int *)(v169 + 40)];
  sub_1000BF3B4();
  v85 = swift_getKeyPath(&unk_1009ABAD0);
  v86 = swift_allocObject(&unk_100B7E148, 17, 7);
  *(_BYTE *)(v86 + 16) = (v82 & 1) == 0;
  v87 = (uint64_t)v144;
  v88 = v170;
  v135(v144, v83, v170);
  v89 = v171;
  v90 = (uint64_t *)(v87 + *(int *)(v171 + 36));
  *v90 = v85;
  v90[1] = (uint64_t)sub_1002A5A90;
  v90[2] = v86;
  v134(v83, v88);
  v91 = LocalizedStringKey.init(stringLiteral:)(0x6E6F697461636F4CLL, 0xED00007473694C20);
  v95 = Text.init(_:tableName:bundle:comment:)(v91, v93, v92 & 1, v94, 0, 0, 0, "Accessibility label for the location list toolbar button");
  v97 = v96;
  v99 = v98;
  v101 = v100 & 1;
  v102 = (uint64_t)v145;
  View.accessibilityLabel(_:)(v95, v96, v100 & 1, v98, v89, v139);
  sub_1000D31B4(v95, v97, v101);
  swift_bridgeObjectRelease(v99);
  sub_100021A14(v87, &qword_100BEDB88);
  v103 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000049, 0x8000000100A09910);
  v107 = Text.init(_:tableName:bundle:comment:)(v103, v105, v104 & 1, v106, 0, 0, 0, "Accessibility hint for the location list toolbar button");
  v109 = v108;
  v111 = v110;
  v113 = v112 & 1;
  v114 = (uint64_t)v148;
  v115 = v149;
  ModifiedContent<>.accessibilityHint(_:)();
  sub_1000D31B4(v107, v109, v113);
  swift_bridgeObjectRelease(v111);
  sub_100021A14(v102, &qword_100BEDB60);
  v116 = sub_10053836C();
  v117 = v146;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_10052E6F4, 0, v115, v161, v116);
  sub_100021A14(v114, &qword_100BEDB60);
  v118 = (uint64_t)v164;
  v119 = v167;
  (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v164, v117, v167);
  v120 = 0;
LABEL_15:
  _s7Weather24LocationCompositionStateOwst_0(v118, v120, 1, v119);
  v121 = (void (*)(char *, char *, uint64_t))v176[2];
  v122 = v162;
  v123 = v173;
  v121(v162, v175, v173);
  v124 = v172;
  v125 = v163;
  sub_100037768(v172, v163, &qword_100BEDB80);
  v126 = v174;
  v127 = v165;
  sub_100037768(v174, v165, &qword_100BEDB78);
  v128 = v166;
  sub_100037768(v118, v166, &qword_100BEDB70);
  v129 = v168;
  v121(v168, v122, v123);
  v130 = (int *)sub_1000BA294(&qword_100BEDBC0);
  sub_100037768(v125, (uint64_t)&v129[v130[12]], &qword_100BEDB80);
  sub_100037768(v127, (uint64_t)&v129[v130[16]], &qword_100BEDB78);
  sub_100037768(v128, (uint64_t)&v129[v130[20]], &qword_100BEDB70);
  sub_100021A14(v118, &qword_100BEDB70);
  sub_100021A14(v126, &qword_100BEDB78);
  sub_100021A14(v124, &qword_100BEDB80);
  v131 = (void (*)(char *, uint64_t))v176[1];
  v131(v175, v123);
  sub_100021A14(v128, &qword_100BEDB70);
  sub_100021A14(v127, &qword_100BEDB78);
  sub_100021A14(v125, &qword_100BEDB80);
  return ((uint64_t (*)(char *, uint64_t))v131)(v122, v123);
}

uint64_t sub_10052E478@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(7364973, 0xE300000000000000);
  *a1 = result;
  return result;
}

double sub_10052E4A8@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_10052E700((void (*)(unint64_t *__return_ptr))sub_10052E4B4, a1).n128_u64[0];
  return result;
}

double sub_10052E4B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double result;

  v2 = Image.init(systemName:)(7364973, 0xE300000000000000);
  v3 = LocalizedStringKey.init(stringLiteral:)(0x70614D20776F6853, 0xE800000000000000);
  v7 = Text.init(_:tableName:bundle:comment:)(v3, v5, v4 & 1, v6, 0, 0, 0, "Accessibility label for show map toolbar button");
  v9 = v8;
  v11 = v10;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v7;
  v13 = v12 & 1;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v12 & 1;
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain();
  sub_1000D55D4(v7, v9, v13);
  swift_bridgeObjectRetain(v11);
  sub_1000D31B4(v7, v9, v13);
  swift_release(v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

void sub_10052E59C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v4[4];

  v1 = a1;
  if (qword_100BC1F78 != -1)
    a1 = swift_once(&qword_100BC1F78, sub_10032E324);
  v2 = qword_100CAE680;
  if (qword_100BC22D8 != -1)
    a1 = swift_once(&qword_100BC22D8, sub_1005E696C);
  __chkstk_darwin(a1);
  v4[2] = v1;
  sub_100528280(1, v2, (v3 & 1) == 0, (uint64_t)sub_1005384DC, (uint64_t)v4, (uint64_t)sub_1005384E4, (uint64_t)sub_1005384FC);
}

void sub_10052E668(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000DB418((_QWORD *)(a1 + *(int *)(v2 + 68)), *(_QWORD *)(a1 + *(int *)(v2 + 68) + 24));
  sub_10051A79C();
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
}

uint64_t sub_10052E6B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x6C75622E7473696CLL, 0xEB0000000074656CLL);
  *a1 = result;
  return result;
}

double sub_10052E6F4@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_10052E700((void (*)(unint64_t *__return_ptr))sub_10052E76C, a1).n128_u64[0];
  return result;
}

__n128 sub_10052E700@<Q0>(void (*a1)(unint64_t *__return_ptr)@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  __n128 result;
  unint64_t v9;
  __n128 v10;
  unsigned __int8 v11;
  unint64_t v12;

  v4 = static HorizontalAlignment.center.getter();
  a1(&v9);
  v5 = v9;
  v6 = v11;
  v7 = v12;
  result = v10;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = 0;
  a2[1].n128_u8[0] = 1;
  a2[1].n128_u64[1] = v5;
  a2[2] = result;
  a2[3].n128_u8[0] = v6;
  a2[3].n128_u64[1] = v7;
  return result;
}

double sub_10052E76C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double result;

  v2 = Image.init(systemName:)(0x6C75622E7473696CLL, 0xEB0000000074656CLL);
  v3 = LocalizedStringKey.init(stringLiteral:)(0x6E6F697461636F4CLL, 0xED00007473694C20);
  v7 = Text.init(_:tableName:bundle:comment:)(v3, v5, v4 & 1, v6, 0, 0, 0, "Accessibility label for location list toolbar button");
  v9 = v8;
  v11 = v10;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v7;
  v13 = v12 & 1;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v12 & 1;
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain();
  sub_1000D55D4(v7, v9, v13);
  swift_bridgeObjectRetain(v11);
  sub_1000D31B4(v7, v9, v13);
  swift_release(v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

void sub_10052E870(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v31 = sub_1000BA294(&qword_100BEDB38);
  __chkstk_darwin(v31);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000BA294(&qword_100BEDB40);
  v5 = __chkstk_darwin(v33);
  v30 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v32 = (uint64_t)&v29 - v7;
  v8 = sub_1000BA294(&qword_100BEDB48);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Color.RGBColorSpace(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + *(int *)(type metadata accessor for MeasuredLocationViewerView(0) + 40);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_10008D47C(*(_QWORD *)v15, v17);
  sub_100109B54();
  v19 = v18;
  sub_1000B15F8(v16, v17);
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Color.RGBColorSpace.sRGB(_:), v11);
    *v10 = Color.init(_:white:opacity:)(v14, 0.1, 1.0);
    swift_storeEnumTagMultiPayload(v10, v8, 0);
    v20 = sub_100157264();
    _ConditionalContent<>.init(storage:)(v10, &type metadata for Color, v33, &protocol witness table for Color, v20);
  }
  else
  {
    v21 = v33;
    v22 = sub_10001A47C();
    if (qword_100BC21F0 != -1)
      swift_once(&qword_100BC21F0, sub_1001542A4);
    v23 = type metadata accessor for Material(0);
    v24 = sub_1000AECD4(v23, (uint64_t)qword_100CAED40);
    v25 = static Edge.Set.all.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v4, v24, v23);
    v4[*(int *)(v31 + 36)] = v25;
    v26 = v30;
    sub_100037768((uint64_t)v4, (uint64_t)v30 + *(int *)(v21 + 36), &qword_100BEDB38);
    *v26 = v22;
    sub_100021A14((uint64_t)v4, &qword_100BEDB38);
    v27 = v32;
    sub_1000787D4((uint64_t)v26, v32, &qword_100BEDB40);
    sub_100037768(v27, (uint64_t)v10, &qword_100BEDB40);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    v28 = sub_100157264();
    _ConditionalContent<>.init(storage:)(v10, &type metadata for Color, v21, &protocol witness table for Color, v28);
    sub_100021A14(v27, &qword_100BEDB40);
  }
}

uint64_t sub_10052EB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  __n128 v43;
  uint64_t v44;
  _DWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for MeasuredLocationViewerView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BD0980);
  __chkstk_darwin(v8);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF64C();
  v14 = v13[*(int *)(v11 + 32)];
  sub_1000BF3B4();
  if (v14 < 0)
  {
    v20 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000017, 0x80000001009F7730);
    v24 = Text.init(_:tableName:bundle:comment:)(v20, v22, v21 & 1, v23, 0, 0, 0, "Title of alert shown when adding a city from a preview card and the maximum cities has been reached");
    v47 = v25;
    v48 = v24;
    v45[1] = v26;
    v46 = v27;
    v28 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000036, 0x80000001009F77C0);
    Text.init(_:tableName:bundle:comment:)(v28, v30, v29 & 1, v31, 0, 0, 0, "Message of alert shown when adding a city from a preview card and the maximum cities has been reached");
    v32 = LocalizedStringKey.init(stringLiteral:)(19279, 0xE200000000000000);
    v36 = Text.init(_:tableName:bundle:comment:)(v32, v34, v33 & 1, v35, 0, 0, 0, "OK button title");
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    static Alert.Button.default(_:action:)(v36, v37, v41 & 1, v39, LocationSearchEntityFromStringResolver.init(), 0, v43);
    sub_1000D31B4(v36, v38, v42);
    swift_bridgeObjectRelease(v40);
    v44 = type metadata accessor for Alert.Button(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v44);
    return Alert.init(title:message:dismissButton:)(v48);
  }
  else
  {
    sub_100080C0C(a1, (uint64_t)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MeasuredLocationViewerView);
    v15 = *(unsigned __int8 *)(v5 + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = v16 + v6;
    v18 = swift_allocObject(&unk_100B7E030, v17 + 1, v15 | 7);
    sub_10007802C((uint64_t)v7, v18 + v16, type metadata accessor for MeasuredLocationViewerView);
    *(_BYTE *)(v18 + v17) = v14;
    sub_1002A4434(v14 + 3, (uint64_t)LocationSearchEntityFromStringResolver.init(), 0, (uint64_t)sub_100537C04, v18, a2);
    return swift_release(v18);
  }
}

void sub_10052EECC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000DB418((_QWORD *)(a1 + *(int *)(v4 + 68)), *(_QWORD *)(a1 + *(int *)(v4 + 68) + 24));
  sub_10051A9D8(a2);
}

void sub_10052EF10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;

  v41 = a2;
  v3 = type metadata accessor for MeasuredLocationViewerView(0);
  v37 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v37 + 64);
  __chkstk_darwin(v3);
  v36 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BEDBD0);
  v40 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v38 = (char *)&v36 - v8;
  v9 = type metadata accessor for ConditionPickerMenuViewModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ConditionPickerMenuView(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v36 - v19;
  sub_1000BF64C();
  sub_100080C0C((uint64_t)&v14[*(int *)(v12 + 24)], (uint64_t)v11, type metadata accessor for ConditionPickerMenuViewModel);
  sub_1000BF3B4();
  sub_10052F284(&v20[*(int *)(v15 + 20)]);
  sub_10007802C((uint64_t)v11, (uint64_t)v20, type metadata accessor for ConditionPickerMenuViewModel);
  v21 = v36;
  sub_100080C0C(a1, v36, type metadata accessor for MeasuredLocationViewerView);
  v22 = *(unsigned __int8 *)(v37 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = swift_allocObject(&unk_100B7E170, v23 + v4, v22 | 7);
  sub_10007802C(v21, v24 + v23, type metadata accessor for MeasuredLocationViewerView);
  v43 = a1;
  v25 = sub_1000BA294(&qword_100BEDBD8);
  v26 = sub_100538430();
  v27 = v38;
  Button.init(action:label:)(sub_1005383F4, v24, sub_100538428, v42, v25, v26);
  sub_100080C0C((uint64_t)v20, (uint64_t)v18, type metadata accessor for ConditionPickerMenuView);
  v28 = v39;
  v29 = v40;
  v30 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v30(v39, v27, v5);
  v31 = v41;
  sub_100080C0C((uint64_t)v18, v41, type metadata accessor for ConditionPickerMenuView);
  v32 = (int *)sub_1000BA294(&qword_100BEDBE8);
  v33 = v31 + v32[12];
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  v30((char *)(v31 + v32[16]), v28, v5);
  v34 = v31 + v32[20];
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  v35 = *(void (**)(char *, uint64_t))(v29 + 8);
  v35(v27, v5);
  sub_1000BF3B4();
  v35(v28, v5);
  sub_1000BF3B4();
}

_QWORD *sub_10052F284@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v17 = a1;
  v2 = type metadata accessor for MeasuredLocationViewerView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(v1, (uint64_t)v5, type metadata accessor for MeasuredLocationViewerView);
  type metadata accessor for MainActor(0);
  v6 = static MainActor.shared.getter();
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + v4;
  v10 = v7 | 7;
  v11 = swift_allocObject(&unk_100B7E198, v9, v7 | 7);
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
  sub_10007802C((uint64_t)v5, v11 + v8, type metadata accessor for MeasuredLocationViewerView);
  sub_100080C0C(v1, (uint64_t)v5, type metadata accessor for MeasuredLocationViewerView);
  v12 = static MainActor.shared.getter();
  v13 = swift_allocObject(&unk_100B7E1C0, v9, v10);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  sub_10007802C((uint64_t)v5, v13 + v8, type metadata accessor for MeasuredLocationViewerView);
  v14 = sub_1000BA294(&qword_100BC3660);
  return Binding.init(get:set:)(v17, sub_1005384A0, v11, sub_1005384C0, v13, v14);
}

void sub_10052F3E8(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;

  v4 = sub_10007A064();
  sub_1000DB418((_QWORD *)(a1 + *(int *)(v4 + 68)), *(_QWORD *)(a1 + *(int *)(v4 + 68) + 24));
  a2();
  sub_10004A298();
}

uint64_t sub_10052F420@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  v2 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000BF64C();
  v8 = v7[*(int *)(v5 + 28)];
  sub_1000BF3B4();
  if (v8 == 1)
  {
    v9 = Image.init(systemName:)(6650213, 0xE300000000000000);
    v10 = type metadata accessor for Font.Design(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v10);
    v11 = static Font.system(size:weight:design:)(0, 1, v4);
    sub_100021A14((uint64_t)v4, &qword_100BC3B98);
    KeyPath = swift_getKeyPath(&unk_1009ABB00);
    swift_retain();
    swift_retain();
    swift_retain();
    v13 = v9;
    v14 = KeyPath;
    v15 = v11;
    v16 = 0;
  }
  else
  {
    v9 = Image.init(systemName:)(0x73616C732E657965, 0xE900000000000068);
    v17 = type metadata accessor for Font.Design(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v17);
    v11 = static Font.system(size:weight:design:)(0, 1, v4);
    sub_100021A14((uint64_t)v4, &qword_100BC3B98);
    KeyPath = swift_getKeyPath(&unk_1009ABB00);
    swift_retain();
    swift_retain();
    swift_retain();
    v13 = v9;
    v14 = KeyPath;
    v15 = v11;
    v16 = 1;
  }
  v18 = sub_100527DD8(v13, v14, v15, v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_release_n(v11, 2);
  swift_release_n(KeyPath, 2);
  result = swift_release_n(v9, 2);
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = v22;
  *(_BYTE *)(a1 + 24) = v24 & 1;
  return result;
}

void sub_10052F684(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  v2 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000BF64C();
  v5 = *(int *)(v2 + 32);
  v6 = v4[v5];
  v7 = v4[v5];
  sub_1000BF3B4();
  v8 = (v7 - 1) < 2;
  if (v6 < 0)
    v8 = v6;
  *a1 = v8;
}

void sub_10052F748(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    v9 = type metadata accessor for MeasuredLocationViewerView(0);
    sub_1000BF64C();
    v10 = v8[*(int *)(v6 + 32)];
    sub_1000BF3B4();
    sub_1000DB418((_QWORD *)(a4 + *(int *)(v9 + 68)), *(_QWORD *)(a4 + *(int *)(v9 + 68) + 24));
    if (v10 < 0)
      sub_10051AC2C();
    else
      sub_10051AA84();
  }
}

void sub_10052F818(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for ConditionPickerMenuViewModel(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000BF64C();
  sub_100080C0C((uint64_t)&v7[*(int *)(v5 + 24)], (uint64_t)v4, type metadata accessor for ConditionPickerMenuViewModel);
  sub_1000BF3B4();
  sub_100037768((uint64_t)&v4[*(int *)(v2 + 20)], a1, &qword_100BC3660);
  sub_1000BF3B4();
}

uint64_t sub_10052F934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[5];

  v6 = type metadata accessor for LocationModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocationViewerViewModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MeasuredLocationViewerView(0);
  sub_10003B59C(a4 + *(int *)(v13 + 68), (uint64_t)v19);
  sub_1000DB418(v19, v19[3]);
  sub_1000BF64C();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
  sub_1000BF3B4();
  v14 = LocationModel.id.getter();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10051AA8C(a1, v14, v16);
  swift_bridgeObjectRelease(v16);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v19);
}

uint64_t sub_10052FA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD __dst[10];

  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = Location.Identifier.id.getter(v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = type metadata accessor for LocationViewerFullscreenMapPresentationSourceModifier(0);
  memcpy(__dst, (const void *)(v2 + *(int *)(v8 + 20)), 0x49uLL);
  sub_10008CF20((uint64_t)__dst);
  sub_10008CF58();
  sub_10008CF20((uint64_t)__dst);
  v9._countAndFlagsBits = sub_10004ED08();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1009ABBB0);
  v11 = sub_1000BA294(&qword_100BEE258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, a1, v11);
  result = sub_1000BA294(&qword_100BEE260);
  v13 = a2 + *(int *)(result + 36);
  *(_QWORD *)v13 = 0xD000000000000010;
  *(_QWORD *)(v13 + 8) = 0x8000000100A09A70;
  *(_QWORD *)(v13 + 16) = KeyPath;
  *(_BYTE *)(v13 + 24) = 0;
  return result;
}

void sub_10052FBF4(uint64_t a1)
{
  sub_10053445C(a1, qword_100BED568);
}

void sub_10052FC00(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100534544(&qword_100BC21B0, (uint64_t)qword_100BED568, (uint64_t)sub_10052FBF4);
  sub_100080C0C(v2, a1, type metadata accessor for ContentStatusBannerPresentationMetrics);
}

uint64_t sub_10052FC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_10007A100((uint64_t)&unk_100BEE230);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_10052FCB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t WitnessTable;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE __dst[80];
  _OWORD v92[2];
  char v93;
  char v94[8];

  v80 = a2;
  v3 = sub_100075EB0(&qword_100BEE3E8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for Optional(255, v4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, v6, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  sub_10007AB60((uint64_t)&unk_100BEE3F0);
  v76 = v8;
  v10 = type metadata accessor for _VariadicView.Tree(0, v3, v8, v9);
  v79 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v77 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v78 = (char *)&v66 - v13;
  v73 = type metadata accessor for LocationRegularViewLayout(0);
  __chkstk_darwin(v73);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v16);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v66 - v23;
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_QWORD *)(a1 + 40);
  v75 = v5;
  v27 = v5;
  v28 = v69;
  v74 = v4;
  v72 = v25;
  v71 = v26;
  sub_100530274((uint64_t)v69, v27, v4, v25, v26);
  v70 = v29;
  v30 = (char *)v28 + *(int *)(a1 + 76);
  v31 = *((_OWORD *)v30 + 1);
  v92[0] = *(_OWORD *)v30;
  v92[1] = v31;
  v93 = v30[32];
  sub_1000787D4((uint64_t)v92, (uint64_t)v94, &qword_100BC3BB0);
  sub_1001171F4((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55E4);
  sub_10011740C();
  v68 = v32;
  v67 = v33;
  v35 = v34;
  v37 = v36;
  sub_1001171F4((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31C4);
  sub_1007A6200();
  sub_100037768((uint64_t)&v24[*(int *)(v19 + 20)], (uint64_t)v18, &qword_100BC3620);
  v38 = type metadata accessor for ContentStatusBanner(0);
  LODWORD(v19) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v38);
  sub_100021A14((uint64_t)v18, &qword_100BC3620);
  sub_1000BF3B4();
  v39 = 0;
  if ((_DWORD)v19 != 1)
  {
    sub_1007A6200();
    v39 = *((_QWORD *)v21 + 1);
    sub_1000BF3B4();
  }
  v40 = *v28;
  memcpy(__dst, (char *)v28 + *(int *)(a1 + 72), 0x49uLL);
  sub_10008CF20((uint64_t)__dst);
  sub_10008CF58();
  sub_10008CF20((uint64_t)__dst);
  v41 = v83;
  v66 = v84;
  v42 = v85;
  v43 = v86;
  v44 = v87;
  v45 = v88;
  v46 = v89;
  v47 = v90;
  v48 = v73;
  v50 = sub_100117228(v49);
  *((_QWORD *)v15 + 3) = v42;
  *(_QWORD *)v15 = v41;
  *(_OWORD *)(v15 + 8) = v66;
  v15[32] = v43;
  *((_QWORD *)v15 + 5) = v44;
  *((_WORD *)v15 + 24) = v45;
  *((_QWORD *)v15 + 7) = v46;
  *((_QWORD *)v15 + 8) = v47;
  v51 = &v15[*(int *)(v48 + 24)];
  v52 = v67;
  *(_QWORD *)v51 = v68;
  *((_QWORD *)v51 + 1) = v52;
  *((_QWORD *)v51 + 2) = v35;
  *((_QWORD *)v51 + 3) = v37;
  v53 = v70;
  *((_QWORD *)v51 + 4) = v39;
  *((_QWORD *)v51 + 5) = v53;
  *((_QWORD *)v51 + 6) = v40;
  __chkstk_darwin(v50);
  v54 = v74;
  *((_QWORD *)&v66 - 6) = v75;
  *((_QWORD *)&v66 - 5) = v54;
  v55 = v71;
  *((_QWORD *)&v66 - 4) = v72;
  *((_QWORD *)&v66 - 3) = v55;
  *((_QWORD *)&v66 - 2) = v28;
  sub_10007A100((uint64_t)&unk_100BEE3F8);
  v57 = v56;
  v58 = v76;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v76);
  v60 = v77;
  sub_100528114((uint64_t)sub_100540518, (uint64_t)(&v66 - 4), v48, v58, v57, WitnessTable, v77);
  sub_1000BF3B4();
  sub_10007AB60((uint64_t)&unk_100BEE400);
  v81 = v61;
  v82 = WitnessTable;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v10);
  v63 = (uint64_t)v78;
  sub_1000B2074(v60, v10, v62);
  v64 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v64(v60, v10);
  sub_1000B1100(v63, v10, v80);
  return ((uint64_t (*)(uint64_t, uint64_t))v64)(v63, v10);
}

void sub_100530274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];

  v9 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v9);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v15 = (char *)v17 - v14;
  v17[0] = a2;
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = a5;
  type metadata accessor for LocationViewerLayoutContainer(0, (uint64_t)v17);
  sub_1007A6200();
  sub_100037768((uint64_t)&v15[*(int *)(v12 + 20)], (uint64_t)v11, &qword_100BC3620);
  v16 = type metadata accessor for ContentStatusBanner(0);
  LODWORD(a4) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v16);
  sub_100021A14((uint64_t)v11, &qword_100BC3620);
  sub_1000BF3B4();
  if ((_DWORD)a4 != 1)
  {
    if (DeviceSupportsStickyHeaders())
    {
      sub_1007A6200();
      sub_1000BF3B4();
    }
  }
}

uint64_t sub_100530414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v48 = a6;
  v43 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v42 = (uint64_t)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional(0, v12);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - v17;
  v46 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v19);
  v44 = (uint64_t)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v42 - v22;
  v52 = a2;
  v53 = (char *)a3;
  v54 = a4;
  v55 = a5;
  v24 = a5;
  v25 = type metadata accessor for LocationViewerLayoutContainer(0, (uint64_t)&v52);
  v26 = a1 + *(int *)(v25 + 56);
  v47 = a4;
  sub_1000B2074(v26, a2, a4);
  if ((sub_1005306C4(v25) & 1) != 0)
  {
    v27 = a1 + *(int *)(v25 + 60);
    v28 = v42;
    sub_1000B2074(v27, a3, v24);
    sub_1000B1100(v28, a3, (uint64_t)v15);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v28, a3);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  v30 = v24;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, v29, 1, a3);
  sub_100158984((uint64_t)v15, a3, (uint64_t)v18);
  v31 = v45;
  v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v15, v13);
  v33 = v46;
  v34 = v44;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v44, v23, a2);
  v52 = v34;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v15, v18, v13);
  v53 = v15;
  v51[0] = a2;
  v51[1] = v13;
  v49 = v30;
  v50 = v47;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v13);
  sub_10052800C((uint64_t)&v52, 2, (uint64_t)v51, (uint64_t)&v50, v36, v37, v38, v39, v42, v43, v44, v45, v46, v47, v48, v49, v50, WitnessTable);
  v32(v18, v13);
  v40 = *(void (**)(char *, uint64_t))(v33 + 8);
  v40(v23, a2);
  v32(v15, v13);
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v34, a2);
}

uint64_t sub_1005306C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  _BYTE v14[80];
  _BYTE __dst[80];

  v2 = v1;
  v4 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v4);
  v5 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memcpy(__dst, (const void *)(v1 + *(int *)(a1 + 72)), 0x49uLL);
  sub_10008CF20((uint64_t)__dst);
  sub_10008CF58();
  sub_10008CF20((uint64_t)__dst);
  v9 = v14[57];
  v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v9 == 3)
  {
    v11 = 0;
  }
  else
  {
    sub_100117228(v10);
    sub_100403A6C();
    v11 = v12;
    sub_1000BF3B4();
  }
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

void sub_100530808(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  void (*v28)(_BYTE *, uint64_t);
  uint64_t v29;
  double v30;
  _BYTE v31[4];
  int v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a1;
  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v33 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v5);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v8);
  v34 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v31[-v11];
  __chkstk_darwin(v13);
  v15 = &v31[-v14];
  v36 = type metadata accessor for LocationViewerPageControl(0);
  __chkstk_darwin(v36);
  v17 = &v31[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = sub_1000BA294(&qword_100BEE408);
  __chkstk_darwin(v37);
  v19 = &v31[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PageControl(0) + 20));
  v38 = v1;
  v35 = v20;
  swift_bridgeObjectRetain();
  sub_10011AA68(v21);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v12, enum case for UserInterfaceSizeClass.compact(_:), v2);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v2);
  v22 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_100037768((uint64_t)v15, (uint64_t)v7, &qword_100BC5A68);
  sub_100037768((uint64_t)v12, v22, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v2) == 1)
  {
    sub_100021A14((uint64_t)v12, &qword_100BC5A68);
    sub_100021A14((uint64_t)v15, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v22, 1, v2) == 1)
    {
      sub_100021A14((uint64_t)v7, &qword_100BC5A68);
      v23 = 0;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v24 = v34;
  sub_100037768((uint64_t)v7, (uint64_t)v34, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v22, 1, v2) == 1)
  {
    sub_100021A14((uint64_t)v12, &qword_100BC5A68);
    sub_100021A14((uint64_t)v15, &qword_100BC5A68);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v24, v2);
LABEL_6:
    sub_100021A14((uint64_t)v7, &qword_100BC5E60);
    v23 = 1;
    goto LABEL_8;
  }
  v25 = v33;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 32))(v33, v22, v2);
  sub_10007A100((uint64_t)&qword_100BC5AB8);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v25, v2, v26);
  v27 = v24;
  v28 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v28(v25, v2);
  sub_100021A14((uint64_t)v12, &qword_100BC5A68);
  sub_100021A14((uint64_t)v15, &qword_100BC5A68);
  v28(v27, v2);
  sub_100021A14((uint64_t)v7, &qword_100BC5A68);
  v23 = v32 ^ 1;
LABEL_8:
  v29 = sub_1000BA294(&qword_100BECFA0);
  Binding.projectedValue.getter(v29);
  *(_QWORD *)v17 = v35;
  v17[8] = v23 & 1;
  if ((sub_100530C48() & 1) != 0)
    v30 = 1.0;
  else
    v30 = 0.0;
  sub_100080C0C((uint64_t)v17, (uint64_t)v19, type metadata accessor for LocationViewerPageControl);
  *(double *)&v19[*(int *)(v37 + 36)] = v30;
  sub_1000BF3B4();
  sub_1000787D4((uint64_t)v19, v39, &qword_100BEE408);
}

uint64_t sub_100530C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  char v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for PageControl(0);
  __chkstk_darwin(v1);
  v28 = (uint64_t)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v26[0] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v26 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)v26 - v16;
  v26[1] = v1;
  v27 = v0;
  sub_10011AA68(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v14, enum case for UserInterfaceSizeClass.compact(_:), v3);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v3);
  v19 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_100037768((uint64_t)v17, (uint64_t)v8, &qword_100BC5A68);
  sub_100037768((uint64_t)v14, v19, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v3) != 1)
  {
    sub_100037768((uint64_t)v8, (uint64_t)v11, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v3) != 1)
    {
      v20 = v26[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 32))(v26[0], v19, v3);
      sub_10007A100((uint64_t)&qword_100BC5AB8);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v3, v21);
      v23 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v23(v20, v3);
      sub_100021A14((uint64_t)v14, &qword_100BC5A68);
      sub_100021A14((uint64_t)v17, &qword_100BC5A68);
      v23((uint64_t)v11, v3);
      sub_100021A14((uint64_t)v8, &qword_100BC5A68);
      sub_100080C0C(v27, v28, type metadata accessor for PageControl);
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      swift_retain();
      sub_1007A6314();
      swift_release();
      v24 = sub_100531028();
      swift_release();
      goto LABEL_10;
    }
    sub_100021A14((uint64_t)v14, &qword_100BC5A68);
    sub_100021A14((uint64_t)v17, &qword_100BC5A68);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
LABEL_6:
    sub_100021A14((uint64_t)v8, &qword_100BC5E60);
    sub_100080C0C(v27, v28, type metadata accessor for PageControl);
    goto LABEL_9;
  }
  sub_100021A14((uint64_t)v14, &qword_100BC5A68);
  sub_100021A14((uint64_t)v17, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v3) != 1)
    goto LABEL_6;
  sub_100021A14((uint64_t)v8, &qword_100BC5A68);
  sub_100080C0C(v27, v28, type metadata accessor for PageControl);
LABEL_8:
  v24 = 1;
LABEL_10:
  sub_1000BF3B4();
  return v24 & 1;
}

uint64_t sub_100531028()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1009AC3A0);
  v4 = v0;
  sub_10007A100((uint64_t)&unk_100BED880);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

double sub_1005310B0(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  KeyPath = swift_getKeyPath(&unk_1009AC3A0);
  v6 = v1;
  v7 = a1;
  sub_100531110(KeyPath, (uint64_t)sub_100152DD0, (uint64_t)&v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100531110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  sub_10007A100((uint64_t)&unk_100BED880);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, a1, a2, a3, &type metadata for () + 1, v6);
}

double sub_1005311B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void (*v14)(_BYTE *, uint64_t);
  NSDate v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  _BYTE v25[16];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v6);
  v9 = &v25[-v8];
  v10 = *(void **)(v1 + 24);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v11, "isValid");
    if ((_DWORD)v12)
    {
      v13 = static Date.now.getter(v12);
      Date.addingTimeInterval(_:)(v13, 1.0);
      v14 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
      v14(v5, v2);
      v15.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v14(v9, v2);
      objc_msgSend(v11, "setFireDate:", v15.super.isa);

      goto LABEL_7;
    }

  }
  v16 = static Accessibility.shouldAlwaysShowHoverUI.getter(v7);
  if ((v16 & 1) != 0)
    goto LABEL_8;
  v17 = static Date.now.getter(v16);
  Date.addingTimeInterval(_:)(v17, 1.0);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v18 = swift_allocObject(&unk_100B7E758, 24, 7);
  swift_weakInit(v18 + 16);
  v19 = objc_allocWithZone((Class)NSTimer);
  v20 = sub_1000FE258((uint64_t)v9, 0, (uint64_t)sub_1005407B8, v18, 0.0);
  v21 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v21, "addTimer:forMode:", v20, NSDefaultRunLoopMode);

  v15.super.isa = *(Class *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v20;
LABEL_7:

LABEL_8:
  v22 = sub_100531028();
  if ((v22 & 1) == 0)
  {
    v24 = static Animation.default.getter(v22);
    withAnimation<A>(_:_:)(v24, sub_1005407C0, v1, &type metadata for () + 1);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_1005313C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(void **)(Strong + 24);
    *(_QWORD *)(Strong + 24) = 0;

    v7 = static Animation.linear.getter();
    withAnimation<A>(_:_:)(v7, sub_1005407E8, v5, &type metadata for () + 1);
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_100531458()
{
  uint64_t v0;
  double result;

  if (*(_BYTE *)(v0 + 17) == 1)
    return sub_1005311B0();
  return result;
}

uint64_t sub_10053146C()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0
     + OBJC_IVAR____TtC7WeatherP33_971182080BE1A8931C9C36EF48C83CFF23PageControlDisplayState___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1005314C4()
{
  return type metadata accessor for PageControlDisplayState(0);
}

uint64_t type metadata accessor for PageControlDisplayState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BED6C8, (uint64_t)&nominal type descriptor for PageControlDisplayState);
}

uint64_t sub_1005314E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1005314F8(a1, a2, a3, (uint64_t)&unk_1009AB568, (uint64_t)&unk_1009AB568, (uint64_t)&unk_1009AB580);
}

uint64_t sub_1005314F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v8;
  _QWORD v9[4];

  v9[0] = a4;
  v9[1] = a5;
  v9[2] = a6;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v8 <= 0x3F)
  {
    v9[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v9, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10053156C()
{
  uint64_t v0;

  *(_WORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t sub_100531598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  __n128 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v26 = a1;
  v28 = a2;
  v3 = type metadata accessor for PageControlDisplayStateModifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BEE2D0);
  v27 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v29) = sub_1005317E0() & 1;
  sub_100080C0C(v2, (uint64_t)v6, type metadata accessor for PageControlDisplayStateModifier);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100B7E550, v11 + v5, v10 | 7);
  sub_10007802C((uint64_t)v6, v12 + v11, type metadata accessor for PageControlDisplayStateModifier);
  v13 = sub_1000BA294(&qword_100BEE2D8);
  sub_10007AB60((uint64_t)&unk_100BEE2E0);
  v15 = v14;
  View.onChange<A>(of:initial:_:)(&v29, 1, sub_10053FF24, v12, v13, &type metadata for Bool, v14, &protocol witness table for Bool);
  swift_release();
  v16 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  v18 = *v16;
  v17 = (void *)v16[1];
  v29 = v18;
  v30 = v17;
  v19 = sub_1000BA294(&qword_100BEE2E8);
  State.wrappedValue.getter(&v33, v19);
  v20 = v33;
  v21 = type metadata accessor for PageControlDisplayState(0);
  v29 = v13;
  v30 = &type metadata for Bool;
  v31 = v15;
  v32 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_10007A100((uint64_t)&unk_100BED880);
  View.environment<A>(_:)(v20, v7, v21, OpaqueTypeConformance2, v23);
  v24 = swift_release();
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v27 + 8))(v9, v7, v24);
}

uint64_t sub_1005317E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = type metadata accessor for PageControlDisplayStateModifier(0);
  __chkstk_darwin(v1);
  v36 = (uint64_t)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - v16;
  v35 = v0;
  sub_10011AA68(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v14, enum case for UserInterfaceSizeClass.compact(_:), v3);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v3);
  v19 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_100037768((uint64_t)v17, (uint64_t)v8, &qword_100BC5A68);
  sub_100037768((uint64_t)v14, v19, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v3) == 1)
  {
    sub_100021A14((uint64_t)v14, &qword_100BC5A68);
    sub_100021A14((uint64_t)v17, &qword_100BC5A68);
    if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v3) == 1)
    {
      sub_100021A14((uint64_t)v8, &qword_100BC5A68);
LABEL_8:
      sub_100080C0C(v35, v36, type metadata accessor for PageControlDisplayStateModifier);
LABEL_11:
      v31 = 0;
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  sub_100037768((uint64_t)v8, (uint64_t)v11, &qword_100BC5A68);
  if (_s7Weather24LocationCompositionStateOwet_0(v19, 1, v3) == 1)
  {
    sub_100021A14((uint64_t)v14, &qword_100BC5A68);
    sub_100021A14((uint64_t)v17, &qword_100BC5A68);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
LABEL_6:
    sub_100021A14((uint64_t)v8, &qword_100BC5E60);
    goto LABEL_9;
  }
  v20 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v34, v19, v3);
  sub_10007A100((uint64_t)&qword_100BC5AB8);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v3, v21);
  v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  v23(v20, v3);
  sub_100021A14((uint64_t)v14, &qword_100BC5A68);
  sub_100021A14((uint64_t)v17, &qword_100BC5A68);
  v23(v11, v3);
  sub_100021A14((uint64_t)v8, &qword_100BC5A68);
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v24 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v25 = objc_msgSend(v24, "userInterfaceIdiom");

  v26 = v36;
  sub_100080C0C(v35, v36, type metadata accessor for PageControlDisplayStateModifier);
  if (v25 != (id)1)
    goto LABEL_11;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_10008D47C(*(_QWORD *)v26, v28);
  sub_100109B54();
  v30 = v29;
  sub_1000B15F8(v27, v28);
  v31 = v30 ^ 1;
LABEL_12:
  sub_1000BF3B4();
  return v31 & 1;
}

double sub_100531BDC(uint64_t a1, char *a2)
{
  char v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  v2 = *a2;
  type metadata accessor for PageControlDisplayStateModifier(0);
  v3 = sub_1000BA294(&qword_100BEE2E8);
  State.wrappedValue.getter(&v5, v3);
  *(_BYTE *)(v5 + 17) = v2;
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100531C4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[128];
  _QWORD v67[2];
  char v68;
  _QWORD v69[18];

  v65 = a1;
  v2 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v2);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocationViewPage(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v53 - v10;
  v12 = sub_1000BA294(&qword_100BEE410);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v62 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_1000BA294(&qword_100BEE418);
  __chkstk_darwin(v61);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BEE420);
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  if ((*(_BYTE *)(v1 + *(int *)(v5 + 28)) & 1) != 0)
    return _s7Weather24LocationCompositionStateOwst_0(v65, 1, 1, v19);
  v58 = v21;
  v59 = v19;
  v60 = (uint64_t)&v53 - v20;
  v67[0] = static HorizontalAlignment.center.getter(v18);
  v67[1] = 0;
  v68 = 1;
  v56 = v15;
  v54 = v69;
  v23 = v1;
  sub_100080C0C(v1, (uint64_t)v11, type metadata accessor for LocationViewPage);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = v25 + v7;
  v57 = v4;
  v27 = v24 | 7;
  v28 = swift_allocObject(&unk_100B7E690, v26, v24 | 7);
  v55 = v5;
  sub_10007802C((uint64_t)v11, v28 + v25, type metadata accessor for LocationViewPage);
  sub_100080C0C(v1, (uint64_t)v8, type metadata accessor for LocationViewPage);
  v29 = swift_allocObject(&unk_100B7E6B8, v26, v27);
  sub_10007802C((uint64_t)v8, v29 + v25, type metadata accessor for LocationViewPage);
  sub_1000BF79C((void (*)(__int128 *))sub_100540588, (uint64_t)sub_100540694, v29, &qword_100BED388, (uint64_t)sub_10014D2DC, (uint64_t)v54);
  sub_100037768((uint64_t)v67, (uint64_t)v66, &qword_100BEE428);
  v66[121] = 1;
  sub_100021A14((uint64_t)v67, &qword_100BEE428);
  sub_100080C0C(v1, (uint64_t)v11, type metadata accessor for LocationViewPage);
  v30 = swift_allocObject(&unk_100B7E6E0, v26, v27);
  sub_10007802C((uint64_t)v11, v30 + v25, type metadata accessor for LocationViewPage);
  sub_100037768((uint64_t)v66, (uint64_t)v67, &qword_100BEE430);
  v69[13] = sub_10053224C;
  v69[14] = 0;
  v69[15] = sub_1005406C4;
  v69[16] = v30;
  sub_100021A14((uint64_t)v66, &qword_100BEE430);
  sub_100080C0C(v23, (uint64_t)v11, type metadata accessor for LocationViewPage);
  v31 = swift_allocObject(&unk_100B7E708, v26, v27);
  sub_10007802C((uint64_t)v11, v31 + v25, type metadata accessor for LocationViewPage);
  v32 = sub_1000BA294(&qword_100BEE438);
  v33 = sub_1000BFE60();
  v34 = v62;
  View.onTapGesture(count:perform:)(1, sub_1005406F0, v31, v32, v33);
  swift_release();
  sub_100021A14((uint64_t)v67, &qword_100BEE438);
  KeyPath = swift_getKeyPath(&unk_1009AB958);
  sub_100080C0C(v23, (uint64_t)v11, type metadata accessor for LocationViewPage);
  v36 = swift_allocObject(&unk_100B7E730, v26, v27);
  sub_10007802C((uint64_t)v11, v36 + v25, type metadata accessor for LocationViewPage);
  v38 = v63;
  v37 = v64;
  v39 = (uint64_t)v56;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v34, v64);
  v40 = (uint64_t *)(v39 + *(int *)(v61 + 36));
  *v40 = KeyPath;
  v40[1] = (uint64_t)sub_10054076C;
  v40[2] = v36;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v37);
  v41 = v23 + *(int *)(v55 + 20);
  sub_1000BF684();
  v43 = v42;
  v44 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v45 = (uint64_t)v57;
  sub_100037768(v41 + *(int *)(v44 + 20), (uint64_t)v57, &qword_100BC3620);
  v46 = type metadata accessor for ContentStatusBanner(0);
  LOBYTE(v38) = _s7Weather24LocationCompositionStateOwet_0(v45, 1, v46) != 1;
  sub_100021A14(v45, &qword_100BC3620);
  v47 = v58;
  sub_100037768(v39, v58, &qword_100BEE418);
  v48 = v59;
  v49 = v47 + *(int *)(v59 + 36);
  *(_QWORD *)v49 = v43;
  *(_BYTE *)(v49 + 8) = v38;
  sub_100021A14(v39, &qword_100BEE418);
  v50 = v60;
  sub_1000787D4(v47, v60, &qword_100BEE420);
  v51 = v50;
  v52 = v65;
  sub_1000787D4(v51, v65, &qword_100BEE420);
  return _s7Weather24LocationCompositionStateOwst_0(v52, 0, 1, v48);
}

void sub_1005321D0()
{
  sub_1000BF8E0();
}

double sub_1005321FC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;

  sub_1000DB418(a1, a1[3]);
  v5 = type metadata accessor for LocationViewPage(0);
  *(_QWORD *)&result = sub_10007998C(*(_QWORD *)(a2 + *(int *)(v5 + 24)), a3).n128_u64[0];
  return result;
}

void sub_10053224C(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  _QWORD v12[5];

  v2 = type metadata accessor for CoordinateSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for CoordinateSpace.global(_:), v2);
  GeometryProxy.frameClippedToScrollViews(in:)(v12, v5);
  v6 = *(double *)&v12[2];
  v7 = *(double *)&v12[3];
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = GeometryProxy.size.getter(v8);
  *a1 = v6 * v7 / (v9 * v10) == 1.0;
}

double sub_100532320(_BYTE *a1)
{
  double result;

  if (*a1 == 1)
  {
    type metadata accessor for LocationViewPage(0);
    swift_retain();
    sub_1007A6314();
    swift_release();
    sub_100531458();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_100532390()
{
  double result;

  type metadata accessor for LocationViewPage(0);
  swift_retain();
  sub_1007A6314();
  swift_release();
  sub_100531458();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1005323E8(double *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  void (*v34)(_BYTE *, uint64_t);
  _BYTE v35[12];
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;

  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v37 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v39 = sub_1000BA294(&qword_100BC5E60);
  __chkstk_darwin(v39);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1000BA294(&qword_100BC5A68);
  __chkstk_darwin(v8);
  v38 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v35[-v11];
  __chkstk_darwin(v13);
  v15 = &v35[-v14];
  v16 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v16);
  v18 = &v35[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = a1;
  v19 = *a1;
  v20 = type metadata accessor for LocationViewPage(0);
  v21 = a2 + *(int *)(v20 + 20);
  v22 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v41 = v21;
  sub_100037768(v21 + v22, (uint64_t)v18, &qword_100BC3620);
  v23 = type metadata accessor for ContentStatusBanner(0);
  LODWORD(v21) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v23);
  sub_100021A14((uint64_t)v18, &qword_100BC3620);
  if ((_DWORD)v21 != 1)
  {
    sub_10011AA68(v24);
    v25 = v40;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v40 + 104))(v12, enum case for UserInterfaceSizeClass.regular(_:), v4);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v4);
    v26 = (uint64_t)&v7[*(int *)(v39 + 48)];
    sub_100037768((uint64_t)v15, (uint64_t)v7, &qword_100BC5A68);
    sub_100037768((uint64_t)v12, v26, &qword_100BC5A68);
    v27 = (uint64_t)v7;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v4) == 1)
    {
      sub_100021A14((uint64_t)v12, &qword_100BC5A68);
      sub_100021A14((uint64_t)v15, &qword_100BC5A68);
      if (_s7Weather24LocationCompositionStateOwet_0(v26, 1, v4) == 1)
      {
        sub_100021A14((uint64_t)v7, &qword_100BC5A68);
LABEL_9:
        v19 = *(double *)(v41 + 8) - *(double *)(a2 + *(int *)(v20 + 32));
        goto LABEL_11;
      }
    }
    else
    {
      v28 = (uint64_t)v7;
      v29 = v38;
      sub_100037768(v28, (uint64_t)v38, &qword_100BC5A68);
      if (_s7Weather24LocationCompositionStateOwet_0(v26, 1, v4) != 1)
      {
        v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 32);
        v39 = v27;
        v31 = v37;
        v30(v37, v26, v4);
        sub_10007A100((uint64_t)&qword_100BC5AB8);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v31, v4, v32);
        v33 = v29;
        v34 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
        v34(v31, v4);
        sub_100021A14((uint64_t)v12, &qword_100BC5A68);
        sub_100021A14((uint64_t)v15, &qword_100BC5A68);
        v34(v33, v4);
        sub_100021A14(v39, &qword_100BC5A68);
        if ((v36 & 1) != 0)
          goto LABEL_9;
LABEL_10:
        v19 = *(double *)(v41 + 8) + -20.0;
        goto LABEL_11;
      }
      sub_100021A14((uint64_t)v12, &qword_100BC5A68);
      sub_100021A14((uint64_t)v15, &qword_100BC5A68);
      (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v29, v4);
    }
    sub_100021A14(v27, &qword_100BC5E60);
    goto LABEL_10;
  }
LABEL_11:
  *v42 = v19;
}

void sub_1005327F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = sub_1000BA294(&qword_100BEE2F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BEE2F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v0 + *(int *)(type metadata accessor for PinnedMapView(0) + 40);
  v8 = *(_QWORD *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  sub_10008D47C(*(_QWORD *)v7, v9);
  sub_10011567C();
  v11 = v10;
  sub_1000B15F8(v8, v9);
  if ((v11 & 0xC0) == 0x40)
  {
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v12 = sub_10053FF58();
    _ConditionalContent<>.init(storage:)(v6, &type metadata for EmptyView, v1, &protocol witness table for EmptyView, v12);
  }
  else
  {
    sub_10053299C((uint64_t)v3);
    sub_100037768((uint64_t)v3, (uint64_t)v6, &qword_100BEE2F0);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v13 = sub_10053FF58();
    _ConditionalContent<>.init(storage:)(v6, &type metadata for EmptyView, v1, &protocol witness table for EmptyView, v13);
    sub_100021A14((uint64_t)v3, &qword_100BEE2F0);
  }
}

void sub_10053299C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  __n128 v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  double v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const void *v109;
  uint64_t KeyPath;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  _QWORD v126[40];
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  _QWORD v133[41];
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[152];
  _BYTE v140[80];

  v2 = v1;
  v125 = a1;
  v3 = type metadata accessor for AccessibilityActionKind(0);
  v121 = *(_QWORD *)(v3 - 8);
  v122 = v3;
  __chkstk_darwin(v3);
  v120 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PinnedMapView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_1000BA294(&qword_100BEE320);
  __chkstk_darwin(v11);
  v123 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_1000BA294(&qword_100BEE310);
  __chkstk_darwin(v119);
  v124 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = (const void *)(v1 + *(int *)(v8 + 36));
  memcpy(v140, v109, 0x49uLL);
  sub_10008CF20((uint64_t)v140);
  sub_10008CF58();
  sub_10008CF20((uint64_t)v140);
  if (BYTE1(v133[6]) == 3 || BYTE1(v133[6]) == 4)
    v15 = Edge.Set.init(rawValue:)(0);
  else
    v15 = static Edge.Set.bottom.getter(v14);
  v117 = v15;
  v16 = static Alignment.center.getter(v15);
  v112 = v17;
  v113 = v16;
  sub_100080C0C(v1, (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PinnedMapView);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 16) & ~v18;
  v114 = v18 | 7;
  v115 = v19 + v10;
  v20 = swift_allocObject(&unk_100B7E578, v19 + v10, v18 | 7);
  v116 = v19;
  v111 = v20;
  v118 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007802C(v118, v20 + v19, type metadata accessor for PinnedMapView);
  KeyPath = swift_getKeyPath(&unk_1009AC348);
  v21 = static UnitPoint.center.getter(KeyPath);
  v23 = static AnyTransition.scale(scale:anchor:)(1.0, v21, v22);
  v24 = static UnitPoint.center.getter(v23);
  v26 = static AnyTransition.scale(scale:anchor:)(1.0000001, v24, v25);
  v27 = static AnyTransition.asymmetric(insertion:removal:)(v23, v26);
  swift_release();
  swift_release();
  if (qword_100BC20C8 != -1)
    swift_once(&qword_100BC20C8, sub_1004174C8);
  v28 = qword_100CAEB58;
  if (qword_100BC20D0 != -1)
    swift_once(&qword_100BC20D0, sub_1004174D8);
  v133[0] = v28;
  v126[0] = qword_100CAEB60;
  v29 = sub_1002C2BC4();
  v30 = static AnyTransition.modifier<A>(active:identity:)(v133, v126, &type metadata for InteractiveMapTransitionModifier, v29);
  v108 = AnyTransition.combined(with:)(v30, v27);
  swift_release();
  swift_release();
  v133[0] = 0;
  v133[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v133[0] = 0xD000000000000010;
  v133[1] = 0x8000000100A09A70;
  v32._countAndFlagsBits = Location.Identifier.id.getter(v31);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 45;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  sub_10008CF20((uint64_t)v140);
  sub_10008CF58();
  sub_10008CF20((uint64_t)v140);
  v34._countAndFlagsBits = sub_10004ED08();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v106 = v133[1];
  v107 = v133[0];
  v105 = *(_QWORD *)(v2 + *(int *)(v8 + 28));
  v36 = static MatchedGeometryProperties.frame.getter(v35);
  v104 = v36;
  v37 = static UnitPoint.center.getter(v36);
  v102 = v38;
  v103 = v37;
  sub_10008CF20((uint64_t)v140);
  sub_10008CF58();
  sub_10008CF20((uint64_t)v140);
  v40 = 0.0;
  v41 = BYTE1(v133[6]);
  if (BYTE1(v133[6]) == 4)
  {
    sub_10008CF20((uint64_t)v140);
    sub_10008CF58();
    sub_10008CF20((uint64_t)v140);
    sub_100117228(v42);
    v43 = sub_1007C6ECC((uint64_t)v7);
    sub_1000BF3B4();
    v40 = v43;
  }
  static Alignment.center.getter(v39);
  v44 = _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&v40, v41 != 4);
  v45 = v134;
  v100 = v135;
  v101 = v133[40];
  v46 = v136;
  v98 = v138;
  v99 = v137;
  v47 = static Edge.Set.leading.getter(v44);
  v49 = static Edge.Set.trailing.getter(v48);
  v50 = Edge.Set.init(rawValue:)(0);
  v51 = Edge.Set.init(rawValue:)(v50);
  if (Edge.Set.init(rawValue:)(v51 & v47) != v47)
    v50 = Edge.Set.init(rawValue:)(v50 | v47);
  v52 = Edge.Set.init(rawValue:)(v50);
  if (Edge.Set.init(rawValue:)(v52 & v49) != v49)
    LOBYTE(v50) = Edge.Set.init(rawValue:)(v50 | v49);
  memcpy(v139, v109, 0x49uLL);
  sub_10008CF20((uint64_t)v139);
  sub_10008CF58();
  sub_10008CF20((uint64_t)v139);
  v53 = 0.0;
  if (BYTE1(v133[6]) == 4)
  {
    sub_10008CF20((uint64_t)v139);
    sub_10008CF58();
    sub_10008CF20((uint64_t)v139);
    v53 = *(double *)&v133[7];
  }
  v54.n128_f64[0] = EdgeInsets.init(_all:)(v53);
  v109 = (const void *)v54.n128_u64[0];
  v96 = v56;
  v97 = v55;
  v95 = v57;
  v58 = static Edge.Set.trailing.getter(v54);
  sub_10008CF20((uint64_t)v139);
  sub_10008CF58();
  sub_10008CF20((uint64_t)v139);
  if (BYTE1(v133[6]) - 3 >= 2)
    v59 = 20.0;
  else
    v59 = 0.0;
  v60 = EdgeInsets.init(_all:)(v59);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v68 = static Edge.Set.bottom.getter(v67);
  sub_10008CF20((uint64_t)v139);
  sub_10008CF58();
  sub_10008CF20((uint64_t)v139);
  if (BYTE1(v133[6]) - 3 >= 2)
    v69 = 20.0;
  else
    v69 = 0.0;
  v129 = 0;
  v128 = v45;
  v127 = v46;
  v130 = 0;
  v131 = 0;
  v70 = EdgeInsets.init(_all:)(v69);
  v72 = v71;
  v74 = v73;
  v76 = v75;
  v77 = v131;
  v132 = 0;
  v79 = static SafeAreaRegions.all.getter(v78);
  v126[0] = v113;
  v126[1] = v112;
  v126[2] = KeyPath;
  LOBYTE(v126[3]) = 0;
  v126[4] = sub_1005402F0;
  v126[5] = v111;
  v126[6] = v108;
  v126[7] = v107;
  v126[8] = v106;
  v126[9] = v105;
  LODWORD(v126[10]) = v104;
  *(double *)&v126[11] = v103;
  v126[12] = v102;
  LOBYTE(v126[13]) = 1;
  v126[14] = v101;
  LOBYTE(v126[15]) = v45;
  v126[16] = v100;
  LOBYTE(v126[17]) = v46;
  v126[18] = v99;
  v126[19] = v98;
  LOBYTE(v126[20]) = v50;
  v126[21] = v109;
  v126[22] = v97;
  v126[23] = v96;
  v126[24] = v95;
  LOBYTE(v126[25]) = 0;
  LOBYTE(v126[26]) = v58;
  *(double *)&v126[27] = v60;
  v126[28] = v62;
  v126[29] = v64;
  v126[30] = v66;
  LOBYTE(v126[31]) = v77;
  LOBYTE(v126[32]) = v68;
  *(double *)&v126[33] = v70;
  v126[34] = v72;
  v126[35] = v74;
  v126[36] = v76;
  LOBYTE(v126[37]) = v132;
  v126[38] = v79;
  LOWORD(v126[39]) = v117;
  v80 = v120;
  static AccessibilityActionKind.escape.getter();
  v81 = v118;
  sub_100080C0C(v2, v118, type metadata accessor for PinnedMapView);
  v82 = swift_allocObject(&unk_100B7E5A0, v115, v114);
  sub_10007802C(v81, v82 + v116, type metadata accessor for PinnedMapView);
  v83 = sub_1000BA294(&qword_100BEE330);
  sub_1003A70C0((uint64_t)&unk_100BEE328);
  v84 = (uint64_t)v123;
  View.accessibilityAction(_:_:)(v80, sub_100540400, v82, v83, v85);
  v86 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v121 + 8))(v80, v122, v86);
  memcpy(v133, v126, 0x13AuLL);
  sub_100540430((uint64_t)v133);
  v87 = (uint64_t)v124;
  v88 = &v124[*(int *)(v119 + 36)];
  *(_QWORD *)v88 = swift_getKeyPath(&unk_1009AB878);
  v89 = sub_1000BA294(&qword_100BC37E0);
  swift_storeEnumTagMultiPayload(v88, v89, 0);
  v90 = (int *)type metadata accessor for ComputePinnedMapSizeViewModifier(0);
  v91 = &v88[v90[5]];
  *(_QWORD *)v91 = swift_getKeyPath(&unk_1009AB9A8);
  *(_OWORD *)(v91 + 8) = 0u;
  *(_OWORD *)(v91 + 24) = 0u;
  *(_OWORD *)(v91 + 33) = 0u;
  v92 = &v88[v90[6]];
  *(_QWORD *)v92 = swift_getKeyPath(&unk_1009AB820);
  *(_OWORD *)(v92 + 8) = 0u;
  *(_OWORD *)(v92 + 24) = 0u;
  *(_OWORD *)(v92 + 40) = 0u;
  *(_OWORD *)(v92 + 56) = 0u;
  v92[72] = 0;
  v93 = &v88[v90[7]];
  *(_QWORD *)v93 = swift_getKeyPath(&unk_1009ABBB0);
  v93[8] = 0;
  sub_1000787D4(v84, v87, &qword_100BEE320);
  v94 = v125;
  sub_100037768(v87, v125, &qword_100BEE310);
  *(_QWORD *)(v94 + *(int *)(sub_1000BA294(&qword_100BEE2F0) + 36)) = 0x3FF0000000000000;
  sub_100021A14(v87, &qword_100BEE310);
}

void sub_10053336C(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;

  v62 = a1;
  v69 = a2;
  v66 = sub_1000BA294(&qword_100BEE3C0);
  __chkstk_darwin(v66);
  v67 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000BA294(&qword_100BEE3C8);
  __chkstk_darwin(v65);
  v68 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v63);
  v7 = (double *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WeatherMapDisplayMode(0);
  v59 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1000BA294(&qword_100BD3D80);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_1000BA294(&qword_100BD3D88);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1000BA294(&qword_100BD3DA0);
  __chkstk_darwin(v56);
  v64 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_100B7E5C8, 56, 7);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_BYTE *)(v16 + 32) = 2;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  sub_1000BF79C((void (*)(__int128 *))sub_1002C3FE4, (uint64_t)sub_1005339A0, 0, &qword_100BE6600, (uint64_t)sub_10067968C, (uint64_t)v70);
  v17 = sub_1000BA294(&qword_100BD3D90);
  sub_10007AB60((uint64_t)&unk_100BD3D98);
  v19 = v18;
  View.systemColorScheme()(v17, v18);
  sub_100021A14((uint64_t)v70, &qword_100BD3D90);
  if (qword_100BC25C0 != -1)
    swift_once(&qword_100BC25C0, sub_1007885A4);
  v20 = sub_1000AECD4(v8, (uint64_t)qword_100CAF3F0);
  v21 = v59;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 16))(v10, v20, v8);
  __chkstk_darwin(v22);
  *(&v56 - 2) = v62;
  *(_QWORD *)&v70[0] = v17;
  *((_QWORD *)&v70[0] + 1) = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v70, &opaque type descriptor for <<opaque return type of View.systemColorScheme()>>, 1);
  v24 = v58;
  View.buttons(_:buttons:)(v10, sub_1005404B8, &v56 - 4, v58, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v24);
  v25 = v63;
  v26 = (char *)v7 + *(int *)(v63 + 20);
  v27 = enum case for RoundedCornerStyle.continuous(_:);
  v28 = type metadata accessor for RoundedCornerStyle(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104);
  v29(v26, v27, v28);
  *v7 = a3;
  v7[1] = a3;
  v30 = (uint64_t)v64;
  v31 = (uint64_t)&v64[*(int *)(v56 + 36)];
  sub_100080C0C((uint64_t)v7, v31, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v31 + *(int *)(sub_1000BA294(&qword_100BD3DA8) + 36)) = 256;
  v32 = v60;
  v33 = v61;
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v30, v14, v61);
  sub_1000BF3B4();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
  v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)((char *)v7 + *(int *)(v25 + 20), v27, v28);
  *v7 = a3;
  v7[1] = a3;
  static Color.black.getter(v34);
  v35 = Color.opacity(_:)(0.1);
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v70, 0, 0, 1.0, 10.0, 0.0);
  v36 = v68;
  sub_100080C0C((uint64_t)v7, v68, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v37 = *(double *)v70 * 0.5;
  v38 = v67;
  sub_100080C0C((uint64_t)v7, v67, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(double *)(v38 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v37;
  v39 = sub_1000BA294(&qword_100BD9778);
  v40 = v38 + *(int *)(v39 + 36);
  v41 = v70[1];
  *(_OWORD *)v40 = v70[0];
  *(_OWORD *)(v40 + 16) = v41;
  *(_QWORD *)(v40 + 32) = v71;
  v42 = v66;
  *(_QWORD *)(v38 + *(int *)(v66 + 52)) = v35;
  *(_WORD *)(v38 + *(int *)(v42 + 56)) = 256;
  v43 = static Alignment.center.getter(v39);
  v45 = v44;
  v46 = v36 + *(int *)(v65 + 68);
  v47 = (uint64_t *)(v46 + *(int *)(sub_1000BA294(&qword_100BEE3D0) + 36));
  *v47 = v43;
  v47[1] = v45;
  sub_1000787D4(v38, v46, &qword_100BEE3C0);
  sub_1000BF3B4();
  v49 = static Alignment.center.getter(v48);
  v51 = v50;
  v52 = sub_1000BA294(&qword_100BEE3D8);
  v53 = v69;
  v54 = v69 + *(int *)(v52 + 36);
  sub_100037768(v36, v54, &qword_100BEE3C8);
  v55 = (uint64_t *)(v54 + *(int *)(sub_1000BA294(&qword_100BEE3E0) + 36));
  *v55 = v49;
  v55[1] = v51;
  sub_100037768(v30, v53, &qword_100BD3DA0);
  sub_100021A14(v36, &qword_100BEE3C8);
  sub_100021A14(v30, &qword_100BD3DA0);
}

void sub_1005339A0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000DB418(a1, a1[3]);
  if (qword_100BC25C0 != -1)
    swift_once(&qword_100BC25C0, sub_1007885A4);
  v3 = type metadata accessor for WeatherMapDisplayMode(0);
  v4 = sub_1000AECD4(v3, (uint64_t)qword_100CAF3F0);
  sub_10078840C(v4, 0xD000000000000012, 0x80000001009AB600, a2);
}

uint64_t sub_100533A28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;

  v2 = type metadata accessor for ButtonGroup.Alignment(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ButtonGroup(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for ButtonGroup.Alignment.leading(_:), v2, v9);
  v18 = a1;
  ButtonGroup.init(alignment:buttons:)(v6, sub_1005404C0, v17);
  v12 = static ButtonGroupsBuilder.buildExpression(_:)(v11);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  v13 = sub_1000BA294(&qword_100BD3DB0);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v14 + 32) = v12;
  v15 = static ButtonGroupsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100533B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  Swift::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  void (*v18)(Swift::String *, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;

  v43 = a1;
  v1 = type metadata accessor for PinnedMapView(0);
  v45 = *(_QWORD *)(v1 - 8);
  v2 = *(_QWORD *)(v45 + 64);
  v3 = __chkstk_darwin(v1);
  v4 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ButtonGroup.Button.Content(0, v3);
  v6 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  v42 = v6;
  v7 = __chkstk_darwin(v5);
  v9 = (Swift::String *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = type metadata accessor for ButtonGroup.Button(0, v7);
  v44 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v47 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - v12;
  v46 = (id)objc_opt_self(NSBundle);
  v14 = objc_msgSend(v46, "mainBundle");
  v49._object = (void *)0x80000001009F8B20;
  v15._countAndFlagsBits = 1701736260;
  v15._object = (void *)0xE400000000000000;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v49._countAndFlagsBits = 0xD000000000000022;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v49);

  *v9 = v17;
  v18 = *(void (**)(Swift::String *, _QWORD, uint64_t))(v6 + 104);
  v18(v9, enum case for ButtonGroup.Button.Content.title(_:), v5);
  v19 = v43;
  sub_100080C0C(v43, (uint64_t)v4, type metadata accessor for PinnedMapView);
  v20 = *(unsigned __int8 *)(v45 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = v21 + v2;
  v23 = v20 | 7;
  v24 = swift_allocObject(&unk_100B7E5F0, v22, v20 | 7);
  sub_10007802C((uint64_t)v4, v24 + v21, type metadata accessor for PinnedMapView);
  static ButtonGroup.Button.dismiss(_:identifier:handler:)(v9, 0, 0, sub_100540400, v24);
  v25 = swift_release();
  v26 = v41;
  (*(void (**)(Swift::String *, uint64_t, __n128))(v42 + 8))(v9, v41, v25);
  v45 = static ButtonsBuilder.buildExpression(_:)(v13);
  v27 = *(void (**)(char *, uint64_t))(v44 + 8);
  v27(v13, v48);
  v9->_countAndFlagsBits = 0xD000000000000022;
  v9->_object = (void *)0x8000000100A09A90;
  v18(v9, enum case for ButtonGroup.Button.Content.image(_:), v26);
  sub_100080C0C(v19, (uint64_t)v4, type metadata accessor for PinnedMapView);
  v28 = swift_allocObject(&unk_100B7E618, v22, v23);
  sub_10007802C((uint64_t)v4, v28 + v21, type metadata accessor for PinnedMapView);
  v29 = v47;
  ButtonGroup.Button.init(_:identifier:handler:)(v9, 0, 0, sub_1005404D0, v28);
  v30 = objc_msgSend(v46, "mainBundle");
  v31._countAndFlagsBits = 0xD000000000000015;
  v50._countAndFlagsBits = 0xD000000000000038;
  v50._object = (void *)0x80000001009F8BA0;
  v31._object = (void *)0x80000001009F8B80;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v50);

  ButtonGroup.Button.accessibilityLabel(_:)(v33._countAndFlagsBits, v33._object);
  v34 = swift_bridgeObjectRelease();
  v35 = v48;
  ((void (*)(char *, uint64_t, __n128))v27)(v29, v48, v34);
  v36 = static ButtonsBuilder.buildExpression(_:)(v13);
  v27(v13, v35);
  v37 = sub_1000BA294(&qword_100BD3DB8);
  v38 = swift_allocObject(v37, 48, 7);
  *(_OWORD *)(v38 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v38 + 32) = v45;
  *(_QWORD *)(v38 + 40) = v36;
  v39 = static ButtonsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_100533F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;

  v3 = v2;
  v6 = type metadata accessor for ComputePinnedMapSizeViewModifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  KeyPath = swift_getKeyPath(&unk_1009AC500);
  sub_100080C0C(v3, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ComputePinnedMapSizeViewModifier);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100B7E820, v11 + v8, v10 | 7);
  sub_10007802C((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for ComputePinnedMapSizeViewModifier);
  v13 = sub_1000BA294(&qword_100BEE758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a2, a1, v13);
  result = sub_1000BA294(&qword_100BEE760);
  v15 = (uint64_t *)(a2 + *(int *)(result + 36));
  *v15 = KeyPath;
  v15[1] = (uint64_t)sub_100542BB8;
  v15[2] = v12;
  return result;
}

void sub_10053407C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  __int128 v24;
  double v25[7];
  _BYTE v26[72];
  _BYTE v27[80];
  _OWORD v28[3];
  char v29;
  double v30;
  char v31;
  double v32;
  _BYTE __dst[96];

  v4 = type metadata accessor for DisplayMetrics(0);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ComputePinnedMapSizeViewModifier(0);
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + *(int *)(v10 + 28);
  v12 = *(_QWORD *)v11;
  v13 = *(_BYTE *)(v11 + 8);
  sub_10008D47C(*(_QWORD *)v11, v13);
  sub_10011567C();
  v15 = v14;
  sub_1000B15F8(v12, v13);
  sub_100080C0C(a2, (uint64_t)v9, type metadata accessor for ComputePinnedMapSizeViewModifier);
  if ((v15 & 0xC0) == 0x40)
  {
    sub_1000BF3B4();
  }
  else
  {
    memcpy(__dst, &v9[*(int *)(v7 + 24)], 0x49uLL);
    sub_10008CF20((uint64_t)__dst);
    sub_10008CF58();
    sub_10008CF20((uint64_t)__dst);
    sub_1000BF3B4();
    if (v27[49] != 3)
    {
      memcpy(v27, (const void *)(a2 + *(int *)(v7 + 24)), 0x49uLL);
      sub_10008CF20((uint64_t)v27);
      sub_10008CF58();
      sub_10008CF20((uint64_t)v27);
      if (v31 == 4)
      {
        sub_10008CF20((uint64_t)v27);
        sub_10008CF58();
        sub_10008CF20((uint64_t)v27);
        v16 = v32 * 0.0;
        sub_100030C6C();
        v18 = v17 + v16 + sub_100076A98();
      }
      else
      {
        sub_10008CF20((uint64_t)v27);
        sub_10008CF58();
        sub_10008CF20((uint64_t)v27);
        v19 = v30;
        sub_10008CF20((uint64_t)v27);
        sub_10008CF58();
        sub_10008CF20((uint64_t)v27);
        sub_10007689C();
        v18 = v19 - v20 + -20.0;
      }
      if (v18 >= 0.0)
      {
        sub_10008CF20((uint64_t)v27);
        sub_10008CF58();
        sub_10008CF20((uint64_t)v27);
        if (v26[49] == 4)
        {
          sub_10008CF20((uint64_t)v27);
          sub_10008CF58();
          sub_10008CF20((uint64_t)v27);
          sub_100117228(v21);
          v22 = sub_1007C6ECC((uint64_t)v6);
          sub_1000BF3B4();
        }
        else
        {
          v23 = a2 + *(int *)(v7 + 20);
          v24 = *(_OWORD *)(v23 + 16);
          v28[0] = *(_OWORD *)v23;
          v28[1] = v24;
          v28[2] = *(_OWORD *)(v23 + 32);
          v29 = *(_BYTE *)(v23 + 48);
          sub_1000787D4((uint64_t)v28, (uint64_t)v26, &qword_100BC39C8);
          sub_100116E14((uint64_t)v26);
          sub_100116E74();
          sub_100116E14((uint64_t)v28);
          v22 = v25[2] + v25[3] + v25[5];
        }
        *(double *)a1 = v18;
        *(double *)(a1 + 8) = v22;
        *(_BYTE *)(a1 + 16) = 0;
      }
    }
  }
}

void sub_100534434(uint64_t (*a1)(_QWORD), void (*a2)(void))
{
  uint64_t v3;

  v3 = sub_10009EE90(a1);
  sub_1000860C4(v3);
  a2();
  sub_10004A298();
}

void sub_10053445C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  sub_10004037C(v3, a2);
  v4 = (_QWORD *)sub_1000AECD4(v3, (uint64_t)a2);
  sub_10009985C();
  v5 = sub_100075E28();
  _s7Weather24LocationCompositionStateOwst_0(v5, 1, 1, v6);
  *v4 = 0;
  v4[1] = 0;
  sub_10004A298();
}

void sub_1005344B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  sub_10004037C(v0, qword_100BED598);
  v1 = sub_1000AECD4(v0, (uint64_t)qword_100BED598);
  if (qword_100BC21B8 != -1)
    swift_once(&qword_100BC21B8, sub_100125134);
  v2 = sub_1000AECD4(v0, (uint64_t)qword_100BED580);
  sub_100080C0C(v2, v1, type metadata accessor for ContentStatusBannerPresentationMetrics);
}

uint64_t sub_100534544(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  return sub_1000AECD4(v4, a2);
}

void sub_100534584(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100534544(&qword_100BC21C0, (uint64_t)qword_100BED598, (uint64_t)sub_1005344B8);
  sub_100080C0C(v2, a1, type metadata accessor for ContentStatusBannerPresentationMetrics);
}

#error "1005345E4: call analysis failed (funcsize=7)"

void sub_1005345F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (**v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD __src[14];
  _OWORD v114[2];
  char v115;
  char v116[8];

  v111 = a2;
  v110 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v3 = __chkstk_darwin(v110);
  v109 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v108 = (uint64_t)&v89 - v5;
  v106 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v106);
  v107 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationViewBannerContainer(0);
  v96 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v101 = v8;
  v95 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentStatusBanner(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for ContentStatusBannerView(0);
  __chkstk_darwin(v12);
  v14 = (_OWORD *)((char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_1000BA294(&qword_100BEE498);
  __chkstk_darwin(v15);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1000BA294(&qword_100BEE4A0);
  __chkstk_darwin(v91);
  v19 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1000BA294(&qword_100BEE4A8);
  __chkstk_darwin(v90);
  v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000BA294(&qword_100BEE4B0);
  __chkstk_darwin(v92);
  v23 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1000BA294(&qword_100BEE4B8);
  __chkstk_darwin(v93);
  v94 = (uint64_t)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1000BA294(&qword_100BEE4C0);
  __chkstk_darwin(v112);
  v98 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1000BA294(&qword_100BEE4C8);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v100 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000BA294(&qword_100BEE4D0);
  v27 = __chkstk_darwin(v97);
  v105 = (uint64_t)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v99 = (char *)&v89 - v30;
  __chkstk_darwin(v29);
  v102 = (uint64_t)&v89 - v31;
  sub_1000DB418((_QWORD *)(a1 + *(int *)(v7 + 20)), *(_QWORD *)(a1 + *(int *)(v7 + 20) + 24));
  sub_10012CEBC(v11);
  sub_100129198((uint64_t)v11, v14);
  sub_1000BF3B4();
  v32 = sub_10000AA1C();
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v40 = static Edge.Set.all.getter(v39);
  sub_100080C0C((uint64_t)v14, (uint64_t)v17, type metadata accessor for ContentStatusBannerView);
  v41 = &v17[*(int *)(v15 + 36)];
  *v41 = v40;
  *((double *)v41 + 1) = v32;
  *((_QWORD *)v41 + 2) = v34;
  *((_QWORD *)v41 + 3) = v36;
  *((_QWORD *)v41 + 4) = v38;
  v41[40] = 0;
  sub_1000BF3B4();
  v43 = static Edge.Set.horizontal.getter(v42);
  sub_100037768((uint64_t)v17, (uint64_t)v19, &qword_100BEE498);
  v44 = &v19[*(int *)(v91 + 36)];
  *v44 = v43;
  *(_OWORD *)(v44 + 8) = 0u;
  *(_OWORD *)(v44 + 24) = 0u;
  v44[40] = 1;
  sub_100021A14((uint64_t)v17, &qword_100BEE498);
  v45 = a1 + *(int *)(v7 + 24);
  v115 = *(_BYTE *)(v45 + 32);
  v46 = *(_OWORD *)(v45 + 16);
  v114[0] = *(_OWORD *)v45;
  v114[1] = v46;
  sub_1000787D4((uint64_t)v114, (uint64_t)v116, &qword_100BC3BB0);
  sub_1001171F4((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D55E4);
  sub_10011740C();
  v48 = v47;
  sub_1001171F4((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D31C4);
  v50 = static Alignment.center.getter(v49);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE, _QWORD, _BYTE, _QWORD, _QWORD))_FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:))(__src, 0, 1, 0, 1, 0, 1, v48 + 44.0, 0, 0, 1, 0, 1, v50, v51);
  sub_100037768((uint64_t)v19, (uint64_t)v21, &qword_100BEE4A0);
  memcpy(&v21[*(int *)(v90 + 36)], __src, 0x70uLL);
  sub_100021A14((uint64_t)v19, &qword_100BEE4A0);
  v53 = static Alignment.center.getter(v52);
  v55 = v54;
  sub_100037768((uint64_t)v21, (uint64_t)v23, &qword_100BEE4A8);
  v56 = (uint64_t *)&v23[*(int *)(v92 + 36)];
  *v56 = v53;
  v56[1] = v55;
  sub_100021A14((uint64_t)v21, &qword_100BEE4A8);
  LOBYTE(v53) = static Edge.Set.top.getter(v57);
  v58 = v94;
  sub_100037768((uint64_t)v23, v94, &qword_100BEE4B0);
  *(_BYTE *)(v58 + *(int *)(v93 + 36)) = v53;
  sub_100021A14((uint64_t)v23, &qword_100BEE4B0);
  v93 = static Alignment.center.getter(v59);
  v61 = v60;
  v62 = v95;
  sub_100080C0C(a1, v95, type metadata accessor for LocationViewBannerContainer);
  v63 = *(unsigned __int8 *)(v96 + 80);
  v64 = a1;
  v65 = (v63 + 16) & ~v63;
  v66 = v65 + v101;
  v67 = v63 | 7;
  v68 = swift_allocObject(&unk_100B7E7D0, v65 + v101, v63 | 7);
  sub_10007802C(v62, v68 + v65, type metadata accessor for LocationViewBannerContainer);
  v69 = v98;
  sub_100037768(v58, v98, &qword_100BEE4B8);
  v70 = (uint64_t (**)(uint64_t))(v69 + *(int *)(v112 + 36));
  *v70 = sub_1005408A4;
  v70[1] = (uint64_t (*)(uint64_t))v68;
  v70[2] = (uint64_t (*)(uint64_t))v93;
  v70[3] = v61;
  sub_100021A14(v58, &qword_100BEE4B8);
  v71 = v107;
  sub_100037768(v64, v107, &qword_100BC3620);
  sub_100080C0C(v64, v62, type metadata accessor for LocationViewBannerContainer);
  v72 = swift_allocObject(&unk_100B7E7F8, v66, v67);
  sub_10007802C(v62, v72 + v65, type metadata accessor for LocationViewBannerContainer);
  v73 = sub_100540A94();
  v74 = sub_10013BA10();
  v75 = v100;
  View.onChange<A>(of:initial:_:)(v71, 1, sub_100540A60, v72, v112, v106, v73, v74);
  swift_release(v72);
  sub_100021A14(v71, &qword_100BC3620);
  sub_100021A14(v69, &qword_100BEE4C0);
  v76 = (uint64_t)v99;
  v77 = &v99[*(int *)(v97 + 36)];
  *(_QWORD *)v77 = swift_getKeyPath(&unk_1009AB958);
  v78 = type metadata accessor for ContentStatusBannerPresentationViewModifier(0);
  *((_QWORD *)v77 + 2) = 0;
  *((_QWORD *)v77 + 3) = 0;
  *((_QWORD *)v77 + 1) = 0;
  v77[32] = 0;
  v79 = &v77[*(int *)(v78 + 20)];
  *(_QWORD *)v79 = swift_getKeyPath(&unk_1009AC3C8);
  v80 = sub_1000BA294(&qword_100C09EB0);
  swift_storeEnumTagMultiPayload(v79, v80, 0);
  if (qword_100BC21B8 != -1)
    swift_once(&qword_100BC21B8, sub_100125134);
  v81 = v110;
  v82 = sub_1000AECD4(v110, (uint64_t)qword_100BED580);
  v83 = v108;
  sub_100080C0C(v82, v108, type metadata accessor for ContentStatusBannerPresentationMetrics);
  v84 = v109;
  sub_100080C0C(v83, v109, type metadata accessor for ContentStatusBannerPresentationMetrics);
  State.init(wrappedValue:)(v84, v81);
  sub_1000BF3B4();
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v76, v75, v104);
  v85 = v102;
  sub_1000787D4(v76, v102, &qword_100BEE4D0);
  v86 = v105;
  sub_100037768(v85, v105, &qword_100BEE4D0);
  v87 = v111;
  sub_100037768(v86, v111, &qword_100BEE4D0);
  v88 = v87 + *(int *)(sub_1000BA294(&qword_100BEE538) + 48);
  *(_QWORD *)v88 = 0;
  *(_BYTE *)(v88 + 8) = 1;
  sub_100021A14(v85, &qword_100BEE4D0);
  sub_100021A14(v86, &qword_100BEE4D0);
}

void sub_100535024(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1000BA294(&qword_100BEE540);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v8 = __chkstk_darwin(v7);
  v10 = (double *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = static Color.clear.getter(v8);
  v12 = GeometryProxy.size.getter(v11);
  v14 = v13;
  sub_100037768(a1, (uint64_t)v10 + *(int *)(v7 + 20), &qword_100BC3620);
  *v10 = v12;
  *((_QWORD *)v10 + 1) = v14;
  sub_100080C0C((uint64_t)v10, (uint64_t)v6, type metadata accessor for ContentStatusBannerPresentationMetrics);
  v15 = sub_1000BA294(&qword_100BEE548);
  sub_100037768((uint64_t)v6, (uint64_t)a2 + *(int *)(v15 + 36), &qword_100BEE540);
  *a2 = v11;
  swift_retain();
  sub_100021A14((uint64_t)v6, &qword_100BEE540);
  sub_1000BF3B4();
  swift_release(v11);
}

void sub_10053517C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContentStatusBanner(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v13 - v10;
  sub_100037768(a2, (uint64_t)v5, &qword_100BC3620);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v6) == 1)
  {
    sub_100021A14((uint64_t)v5, &qword_100BC3620);
  }
  else
  {
    sub_10007802C((uint64_t)v5, (uint64_t)v11, type metadata accessor for ContentStatusBanner);
    type metadata accessor for LocationViewBannerContainer(0);
    sub_100080C0C((uint64_t)v11, (uint64_t)v9, type metadata accessor for ContentStatusBanner);
    v12 = sub_1000BA294(&qword_100BEE180);
    State.wrappedValue.setter(v9, v12);
    sub_1000BF3B4();
  }
}

uint64_t sub_1005352E0@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v14 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100BC21A0 != -1)
    swift_once(&qword_100BC21A0, sub_1005292EC);
  v18 = sub_1000AECD4(v14, (uint64_t)qword_100BED548);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.vfx(_:), v14);
  LOBYTE(v18) = sub_10011E9F0(v18, (uint64_t)v17);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    v20 = CGSize.isLandscape.getter(v19, a2 + a5 + a7, a3 + a4 + a6);
    v21 = type metadata accessor for TargetWindowSizeClass(0);
    if ((v20 & 1) != 0)
      v22 = (unsigned int *)&enum case for TargetWindowSizeClass.landscapeRegular(_:);
    else
      v22 = (unsigned int *)&enum case for TargetWindowSizeClass.portraitRegular(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(a1, *v22, v21);
  }
  else
  {
    v23 = enum case for TargetWindowSizeClass.compact(_:);
    v24 = type metadata accessor for TargetWindowSizeClass(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a1, v23, v24);
  }
}

void sub_100535470()
{
  uint64_t v0;
  uint64_t v1;

  sub_10009C150();
  sub_1000B42B0();
  __chkstk_darwin(v0);
  sub_1000C24A0();
  __chkstk_darwin(v1);
  sub_10009C838();
  sub_1000BF64C();
  sub_1000BF64C();
  sub_10009E348();
  sub_1000FCC84();
  sub_1000951F8();
  sub_10004A2A0();
}

void sub_1005354EC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10009C150();
  sub_1000B42B0();
  __chkstk_darwin(v0);
  sub_1000C24A0();
  __chkstk_darwin(v1);
  sub_10009C838();
  sub_10007A064();
  sub_1000BF64C();
  sub_1000BF64C();
  sub_10009E348();
  sub_1000FCC84();
  sub_1000951F8();
  sub_10004A2A0();
}

uint64_t assignWithCopy for LocationViewerView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  sub_100094D04((_QWORD *)(a1 + 16), v2 + 2);
  *(_QWORD *)(a1 + 56) = v2[7];
  v4 = v2[8];
  v5 = v2[9];
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  *(_QWORD *)(a1 + 72) = v5;
  sub_100094D04((_QWORD *)(a1 + 80), v2 + 10);
  sub_100094D04((_QWORD *)(a1 + 120), v2 + 15);
  *(_QWORD *)(a1 + 160) = v2[20];
  swift_retain();
  swift_release();
  v7 = v2[21];
  LOBYTE(v2) = *((_BYTE *)v2 + 176);
  sub_10008D47C(v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_BYTE *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v7;
  *(_BYTE *)(a1 + 176) = (_BYTE)v2;
  sub_1000B15F8(v8, v9);
  return a1;
}

void *initializeWithTake for LocationViewerView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB1uLL);
}

uint64_t assignWithTake for LocationViewerView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRelease(v6);
  *(_QWORD *)(a1 + 72) = v5;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 80));
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v8;
  swift_release();
  v9 = *(_BYTE *)(a2 + 176);
  v10 = *(_QWORD *)(a1 + 168);
  v11 = *(_BYTE *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = v9;
  sub_1000B15F8(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationViewerView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 177))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1005357F0(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned __int8 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  uint64_t v118;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = a2[1];
    v8 = *((_BYTE *)a2 + 16);
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v8;
    v9 = a3[6];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    swift_retain();
    v12 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v11) == 1)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
      *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
      *(_BYTE *)(v10 + 18) = *(_BYTE *)(v11 + 18);
      v13 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v14 = v10 + v13;
      v15 = v11 + v13;
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v17 = 1;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain();
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v17);
    v20 = a3[7];
    v21 = a1 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 9);
    v25 = *(_BYTE *)(v22 + 8);
    sub_100082BE8(*(_QWORD *)v22, v25, v24);
    *(_QWORD *)v21 = v23;
    *(_BYTE *)(v21 + 8) = v25;
    *(_BYTE *)(v21 + 9) = v24;
    v26 = a3[8];
    v27 = (_QWORD *)(a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v28) == 1)
    {
      v30 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = 1;
    }
    else
    {
      *v27 = *v28;
      swift_retain();
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v29, v31);
    v32 = a3[9];
    v33 = (_QWORD *)(a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v34) == 1)
    {
      v36 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v36))
      {
        v37 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        v38 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
        v38 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v36);
      }
    }
    else
    {
      *v33 = *v34;
      swift_retain();
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v33, v35, v38);
    v39 = a3[10];
    v40 = a1 + v39;
    v41 = (uint64_t)a2 + v39;
    v42 = *(_QWORD *)v41;
    v43 = *(_BYTE *)(v41 + 8);
    sub_10008D47C(*(_QWORD *)v41, v43);
    *(_QWORD *)v40 = v42;
    *(_BYTE *)(v40 + 8) = v43;
    v44 = a3[11];
    v45 = a1 + v44;
    v46 = (uint64_t)a2 + v44;
    v47 = *(_QWORD *)v46;
    v48 = *(_BYTE *)(v46 + 8);
    sub_10008D47C(*(_QWORD *)v46, v48);
    *(_QWORD *)v45 = v47;
    *(_BYTE *)(v45 + 8) = v48;
    v49 = a3[12];
    v50 = a1 + v49;
    v51 = (uint64_t)a2 + v49;
    v52 = *(_QWORD *)v51;
    v53 = *(_BYTE *)(v51 + 8);
    sub_10008D47C(*(_QWORD *)v51, v53);
    *(_QWORD *)v50 = v52;
    *(_BYTE *)(v50 + 8) = v53;
    v54 = a3[13];
    v55 = a1 + v54;
    v56 = (uint64_t)a2 + v54;
    v57 = *(_QWORD *)v56;
    v58 = *(_QWORD *)(v56 + 8);
    v59 = *(_QWORD *)(v56 + 16);
    v60 = *(_QWORD *)(v56 + 24);
    v61 = *(_BYTE *)(v56 + 32);
    sub_1000D55E4(*(_QWORD *)v56, v58, v59, v60, v61);
    *(_QWORD *)v55 = v57;
    *(_QWORD *)(v55 + 8) = v58;
    *(_QWORD *)(v55 + 16) = v59;
    *(_QWORD *)(v55 + 24) = v60;
    *(_BYTE *)(v55 + 32) = v61;
    v62 = a3[14];
    v63 = a1 + v62;
    v64 = (uint64_t)a2 + v62;
    v65 = *(_QWORD *)v64;
    LOBYTE(v58) = *(_BYTE *)(v64 + 8);
    sub_10008D47C(*(_QWORD *)v64, v58);
    *(_QWORD *)v63 = v65;
    *(_BYTE *)(v63 + 8) = v58;
    v66 = a3[15];
    v67 = a3[16];
    v68 = (_QWORD *)(a1 + v66);
    v69 = (uint64_t *)((char *)a2 + v66);
    v70 = v69[1];
    *v68 = *v69;
    v68[1] = v70;
    *(_QWORD *)(a1 + v67) = *(uint64_t *)((char *)a2 + v67);
    v71 = a3[17];
    v72 = a1 + v71;
    v73 = (uint64_t)a2 + v71;
    v74 = *(_OWORD *)((char *)a2 + v71 + 24);
    *(_OWORD *)(a1 + v71 + 24) = v74;
    v75 = v74;
    v76 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v74 - 8);
    swift_retain();
    v77 = swift_retain();
    v76(v72, v73, v75, v77);
    v78 = a3[19];
    *(_QWORD *)(a1 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
    v79 = *(_OWORD *)((char *)a2 + v78);
    *(_OWORD *)(a1 + v78) = v79;
    v80 = a3[20];
    v81 = a1 + v80;
    v82 = (uint64_t)a2 + v80;
    v83 = *(_OWORD *)((char *)a2 + v80 + 24);
    *(_OWORD *)(a1 + v80 + 24) = v83;
    v84 = v83;
    v85 = **(void (***)(uint64_t, uint64_t, uint64_t))(v83 - 8);
    swift_unknownObjectRetain(v79);
    v85(v81, v82, v84);
    v86 = a3[21];
    v87 = *(_OWORD *)((char *)a2 + v86 + 24);
    *(_OWORD *)(a1 + v86 + 24) = v87;
    (**(void (***)(void))(v87 - 8))();
    v88 = a3[22];
    v89 = a1 + v88;
    v90 = (uint64_t)a2 + v88;
    v91 = type metadata accessor for Text.Measurements(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
    v92 = a3[23];
    v93 = a3[24];
    v94 = a1 + v92;
    v95 = (uint64_t *)((char *)a2 + v92);
    v96 = *v95;
    LOBYTE(v95) = *((_BYTE *)v95 + 8);
    *(_QWORD *)v94 = v96;
    *(_BYTE *)(v94 + 8) = (_BYTE)v95;
    v118 = a1;
    v97 = a3;
    v98 = v118 + v93;
    v99 = *(uint64_t *)((char *)a2 + v93);
    v100 = *(uint64_t *)((char *)a2 + v93 + 8);
    v101 = *(uint64_t *)((char *)a2 + v93 + 16);
    v102 = *(uint64_t *)((char *)a2 + v93 + 24);
    v103 = *(uint64_t *)((char *)a2 + v93 + 32);
    v104 = *(uint64_t *)((char *)a2 + v93 + 40);
    v105 = *((_BYTE *)a2 + v93 + 48);
    swift_retain();
    sub_1000D55F0(v99, v100, v101, v102, v103, v104, v105);
    *(_QWORD *)v98 = v99;
    *(_QWORD *)(v98 + 8) = v100;
    *(_QWORD *)(v98 + 16) = v101;
    *(_QWORD *)(v98 + 24) = v102;
    *(_QWORD *)(v98 + 32) = v103;
    *(_QWORD *)(v98 + 40) = v104;
    *(_BYTE *)(v98 + 48) = v105;
    v106 = v97[25];
    v107 = v97[26];
    v108 = v118 + v106;
    v109 = (uint64_t)a2 + v106;
    *(_BYTE *)v108 = *(_BYTE *)v109;
    *(_QWORD *)(v108 + 8) = *(_QWORD *)(v109 + 8);
    v110 = v118 + v107;
    v111 = *(uint64_t *)((char *)a2 + v107);
    v112 = *(uint64_t *)((char *)a2 + v107 + 8);
    LOBYTE(v101) = *((_BYTE *)a2 + v107 + 16);
    swift_retain();
    sub_100037094(v111, v112);
    *(_QWORD *)v110 = v111;
    *(_QWORD *)(v110 + 8) = v112;
    *(_BYTE *)(v110 + 16) = v101;
    v113 = v97[27];
    v114 = v97[28];
    v19 = v118;
    v115 = *(void **)((char *)a2 + v113);
    *(_QWORD *)(v118 + v113) = v115;
    *(_QWORD *)(v118 + v114) = *(uint64_t *)((char *)a2 + v114);
    v116 = v115;
  }
  swift_retain();
  return v19;
}

uint64_t sub_100535D50(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  id v125;
  int *v127;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = a2 + v7;
    sub_100021A14(a1 + v7, &qword_100BC37E0);
    v10 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
      *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
      *(_BYTE *)(v8 + 17) = *(_BYTE *)(v9 + 17);
      *(_BYTE *)(v8 + 18) = *(_BYTE *)(v9 + 18);
      v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v12 = v8 + v11;
      v13 = v9 + v11;
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = 1;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v15);
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 9);
  v21 = *(_BYTE *)(v18 + 8);
  sub_100082BE8(*(_QWORD *)v18, v21, v20);
  v22 = *(_QWORD *)v17;
  v23 = *(_BYTE *)(v17 + 9);
  *(_QWORD *)v17 = v19;
  v24 = *(unsigned __int8 *)(v17 + 8);
  *(_BYTE *)(v17 + 8) = v21;
  *(_BYTE *)(v17 + 9) = v20;
  sub_100082C5C(v22, v24, v23);
  if (a1 != a2)
  {
    v25 = a3[8];
    v26 = (_QWORD *)(a1 + v25);
    v27 = (_QWORD *)(a2 + v25);
    sub_100021A14(a1 + v25, &qword_100BC37D8);
    v28 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v27) == 1)
    {
      v29 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      *v26 = *v27;
      swift_retain();
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
    v31 = a3[9];
    v32 = (_QWORD *)(a1 + v31);
    v33 = (_QWORD *)(a2 + v31);
    sub_100021A14(a1 + v31, (uint64_t *)&unk_100C09CD0);
    v34 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v33) == 1)
    {
      v35 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v35))
      {
        v36 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v37 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
        v37 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v35);
      }
    }
    else
    {
      *v32 = *v33;
      swift_retain();
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v37);
  }
  v38 = a3[10];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = *(_QWORD *)v40;
  v42 = *(_BYTE *)(v40 + 8);
  sub_10008D47C(*(_QWORD *)v40, v42);
  v43 = *(_QWORD *)v39;
  v44 = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v39 = v41;
  *(_BYTE *)(v39 + 8) = v42;
  sub_1000B15F8(v43, v44);
  v45 = a3[11];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = *(_QWORD *)v47;
  v49 = *(_BYTE *)(v47 + 8);
  sub_10008D47C(*(_QWORD *)v47, v49);
  v50 = *(_QWORD *)v46;
  v51 = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v46 = v48;
  *(_BYTE *)(v46 + 8) = v49;
  sub_1000B15F8(v50, v51);
  v52 = a3[12];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)v54;
  v56 = *(_BYTE *)(v54 + 8);
  sub_10008D47C(*(_QWORD *)v54, v56);
  v57 = *(_QWORD *)v53;
  v58 = *(_BYTE *)(v53 + 8);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = v56;
  sub_1000B15F8(v57, v58);
  v59 = a3[13];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = *(_QWORD *)v61;
  v63 = *(_QWORD *)(v61 + 8);
  v64 = *(_QWORD *)(v61 + 16);
  v65 = *(_QWORD *)(v61 + 24);
  v66 = *(_BYTE *)(v61 + 32);
  sub_1000D55E4(*(_QWORD *)v61, v63, v64, v65, v66);
  v67 = *(_QWORD *)v60;
  v68 = *(_QWORD *)(v60 + 8);
  v69 = *(_QWORD *)(v60 + 16);
  v70 = *(_QWORD *)(v60 + 24);
  v71 = *(_BYTE *)(v60 + 32);
  *(_QWORD *)v60 = v62;
  *(_QWORD *)(v60 + 8) = v63;
  *(_QWORD *)(v60 + 16) = v64;
  *(_QWORD *)(v60 + 24) = v65;
  *(_BYTE *)(v60 + 32) = v66;
  sub_1000D31C4(v67, v68, v69, v70, v71);
  v72 = a3[14];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = *(_QWORD *)v74;
  LOBYTE(v63) = *(_BYTE *)(v74 + 8);
  sub_10008D47C(*(_QWORD *)v74, v63);
  v76 = *(_QWORD *)v73;
  v77 = *(_BYTE *)(v73 + 8);
  *(_QWORD *)v73 = v75;
  *(_BYTE *)(v73 + 8) = v63;
  sub_1000B15F8(v76, v77);
  v78 = a3[15];
  v79 = (_QWORD *)(a1 + v78);
  v80 = (_QWORD *)(a2 + v78);
  *v79 = *v80;
  v79[1] = v80[1];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_retain();
  swift_release();
  sub_100094D04((_QWORD *)(a1 + a3[17]), (_QWORD *)(a2 + a3[17]));
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v81 = a3[19];
  v82 = (uint64_t *)(a1 + v81);
  v83 = (uint64_t *)(a2 + v81);
  v84 = *v83;
  v85 = v83[1];
  v86 = *v82;
  *v82 = *v83;
  swift_unknownObjectRetain(v84);
  swift_unknownObjectRelease(v86);
  v82[1] = v85;
  sub_100094D04((_QWORD *)(a1 + a3[20]), (_QWORD *)(a2 + a3[20]));
  sub_100094D04((_QWORD *)(a1 + a3[21]), (_QWORD *)(a2 + a3[21]));
  v87 = a3[22];
  v88 = a1 + v87;
  v89 = a2 + v87;
  v90 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 24))(v88, v89, v90);
  v91 = a3[23];
  v92 = a1 + v91;
  v93 = (uint64_t *)(a2 + v91);
  v94 = *v93;
  LOBYTE(v93) = *((_BYTE *)v93 + 8);
  *(_QWORD *)v92 = v94;
  *(_BYTE *)(v92 + 8) = (_BYTE)v93;
  swift_retain();
  swift_release();
  v95 = a3[24];
  v127 = a3;
  v96 = a1 + v95;
  v97 = a2 + v95;
  v98 = *(_QWORD *)v97;
  v99 = *(_QWORD *)(v97 + 8);
  v100 = *(_QWORD *)(v97 + 16);
  v101 = *(_QWORD *)(v97 + 24);
  v102 = *(_QWORD *)(v97 + 32);
  v103 = *(_QWORD *)(v97 + 40);
  v104 = *(_BYTE *)(v97 + 48);
  sub_1000D55F0(*(_QWORD *)v97, v99, v100, v101, v102, v103, v104);
  v105 = *(_QWORD *)v96;
  v106 = *(_QWORD *)(v96 + 8);
  v107 = *(_QWORD *)(v96 + 16);
  v108 = *(_QWORD *)(v96 + 24);
  v109 = *(_QWORD *)(v96 + 32);
  v110 = *(_QWORD *)(v96 + 40);
  v111 = *(_BYTE *)(v96 + 48);
  *(_QWORD *)v96 = v98;
  *(_QWORD *)(v96 + 8) = v99;
  *(_QWORD *)(v96 + 16) = v100;
  *(_QWORD *)(v96 + 24) = v101;
  *(_QWORD *)(v96 + 32) = v102;
  *(_QWORD *)(v96 + 40) = v103;
  *(_BYTE *)(v96 + 48) = v104;
  sub_1000D31D0(v105, v106, v107, v108, v109, v110, v111);
  v112 = v127[25];
  v113 = a1 + v112;
  v114 = a2 + v112;
  *(_BYTE *)v113 = *(_BYTE *)v114;
  *(_QWORD *)(v113 + 8) = *(_QWORD *)(v114 + 8);
  swift_retain();
  swift_release();
  v115 = v127[26];
  v116 = a1 + v115;
  v117 = a2 + v115;
  v118 = *(_QWORD *)v117;
  v119 = *(_QWORD *)(v117 + 8);
  LOBYTE(v100) = *(_BYTE *)(v117 + 16);
  sub_100037094(*(_QWORD *)v117, v119);
  v120 = *(_QWORD *)v116;
  v121 = *(_QWORD *)(v116 + 8);
  *(_QWORD *)v116 = v118;
  *(_QWORD *)(v116 + 8) = v119;
  *(_BYTE *)(v116 + 16) = v100;
  sub_1000BF398(v120, v121);
  v122 = v127[27];
  v123 = *(void **)(a2 + v122);
  v124 = *(void **)(a1 + v122);
  *(_QWORD *)(a1 + v122) = v123;
  v125 = v123;

  *(_QWORD *)(a1 + v127[28]) = *(_QWORD *)(a2 + v127[28]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100536360(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
    v8[16] = v9[16];
    v8[17] = v9[17];
    v8[18] = v9[18];
    v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  v19 = (void *)(a1 + v16);
  v20 = (const void *)(a2 + v16);
  v21 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v20) == 1)
  {
    v22 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  v23 = a3[9];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v25) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v27))
    {
      v28 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v27);
    }
    swift_storeEnumTagMultiPayload(v24, v26, 1);
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  v29 = a3[10];
  v30 = a3[11];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  v35 = a3[12];
  v36 = a3[13];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_BYTE *)(v39 + 32) = *(_BYTE *)(v40 + 32);
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  v42 = a3[14];
  v43 = a3[15];
  v44 = a1 + v42;
  v45 = a2 + v42;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_OWORD *)(a1 + v43) = *(_OWORD *)(a2 + v43);
  v46 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v49;
  *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
  v50 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v50) = *(_OWORD *)(a2 + v50);
  v51 = a3[20];
  v52 = a3[21];
  v53 = a1 + v51;
  v54 = a2 + v51;
  v55 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v55;
  *(_QWORD *)(v53 + 32) = *(_QWORD *)(v54 + 32);
  v56 = a1 + v52;
  v57 = (__int128 *)(a2 + v52);
  *(_QWORD *)(v56 + 32) = *((_QWORD *)v57 + 4);
  v58 = *v57;
  v59 = v57[1];
  v60 = a3[22];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_OWORD *)v56 = v58;
  *(_OWORD *)(v56 + 16) = v59;
  v63 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
  v64 = a3[23];
  v65 = a3[24];
  v66 = a1 + v64;
  v67 = a2 + v64;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v68 = a1 + v65;
  v69 = (__int128 *)(a2 + v65);
  *(_BYTE *)(v68 + 48) = *((_BYTE *)v69 + 48);
  v70 = v69[2];
  v71 = *v69;
  *(_OWORD *)(v68 + 16) = v69[1];
  *(_OWORD *)(v68 + 32) = v70;
  *(_OWORD *)v68 = v71;
  v72 = a3[26];
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  v73 = a1 + v72;
  v74 = a2 + v72;
  *(_OWORD *)v73 = *(_OWORD *)v74;
  *(_BYTE *)(v73 + 16) = *(_BYTE *)(v74 + 16);
  v75 = a3[28];
  *(_QWORD *)(a1 + a3[27]) = *(_QWORD *)(a2 + a3[27]);
  *(_QWORD *)(a1 + v75) = *(_QWORD *)(a2 + v75);
  return a1;
}

uint64_t sub_10053674C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;

  v6 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  swift_release();
  if (a1 != a2)
  {
    v7 = a3[6];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    sub_100021A14(a1 + v7, &qword_100BC37E0);
    v10 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[16] = v9[16];
      v8[17] = v9[17];
      v8[18] = v9[18];
      v11 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = *((_BYTE *)v17 + 8);
  LOBYTE(v17) = *((_BYTE *)v17 + 9);
  v20 = *(_QWORD *)v16;
  v21 = *(_BYTE *)(v16 + 9);
  *(_QWORD *)v16 = v18;
  v22 = *(unsigned __int8 *)(v16 + 8);
  *(_BYTE *)(v16 + 8) = v19;
  *(_BYTE *)(v16 + 9) = (_BYTE)v17;
  sub_100082C5C(v20, v22, v21);
  if (a1 != a2)
  {
    v23 = a3[8];
    v24 = (void *)(a1 + v23);
    v25 = (const void *)(a2 + v23);
    sub_100021A14(a1 + v23, &qword_100BC37D8);
    v26 = sub_1000BA294(&qword_100BC37D8);
    if (swift_getEnumCaseMultiPayload(v25) == 1)
    {
      v27 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    v28 = a3[9];
    v29 = (void *)(a1 + v28);
    v30 = (const void *)(a2 + v28);
    sub_100021A14(a1 + v28, (uint64_t *)&unk_100C09CD0);
    v31 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      v32 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v32))
      {
        v33 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v32);
      }
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  v34 = a3[10];
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  v38 = *(_QWORD *)v35;
  v39 = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = (_BYTE)v36;
  sub_1000B15F8(v38, v39);
  v40 = a3[11];
  v41 = a1 + v40;
  v42 = (uint64_t *)(a2 + v40);
  v43 = *v42;
  LOBYTE(v42) = *((_BYTE *)v42 + 8);
  v44 = *(_QWORD *)v41;
  v45 = *(_BYTE *)(v41 + 8);
  *(_QWORD *)v41 = v43;
  *(_BYTE *)(v41 + 8) = (_BYTE)v42;
  sub_1000B15F8(v44, v45);
  v46 = a3[12];
  v47 = a1 + v46;
  v48 = (uint64_t *)(a2 + v46);
  v49 = *v48;
  LOBYTE(v48) = *((_BYTE *)v48 + 8);
  v50 = *(_QWORD *)v47;
  v51 = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v47 = v49;
  *(_BYTE *)(v47 + 8) = (_BYTE)v48;
  sub_1000B15F8(v50, v51);
  v52 = a3[13];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_BYTE *)(v54 + 32);
  v56 = *(_QWORD *)v53;
  v57 = *(_QWORD *)(v53 + 8);
  v58 = *(_QWORD *)(v53 + 16);
  v59 = *(_QWORD *)(v53 + 24);
  v60 = *(_BYTE *)(v53 + 32);
  v61 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v61;
  *(_BYTE *)(v53 + 32) = v55;
  sub_1000D31C4(v56, v57, v58, v59, v60);
  v62 = a3[14];
  v63 = a1 + v62;
  v64 = (uint64_t *)(a2 + v62);
  v65 = *v64;
  LOBYTE(v64) = *((_BYTE *)v64 + 8);
  v66 = *(_QWORD *)v63;
  v67 = *(_BYTE *)(v63 + 8);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(v63 + 8) = (_BYTE)v64;
  sub_1000B15F8(v66, v67);
  v68 = a3[15];
  v69 = (_QWORD *)(a1 + v68);
  v70 = (uint64_t *)(a2 + v68);
  v72 = *v70;
  v71 = v70[1];
  *v69 = v72;
  v69[1] = v71;
  swift_release();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_release();
  v73 = a3[17];
  v74 = a1 + v73;
  v75 = a2 + v73;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v73));
  v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(_QWORD *)(v74 + 32) = *(_QWORD *)(v75 + 32);
  v77 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v78 = a1 + v77;
  v79 = *(_QWORD *)(a2 + v77 + 8);
  v80 = *(_QWORD *)(a1 + v77);
  *(_QWORD *)(a1 + v77) = *(_QWORD *)(a2 + v77);
  swift_unknownObjectRelease(v80);
  *(_QWORD *)(v78 + 8) = v79;
  v81 = a3[20];
  v82 = a1 + v81;
  v83 = a2 + v81;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v81));
  v84 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v83;
  *(_OWORD *)(v82 + 16) = v84;
  *(_QWORD *)(v82 + 32) = *(_QWORD *)(v83 + 32);
  v85 = a3[21];
  v86 = a1 + v85;
  v87 = a2 + v85;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v85));
  v88 = *(_OWORD *)(v87 + 16);
  *(_OWORD *)v86 = *(_OWORD *)v87;
  *(_OWORD *)(v86 + 16) = v88;
  *(_QWORD *)(v86 + 32) = *(_QWORD *)(v87 + 32);
  v89 = a3[22];
  v90 = a1 + v89;
  v91 = a2 + v89;
  v92 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
  v93 = a3[23];
  v94 = a1 + v93;
  v95 = (uint64_t *)(a2 + v93);
  v96 = *v95;
  LOBYTE(v95) = *((_BYTE *)v95 + 8);
  *(_QWORD *)v94 = v96;
  *(_BYTE *)(v94 + 8) = (_BYTE)v95;
  swift_release();
  v97 = a3[24];
  v98 = a1 + v97;
  v99 = a2 + v97;
  v100 = *(_BYTE *)(v99 + 48);
  v101 = *(_QWORD *)v98;
  v102 = *(_QWORD *)(v98 + 8);
  v103 = *(_QWORD *)(v98 + 16);
  v104 = *(_QWORD *)(v98 + 24);
  v105 = *(_QWORD *)(v98 + 32);
  v106 = *(_QWORD *)(v98 + 40);
  v107 = *(_BYTE *)(v98 + 48);
  v108 = *(_OWORD *)(v99 + 16);
  *(_OWORD *)v98 = *(_OWORD *)v99;
  *(_OWORD *)(v98 + 16) = v108;
  *(_OWORD *)(v98 + 32) = *(_OWORD *)(v99 + 32);
  *(_BYTE *)(v98 + 48) = v100;
  sub_1000D31D0(v101, v102, v103, v104, v105, v106, v107);
  v109 = a3[25];
  v110 = a1 + v109;
  v111 = a2 + v109;
  *(_BYTE *)v110 = *(_BYTE *)v111;
  *(_QWORD *)(v110 + 8) = *(_QWORD *)(v111 + 8);
  swift_release();
  v112 = a3[26];
  v113 = a1 + v112;
  v114 = a2 + v112;
  v115 = *(_BYTE *)(v114 + 16);
  v116 = *(_QWORD *)v113;
  v117 = *(_QWORD *)(v113 + 8);
  *(_OWORD *)v113 = *(_OWORD *)v114;
  *(_BYTE *)(v113 + 16) = v115;
  sub_1000BF398(v116, v117);
  v118 = a3[27];
  v119 = *(void **)(a1 + v118);
  *(_QWORD *)(a1 + v118) = *(_QWORD *)(a2 + v118);

  *(_QWORD *)(a1 + a3[28]) = *(_QWORD *)(a2 + a3[28]);
  swift_release();
  return a1;
}

void sub_100536C90(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10009E50C();
  sub_1000BA294(&qword_100BC3808);
  sub_100088FF0();
  if (v7)
  {
    sub_10011DFB0();
  }
  else
  {
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
    sub_100088FF0();
    if (v7)
    {
      v6 = a3[8];
    }
    else
    {
      sub_1000BA294((uint64_t *)&unk_100C09CB0);
      sub_100088FF0();
      if (v8)
      {
        v6 = a3[9];
      }
      else
      {
        if (v3 == 0x7FFFFFFF)
        {
          sub_10003BCA4(*(_QWORD *)(v4 + a3[15] + 8));
          sub_100079F70();
          return;
        }
        sub_1000BCF7C();
        v6 = a3[22];
      }
    }
  }
  v9 = sub_10009E5E4(v6);
  sub_1000B250C(v9, v10, v11);
}

void sub_100536D40()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000994F4();
  sub_1000BA294(&qword_100BC3808);
  sub_10009D2E8();
  if (v4)
  {
    sub_1000B32A4();
  }
  else
  {
    sub_1000BA294((uint64_t *)&unk_100C09CA0);
    sub_10009D2E8();
    if (!v4)
    {
      sub_1000BA294((uint64_t *)&unk_100C09CB0);
      sub_10009D2E8();
      if (!v5)
      {
        if (v3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(v1 + *(int *)(v2 + 60) + 8) = (v0 - 1);
          sub_100079F70();
          return;
        }
        sub_1000BCF7C();
      }
    }
  }
  sub_100098D08();
  sub_1000987C4(v6, v7, v8, v9);
}

void sub_100536DF8()
{
  uint64_t v0;

  v0 = sub_10011E264();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100536E14(char *a1)
{
  sub_100542E84(a1);
  sub_10004A298();
}

void sub_100536E2C(char *a1)
{
  sub_100542E84(a1);
  sub_10004A298();
}

uint64_t type metadata accessor for PageControlDisplayStateModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEDDB0, (uint64_t)&nominal type descriptor for PageControlDisplayStateModifier);
}

void sub_100536E60(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  sub_100110738(a1);
  sub_1000FDA40(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100098918();
}

void sub_100536E80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  char __src[72];

  sub_1000FC4E4(a1, a2, a3, a4, a5, a6, a7, a8, v8, __src[0]);
  sub_100155BE0(__src);
  sub_100098918();
}

void sub_100536EAC()
{
  double *v0;

  *v0 = sub_10011E2FC();
  sub_10004A298();
}

void sub_100536EC8(double *a1)
{
  sub_10011E61C(a1);
  sub_10004A298();
}

void sub_100536EE0()
{
  uint64_t v0;

  v0 = sub_100542EA8();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100536EFC()
{
  uint64_t v0;

  v0 = sub_10007A180();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100536F18(unsigned __int8 *a1)
{
  sub_1000FEC44(a1);
  sub_10004A298();
}

uint64_t sub_100536F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  void (*v14)(__n128);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v17 - v12;
  v14(v11);
  sub_1000B2074(v9, a2, a3);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a2);
  sub_1000B1100((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a2);
}

void sub_100537008()
{
  EnvironmentValues.imageScale.getter();
  sub_10004A298();
}

void sub_100537024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;

  v2 = sub_1000BDD30();
  v3 = type metadata accessor for Image.Scale(v2);
  __chkstk_darwin(v3);
  v5 = sub_1000DC1F4(v4, v7);
  v6(v5, v0);
  EnvironmentValues.imageScale.setter(v1);
  sub_100079F70();
}

uint64_t sub_10053707C(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_100528964(a1, *a2, a3, a4);
}

BOOL sub_100537084(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100528A9C(a1, *a2);
}

void sub_10053708C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  sub_100528A40(a1, a2, a3, *a4, a5, a6);
}

uint64_t sub_100537094(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1005289D4(a1, *a2, a3, a4);
}

BOOL sub_10053709C(uint64_t a1, char *a2)
{
  return sub_100528B14(a1, *a2);
}

uint64_t sub_1005370A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v9 = type metadata accessor for LocationViewerInteractor();
  v10 = &off_100B7D558;
  *(_QWORD *)&v8 = a2;
  sub_1000A0794(0, (unint64_t *)&qword_100BC2998, OS_os_log_ptr);
  v6 = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0xD000000000000012, 0x80000001009AB600);
  *(_QWORD *)(a3 + 64) = v6;
  ObservationRegistrar.init()(v6);
  *(_QWORD *)(a3 + 16) = a1;
  sub_10003C800(&v8, a3 + 24);
  return a3;
}

uint64_t sub_10053716C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v12[3];
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = *a2;
  v14 = &off_100B7D558;
  v12[0] = a2;
  v3 = type metadata accessor for LocationViewerBindingWrapper(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v5 = sub_100068EB4((uint64_t)v12, v13);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  v9 = sub_1005370A4(a1, *v7, v4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v12);
  return v9;
}

void sub_100537230()
{
  sub_10004B720();
  sub_10004A298();
}

void sub_10053724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100529A48(a1, a2, a3, a4, type metadata accessor for DisplayMetrics, (void (*)(char *))sub_100155AFC);
}

void sub_10053727C()
{
  uint64_t v0;

  v0 = sub_10011E198();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100537298()
{
  uint64_t v0;

  v0 = sub_100542EA8();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_1005372BC()
{
  _BOOL8 v0;

  v0 = sub_10011E218();
  sub_1000C0E60(v0);
  sub_10004A298();
}

uint64_t type metadata accessor for LocationViewerFullscreenMapPresentationSourceModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEDE48, (uint64_t)&nominal type descriptor for LocationViewerFullscreenMapPresentationSourceModifier);
}

unint64_t sub_1005372F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED8C0;
  if (!qword_100BED8C0)
  {
    v1 = sub_100075EB0(&qword_100BED898);
    sub_10007AB60((uint64_t)&unk_100BED8C8);
    sub_10007A100((uint64_t)&unk_100BED8D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED8C0);
  }
  return result;
}

unint64_t sub_100537390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED8E8;
  if (!qword_100BED8E8)
  {
    v1 = sub_100075EB0(&qword_100BED8A8);
    sub_1003A70C0((uint64_t)&unk_100BED8D8);
    sub_1001266E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED8E8);
  }
  return result;
}

uint64_t sub_100537420(uint64_t a1)
{
  return sub_1005408B8(a1, (uint64_t)type metadata accessor for MeasuredLocationViewerView, (uint64_t (*)(uint64_t))sub_1005297C8);
}

void sub_100537434()
{
  sub_100529A14();
  sub_10004A298();
}

void sub_100537450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100529A48(a1, a2, a3, a4, type metadata accessor for ContentStatusBannerPresentationMetrics, (void (*)(char *))sub_100529AC4);
}

unint64_t sub_100537474()
{
  unint64_t result;

  result = qword_100BED928;
  if (!qword_100BED928)
  {
    result = swift_getWitnessTable(&unk_1009AC1F8, &_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVN);
    atomic_store(result, (unint64_t *)&qword_100BED928);
  }
  return result;
}

unint64_t sub_1005374B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED948;
  if (!qword_100BED948)
  {
    v1 = sub_100075EB0(&qword_100BED940);
    sub_10053751C();
    sub_10053775C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED948);
  }
  return result;
}

unint64_t sub_10053751C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED950;
  if (!qword_100BED950)
  {
    v1 = sub_100075EB0(&qword_100BED958);
    sub_1003A70C0((uint64_t)&unk_100BED960);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED950);
  }
  return result;
}

unint64_t sub_1005375A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BED970;
  if (!qword_100BED970)
  {
    v1 = sub_100075EB0(&qword_100BED978);
    v2[0] = sub_100075EB0(&qword_100BED980);
    v2[1] = sub_10053763C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.alert(isPresented:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED970);
  }
  return result;
}

unint64_t sub_10053763C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED988;
  if (!qword_100BED988)
  {
    v1 = sub_100075EB0(&qword_100BED980);
    sub_1005376C0();
    sub_10007AB60((uint64_t)&unk_100BED9B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED988);
  }
  return result;
}

unint64_t sub_1005376C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED990;
  if (!qword_100BED990)
  {
    v1 = sub_100075EB0(&qword_100BED998);
    sub_10007AB60((uint64_t)&unk_100BED9A0);
    sub_10007AB60((uint64_t)&unk_100C0A590);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED990);
  }
  return result;
}

unint64_t sub_10053775C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BED9C8;
  if (!qword_100BED9C8)
  {
    v1 = sub_100075EB0(&qword_100BED9D0);
    sub_10007AB60((uint64_t)&unk_100BED9D8);
    sub_10007AB60((uint64_t)&qword_100BC4050);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BED9C8);
  }
  return result;
}

uint64_t sub_1005377F8()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1000986AC();
  type metadata accessor for MeasuredLocationViewerView(0);
  sub_100095160();
  v5 = v4 & ~v3;
  v6 = sub_10009E428();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = v1 + v5;
  swift_release();
  v11 = sub_1000BA294(&qword_100BC37E0);
  if (sub_1000952AC(v11) == 1)
  {
    sub_10009E908();
    v12 = sub_10003BC60();
    sub_1000B2568(v12);
  }
  else
  {
    sub_1000F3F48();
  }
  v13 = v5 + v2 + v8;
  sub_100082C5C(*(_QWORD *)(v10 + v0[7]), *(unsigned __int8 *)(v10 + v0[7] + 8), *(_BYTE *)(v10 + v0[7] + 9));
  v14 = sub_1000BA294(&qword_100BC37D8);
  if (sub_1000952AC(v14) == 1)
  {
    v15 = sub_10009EE9C();
    sub_1000B2568(v15);
  }
  else
  {
    sub_1000F3F48();
  }
  v16 = v13 & ~v8;
  v17 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_1000952AC(v17) == 1)
  {
    v18 = sub_1000F44BC();
    if (!sub_10009E638(v18))
      sub_1000B4974();
  }
  else
  {
    sub_1000F3F48();
  }
  sub_1000C1B20(v0[10]);
  sub_1000C1B20(v0[11]);
  sub_1000C1B20(v0[12]);
  v19 = v10 + v0[13];
  sub_1000D31C4(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24), *(_BYTE *)(v19 + 32));
  sub_1000C1B20(v0[14]);
  sub_1000B3004(v0[15]);
  sub_10009C9A4(v0[16]);
  sub_100542E70(v0[17]);
  swift_unknownObjectRelease(*(_QWORD *)(v10 + v0[19]));
  sub_100542E70(v0[20]);
  sub_100542E70(v0[21]);
  v20 = sub_1000BCF7C();
  sub_1000B2568(v20);
  sub_10009C9A4(v0[23]);
  v21 = v10 + v0[24];
  sub_1000D31D0(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 16), *(_QWORD *)(v21 + 24), *(_QWORD *)(v21 + 32), *(_QWORD *)(v21 + 40), *(_BYTE *)(v21 + 48));
  sub_1000B3004(v0[25]);
  sub_1000BF398(*(_QWORD *)(v10 + v0[26]), *(_QWORD *)(v10 + v0[26] + 8));

  sub_10009C9A4(v0[28]);
  v22 = v1 + v16 + *(int *)(v6 + 20);
  v23 = sub_10009985C();
  if (!sub_1000C1D58(v23))
  {
    if (*(_QWORD *)(v22 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v24 = sub_100098778();
    if (!sub_1000C1D58(v24))
      sub_1000CCA08();
  }
  return sub_1000BBBC0(v1, v16 + v9, v3 | v8 | 7);
}

void sub_100537A2C(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MeasuredLocationViewerView(0) - 8) + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_10009E428() - 8) + 80);
  sub_10052A4C8((uint64_t *)(v2 + v7), v2 + ((v7 + v3 + v8) & ~v8), a1, a2);
}

void sub_100537A9C()
{
  double *v0;

  *v0 = sub_10009ED9C();
  sub_10004A298();
}

void sub_100537AB8(double *a1)
{
  sub_100542E58(a1);
  sub_10004A298();
}

void sub_100537AD0()
{
  uint64_t v0;

  v0 = sub_100542E90();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100537AEC(char *a1)
{
  sub_100542E78(a1);
  sub_10004A298();
}

uint64_t sub_100537B04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10052EB9C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100537B0C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10008900C();
  sub_1000CDCDC();
  sub_1000F3FBC();
  v5 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v5) == 1)
  {
    sub_10009E908();
    v6 = sub_1000C1D78();
    sub_1000987E0(v6);
  }
  else
  {
    sub_1000B4394();
  }
  sub_100098E88();
  v7 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v7) == 1)
  {
    v8 = sub_10009EE9C();
    sub_1000987E0(v8);
  }
  else
  {
    sub_1000B4394();
  }
  sub_10011E038();
  v9 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v9) == 1)
  {
    v10 = sub_1000F44BC();
    if (!sub_1000BC04C(v10))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BB004();
  sub_1000DAA48(v0[16]);
  sub_1000CFDC8();
  v11 = sub_1000C6034();
  sub_1000989A0(v11);
  sub_1000DAA48(v0[23]);
  sub_1000CCE9C();
  sub_1000D9F14();
  sub_1000DAA48(v0[28]);
  return sub_1000B4380(v1, v4 + v3 + 1, v2 | 7);
}

void sub_100537C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for MeasuredLocationViewerView(0);
  sub_1000861D0();
  sub_10052EECC(v0 + v2, *(_BYTE *)(v0 + v2 + v1));
}

void sub_100537C30()
{
  BOOL *v0;

  sub_1000DC96C();
  sub_10052F684(v0);
}

uint64_t sub_100537C50()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10008900C();
  v1 = (int *)type metadata accessor for MeasuredLocationViewerView(0);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_1000F3FBC();
  v2 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v2) == 1)
  {
    sub_10009E908();
    v3 = sub_1000C1D78();
    sub_1000987E0(v3);
  }
  else
  {
    sub_1000B4394();
  }
  sub_100098E88();
  v4 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v4) == 1)
  {
    v5 = sub_10009EE9C();
    sub_1000987E0(v5);
  }
  else
  {
    sub_1000B4394();
  }
  sub_10011E038();
  v6 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v6) == 1)
  {
    v7 = sub_1000F44BC();
    if (!sub_1000BC04C(v7))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BB004();
  sub_1000DAA48(v1[16]);
  sub_1000CFDC8();
  v8 = sub_1000C6034();
  sub_1000989A0(v8);
  sub_1000DAA48(v1[23]);
  sub_1000CCE9C();
  sub_1000D9F14();
  sub_1000DAA48(v1[28]);
  v9 = sub_1000BD3C8();
  return sub_1000B4380(v9, v10, v11);
}

void sub_100537D6C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_BYTE *)sub_1000BDA9C(a1);
  sub_10052F748(v1, v2, v3, v4);
}

void sub_100537D88()
{
  sub_100528C28();
  sub_10004A298();
}

uint64_t sub_100537DA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000986AC();
  v1 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (int *)type metadata accessor for MeasuredLocationViewerView(0);
  v4 = v0 + *(int *)(v1 + 20) + v2;
  v5 = sub_10009985C();
  if (!sub_1000BC04C(v5))
  {
    if (*(_QWORD *)(v4 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v6 = sub_100098778();
    if (!sub_1000BC04C(v6))
      sub_100098C04();
  }
  swift_release();
  sub_1000F3FBC();
  v7 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v7) == 1)
  {
    sub_10009E908();
    v8 = sub_1000C1D78();
    sub_1000987E0(v8);
  }
  else
  {
    sub_1000B4394();
  }
  sub_100098E88();
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (sub_100098814(v9) == 1)
  {
    v10 = sub_10009EE9C();
    sub_1000987E0(v10);
  }
  else
  {
    sub_1000B4394();
  }
  sub_10011E038();
  v11 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v11) == 1)
  {
    v12 = sub_1000F44BC();
    if (!sub_1000BC04C(v12))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  sub_1000BB004();
  sub_1000DAA48(v3[16]);
  sub_1000CFDC8();
  v13 = sub_1000C6034();
  sub_1000989A0(v13);
  sub_1000DAA48(v3[23]);
  sub_1000CCE9C();
  sub_1000D9F14();
  sub_1000DAA48(v3[28]);
  v14 = sub_1000BD3C8();
  return sub_1000BBBC0(v14, v15, v16);
}

uint64_t sub_100537F24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1000F422C();
  v4 = *(_QWORD *)(type metadata accessor for ContentStatusBannerPresentationMetrics(v3) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MeasuredLocationViewerView(0) - 8) + 80);
  return sub_10052CFA0(v0, v1 + v5, (_QWORD *)(v1 + ((v5 + v6 + v7) & ~v7)), v2);
}

unint64_t sub_100537F94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDAA0;
  if (!qword_100BEDAA0)
  {
    v1 = sub_100075EB0(&qword_100BEDA90);
    sub_10007AB60((uint64_t)&unk_100BEDAA8);
    sub_1001300B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDAA0);
  }
  return result;
}

void sub_100538018()
{
  EnvironmentValues.imageScale.getter();
  sub_10004A298();
}

void sub_100538038()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100542E9C();
  *v0 = v1;
  sub_10004A298();
}

void sub_100538054(double *a1)
{
  sub_100542E64(a1);
  sub_10004A298();
}

unint64_t sub_10053806C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDAE8;
  if (!qword_100BEDAE8)
  {
    v1 = sub_100075EB0(&qword_100BEDA50);
    sub_1003A70C0((uint64_t)&unk_100BEDAF0);
    sub_10007AB60((uint64_t)&unk_100BEDB28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDAE8);
  }
  return result;
}

unint64_t sub_100538110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDAF8;
  if (!qword_100BEDAF8)
  {
    v1 = sub_100075EB0(&qword_100BEDA40);
    sub_100345634((uint64_t)&unk_100BEDB00);
    sub_10007AB60((uint64_t)&unk_100BEDB20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDAF8);
  }
  return result;
}

unint64_t sub_1005381B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDB08;
  if (!qword_100BEDB08)
  {
    v1 = sub_100075EB0(&qword_100BEDA30);
    sub_100345634((uint64_t)&unk_100BEDB10);
    sub_10007AB60((uint64_t)&unk_100C0A520);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDB08);
  }
  return result;
}

unint64_t sub_100538258()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_100BEDB18;
  if (!qword_100BEDB18)
  {
    v1 = sub_100075EB0(&qword_100BEDA20);
    v2 = sub_100075EB0(&qword_100BEDA10);
    sub_10007AB60((uint64_t)&unk_100BEDAD0);
    v4[0] = v2;
    v4[1] = &type metadata for BottomBarButtonStyle;
    v4[2] = v3;
    v4[3] = sub_100139354();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDB18);
  }
  return result;
}

uint64_t type metadata accessor for PageControl(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEE098, (uint64_t)&nominal type descriptor for PageControl);
}

void sub_100538338()
{
  sub_100538400();
}

uint64_t sub_100538354()
{
  return sub_100540704(type metadata accessor for MeasuredLocationViewerView, (uint64_t (*)(uint64_t))sub_10052E59C);
}

unint64_t sub_10053836C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDBC8;
  if (!qword_100BEDBC8)
  {
    v1 = sub_100075EB0(&qword_100BEDB60);
    sub_100157164();
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDBC8);
  }
  return result;
}

void sub_1005383F4()
{
  sub_100538400();
}

void sub_100538400()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);

  v0 = type metadata accessor for MeasuredLocationViewerView(0);
  v1 = sub_1000FC658(v0);
  sub_10052F3E8(v1, v2);
  sub_10004A298();
}

uint64_t sub_100538428@<X0>(uint64_t a1@<X8>)
{
  return sub_10052F420(a1);
}

unint64_t sub_100538430()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDBE0;
  if (!qword_100BEDBE0)
  {
    v1 = sub_100075EB0(&qword_100BEDBD8);
    sub_1001A865C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDBE0);
  }
  return result;
}

void sub_1005384A0()
{
  uint64_t v0;

  sub_1000DC96C();
  sub_10052F818(v0);
}

uint64_t sub_1005384C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000BDA9C(a1);
  return sub_10052F934(v1, v2, v3, v4);
}

void sub_1005384DC()
{
  uint64_t v0;

  sub_10052E668(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1005384E4()
{
  uint64_t v0;

  return sub_10021A9C0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1005384FC()
{
  uint64_t v0;

  return sub_10021A998(*(uint64_t (**)(void))(v0 + 16));
}

void sub_100538514()
{
  uint64_t v0;

  v0 = sub_10009EFC4();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100538530(char *a1)
{
  sub_100087918(a1);
  sub_10004A298();
}

void sub_100538548()
{
  uint64_t v0;

  v0 = sub_10007A180();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100538564(unsigned __int8 *a1)
{
  sub_1000FEC44(a1);
  sub_10004A298();
}

uint64_t type metadata accessor for LocationViewPage(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEE130, (uint64_t)&nominal type descriptor for LocationViewPage);
}

unint64_t sub_100538598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEDC28;
  if (!qword_100BEDC28)
  {
    v1 = sub_100075EB0(&qword_100BEDC10);
    sub_1003A70C0((uint64_t)&unk_100BED960);
    sub_10007AB60((uint64_t)&qword_100BD3EB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEDC28);
  }
  return result;
}

void sub_100538640()
{
  sub_10053FE48(type metadata accessor for MeasuredLocationViewerView, sub_10052BA08);
}

uint64_t sub_100538658()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for MeasuredLocationViewerView(0);
  v0 = sub_10009DACC();
  return sub_10052BBD8(v0, v1);
}

uint64_t type metadata accessor for PinnedMapView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEDF68, (uint64_t)&nominal type descriptor for PinnedMapView);
}

void sub_100538694()
{
  _BYTE *v0;

  *v0 = sub_10009E58C();
  sub_10004A298();
}

void sub_1005386B0(char *a1)
{
  sub_1001104A8(a1);
  sub_10004A298();
}

uint64_t sub_1005386C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModel(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100538704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100538748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10053878C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1005387D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100538814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100538820);
}

uint64_t sub_100538820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BC4BC();
  return sub_1000C4820(v1, v0, v2);
}

uint64_t sub_100538844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100538850);
}

uint64_t sub_100538850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000BC4BC();
  sub_100098D08();
  return sub_1000BE6F8(v0, v1, v2, v3);
}

ValueMetadata *_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVMa()
{
  return &_s52ContentStatusBannerPresentationMetricsEnvironmentKeyVN;
}

uint64_t *sub_100538884(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *v4 = v7;
    *((_BYTE *)v4 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)v4 + v9);
    v11 = (_QWORD *)(a2 + v9);
    v12 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v11) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13))
      {
        v14 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        v15 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
        v15 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v13);
      }
    }
    else
    {
      *v10 = *v11;
      swift_retain();
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v15);
    v17 = *(int *)(a3 + 24);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (_QWORD *)(a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_retain();
  }
  swift_retain();
  return v4;
}

double sub_1005389F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100538AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12))
    {
      v13 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      v14 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v14 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v12);
    }
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v14);
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100538BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (_QWORD *)(a1 + v10);
    v12 = (_QWORD *)(a2 + v10);
    sub_100021A14(a1 + v10, (uint64_t *)&unk_100C09CD0);
    v13 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14))
      {
        v15 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
        v16 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v14);
      }
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v16);
  }
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_retain();
  swift_release();
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100538D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10))
    {
      v11 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100538E98(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100021A14(a1 + v10, (uint64_t *)&unk_100C09CD0);
    v13 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14))
      {
        v15 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = (uint64_t *)((char *)a2 + v16);
  *(_QWORD *)(a1 + v16) = *v18;
  swift_release();
  *(_QWORD *)(v17 + 8) = v18[1];
  swift_release();
  return a1;
}

uint64_t sub_100539000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053900C);
}

void sub_10053900C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10009E50C();
  sub_1000BA294((uint64_t *)&unk_100C09CB0);
  sub_100088FF0();
  if (v5)
  {
    v6 = sub_10009E5E4(*(int *)(a3 + 20));
    sub_1000B250C(v6, v7, v8);
  }
  else
  {
    sub_10003BCA4(*(_QWORD *)(v3 + *(int *)(a3 + 24)));
    sub_100079F70();
  }
}

uint64_t sub_100539060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10053906C);
}

void sub_10053906C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000994F4();
  sub_1000BA294((uint64_t *)&unk_100C09CB0);
  sub_10009D2E8();
  if (v3)
  {
    sub_100098D08();
    sub_1000987C4(v4, v5, v6, v7);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 24)) = (v0 - 1);
    sub_100079F70();
  }
}

void sub_1005390C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  sub_100158AF0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1009AB6A8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void assignWithTake for LocationViewerViewVFXEnvironment(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_100539150(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000BF398);
}

void sub_100539150(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  sub_10004A298();
}

uint64_t *sub_100539190(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location.Identifier(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = *((_QWORD *)v10 + 2);
    v14 = *((_QWORD *)v10 + 3);
    v15 = *((_QWORD *)v10 + 4);
    v16 = *((_QWORD *)v10 + 5);
    v17 = *((_QWORD *)v10 + 6);
    v18 = *((_QWORD *)v10 + 7);
    v21 = *((_QWORD *)v10 + 8);
    v22 = v10[72];
    sub_1000D4FF4(*(_QWORD *)v10, v12, v13, v14, v15, v16, v17, v18, v21, v22);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v14;
    *((_QWORD *)v9 + 4) = v15;
    *((_QWORD *)v9 + 5) = v16;
    *((_QWORD *)v9 + 6) = v17;
    *((_QWORD *)v9 + 7) = v18;
    *((_QWORD *)v9 + 8) = v21;
    v9[72] = v22;
  }
  return a1;
}

uint64_t sub_1005392A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  return sub_1000CEE98(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_BYTE *)(v5 + 72));
}

uint64_t sub_100539314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  v6 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 32);
  v15 = *(_QWORD *)(v9 + 40);
  v16 = *(_QWORD *)(v9 + 48);
  v17 = *(_QWORD *)(v9 + 56);
  v18 = *(_QWORD *)(v9 + 64);
  v20 = *(_BYTE *)(v9 + 72);
  sub_1000D4FF4(*(_QWORD *)v9, v11, v12, v13, v14, v15, v16, v17, v18, v20);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 32) = v14;
  *(_QWORD *)(v8 + 40) = v15;
  *(_QWORD *)(v8 + 48) = v16;
  *(_QWORD *)(v8 + 56) = v17;
  *(_QWORD *)(v8 + 64) = v18;
  *(_BYTE *)(v8 + 72) = v20;
  return a1;
}

uint64_t sub_1005393F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v30;

  v6 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 32);
  v15 = *(_QWORD *)(v9 + 40);
  v16 = *(_QWORD *)(v9 + 48);
  v17 = *(_QWORD *)(v9 + 56);
  v18 = *(_QWORD *)(v9 + 64);
  v30 = *(_BYTE *)(v9 + 72);
  sub_1000D4FF4(*(_QWORD *)v9, v11, v12, v13, v14, v15, v16, v17, v18, v30);
  v19 = *(_QWORD *)v8;
  v20 = *(_QWORD *)(v8 + 8);
  v21 = *(_QWORD *)(v8 + 16);
  v22 = *(_QWORD *)(v8 + 24);
  v23 = *(_QWORD *)(v8 + 32);
  v24 = *(_QWORD *)(v8 + 40);
  v25 = *(_QWORD *)(v8 + 48);
  v26 = *(_QWORD *)(v8 + 56);
  v27 = *(_QWORD *)(v8 + 64);
  v28 = *(_BYTE *)(v8 + 72);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 32) = v14;
  *(_QWORD *)(v8 + 40) = v15;
  *(_QWORD *)(v8 + 48) = v16;
  *(_QWORD *)(v8 + 56) = v17;
  *(_QWORD *)(v8 + 64) = v18;
  *(_BYTE *)(v8 + 72) = v30;
  sub_1000CEE98(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  return a1;
}

uint64_t sub_100539500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x49uLL);
  return a1;
}

uint64_t sub_100539564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;

  v6 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_BYTE *)(v9 + 72);
  v12 = *(_QWORD *)v8;
  v13 = *(_QWORD *)(v8 + 8);
  v14 = *(_QWORD *)(v8 + 16);
  v15 = *(_QWORD *)(v8 + 24);
  v16 = *(_QWORD *)(v8 + 32);
  v17 = *(_QWORD *)(v8 + 40);
  v18 = *(_QWORD *)(v8 + 48);
  v19 = *(_QWORD *)(v8 + 56);
  v20 = *(_QWORD *)(v8 + 64);
  v21 = *(_BYTE *)(v8 + 72);
  v22 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v22;
  v23 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v23;
  *(_QWORD *)(v8 + 64) = v10;
  *(_BYTE *)(v8 + 72) = v11;
  sub_1000CEE98(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t sub_10053960C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100539618);
}

void sub_100539618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1000BDD30();
  v7 = type metadata accessor for Location.Identifier(v6);
  if (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(v3, a2, v7);
  }
  else
  {
    sub_10011E6E0(*(unsigned __int8 *)(v3 + *(int *)(a3 + 20) + 72));
    sub_100079F70();
  }
}

uint64_t sub_100539674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100539680);
}

void sub_100539680(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100098AA0();
  sub_10009D2E8();
  if (v7)
  {
    sub_100098D08();
    sub_1000987C4(v8, v9, v10, v11);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 20) + 72) = -a2;
    sub_100079F70();
  }
}

uint64_t sub_1005396D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "I";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100539748(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = type metadata accessor for ContentStatusBanner(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v8))
    {
      v9 = sub_1000BA294(&qword_100BC3620);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *(_BYTE *)v6 = *(_BYTE *)v7;
      v11 = v7 + 1;
      v12 = v7[2];
      if (v12 >= 2)
      {
        v6[1] = *v11;
        v6[2] = v12;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v6 + 1) = *(_OWORD *)v11;
      }
      v13 = *(int *)(v8 + 24);
      v14 = (char *)v6 + v13;
      v15 = (char *)v7 + v13;
      v16 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
      {
        v17 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v16);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

_OWORD *sub_1005398C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v7))
  {
    v8 = sub_1000BA294(&qword_100BC3620);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
    v9 = *(int *)(v7 + 24);
    v10 = &v5[v9];
    v11 = &v6[v9];
    v12 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
    {
      v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_OWORD *sub_1005399E8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  const void *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (uint64_t)a1 + v4;
  v6 = (uint64_t)a2 + v4;
  v7 = type metadata accessor for ContentStatusBanner(0);
  v8 = _s7Weather24LocationCompositionStateOwet_0(v5, 1, v7);
  v9 = _s7Weather24LocationCompositionStateOwet_0(v6, 1, v7);
  if (v8)
  {
    if (!v9)
    {
      *(_BYTE *)v5 = *(_BYTE *)v6;
      *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
      v10 = *(int *)(v7 + 24);
      v11 = (void *)(v5 + v10);
      v12 = (const void *)(v6 + v10);
      v13 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
      {
        v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
      }
      v20 = v5;
      v21 = v7;
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v9)
  {
    sub_1000BF3B4();
LABEL_7:
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v16 = (void *)v5;
    v17 = (const void *)v6;
    goto LABEL_8;
  }
  *(_BYTE *)v5 = *(_BYTE *)v6;
  v18 = (_QWORD *)(v6 + 8);
  if (*(_QWORD *)(v5 + 16) >= 2uLL)
  {
    v19 = *(_QWORD *)(v6 + 16);
    if (v19 >= 2)
    {
      *(_QWORD *)(v5 + 8) = *v18;
      *(_QWORD *)(v5 + 16) = v19;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    sub_1001A27B4(v5 + 8);
  }
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v18;
LABEL_18:
  v23 = *(int *)(v7 + 24);
  v24 = v5 + v23;
  v25 = v6 + v23;
  v26 = type metadata accessor for Date(0);
  v27 = _s7Weather24LocationCompositionStateOwet_0(v24, 1, v26);
  v28 = _s7Weather24LocationCompositionStateOwet_0(v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      v20 = v24;
      v21 = v26;
LABEL_15:
      _s7Weather24LocationCompositionStateOwst_0(v20, 0, 1, v21);
      return a1;
    }
  }
  else
  {
    v29 = *(_QWORD *)(v26 - 8);
    if (!v28)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 40))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v24, v26);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v16 = (void *)v24;
  v17 = (const void *)v25;
LABEL_8:
  memcpy(v16, v17, v15);
  return a1;
}

uint64_t sub_100539C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_1000BA294(&qword_100BC3620);
  return sub_1000C4820(v4, a2, v5);
}

uint64_t sub_100539C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000BA294(&qword_100BC3620);
  sub_100098D08();
  return sub_1000BE6F8(v0, v1, v2, v3);
}

_QWORD *sub_100539CB4(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  int *v41;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v4[5] = a2[5];
    v8 = a3[6];
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Location.Identifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v13[16] = *(_BYTE *)(v14 + 16);
      v13[17] = *(_BYTE *)(v14 + 17);
      v13[18] = *(_BYTE *)(v14 + 18);
      v16 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v17 = &v13[v16];
      v18 = v14 + v16;
      v19 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      v20 = 1;
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain();
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v20);
    v22 = a3[9];
    v40 = a2;
    v41 = a3;
    v23 = (char *)v4 + v22;
    v24 = (uint64_t)a2 + v22;
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    v29 = *(_QWORD *)(v24 + 32);
    v30 = *(_QWORD *)(v24 + 40);
    v32 = *(_QWORD *)(v24 + 48);
    v31 = *(_QWORD *)(v24 + 56);
    v38 = *(_QWORD *)(v24 + 64);
    v39 = *(_BYTE *)(v24 + 72);
    sub_1000D4FF4(*(_QWORD *)v24, v26, v27, v28, v29, v30, v32, v31, v38, v39);
    *(_QWORD *)v23 = v25;
    *((_QWORD *)v23 + 1) = v26;
    *((_QWORD *)v23 + 2) = v27;
    *((_QWORD *)v23 + 3) = v28;
    *((_QWORD *)v23 + 4) = v29;
    *((_QWORD *)v23 + 5) = v30;
    *((_QWORD *)v23 + 6) = v32;
    *((_QWORD *)v23 + 7) = v31;
    *((_QWORD *)v23 + 8) = v38;
    v23[72] = v39;
    v33 = v41[10];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t)v40 + v33;
    v36 = *(_QWORD *)v35;
    LOBYTE(v31) = *(_BYTE *)(v35 + 8);
    sub_10008D47C(*(_QWORD *)v35, v31);
    *(_QWORD *)v34 = v36;
    v34[8] = v31;
  }
  return v4;
}

uint64_t sub_100539EDC(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + a2[8];
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    v7 = &v6[*(int *)(type metadata accessor for DisplayMetrics(0) + 36)];
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  v9 = (char *)a1 + a2[9];
  sub_1000CEE98(*(_QWORD *)v9, *((_QWORD *)v9 + 1), *((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), *((_QWORD *)v9 + 5), *((_QWORD *)v9 + 6), *((_QWORD *)v9 + 7), *((_QWORD *)v9 + 8), v9[72]);
  return sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
}

uint64_t sub_100539FD0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_BYTE *)(v12 + 17) = *(_BYTE *)(v13 + 17);
    *(_BYTE *)(v12 + 18) = *(_BYTE *)(v13 + 18);
    v15 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v16 = v12 + v15;
    v17 = v13 + v15;
    v18 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = 1;
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    swift_retain();
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v19);
  v20 = a3[9];
  v39 = a2;
  v40 = a3;
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *(_QWORD *)(v22 + 8);
  v25 = *(_QWORD *)(v22 + 16);
  v26 = *(_QWORD *)(v22 + 24);
  v27 = *(_QWORD *)(v22 + 32);
  v28 = *(_QWORD *)(v22 + 40);
  v30 = *(_QWORD *)(v22 + 48);
  v29 = *(_QWORD *)(v22 + 56);
  v38 = a1;
  v31 = *(_QWORD *)(v22 + 64);
  v37 = *(_BYTE *)(v22 + 72);
  sub_1000D4FF4(*(_QWORD *)v22, v24, v25, v26, v27, v28, v30, v29, v31, v37);
  *(_QWORD *)v21 = v23;
  *(_QWORD *)(v21 + 8) = v24;
  *(_QWORD *)(v21 + 16) = v25;
  *(_QWORD *)(v21 + 24) = v26;
  *(_QWORD *)(v21 + 32) = v27;
  *(_QWORD *)(v21 + 40) = v28;
  *(_QWORD *)(v21 + 48) = v30;
  *(_QWORD *)(v21 + 56) = v29;
  *(_QWORD *)(v21 + 64) = v31;
  *(_BYTE *)(v21 + 72) = v37;
  v32 = v40[10];
  v33 = v38 + v32;
  v34 = v39 + v32;
  v35 = *(_QWORD *)v34;
  LOBYTE(v29) = *(_BYTE *)(v34 + 8);
  sub_10008D47C(*(_QWORD *)v34, v29);
  *(_QWORD *)v33 = v35;
  *(_BYTE *)(v33 + 8) = v29;
  return v38;
}

_QWORD *sub_10053A1C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v48;
  _QWORD *v49;
  _QWORD *v50;
  int *v51;

  sub_100094D04(a1, a2);
  a1[5] = a2[5];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  if (a1 != a2)
  {
    v10 = a3[8];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100021A14((uint64_t)a1 + v10, &qword_100BC37E0);
    v13 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
      v11[16] = v12[16];
      v11[17] = v12[17];
      v11[18] = v12[18];
      v14 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v15 = &v11[v14];
      v16 = &v12[v14];
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v18 = 1;
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain();
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v18);
  }
  v19 = a3[9];
  v50 = a2;
  v51 = a3;
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *((_QWORD *)v21 + 1);
  v24 = *((_QWORD *)v21 + 2);
  v25 = *((_QWORD *)v21 + 3);
  v26 = *((_QWORD *)v21 + 4);
  v27 = *((_QWORD *)v21 + 5);
  v29 = *((_QWORD *)v21 + 6);
  v28 = *((_QWORD *)v21 + 7);
  v49 = a1;
  v30 = *((_QWORD *)v21 + 8);
  v48 = v21[72];
  sub_1000D4FF4(*(_QWORD *)v21, v23, v24, v25, v26, v27, v29, v28, v30, v48);
  v31 = *(_QWORD *)v20;
  v32 = *((_QWORD *)v20 + 1);
  v33 = *((_QWORD *)v20 + 2);
  v34 = *((_QWORD *)v20 + 3);
  v35 = *((_QWORD *)v20 + 4);
  v36 = *((_QWORD *)v20 + 5);
  v37 = *((_QWORD *)v20 + 6);
  v38 = *((_QWORD *)v20 + 7);
  v39 = *((_QWORD *)v20 + 8);
  v40 = v20[72];
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v23;
  *((_QWORD *)v20 + 2) = v24;
  *((_QWORD *)v20 + 3) = v25;
  *((_QWORD *)v20 + 4) = v26;
  *((_QWORD *)v20 + 5) = v27;
  *((_QWORD *)v20 + 6) = v29;
  *((_QWORD *)v20 + 7) = v28;
  *((_QWORD *)v20 + 8) = v30;
  v20[72] = v48;
  sub_1000CEE98(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
  v41 = v51[10];
  v42 = (char *)v49 + v41;
  v43 = (char *)v50 + v41;
  v44 = *(_QWORD *)v43;
  LOBYTE(v28) = v43[8];
  sub_10008D47C(*(_QWORD *)v43, v28);
  v45 = *(_QWORD *)v42;
  v46 = v42[8];
  *(_QWORD *)v42 = v44;
  v42[8] = v28;
  sub_1000B15F8(v45, v46);
  return v49;
}

uint64_t sub_10053A3F8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v14) == 1)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v13[16] = v14[16];
    v13[17] = v14[17];
    v13[18] = v14[18];
    v16 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v17 = &v13[v16];
    v18 = &v14[v16];
    v19 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  memcpy((void *)(a1 + a3[9]), (const void *)(a2 + a3[9]), 0x49uLL);
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_10053A558(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  if (a1 != a2)
  {
    v11 = a3[8];
    v12 = (char *)(a1 + v11);
    v13 = (char *)(a2 + v11);
    sub_100021A14(a1 + v11, &qword_100BC37E0);
    v14 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v13) == 1)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v12[16] = v13[16];
      v12[17] = v13[17];
      v12[18] = v13[18];
      v15 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v16 = &v12[v15];
      v17 = &v13[v15];
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(v21 + 64);
  v23 = *(_BYTE *)(v21 + 72);
  v24 = *(_QWORD *)v20;
  v25 = *(_QWORD *)(v20 + 8);
  v26 = *(_QWORD *)(v20 + 16);
  v27 = *(_QWORD *)(v20 + 24);
  v28 = *(_QWORD *)(v20 + 32);
  v29 = *(_QWORD *)(v20 + 40);
  v30 = *(_QWORD *)(v20 + 48);
  v31 = *(_QWORD *)(v20 + 56);
  v32 = *(_QWORD *)(v20 + 64);
  v33 = *(_BYTE *)(v20 + 72);
  v34 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v34;
  v35 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 48) = v35;
  *(_QWORD *)(v20 + 64) = v22;
  *(_BYTE *)(v20 + 72) = v23;
  sub_1000CEE98(v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  v36 = a3[10];
  v37 = a1 + v36;
  v38 = (uint64_t *)(a2 + v36);
  v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  v40 = *(_QWORD *)v37;
  v41 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v37 = v39;
  *(_BYTE *)(v37 + 8) = (_BYTE)v38;
  sub_1000B15F8(v40, v41);
  return a1;
}

uint64_t sub_10053A730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053A73C);
}

void sub_10053A73C(uint64_t a1, int a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == 0x7FFFFFFF)
  {
    sub_10003BCA4(*(_QWORD *)(a1 + 24));
    sub_100079F70();
  }
  else
  {
    sub_100098AA0();
    sub_100088FF0();
    if (v4)
    {
      sub_10011DFB0();
    }
    else
    {
      sub_1000BA294(&qword_100BC3808);
      v5 = *(int *)(a3 + 32);
    }
    v6 = sub_10009E5E4(v5);
    sub_1000B250C(v6, v7, v8);
  }
}

uint64_t sub_10053A7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10053A7B4);
}

void sub_10053A7B4()
{
  int v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10009E50C();
  if (v2 == 0x7FFFFFFF)
  {
    *(_QWORD *)(v1 + 24) = (v0 - 1);
    sub_100079F70();
  }
  else
  {
    sub_100098AA0();
    sub_10009D2E8();
    if (v3)
      sub_1000B32A4();
    else
      sub_1000BA294(&qword_100BC3808);
    sub_100098D08();
    sub_1000987C4(v4, v5, v6, v7);
  }
}

void sub_10053A824(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "(";
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = type metadata accessor for Location.Identifier(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100158C7C(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = "I";
      v6[6] = "\t";
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_10053A8EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v10[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_100158C7C(319, &qword_100BEE038, type metadata accessor for ContentStatusBannerPresentationMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_100158C7C(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = "I";
          v10[7] = &unk_1009AB690;
          swift_initStructMetadata(a1, 0, 8, v10, a1 + 48);
        }
      }
    }
  }
}

uint64_t *sub_10053AA04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  _OWORD *v50;
  _BYTE *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  void *v58;
  const void *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  size_t __n;
  size_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  char *v108;
  uint64_t v110;
  char *v111;

  v104 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(v104 - 8);
  v4 = *(_DWORD *)(v3 + 80);
  v5 = v4;
  v100 = v3;
  v6 = *(_QWORD *)(v3 + 64);
  v105 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v105 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v102 = v6;
  v10 = (v6 + v8 + ((v5 + 16) & ~v5)) & ~(unint64_t)v8;
  v103 = v7;
  v11 = *(_QWORD *)(v7 + 64);
  v97 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v97 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13;
  v15 = v14 | 7;
  v16 = ((v14 | 7) + v11 + v10) & ~(v14 | 7);
  v98 = v13 + 16;
  v99 = *(_DWORD *)(v12 + 84);
  v95 = (v14 + 16) & ~(v14 | 7);
  v96 = v13 + 24;
  v17 = (v14 + 24) & ~v14;
  v18 = *(_QWORD *)(v12 + 64);
  if (!v99)
    ++v18;
  v93 = v18;
  v94 = (v13 + 24) & ~(unint64_t)v13;
  v91 = *(_QWORD *)(v97 - 8);
  __n = v17 + v18;
  v19 = v17 + v18 + ((v13 + 16) & ~(v13 | 7));
  if (v19 <= 8)
    v20 = 8;
  else
    v20 = v19;
  v21 = type metadata accessor for DynamicTypeSize(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 80);
  v101 = v20;
  v24 = (v20 + (v23 | 7) + 1 + v16) & ~(v23 | 7);
  v25 = ((v23 + 19) & ~v23) + *(_QWORD *)(v22 + 64);
  if (v25 <= 8)
    v25 = 8;
  v107 = v25;
  v26 = v25 + 1;
  v27 = ((v24 + v25 + 1 + 87) & 0xFFFFFFFFFFFFFFF8) + 33;
  v28 = v8 | (unint64_t)v4 | v13 | v23;
  if (v28 > 7 || ((v8 | v4 | v13 | *(_DWORD *)(v22 + 80)) & 0x100000) != 0 || v27 > 0x18)
  {
    v31 = *a2;
    *a1 = *a2;
    v32 = v31 + ((v28 & 0xF8 ^ 0x1F8) & (v28 + 16));
    swift_retain();
    return (uint64_t *)v32;
  }
  v33 = v23 | 7;
  v89 = *(_DWORD *)(v22 + 80);
  v90 = v20 + (v23 | 7) + 1;
  v87 = *(_QWORD *)(v21 - 8);
  v88 = v21;
  *a1 = *a2;
  v34 = ~v15;
  v35 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = ((unint64_t)v35 + v5 + 8) & ~v5;
  v38 = ((unint64_t)v36 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v37, v38, v104);
  v39 = (v37 + v102 + v9) & ~v9;
  v40 = (v38 + v102 + v9) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v39, v40, v105);
  v41 = (_OWORD *)((v39 + v11 + v15) & v34);
  v42 = (_OWORD *)((v40 + v11 + v15) & v34);
  v43 = *((unsigned __int8 *)v42 + v101);
  if (v43 >= 2)
  {
    if (v101 <= 3)
      v44 = v101;
    else
      v44 = 4;
    __asm { BR              X12 }
  }
  v45 = ~v33;
  if (v43 == 1)
  {
    v46 = ~v14;
    *v41 = *v42;
    v47 = (_BYTE *)(((unint64_t)v41 + v98) & v34);
    v48 = (_BYTE *)(((unint64_t)v42 + v98) & v34);
    if (v99 > 0x7FFFFFFE)
    {
      if (_s7Weather24LocationCompositionStateOwet_0((unint64_t)&v48[v96] & v46, v99, v97) <= 1)
      {
LABEL_27:
        v50 = v48 + 8;
        *v47 = *v48;
        v51 = v47 + 8;
        v86 = v26;
        v110 = v45;
        if (*(_QWORD *)((((unint64_t)v42 + v98) & v34) + 0x10) < 0xFFFFFFFFuLL)
        {
          *(_OWORD *)v51 = *v50;
        }
        else
        {
          *(_QWORD *)v51 = *(_QWORD *)v50;
          *((_QWORD *)v51 + 1) = *(_QWORD *)((((unint64_t)v42 + v98) & v34) + 0x10);
          swift_bridgeObjectRetain();
        }
        v58 = (void *)((v96 + (((unint64_t)v41 + v98) & v34)) & v46);
        v59 = (const void *)((unint64_t)&v48[v96] & v46);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v97))
        {
          v57 = v93;
          memcpy(v58, v59, v93);
          v26 = v86;
          v54 = v89;
          v53 = v90;
          v56 = v94;
          v55 = v95;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v91 + 16))(v58, v59, v97);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v58, 0, 1, v97);
          v26 = v86;
          v54 = v89;
          v53 = v90;
          v56 = v94;
          v55 = v95;
          v57 = v93;
        }
        v45 = v110;
        goto LABEL_37;
      }
    }
    else
    {
      v49 = *(_QWORD *)((((unint64_t)v42 + v98) & v34) + 0x10);
      if (v49 >= 0xFFFFFFFF)
        LODWORD(v49) = -1;
      if ((v49 + 1) < 3)
        goto LABEL_27;
    }
    memcpy(v47, v48, __n);
    v54 = v89;
    v53 = v90;
    v56 = v94;
    v55 = v95;
    v57 = v93;
LABEL_37:
    v60 = v55 + v56 + v57;
    if (v60 <= 8)
      v60 = 8;
    *((_BYTE *)v41 + v60) = 1;
    goto LABEL_40;
  }
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_BYTE *)v41 + v101) = 0;
  v52 = swift_retain();
  v54 = v89;
  v53 = v90;
LABEL_40:
  v61 = (_QWORD *)(((unint64_t)v41 + v53) & v45);
  v62 = (_QWORD *)(((unint64_t)v42 + v53) & v45);
  v63 = *((unsigned __int8 *)v62 + v107);
  if (v63 >= 2)
  {
    if (v107 <= 3)
      v64 = v107;
    else
      v64 = 4;
    __asm { BR              X12 }
  }
  *v61 = *v62;
  if (v63 == 1)
  {
    v65 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
    v66 = ((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v65 = *(_QWORD *)v66;
    *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
    *(_BYTE *)(v65 + 9) = *(_BYTE *)(v66 + 9);
    *(_BYTE *)(v65 + 10) = *(_BYTE *)(v66 + 10);
    (*(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v87 + 16))((v54 + 11 + v65) & ~v54, (v54 + 11 + v66) & ~v54, v88, v52);
    v67 = 1;
  }
  else
  {
    swift_retain();
    v67 = 0;
  }
  *((_BYTE *)v61 + v107) = v67;
  v108 = (char *)v61 + v26;
  v111 = (char *)v62 + v26;
  v68 = ((unint64_t)v62 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v69 = *(_QWORD *)v68;
  v70 = *(_QWORD *)(v68 + 8);
  v71 = ((unint64_t)v61 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v72 = *(_QWORD *)(v68 + 16);
  v73 = *(_QWORD *)(v68 + 24);
  v74 = *(_QWORD *)(v68 + 32);
  v75 = *(_QWORD *)(v68 + 40);
  v76 = *(_QWORD *)(v68 + 48);
  v77 = *(_QWORD *)(v68 + 56);
  v78 = *(_QWORD *)(v68 + 64);
  v106 = *(_BYTE *)(v68 + 72);
  sub_1000D4FF4(*(_QWORD *)v68, v70, v72, v73, v74, v75, v76, v77, v78, v106);
  *(_QWORD *)v71 = v69;
  *(_QWORD *)(v71 + 8) = v70;
  *(_QWORD *)(v71 + 16) = v72;
  *(_QWORD *)(v71 + 24) = v73;
  *(_QWORD *)(v71 + 32) = v74;
  *(_QWORD *)(v71 + 40) = v75;
  *(_QWORD *)(v71 + 48) = v76;
  *(_QWORD *)(v71 + 56) = v77;
  *(_QWORD *)(v71 + 64) = v78;
  *(_BYTE *)(v71 + 72) = v106;
  v79 = (unint64_t)(v108 + 87) & 0xFFFFFFFFFFFFFFF8;
  v80 = (unint64_t)(v111 + 87) & 0xFFFFFFFFFFFFFFF8;
  v81 = *(_QWORD *)v80;
  v82 = *(_QWORD *)(v80 + 8);
  v83 = *(_QWORD *)(v80 + 16);
  v84 = *(_QWORD *)(v80 + 24);
  LOBYTE(v74) = *(_BYTE *)(v80 + 32);
  sub_1000D55E4(*(_QWORD *)v80, v82, v83, v84, v74);
  *(_QWORD *)v79 = v81;
  *(_QWORD *)(v79 + 8) = v82;
  *(_QWORD *)(v79 + 16) = v83;
  *(_QWORD *)(v79 + 24) = v84;
  *(_BYTE *)(v79 + 32) = v74;
  return a1;
}

uint64_t sub_10053B048(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = (((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v6);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v6 + v7 + (v10 | 7)) & ~(v10 | 7);
  v12 = *(unsigned int *)(v9 + 84);
  v13 = v10 + 24;
  v14 = *(_QWORD *)(v9 + 64);
  if (!(_DWORD)v12)
    ++v14;
  if (v14 + ((v10 + 24) & ~v10) + ((v10 + 16) & ~(v10 | 7uLL)) <= 8)
    v15 = 8;
  else
    v15 = v14 + ((v10 + 24) & ~v10) + ((v10 + 16) & ~(v10 | 7));
  v16 = *(unsigned __int8 *)(v11 + v15);
  if (v16 >= 2)
  {
    if (v15 <= 3)
      v17 = v15;
    else
      v17 = 4;
    __asm { BR              X15 }
  }
  if (v16 != 1)
  {
    swift_release();
    goto LABEL_23;
  }
  v18 = ~v10;
  v19 = (v10 + 16 + v11) & ~(v10 | 7);
  if (v12 > 0x7FFFFFFE)
  {
    if (_s7Weather24LocationCompositionStateOwet_0((v13 + v19) & v18, v12, v8) > 1)
      goto LABEL_23;
    goto LABEL_19;
  }
  v20 = *(_QWORD *)(((v10 + 16 + v11) & ~(v10 | 7)) + 0x10);
  if (v20 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  if ((v20 + 1) < 3)
  {
LABEL_19:
    if (*(_QWORD *)(v19 + 16) >= 0xFFFFFFFFuLL)
      swift_bridgeObjectRelease();
    v21 = (v13 + v19) & v18;
    if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v21, v8);
  }
LABEL_23:
  v22 = type metadata accessor for DynamicTypeSize(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = ((v11 | 1) + v15 + (v24 | 7)) & ~(v24 | 7);
  if (((v24 + 19) & (unint64_t)~v24) + *(_QWORD *)(v23 + 64) <= 8)
    v26 = 8;
  else
    v26 = ((v24 + 19) & ~v24) + *(_QWORD *)(v23 + 64);
  v27 = *(unsigned __int8 *)(v25 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X14 }
  }
  if (v27 == 1)
    (*(void (**)(unint64_t, uint64_t))(v23 + 8))((v24 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & ~v24, v22);
  else
    swift_release();
  v29 = (v25 | 1) + v26;
  v30 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000CEE98(*(_QWORD *)v30, *(_QWORD *)(v30 + 8), *(_QWORD *)(v30 + 16), *(_QWORD *)(v30 + 24), *(_QWORD *)(v30 + 32), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56), *(_QWORD *)(v30 + 64), *(_BYTE *)(v30 + 72));
  return sub_1000D31C4(*(_QWORD *)((v29 + 87) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v29 + 87) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(((v29 + 87) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(((v29 + 87) & 0xFFFFFFFFFFFFFFF8) + 24), *(_BYTE *)(((v29 + 87) & 0xFFFFFFFFFFFFFFF8) + 32));
}

_QWORD *sub_10053B380(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  char v80;
  size_t __n;
  size_t __na;
  uint64_t v83;
  char *v84;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v10 + v12;
  v14 = (v13 + v8) & ~v12;
  v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 | 7) + v16;
  v21 = (_QWORD *)((v20 + v14) & ~(v19 | 7));
  v22 = (_QWORD *)((v20 + v15) & ~(v19 | 7));
  v23 = v19 + 16;
  v25 = *(unsigned int *)(v18 + 84);
  v26 = v19 + 24;
  v27 = (v19 + 24) & ~v19;
  if ((_DWORD)v25)
    v28 = *(_QWORD *)(v18 + 64);
  else
    v28 = *(_QWORD *)(v18 + 64) + 1;
  v29 = v27 + v28;
  v24 = (v19 + 16) & ~(v19 | 7);
  if ((unint64_t)(v27 + v28 + v24) <= 8)
    v30 = 8;
  else
    v30 = v27 + v28 + v24;
  v31 = *((unsigned __int8 *)v22 + v30);
  if (v31 >= 2)
  {
    if (v30 <= 3)
      v32 = v30;
    else
      v32 = 4;
    __asm { BR              X15 }
  }
  if (v31 != 1)
  {
    *v21 = *v22;
    *((_BYTE *)v21 + v30) = 0;
    swift_retain();
    goto LABEL_32;
  }
  __n = v28;
  v83 = (v19 + 24) & ~v19;
  v79 = (v19 + 16) & ~(v19 | 7);
  v33 = ~(v19 | 7);
  v34 = ~v19;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v35 = (_QWORD *)(((unint64_t)v21 + v23) & v33);
  v36 = (_BYTE *)(((unint64_t)v22 + v23) & v33);
  if (v25 <= 0x7FFFFFFE)
  {
    v37 = *(_QWORD *)((((unint64_t)v22 + v23) & v33) + 0x10);
    if (v37 >= 0xFFFFFFFF)
      LODWORD(v37) = -1;
    if ((v37 + 1) < 3)
    {
      v38 = v36 + 8;
      goto LABEL_21;
    }
LABEL_23:
    memcpy(v35, v36, v29);
    v41 = v79;
LABEL_28:
    v44 = __n;
    v45 = v83;
    goto LABEL_29;
  }
  v78 = ~v19;
  if (_s7Weather24LocationCompositionStateOwet_0((unint64_t)&v36[v26] & v34, v25, v17) > 1)
    goto LABEL_23;
  v38 = v36 + 8;
  v34 = v78;
LABEL_21:
  *(_BYTE *)v35 = *v36;
  v39 = v35 + 1;
  if (*((_QWORD *)v38 + 1) < 0xFFFFFFFFuLL)
  {
    *v39 = *(_OWORD *)v38;
  }
  else
  {
    *(_QWORD *)v39 = *(_QWORD *)v38;
    v35[2] = *((_QWORD *)v38 + 1);
    v40 = v34;
    swift_bridgeObjectRetain();
    v34 = v40;
  }
  v41 = v79;
  v42 = (void *)(((unint64_t)v35 + v26) & v34);
  v43 = (const void *)((unint64_t)&v36[v26] & v34);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v17))
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v42, v43, v17);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v17);
    goto LABEL_28;
  }
  v44 = __n;
  memcpy(v42, v43, __n);
  v45 = v83;
LABEL_29:
  v46 = v41 + v45 + v44;
  if (v46 <= 8)
    v46 = 8;
  *((_BYTE *)v21 + v46) = 1;
LABEL_32:
  v47 = type metadata accessor for DynamicTypeSize(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = v30 + (v49 | 7) + 1;
  v51 = (_QWORD *)(((unint64_t)v21 + v50) & ~(v49 | 7));
  v52 = (_QWORD *)(((unint64_t)v22 + v50) & ~(v49 | 7));
  if (((v49 + 19) & (unint64_t)~v49) + *(_QWORD *)(v48 + 64) <= 8)
    v53 = 8;
  else
    v53 = ((v49 + 19) & ~v49) + *(_QWORD *)(v48 + 64);
  v54 = *((unsigned __int8 *)v52 + v53);
  if (v54 >= 2)
  {
    if (v53 <= 3)
      v55 = v53;
    else
      v55 = 4;
    __asm { BR              X14 }
  }
  *v51 = *v52;
  if (v54 == 1)
  {
    v56 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    v57 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
    *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
    *(_BYTE *)(v56 + 10) = *(_BYTE *)(v57 + 10);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 16))((v49 + 11 + v56) & ~v49, (v49 + 11 + v57) & ~v49, v47);
    v58 = 1;
  }
  else
  {
    swift_retain();
    v58 = 0;
  }
  *((_BYTE *)v51 + v53) = v58;
  v59 = v53 + 1;
  v84 = (char *)v52 + v53 + 1;
  v60 = (unint64_t)(v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  v61 = *(_QWORD *)v60;
  v62 = *(_QWORD *)(v60 + 8);
  __na = (size_t)v51 + v59;
  v63 = ((unint64_t)v51 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v64 = *(_QWORD *)(v60 + 16);
  v65 = *(_QWORD *)(v60 + 24);
  v66 = *(_QWORD *)(v60 + 32);
  v67 = *(_QWORD *)(v60 + 40);
  v68 = *(_QWORD *)(v60 + 48);
  v69 = *(_QWORD *)(v60 + 56);
  v70 = *(_QWORD *)(v60 + 64);
  v80 = *(_BYTE *)(v60 + 72);
  sub_1000D4FF4(*(_QWORD *)v60, v62, v64, v65, v66, v67, v68, v69, v70, v80);
  *(_QWORD *)v63 = v61;
  *(_QWORD *)(v63 + 8) = v62;
  *(_QWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 24) = v65;
  *(_QWORD *)(v63 + 32) = v66;
  *(_QWORD *)(v63 + 40) = v67;
  *(_QWORD *)(v63 + 48) = v68;
  *(_QWORD *)(v63 + 56) = v69;
  *(_QWORD *)(v63 + 64) = v70;
  *(_BYTE *)(v63 + 72) = v80;
  v71 = (__na + 87) & 0xFFFFFFFFFFFFFFF8;
  v72 = (unint64_t)(v84 + 87) & 0xFFFFFFFFFFFFFFF8;
  v73 = *(_QWORD *)v72;
  v74 = *(_QWORD *)(v72 + 8);
  v75 = *(_QWORD *)(v72 + 16);
  v76 = *(_QWORD *)(v72 + 24);
  LOBYTE(v66) = *(_BYTE *)(v72 + 32);
  sub_1000D55E4(*(_QWORD *)v72, v74, v75, v76, v66);
  *(_QWORD *)v71 = v73;
  *(_QWORD *)(v71 + 8) = v74;
  *(_QWORD *)(v71 + 16) = v75;
  *(_QWORD *)(v71 + 24) = v76;
  *(_BYTE *)(v71 + 32) = v66;
  return a1;
}

_QWORD *sub_10053B8A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  void *v47;
  const void *v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  size_t __n;
  size_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 | 7) + v17;
  v22 = ~(v20 | 7);
  v23 = (_QWORD *)((v21 + v15) & v22);
  v24 = (_QWORD *)((v21 + v16) & v22);
  v25 = (v20 + 24) & ~v20;
  v113 = a1;
  if (v23 == v24)
  {
    LODWORD(v28) = *(_DWORD *)(v19 + 84);
    v34 = *(_QWORD *)(v19 + 64);
    v35 = (v20 + 16) & v22;
    goto LABEL_52;
  }
  v26 = v20 + 16;
  v27 = (v20 + 16) & v22;
  v28 = *(unsigned int *)(v19 + 84);
  if ((_DWORD)v28)
    v29 = v28 - 1;
  else
    v29 = 0;
  if ((_DWORD)v28)
    v30 = *(_QWORD *)(v19 + 64);
  else
    v30 = *(_QWORD *)(v19 + 64) + 1;
  if ((unint64_t)(v30 + v25 + v27) <= 8)
    v31 = 8;
  else
    v31 = v30 + v25 + v27;
  v32 = *((unsigned __int8 *)v23 + v31);
  v105 = (v20 + 16) & v22;
  v106 = (v20 + 24) & ~v20;
  v104 = *(_QWORD *)(v19 + 64);
  if (v32 >= 2)
  {
    if (v31 <= 3)
      v33 = v31;
    else
      v33 = 4;
    __asm { BR              X13 }
  }
  v107 = ~v20;
  v109 = v20 + 24;
  v111 = v18;
  __n = v30 + v25;
  v103 = v30;
  if (v32 != 1)
  {
    v37 = v29;
    swift_release();
    goto LABEL_29;
  }
  v36 = ((unint64_t)v23 + v26) & v22;
  v37 = v29;
  if (v29 > 0x7FFFFFFD)
  {
    if (_s7Weather24LocationCompositionStateOwet_0((v20 + 24 + v36) & v107, v28, v18) > 1)
      goto LABEL_29;
    goto LABEL_25;
  }
  v38 = *(_QWORD *)((((unint64_t)v23 + v26) & v22) + 0x10);
  if (v38 >= 0xFFFFFFFF)
    LODWORD(v38) = -1;
  if ((v38 + 1) < 3)
  {
LABEL_25:
    if (*(_QWORD *)((((unint64_t)v23 + v26) & v22) + 0x10) >= 0xFFFFFFFFuLL)
      swift_bridgeObjectRelease();
    if (!_s7Weather24LocationCompositionStateOwet_0((v109 + v36) & v107, 1, v111))
      (*(void (**)(unint64_t, uint64_t))(v19 + 8))((v109 + v36) & v107, v111);
  }
LABEL_29:
  v39 = *((unsigned __int8 *)v24 + v31);
  if (v39 >= 2)
  {
    if (v31 <= 3)
      v40 = v31;
    else
      v40 = 4;
    __asm { BR              X12 }
  }
  if (v39 != 1)
  {
    *v23 = *v24;
    *((_BYTE *)v23 + v31) = 0;
    swift_retain();
    v35 = v105;
    v25 = v106;
    v34 = v104;
    goto LABEL_52;
  }
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v41 = (_QWORD *)(((unint64_t)v23 + v26) & v22);
  v42 = (_QWORD *)(((unint64_t)v24 + v26) & v22);
  if (v37 > 0x7FFFFFFD)
  {
    v44 = v109;
    if (_s7Weather24LocationCompositionStateOwet_0(((unint64_t)v42 + v109) & v107, v28, v111) > 1)
    {
LABEL_39:
      memcpy(v41, v42, __n);
LABEL_48:
      v35 = v105;
      v25 = v106;
      v49 = v103;
      v34 = v104;
      goto LABEL_49;
    }
  }
  else
  {
    v43 = *(_QWORD *)((((unint64_t)v24 + v26) & v22) + 0x10);
    if (v43 >= 0xFFFFFFFF)
      LODWORD(v43) = -1;
    v44 = v109;
    if ((v43 + 1) >= 3)
      goto LABEL_39;
  }
  v45 = v42 + 1;
  *(_BYTE *)v41 = *(_BYTE *)v42;
  v46 = v41 + 1;
  if (v42[2] < 0xFFFFFFFFuLL)
  {
    *v46 = *v45;
  }
  else
  {
    *(_QWORD *)v46 = *(_QWORD *)v45;
    v41[2] = v42[2];
    swift_bridgeObjectRetain();
  }
  v47 = (void *)(((unint64_t)v41 + v44) & v107);
  v48 = (const void *)(((unint64_t)v42 + v44) & v107);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v111))
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v47, v48, v111);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v111);
    goto LABEL_48;
  }
  v49 = v103;
  memcpy(v47, v48, v103);
  v35 = v105;
  v25 = v106;
  v34 = v104;
LABEL_49:
  v50 = v35 + v25 + v49;
  if (v50 <= 8)
    v50 = 8;
  *((_BYTE *)v23 + v50) = 1;
LABEL_52:
  v51 = v35 + v25 + v34;
  if (!(_DWORD)v28)
    ++v51;
  if (v51 <= 8)
    v52 = 8;
  else
    v52 = v51;
  v53 = type metadata accessor for DynamicTypeSize(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = v52 + (v55 | 7) + 1;
  v57 = (_QWORD *)(((unint64_t)v23 + v56) & ~(v55 | 7));
  v58 = (_QWORD *)(((unint64_t)v24 + v56) & ~(v55 | 7));
  if (v57 == v58)
  {
    if (*(_QWORD *)(v54 + 64) + ((v55 + 19) & (unint64_t)~v55) <= 8)
      v60 = 8;
    else
      v60 = *(_QWORD *)(v54 + 64) + ((v55 + 19) & ~v55);
  }
  else
  {
    v59 = v53;
    if (*(_QWORD *)(v54 + 64) + ((v55 + 19) & (unint64_t)~v55) <= 8)
      v60 = 8;
    else
      v60 = *(_QWORD *)(v54 + 64) + ((v55 + 19) & ~v55);
    v61 = *((unsigned __int8 *)v57 + v60);
    if (v61 >= 2)
    {
      if (v60 <= 3)
        v62 = v60;
      else
        v62 = 4;
      __asm { BR              X12 }
    }
    v63 = ~v55;
    if (v61 == 1)
      (*(void (**)(unint64_t, uint64_t))(v54 + 8))((v55 + (((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & v63, v53);
    else
      v64 = swift_release();
    v65 = *((unsigned __int8 *)v58 + v60);
    if (v65 >= 2)
    {
      if (v60 <= 3)
        v66 = v60;
      else
        v66 = 4;
      __asm { BR              X12 }
    }
    *v57 = *v58;
    if (v65 == 1)
    {
      v67 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
      v68 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v67 = *(_QWORD *)v68;
      *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
      *(_BYTE *)(v67 + 9) = *(_BYTE *)(v68 + 9);
      *(_BYTE *)(v67 + 10) = *(_BYTE *)(v68 + 10);
      (*(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v54 + 16))((v55 + 11 + v67) & v63, (v55 + 11 + v68) & v63, v59, v64);
      *((_BYTE *)v57 + v60) = 1;
    }
    else
    {
      *((_BYTE *)v57 + v60) = 0;
      swift_retain();
    }
  }
  v112 = (char *)v58 + v60 + 1;
  v69 = (unint64_t)(v112 + 7) & 0xFFFFFFFFFFFFFFF8;
  v70 = *(_QWORD *)v69;
  v71 = *(_QWORD *)(v69 + 8);
  v110 = (char *)v57 + v60 + 1;
  v72 = (unint64_t)(v110 + 7) & 0xFFFFFFFFFFFFFFF8;
  v73 = *(_QWORD *)(v69 + 16);
  v74 = *(_QWORD *)(v69 + 24);
  v75 = *(_QWORD *)(v69 + 32);
  v76 = *(_QWORD *)(v69 + 40);
  v77 = *(_QWORD *)(v69 + 48);
  v78 = *(_QWORD *)(v69 + 56);
  v79 = *(_QWORD *)(v69 + 64);
  v108 = *(_BYTE *)(v69 + 72);
  sub_1000D4FF4(*(_QWORD *)v69, v71, v73, v74, v75, v76, v77, v78, v79, v108);
  v80 = *(_QWORD *)v72;
  v81 = *(_QWORD *)(v72 + 8);
  v82 = *(_QWORD *)(v72 + 16);
  v83 = *(_QWORD *)(v72 + 24);
  v84 = *(_QWORD *)(v72 + 32);
  v85 = *(_QWORD *)(v72 + 40);
  v86 = *(_QWORD *)(v72 + 48);
  v87 = *(_QWORD *)(v72 + 56);
  v88 = *(_QWORD *)(v72 + 64);
  v89 = *(_BYTE *)(v72 + 72);
  *(_QWORD *)v72 = v70;
  *(_QWORD *)(v72 + 8) = v71;
  *(_QWORD *)(v72 + 16) = v73;
  *(_QWORD *)(v72 + 24) = v74;
  *(_QWORD *)(v72 + 32) = v75;
  *(_QWORD *)(v72 + 40) = v76;
  *(_QWORD *)(v72 + 48) = v77;
  *(_QWORD *)(v72 + 56) = v78;
  *(_QWORD *)(v72 + 64) = v79;
  *(_BYTE *)(v72 + 72) = v108;
  sub_1000CEE98(v80, v81, v82, v83, v84, v85, v86, v87, v88, v89);
  v90 = (unint64_t)(v110 + 87) & 0xFFFFFFFFFFFFFFF8;
  v91 = (unint64_t)(v112 + 87) & 0xFFFFFFFFFFFFFFF8;
  v92 = *(_QWORD *)v91;
  v93 = *(_QWORD *)(v91 + 8);
  v94 = *(_QWORD *)(v91 + 16);
  v95 = *(_QWORD *)(v91 + 24);
  LOBYTE(v75) = *(_BYTE *)(v91 + 32);
  sub_1000D55E4(*(_QWORD *)v91, v93, v94, v95, v75);
  v96 = *(_QWORD *)v90;
  v97 = *(_QWORD *)(v90 + 8);
  v98 = *(_QWORD *)(v90 + 16);
  v99 = *(_QWORD *)(v90 + 24);
  v100 = *(_BYTE *)(v90 + 32);
  *(_QWORD *)v90 = v92;
  *(_QWORD *)(v90 + 8) = v93;
  *(_QWORD *)(v90 + 16) = v94;
  *(_QWORD *)(v90 + 24) = v95;
  *(_BYTE *)(v90 + 32) = v75;
  sub_1000D31C4(v96, v97, v98, v99, v100);
  return v113;
}

_QWORD *sub_10053C064(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  const void *v41;
  void *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  __int128 v66;
  uint64_t v68;
  uint64_t v69;
  size_t __n;
  _QWORD *v71;

  v4 = a1;
  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 | 7) + v17;
  v22 = (_QWORD *)((v21 + v15) & ~(v20 | 7));
  v23 = (_QWORD *)((v21 + v16) & ~(v20 | 7));
  v24 = v20 + 16;
  v25 = (v20 + 16) & ~(v20 | 7);
  v26 = *(unsigned int *)(v19 + 84);
  v27 = v20 + 24;
  v28 = (v20 + 24) & ~v20;
  if ((_DWORD)v26)
    v29 = *(_QWORD *)(v19 + 64);
  else
    v29 = *(_QWORD *)(v19 + 64) + 1;
  v30 = v28 + v29;
  if ((unint64_t)(v28 + v29 + v25) <= 8)
    v31 = 8;
  else
    v31 = v28 + v29 + v25;
  v32 = *((unsigned __int8 *)v23 + v31);
  if (v32 >= 2)
  {
    if (v31 <= 3)
      v33 = v31;
    else
      v33 = 4;
    __asm { BR              X15 }
  }
  if (v32 != 1)
  {
    v39 = 0;
    *v22 = *v23;
    v40 = v31;
    goto LABEL_30;
  }
  __n = v29;
  v71 = v4;
  v34 = ~(v20 | 7);
  v35 = ~v20;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v36 = (_BYTE *)(((unint64_t)v22 + v24) & v34);
  v37 = (_BYTE *)(((unint64_t)v23 + v24) & v34);
  if (v26 > 0x7FFFFFFE)
  {
    v68 = (v20 + 24) & ~v20;
    v69 = (v20 + 16) & ~(v20 | 7);
    if (_s7Weather24LocationCompositionStateOwet_0((unint64_t)&v37[v27] & v35, v26, v18) > 1)
    {
      memcpy(v36, v37, v30);
LABEL_25:
      v4 = v71;
      v45 = v68;
      v44 = v69;
      goto LABEL_26;
    }
  }
  else
  {
    v38 = *(_QWORD *)((((unint64_t)v23 + v24) & v34) + 0x10);
    if (v38 >= 0xFFFFFFFF)
      LODWORD(v38) = -1;
    if ((v38 + 1) >= 3)
    {
      v46 = v28;
      v47 = v25;
      memcpy(v36, v37, v30);
      v45 = v46;
      v44 = v47;
      v4 = v71;
LABEL_26:
      v43 = __n;
      goto LABEL_27;
    }
    v68 = v28;
    v69 = v25;
  }
  *v36 = *v37;
  *(_OWORD *)(v36 + 8) = *(_OWORD *)(v37 + 8);
  v41 = (const void *)((unint64_t)&v37[v27] & v35);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v18))
  {
    (*(void (**)(unint64_t, const void *, uint64_t))(v19 + 32))((unint64_t)&v36[v27] & v35, v41, v18);
    _s7Weather24LocationCompositionStateOwst_0((unint64_t)&v36[v27] & v35, 0, 1, v18);
    goto LABEL_25;
  }
  v42 = (void *)((unint64_t)&v36[v27] & v35);
  v43 = __n;
  memcpy(v42, v41, __n);
  v4 = v71;
  v45 = v68;
  v44 = v69;
LABEL_27:
  v48 = v44 + v45 + v43;
  v40 = 8;
  if (v48 > 8)
    v40 = v48;
  v39 = 1;
LABEL_30:
  *((_BYTE *)v22 + v40) = v39;
  v49 = type metadata accessor for DynamicTypeSize(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned __int8 *)(v50 + 80);
  v52 = v31 + (v51 | 7) + 1;
  v53 = (_QWORD *)(((unint64_t)v22 + v52) & ~(v51 | 7));
  v54 = (_QWORD *)(((unint64_t)v23 + v52) & ~(v51 | 7));
  if (((v51 + 19) & (unint64_t)~v51) + *(_QWORD *)(v50 + 64) <= 8)
    v55 = 8;
  else
    v55 = ((v51 + 19) & ~v51) + *(_QWORD *)(v50 + 64);
  v56 = *((unsigned __int8 *)v54 + v55);
  if (v56 >= 2)
  {
    if (v55 <= 3)
      v57 = v55;
    else
      v57 = 4;
    __asm { BR              X14 }
  }
  if (v56 == 1)
  {
    *v53 = *v54;
    v58 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    v59 = ((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
    *(_BYTE *)(v58 + 9) = *(_BYTE *)(v59 + 9);
    *(_BYTE *)(v58 + 10) = *(_BYTE *)(v59 + 10);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 32))((v51 + 11 + v58) & ~v51, (v51 + 11 + v59) & ~v51, v49);
    v60 = 1;
  }
  else
  {
    v60 = 0;
    *v53 = *v54;
  }
  *((_BYTE *)v53 + v55) = v60;
  v61 = (char *)v53 + v55 + 1;
  v62 = (char *)v54 + v55 + 1;
  memcpy((void *)((unint64_t)(v61 + 7) & 0xFFFFFFFFFFFFFFF8), (const void *)((unint64_t)(v62 + 7) & 0xFFFFFFFFFFFFFFF8), 0x49uLL);
  v63 = (unint64_t)(v61 + 87) & 0xFFFFFFFFFFFFFFF8;
  v64 = (unint64_t)(v62 + 87) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_BYTE *)(v64 + 32);
  v66 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v66;
  *(_BYTE *)(v63 + 32) = v65;
  return v4;
}

_QWORD *sub_10053C4EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  size_t __n;
  size_t v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 | 7) + v17;
  v22 = ~(v20 | 7);
  v23 = (_QWORD *)((v21 + v15) & v22);
  v24 = (_QWORD *)((v21 + v16) & v22);
  v25 = v20 + 24;
  v26 = (v20 + 24) & ~v20;
  v106 = a1;
  if (v23 == v24)
  {
    LODWORD(v28) = *(_DWORD *)(v19 + 84);
    v36 = *(_QWORD *)(v19 + 64);
    v37 = (v20 + 16) & v22;
    goto LABEL_48;
  }
  v27 = v20 + 16;
  v28 = *(unsigned int *)(v19 + 84);
  if ((_DWORD)v28)
    v29 = v28 - 1;
  else
    v29 = 0;
  v30 = *(_QWORD *)(v19 + 64);
  v101 = v30;
  v102 = (v20 + 16) & v22;
  if (!(_DWORD)v28)
    ++v30;
  v103 = (v20 + 24) & ~v20;
  v100 = v30;
  v31 = v30 + v26;
  v32 = v30 + v26 + ((v20 + 16) & v22);
  if (v32 <= 8)
    v33 = 8;
  else
    v33 = v32;
  v34 = *((unsigned __int8 *)v23 + v33);
  if (v34 >= 2)
  {
    if (v33 <= 3)
      v35 = v33;
    else
      v35 = 4;
    __asm { BR              X13 }
  }
  v104 = ~v20;
  v105 = v18;
  __n = v31;
  if (v34 != 1)
  {
    v39 = v29;
    swift_release();
    goto LABEL_28;
  }
  v38 = ((unint64_t)v23 + v27) & v22;
  v39 = v29;
  if (v29 > 0x7FFFFFFD)
  {
    if (_s7Weather24LocationCompositionStateOwet_0((v25 + v38) & v104, v28, v18) > 1)
      goto LABEL_28;
    goto LABEL_24;
  }
  v40 = *(_QWORD *)((((unint64_t)v23 + v27) & v22) + 0x10);
  if (v40 >= 0xFFFFFFFF)
    LODWORD(v40) = -1;
  if ((v40 + 1) < 3)
  {
LABEL_24:
    if (*(_QWORD *)((((unint64_t)v23 + v27) & v22) + 0x10) >= 0xFFFFFFFFuLL)
      swift_bridgeObjectRelease();
    v41 = (v25 + v38) & v104;
    if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v105))
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v41, v105);
  }
LABEL_28:
  v42 = *((unsigned __int8 *)v24 + v33);
  if (v42 >= 2)
  {
    if (v33 <= 3)
      v43 = v33;
    else
      v43 = 4;
    __asm { BR              X12 }
  }
  if (v42 != 1)
  {
    *v23 = *v24;
    *((_BYTE *)v23 + v33) = 0;
    v37 = v102;
    v26 = v103;
    v36 = v101;
    goto LABEL_48;
  }
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v44 = ((unint64_t)v23 + v27) & v22;
  v45 = ((unint64_t)v24 + v27) & v22;
  if (v39 > 0x7FFFFFFD)
  {
    v47 = v105;
    if (_s7Weather24LocationCompositionStateOwet_0((v25 + v45) & v104, v28, v105) > 1)
    {
LABEL_38:
      memcpy((void *)(((unint64_t)v23 + v27) & v22), (const void *)(((unint64_t)v24 + v27) & v22), __n);
      v37 = v102;
      v26 = v103;
      v36 = v101;
LABEL_44:
      v50 = v100;
      goto LABEL_45;
    }
  }
  else
  {
    v46 = *(_QWORD *)((((unint64_t)v24 + v27) & v22) + 0x10);
    if (v46 >= 0xFFFFFFFF)
      LODWORD(v46) = -1;
    v47 = v105;
    if ((v46 + 1) >= 3)
      goto LABEL_38;
  }
  v36 = v101;
  *(_BYTE *)v44 = *(_BYTE *)v45;
  *(_OWORD *)(v44 + 8) = *(_OWORD *)(v45 + 8);
  v48 = (void *)((v25 + v44) & v104);
  v49 = (const void *)((v25 + v45) & v104);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, v47))
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v48, v49, v47);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v48, 0, 1, v47);
    v37 = v102;
    v26 = v103;
    goto LABEL_44;
  }
  v50 = v100;
  memcpy(v48, v49, v100);
  v37 = v102;
  v26 = v103;
LABEL_45:
  v51 = v37 + v26 + v50;
  if (v51 <= 8)
    v51 = 8;
  *((_BYTE *)v23 + v51) = 1;
LABEL_48:
  v52 = v37 + v26 + v36;
  if (!(_DWORD)v28)
    ++v52;
  if (v52 <= 8)
    v53 = 8;
  else
    v53 = v52;
  v54 = type metadata accessor for DynamicTypeSize(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(unsigned __int8 *)(v55 + 80);
  v57 = v53 + (v56 | 7) + 1;
  v58 = (_QWORD *)(((unint64_t)v23 + v57) & ~(v56 | 7));
  v59 = (_QWORD *)(((unint64_t)v24 + v57) & ~(v56 | 7));
  if (v58 == v59)
  {
    if (*(_QWORD *)(v55 + 64) + ((v56 + 19) & (unint64_t)~v56) <= 8)
      v61 = 8;
    else
      v61 = *(_QWORD *)(v55 + 64) + ((v56 + 19) & ~v56);
  }
  else
  {
    v60 = v54;
    if (*(_QWORD *)(v55 + 64) + ((v56 + 19) & (unint64_t)~v56) <= 8)
      v61 = 8;
    else
      v61 = *(_QWORD *)(v55 + 64) + ((v56 + 19) & ~v56);
    v62 = *((unsigned __int8 *)v58 + v61);
    if (v62 >= 2)
    {
      if (v61 <= 3)
        v63 = v61;
      else
        v63 = 4;
      __asm { BR              X12 }
    }
    v64 = ~v56;
    if (v62 == 1)
      (*(void (**)(unint64_t, uint64_t))(v55 + 8))((v56 + (((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & v64, v54);
    else
      v65 = swift_release();
    v66 = *((unsigned __int8 *)v59 + v61);
    if (v66 >= 2)
    {
      if (v61 <= 3)
        v67 = v61;
      else
        v67 = 4;
      __asm { BR              X12 }
    }
    *v58 = *v59;
    if (v66 == 1)
    {
      v68 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
      v69 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
      *(_BYTE *)(v68 + 9) = *(_BYTE *)(v69 + 9);
      *(_BYTE *)(v68 + 10) = *(_BYTE *)(v69 + 10);
      (*(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v55 + 32))((v56 + 11 + v68) & v64, (v56 + 11 + v69) & v64, v60, v65);
      *((_BYTE *)v58 + v61) = 1;
    }
    else
    {
      *((_BYTE *)v58 + v61) = 0;
    }
  }
  v70 = (char *)v59 + v61 + 1;
  v71 = (unint64_t)(v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  v72 = *(_QWORD *)(v71 + 64);
  v73 = *(_BYTE *)(v71 + 72);
  v74 = (char *)v58 + v61 + 1;
  v75 = (unint64_t)(v74 + 7) & 0xFFFFFFFFFFFFFFF8;
  v76 = *(_QWORD *)v75;
  v77 = *(_QWORD *)(v75 + 8);
  v78 = *(_QWORD *)(v75 + 16);
  v79 = *(_QWORD *)(v75 + 24);
  v80 = *(_QWORD *)(v75 + 32);
  v81 = *(_QWORD *)(v75 + 40);
  v82 = *(_QWORD *)(v75 + 48);
  v83 = *(_QWORD *)(v75 + 56);
  v84 = *(_QWORD *)(v75 + 64);
  v85 = *(_BYTE *)(v75 + 72);
  v86 = *(_OWORD *)(v71 + 16);
  v87 = *(_OWORD *)(v71 + 32);
  v88 = *(_OWORD *)(v71 + 48);
  *(_OWORD *)v75 = *(_OWORD *)v71;
  *(_OWORD *)(v75 + 16) = v86;
  *(_OWORD *)(v75 + 32) = v87;
  *(_OWORD *)(v75 + 48) = v88;
  *(_QWORD *)(v75 + 64) = v72;
  *(_BYTE *)(v75 + 72) = v73;
  sub_1000CEE98(v76, v77, v78, v79, v80, v81, v82, v83, v84, v85);
  v89 = (unint64_t)(v70 + 87) & 0xFFFFFFFFFFFFFFF8;
  v90 = *(_BYTE *)(v89 + 32);
  v91 = (unint64_t)(v74 + 87) & 0xFFFFFFFFFFFFFFF8;
  v92 = *(_QWORD *)v91;
  v93 = *(_QWORD *)(v91 + 8);
  v94 = *(_QWORD *)(v91 + 16);
  v95 = *(_QWORD *)(v91 + 24);
  v96 = *(_BYTE *)(v91 + 32);
  v97 = *(_OWORD *)(v89 + 16);
  *(_OWORD *)v91 = *(_OWORD *)v89;
  *(_OWORD *)(v91 + 16) = v97;
  *(_BYTE *)(v91 + 32) = v90;
  sub_1000D31C4(v92, v93, v94, v95, v96);
  return v106;
}

uint64_t sub_10053CBF0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v34 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v32 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v32 - 8);
  v33 = *(_DWORD *)(v6 + 84);
  if (v33 <= v5)
    v7 = *(_DWORD *)(v4 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v9 | 7;
  v11 = *(_DWORD *)(v8 + 84);
  v12 = *(_QWORD *)(v8 + 64);
  if (v7 <= 0xFE)
    v7 = 254;
  v13 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((v14 + 19) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v15 <= 8)
    v16 = 8;
  else
    v16 = v15;
  if (v11)
    v17 = v12;
  else
    v17 = v12 + 1;
  v18 = ((v9 + 16) & ~(v9 | 7)) + ((v9 + 24) & ~v9) + v17;
  if (v18 <= 8)
    v18 = 8;
  if (!a2)
    return 0;
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 64);
  v21 = *(unsigned __int8 *)(v6 + 80);
  v22 = *(_QWORD *)(v6 + 64) + v10;
  if (v7 < a2)
  {
    v23 = ((v16
          + ((v18 + (v14 | 7) + ((v22 + ((v20 + v21 + ((v19 + 16) & ~(_DWORD)v19)) & ~(_DWORD)v21)) & ~(_DWORD)v10) + 1) & ~(v14 | 7))
          + 88) & 0xFFFFFFF8)
        + 33;
    if (v23 < 4)
      v24 = ((a2 - v7 + 255) >> (8 * v23)) + 1;
    else
      v24 = 2;
    if (v24 >= 0x10000)
      v25 = 4;
    else
      v25 = 2;
    if (v24 < 0x100)
      v25 = 1;
    if (v24 >= 2)
      v26 = v25;
    else
      v26 = 0;
    __asm { BR              X17 }
  }
  v28 = (((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v19 + 8) & ~v19;
  if ((_DWORD)v5 == v7)
  {
    v29 = v5;
    v30 = v34;
    return _s7Weather24LocationCompositionStateOwet_0(v28, v29, v30);
  }
  v28 = (v28 + v20 + v21) & ~v21;
  v29 = v33;
  if (v33 == v7)
  {
    v30 = v32;
    return _s7Weather24LocationCompositionStateOwet_0(v28, v29, v30);
  }
  v31 = *(unsigned __int8 *)(((v22 + v28) & ~v10) + v18);
  if (v31 >= 2)
    return (v31 ^ 0xFF) + 1;
  else
    return 0;
}

void sub_10053CE70(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_QWORD *)(v8 + 64);
  if (v7 <= 0xFE)
    v7 = 254;
  v12 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v13 + 19) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v14 <= 8)
    v15 = 8;
  else
    v15 = v14;
  if (v10)
    v16 = v11;
  else
    v16 = v11 + 1;
  v17 = v16 + ((v9 + 24) & ~v9) + ((v9 + 16) & ~(v9 | 7));
  if (v17 <= 8)
    v17 = 8;
  v18 = ((v15
        + ((v17
          + (v13 | 7)
          + ((*(_QWORD *)(v6 + 64)
            + (v9 | 7)
            + ((*(_QWORD *)(v5 + 64)
              + *(unsigned __int8 *)(v6 + 80)
              + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(v9 | 7))
          + 1) & ~(v13 | 7))
        + 88) & 0xFFFFFFFFFFFFFFF8)
      + 33;
  if (v7 >= a3)
  {
    v21 = 0;
  }
  else
  {
    if (v18 <= 3)
      v19 = ((a3 - v7 + 255) >> (8 * v18)) + 1;
    else
      v19 = 2;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 >= 2)
      v21 = v20;
    else
      v21 = 0;
  }
  if (v7 < a2)
  {
    if (v18 >= 4)
      v22 = ~v7 + a2;
    else
      v22 = (~(_BYTE)v7 + a2);
    bzero(a1, v18);
    if ((_DWORD)v18 == 1)
      *a1 = v22;
    else
      *(_DWORD *)a1 = v22;
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_10053D078()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_10053D080(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v4 + v5) = 0;
  if (a4)
    JUMPOUT(0x10053D088);
}

void sub_10053D0F4()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void sub_10053D0FC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
}

void sub_10053D104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  *(_WORD *)(v13 + v15) = 0;
  if ((_DWORD)a4)
  {
    v4 = (((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & v12;
    if ((_DWORD)v14 == v16)
    {
      v5 = a4;
      v6 = v14;
      v7 = v18;
    }
    else
    {
      v4 = (v4 + v9 + v8) & v11;
      v6 = v19;
      if (v19 != v16)
        JUMPOUT(0x10053D110);
      v5 = a4;
      v7 = v17;
    }
    _s7Weather24LocationCompositionStateOwst_0(v4, v5, v6, v7);
  }
}

void sub_10053D180()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_10053D188()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_10053D198()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

uint64_t type metadata accessor for LocationViewerLayoutContainer(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for LocationViewerLayoutContainer);
}

uint64_t assignWithTake for LocationViewerViewWeatherConditionBackground(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = v4;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t *sub_10053D25C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    v8 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Location.Identifier(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
    v15 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v16))
      {
        v17 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        v18 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
        v18 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v16);
      }
    }
    else
    {
      *v13 = *v14;
      swift_retain();
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v18);
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)v21;
    LOBYTE(v21) = v21[8];
    *(_QWORD *)v20 = v22;
    v20[8] = (char)v21;
  }
  swift_retain();
  return a1;
}

double sub_10053D408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v5 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 24);
  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_10053D4EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_retain();
  v7 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  swift_bridgeObjectRetain();
  v14 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15))
    {
      v16 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      v17 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v17 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v15);
    }
  }
  else
  {
    *v12 = *v13;
    swift_retain();
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v17);
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = v20[8];
  *(_QWORD *)v19 = v21;
  v19[8] = (char)v20;
  swift_retain();
  return a1;
}

_QWORD *sub_10053D670(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    sub_100021A14((uint64_t)a1 + v10, (uint64_t *)&unk_100C09CD0);
    v13 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14))
      {
        v15 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
        v16 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v14);
      }
    }
    else
    {
      *v11 = *v12;
      swift_retain();
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v16);
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_10053D844(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v15))
    {
      v16 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

_QWORD *sub_10053D9B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100021A14((uint64_t)a1 + v10, (uint64_t *)&unk_100C09CD0);
    v13 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v12) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v14))
      {
        v15 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  swift_release();
  return a1;
}

uint64_t sub_10053DB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053DB6C);
}

void sub_10053DB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10009E50C();
  sub_1000BA294(&qword_100BECFA0);
  sub_100088FF0();
  if (v7)
  {
    v8 = v6;
    v9 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 0x7FFFFFFF)
    {
      sub_10003BCA4(*(_QWORD *)(v4 + *(int *)(a3 + 20)));
      sub_100079F70();
      return;
    }
    sub_1000BA294((uint64_t *)&unk_100C09CB0);
    sub_10011DFB0();
    v9 = v4 + v10;
  }
  sub_1000B250C(v9, v3, v8);
}

uint64_t sub_10053DBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10053DBF0);
}

void sub_10053DBF0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000994F4();
  sub_1000BA294(&qword_100BECFA0);
  sub_10009D2E8();
  if (v4)
  {
    sub_100075E28();
  }
  else
  {
    if (v3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v1 + *(int *)(v2 + 20)) = (v0 - 1);
      sub_100079F70();
      return;
    }
    sub_1000BA294((uint64_t *)&unk_100C09CB0);
    sub_1000B32A4();
  }
  sub_100098D08();
  sub_1000987C4(v5, v6, v7, v8);
}

void sub_10053DC60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100158C7C(319, (unint64_t *)&qword_100BECF18, (uint64_t (*)(uint64_t))&type metadata accessor for Location.Identifier, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100158AF0(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = "\t";
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

_QWORD *sub_10053DD10(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocationModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    v11 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
    v12 = &v9[v11];
    v13 = &v10[v11];
    v14 = type metadata accessor for ContentStatusBanner(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_1000BA294(&qword_100BC3620);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *v12 = *v13;
      v17 = v13 + 8;
      v18 = *((_QWORD *)v13 + 2);
      if (v18 >= 2)
      {
        *((_QWORD *)v12 + 1) = *v17;
        *((_QWORD *)v12 + 2) = v18;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v12 + 8) = *(_OWORD *)v17;
      }
      v19 = *(int *)(v14 + 24);
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22))
      {
        v23 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v20, 0, 1, v22);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v24 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v24) = *((_BYTE *)a2 + v24);
    v25 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    v26 = (_QWORD *)((char *)a1 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v27) == 1)
    {
      v29 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v27, 1, v29))
      {
        v30 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        v31 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
        v31 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v26, 0, 1, v29);
      }
    }
    else
    {
      *v26 = *v27;
      swift_retain();
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v31);
    v32 = a3[10];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = *(_QWORD *)v34;
    LOBYTE(v34) = v34[8];
    *(_QWORD *)v33 = v35;
    v33[8] = (char)v34;
  }
  swift_retain();
  return a1;
}

double sub_10053DFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = v5 + *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v7 = type metadata accessor for ContentStatusBanner(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
  {
    if (*(_QWORD *)(v6 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v8 = v6 + *(int *)(v7 + 24);
    v9 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  v10 = a1 + *(int *)(a2 + 36);
  sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_10053E108(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v11 = (_QWORD *)(v8 + v10);
  v12 = (_QWORD *)(v9 + v10);
  v13 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
  {
    v14 = sub_1000BA294(&qword_100BC3620);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *(_BYTE *)v11 = *(_BYTE *)v12;
    v15 = v12 + 1;
    v16 = v12[2];
    if (v16 >= 2)
    {
      v11[1] = *v15;
      v11[2] = v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v11 + 1) = *(_OWORD *)v15;
    }
    v17 = *(int *)(v13 + 24);
    v18 = (char *)v11 + v17;
    v19 = (char *)v12 + v17;
    v20 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v18, 0, 1, v20);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
  }
  v22 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v25) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v27))
    {
      v28 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v29 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v27);
    }
  }
  else
  {
    *v24 = *v25;
    swift_retain();
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v29);
  v30 = a3[10];
  v31 = a1 + v30;
  v32 = (uint64_t *)(a2 + v30);
  v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = (_BYTE)v32;
  swift_retain();
  return a1;
}

uint64_t sub_10053E3A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  size_t v16;
  void *v17;
  const void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = *(_QWORD *)(a2 + v7 + 8);
  v10 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v11 = (uint64_t)v8 + v10;
  v12 = v9 + v10;
  v13 = type metadata accessor for ContentStatusBanner(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0(v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0(v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      *(_BYTE *)v11 = *(_BYTE *)v12;
      if (*(_QWORD *)(v12 + 16) >= 2uLL)
      {
        *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
      }
      v20 = *(int *)(v13 + 24);
      v21 = (void *)(v11 + v20);
      v22 = (const void *)(v12 + v20);
      v23 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
      {
        v24 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
      }
      v25 = v11;
      v26 = v13;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v15)
  {
    sub_1000BF3B4();
LABEL_7:
    v16 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v17 = (void *)v11;
    v18 = (const void *)v12;
LABEL_8:
    memcpy(v17, v18, v16);
    goto LABEL_18;
  }
  *(_BYTE *)v11 = *(_BYTE *)v12;
  v19 = *(_QWORD *)(v12 + 16);
  if (*(_QWORD *)(v11 + 16) < 2uLL)
  {
    if (v19 >= 2)
    {
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (v19 < 2)
  {
    sub_1001A27B4(v11 + 8);
LABEL_28:
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
    goto LABEL_30;
  }
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_30:
  v39 = *(int *)(v13 + 24);
  v40 = v11 + v39;
  v41 = v12 + v39;
  v42 = type metadata accessor for Date(0);
  v43 = _s7Weather24LocationCompositionStateOwet_0(v40, 1, v42);
  v44 = _s7Weather24LocationCompositionStateOwet_0(v41, 1, v42);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
      v25 = v40;
      v26 = v42;
LABEL_17:
      _s7Weather24LocationCompositionStateOwst_0(v25, 0, 1, v26);
      goto LABEL_18;
    }
    goto LABEL_35;
  }
  v45 = *(_QWORD *)(v42 - 8);
  if (v44)
  {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v40, v42);
LABEL_35:
    v16 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v17 = (void *)v40;
    v18 = (const void *)v41;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 24))(v40, v41, v42);
LABEL_18:
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v27 = a3[9];
    v28 = (_QWORD *)(a1 + v27);
    v29 = (_QWORD *)(a2 + v27);
    sub_100021A14(a1 + v27, (uint64_t *)&unk_100C09CD0);
    v30 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v29) == 1)
    {
      v31 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v31))
      {
        v32 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        v33 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
        v33 = 1;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v31);
      }
    }
    else
    {
      *v28 = *v29;
      swift_retain();
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v33);
  }
  v34 = a3[10];
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = (_BYTE)v36;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10053E7E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v11 = (_BYTE *)(v8 + v10);
  v12 = (_BYTE *)(v9 + v10);
  v13 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
  {
    v14 = sub_1000BA294(&qword_100BC3620);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v11 = *v12;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
    v15 = *(int *)(v13 + 24);
    v16 = &v11[v15];
    v17 = &v12[v15];
    v18 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18))
    {
      v19 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
  }
  v20 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v21 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v23) == 1)
  {
    v25 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v25))
    {
      v26 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v25);
    }
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  return a1;
}

uint64_t sub_10053EA4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  const void *v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v11 = v8 + v10;
  v12 = v9 + v10;
  v13 = type metadata accessor for ContentStatusBanner(0);
  v14 = _s7Weather24LocationCompositionStateOwet_0(v11, 1, v13);
  v15 = _s7Weather24LocationCompositionStateOwet_0(v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      *(_BYTE *)v11 = *(_BYTE *)v12;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
      v16 = *(int *)(v13 + 24);
      v17 = (void *)(v11 + v16);
      v18 = (const void *)(v12 + v16);
      v19 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
      }
      v26 = v11;
      v27 = v13;
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v15)
  {
    sub_1000BF3B4();
LABEL_7:
    v21 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v22 = (void *)v11;
    v23 = (const void *)v12;
LABEL_8:
    memcpy(v22, v23, v21);
    goto LABEL_16;
  }
  *(_BYTE *)v11 = *(_BYTE *)v12;
  v24 = (_OWORD *)(v12 + 8);
  if (*(_QWORD *)(v11 + 16) < 2uLL)
    goto LABEL_12;
  v25 = *(_QWORD *)(v12 + 16);
  if (v25 < 2)
  {
    sub_1001A27B4(v11 + 8);
LABEL_12:
    *(_OWORD *)(v11 + 8) = *v24;
    goto LABEL_25;
  }
  *(_QWORD *)(v11 + 8) = *(_QWORD *)v24;
  *(_QWORD *)(v11 + 16) = v25;
  swift_bridgeObjectRelease();
LABEL_25:
  v40 = *(int *)(v13 + 24);
  v41 = v11 + v40;
  v42 = v12 + v40;
  v43 = type metadata accessor for Date(0);
  v44 = _s7Weather24LocationCompositionStateOwet_0(v41, 1, v43);
  v45 = _s7Weather24LocationCompositionStateOwet_0(v42, 1, v43);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
      v26 = v41;
      v27 = v43;
LABEL_15:
      _s7Weather24LocationCompositionStateOwst_0(v26, 0, 1, v27);
      goto LABEL_16;
    }
    goto LABEL_30;
  }
  v46 = *(_QWORD *)(v43 - 8);
  if (v45)
  {
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v43);
LABEL_30:
    v21 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v22 = (void *)v41;
    v23 = (const void *)v42;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 40))(v41, v42, v43);
LABEL_16:
  v28 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v29 = a3[9];
    v30 = (void *)(a1 + v29);
    v31 = (const void *)(a2 + v29);
    sub_100021A14(a1 + v29, (uint64_t *)&unk_100C09CD0);
    v32 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
    if (swift_getEnumCaseMultiPayload(v31) == 1)
    {
      v33 = type metadata accessor for UserInterfaceSizeClass(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v33))
      {
        v34 = sub_1000BA294(&qword_100BC5A68);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v31, v33);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v33);
      }
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
  }
  v35 = a3[10];
  v36 = a1 + v35;
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  LOBYTE(v37) = *((_BYTE *)v37 + 8);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = (_BYTE)v37;
  swift_release();
  return a1;
}

uint64_t sub_10053EE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053EE1C);
}

void sub_10053EE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000BC4BC();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    type metadata accessor for ContentStatusBannerPresentationMetrics(0);
    sub_100088FF0();
    if (v9)
    {
      v7 = v10;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      if ((_DWORD)v3 == 254)
      {
        sub_100079F70();
        return;
      }
      v7 = sub_1000BA294((uint64_t *)&unk_100C09CB0);
      v11 = *(int *)(a3 + 36);
    }
    v8 = v4 + v11;
  }
  sub_1000B250C(v8, v3, v7);
}

uint64_t sub_10053EEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10053EECC);
}

void sub_10053EECC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000BC4BC();
  sub_10009D2E8();
  if (v8)
  {
    sub_100075E28();
  }
  else
  {
    type metadata accessor for ContentStatusBannerPresentationMetrics(0);
    sub_10009D2E8();
    if (!v8)
    {
      if (a3 == 254)
      {
        *(_BYTE *)(v5 + *(int *)(a4 + 28)) = v4 + 1;
        sub_100079F70();
        return;
      }
      sub_1000BA294((uint64_t *)&unk_100C09CB0);
    }
  }
  sub_100098D08();
  sub_1000987C4(v9, v10, v11, v12);
}

void sub_10053EF54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v2 = type metadata accessor for LocationModel(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ContentStatusBannerPresentationMetrics(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[3] = &unk_1009AB568;
      v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
      sub_100158AF0(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = "\t";
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_10053F014(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  _BYTE *v40;
  _OWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for ContentStatusBanner(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000BA294(&qword_100BC3620);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v10 = a2 + 1;
      v11 = a2[2];
      if (v11 >= 2)
      {
        a1[1] = *v10;
        a1[2] = v11;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)v10;
      }
      v12 = *(int *)(v7 + 24);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
      {
        v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v17 = a3[5];
    v18 = *(_OWORD *)((char *)a2 + v17 + 24);
    *(_OWORD *)((char *)a1 + v17 + 24) = v18;
    (**(void (***)(void))(v18 - 8))();
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)v21;
    v23 = *((_QWORD *)v21 + 1);
    v24 = *((_QWORD *)v21 + 2);
    v25 = *((_QWORD *)v21 + 3);
    v26 = v21[32];
    sub_1000D55E4(*(_QWORD *)v21, v23, v24, v25, v26);
    *(_QWORD *)v20 = v22;
    *((_QWORD *)v20 + 1) = v23;
    *((_QWORD *)v20 + 2) = v24;
    *((_QWORD *)v20 + 3) = v25;
    v20[32] = v26;
    v27 = a3[7];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v29) == 1)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v28[16] = v29[16];
      v28[17] = v29[17];
      v28[18] = v29[18];
      v31 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v32 = &v28[v31];
      v33 = &v29[v31];
      v34 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      v35 = 1;
    }
    else
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      swift_retain();
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v35);
    v36 = a3[8];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = *((_BYTE *)a2 + v36);
    v40 = (char *)a1 + v36;
    *v40 = v39;
    v41 = v40 + 8;
    v42 = v38 + 8;
    v43 = *((_QWORD *)v38 + 2);
    if (v43 >= 2)
    {
      *((_QWORD *)v37 + 1) = *v42;
      *((_QWORD *)v37 + 2) = v43;
      swift_bridgeObjectRetain();
    }
    else
    {
      *v41 = *(_OWORD *)v42;
    }
    v44 = *(int *)(v7 + 24);
    v45 = &v37[v44];
    v46 = &v38[v44];
    v47 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
    {
      v48 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
    }
    v49 = sub_1000BA294(&qword_100BEE180);
    *(_QWORD *)&v37[*(int *)(v49 + 28)] = *(_QWORD *)&v38[*(int *)(v49 + 28)];
  }
  swift_retain();
  return a1;
}

_BYTE *sub_10053F36C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BC3620);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v8 = *(int *)(v6 + 24);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v13 = a3[5];
  v14 = a3[6];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  v18 = &a1[v14];
  v19 = &a2[v14];
  v18[32] = v19[32];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v23) == 1)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v22[17] = v23[17];
    v22[18] = v23[18];
    v25 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v26 = &v22[v25];
    v27 = &v23[v25];
    v28 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v29 = a3[8];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *v30 = a2[v29];
  *(_OWORD *)(v30 + 8) = *(_OWORD *)&a2[v29 + 8];
  v32 = *(int *)(v6 + 24);
  v33 = &v30[v32];
  v34 = &v31[v32];
  v35 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v35))
  {
    v36 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v35);
  }
  v37 = sub_1000BA294(&qword_100BEE180);
  *(_QWORD *)&v30[*(int *)(v37 + 28)] = *(_QWORD *)&v31[*(int *)(v37 + 28)];
  return a1;
}

uint64_t sub_10053F620(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v6 = type metadata accessor for ContentStatusBanner(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0(a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v9 = *(int *)(v6 + 24);
      v10 = (void *)(a1 + v9);
      v11 = (const void *)(a2 + v9);
      v12 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v19 = a1;
      v20 = v6;
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_1000BF3B4();
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v15 = (void *)a1;
    v16 = (const void *)a2;
LABEL_8:
    memcpy(v15, v16, v14);
    goto LABEL_16;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v17 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) < 2uLL)
    goto LABEL_12;
  v18 = *(_QWORD *)(a2 + 16);
  if (v18 < 2)
  {
    sub_1001A27B4(a1 + 8);
LABEL_12:
    *(_OWORD *)(a1 + 8) = *v17;
    goto LABEL_34;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)v17;
  *(_QWORD *)(a1 + 16) = v18;
  swift_bridgeObjectRelease();
LABEL_34:
  v59 = *(int *)(v6 + 24);
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = type metadata accessor for Date(0);
  v63 = _s7Weather24LocationCompositionStateOwet_0(v60, 1, v62);
  v64 = _s7Weather24LocationCompositionStateOwet_0(v61, 1, v62);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
      v19 = v60;
      v20 = v62;
LABEL_15:
      _s7Weather24LocationCompositionStateOwst_0(v19, 0, 1, v20);
      goto LABEL_16;
    }
    goto LABEL_39;
  }
  v65 = *(_QWORD *)(v62 - 8);
  if (v64)
  {
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v60, v62);
LABEL_39:
    v14 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v15 = (void *)v60;
    v16 = (const void *)v61;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 40))(v60, v61, v62);
LABEL_16:
  v21 = a3[5];
  v22 = a1 + v21;
  v23 = a2 + v21;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + v21));
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  v25 = a3[6];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_BYTE *)(v27 + 32);
  v29 = *(_QWORD *)v26;
  v30 = *(_QWORD *)(v26 + 8);
  v31 = *(_QWORD *)(v26 + 16);
  v32 = *(_QWORD *)(v26 + 24);
  v33 = *(_BYTE *)(v26 + 32);
  v34 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v34;
  *(_BYTE *)(v26 + 32) = v28;
  sub_1000D31C4(v29, v30, v31, v32, v33);
  if (a1 != a2)
  {
    v35 = a3[7];
    v36 = (char *)(a1 + v35);
    v37 = (char *)(a2 + v35);
    sub_100021A14(a1 + v35, &qword_100BC37E0);
    v38 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(v37) == 1)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
      v36[16] = v37[16];
      v36[17] = v37[17];
      v36[18] = v37[18];
      v39 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v40 = &v36[v39];
      v41 = &v37[v39];
      v42 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      swift_storeEnumTagMultiPayload(v36, v38, 1);
    }
    else
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
  }
  v43 = a3[8];
  v44 = a1 + v43;
  v45 = a2 + v43;
  *(_BYTE *)(a1 + v43) = *(_BYTE *)(a2 + v43);
  v46 = (_OWORD *)(a1 + v43 + 8);
  v47 = (_OWORD *)(v45 + 8);
  if (*(_QWORD *)(a1 + v43 + 16) < 2uLL)
    goto LABEL_23;
  v48 = *(_QWORD *)(v45 + 16);
  if (v48 < 2)
  {
    sub_1001A27B4((uint64_t)v46);
LABEL_23:
    *v46 = *v47;
    goto LABEL_25;
  }
  *(_QWORD *)(v44 + 8) = *(_QWORD *)v47;
  *(_QWORD *)(v44 + 16) = v48;
  swift_bridgeObjectRelease();
LABEL_25:
  v49 = *(int *)(v6 + 24);
  v50 = (void *)(v44 + v49);
  v51 = (const void *)(v45 + v49);
  v52 = type metadata accessor for Date(0);
  v53 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v52);
  v54 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52);
  if (!v53)
  {
    v55 = *(_QWORD *)(v52 - 8);
    if (!v54)
    {
      (*(void (**)(void *, const void *, uint64_t))(v55 + 40))(v50, v51, v52);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v55 + 8))(v50, v52);
    goto LABEL_30;
  }
  if (v54)
  {
LABEL_30:
    v56 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
LABEL_31:
  v57 = sub_1000BA294(&qword_100BEE180);
  *(_QWORD *)(v44 + *(int *)(v57 + 28)) = *(_QWORD *)(v45 + *(int *)(v57 + 28));
  swift_release();
  return a1;
}

uint64_t sub_10053FAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053FAD0);
}

void sub_10053FAD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10009E50C();
  sub_1000BA294(&qword_100BC3620);
  sub_100088FF0();
  if (v7)
  {
    v8 = v6;
    v9 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 0x7FFFFFFF)
    {
      sub_10003BCA4(*(_QWORD *)(v4 + a3[5] + 24));
      sub_100079F70();
      return;
    }
    sub_1000BA294(&qword_100BC3808);
    sub_100088FF0();
    if (v7)
    {
      v8 = v10;
      v11 = a3[7];
    }
    else
    {
      v8 = sub_1000BA294(&qword_100BEE180);
      v11 = a3[8];
    }
    v9 = v4 + v11;
  }
  sub_1000B250C(v9, v3, v8);
}

uint64_t sub_10053FB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10053FB7C);
}

void sub_10053FB7C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000994F4();
  sub_1000BA294(&qword_100BC3620);
  sub_10009D2E8();
  if (v4)
  {
    sub_100075E28();
  }
  else
  {
    if (v3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v1 + *(int *)(v2 + 20) + 24) = (v0 - 1);
      sub_100079F70();
      return;
    }
    sub_1000BA294(&qword_100BC3808);
    sub_10009D2E8();
    if (!v4)
      sub_1000BA294(&qword_100BEE180);
  }
  sub_100098D08();
  sub_1000987C4(v5, v6, v7, v8);
}

uint64_t sub_10053FC14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_100075EB0(&qword_100BED858);
  type metadata accessor for LocationViewerBindingWrapper(255);
  sub_10007AB60((uint64_t)&unk_100BED870);
  sub_10007A100((uint64_t)&unk_100BED878);
  return sub_100099AA4(v1, (uint64_t)&opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, v2, v3, v4, v5, v6, v7, v0);
}

void sub_10053FCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v0 = sub_100075EB0(&qword_100BED8A8);
  v7 = sub_100537390();
  sub_100099AA4(v7, (uint64_t)&opaque type descriptor for <<opaque return type of View.enableForegroundEffects()>>, v1, v2, v3, v4, v5, v6, v0);
  sub_100089028();
}

void sub_10053FCE8()
{
  sub_10007A100((uint64_t)&unk_100BEE230);
}

unint64_t sub_10053FD14(uint64_t a1)
{
  unint64_t result;

  result = sub_10053FD38();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10053FD38()
{
  unint64_t result;

  result = qword_100BEE250;
  if (!qword_100BEE250)
  {
    result = swift_getWitnessTable(&unk_1009ABECC, &type metadata for ContentStatusBannerPresentationMetricsPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100BEE250);
  }
  return result;
}

uint64_t sub_10053FD74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8934, 1);
}

uint64_t sub_10053FD84(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB890C, 1);
}

uint64_t sub_10053FD94(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_100AB88A4, 1);
}

uint64_t sub_10053FDC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB887C, 1);
}

uint64_t sub_10053FDD8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8854, 1);
}

void sub_10053FDE8()
{
  sub_10007A100((uint64_t)&qword_100BC3638);
}

uint64_t sub_10053FE14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB878C, 1);
}

uint64_t sub_10053FE28()
{
  return sub_100540868((uint64_t (*)(_QWORD))&type metadata accessor for PrimitiveButtonStyleConfiguration);
}

void sub_10053FE34()
{
  sub_10053FE48((uint64_t (*)(_QWORD))&type metadata accessor for PrimitiveButtonStyleConfiguration, (void (*)(void))&PrimitiveButtonStyleConfiguration.trigger());
}

void sub_10053FE48(uint64_t (*a1)(_QWORD), void (*a2)(void))
{
  sub_10009EE90(a1);
  a2();
  sub_10004A298();
}

uint64_t sub_10053FE7C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10008900C();
  v1 = *(_QWORD *)(type metadata accessor for PageControlDisplayStateModifier(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1000B15F8(*(_QWORD *)(v0 + v2), *(_BYTE *)(v0 + v2 + 8));
  v3 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_100098814(v3) == 1)
  {
    v4 = sub_1000F44BC();
    if (!sub_1000BC04C(v4))
      sub_100098C04();
  }
  else
  {
    sub_1000B4394();
  }
  swift_release();
  swift_release();
  v5 = sub_1000BD3C8();
  return sub_1000B4380(v5, v6, v7);
}

double sub_10053FF24()
{
  uint64_t v0;
  char *v1;

  type metadata accessor for PageControlDisplayStateModifier(0);
  v0 = sub_1000ECFD8();
  return sub_100531BDC(v0, v1);
}

unint64_t sub_10053FF58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE300;
  if (!qword_100BEE300)
  {
    v1 = sub_100075EB0(&qword_100BEE2F0);
    sub_10053FFDC();
    sub_10007AB60((uint64_t)&qword_100BD3EB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE300);
  }
  return result;
}

unint64_t sub_10053FFDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE308;
  if (!qword_100BEE308)
  {
    v1 = sub_100075EB0(&qword_100BEE310);
    sub_100540060();
    sub_10007A100((uint64_t)&unk_100BEE3B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE308);
  }
  return result;
}

unint64_t sub_100540060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE318;
  if (!qword_100BEE318)
  {
    v1 = sub_100075EB0(&qword_100BEE320);
    sub_1003A70C0((uint64_t)&unk_100BEE328);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE318);
  }
  return result;
}

void sub_100540104()
{
  sub_100345634((uint64_t)&unk_100BEE338);
}

void sub_100540128()
{
  sub_100345634((uint64_t)&unk_100BEE348);
}

void sub_10054014C()
{
  sub_100345634((uint64_t)&unk_100BEE358);
}

void sub_100540170()
{
  sub_100345634((uint64_t)&unk_100BEE368);
}

void sub_100540194()
{
  sub_100345634((uint64_t)&unk_100BEE378);
}

unint64_t sub_1005401B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE388;
  if (!qword_100BEE388)
  {
    v1 = sub_100075EB0(&qword_100BEE390);
    sub_10054023C();
    sub_10007AB60((uint64_t)&unk_100BD3CF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE388);
  }
  return result;
}

unint64_t sub_10054023C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE398;
  if (!qword_100BEE398)
  {
    v1 = sub_100075EB0(&qword_100BEE3A0);
    sub_10007AB60((uint64_t)&unk_100BEE3A8);
    sub_10007AB60((uint64_t)&qword_100BC4050);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE398);
  }
  return result;
}

uint64_t type metadata accessor for ComputePinnedMapSizeViewModifier(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEE5A8, (uint64_t)&nominal type descriptor for ComputePinnedMapSizeViewModifier);
}

void sub_1005402F0(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PinnedMapView(0);
  v5 = sub_1000C1EB4(v4);
  sub_10053336C(v5, a1, a2);
}

void sub_10054032C()
{
  double *v0;

  *v0 = sub_10011E2FC();
  sub_10004A298();
}

void sub_100540348(double *a1)
{
  sub_10011E61C(a1);
  sub_10004A298();
}

uint64_t sub_100540364()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for PinnedMapView(0);
  sub_1000B2650();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v1);
  v2 = sub_100098AA0();
  sub_1000B2568(v2);
  v3 = sub_1000BA294(&qword_100BC37E0);
  if (sub_1000952AC(v3) == 1)
  {
    sub_10009E908();
    v4 = sub_10003BC60();
    sub_1000B2568(v4);
  }
  else
  {
    sub_1000F3F48();
  }
  sub_1000C6B48(*(int *)(v0 + 36));
  v5 = sub_10003BD6C(*(int *)(v0 + 40));
  return sub_1000EB01C(v5, v6, v7);
}

void sub_100540400()
{
  sub_10054040C();
}

void sub_10054040C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(void);

  v0 = sub_1000BDD30();
  v1 = type metadata accessor for PinnedMapView(v0);
  v2 = (_QWORD *)sub_1000FC658(v1);
  sub_1002C2B20(v2, v3);
  sub_10004A298();
}

uint64_t sub_100540430(uint64_t a1)
{
  sub_1000B15F8(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_100540484()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005404B8()
{
  uint64_t v0;

  return sub_100533A28(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1005404C0()
{
  uint64_t v0;

  return sub_100533B68(*(_QWORD *)(v0 + 16));
}

void sub_1005404D0()
{
  sub_10054040C();
}

uint64_t sub_1005404DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100540500(_QWORD *a1)
{
  uint64_t v1;

  return sub_100537094(a1, (char *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

BOOL sub_100540510(uint64_t a1)
{
  uint64_t v1;

  return sub_10053709C(a1, (char *)(v1 + 16));
}

uint64_t sub_100540518@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100530414(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100540528@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100536F30(v1[6], v1[3], v1[5], a1);
}

void sub_100540540()
{
  uint64_t v0;

  v0 = sub_100531028();
  sub_1000C0E60(v0);
  sub_10004A298();
}

void sub_100540564(char *a1)
{
  sub_1005310B0(*a1);
  sub_10004A298();
}

void sub_100540588()
{
  type metadata accessor for LocationViewPage(0);
  sub_10009DACC();
  sub_1005321D0();
}

uint64_t sub_1005405B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10008900C();
  type metadata accessor for LocationViewPage(0);
  sub_100095160();
  v4 = v3 & ~v2;
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1000BE878();
  sub_1000987E0(v7);
  v8 = *(int *)(v0 + 20);
  v9 = v1 + v4 + v8 + *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v10 = sub_10009985C();
  if (!sub_10009E638(v10))
  {
    if (*(_QWORD *)(v9 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v11 = sub_100098778();
    if (!sub_10009E638(v11))
      sub_1000B4974();
  }
  v12 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (sub_1000952AC(v12) == 1)
  {
    v13 = sub_1000F44BC();
    if (!sub_10009E638(v13))
      sub_1000B4974();
  }
  else
  {
    sub_1000F3F48();
  }
  swift_release();
  return sub_1000B4380(v1, v4 + v6, v2 | 7);
}

double sub_100540694()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1000F422C();
  type metadata accessor for LocationViewPage(v0);
  v1 = (_QWORD *)sub_1000C130C();
  return sub_1005321FC(v1, v2, v3);
}

double sub_1005406C4()
{
  _BYTE *v0;

  type metadata accessor for LocationViewPage(0);
  v0 = (_BYTE *)sub_10009DACC();
  return sub_100532320(v0);
}

uint64_t sub_1005406F0()
{
  return sub_100540704(type metadata accessor for LocationViewPage, (uint64_t (*)(uint64_t))sub_100532390);
}

uint64_t sub_100540704(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10009EE90(a1);
  v3 = sub_1000C1EB4(v2);
  return a2(v3);
}

unint64_t sub_10054072C()
{
  unint64_t result;

  result = qword_100BEE458;
  if (!qword_100BEE458)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _BackdropGroupEffect, &type metadata for _BackdropGroupEffect);
    atomic_store(result, (unint64_t *)&qword_100BEE458);
  }
  return result;
}

void sub_10054076C()
{
  double *v0;
  uint64_t v1;

  type metadata accessor for LocationViewPage(0);
  v0 = (double *)sub_10009DACC();
  sub_1005323E8(v0, v1);
}

uint64_t sub_100540794()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1005407B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1005313C4(a1, v1);
}

double sub_1005407C0()
{
  return sub_1005310B0(1);
}

double sub_1005407E8()
{
  return sub_1005310B0(0);
}

uint64_t sub_100540810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000BE878();
  sub_1000B3130();
  sub_1000CD728(v0);
  swift_bridgeObjectRelease();
  sub_10009DB74();
  return sub_1000BEA78(v1, v2, v3);
}

uint64_t sub_10054085C()
{
  return sub_100540868((uint64_t (*)(_QWORD))&type metadata accessor for LocationModel);
}

uint64_t sub_100540868(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10009EE90(a1);
  sub_1000B3130();
  v4 = v2 + v3;
  v6 = v5 | 7;
  sub_1000CD728(v7);
  return sub_1000BEA78(v1, v4, v6);
}

uint64_t sub_1005408A4(uint64_t a1)
{
  return sub_1005408B8(a1, (uint64_t)type metadata accessor for LocationViewBannerContainer, (uint64_t (*)(uint64_t))sub_100535024);
}

uint64_t sub_1005408B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v3 = sub_1000F422C();
  v4(v3);
  v5 = sub_1000C130C();
  return a3(v5);
}

uint64_t sub_1005408F8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000986AC();
  v1 = (int *)type metadata accessor for LocationViewBannerContainer(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  v3 = sub_10009985C();
  if (!_s7Weather24LocationCompositionStateOwet_0(v2, 1, v3))
  {
    if (*(_QWORD *)(v2 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v4 = v2 + *(int *)(v3 + 24);
    v5 = sub_100098778();
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v2 + v1[5]));
  v6 = v2 + v1[6];
  sub_1000D31C4(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_BYTE *)(v6 + 32));
  v7 = v2 + v1[7];
  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    sub_10009E908();
    v8 = sub_10003BC60();
    sub_1000989A0(v8);
  }
  else
  {
    swift_release();
  }
  if (*(_QWORD *)(v2 + v1[8] + 16) >= 2uLL)
    swift_bridgeObjectRelease();
  v9 = sub_100098778();
  if (!sub_1000C1D58(v9))
    sub_1000CCA08();
  sub_1000BA294(&qword_100BEE180);
  swift_release();
  sub_10009DB74();
  return sub_1000BBBC0(v10, v11, v12);
}

void sub_100540A60()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for LocationViewBannerContainer(0);
  v0 = sub_1000ECFD8();
  sub_10053517C(v0, v1);
}

unint64_t sub_100540A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE4D8;
  if (!qword_100BEE4D8)
  {
    v1 = sub_100075EB0(&qword_100BEE4C0);
    sub_100345634((uint64_t)&unk_100BEE4E0);
    sub_10007AB60((uint64_t)&unk_100BEE518);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE4D8);
  }
  return result;
}

unint64_t sub_100540B38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE4E8;
  if (!qword_100BEE4E8)
  {
    v1 = sub_100075EB0(&qword_100BEE4B0);
    sub_100345634((uint64_t)&unk_100BEE4F0);
    sub_10007AB60((uint64_t)&unk_100BEE508);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE4E8);
  }
  return result;
}

void sub_100540BDC()
{
  sub_100345634((uint64_t)&unk_100BEE4F8);
}

unint64_t sub_100540C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE500;
  if (!qword_100BEE500)
  {
    v1 = sub_100075EB0(&qword_100BEE498);
    sub_10007A100((uint64_t)&qword_100BC4B90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE500);
  }
  return result;
}

uint64_t sub_100540C8C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
      v8 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v9 = a1 + v8;
      v10 = (uint64_t)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      swift_retain();
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v12);
    v14 = *(int *)(a3 + 20);
    v44 = a3;
    v15 = a1 + v14;
    v16 = (uint64_t)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = *(_BYTE *)(v16 + 48);
    sub_1000D55F0(*(_QWORD *)v16, v18, v19, v20, v21, v22, v23);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_QWORD *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = v20;
    *(_QWORD *)(v15 + 32) = v21;
    *(_QWORD *)(v15 + 40) = v22;
    *(_BYTE *)(v15 + 48) = v23;
    v24 = *(int *)(v44 + 24);
    v25 = a2;
    v43 = a2;
    v26 = a1 + v24;
    v27 = (uint64_t)v25 + v24;
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v30 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v27 + 24);
    v32 = *(_QWORD *)(v27 + 32);
    v33 = *(_QWORD *)(v27 + 40);
    v35 = *(_QWORD *)(v27 + 48);
    v34 = *(_QWORD *)(v27 + 56);
    v41 = *(_QWORD *)(v27 + 64);
    v42 = *(_BYTE *)(v27 + 72);
    sub_1000D4FF4(*(_QWORD *)v27, v29, v30, v31, v32, v33, v35, v34, v41, v42);
    *(_QWORD *)v26 = v28;
    *(_QWORD *)(v26 + 8) = v29;
    *(_QWORD *)(v26 + 16) = v30;
    *(_QWORD *)(v26 + 24) = v31;
    *(_QWORD *)(v26 + 32) = v32;
    *(_QWORD *)(v26 + 40) = v33;
    *(_QWORD *)(v26 + 48) = v35;
    *(_QWORD *)(v26 + 56) = v34;
    *(_QWORD *)(v26 + 64) = v41;
    *(_BYTE *)(v26 + 72) = v42;
    v36 = *(int *)(v44 + 28);
    v37 = a1 + v36;
    v38 = (uint64_t)v43 + v36;
    v39 = *(_QWORD *)v38;
    LOBYTE(v34) = *(_BYTE *)(v38 + 8);
    sub_10008D47C(*(_QWORD *)v38, v34);
    *(_QWORD *)v37 = v39;
    *(_BYTE *)(v37 + 8) = v34;
  }
  return a1;
}

uint64_t sub_100540EA4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(a1) == 1)
  {
    v4 = a1 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + a2[5];
  sub_1000D31D0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));
  v7 = a1 + a2[6];
  sub_1000CEE98(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_BYTE *)(v7 + 72));
  return sub_1000B15F8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
}

uint64_t sub_100540F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v11);
  v12 = *(int *)(a3 + 20);
  v43 = a3;
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = *(_QWORD *)(v14 + 24);
  v19 = *(_QWORD *)(v14 + 32);
  v20 = *(_QWORD *)(v14 + 40);
  v21 = *(_BYTE *)(v14 + 48);
  sub_1000D55F0(*(_QWORD *)v14, v16, v17, v18, v19, v20, v21);
  *(_QWORD *)v13 = v15;
  *(_QWORD *)(v13 + 8) = v16;
  *(_QWORD *)(v13 + 16) = v17;
  *(_QWORD *)(v13 + 24) = v18;
  *(_QWORD *)(v13 + 32) = v19;
  *(_QWORD *)(v13 + 40) = v20;
  *(_BYTE *)(v13 + 48) = v21;
  v22 = *(int *)(v43 + 24);
  v23 = a2;
  v41 = a1;
  v42 = a2;
  v24 = a1 + v22;
  v25 = v23 + v22;
  v26 = *(_QWORD *)v25;
  v27 = *(_QWORD *)(v25 + 8);
  v28 = *(_QWORD *)(v25 + 16);
  v29 = *(_QWORD *)(v25 + 24);
  v30 = *(_QWORD *)(v25 + 32);
  v31 = *(_QWORD *)(v25 + 40);
  v33 = *(_QWORD *)(v25 + 48);
  v32 = *(_QWORD *)(v25 + 56);
  v34 = *(_QWORD *)(v25 + 64);
  v40 = *(_BYTE *)(v25 + 72);
  sub_1000D4FF4(*(_QWORD *)v25, v27, v28, v29, v30, v31, v33, v32, v34, v40);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(v24 + 8) = v27;
  *(_QWORD *)(v24 + 16) = v28;
  *(_QWORD *)(v24 + 24) = v29;
  *(_QWORD *)(v24 + 32) = v30;
  *(_QWORD *)(v24 + 40) = v31;
  *(_QWORD *)(v24 + 48) = v33;
  *(_QWORD *)(v24 + 56) = v32;
  *(_QWORD *)(v24 + 64) = v34;
  *(_BYTE *)(v24 + 72) = v40;
  v35 = *(int *)(v43 + 28);
  v36 = v41 + v35;
  v37 = v42 + v35;
  v38 = *(_QWORD *)v37;
  LOBYTE(v32) = *(_BYTE *)(v37 + 8);
  sub_10008D47C(*(_QWORD *)v37, v32);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = v32;
  return v41;
}

uint64_t sub_10054116C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if (a1 != a2)
  {
    sub_100021A14(a1, &qword_100BC37E0);
    v6 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
      *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
      v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      v11 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v11);
  }
  v12 = *(int *)(a3 + 20);
  v62 = a3;
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = *(_QWORD *)(v14 + 24);
  v19 = *(_QWORD *)(v14 + 32);
  v20 = *(_QWORD *)(v14 + 40);
  v21 = *(_BYTE *)(v14 + 48);
  sub_1000D55F0(*(_QWORD *)v14, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)v13;
  v23 = *(_QWORD *)(v13 + 8);
  v24 = *(_QWORD *)(v13 + 16);
  v25 = *(_QWORD *)(v13 + 24);
  v26 = *(_QWORD *)(v13 + 32);
  v27 = *(_QWORD *)(v13 + 40);
  v28 = *(_BYTE *)(v13 + 48);
  *(_QWORD *)v13 = v15;
  *(_QWORD *)(v13 + 8) = v16;
  *(_QWORD *)(v13 + 16) = v17;
  *(_QWORD *)(v13 + 24) = v18;
  *(_QWORD *)(v13 + 32) = v19;
  *(_QWORD *)(v13 + 40) = v20;
  *(_BYTE *)(v13 + 48) = v21;
  sub_1000D31D0(v22, v23, v24, v25, v26, v27, v28);
  v29 = *(int *)(v62 + 24);
  v30 = a2;
  v60 = a1;
  v61 = a2;
  v31 = a1 + v29;
  v32 = v30 + v29;
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_QWORD *)(v32 + 16);
  v36 = *(_QWORD *)(v32 + 24);
  v37 = *(_QWORD *)(v32 + 32);
  v38 = *(_QWORD *)(v32 + 40);
  v40 = *(_QWORD *)(v32 + 48);
  v39 = *(_QWORD *)(v32 + 56);
  v41 = *(_QWORD *)(v32 + 64);
  v59 = *(_BYTE *)(v32 + 72);
  sub_1000D4FF4(*(_QWORD *)v32, v34, v35, v36, v37, v38, v40, v39, v41, v59);
  v42 = *(_QWORD *)v31;
  v43 = *(_QWORD *)(v31 + 8);
  v44 = *(_QWORD *)(v31 + 16);
  v45 = *(_QWORD *)(v31 + 24);
  v46 = *(_QWORD *)(v31 + 32);
  v47 = *(_QWORD *)(v31 + 40);
  v48 = *(_QWORD *)(v31 + 48);
  v49 = *(_QWORD *)(v31 + 56);
  v50 = *(_QWORD *)(v31 + 64);
  v51 = *(_BYTE *)(v31 + 72);
  *(_QWORD *)v31 = v33;
  *(_QWORD *)(v31 + 8) = v34;
  *(_QWORD *)(v31 + 16) = v35;
  *(_QWORD *)(v31 + 24) = v36;
  *(_QWORD *)(v31 + 32) = v37;
  *(_QWORD *)(v31 + 40) = v38;
  *(_QWORD *)(v31 + 48) = v40;
  *(_QWORD *)(v31 + 56) = v39;
  *(_QWORD *)(v31 + 64) = v41;
  *(_BYTE *)(v31 + 72) = v59;
  sub_1000CEE98(v42, v43, v44, v45, v46, v47, v48, v49, v50, v51);
  v52 = *(int *)(v62 + 28);
  v53 = v60 + v52;
  v54 = v61 + v52;
  v55 = *(_QWORD *)v54;
  LOBYTE(v39) = *(_BYTE *)(v54 + 8);
  sub_10008D47C(*(_QWORD *)v54, v39);
  v56 = *(_QWORD *)v53;
  v57 = *(_BYTE *)(v53 + 8);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = v39;
  sub_1000B15F8(v56, v57);
  return v60;
}

char *sub_1005413B8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(a2) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[5];
  v12 = a3[6];
  v13 = &a1[v11];
  v14 = &a2[v11];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
  v13[48] = v14[48];
  memcpy(&a1[v12], &a2[v12], 0x49uLL);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  return a1;
}

char *sub_1005414E0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  if (a1 != a2)
  {
    sub_100021A14((uint64_t)a1, &qword_100BC37E0);
    v6 = sub_1000BA294(&qword_100BC37E0);
    if (swift_getEnumCaseMultiPayload(a2) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      a1[17] = a2[17];
      a1[18] = a2[18];
      v7 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = v13[48];
  v15 = *(_QWORD *)v12;
  v16 = *((_QWORD *)v12 + 1);
  v17 = *((_QWORD *)v12 + 2);
  v18 = *((_QWORD *)v12 + 3);
  v19 = *((_QWORD *)v12 + 4);
  v20 = *((_QWORD *)v12 + 5);
  v21 = v12[48];
  v22 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v22;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  v12[48] = v14;
  sub_1000D31D0(v15, v16, v17, v18, v19, v20, v21);
  v23 = a3[6];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 8);
  v27 = v25[72];
  v28 = *(_QWORD *)v24;
  v29 = *((_QWORD *)v24 + 1);
  v30 = *((_QWORD *)v24 + 2);
  v31 = *((_QWORD *)v24 + 3);
  v32 = *((_QWORD *)v24 + 4);
  v33 = *((_QWORD *)v24 + 5);
  v34 = *((_QWORD *)v24 + 6);
  v35 = *((_QWORD *)v24 + 7);
  v36 = *((_QWORD *)v24 + 8);
  v37 = v24[72];
  v38 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v38;
  v39 = *((_OWORD *)v25 + 3);
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  *((_OWORD *)v24 + 3) = v39;
  *((_QWORD *)v24 + 8) = v26;
  v24[72] = v27;
  sub_1000CEE98(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v40 = a3[7];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = *(_QWORD *)v42;
  LOBYTE(v42) = v42[8];
  v44 = *(_QWORD *)v41;
  v45 = v41[8];
  *(_QWORD *)v41 = v43;
  v41[8] = (char)v42;
  sub_1000B15F8(v44, v45);
  return a1;
}

uint64_t sub_100541688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100541694);
}

void sub_100541694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000BA294(&qword_100BC3808);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_1000B250C(a1, a2, v6);
  }
  else
  {
    sub_10011E6E0(*(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 48));
    sub_100079F70();
  }
}

uint64_t sub_1005416F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100541704);
}

void sub_100541704()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000994F4();
  sub_1000BA294(&qword_100BC3808);
  sub_10009D2E8();
  if (v3)
  {
    sub_100098D08();
    sub_1000987C4(v4, v5, v6, v7);
  }
  else
  {
    *(_BYTE *)(v1 + *(int *)(v2 + 20) + 48) = -v0;
    sub_100079F70();
  }
}

void sub_100541758(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100158C7C(319, (unint64_t *)&qword_100BC3890, type metadata accessor for DisplayMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1009AB6C0;
    v4[2] = "I";
    v4[3] = "\t";
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

unint64_t sub_1005417F4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_1000D55E4(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = *(int *)(a3 + 20);
    v13 = (_QWORD *)(a1 + v12);
    v14 = (_QWORD *)(a2 + v12);
    v15 = sub_1000BA294(&qword_100C09EB0);
    if (swift_getEnumCaseMultiPayload(v14) == 1)
    {
      v16 = type metadata accessor for ScenePhase(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      *v13 = *v14;
      swift_retain();
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = *(int *)(a3 + 24);
    v20 = a1 + v19;
    v21 = a2 + v19;
    *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
    v22 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
    v23 = (_QWORD *)(v20 + v22);
    v24 = (_QWORD *)(v21 + v22);
    v25 = type metadata accessor for ContentStatusBanner(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
    {
      v26 = sub_1000BA294(&qword_100BC3620);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *(_BYTE *)v23 = *(_BYTE *)v24;
      v27 = v24 + 1;
      v28 = v24[2];
      if (v28 >= 2)
      {
        v23[1] = *v27;
        v23[2] = v28;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v23 + 1) = *(_OWORD *)v27;
      }
      v29 = *(int *)(v25 + 24);
      v30 = (char *)v23 + v29;
      v31 = (char *)v24 + v29;
      v32 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32))
      {
        v33 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
    }
    v34 = sub_1000BA294(&qword_100BEE5E8);
    *(_QWORD *)(v20 + *(int *)(v34 + 28)) = *(_QWORD *)(v21 + *(int *)(v34 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t sub_100541A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  size_t v31;
  void *v32;
  const void *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_1000D55E4(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000D31C4(v11, v12, v13, v14, v15);
  if (a1 != a2)
  {
    v16 = *(int *)(a3 + 20);
    v17 = (_QWORD *)(a1 + v16);
    v18 = (_QWORD *)(a2 + v16);
    sub_100021A14(a1 + v16, &qword_100C09EB0);
    v19 = sub_1000BA294(&qword_100C09EB0);
    if (swift_getEnumCaseMultiPayload(v18) == 1)
    {
      v20 = type metadata accessor for ScenePhase(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      *v17 = *v18;
      swift_retain();
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
  }
  v22 = *(int *)(a3 + 24);
  v23 = (_QWORD *)(a1 + v22);
  v24 = a2 + v22;
  *v23 = *(_QWORD *)(a2 + v22);
  v23[1] = *(_QWORD *)(a2 + v22 + 8);
  v25 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v26 = (uint64_t)v23 + v25;
  v27 = v24 + v25;
  v28 = type metadata accessor for ContentStatusBanner(0);
  v29 = _s7Weather24LocationCompositionStateOwet_0(v26, 1, v28);
  v30 = _s7Weather24LocationCompositionStateOwet_0(v27, 1, v28);
  if (v29)
  {
    if (!v30)
    {
      *(_BYTE *)v26 = *(_BYTE *)v27;
      if (*(_QWORD *)(v27 + 16) >= 2uLL)
      {
        *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
        *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v26 + 8) = *(_OWORD *)(v27 + 8);
      }
      v35 = *(int *)(v28 + 24);
      v36 = (void *)(v26 + v35);
      v37 = (const void *)(v27 + v35);
      v38 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v38))
      {
        v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v36, 0, 1, v38);
      }
      v40 = v26;
      v41 = v28;
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    sub_1000BF3B4();
LABEL_12:
    v31 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v32 = (void *)v26;
    v33 = (const void *)v27;
    goto LABEL_13;
  }
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v34 = *(_QWORD *)(v27 + 16);
  if (*(_QWORD *)(v26 + 16) >= 2uLL)
  {
    if (v34 >= 2)
    {
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    sub_1001A27B4(v26 + 8);
    goto LABEL_26;
  }
  if (v34 < 2)
  {
LABEL_26:
    *(_OWORD *)(v26 + 8) = *(_OWORD *)(v27 + 8);
    goto LABEL_28;
  }
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
  swift_bridgeObjectRetain();
LABEL_28:
  v44 = *(int *)(v28 + 24);
  v45 = v26 + v44;
  v46 = v27 + v44;
  v47 = type metadata accessor for Date(0);
  v48 = _s7Weather24LocationCompositionStateOwet_0(v45, 1, v47);
  v49 = _s7Weather24LocationCompositionStateOwet_0(v46, 1, v47);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v40 = v45;
      v41 = v47;
LABEL_22:
      _s7Weather24LocationCompositionStateOwst_0(v40, 0, 1, v41);
      goto LABEL_23;
    }
  }
  else
  {
    v50 = *(_QWORD *)(v47 - 8);
    if (!v49)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 24))(v45, v46, v47);
      goto LABEL_23;
    }
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v45, v47);
  }
  v31 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v32 = (void *)v45;
  v33 = (const void *)v46;
LABEL_13:
  memcpy(v32, v33, v31);
LABEL_23:
  v42 = sub_1000BA294(&qword_100BEE5E8);
  *(_QWORD *)((char *)v23 + *(int *)(v42 + 28)) = *(_QWORD *)(v24 + *(int *)(v42 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100541E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    v11 = type metadata accessor for ScenePhase(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v15 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v16 = (_BYTE *)(v13 + v15);
  v17 = (_BYTE *)(v14 + v15);
  v18 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v18))
  {
    v19 = sub_1000BA294(&qword_100BC3620);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)(v17 + 8);
    v20 = *(int *)(v18 + 24);
    v21 = &v16[v20];
    v22 = &v17[v20];
    v23 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
    {
      v24 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 1, v18);
  }
  v25 = sub_1000BA294(&qword_100BEE5E8);
  *(_QWORD *)(v13 + *(int *)(v25 + 28)) = *(_QWORD *)(v14 + *(int *)(v25 + 28));
  return a1;
}

uint64_t sub_100542018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  const void *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000D31C4(v7, v8, v9, v10, v11);
  if (a1 != a2)
  {
    v13 = *(int *)(a3 + 20);
    v14 = (void *)(a1 + v13);
    v15 = (const void *)(a2 + v13);
    sub_100021A14(a1 + v13, &qword_100C09EB0);
    v16 = sub_1000BA294(&qword_100C09EB0);
    if (swift_getEnumCaseMultiPayload(v15) == 1)
    {
      v17 = type metadata accessor for ScenePhase(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v21 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v22 = v19 + v21;
  v23 = v20 + v21;
  v24 = type metadata accessor for ContentStatusBanner(0);
  v25 = _s7Weather24LocationCompositionStateOwet_0(v22, 1, v24);
  v26 = _s7Weather24LocationCompositionStateOwet_0(v23, 1, v24);
  if (v25)
  {
    if (!v26)
    {
      *(_BYTE *)v22 = *(_BYTE *)v23;
      *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
      v27 = *(int *)(v24 + 24);
      v28 = (void *)(v22 + v27);
      v29 = (const void *)(v23 + v27);
      v30 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
      {
        v31 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
      }
      v37 = v22;
      v38 = v24;
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  if (v26)
  {
    sub_1000BF3B4();
LABEL_11:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3620) - 8) + 64);
    v33 = (void *)v22;
    v34 = (const void *)v23;
    goto LABEL_12;
  }
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v35 = (_QWORD *)(v23 + 8);
  if (*(_QWORD *)(v22 + 16) >= 2uLL)
  {
    v36 = *(_QWORD *)(v23 + 16);
    if (v36 >= 2)
    {
      *(_QWORD *)(v22 + 8) = *v35;
      *(_QWORD *)(v22 + 16) = v36;
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    sub_1001A27B4(v22 + 8);
  }
  *(_OWORD *)(v22 + 8) = *(_OWORD *)v35;
LABEL_22:
  v41 = *(int *)(v24 + 24);
  v42 = v22 + v41;
  v43 = v23 + v41;
  v44 = type metadata accessor for Date(0);
  v45 = _s7Weather24LocationCompositionStateOwet_0(v42, 1, v44);
  v46 = _s7Weather24LocationCompositionStateOwet_0(v43, 1, v44);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      v37 = v42;
      v38 = v44;
LABEL_19:
      _s7Weather24LocationCompositionStateOwst_0(v37, 0, 1, v38);
      goto LABEL_20;
    }
  }
  else
  {
    v47 = *(_QWORD *)(v44 - 8);
    if (!v46)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 40))(v42, v43, v44);
      goto LABEL_20;
    }
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v42, v44);
  }
  v32 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v33 = (void *)v42;
  v34 = (const void *)v43;
LABEL_12:
  memcpy(v33, v34, v32);
LABEL_20:
  v39 = sub_1000BA294(&qword_100BEE5E8);
  *(_QWORD *)(v19 + *(int *)(v39 + 28)) = *(_QWORD *)(v20 + *(int *)(v39 + 28));
  swift_release();
  return a1;
}

uint64_t sub_10054236C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100542378);
}

void sub_100542378(uint64_t a1, int a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == 254)
  {
    sub_10011E6E0(*(unsigned __int8 *)(a1 + 32));
    sub_100079F70();
  }
  else
  {
    sub_1000BA294(&qword_100BCD698);
    sub_100088FF0();
    if (v4)
    {
      v5 = *(int *)(a3 + 20);
    }
    else
    {
      sub_1000BA294(&qword_100BEE5E8);
      sub_10011DFB0();
    }
    v6 = sub_10009E5E4(v5);
    sub_1000B250C(v6, v7, v8);
  }
}

uint64_t sub_1005423E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005423F4);
}

void sub_1005423F4()
{
  char v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10009E50C();
  if (v2 == 254)
  {
    *(_BYTE *)(v1 + 32) = -v0;
    sub_100079F70();
  }
  else
  {
    sub_1000BA294(&qword_100BCD698);
    sub_10009D2E8();
    if (!v3)
    {
      sub_1000BA294(&qword_100BEE5E8);
      sub_1000B32A4();
    }
    sub_100098D08();
    sub_1000987C4(v4, v5, v6, v7);
  }
}

unint64_t sub_10054246C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE690;
  if (!qword_100BEE690)
  {
    v1 = sub_100075EB0(&qword_100BEE260);
    sub_10007AB60((uint64_t)&unk_100BEE698);
    sub_1001240BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE690);
  }
  return result;
}

uint64_t sub_1005424FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_100075EB0(&qword_100BEE2A0);
  sub_100075EB0((uint64_t *)&unk_100C0A510);
  v1 = sub_100075EB0(&qword_100BEE298);
  type metadata accessor for BorderlessButtonStyle(255);
  sub_10007AB60((uint64_t)&unk_100BEE2C8);
  sub_10007A100((uint64_t)&qword_100BC4FC8);
  sub_100099AA4(v2, (uint64_t)&opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, v3, v4, v5, v6, v7, v8, v1);
  sub_1000BE924((uint64_t)&qword_100BC4E30);
  return sub_100099AA4(v9, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, v10, v11, v12, v13, v14, v15, v0);
}

uint64_t sub_1005425F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_100075EB0(&qword_100BEE2D0);
  type metadata accessor for PageControlDisplayState(255);
  v1 = sub_100075EB0(&qword_100BEE2D8);
  sub_10007AB60((uint64_t)&unk_100BEE2E0);
  sub_100099AA4(v2, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, v3, v4, v5, v6, v7, v8, v1);
  sub_10007A100((uint64_t)&unk_100BED880);
  return sub_100099AA4(v9, (uint64_t)&opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, v10, v11, v12, v13, v14, v15, v0);
}

unint64_t sub_1005426CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE6E0;
  if (!qword_100BEE6E0)
  {
    v1 = sub_100075EB0(&qword_100BEE6E8);
    sub_10053FF58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE6E0);
  }
  return result;
}

void sub_100542738(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100075EB0(&qword_100BEE3E8);
  v4 = type metadata accessor for Optional(255, v2);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v4, 0, 0);
  v6 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  sub_10007AB60((uint64_t)&unk_100BEE3F0);
  v8 = type metadata accessor for _VariadicView.Tree(255, v3, v6, v7);
  sub_10007AB60((uint64_t)&unk_100BEE400);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v6);
  swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v8);
  sub_100099960();
}

unint64_t sub_10054281C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE718;
  if (!qword_100BEE718)
  {
    v1 = sub_100075EB0(&qword_100BEE408);
    sub_10007A100((uint64_t)&qword_100BED040);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE718);
  }
  return result;
}

unint64_t sub_1005428A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE720;
  if (!qword_100BEE720)
  {
    v1 = sub_100075EB0(&qword_100BEE728);
    sub_100542908();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE720);
  }
  return result;
}

unint64_t sub_100542908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE730;
  if (!qword_100BEE730)
  {
    v1 = sub_100075EB0(&qword_100BEE420);
    sub_10054298C();
    sub_10007AB60((uint64_t)&qword_100BDFC68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE730);
  }
  return result;
}

unint64_t sub_10054298C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100BEE738;
  if (!qword_100BEE738)
  {
    v1 = sub_100075EB0(&qword_100BEE418);
    v2[0] = sub_100075EB0(&qword_100BEE438);
    v2[1] = sub_1000BFE60();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_10007AB60((uint64_t)&qword_100BEE740);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE738);
  }
  return result;
}

unint64_t sub_100542A3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100BEE750;
  if (!qword_100BEE750)
  {
    v1 = sub_100075EB0(&qword_100BEE480);
    v2 = sub_100075EB0(&qword_100BEE470);
    sub_10007AB60((uint64_t)&unk_100BEE490);
    v4[0] = v2;
    v4[1] = v3;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10007A100((uint64_t)&qword_100BC4E48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE750);
  }
  return result;
}

uint64_t sub_100542B08(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB8984, 1);
}

uint64_t sub_100542B20()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ComputePinnedMapSizeViewModifier(0);
  sub_1000B2650();
  v2 = sub_1000BA294(&qword_100BC37E0);
  if (sub_100098814(v2) == 1)
  {
    sub_10009E908();
    v3 = sub_10003BC60();
    sub_1000B2568(v3);
  }
  else
  {
    sub_1000B4394();
  }
  v4 = v1 + v0[5];
  sub_1000D31D0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_BYTE *)(v4 + 48));
  sub_1000C6B48(v0[6]);
  v5 = sub_10003BD6C(v0[7]);
  return sub_1000EB01C(v5, v6, v7);
}

void sub_100542BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000BDD30();
  type metadata accessor for ComputePinnedMapSizeViewModifier(v0);
  v1 = sub_10009DACC();
  sub_10053407C(v1, v2);
}

uint64_t sub_100542BDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10008900C();
  v1 = type metadata accessor for ContentStatusBannerPresentationViewModifier(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_1000D31C4(*(_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v2 + 8), *(_QWORD *)(v0 + v2 + 16), *(_QWORD *)(v0 + v2 + 24), *(_BYTE *)(v0 + v2 + 32));
  v3 = sub_1000BA294(&qword_100C09EB0);
  if (sub_100098814(v3) == 1)
  {
    v4 = type metadata accessor for ScenePhase(0);
    sub_1000987E0(v4);
  }
  else
  {
    sub_1000B4394();
  }
  v5 = v0 + v2 + *(int *)(v1 + 24);
  v6 = v5 + *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v7 = sub_10009985C();
  if (!sub_1000C1D58(v7))
  {
    if (*(_QWORD *)(v6 + 16) >= 2uLL)
      swift_bridgeObjectRelease();
    v8 = sub_100098778();
    if (!sub_1000C1D58(v8))
      sub_1000CCA08();
  }
  sub_1000BA294(&qword_100BEE5E8);
  swift_release();
  sub_10009DB74();
  return sub_1000B4380(v9, v10, v11);
}

unint64_t sub_100542CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE7B8;
  if (!qword_100BEE7B8)
  {
    v1 = sub_100075EB0(&qword_100BEE760);
    sub_10007AB60((uint64_t)&unk_100BEE7C0);
    sub_10007AB60((uint64_t)&unk_100BEE7C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE7B8);
  }
  return result;
}

void sub_100542D74()
{
  sub_100345634((uint64_t)&unk_100BEE7D8);
}

uint64_t sub_100542DA8(_QWORD *a1)
{
  uint64_t v1;

  return sub_10053707C(a1, (char *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

BOOL sub_100542DB8(uint64_t a1)
{
  uint64_t v1;

  return sub_100537084(a1, (unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100542DC0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_100542DFC(uint64_t a1)
{
  sub_1000D55D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_100542E30()
{
  return sub_1005384E4();
}

uint64_t sub_100542E44()
{
  return sub_1005384FC();
}

uint64_t sub_100542E58(double *a1)
{
  return sub_100155C44(*a1);
}

uint64_t sub_100542E64(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_100542E70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + a1));
}

void sub_100542E78(char *a1)
{
  sub_1001552F0(*a1);
}

void sub_100542E84(char *a1)
{
  sub_1001B8CCC(*a1);
}

uint64_t sub_100542E90()
{
  return sub_100054B98();
}

uint64_t sub_100542E9C()
{
  return EnvironmentValues.displayScale.getter();
}

uint64_t sub_100542EA8()
{
  return EnvironmentValues.accessibilitySwitchControlEnabled.getter();
}

uint64_t sub_100542EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  int v21;
  int v22;
  void (*v23)(char *, uint64_t);
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, unint64_t, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  objc_class *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  NSBundle v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v74 = a2;
  v78 = a3;
  v4 = type metadata accessor for PrecipitationTotalPlatterViewModel.SectionModel(0);
  v68 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for TimeZone(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  sub_100088FDC();
  v73 = v7;
  v8 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  sub_100088FDC();
  v79 = v9;
  v10 = type metadata accessor for DetailCondition(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v68 - v15;
  v17 = (int *)type metadata accessor for ConditionDetailInput.Input(0);
  v18 = v17[8];
  v76 = a1;
  v19 = a1 + v18;
  v20 = *(void (**)(char *))(v11 + 16);
  v69 = v19;
  v20(v16);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v16, v10);
  v22 = enum case for DetailCondition.conditions(_:);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v16, v10);
  if (v21 == v22
    || ((*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DetailCondition.precipitationTotal(_:), v10), v24 = static DetailCondition.== infix(_:_:)(v69), v23(v14, v10), (v24 & 1) != 0))
  {
    v25 = v72 + 2;
    v26 = v72[5];
    v72 = (_QWORD *)v72[6];
    sub_1000DB418(v25, v26);
    v27 = v76 + v17[16];
    v28 = v76 + v17[15];
    v29 = (void *)ConditionUnits.precipitationTotal.getter();
    v30 = v73;
    v31 = Location.timeZone.getter(v29);
    dispatch thunk of PrecipitationTotalPlatterViewModelFactoryType.makeModel(currentWeather:dayWeather:unit:timeZone:)(v27, v28, v29, v30, v26, v72, v31);

    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v30, v77);
    v33 = PrecipitationTotalPlatterViewModel.sections.getter(v32);
    v34 = *(_QWORD *)(v33 + 16);
    swift_bridgeObjectRelease(v33);
    v36 = PrecipitationTotalPlatterViewModel.sections.getter(v35);
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v38 = v68;
      v39 = v36 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
      v40 = *(_QWORD *)(v68 + 72);
      v41 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v68 + 16);
      v42 = swift_bridgeObjectRetain(v36);
      while (1)
      {
        v43 = v41(v6, v39, v4, v42);
        v44 = PrecipitationTotalPlatterViewModel.SectionModel.rows.getter(v43);
        v45 = *(_QWORD *)(v44 + 16);
        v46 = swift_bridgeObjectRelease(v44);
        (*(void (**)(char *, uint64_t, __n128))(v38 + 8))(v6, v4, v46);
        if (v45 >= 2)
          break;
        v39 += v40;
        if (!--v37)
        {
          sub_1000BC0C8();
          goto LABEL_9;
        }
      }
      sub_1000BC0C8();
      v47 = v78;
      v49 = v70;
      v48 = v71;
    }
    else
    {
      swift_bridgeObjectRelease(v36);
LABEL_9:
      v47 = v78;
      v49 = v70;
      v48 = v71;
      if (v34 <= 1)
      {
        v50 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v51 = 0xD000000000000027;
        v52 = 0xD000000000000073;
        v67 = 0x8000000100A09BB0;
        v53 = 0x8000000100A09B60;
        v54 = 0x8000000100A09B90;
        v55.super.isa = v50;
        v56 = 0xD000000000000013;
LABEL_14:
        v60 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v51, (Swift::String_optional)0, v55, *(Swift::String *)&v56, *(Swift::String *)&v52);

        v61 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
        v62 = v47 + v61[6];
        v63 = type metadata accessor for WeatherDescription(0);
        _s7Weather24LocationCompositionStateOwst_0(v62, 1, 1, v63);
        v64 = v47 + v61[7];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v64, v79, v48);
        v65 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        swift_storeEnumTagMultiPayload(v64, v65, 6);
        _s7Weather24LocationCompositionStateOwst_0(v47 + v61[8], 1, 1, v65);
        *(_OWORD *)v47 = xmmword_1009AC530;
        *(_BYTE *)(v47 + 16) = 2;
        *(Swift::String *)(v47 + 24) = v60;
        *(_BYTE *)(v47 + v61[9]) = 0;
        *(_BYTE *)(v47 + v61[10]) = 0;
        v58 = v47;
        v59 = 0;
        v57 = (uint64_t)v61;
        return _s7Weather24LocationCompositionStateOwst_0(v58, v59, 1, v57);
      }
    }
    v50 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v51 = 0xD000000000000014;
    v52 = 0xD000000000000043;
    v67 = 0x8000000100A09C50;
    v53 = 0x8000000100A09C30;
    v55.super.isa = v50;
    v56 = 0;
    v54 = 0xE000000000000000;
    goto LABEL_14;
  }
  v57 = type metadata accessor for ConditionDetailPlatterViewModel(0);
  v58 = v78;
  v59 = 1;
  return _s7Weather24LocationCompositionStateOwst_0(v58, v59, 1, v57);
}

uint64_t type metadata accessor for PrecipitationTotalConditionDetailPlatterViewModelFactory()
{
  return objc_opt_self(_TtC7Weather56PrecipitationTotalConditionDetailPlatterViewModelFactory);
}

uint64_t *sub_1005433D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1000BA294(&qword_100BC3370);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = *(int *)(v6 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for BackgroundMoonData(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17))
    {
      v18 = sub_1000BA294(&qword_100BC3378);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_10054355C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v4 = a1 + *(int *)(v3 + 20);
  v5 = type metadata accessor for Elevation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(v3 + 24);
  v7 = type metadata accessor for BackgroundMoonData(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return result;
}

uint64_t sub_10054362C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v6 = *(int *)(v5 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Elevation(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000BA294(&qword_100BC3370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = *(int *)(v5 + 24);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for BackgroundMoonData(0);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
  if (!v18)
  {
    v20 = *(_QWORD *)(v17 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v15, v17);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = sub_1000BA294(&qword_100BC3378);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
  return a1;
}

uint64_t sub_10054381C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v6 = *(int *)(v5 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Elevation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000BA294(&qword_100BC3370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = *(int *)(v5 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for BackgroundMoonData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_1000BA294(&qword_100BC3378);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_100543974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v6 = *(int *)(v5 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Elevation(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000BA294(&qword_100BC3370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  v14 = *(int *)(v5 + 24);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for BackgroundMoonData(0);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17);
  v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
  if (!v18)
  {
    v20 = *(_QWORD *)(v17 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 40))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v15, v17);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = sub_1000BA294(&qword_100BC3378);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
  return a1;
}

uint64_t sub_100543B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100543B70);
}

uint64_t sub_100543B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BC4CC();
  return _s7Weather24LocationCompositionStateOwet_0(v1, v0, v2);
}

uint64_t sub_100543B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100543BA4);
}

uint64_t sub_100543BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000BC4CC();
  return _s7Weather24LocationCompositionStateOwst_0(v1, v0, v0, v2);
}

uint64_t sub_100543BD0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x61746144656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61746144656D6974, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100543C54()
{
  return 0x61746144656D6974;
}

uint64_t sub_100543C6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = sub_1000BA294(&qword_100BEE948);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = v7 - v6;
  v9 = a1[3];
  v10 = a1[4];
  sub_1000DB418(a1, v9);
  v11 = sub_100543FC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys, &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys, v11, v9, v10);
  v12 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v13 = sub_100543FFC(&qword_100BEE950, (uint64_t)&unk_1009A447C);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v14, v4, v12, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100543D6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  __chkstk_darwin(v4);
  sub_100098728();
  v22 = v6 - v5;
  v7 = sub_1000BA294(&qword_100BEE930);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100098728();
  v10 = v9 - v8;
  v11 = type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel(0);
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_100543FC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys, &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys, v17, v15, v16);
  if (!v2)
  {
    sub_100543FFC(&qword_100BEE940, (uint64_t)&unk_1009A44A4);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v18, v7);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v10, v7);
    sub_100080BA8(v22, v14, type metadata accessor for WeatherConditionBackgroundTimeData);
    sub_100080BA8(v14, a2, type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel);
  }
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
}

uint64_t sub_100543F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100543BD0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100543F44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100543FC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100543F6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100543FC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100543F94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100543D6C(a1, a2);
}

uint64_t sub_100543FA8(_QWORD *a1)
{
  return sub_100543C6C(a1);
}

unint64_t sub_100543FC0()
{
  unint64_t result;

  result = qword_100BEE938;
  if (!qword_100BEE938)
  {
    result = swift_getWitnessTable(&unk_1009AC78C, &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEE938);
  }
  return result;
}

uint64_t sub_100543FFC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for WeatherConditionBackgroundTimeData(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10054407C + 4 * byte_1009AC5E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10054409C + 4 * byte_1009AC5E5[v4]))();
}

_BYTE *sub_10054407C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10054409C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005440A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005440AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1005440B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1005440BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys()
{
  return &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys;
}

unint64_t sub_1005440DC()
{
  unint64_t result;

  result = qword_100BEE958;
  if (!qword_100BEE958)
  {
    result = swift_getWitnessTable(&unk_1009AC764, &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEE958);
  }
  return result;
}

unint64_t sub_10054411C()
{
  unint64_t result;

  result = qword_100BEE960;
  if (!qword_100BEE960)
  {
    result = swift_getWitnessTable(&unk_1009AC6D4, &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEE960);
  }
  return result;
}

unint64_t sub_10054415C()
{
  unint64_t result;

  result = qword_100BEE968;
  if (!qword_100BEE968)
  {
    result = swift_getWitnessTable(&unk_1009AC6FC, &type metadata for WeatherConditionBackgroundPreprocessedDataModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEE968);
  }
  return result;
}

double sub_100544198(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[11]).n128_u64[0];
  return result;
}

uint64_t sub_1005441D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100544264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100544340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1005443C4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100544404(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for MessageCoverViewModel()
{
  sub_100098884();
}

uint64_t sub_100544468(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v5 = 0x656369746F6ELL;
  else
    v5 = 0x616D7269666E6F63;
  if (v4)
    v6 = 0xEC0000006E6F6974;
  else
    v6 = 0xE600000000000000;
  if (*(_BYTE *)a2)
    v7 = 0x656369746F6ELL;
  else
    v7 = 0x616D7269666E6F63;
  if (*(_BYTE *)a2)
    v8 = 0xE600000000000000;
  else
    v8 = 0xEC0000006E6F6974;
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = sub_100099264(v5, v6, v7, v8);
    sub_10003BC58();
    sub_10009895C();
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = v12 == v14 && v13 == v15;
  if (v16 || (v17 = sub_100099264(v12, v13, v14, v15), result = 0, (v17 & 1) != 0))
  {
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = *(_QWORD *)(a2 + 32);
    v22 = v18 == v20 && v19 == v21;
    if (v22 || (v23 = sub_100099264(v18, v19, v20, v21), result = 0, (v23 & 1) != 0))
    {
      v24 = *(_QWORD *)(a1 + 40);
      v25 = *(_QWORD *)(a1 + 48);
      v26 = *(_QWORD *)(a2 + 40);
      v27 = *(_QWORD *)(a2 + 48);
      v28 = v24 == v26 && v25 == v27;
      if (v28 || (v29 = sub_100099264(v24, v25, v26, v27), result = 0, (v29 & 1) != 0))
      {
        v30 = *(_QWORD *)(a1 + 72);
        v31 = *(_QWORD *)(a2 + 72);
        if (v30)
        {
          if (v31)
          {
            v32 = *(_QWORD *)(a1 + 64);
            v33 = *(_QWORD *)(a2 + 64);
            swift_bridgeObjectRetain(*(_QWORD *)(a2 + 72));
            swift_bridgeObjectRetain(v30);
            sub_10068A9C0();
            if ((v34 & 1) != 0)
            {
              if (v32 == v33 && v30 == v31)
              {
                sub_10009895C();
                sub_10003BC58();
              }
              else
              {
                v36 = sub_100099264(v32, v30, v33, v31);
                sub_10009895C();
                sub_10003BC58();
                result = 0;
                if ((v36 & 1) == 0)
                  return result;
              }
              goto LABEL_50;
            }
            sub_10009895C();
            sub_10003BC58();
          }
        }
        else if (!v31)
        {
LABEL_50:
          v37 = *(_QWORD *)(a1 + 80);
          v38 = *(_QWORD *)(a1 + 88);
          v39 = *(_QWORD *)(a2 + 80);
          v40 = *(_QWORD *)(a2 + 88);
          if (v37 == v39 && v38 == v40)
            return 1;
          else
            return _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100544658@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  void *v9;
  _BYTE v10[224];
  _BYTE v11[24];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v3 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v3, v10);
  *(_OWORD *)(inited + 16) = xmmword_1009891D0;
  *(_QWORD *)(inited + 32) = 0x6D496D6574737973;
  *(_QWORD *)(inited + 40) = 0xEF656D614E656761;
  v14 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x656C746974;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v5 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x6567617373656DLL;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  v12 = *(_OWORD *)(v1 + 40);
  v13 = v5;
  *(_OWORD *)(inited + 144) = v12;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 0x6E6F69746361;
  *(_QWORD *)(inited + 184) = 0xE600000000000000;
  sub_100545E00(v1 + 56, (uint64_t)v11);
  sub_100545E00((uint64_t)v11, (uint64_t)&v15);
  if (v16)
  {
    sub_100545E70(&v15, (uint64_t)&v17);
    v9 = &unk_100B7EE40;
    sub_100545E70(&v17, (uint64_t)&v8);
    sub_10011E834(&v8, (_OWORD *)(inited + 192));
  }
  else
  {
    *(_QWORD *)(inited + 216) = &type metadata for String;
    *(_QWORD *)(inited + 192) = 7104878;
    *(_QWORD *)(inited + 200) = 0xE300000000000000;
  }
  sub_1002BDF74((uint64_t)&v14);
  sub_1002BDF74((uint64_t)&v13);
  sub_1002BDF74((uint64_t)&v12);
  sub_100545E48((uint64_t)v11);
  v6 = Dictionary.init(dictionaryLiteral:)(inited);
  a1[3] = sub_1000BA294(&qword_100BEE988);
  a1[4] = sub_10005F1A0(&qword_100BEE990, &qword_100BEE988);
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(0xD000000000000016, 0x8000000100A09CA0, v6, &unk_100B7EBE8);
}

uint64_t sub_100544860(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100B5AB68, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_1005448B0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656369746F6ELL;
  else
    return 0x616D7269666E6F63;
}

void sub_1005448EC(char *a1, unsigned __int8 *a2)
{
  sub_10068AC3C(*a1, *a2);
}

void sub_1005448F8()
{
  sub_1004A76C4();
}

double sub_100544900(uint64_t a1)
{
  char *v1;

  return sub_1001D8730(a1, *v1);
}

void sub_100544908(uint64_t a1)
{
  sub_1001DA004(a1);
}

uint64_t sub_100544910@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100544860(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10054493C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1005448B0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100544964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100546628();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1005449C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100546628();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100544A0C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x747465536E65706FLL && a2 == 0xEC00000073676E69)
  {
    swift_bridgeObjectRelease(0xEC00000073676E69);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x747465536E65706FLL, 0xEC00000073676E69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100544AA8()
{
  return 0x747465536E65706FLL;
}

uint64_t sub_100544AC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100544B8C(char a1)
{
  if ((a1 & 1) != 0)
    return 12639;
  else
    return 12383;
}

uint64_t sub_100544BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100544A0C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100544BD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545F00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100544BF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545F00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100544C20()
{
  char *v0;

  return sub_100544B8C(*v0);
}

uint64_t sub_100544C28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100544AC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100544C4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545F3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100544C74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545F3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100544C9C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  char v16;

  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D496D6574737973 && a2 == 0xEF656D614E656761)
  {
    v8 = 0xEF656D614E656761;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D496D6574737973, 0xEF656D614E656761, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    v14 = 0xE600000000000000;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x6F43746E65636361 && a2 == 0xEE00786548726F6CLL)
  {
    swift_bridgeObjectRelease(0xEE00786548726F6CLL);
    return 5;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65636361, 0xEE00786548726F6CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100544F30(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100544F5C + 4 * byte_1009AC7E0[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_100544F5C()
{
  return 0x6D496D6574737973;
}

uint64_t sub_100544F80()
{
  return 0x656C746974;
}

uint64_t sub_100544F94()
{
  return 0x6567617373656DLL;
}

uint64_t sub_100544FAC()
{
  return 0x6E6F69746361;
}

uint64_t sub_100544FC0()
{
  return 0x6F43746E65636361;
}

uint64_t sub_100544FE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[31];
  char v23;
  _BYTE v24[24];

  v4 = v1;
  v6 = sub_1000BA294(&qword_100BEEA18);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100079FBC();
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_100545FF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MessageCoverViewModel.CodingKeys, &type metadata for MessageCoverViewModel.CodingKeys, v10, v8, v9);
  v22[0] = *(_BYTE *)v4;
  v23 = 0;
  sub_1005460A4();
  v11 = sub_1000B4AF4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v11, v12, v13, v14, v15);
  if (!v2)
  {
    sub_1000BB084(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), 1);
    sub_1000BB084(*(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), 2);
    sub_1000BB084(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), 3);
    sub_100545E00(v4 + 56, (uint64_t)v24);
    sub_100545E00((uint64_t)v24, (uint64_t)v22);
    v23 = 4;
    sub_1005460E0();
    v16 = sub_1000B4AF4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, v17, v18, v19, v20);
    sub_1000BB084(*(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), 5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

void sub_100545158(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v6 = sub_1000BA294(&qword_100BEE9F8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10009E540();
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_100545FF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MessageCoverViewModel.CodingKeys, &type metadata for MessageCoverViewModel.CodingKeys, v10, v8, v9);
  if (v2)
  {
    sub_1000B4838();
  }
  else
  {
    sub_10054602C();
    sub_1000D9F3C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v12, v13);
    v14 = sub_1000C2C18();
    v16 = v15;
    v32 = v14;
    swift_bridgeObjectRetain();
    v31 = sub_1000C2C18();
    v37 = v34;
    LOBYTE(v34) = 3;
    v18 = v17;
    swift_bridgeObjectRetain();
    v33 = v18;
    v30 = sub_1000C2C18();
    v20 = v19;
    sub_100546068();
    swift_bridgeObjectRetain();
    sub_1000D9F3C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, v22, v23, v24);
    swift_bridgeObjectRetain();
    v25 = sub_1000C2C18();
    v27 = v26;
    v28 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v29 = v25;
    v28(v3, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100075DF4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B4838();
    swift_bridgeObjectRelease();
    sub_10009934C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100075DF4();
    *(_BYTE *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v32;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v31;
    *(_QWORD *)(a2 + 32) = v33;
    *(_QWORD *)(a2 + 40) = v30;
    *(_QWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 56) = v34;
    *(_QWORD *)(a2 + 64) = v35;
    *(_QWORD *)(a2 + 72) = v36;
    *(_QWORD *)(a2 + 80) = v29;
    *(_QWORD *)(a2 + 88) = v27;
  }
  sub_1000B44B0();
}

uint64_t sub_100545478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10;

  sub_10068A9C0();
  if ((v10 & 1) == 0)
    return 0;
  if (a2 == a5 && a3 == a6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5);
}

uint64_t sub_1005454F0()
{
  unsigned __int8 *v0;

  return sub_100544F30(*v0);
}

uint64_t sub_1005454F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100544C9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10054551C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545FF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100545544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545FF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10054556C(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[96];

  sub_100545158(a1, (uint64_t)v4);
  if (!v2)
    memcpy(a2, v4, 0x60uLL);
}

uint64_t sub_1005455B4(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[96];

  memcpy(v4, v1, sizeof(v4));
  return sub_100544FE4(a1);
}

uint64_t sub_100545604(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100545478(*a1, *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), *a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
}

uint64_t sub_100545620@<X0>(_QWORD *a1@<X8>)
{
  const void *v1;
  _BYTE v4[96];

  memcpy(v4, v1, sizeof(v4));
  return sub_100544658(a1);
}

uint64_t sub_100545660(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545E88();
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_100545688@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v4, &v8);
  *(_OWORD *)(inited + 16) = xmmword_10097CA50;
  *(_QWORD *)(inited + 32) = 28532;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for SystemSettingLocation;
  *(_BYTE *)(inited + 48) = a1;
  v6 = Dictionary.init(dictionaryLiteral:)(inited);
  a2[3] = sub_1000BA294(&qword_100BEE9A0);
  a2[4] = sub_10005F1A0(&qword_100BEE9A8, &qword_100BEE9A0);
  sub_10005F164(a2);
  return ShortDescription.init(name:_:)(0x747465536E65706FLL, 0xEC00000073676E69, v6, &unk_100B7EE40);
}

void sub_100545778(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v19 = a4;
  v18 = a3;
  v7 = sub_1000BA294(&qword_100BEE9E0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v8 = sub_1000BA294(&qword_100BEE9E8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_100545F00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MessageCoverViewModel.Action.CodingKeys, &type metadata for MessageCoverViewModel.Action.CodingKeys, v14, v12, v13);
  sub_100545F3C();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys, v15, v8, &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys);
  v24 = a2;
  v23 = 0;
  v16 = sub_100545FB4();
  v17 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v7, &type metadata for SystemSettingLocation, v16);
  if (!v17)
  {
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v22, v7);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v4, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_1000B44B0();
}

uint64_t sub_100545900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[2];

  v35 = sub_1000BA294(&qword_100BEE9B8);
  v2 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100079FBC();
  v3 = sub_1000BA294(&qword_100BEE9C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = sub_100545F00();
  v10 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MessageCoverViewModel.Action.CodingKeys, &type metadata for MessageCoverViewModel.Action.CodingKeys, v9, v7, v8);
  if (v10)
    goto LABEL_6;
  v32 = v2;
  v33 = a1;
  v11 = v35;
  v34 = v4;
  v36 = v3;
  v12 = KeyedDecodingContainer.allKeys.getter(v3);
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14
    || (v15 = sub_10055FF58(1, v14, v12, v12 + 32, 0, (2 * v14) | 1),
        v17 = v16,
        v19 = v18,
        swift_bridgeObjectRelease(),
        v13 = v15,
        v17 != v19 >> 1))
  {
    v8 = v13;
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v23 = v22;
    sub_1000BA294(&qword_100BC6CF8);
    *v23 = &unk_100B7EE40;
    v24 = v36;
    v25 = KeyedDecodingContainer.codingPath.getter(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v26, v27);
    swift_unknownObjectRelease(v8);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v24);
    a1 = v33;
LABEL_6:
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
    return v8;
  }
  sub_100545F3C();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys, v20, v36, &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys);
  v38[0] = 0;
  sub_100545F78();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for SystemSettingLocation, v38, v11);
  v8 = v38[1];
  v37 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v37, v11);
  sub_1000C4B30(v32);
  sub_1000BD540();
  v29 = sub_1000DF724();
  v30(v29);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v33);
  return v8;
}

uint64_t sub_100545C28@<X0>(_QWORD *a1@<X8>)
{
  char *v1;

  return sub_100545688(*v1, a1);
}

uint64_t sub_100545C30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100545EC4();
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_100545C58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100545900(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

void sub_100545C84(_QWORD *a1)
{
  uint64_t v1;

  sub_100545778(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_100545CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100696500(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

void sub_100545CCC(uint64_t a1)
{
  uint64_t v1;

  sub_1006965C4(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

void sub_100545CE8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[96];

  sub_100696630(a1, (uint64_t)v4);
  if (!v2)
    memcpy(a2, v4, 0x60uLL);
}

void sub_100545D30(uint64_t a1)
{
  const void *v1;
  _BYTE v3[96];

  memcpy(v3, v1, sizeof(v3));
  sub_100696774(a1);
}

unint64_t sub_100545D84()
{
  unint64_t result;

  result = qword_100BEE970;
  if (!qword_100BEE970)
  {
    result = swift_getWitnessTable(&unk_1009AC9B8, &unk_100B7EE40);
    atomic_store(result, (unint64_t *)&qword_100BEE970);
  }
  return result;
}

unint64_t sub_100545DC4()
{
  unint64_t result;

  result = qword_100BEE978;
  if (!qword_100BEE978)
  {
    result = swift_getWitnessTable(&unk_1009ACA10, &unk_100B7EBE8);
    atomic_store(result, (unint64_t *)&qword_100BEE978);
  }
  return result;
}

uint64_t sub_100545E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BEE980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100545E48(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_100545E70(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a1 + 2);
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_100545E88()
{
  unint64_t result;

  result = qword_100BEE998;
  if (!qword_100BEE998)
  {
    result = swift_getWitnessTable(&unk_1009ACA38, &unk_100B7EBE8);
    atomic_store(result, (unint64_t *)&qword_100BEE998);
  }
  return result;
}

unint64_t sub_100545EC4()
{
  unint64_t result;

  result = qword_100BEE9B0;
  if (!qword_100BEE9B0)
  {
    result = swift_getWitnessTable(&unk_1009AC9E0, &unk_100B7EE40);
    atomic_store(result, (unint64_t *)&qword_100BEE9B0);
  }
  return result;
}

unint64_t sub_100545F00()
{
  unint64_t result;

  result = qword_100BEE9C8;
  if (!qword_100BEE9C8)
  {
    result = swift_getWitnessTable(&unk_1009ACEAC, &type metadata for MessageCoverViewModel.Action.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEE9C8);
  }
  return result;
}

unint64_t sub_100545F3C()
{
  unint64_t result;

  result = qword_100BEE9D0;
  if (!qword_100BEE9D0)
  {
    result = swift_getWitnessTable(&unk_1009ACE5C, &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEE9D0);
  }
  return result;
}

unint64_t sub_100545F78()
{
  unint64_t result;

  result = qword_100BEE9D8;
  if (!qword_100BEE9D8)
  {
    result = swift_getWitnessTable(&unk_10098A730, &type metadata for SystemSettingLocation);
    atomic_store(result, (unint64_t *)&qword_100BEE9D8);
  }
  return result;
}

unint64_t sub_100545FB4()
{
  unint64_t result;

  result = qword_100BEE9F0;
  if (!qword_100BEE9F0)
  {
    result = swift_getWitnessTable(&unk_10098A708, &type metadata for SystemSettingLocation);
    atomic_store(result, (unint64_t *)&qword_100BEE9F0);
  }
  return result;
}

unint64_t sub_100545FF0()
{
  unint64_t result;

  result = qword_100BEEA00;
  if (!qword_100BEEA00)
  {
    result = swift_getWitnessTable(&unk_1009ACE0C, &type metadata for MessageCoverViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA00);
  }
  return result;
}

unint64_t sub_10054602C()
{
  unint64_t result;

  result = qword_100BEEA08;
  if (!qword_100BEEA08)
  {
    result = swift_getWitnessTable(&unk_1009ACDE4, &unk_100B7EED0);
    atomic_store(result, (unint64_t *)&qword_100BEEA08);
  }
  return result;
}

unint64_t sub_100546068()
{
  unint64_t result;

  result = qword_100BEEA10;
  if (!qword_100BEEA10)
  {
    result = swift_getWitnessTable(&unk_1009AC990, &unk_100B7EE40);
    atomic_store(result, (unint64_t *)&qword_100BEEA10);
  }
  return result;
}

unint64_t sub_1005460A4()
{
  unint64_t result;

  result = qword_100BEEA20;
  if (!qword_100BEEA20)
  {
    result = swift_getWitnessTable(&unk_1009ACDBC, &unk_100B7EED0);
    atomic_store(result, (unint64_t *)&qword_100BEEA20);
  }
  return result;
}

unint64_t sub_1005460E0()
{
  unint64_t result;

  result = qword_100BEEA28;
  if (!qword_100BEEA28)
  {
    result = swift_getWitnessTable(&unk_1009AC968, &unk_100B7EE40);
    atomic_store(result, (unint64_t *)&qword_100BEEA28);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MessageCoverViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100546168 + 4 * byte_1009AC7EB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10054619C + 4 * byte_1009AC7E6[v4]))();
}

uint64_t sub_10054619C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005461A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005461ACLL);
  return result;
}

uint64_t sub_1005461B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005461C0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1005461C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005461CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageCoverViewModel.CodingKeys()
{
  return &type metadata for MessageCoverViewModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MessageCoverViewModel.Action.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100546228 + 4 * byte_1009AC7F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100546248 + 4 * byte_1009AC7F5[v4]))();
}

_BYTE *sub_100546228(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100546248(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100546250(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100546258(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100546260(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100546268(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MessageCoverViewModel.Action.CodingKeys()
{
  return &type metadata for MessageCoverViewModel.Action.CodingKeys;
}

ValueMetadata *type metadata accessor for MessageCoverViewModel.Action.OpenSettingsCodingKeys()
{
  return &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys;
}

uint64_t sub_1005462A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void type metadata accessor for MessageCoverViewModel.Action()
{
  sub_100098884();
}

uint64_t _s7Weather21MessageCoverViewModelV6ActionO22OpenSettingsCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10054632C + 4 * byte_1009AC7FF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100546360 + 4 * byte_1009AC7FA[v4]))();
}

uint64_t sub_100546360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100546368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100546370);
  return result;
}

uint64_t sub_10054637C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100546384);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100546388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100546390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for MessageCoverViewModel.Kind()
{
  sub_100098884();
}

unint64_t sub_1005463AC()
{
  unint64_t result;

  result = qword_100BEEA30;
  if (!qword_100BEEA30)
  {
    result = swift_getWitnessTable(&unk_1009ACB6C, &unk_100B7EED0);
    atomic_store(result, (unint64_t *)&qword_100BEEA30);
  }
  return result;
}

unint64_t sub_1005463EC()
{
  unint64_t result;

  result = qword_100BEEA38;
  if (!qword_100BEEA38)
  {
    result = swift_getWitnessTable(&unk_1009ACC24, &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA38);
  }
  return result;
}

unint64_t sub_10054642C()
{
  unint64_t result;

  result = qword_100BEEA40;
  if (!qword_100BEEA40)
  {
    result = swift_getWitnessTable(&unk_1009ACCDC, &type metadata for MessageCoverViewModel.Action.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA40);
  }
  return result;
}

unint64_t sub_10054646C()
{
  unint64_t result;

  result = qword_100BEEA48;
  if (!qword_100BEEA48)
  {
    result = swift_getWitnessTable(&unk_1009ACD94, &type metadata for MessageCoverViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA48);
  }
  return result;
}

unint64_t sub_1005464AC()
{
  unint64_t result;

  result = qword_100BEEA50;
  if (!qword_100BEEA50)
  {
    result = swift_getWitnessTable(&unk_1009ACD04, &type metadata for MessageCoverViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA50);
  }
  return result;
}

unint64_t sub_1005464EC()
{
  unint64_t result;

  result = qword_100BEEA58;
  if (!qword_100BEEA58)
  {
    result = swift_getWitnessTable(&unk_1009ACD2C, &type metadata for MessageCoverViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA58);
  }
  return result;
}

unint64_t sub_10054652C()
{
  unint64_t result;

  result = qword_100BEEA60;
  if (!qword_100BEEA60)
  {
    result = swift_getWitnessTable(&unk_1009ACB94, &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA60);
  }
  return result;
}

unint64_t sub_10054656C()
{
  unint64_t result;

  result = qword_100BEEA68;
  if (!qword_100BEEA68)
  {
    result = swift_getWitnessTable(&unk_1009ACBBC, &type metadata for MessageCoverViewModel.Action.OpenSettingsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA68);
  }
  return result;
}

unint64_t sub_1005465AC()
{
  unint64_t result;

  result = qword_100BEEA70;
  if (!qword_100BEEA70)
  {
    result = swift_getWitnessTable(&unk_1009ACC4C, &type metadata for MessageCoverViewModel.Action.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA70);
  }
  return result;
}

unint64_t sub_1005465EC()
{
  unint64_t result;

  result = qword_100BEEA78;
  if (!qword_100BEEA78)
  {
    result = swift_getWitnessTable(&unk_1009ACC74, &type metadata for MessageCoverViewModel.Action.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEA78);
  }
  return result;
}

unint64_t sub_100546628()
{
  unint64_t result;

  result = qword_100BEEA80;
  if (!qword_100BEEA80)
  {
    result = swift_getWitnessTable(&unk_1009ACAF4, &unk_100B7EED0);
    atomic_store(result, (unint64_t *)&qword_100BEEA80);
  }
  return result;
}

void sub_100546664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = sub_10009C160();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v23 = v3;
  v26 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  v4 = __chkstk_darwin(v26);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - v6;
  __chkstk_darwin(v5);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    sub_10009EF94();
    return;
  }
  v22 = v9;
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = *(_QWORD *)(v8 + 72);
  sub_10009EF94();
  v15 = 0;
  v25 = a1;
  v16 = v23;
  while (1)
  {
    sub_100095B78(a1 + v13, (uint64_t)v11, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    sub_100095B78((uint64_t)v11, (uint64_t)v7, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    if (swift_getEnumCaseMultiPayload(v7) != 2)
    {
      sub_100110748((uint64_t)v7);
      sub_100110748((uint64_t)v11);
      goto LABEL_7;
    }
    v17 = v14;
    sub_1000D0D68((uint64_t)v7, v16);
    v18 = *(_BYTE *)(v16 + *(int *)(v24 + 60));
    sub_1000979AC(v16, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
    sub_100110748((uint64_t)v11);
    if ((v18 & 1) != 0)
      break;
LABEL_7:
    ++v15;
    v13 += v14;
    a1 = v25;
    if (v12 == v15)
      return;
  }
  if (v15 >= v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v19 = v25;
  v17 = v22;
  sub_100546A5C(v22);
  if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
  {
LABEL_15:
    sub_1008670A0();
    v19 = v20;
  }
  if (v15 >= *(_QWORD *)(v19 + 16))
    __break(1u);
  else
    sub_100549F9C(v17, v19 + v13);
}

double sub_10054687C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v13;

  v1 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = (double *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_1000995B8(v6, v7, v13);
  if (sub_10009D644(v0) > 1)
  {
    sub_10007C77C(v0, (uint64_t)v4, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
    if ((*((_BYTE *)v4 + *(int *)(v1 + 60)) & 1) == 0)
    {
      v11 = v4[5];
      sub_10009C968(v10, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
      return v11;
    }
    v8 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
    v9 = (uint64_t)v4;
  }
  else
  {
    v8 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem;
    v9 = v0;
  }
  sub_1000979AC(v9, v8);
  return 0.0;
}

void sub_100546978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Double *v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v1);
  v3 = (Swift::Double *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000995B8(v5, v6, v7);
  if (sub_10009D644(v0) > 1)
  {
    sub_1000B2F40(v0, (uint64_t)v3);
    Precipitation.accessibilityDescription(with:)(v3[5]);
    sub_1000952E8();
  }
  else
  {
    sub_1000979AC(v0, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  }
  sub_1000B3154();
  sub_10004A2A0();
}

void sub_100546A5C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;

  v3 = type metadata accessor for TimeZone(0);
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  __chkstk_darwin(v3);
  v54 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v51 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Precipitation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(v1, (uint64_t)v13, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  if (swift_getEnumCaseMultiPayload(v13) == 2)
  {
    sub_10007C77C((uint64_t)v13, (uint64_t)v16, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
    v17 = v14[14];
    v18 = &v16[v14[13]];
    v48 = a1;
    v19 = &v16[v17];
    v20 = Date.formattedHours(timeZone:forAccessibility:)(&v16[v17], 0);
    v40 = v21;
    v41 = v20;
    v22 = *(_QWORD *)v16;
    v23 = *((_QWORD *)v16 + 1);
    v46 = *((_QWORD *)v16 + 2);
    v47 = v22;
    v43 = *((_QWORD *)v16 + 3);
    v44 = *((_QWORD *)v16 + 4);
    v45 = v23;
    v24 = *((double *)v16 + 5);
    v42 = v16[48];
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v16[v14[9]], v7);
    v25 = (uint64_t *)&v16[v14[10]];
    v26 = v25[1];
    v39 = *v25;
    v27 = (uint64_t *)&v16[v14[12]];
    v29 = *v27;
    v28 = v27[1];
    v30 = v51;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v51, v18, v50);
    v31 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v54, v19, v53);
    v32 = v16[v14[15]];
    v33 = *(_QWORD *)&v16[v14[16]];
    v38 = (uint64_t)v30;
    v37 = v29;
    v34 = v48;
    v35 = v46;
    v36 = v44;
    sub_100547820(v47, v45, v46, v43, v44, v42, (uint64_t)v10, v39, v48, v24, v26, v41, v40, v37, v28, v38, v31, v32, v33);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v33);
    sub_1000979AC((uint64_t)v16, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
    swift_storeEnumTagMultiPayload(v34, v11, 2);
  }
  else
  {
    sub_1000979AC((uint64_t)v13, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    sub_100095B78(v1, a1, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  }
}

void sub_100546D8C(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0),
        (sub_10054C578(v4[5]) & 1) != 0)
    && (sub_10009B4AC(*(_QWORD **)(a1 + v4[6]), *(_QWORD **)(a2 + v4[6])), (v5 & 1) != 0)
    && ((v6 = sub_1000BA7EC(v4[7]), v10) ? (v10 = v7 == v9) : (v10 = 0),
        (v10 || (sub_100099264(v6, v7, v8, v9) & 1) != 0)
     && ((v11 = sub_1000BA7EC(v4[8]), v10) ? (v15 = v12 == v14) : (v15 = 0), !v15)))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13);
  }
  else
  {
    sub_100079F70();
  }
}

double sub_100546E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100098778();
  sub_100086DA4((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v1 = sub_10054C56C();
  dispatch thunk of Hashable.hash(into:)(v1, v2, v3);
  v4 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  sub_100099928();
  sub_100086DA4(&qword_100BCBA30, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
  sub_1000D1358(v5);
  sub_1000FDBC0(v4[6]);
  sub_1000BDD3C();
  swift_bridgeObjectRelease();
  sub_1000D90DC(v4[7]);
  sub_1000D9714();
  sub_100075DF4();
  v6 = *(_QWORD *)(v0 + v4[8] + 8);
  swift_bridgeObjectRetain();
  v7 = sub_1000BCF4C();
  String.hash(into:)(v7, v8, v6);
  return sub_10011033C(v6);
}

uint64_t sub_100546F08(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  char v12;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F5A656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x8000000100A09D00;
    if (a2 == 0x8000000100A09D00)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100A09D00, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x74786554656D6974 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74786554656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100A09D20)
  {
    swift_bridgeObjectRelease(0x8000000100A09D20);
    return 4;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100A09D20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100547100(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10054712C + 4 * byte_1009ACF10[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_10054712C()
{
  return 0x656E6F5A656D6974;
}

unint64_t sub_100547144()
{
  return 0xD000000000000011;
}

uint64_t sub_100547160()
{
  return 0x74786554656D6974;
}

unint64_t sub_100547178()
{
  return 0xD000000000000015;
}

void sub_100547198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;

  v3 = v0;
  v4 = sub_1000BA294(&qword_100BEED90);
  sub_100099300();
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v8 = sub_10054BC10();
  sub_1000B44E8((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys, v9, v8);
  v30 = 0;
  v10 = sub_100098778();
  sub_100086DA4(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  sub_1000C26D4(v3, (uint64_t)&v30, v4, v10, v11);
  if (!v1)
  {
    v12 = (int *)sub_1000EFA0C();
    v13 = v3 + v12[5];
    v29 = 1;
    v14 = sub_100099928();
    sub_100086DA4(&qword_100BEED98, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    sub_1000C26D4(v13, (uint64_t)&v29, v4, v14, v15);
    v28 = *(_QWORD *)(v3 + v12[6]);
    v27 = 2;
    v16 = sub_1000BA294(&qword_100BF1280);
    v17 = sub_10054BC4C(&qword_100BEEDA0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_1000C26D4((uint64_t)&v28, (uint64_t)&v27, v4, v16, v17);
    v18 = (uint64_t *)(v3 + v12[7]);
    v19 = *v18;
    v20 = v18[1];
    v26 = 3;
    sub_1000BA804(v19, v20, (uint64_t)&v26);
    v21 = (uint64_t *)(v3 + v12[8]);
    v22 = *v21;
    v23 = v21[1];
    v25 = 4;
    sub_1000BA804(v22, v23, (uint64_t)&v25);
  }
  sub_100098820((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100089054();
}

void sub_100547374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  sub_100099310();
  a25 = v28;
  a26 = v29;
  v31 = v30;
  v53 = v32;
  v33 = sub_100099928();
  v55 = *(_QWORD *)(v33 - 8);
  v56 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_100098678(v35, v52);
  v57 = sub_100098778();
  v36 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_100088FDC();
  v58 = v37;
  v59 = sub_1000BA294(&qword_100BEED70);
  v38 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v39 = sub_1000BE9F0();
  v40 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(v39);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_100079F58();
  v42 = v31[3];
  v43 = v31[4];
  sub_1000DB418(v31, v42);
  v44 = sub_10054BC10();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys, v44, v42, v43);
  if (v27)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
  }
  else
  {
    a16 = 0;
    sub_100086DA4(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    sub_1000B3108(v57, (uint64_t)&a16, v59, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v26, v58, v57);
    a15 = 1;
    sub_100086DA4(&qword_100BEED80, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    sub_1000B3108(v56, (uint64_t)&a15, v59, v56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v26 + v40[5], v54, v56);
    v45 = sub_1000BA294(&qword_100BF1280);
    a14 = 2;
    sub_10054BC4C(&qword_100BEED88, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45, &a14, v59);
    *(_QWORD *)(v26 + v40[6]) = v60;
    a13 = 3;
    v46 = sub_1000E7CA4((uint64_t)&a13, v59);
    sub_1001173B4(v46, v47, v40[7]);
    a12 = 4;
    v48 = sub_1000E7CA4((uint64_t)&a12, v59);
    v50 = v49;
    sub_1000BE92C(v38);
    v51 = (uint64_t *)(v26 + v40[8]);
    *v51 = v48;
    v51[1] = v50;
    sub_100095B78(v26, v53, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v31);
    sub_1000979AC(v26, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
  }
  sub_1000B44B0();
}

uint64_t sub_10054774C()
{
  unsigned __int8 *v0;

  return sub_100547100(*v0);
}

uint64_t sub_100547754@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100546F08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100547778(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BC10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005477A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BC10();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1005477D0: call analysis failed (funcsize=5)"

void sub_1005477DC()
{
  sub_100547198();
}

void sub_1005477F4()
{
  sub_10054930C((void (*)(_BYTE *))sub_100546E30);
}

void sub_100547814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100549BF8(a1, a2, a3, (void (*)(_BYTE *))sub_100546E30);
}

uint64_t sub_100547820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t result;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(double *)(a9 + 40) = a10;
  *(_BYTE *)(a9 + 48) = a6;
  v22 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  v23 = a9 + v22[9];
  v24 = sub_10009BFE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a7, v24);
  v25 = (_QWORD *)(a9 + v22[10]);
  *v25 = a8;
  v25[1] = a11;
  v26 = (_QWORD *)(a9 + v22[11]);
  *v26 = a12;
  v26[1] = a13;
  v27 = (_QWORD *)(a9 + v22[12]);
  *v27 = a14;
  v27[1] = a15;
  sub_100098778();
  v28 = sub_100087930();
  v29(v28, a16);
  sub_100099928();
  v30 = sub_100087930();
  result = v31(v30, a17);
  *(_BYTE *)(a9 + v22[15]) = a18;
  *(_QWORD *)(a9 + v22[16]) = a19;
  return result;
}

uint64_t sub_100547948(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;
  char v25;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xED00006E6F63496ELL)
  {
    v8 = 0xED00006E6F63496ELL;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xED00006E6F63496ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000014)
  {
    v9 = 0x8000000100A09D40;
    if (a2 == 0x8000000100A09D40)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100A09D40, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100A09D60)
  {
    v10 = 0x8000000100A09D60;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100A09D60, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_27;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x8000000100A09D80;
    if (a2 == 0x8000000100A09D80)
      goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100A09D80, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461)
  {
    v13 = 0xED00006E6F697461;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469706963657270, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v13);
    return 5;
  }
  if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275)
  {
    v15 = 0xEB00000000657275;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617265706D6574, 0xEB00000000657275, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v15);
    return 6;
  }
  if (a1 == 0x74786554656D6974 && a2 == 0xE800000000000000)
  {
    v17 = 0xE800000000000000;
    goto LABEL_56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74786554656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v17);
    return 7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100A09D20)
  {
    v18 = 0x8000000100A09D20;
LABEL_62:
    swift_bridgeObjectRelease(v18);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100A09D20, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_62;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v20 = 0xE400000000000000;
    goto LABEL_70;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v20);
    return 9;
  }
  if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    v22 = 0xE800000000000000;
    goto LABEL_78;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F5A656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_78:
    swift_bridgeObjectRelease(v22);
    return 10;
  }
  if (a1 == 0x776F4E7369 && a2 == 0xE500000000000000)
  {
    v24 = 0xE500000000000000;
    goto LABEL_86;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F4E7369, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v24);
    return 11;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100A09D00)
  {
    swift_bridgeObjectRelease(0x8000000100A09D00);
    return 12;
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100A09D00, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v25 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_100547E64(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100547E8C + 4 * byte_1009ACF15[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_100547E8C()
{
  return 0x6F697469646E6F63;
}

unint64_t sub_100547EB0()
{
  return 0xD000000000000014;
}

void sub_100547FD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_1000BA294(&qword_100BEEDC0);
  sub_100099300();
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v7 = sub_10054BCAC();
  sub_1000B44E8((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys, v8, v7);
  v9 = *v0;
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v19, v3);
  if (!v1)
  {
    v10 = v0[1];
    v11 = v0[2];
    LOBYTE(v19) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10, v11, &v19, v3);
    sub_1000BB09C(v0[3], v0[4], 2);
    LOBYTE(v19) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v19, v3);
    sub_1000BAFCC(*((unsigned __int8 *)v0 + 48), 4);
    v12 = (int *)sub_10009C160();
    LOBYTE(v19) = 5;
    type metadata accessor for Precipitation(0);
    sub_100086DA4(&qword_100BEEDC8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, (uint64_t)&protocol conformance descriptor for Precipitation);
    sub_1000CCED0(v13);
    sub_1000BB09C(*(uint64_t *)((char *)v0 + v12[10]), *(uint64_t *)((char *)v0 + v12[10] + 8), 6);
    sub_1000BB09C(*(uint64_t *)((char *)v0 + v12[11]), *(uint64_t *)((char *)v0 + v12[11] + 8), 7);
    sub_1000BB09C(*(uint64_t *)((char *)v0 + v12[12]), *(uint64_t *)((char *)v0 + v12[12] + 8), 8);
    LOBYTE(v19) = 9;
    sub_100098778();
    sub_100086DA4(&qword_100BC3578, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    sub_1000CCED0(v14);
    LOBYTE(v19) = 10;
    sub_100099928();
    sub_100086DA4(&qword_100BEED98, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    sub_1000CCED0(v15);
    sub_1000BAFCC(*((unsigned __int8 *)v0 + v12[15]), 11);
    v19 = *(uint64_t *)((char *)v0 + v12[16]);
    HIBYTE(v18) = 12;
    v16 = sub_1000BA294(&qword_100BF1280);
    v17 = sub_10054BC4C(&qword_100BEEDA0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, (char *)&v18 + 7, v3, v16, v17);
  }
  sub_100098820((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100089054();
}

void sub_10054829C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int *v70;
  char v71;

  sub_100099310();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  v60 = v28;
  v64 = sub_100099928();
  v62 = *(_QWORD *)(v64 - 8);
  sub_10009D98C();
  __chkstk_darwin(v29);
  v30 = sub_1000C1E78();
  v65 = type metadata accessor for Date(v30);
  v63 = *(_QWORD *)(v65 - 8);
  sub_10009D98C();
  __chkstk_darwin(v31);
  v32 = sub_1000BD1E4();
  v33 = type metadata accessor for Precipitation(v32);
  v66 = *(_QWORD *)(v33 - 8);
  v67 = v33;
  sub_10009D98C();
  __chkstk_darwin(v34);
  sub_10007A130();
  v61 = sub_1000BA294(&qword_100BEEDA8);
  sub_100099300();
  __chkstk_darwin(v35);
  v36 = sub_1000BE9F0();
  v70 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(v36);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v68 = v27;
  v69 = v38;
  v40 = v27[3];
  v39 = v27[4];
  sub_1000DB418(v27, v40);
  v41 = sub_10054BCAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys, v41, v40, v39);
  if (v21)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
  }
  else
  {
    LOBYTE(a10) = 0;
    *(_QWORD *)v69 = KeyedDecodingContainer.decode(_:forKey:)(&a10, v61);
    v42 = sub_1000CDD10(1);
    *(_QWORD *)(v69 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v42, v43);
    *(_QWORD *)(v69 + 16) = v44;
    LOBYTE(a10) = 2;
    *(_QWORD *)(v69 + 24) = sub_1000E7CA4((uint64_t)&a10, v61);
    *(_QWORD *)(v69 + 32) = v45;
    v46 = sub_1000CDD10(3);
    KeyedDecodingContainer.decode(_:forKey:)(v46, v47);
    *(_QWORD *)(v69 + 40) = v48;
    v49 = sub_1000CDD10(4);
    *(_BYTE *)(v69 + 48) = KeyedDecodingContainer.decode(_:forKey:)(v49, v50) & 1;
    LOBYTE(a10) = 5;
    sub_100086DA4(&qword_100BEEDB8, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, (uint64_t)&protocol conformance descriptor for Precipitation);
    sub_1000B3108(v67, (uint64_t)&a10, v61, v67);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v69 + v70[9], v23, v67);
    LOBYTE(a10) = 6;
    v51 = sub_1000E7CA4((uint64_t)&a10, v61);
    sub_1001173B4(v51, v52, v70[10]);
    LOBYTE(a10) = 7;
    v53 = sub_1000E7CA4((uint64_t)&a10, v61);
    sub_1001173B4(v53, v54, v70[11]);
    LOBYTE(a10) = 8;
    v55 = sub_1000E7CA4((uint64_t)&a10, v61);
    sub_1001173B4(v55, v56, v70[12]);
    LOBYTE(a10) = 9;
    sub_100086DA4(&qword_100BC3558, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    sub_1000B3108(v65, (uint64_t)&a10, v61, v65);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v69 + v70[13], v20, v65);
    LOBYTE(a10) = 10;
    sub_100086DA4(&qword_100BEED80, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    sub_1000B3108(v64, (uint64_t)&a10, v61, v64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v69 + v70[14], v22, v64);
    LOBYTE(a10) = 11;
    *(_BYTE *)(v69 + v70[15]) = KeyedDecodingContainer.decode(_:forKey:)(&a10, v61) & 1;
    v57 = sub_1000BA294(&qword_100BF1280);
    v71 = 12;
    sub_10054BC4C(&qword_100BEED88, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_1000B3108(v57, (uint64_t)&v71, v61, v57);
    sub_1000D01E4();
    *(_QWORD *)(v69 + v70[16]) = a10;
    sub_100095B78(v69, v60, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v68);
    v58 = sub_1000C1A00();
    sub_1000979AC(v58, v59);
  }
  sub_1000B44B0();
}

uint64_t sub_1005488D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD);
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v41 = a2;
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v40 = v5;
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_10009883C();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - v11;
  v13 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_10009883C();
  v17 = v15 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v40 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v40 - v22;
  sub_1000BA294(&qword_100BE55B8);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100079F58();
  v26 = v2 + *(int *)(v25 + 48);
  sub_100095B78(a1, v2, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  sub_100095B78(v41, v26, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  v27 = sub_10009D644(v2);
  if (v27)
  {
    if (v27 == 1)
    {
      sub_100095B78(v2, (uint64_t)v20, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      if (sub_10009D644(v26) == 1)
      {
        v28 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
        sub_1000D0D68(v26, v9);
        sub_100546D8C((uint64_t)v20, v9);
        sub_10011DCD8();
        v29 = (uint64_t)v20;
LABEL_9:
        v36 = v28;
LABEL_14:
        sub_1000979AC(v29, v36);
        sub_10009C968(v38, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
        return v13 & 1;
      }
      v33 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
      v34 = (uint64_t)v20;
    }
    else
    {
      sub_100095B78(v2, v17, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      if (sub_10009D644(v26) == 2)
      {
        v28 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
        v35 = v40;
        sub_1000D0D68(v26, v40);
        sub_100087DD8(v17, v35);
        sub_10011DCD8();
        v29 = v17;
        goto LABEL_9;
      }
      v33 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
      v34 = v17;
    }
  }
  else
  {
    v30 = sub_1000BCF4C();
    sub_100095B78(v30, v31, v32);
    if (!sub_10009D644(v26))
    {
      sub_10009BD30(v26, (uint64_t)v12);
      sub_100546D8C((uint64_t)v23, (uint64_t)v12);
      v13 = v37;
      sub_1000979AC((uint64_t)v12, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
      v29 = sub_1000B3154();
      goto LABEL_14;
    }
    v33 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
    v34 = (uint64_t)v23;
  }
  sub_1000979AC(v34, v33);
  sub_100549B8C(v2);
  v13 = 0;
  return v13 & 1;
}

void sub_100548B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(_QWORD);
  int EnumCaseMultiPayload;
  Swift::UInt v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);

  sub_10008900C();
  a17 = v20;
  a18 = v21;
  v22 = v18;
  v24 = v23;
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  v26 = sub_1000C1E78();
  v27 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(v26);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BEEC4();
  sub_1000B42B0();
  __chkstk_darwin(v31);
  v33 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(v22, (uint64_t)v33, v34);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_10009BD30((uint64_t)v33, v19);
      sub_1000F40F8(2uLL);
      sub_1000D0F30(v24);
      v44 = v19;
      v45 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
      goto LABEL_7;
    }
    sub_10004A3C8();
    v36 = 1;
  }
  else
  {
    sub_10004A3C8();
    v36 = 0;
  }
  sub_1000F40F8(v36);
  v37 = sub_100098778();
  sub_100086DA4((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v24, v37, v38);
  v39 = sub_100099928();
  sub_100086DA4(&qword_100BCBA30, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
  dispatch thunk of Hashable.hash(into:)(v24, v39, v40);
  sub_1000FDBC0(*(int *)(v27 + 24));
  sub_1000BDD3C();
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)&v30[*(int *)(v27 + 28) + 8];
  sub_100094EDC();
  v42 = sub_1000BCF4C();
  String.hash(into:)(v42, v43, v41);
  swift_bridgeObjectRelease();
  sub_1000878DC();
  sub_1000E77B8();
  sub_10009895C();
  v44 = (uint64_t)v30;
  v45 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
LABEL_7:
  sub_1000979AC(v44, v45);
  sub_10009D300();
}

uint64_t sub_100548D6C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x657369726E7573 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657369726E7573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7465736E7573 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465736E7573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1920298856 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1920298856, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100548EA0(char a1)
{
  if (!a1)
    return 0x657369726E7573;
  if (a1 == 1)
    return 0x7465736E7573;
  return 1920298856;
}

uint64_t sub_100548EEC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_100099264(12383, 0xE200000000000000, a1, a2);
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_100548F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  sub_100099310();
  a23 = v27;
  a24 = v28;
  v94 = v25;
  v91 = v24;
  v30 = v29;
  v31 = sub_1000BA294(&qword_100BEED40);
  v88 = *(_QWORD *)(v31 - 8);
  v89 = v31;
  sub_10009D98C();
  __chkstk_darwin(v32);
  sub_100099B54(v33, v79);
  v85 = sub_10009C160();
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100098678(v35, v79);
  v36 = sub_1000BA294(&qword_100BEED48);
  v83 = *(_QWORD *)(v36 - 8);
  v84 = v36;
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_100088FDC();
  v82 = v38;
  v39 = sub_1000BA294(&qword_100BEED50);
  v80 = *(_QWORD *)(v39 - 8);
  v81 = v39;
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_10007A130();
  v90 = sub_1000EFA0C();
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_10009883C();
  v44 = v42 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v79 - v46;
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v48);
  v50 = (char *)&v79 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000BA294(&qword_100BEED58);
  v92 = *(_QWORD *)(v51 - 8);
  v93 = v51;
  sub_10009D98C();
  __chkstk_darwin(v52);
  v54 = (char *)&v79 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v30[3];
  v56 = v30[4];
  sub_1000DB418(v30, v55);
  v57 = sub_10054BB20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys, &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys, v57, v55, v56);
  sub_100095B78(v91, (uint64_t)v50, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  v58 = sub_1000DC11C();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v58);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v60 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
      sub_1000992F8((uint64_t)v50, v44);
      sub_10054C560();
      v61 = v93;
      sub_1000BD9C8((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys, (uint64_t)&a13, v93);
      sub_100086DA4(&qword_100BEED68, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel, (uint64_t)&unk_1009AD164);
      sub_1000B32B0(v44, v63, v84, v90, v62);
      v64 = sub_1000DC11C();
      v65(v64);
      v66 = v44;
    }
    else
    {
      v60 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
      v73 = (uint64_t)v50;
      v74 = v86;
      sub_1000992F8(v73, v86);
      sub_10009E670();
      v75 = v87;
      v61 = v93;
      sub_1000BD9C8((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys, (uint64_t)&a14, v93);
      sub_100086DA4(&qword_100BEED60, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel, (uint64_t)&unk_1009AD0AC);
      v76 = v89;
      sub_1000B32B0(v74, v78, v89, v85, v77);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v75, v76);
      v66 = v74;
    }
    sub_1000979AC(v66, v60);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v54, v61);
  }
  else
  {
    sub_10007C77C((uint64_t)v50, (uint64_t)v47, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
    a12 = 0;
    sub_10054BBD4();
    v67 = v93;
    sub_1000BD9C8((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys, (uint64_t)&a12, v93);
    sub_100086DA4(&qword_100BEED68, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel, (uint64_t)&unk_1009AD164);
    v68 = v81;
    sub_1000B32B0((uint64_t)v47, v70, v81, v90, v69);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v26, v68);
    v71 = sub_10054C56C();
    sub_1000979AC(v71, v72);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v54, v67);
  }
  sub_1000B44B0();
}

void sub_10054930C(void (*a1)(_BYTE *))
{
  _BYTE v2[72];

  sub_1000C4480((uint64_t)a1);
  a1(v2);
  sub_10007A148();
  sub_100098918();
}

void sub_100549338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;

  sub_100099310();
  a23 = v26;
  a24 = v27;
  v115 = v25;
  v29 = v28;
  v108 = v30;
  v107 = sub_1000BA294(&qword_100BEECF0);
  v104 = *(_QWORD *)(v107 - 8);
  sub_10009D98C();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v111 = v32;
  v106 = sub_1000BA294(&qword_100BEECF8);
  v103 = *(_QWORD *)(v106 - 8);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v110 = v34;
  v105 = sub_1000BA294(&qword_100BEED00);
  v102 = *(_QWORD *)(v105 - 8);
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_100099B54(v36, v95);
  v37 = sub_1000BA294(&qword_100BEED08);
  v112 = *(_QWORD *)(v37 - 8);
  v113 = v37;
  sub_10009D98C();
  __chkstk_darwin(v38);
  v39 = sub_1000BD1E4();
  v40 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(v39);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_10009883C();
  v44 = v42 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v95 - v46;
  __chkstk_darwin(v48);
  v50 = (char *)&v95 - v49;
  __chkstk_darwin(v51);
  v53 = (char *)&v95 - v52;
  v54 = v29[3];
  v55 = v29[4];
  v114 = v29;
  sub_1000DB418(v29, v54);
  v56 = sub_10054BB20();
  v57 = v115;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys, &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys, v56, v54, v55);
  if (v57)
    goto LABEL_2;
  v99 = v47;
  v100 = v44;
  v97 = v50;
  v98 = v53;
  v101 = v40;
  v59 = v113;
  v115 = v24;
  v60 = KeyedDecodingContainer.allKeys.getter(v113);
  v61 = *(_QWORD *)(v60 + 16);
  if (!v61)
  {
    v58 = v114;
LABEL_10:
    v70 = v112;
    v71 = v101;
    v72 = type metadata accessor for DecodingError(0);
    swift_allocError(v72, &protocol witness table for DecodingError, 0, 0);
    v74 = v73;
    sub_1000BA294(&qword_100BC6CF8);
    *v74 = v71;
    v75 = v115;
    v76 = KeyedDecodingContainer.codingPath.getter(v59);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v76, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v77 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v74, enum case for DecodingError.typeMismatch(_:), v72);
    swift_willThrow(v77, v78);
    sub_1000C0EBC();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v75, v59);
    goto LABEL_11;
  }
  v96 = 0;
  v62 = v59;
  v63 = *(unsigned __int8 *)(v60 + 32);
  sub_10055FF58(1, v61, v60, v60 + 32, 0, (2 * v61) | 1);
  v65 = v64;
  v67 = v66;
  swift_bridgeObjectRelease();
  if (v65 != v67 >> 1)
  {
    v58 = v114;
    v59 = v62;
    goto LABEL_10;
  }
  if (v63)
  {
    if (v63 == 1)
    {
      sub_10054C560();
      sub_1000DAA50((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys, (uint64_t)&a13);
      v68 = sub_1000EFA0C();
      sub_100086DA4(&qword_100BEED30, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel, (uint64_t)&unk_1009AD18C);
      sub_1000B4B2C(v68, v69);
      v58 = v114;
      sub_1000BC4EC(v103);
      sub_1000C0EBC();
      sub_100098748(v40, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
      v88 = (uint64_t)v99;
      v89 = (uint64_t)v99;
      v90 = v101;
      v91 = 1;
    }
    else
    {
      sub_10009E670();
      sub_1000DAA50((uint64_t)&type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys, (uint64_t)&a14);
      v85 = sub_10009C160();
      sub_100086DA4(&qword_100BEED20, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel, (uint64_t)&unk_1009AD0D4);
      sub_1000B4B2C(v85, v86);
      v58 = v114;
      v87 = v112;
      sub_1000BC4EC(v104);
      sub_1000C0EBC();
      sub_100098748(v40, *(uint64_t (**)(uint64_t, uint64_t))(v87 + 8));
      v88 = v100;
      v90 = v101;
      v89 = v100;
      v91 = 2;
    }
    goto LABEL_16;
  }
  a12 = 0;
  sub_10054BBD4();
  v79 = v109;
  v80 = v96;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys, &a12, v62, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys);
  if (!v80)
  {
    v83 = sub_1000EFA0C();
    sub_100086DA4(&qword_100BEED30, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel, (uint64_t)&unk_1009AD18C);
    v88 = (uint64_t)v97;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v83, v84, v105);
    v58 = v114;
    sub_100098820(v79, *(uint64_t (**)(uint64_t, uint64_t))(v102 + 8));
    sub_1000C0EBC();
    v92 = sub_1000CD838();
    sub_100098748(v92, v93);
    v89 = v88;
    v90 = v101;
    v91 = 0;
LABEL_16:
    swift_storeEnumTagMultiPayload(v89, v90, v91);
    v94 = (uint64_t)v98;
    sub_1000992F8(v88, (uint64_t)v98);
    sub_1000992F8(v94, v108);
    goto LABEL_11;
  }
  sub_1000C0EBC();
  v81 = sub_1000CD838();
  sub_100098748(v81, v82);
LABEL_2:
  v58 = v114;
LABEL_11:
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v58);
  sub_1000B44B0();
}

uint64_t sub_1005498C8()
{
  unsigned __int8 *v0;

  return sub_100547E64(*v0);
}

uint64_t sub_1005498D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100547948(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005498F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BCAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10054991C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BCAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "10054994C: call analysis failed (funcsize=5)"

void sub_100549958()
{
  sub_100547FD0();
}

void sub_100549970()
{
  sub_10054930C((void (*)(_BYTE *))sub_1000D0F30);
}

void sub_100549990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100549BF8(a1, a2, a3, (void (*)(_BYTE *))sub_1000D0F30);
}

void sub_10054999C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;

  v2 = *v1;
  sub_10009E564(a1);
  Hasher._combine(_:)(v2);
  sub_10007A148();
  sub_100098918();
}

uint64_t sub_1005499CC()
{
  char *v0;

  return sub_100548EA0(*v0);
}

uint64_t sub_1005499D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100548D6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005499F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BB20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100549A20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BB20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100549A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100548EEC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100549A70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BB5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100549A98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BB5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100549AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BBD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100549AE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BBD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100549B10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BB98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100549B38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BB98();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "100549B68: call analysis failed (funcsize=5)"

#error "100549B7C: call analysis failed (funcsize=5)"

uint64_t sub_100549B8C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BE55B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100549BCC()
{
  sub_10054930C((void (*)(_BYTE *))sub_100548B7C);
}

void sub_100549BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100549BF8(a1, a2, a3, (void (*)(_BYTE *))sub_100548B7C);
}

void sub_100549BF8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v5[72];

  sub_10009E564(a1);
  a4(v5);
  sub_10007A148();
  sub_100098918();
}

uint64_t sub_100549C28(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x7372756F68 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7372756F68, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100549CA4()
{
  return 0x7372756F68;
}

void sub_100549CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_1000BA294(&qword_100BEECD8);
  sub_100099300();
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B44C8();
  v8 = sub_10054BA60();
  sub_1000B44E8((uint64_t)&type metadata for HourlyForecastComponentViewModel.CodingKeys, v9, v8);
  v14 = a2;
  v10 = sub_1000BA294(&qword_100BEECC0);
  v11 = sub_10054BA9C(&qword_100BEECE0, &qword_100BEECE8, (uint64_t)&unk_1009AD21C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v14, v12, v4, v10, v11);
  sub_100098748((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100089054();
}

_QWORD *sub_100549DA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v5 = sub_1000BA294(&qword_100BEECB0);
  sub_100099300();
  __chkstk_darwin(v6);
  sub_100094EC4();
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_1000DB418(a1, v7);
  v10 = sub_10054BA60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HourlyForecastComponentViewModel.CodingKeys, &type metadata for HourlyForecastComponentViewModel.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  else
  {
    v11 = sub_1000BA294(&qword_100BEECC0);
    sub_10054BA9C(&qword_100BEECC8, &qword_100BEECD0, (uint64_t)&unk_1009AD244, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v12, v5);
    sub_100098748(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    v9 = v14;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_100549ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100549C28(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100549F00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BA60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100549F28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054BA60();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100549F50@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100549DA4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_100549F78(uint64_t a1)
{
  uint64_t *v1;

  sub_100549CB8(a1, *v1);
}

uint64_t sub_100549F90(_QWORD *a1, _QWORD *a2)
{
  return sub_100549C24(*a1, *a2);
}

uint64_t sub_100549F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100549FE0()
{
  sub_10054A1EC();
}

void sub_100549FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnitConfiguration.Temperature(0);
  v24 = *(_QWORD *)(v6 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  v8 = sub_1000BE9F0();
  type metadata accessor for UnitsConfigurationViewModel.Temperature(v8);
  sub_100099300();
  __chkstk_darwin(v9);
  sub_10009883C();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(a2 + 16);
  v25 = a1;
  Hasher._combine(_:)(v16);
  if (v16)
  {
    v17 = a2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v19 = v24;
    do
    {
      v20 = sub_1000DC11C();
      sub_100095B78(v20, v21, type metadata accessor for UnitsConfigurationViewModel.Temperature);
      sub_100095B78((uint64_t)v15, v12, type metadata accessor for UnitsConfigurationViewModel.Temperature);
      if (_s7Weather24LocationCompositionStateOwet_0(v12, 1, v6) == 1)
      {
        Hasher._combine(_:)(1uLL);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v2, v12, v6);
        v22 = v25;
        Hasher._combine(_:)(0);
        sub_100086DA4(&qword_100BEA110, (uint64_t (*)(uint64_t))&type metadata accessor for UnitConfiguration.Temperature, (uint64_t)&protocol conformance descriptor for UnitConfiguration.Temperature);
        dispatch thunk of Hashable.hash(into:)(v22, v6, v23);
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v6);
      }
      sub_1000979AC((uint64_t)v15, type metadata accessor for UnitsConfigurationViewModel.Temperature);
      v17 += v18;
      --v16;
    }
    while (v16);
  }
}

void sub_10054A198()
{
  sub_10054A1EC();
}

void sub_10054A1B4()
{
  sub_10054A1EC();
}

void sub_10054A1D0()
{
  sub_10054A1EC();
}

void sub_10054A1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10008900C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1000AE96C(v9, v7);
  if (v0)
  {
    v10 = *(_QWORD *)(v6(0) - 8);
    v11 = v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    sub_100086DA4(v4, v6, v2);
    v14 = v13;
    do
    {
      v15 = sub_10054C56C();
      dispatch thunk of Hashable.hash(into:)(v15, v16, v14);
      v11 += v12;
      --v0;
    }
    while (v0);
  }
  sub_10009D300();
}

void sub_10054A270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;

  sub_10008900C();
  v3 = v2;
  sub_1000AE96C(v4, v2);
  if (v1)
  {
    v5 = (uint64_t *)(v3 + 64);
    do
    {
      v7 = (void *)*(v5 - 2);
      v6 = *(v5 - 1);
      v8 = *v5;
      v5 += 5;
      sub_1000878DC();
      v9 = v7;
      sub_100094EDC();
      sub_1000E77B8();
      v10 = v9;
      NSObject.hash(into:)(v0);

      sub_100094EDC();
      String.hash(into:)(v0, v6, v8);

      sub_10009895C();
      swift_bridgeObjectRelease_n(v8, 2);
      --v1;
    }
    while (v1);
  }
  sub_10009D300();
}

void sub_10054A300(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(a2 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v7 = v5;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
  sub_100079F70();
}

uint64_t sub_10054A34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v61;

  if (a1 != a2)
  {
    sub_1000979AC(a1, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      v22 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
      v23 = v22[9];
      v24 = a1 + v23;
      v25 = a2 + v23;
      v26 = type metadata accessor for Precipitation(0);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      v28 = swift_bridgeObjectRetain();
      v27(v24, v25, v26, v28);
      v29 = v22[10];
      v30 = (_QWORD *)(a1 + v29);
      v31 = (_QWORD *)(a2 + v29);
      *v30 = *v31;
      v30[1] = v31[1];
      v32 = v22[11];
      v33 = (_QWORD *)(a1 + v32);
      v34 = (_QWORD *)(a2 + v32);
      *v33 = *v34;
      v33[1] = v34[1];
      v35 = v22[12];
      v36 = (_QWORD *)(a1 + v35);
      v37 = (_QWORD *)(a2 + v35);
      *v36 = *v37;
      v36[1] = v37[1];
      v38 = v22[13];
      v39 = a1 + v38;
      v40 = a2 + v38;
      v41 = type metadata accessor for Date(0);
      v61 = a3;
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v41 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = swift_bridgeObjectRetain();
      v42(v39, v40, v41, v43);
      v44 = v22[14];
      v45 = a1 + v44;
      v46 = a2 + v44;
      v47 = type metadata accessor for TimeZone(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      *(_BYTE *)(a1 + v22[15]) = *(_BYTE *)(a2 + v22[15]);
      *(_QWORD *)(a1 + v22[16]) = *(_QWORD *)(a2 + v22[16]);
      swift_bridgeObjectRetain();
      v19 = a1;
      v20 = v61;
      v21 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
      v9 = v8[5];
      v10 = a1 + v9;
      v11 = a2 + v9;
      v12 = type metadata accessor for TimeZone(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(_QWORD *)(a1 + v8[6]) = *(_QWORD *)(a2 + v8[6]);
      v13 = v8[7];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (_QWORD *)(a2 + v13);
      *v14 = *v15;
      v14[1] = v15[1];
      v16 = v8[8];
      v17 = (_QWORD *)(a1 + v16);
      v18 = (_QWORD *)(a2 + v16);
      *v17 = *v18;
      v17[1] = v18[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = a1;
      v20 = a3;
      v21 = 1;
    }
    else
    {
      v48 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(a1, a2, v48);
      v49 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
      v50 = v49[5];
      v51 = a1 + v50;
      v52 = a2 + v50;
      v53 = type metadata accessor for TimeZone(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      *(_QWORD *)(a1 + v49[6]) = *(_QWORD *)(a2 + v49[6]);
      v54 = v49[7];
      v55 = (_QWORD *)(a1 + v54);
      v56 = (_QWORD *)(a2 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      v57 = v49[8];
      v58 = (_QWORD *)(a1 + v57);
      v59 = (_QWORD *)(a2 + v57);
      *v58 = *v59;
      v58[1] = v59[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = a1;
      v20 = a3;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_10054A6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v16 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
    v17 = v16[9];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for Precipitation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    *(_OWORD *)(a1 + v16[10]) = *(_OWORD *)(a2 + v16[10]);
    *(_OWORD *)(a1 + v16[11]) = *(_OWORD *)(a2 + v16[11]);
    *(_OWORD *)(a1 + v16[12]) = *(_OWORD *)(a2 + v16[12]);
    v21 = v16[13];
    v22 = a1 + v21;
    v23 = a2 + v21;
    v24 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    v25 = v16[14];
    v26 = a1 + v25;
    v27 = a2 + v25;
    v28 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    *(_BYTE *)(a1 + v16[15]) = *(_BYTE *)(a2 + v16[15]);
    *(_QWORD *)(a1 + v16[16]) = *(_QWORD *)(a2 + v16[16]);
    v13 = a1;
    v14 = a3;
    v15 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    v9 = v8[5];
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    *(_QWORD *)(a1 + v8[6]) = *(_QWORD *)(a2 + v8[6]);
    *(_OWORD *)(a1 + v8[7]) = *(_OWORD *)(a2 + v8[7]);
    *(_OWORD *)(a1 + v8[8]) = *(_OWORD *)(a2 + v8[8]);
    v13 = a1;
    v14 = a3;
    v15 = 1;
  }
  else
  {
    v29 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
    v30 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    v31 = v30[5];
    v32 = a1 + v31;
    v33 = a2 + v31;
    v34 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
    *(_QWORD *)(a1 + v30[6]) = *(_QWORD *)(a2 + v30[6]);
    *(_OWORD *)(a1 + v30[7]) = *(_OWORD *)(a2 + v30[7]);
    *(_OWORD *)(a1 + v30[8]) = *(_OWORD *)(a2 + v30[8]);
    v13 = a1;
    v14 = a3;
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v14, v15);
  return a1;
}

uint64_t sub_10054A93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_1000979AC(a1, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      v16 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
      v17 = v16[9];
      v18 = a1 + v17;
      v19 = a2 + v17;
      v20 = type metadata accessor for Precipitation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_OWORD *)(a1 + v16[10]) = *(_OWORD *)(a2 + v16[10]);
      *(_OWORD *)(a1 + v16[11]) = *(_OWORD *)(a2 + v16[11]);
      *(_OWORD *)(a1 + v16[12]) = *(_OWORD *)(a2 + v16[12]);
      v21 = v16[13];
      v22 = a1 + v21;
      v23 = a2 + v21;
      v24 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
      v25 = v16[14];
      v26 = a1 + v25;
      v27 = a2 + v25;
      v28 = type metadata accessor for TimeZone(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      *(_BYTE *)(a1 + v16[15]) = *(_BYTE *)(a2 + v16[15]);
      *(_QWORD *)(a1 + v16[16]) = *(_QWORD *)(a2 + v16[16]);
      v13 = a1;
      v14 = a3;
      v15 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
      v9 = v8[5];
      v10 = a1 + v9;
      v11 = a2 + v9;
      v12 = type metadata accessor for TimeZone(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      *(_QWORD *)(a1 + v8[6]) = *(_QWORD *)(a2 + v8[6]);
      *(_OWORD *)(a1 + v8[7]) = *(_OWORD *)(a2 + v8[7]);
      *(_OWORD *)(a1 + v8[8]) = *(_OWORD *)(a2 + v8[8]);
      v13 = a1;
      v14 = a3;
      v15 = 1;
    }
    else
    {
      v29 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
      v30 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
      v31 = v30[5];
      v32 = a1 + v31;
      v33 = a2 + v31;
      v34 = type metadata accessor for TimeZone(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      *(_QWORD *)(a1 + v30[6]) = *(_QWORD *)(a2 + v30[6]);
      *(_OWORD *)(a1 + v30[7]) = *(_OWORD *)(a2 + v30[7]);
      *(_OWORD *)(a1 + v30[8]) = *(_OWORD *)(a2 + v30[8]);
      v13 = a1;
      v14 = a3;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  return a1;
}

uint64_t *sub_10054ABC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v14;
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[8];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

double sub_10054ACB8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10054AD48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_10054AE10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_10054AF08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10054AFAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_10054B07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10054B088);
}

void sub_10054B088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  sub_100098778();
  sub_100088FF0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    sub_100099928();
    sub_100088FF0();
    if (!v9)
    {
      sub_10003BCA4(*(_QWORD *)(a1 + *(int *)(a3 + 24)));
      sub_100079F70();
      return;
    }
    v7 = v10;
    v8 = a1 + *(int *)(a3 + 20);
  }
  sub_1000B250C(v8, a2, v7);
}

uint64_t sub_10054B0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10054B100);
}

void sub_10054B100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_100098778();
  sub_10009D2E8();
  if (v10)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    sub_100099928();
    sub_10009D2E8();
    if (!v10)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      sub_100079F70();
      return;
    }
    v8 = v11;
    v9 = a1 + *(int *)(a4 + 20);
  }
  sub_1000987C4(v9, a2, a2, v8);
}

_QWORD *sub_10054B174(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v40);
  }
  else
  {
    v7 = *(_OWORD *)a2;
    v9 = a2[2];
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v8;
    v11 = a2[4];
    v10 = a2[5];
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v12 = a3[9];
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    *(_OWORD *)a1 = v7;
    v15 = type metadata accessor for Precipitation(0);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v16(v13, v14, v15);
    v17 = a3[10];
    v18 = a3[11];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (_QWORD *)((char *)v4 + v18);
    v23 = (uint64_t *)((char *)a2 + v18);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[12];
    v26 = a3[13];
    v27 = (_QWORD *)((char *)v4 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = (char *)v4 + v26;
    v31 = (uint64_t)a2 + v26;
    v32 = type metadata accessor for Date(0);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v29);
    v33(v30, v31, v32);
    v34 = a3[14];
    v35 = (char *)v4 + v34;
    v36 = (uint64_t)a2 + v34;
    v37 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v39 = *(uint64_t *)((char *)a2 + v38);
    *(_QWORD *)((char *)v4 + v38) = v39;
    swift_bridgeObjectRetain(v39);
  }
  return v4;
}

uint64_t sub_10054B308(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v7;
  v10 = *((_QWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  *(_OWORD *)a1 = v6;
  v14 = type metadata accessor for Precipitation(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  v15(v12, v13, v14);
  v16 = a3[10];
  v17 = a3[11];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)(a1 + v17);
  v22 = (_QWORD *)((char *)a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[12];
  v25 = a3[13];
  v26 = (_QWORD *)(a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a1 + v25;
  v30 = (uint64_t)a2 + v25;
  v31 = type metadata accessor for Date(0);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  v32(v29, v30, v31);
  v33 = a3[14];
  v34 = a1 + v33;
  v35 = (uint64_t)a2 + v33;
  v36 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  v37 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v38 = *(_QWORD *)((char *)a2 + v37);
  *(_QWORD *)(a1 + v37) = v38;
  swift_bridgeObjectRetain(v38);
  return a1;
}

uint64_t sub_10054B470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = a3[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[10];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[12];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[13];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  v33 = a3[14];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v37 = a3[16];
  v38 = *(_QWORD *)(a2 + v37);
  v39 = *(_QWORD *)(a1 + v37);
  *(_QWORD *)(a1 + v37) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

uint64_t sub_10054B630(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[14];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  return a1;
}

uint64_t sub_10054B744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[12];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[13];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[14];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v40 = *(_QWORD *)(a1 + v39);
  *(_QWORD *)(a1 + v39) = *(_QWORD *)(a2 + v39);
  swift_bridgeObjectRelease(v40);
  return a1;
}

uint64_t sub_10054B8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10054B8B4);
}

void sub_10054B8B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10003BCA4(*(_QWORD *)(a1 + 32));
    sub_100079F70();
  }
  else
  {
    sub_10009BFE0();
    sub_100088FF0();
    if (v9)
    {
      v7 = v6;
      v8 = a3[9];
    }
    else
    {
      sub_100098778();
      sub_100088FF0();
      if (v9)
      {
        v7 = v10;
        v8 = a3[13];
      }
      else
      {
        v7 = sub_100099928();
        v8 = a3[14];
      }
    }
    sub_1000B250C(a1 + v8, a2, v7);
  }
}

uint64_t sub_10054B938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10054B944);
}

void sub_10054B944(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 32) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    sub_10009BFE0();
    sub_10009D2E8();
    if (v10)
    {
      v8 = v7;
      v9 = a4[9];
    }
    else
    {
      sub_100098778();
      sub_10009D2E8();
      if (v10)
      {
        v8 = v11;
        v9 = a4[13];
      }
      else
      {
        v8 = sub_100099928();
        v9 = a4[14];
      }
    }
    sub_1000987C4(a1 + v9, a2, a2, v8);
  }
}

void *sub_10054B9D0()
{
  return &protocol witness table for Int;
}

void sub_10054B9DC()
{
  sub_100086DA4(&qword_100BEEC98, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel, (uint64_t)&unk_1009AD084);
}

void sub_10054BA08()
{
  sub_100086DA4(&qword_100BEECA0, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel, (uint64_t)&unk_1009AD13C);
}

void sub_10054BA34()
{
  sub_100086DA4(&qword_100BEECA8, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem, (uint64_t)&unk_1009AD1F4);
}

unint64_t sub_10054BA60()
{
  unint64_t result;

  result = qword_100BEECB8;
  if (!qword_100BEECB8)
  {
    result = swift_getWitnessTable(&unk_1009ADA28, &type metadata for HourlyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEECB8);
  }
  return result;
}

uint64_t sub_10054BA9C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100075EB0(&qword_100BEECC0);
    sub_100086DA4(a2, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10054BB20()
{
  unint64_t result;

  result = qword_100BEED10;
  if (!qword_100BEED10)
  {
    result = swift_getWitnessTable(&unk_1009AD9D8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEED10);
  }
  return result;
}

unint64_t sub_10054BB5C()
{
  unint64_t result;

  result = qword_100BEED18;
  if (!qword_100BEED18)
  {
    result = swift_getWitnessTable(&unk_1009AD988, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEED18);
  }
  return result;
}

unint64_t sub_10054BB98()
{
  unint64_t result;

  result = qword_100BEED28;
  if (!qword_100BEED28)
  {
    result = swift_getWitnessTable(&unk_1009AD938, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEED28);
  }
  return result;
}

unint64_t sub_10054BBD4()
{
  unint64_t result;

  result = qword_100BEED38;
  if (!qword_100BEED38)
  {
    result = swift_getWitnessTable(&unk_1009AD8E8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEED38);
  }
  return result;
}

unint64_t sub_10054BC10()
{
  unint64_t result;

  result = qword_100BEED78;
  if (!qword_100BEED78)
  {
    result = swift_getWitnessTable(&unk_1009AD898, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEED78);
  }
  return result;
}

uint64_t sub_10054BC4C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100075EB0(&qword_100BF1280);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10054BCAC()
{
  unint64_t result;

  result = qword_100BEEDB0;
  if (!qword_100BEEDB0)
  {
    result = swift_getWitnessTable(&unk_1009AD848, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_10054BD34 + 4 * byte_1009ACF27[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10054BD68 + 4 * byte_1009ACF22[v4]))();
}

uint64_t sub_10054BD68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054BD70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10054BD78);
  return result;
}

uint64_t sub_10054BD84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10054BD8CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_10054BD90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054BD98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10054BE00 + 4 * byte_1009ACF31[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10054BE34 + 4 * byte_1009ACF2C[v4]))();
}

uint64_t sub_10054BE34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054BE3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10054BE44);
  return result;
}

uint64_t sub_10054BE50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10054BE58);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10054BE5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054BE64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for HourlyForecastComponentViewModel.HourlyItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10054BECC + 4 * byte_1009ACF3B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10054BF00 + 4 * byte_1009ACF36[v4]))();
}

uint64_t sub_10054BF00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054BF08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10054BF10);
  return result;
}

uint64_t sub_10054BF1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10054BF24);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10054BF28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054BF30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.CodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys;
}

uint64_t _s7Weather32HourlyForecastComponentViewModelV10HourlyItemO17SunriseCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10054BFC0 + 4 * byte_1009ACF40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10054BFE0 + 4 * byte_1009ACF45[v4]))();
}

_BYTE *sub_10054BFC0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10054BFE0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10054BFE8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10054BFF0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10054BFF8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10054C000(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HourlyForecastComponentViewModel.CodingKeys()
{
  return &type metadata for HourlyForecastComponentViewModel.CodingKeys;
}

unint64_t sub_10054C020()
{
  unint64_t result;

  result = qword_100BEEDD0;
  if (!qword_100BEEDD0)
  {
    result = swift_getWitnessTable(&unk_1009AD3D0, &type metadata for HourlyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDD0);
  }
  return result;
}

unint64_t sub_10054C060()
{
  unint64_t result;

  result = qword_100BEEDD8;
  if (!qword_100BEEDD8)
  {
    result = swift_getWitnessTable(&unk_1009AD488, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDD8);
  }
  return result;
}

unint64_t sub_10054C0A0()
{
  unint64_t result;

  result = qword_100BEEDE0;
  if (!qword_100BEEDE0)
  {
    result = swift_getWitnessTable(&unk_1009AD540, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDE0);
  }
  return result;
}

unint64_t sub_10054C0E0()
{
  unint64_t result;

  result = qword_100BEEDE8;
  if (!qword_100BEEDE8)
  {
    result = swift_getWitnessTable(&unk_1009AD5F8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDE8);
  }
  return result;
}

unint64_t sub_10054C120()
{
  unint64_t result;

  result = qword_100BEEDF0;
  if (!qword_100BEEDF0)
  {
    result = swift_getWitnessTable(&unk_1009AD6B0, &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDF0);
  }
  return result;
}

unint64_t sub_10054C160()
{
  unint64_t result;

  result = qword_100BEEDF8;
  if (!qword_100BEEDF8)
  {
    result = swift_getWitnessTable(&unk_1009AD768, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEDF8);
  }
  return result;
}

unint64_t sub_10054C1A0()
{
  unint64_t result;

  result = qword_100BEEE00;
  if (!qword_100BEEE00)
  {
    result = swift_getWitnessTable(&unk_1009AD820, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE00);
  }
  return result;
}

unint64_t sub_10054C1E0()
{
  unint64_t result;

  result = qword_100BEEE08;
  if (!qword_100BEEE08)
  {
    result = swift_getWitnessTable(&unk_1009AD790, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE08);
  }
  return result;
}

unint64_t sub_10054C220()
{
  unint64_t result;

  result = qword_100BEEE10;
  if (!qword_100BEEE10)
  {
    result = swift_getWitnessTable(&unk_1009AD7B8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE10);
  }
  return result;
}

unint64_t sub_10054C260()
{
  unint64_t result;

  result = qword_100BEEE18;
  if (!qword_100BEEE18)
  {
    result = swift_getWitnessTable(&unk_1009AD6D8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE18);
  }
  return result;
}

unint64_t sub_10054C2A0()
{
  unint64_t result;

  result = qword_100BEEE20;
  if (!qword_100BEEE20)
  {
    result = swift_getWitnessTable(&unk_1009AD700, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE20);
  }
  return result;
}

unint64_t sub_10054C2E0()
{
  unint64_t result;

  result = qword_100BEEE28;
  if (!qword_100BEEE28)
  {
    result = swift_getWitnessTable(&unk_1009AD568, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE28);
  }
  return result;
}

unint64_t sub_10054C320()
{
  unint64_t result;

  result = qword_100BEEE30;
  if (!qword_100BEEE30)
  {
    result = swift_getWitnessTable(&unk_1009AD590, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunriseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE30);
  }
  return result;
}

unint64_t sub_10054C360()
{
  unint64_t result;

  result = qword_100BEEE38;
  if (!qword_100BEEE38)
  {
    result = swift_getWitnessTable(&unk_1009AD4B0, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE38);
  }
  return result;
}

unint64_t sub_10054C3A0()
{
  unint64_t result;

  result = qword_100BEEE40;
  if (!qword_100BEEE40)
  {
    result = swift_getWitnessTable(&unk_1009AD4D8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.SunsetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE40);
  }
  return result;
}

unint64_t sub_10054C3E0()
{
  unint64_t result;

  result = qword_100BEEE48;
  if (!qword_100BEEE48)
  {
    result = swift_getWitnessTable(&unk_1009AD3F8, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE48);
  }
  return result;
}

unint64_t sub_10054C420()
{
  unint64_t result;

  result = qword_100BEEE50;
  if (!qword_100BEEE50)
  {
    result = swift_getWitnessTable(&unk_1009AD420, &type metadata for HourlyForecastComponentViewModel.HourlyItem.HourCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE50);
  }
  return result;
}

unint64_t sub_10054C460()
{
  unint64_t result;

  result = qword_100BEEE58;
  if (!qword_100BEEE58)
  {
    result = swift_getWitnessTable(&unk_1009AD620, &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE58);
  }
  return result;
}

unint64_t sub_10054C4A0()
{
  unint64_t result;

  result = qword_100BEEE60;
  if (!qword_100BEEE60)
  {
    result = swift_getWitnessTable(&unk_1009AD648, &type metadata for HourlyForecastComponentViewModel.HourlyItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE60);
  }
  return result;
}

unint64_t sub_10054C4E0()
{
  unint64_t result;

  result = qword_100BEEE68;
  if (!qword_100BEEE68)
  {
    result = swift_getWitnessTable(&unk_1009AD340, &type metadata for HourlyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE68);
  }
  return result;
}

unint64_t sub_10054C520()
{
  unint64_t result;

  result = qword_100BEEE70;
  if (!qword_100BEEE70)
  {
    result = swift_getWitnessTable(&unk_1009AD368, &type metadata for HourlyForecastComponentViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEEE70);
  }
  return result;
}

unint64_t sub_10054C560()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_10054BB98();
}

uint64_t sub_10054C56C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10054C578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static TimeZone.== infix(_:_:)(v2 + a1, v1 + a1);
}

uint64_t sub_10054C584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1000BA294(&qword_100BCD680);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = type metadata accessor for Location.Identifier(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, v6);
  sub_1000318C0(v5, (uint64_t)v4);
  return sub_100021A68((uint64_t)v4, &qword_100BCD680);
}

uint64_t sub_10054C620(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_1000BA294(&qword_100BCD680);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a2;
  v7 = type metadata accessor for Location.Identifier(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 1, 1, v7);
  sub_1000318C0(v6, (uint64_t)v5);
  return sub_100021A68((uint64_t)v5, &qword_100BCD680);
}

uint64_t sub_10054C6C0()
{
  return type metadata accessor for LocationViewCollisionOptionsUpdatingViewState(0);
}

unint64_t sub_10054C6C8(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v34 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    v41 = *(_QWORD *)(a2 + 64);
    v42 = *(_BYTE *)(a2 + 72);
    sub_1000D4FF4(*(_QWORD *)a2, v7, v8, v9, v10, v11, v13, v12, v41, v42);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v41;
    *(_BYTE *)(a1 + 72) = v42;
    v14 = a3[6];
    v15 = a1 + v14;
    v16 = a2 + v14;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v17 = type metadata accessor for Location.Identifier(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    v19 = swift_bridgeObjectRetain();
    v18(v15, v16, v17, v19);
    v20 = a3[8];
    *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
    v21 = (_QWORD *)(a1 + v20);
    v22 = (_QWORD *)(a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = (_QWORD *)(a1 + v24);
    v27 = (_QWORD *)(a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (_QWORD *)(a1 + v25);
    v30 = (_QWORD *)(a2 + v25);
    swift_retain();
    swift_retain();
    swift_retain();
    v31 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      v32 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      *v29 = *v30;
      swift_retain();
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
    v35 = a3[11];
    v36 = (_QWORD *)(a1 + v35);
    v37 = (uint64_t *)(a2 + v35);
    v38 = *v37;
    v39 = v37[1];
    *v36 = v38;
    v36[1] = v39;
  }
  swift_retain();
  return a1;
}

_QWORD *sub_10054C8BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  memcpy(a1, a2, 0x49uLL);
  a1[10] = a2[10];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v13) == 1)
  {
    v15 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10054C9D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 72);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 72);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = v7;
  sub_1000CEE98(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  v20 = a3[6];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_release();
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  swift_release();
  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  swift_release();
  if (a1 != a2)
  {
    v32 = a3[10];
    v33 = (void *)(a1 + v32);
    v34 = (const void *)(a2 + v32);
    sub_100021A68(a1 + v32, &qword_100BC2908);
    v35 = sub_1000BA294(&qword_100BC2908);
    if (swift_getEnumCaseMultiPayload(v34) == 1)
    {
      v36 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33, v35, 1);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
  }
  v37 = a3[11];
  v38 = a1 + v37;
  v39 = (_QWORD *)(a2 + v37);
  *(_QWORD *)(a1 + v37) = *v39;
  swift_release();
  *(_QWORD *)(v38 + 8) = v39[1];
  return a1;
}

uint64_t sub_10054CB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100098AA0();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 24);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BC3800);
      v10 = *(int *)(a3 + 40);
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_10054CC2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 80) = (a2 - 1);
  }
  else
  {
    v8 = sub_100098AA0();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 24);
    }
    else
    {
      v9 = sub_1000BA294(&qword_100BC3800);
      v10 = *(int *)(a4 + 40);
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10054CCD0()
{
  return sub_100153030(sub_10054C584);
}

uint64_t sub_10054CCE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = sub_1000BC4FC(a1);
  return sub_10054C620(v1, v2);
}

uint64_t sub_10054CD04(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  BOOL v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_10011FEB8(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_39;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = v6 - 16;
      if (*((_QWORD *)v12 - 2) >= *((_QWORD *)v6 - 2))
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = v12 - 16;
        v12 -= 16;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 16;
        if (!v21)
          goto LABEL_35;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_35:
      v18 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  sub_10011FEB8(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (*(_QWORD *)v6 >= *(_QWORD *)v4)
    {
      v14 = v4;
      v15 = v7 == v4;
      v4 += 16;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6;
    v6 += 16;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_OWORD *)v7 = *(_OWORD *)v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_10011FEB8(v4, (v12 - v4) / 16, v6);
  return 1;
}

uint64_t sub_10054CE88@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100152E40();
  *a1 = result & 1;
  return result;
}

double sub_10054CEB4(char *a1)
{
  return sub_100152DE0(*a1);
}

uint64_t sub_10054CED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;

  v0 = sub_100075EB0(&qword_100BEEFE8);
  v1 = sub_100075EB0(&qword_100BEF000);
  v2 = sub_100075EB0(&qword_100BEEFE0);
  v8 = sub_100075EB0(&qword_100BEEFF0);
  v9 = (void *)sub_100075EB0(&qword_100BCD680);
  v10 = sub_10015631C();
  v11 = sub_10015A110();
  v3 = sub_10009885C((uint64_t)&v8, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v4 = sub_100116BFC();
  v8 = v2;
  v9 = &type metadata for CGFloat;
  v10 = v3;
  v11 = v4;
  v5 = sub_10009885C((uint64_t)&v8, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
  v6 = sub_100121C78(&qword_100BEF008, &qword_100BEF000, (void (*)(void))sub_100120FF0, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  v8 = v0;
  v9 = (void *)v1;
  v10 = v5;
  v11 = v6;
  return sub_10009885C((uint64_t)&v8, (uint64_t)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>);
}

void sub_10054CFEC(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BEF448;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BEF858;
      goto LABEL_11;
    }
    v33 = &qword_100BEF650;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BEF038;
  }
  else
  {
    v33 = &qword_100BEF240;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[53];
  v83 = v33[54];
  v84 = v38;
  v39 = v33[55];
  v81 = v33[56];
  v82 = v39;
  v40 = v33[61];
  v87 = v33[62];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_map;
  v43 = v33[63];
  v42 = v33[64];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_10054D4DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  _BYTE v137[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = sub_1000878BC();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098728();
  v10 = v9 - v8;
  v11 = a1;
  v12 = a1 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_map, (uint64_t)v137);
  sub_10003773C(v12, v5, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6) == 1)
  {
    sub_100021A14(v5, &qword_100BC4A98);
    v13 = sub_1000BA294(&qword_100BCC750);
    v14 = swift_allocObject(v13, 272, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10097FA60;
    v15 = sub_1000BA294(&qword_100BCC758);
    v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = v16 + *(_QWORD *)(v7 + 72);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = v15;
    v20 = (__n128 *)sub_1000C2514(v15, v17);
    v21 = sub_100099954(v20, (__n128)xmmword_10097CA50);
    v22 = v11;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_severeAlert, (uint64_t)v21 + v16);
    *(_QWORD *)(v14 + 32) = sub_1000B4580();
    *(_QWORD *)(v14 + 40) = v23;
    *(_QWORD *)(v14 + 48) = v24;
    v25 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v25 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_airQuality, v25 + v16);
    *(_QWORD *)(v14 + 56) = sub_1000B4580();
    *(_QWORD *)(v14 + 64) = v26;
    *(_QWORD *)(v14 + 72) = v27;
    v28 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v28);
    sub_10009D3BC(v29 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v30);
    *(_QWORD *)(v14 + 80) = sub_1000B4580();
    *(_QWORD *)(v14 + 88) = v31;
    *(_QWORD *)(v14 + 96) = v32;
    v33 = (__n128 *)sub_1000C2514(v19, v17);
    sub_1000BD314(v33);
    sub_10009D3BC(v34 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v35);
    *(_QWORD *)(v14 + 104) = sub_1000B4580();
    *(_QWORD *)(v14 + 112) = v36;
    *(_QWORD *)(v14 + 120) = v37;
    v38 = sub_1000C2514(v19, v17);
    *(_OWORD *)(v38 + 16) = v136;
    sub_10009D3BC(v11 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_newsArticle, v38 + v16);
    *(_QWORD *)(v14 + 128) = sub_100080C44(v38);
    *(_QWORD *)(v14 + 136) = v39;
    *(_QWORD *)(v14 + 144) = v40;
    v41 = v18;
    v133 = v16 + 2 * v18;
    v42 = (__n128 *)sub_1000C2514(v19, v133);
    v43 = (char *)sub_100099954(v42, (__n128)xmmword_10097DA20) + v16;
    v44 = *(_QWORD *)(v11 + 16);
    v45 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v45, v46);
    sub_1000C3608(v44 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 152) = sub_1000B4580();
    *(_QWORD *)(v14 + 160) = v47;
    *(_QWORD *)(v14 + 168) = v48;
    v49 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v49);
    v132 = v22;
    v50 = *(_QWORD *)(v22 + 16);
    v51 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_10008611C(v51, v52);
    sub_10008611C(v50 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 176) = sub_1000B4580();
    *(_QWORD *)(v14 + 184) = v53;
    *(_QWORD *)(v14 + 192) = v54;
    v55 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v55);
    v56 = *(_QWORD *)(v22 + 16);
    v57 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v57, v58);
    sub_100095B78(v56 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v43[v41], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v14 + 200) = sub_1000B4580();
    *(_QWORD *)(v14 + 208) = v59;
    *(_QWORD *)(v14 + 216) = v60;
    v61 = (__n128 *)sub_1000C2514(v19, v133);
    sub_100098A24(v61);
    v62 = *(_QWORD *)(v22 + 16);
    v63 = sub_1000C1D24(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_100098A1C(v63, v64);
    sub_100098A1C(v62 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v43[v41]);
    *(_QWORD *)(v14 + 224) = sub_1000B4580();
    *(_QWORD *)(v14 + 232) = v65;
    *(_QWORD *)(v14 + 240) = v66;
    v67 = sub_1000C2514(v19, v133);
    *(_OWORD *)(v67 + 16) = v136;
    v68 = *(_QWORD *)(v132 + 16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v67 + v16);
    sub_100098A1C(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v67 + v16 + v41);
    *(_QWORD *)(v14 + 248) = sub_100080C44(v67);
    *(_QWORD *)(v14 + 256) = v69;
    *(_QWORD *)(v14 + 264) = v70;
  }
  else
  {
    sub_10007C77C(v5, v10, type metadata accessor for LocationComponentContainerViewModel);
    v71 = sub_1000BA294(&qword_100BCC750);
    v72 = swift_allocObject(v71, 296, 7);
    *(_OWORD *)(v72 + 16) = xmmword_100989890;
    v73 = sub_1000BA294(&qword_100BCC758);
    v135 = *(_QWORD *)(v7 + 72);
    v74 = *(unsigned __int8 *)(v7 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = v74 | 7;
    v77 = v73;
    v78 = (__n128 *)sub_1000C3600(v73, v75 + v135);
    v79 = sub_100099954(v78, (__n128)xmmword_10097CA50);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_severeAlert, (uint64_t)v79 + v75);
    *(_QWORD *)(v72 + 32) = sub_1000B4588();
    *(_QWORD *)(v72 + 40) = v80;
    *(_QWORD *)(v72 + 48) = v81;
    v82 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v82);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_airQuality, v83);
    *(_QWORD *)(v72 + 56) = sub_1000B4588();
    *(_QWORD *)(v72 + 64) = v84;
    *(_QWORD *)(v72 + 72) = v85;
    v86 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v86);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v88);
    *(_QWORD *)(v72 + 80) = sub_1000B4588();
    *(_QWORD *)(v72 + 88) = v89;
    *(_QWORD *)(v72 + 96) = v90;
    v91 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v91);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v93);
    *(_QWORD *)(v72 + 104) = sub_1000B4588();
    *(_QWORD *)(v72 + 112) = v94;
    *(_QWORD *)(v72 + 120) = v95;
    v96 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v96);
    sub_1000B4590(a1 + OBJC_IVAR____TtCV7Weather28ElevatedAqiSevereNewsContent8_Storage_newsArticle, v97);
    *(_QWORD *)(v72 + 128) = sub_1000B4588();
    *(_QWORD *)(v72 + 136) = v98;
    *(_QWORD *)(v72 + 144) = v99;
    v100 = (__n128 *)sub_1000BA5D8();
    sub_100098A38(v100);
    sub_1000B4590(v10, v101);
    *(_QWORD *)(v72 + 152) = sub_1000B4580();
    *(_QWORD *)(v72 + 160) = v102;
    *(_QWORD *)(v72 + 168) = v103;
    v134 = v75 + 2 * v135;
    v104 = (__n128 *)swift_allocObject(v77, v134, v76);
    v105 = (char *)sub_100099954(v104, (__n128)xmmword_10097DA20) + v75;
    v106 = *(_QWORD *)(a1 + 16);
    v107 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
    sub_1000C3608(v107, v108);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 176) = sub_1000B4588();
    *(_QWORD *)(v72 + 184) = v109;
    *(_QWORD *)(v72 + 192) = v110;
    v111 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v111);
    v112 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
    sub_100098A1C(v112, v113);
    sub_100098A1C(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 200) = sub_1000B4588();
    *(_QWORD *)(v72 + 208) = v114;
    *(_QWORD *)(v72 + 216) = v115;
    v116 = (__n128 *)sub_1000C3600(v77, v134);
    sub_1000C0D34(v116);
    v117 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike);
    sub_1000C3608(v117, v118);
    sub_1000C3608(v106 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v105[v135]);
    *(_QWORD *)(v72 + 224) = sub_1000B4588();
    *(_QWORD *)(v72 + 232) = v119;
    *(_QWORD *)(v72 + 240) = v120;
    v121 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v121 + 16) = v136;
    v122 = v121 + v75;
    v123 = *(_QWORD *)(a1 + 16);
    v124 = sub_10009939C(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility);
    sub_10008611C(v124, v125);
    sub_10008611C(v123 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, v122 + v135);
    *(_QWORD *)(v72 + 248) = sub_1000B4588();
    *(_QWORD *)(v72 + 256) = v126;
    *(_QWORD *)(v72 + 264) = v127;
    v128 = sub_1000C3600(v77, v134);
    *(_OWORD *)(v128 + 16) = v136;
    v129 = *(_QWORD *)(a1 + 16);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v128 + v75, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v129 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v128 + v75 + v135, type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v72 + 272) = sub_100080C44(v128);
    *(_QWORD *)(v72 + 280) = v130;
    *(_QWORD *)(v72 + 288) = v131;
    sub_1000215BC(v10, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_10054DCB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  v20 = v4;
  sub_10009D2A4();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v19 = v17;
  swift_release(v16);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather42LocationElevatedAqiSevereNewsConfiguration8_Storage_map);
  sub_1000BD32C();
  sub_1000C5218();
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v2);
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather42LocationElevatedAqiSevereNewsConfiguration8_Storage_airQuality);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather42LocationElevatedAqiSevereNewsConfiguration8_Storage_newsArticle);
  sub_1000BD32C();
  sub_1000C5218();
  sub_1000C44D4(OBJC_IVAR____TtCV7Weather42LocationElevatedAqiSevereNewsConfiguration8_Storage_severeAlert);
  v18 = v20;
  sub_1000BD32C();
  sub_1000C5218();
  sub_1001DB018(v19, v15, v10, v8, v18);
  sub_100098640();
}

uint64_t sub_10054DE5C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BEFA68);
  a1[4] = sub_10054DF50();
  sub_10005F164(a1);
  return ShortDescription.init(name:_:)(1886351214, 0xE400000000000000, v2, &type metadata for AirQualityDetailViewAction);
}

uint64_t sub_10054DEE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054DF94();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_10054DF14()
{
  unint64_t result;

  result = qword_100BEFA60;
  if (!qword_100BEFA60)
  {
    result = swift_getWitnessTable(&unk_1009ADBFC, &type metadata for AirQualityDetailViewAction);
    atomic_store(result, (unint64_t *)&qword_100BEFA60);
  }
  return result;
}

unint64_t sub_10054DF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEFA70;
  if (!qword_100BEFA70)
  {
    v1 = sub_100075EB0(&qword_100BEFA68);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEFA70);
  }
  return result;
}

unint64_t sub_10054DF94()
{
  unint64_t result;

  result = qword_100BEFA78;
  if (!qword_100BEFA78)
  {
    result = swift_getWitnessTable(&unk_1009ADC24, &type metadata for AirQualityDetailViewAction);
    atomic_store(result, (unint64_t *)&qword_100BEFA78);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AirQualityDetailViewAction(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10054E010 + 4 * byte_1009ADBF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10054E030 + 4 * byte_1009ADBF5[v4]))();
}

_BYTE *sub_10054E010(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10054E030(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10054E038(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10054E040(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10054E048(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10054E050(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AirQualityDetailViewAction()
{
  return &type metadata for AirQualityDetailViewAction;
}

unint64_t sub_10054E070()
{
  unint64_t result;

  result = qword_100BEFA80;
  if (!qword_100BEFA80)
  {
    result = swift_getWitnessTable(&unk_1009ADCBC, &type metadata for AirQualityDetailViewAction);
    atomic_store(result, (unint64_t *)&qword_100BEFA80);
  }
  return result;
}

uint64_t *sub_10054E0AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for LocationOfInterest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    v13[32] = v14[32];
  }
  return a1;
}

uint64_t sub_10054E178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for LocationOfInterest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10054E1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
  return a1;
}

uint64_t sub_10054E274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = (__int128 *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  *(_BYTE *)(v12 + 32) = *((_BYTE *)v13 + 32);
  *(_OWORD *)v12 = v14;
  *(_OWORD *)(v12 + 16) = v15;
  return a1;
}

uint64_t sub_10054E314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
  return a1;
}

uint64_t sub_10054E3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for LocationOfInterest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
  return a1;
}

uint64_t sub_10054E454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10054E460);
}

uint64_t sub_10054E460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = type metadata accessor for LocationOfInterest(0);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_10054E4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10054E4C8);
}

uint64_t sub_10054E4C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = type metadata accessor for LocationOfInterest(0);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for HomeAndWorkRefinementViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEFAE0;
  if (!qword_100BEFAE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomeAndWorkRefinementViewState);
  return result;
}

uint64_t sub_10054E564(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LocationOfInterest(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "!";
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10054E5F0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v9;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x80000001009F0650;
    if (a2 == 0x80000001009F0650)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001009F0650, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6552656372756F73 && a2 == 0xEA00000000007463)
  {
    swift_bridgeObjectRelease(0xEA00000000007463);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656372756F73, 0xEA00000000007463, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10054E744(char a1)
{
  if (!a1)
    return 0x6E6F697461636F6CLL;
  if (a1 == 1)
    return 0xD000000000000012;
  return 0x6552656372756F73;
}

BOOL sub_10054E7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CGRect *v6;
  char v7;
  uint64_t v8;

  if ((static Location.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for HomeAndWorkRefinementViewState(0);
  if ((static LocationOfInterest.== infix(_:_:)(a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) == 0)
    return 0;
  v5 = *(int *)(v4 + 24);
  v6 = (CGRect *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 32);
  v8 = a2 + v5;
  if ((v7 & 1) == 0)
    return (*(_BYTE *)(v8 + 32) & 1) == 0 && CGRectEqualToRect(*v6, *(CGRect *)v8);
  return (*(_BYTE *)(v8 + 32) & 1) != 0;
}

uint64_t sub_10054E83C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v29[2];
  char v30;

  v4 = v1;
  v6 = sub_1000BA294(&qword_100BEFB38);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100079FBC();
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_10054EF7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HomeAndWorkRefinementViewState.CodingKeys, &type metadata for HomeAndWorkRefinementViewState.CodingKeys, v10, v8, v9);
  LOBYTE(v29[0]) = 0;
  type metadata accessor for Location(0);
  sub_100051B90(&qword_100BCF410, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  sub_1000C3934();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v11, v12, v13, v14, v15);
  if (!v2)
  {
    v16 = type metadata accessor for HomeAndWorkRefinementViewState(0);
    v17 = v4 + *(int *)(v16 + 20);
    LOBYTE(v29[0]) = 1;
    v18 = type metadata accessor for LocationOfInterest(0);
    v19 = sub_100051B90(&qword_100BEA9A0, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterest, (uint64_t)&protocol conformance descriptor for LocationOfInterest);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, v29, v6, v18, v19);
    v20 = v4 + *(int *)(v16 + 24);
    v21 = *(_BYTE *)(v20 + 32);
    v22 = *(_OWORD *)(v20 + 16);
    v29[0] = *(_OWORD *)v20;
    v29[1] = v22;
    v30 = v21;
    type metadata accessor for CGRect(0);
    sub_100051B90(&qword_100BCF428, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    sub_1000C3934();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, v24, v25, v26, v27);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

uint64_t sub_10054EA0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char *v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _OWORD v40[2];
  char v41;
  char v42;

  v30 = a2;
  v34 = type metadata accessor for LocationOfInterest(0);
  v31 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_100088FDC();
  v33 = v4;
  v36 = type metadata accessor for Location(0);
  v32 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_100088FDC();
  v35 = v5;
  v37 = sub_1000BA294(&qword_100BEFB28);
  v6 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_100079FBC();
  v7 = type metadata accessor for HomeAndWorkRefinementViewState(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v9[*(int *)(v10 + 24)];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[32] = 1;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_10054EF7C();
  v38 = v2;
  v15 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HomeAndWorkRefinementViewState.CodingKeys, &type metadata for HomeAndWorkRefinementViewState.CodingKeys, v14, v12, v13);
  if (v15)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v28 = v11;
  v29 = v6;
  v17 = v33;
  v16 = v34;
  v18 = (uint64_t)v9;
  v39 = a1;
  LOBYTE(v40[0]) = 0;
  sub_100051B90(&qword_100BCF3E8, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
  v20 = v35;
  v19 = v36;
  v21 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v40, v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v18, v20, v19);
  LOBYTE(v40[0]) = 1;
  sub_100051B90(&qword_100BEA8D8, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterest, (uint64_t)&protocol conformance descriptor for LocationOfInterest);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v40, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v18 + *(int *)(v7 + 20), v17, v16);
  type metadata accessor for CGRect(0);
  v23 = v22;
  v42 = 2;
  sub_100051B90(&qword_100BCF400, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v42, v37, v23);
  sub_1000C2C58(*(uint64_t (**)(_QWORD, _QWORD))(v29 + 8));
  v24 = v41;
  v25 = v40[1];
  v26 = v28;
  *(_OWORD *)v28 = v40[0];
  *((_OWORD *)v26 + 1) = v25;
  v26[32] = v24;
  sub_10054EFB8(v18, v30);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v39);
  return sub_10054EFFC(v18);
}

uint64_t sub_10054ED90()
{
  char *v0;

  return sub_10054E744(*v0);
}

uint64_t sub_10054ED98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10054E5F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10054EDBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054EF7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10054EDE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10054EF7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10054EE10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10054EA0C(a1, a2);
}

uint64_t sub_10054EE24(_QWORD *a1)
{
  return sub_10054E83C(a1);
}

void sub_10054EE38()
{
  sub_10069684C();
}

void sub_10054EE4C()
{
  sub_1006969AC();
}

uint64_t sub_10054EE60@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BEFB40);
  a1[4] = sub_10054F038();
  sub_10005F164(a1);
  v3 = type metadata accessor for HomeAndWorkRefinementViewState(0);
  return ShortDescription.init(name:_:)(0xD00000000000001ELL, 0x80000001009ADCE0, v2, v3);
}

uint64_t sub_10054EEFC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10054EE60(a1);
}

uint64_t sub_10054EF10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100051B90(&qword_100BEFB50, type metadata accessor for HomeAndWorkRefinementViewState, (uint64_t)&unk_1009ADD60);
  return ShortDescribable.description.getter(a1, v2);
}

uint64_t sub_10054EF50()
{
  return sub_100051B90(&qword_100BEFB20, type metadata accessor for HomeAndWorkRefinementViewState, (uint64_t)&unk_1009ADD38);
}

unint64_t sub_10054EF7C()
{
  unint64_t result;

  result = qword_100BEFB30;
  if (!qword_100BEFB30)
  {
    result = swift_getWitnessTable(&unk_1009ADF1C, &type metadata for HomeAndWorkRefinementViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEFB30);
  }
  return result;
}

uint64_t sub_10054EFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HomeAndWorkRefinementViewState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10054EFFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HomeAndWorkRefinementViewState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10054F038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEFB48;
  if (!qword_100BEFB48)
  {
    v1 = sub_100075EB0(&qword_100BEFB40);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEFB48);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HomeAndWorkRefinementViewState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10054F0C8 + 4 * byte_1009ADCF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10054F0FC + 4 * byte_1009ADCF0[v4]))();
}

uint64_t sub_10054F0FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054F104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10054F10CLL);
  return result;
}

uint64_t sub_10054F118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10054F120);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10054F124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054F12C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HomeAndWorkRefinementViewState.CodingKeys()
{
  return &type metadata for HomeAndWorkRefinementViewState.CodingKeys;
}

unint64_t sub_10054F14C()
{
  unint64_t result;

  result = qword_100BEFB58;
  if (!qword_100BEFB58)
  {
    result = swift_getWitnessTable(&unk_1009ADEF4, &type metadata for HomeAndWorkRefinementViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEFB58);
  }
  return result;
}

unint64_t sub_10054F18C()
{
  unint64_t result;

  result = qword_100BEFB60;
  if (!qword_100BEFB60)
  {
    result = swift_getWitnessTable(&unk_1009ADE64, &type metadata for HomeAndWorkRefinementViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEFB60);
  }
  return result;
}

unint64_t sub_10054F1CC()
{
  unint64_t result;

  result = qword_100BEFB68;
  if (!qword_100BEFB68)
  {
    result = swift_getWitnessTable(&unk_1009ADE8C, &type metadata for HomeAndWorkRefinementViewState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BEFB68);
  }
  return result;
}

uint64_t sub_10054F208(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  char v15;

  if ((sub_1000FEE8C() & 1) == 0)
    goto LABEL_15;
  v4 = (int *)type metadata accessor for NotificationsOptInInput(0);
  v5 = v4[5];
  v6 = *(_BYTE *)(a2 + v5);
  v7 = LocationAuthorizationState.rawValue.getter(*(_BYTE *)(a1 + v5));
  v9 = v8;
  v10 = LocationAuthorizationState.rawValue.getter(v6);
  v12 = v7 == v10 && v9 == v11;
  if (v12)
  {
    swift_bridgeObjectRelease_n(v9, 2);
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    v15 = 0;
    if ((v14 & 1) == 0)
      return v15 & 1;
  }
  if ((sub_10009B650(*(unsigned __int8 *)(a1 + v4[6]), *(unsigned __int8 *)(a2 + v4[6])) & 1) != 0
    && (sub_1000BA538(), v12)
    && (sub_1000BA538(), v12)
    && (sub_1000BA538(), v12))
  {
    v15 = *(_BYTE *)(a1 + v4[10]) ^ *(_BYTE *)(a2 + v4[10]) ^ 1;
  }
  else
  {
LABEL_15:
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10054F324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  int *v7;
  char v8;
  char v9;
  char v10;
  int *v11;
  _BYTE v13[24];

  sub_100410440(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, a2);
  v4 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v13, 0, 0);
  LOBYTE(v4) = *(_BYTE *)(v4 + 1);
  v5 = *(_BYTE *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
  v6 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn;
  v7 = (int *)type metadata accessor for NotificationsOptInState(0);
  v8 = *(_BYTE *)(v6 + v7[13]);
  v9 = *(_BYTE *)(v6 + v7[16]);
  v10 = *(_BYTE *)(v6 + v7[14]);
  LOBYTE(v6) = *(_BYTE *)(v6 + v7[15]);
  v11 = (int *)type metadata accessor for NotificationsOptInInput(0);
  *(_BYTE *)(a2 + v11[5]) = v4;
  *(_BYTE *)(a2 + v11[6]) = v5;
  *(_BYTE *)(a2 + v11[7]) = v8;
  *(_BYTE *)(a2 + v11[8]) = v9;
  *(_BYTE *)(a2 + v11[9]) = v10;
  *(_BYTE *)(a2 + v11[10]) = v6;
  return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, (uint64_t)v11);
}

uint64_t type metadata accessor for NotificationsOptInInputFactory()
{
  return objc_opt_self(_TtC7Weather30NotificationsOptInInputFactory);
}

_QWORD *sub_10054F450(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v64;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
    return v6;
  }
  v6 = a1;
  v7 = (int *)type metadata accessor for ViewState(0);
  v8 = v7[5];
  v9 = (_QWORD *)((char *)v6 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for ViewState.SecondaryViewState(0);
  swift_retain();
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    v12 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    *v9 = *v10;
    swift_retain();
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  *((_BYTE *)v6 + v7[6]) = *((_BYTE *)a2 + v7[6]);
  *((_BYTE *)v6 + v7[7]) = *((_BYTE *)a2 + v7[7]);
  v14 = v7[8];
  v15 = (_QWORD *)((char *)v6 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = (int *)type metadata accessor for SearchViewState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, (uint64_t)v17))
  {
    v19 = v7;
    v20 = v16[1];
    *v15 = *v16;
    v15[1] = v20;
    v21 = v17[5];
    v22 = (_QWORD *)((char *)v15 + v21);
    v23 = (_QWORD *)((char *)v16 + v21);
    v24 = type metadata accessor for SearchViewState.ViewState(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23);
    if (EnumCaseMultiPayload == 1)
    {
      *v22 = *v23;
      swift_bridgeObjectRetain();
      v27 = v22;
      v28 = v24;
      v29 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        goto LABEL_14;
      }
      v26 = type metadata accessor for CodableError(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v22, v23, v26);
      v27 = v22;
      v28 = v24;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
LABEL_14:
    v7 = v19;
    *((_BYTE *)v15 + v17[6]) = *((_BYTE *)v16 + v17[6]);
    v30 = v17[7];
    v31 = (char *)v15 + v30;
    v32 = (char *)v16 + v30;
    v33 = type metadata accessor for Location(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, (uint64_t)v17);
    goto LABEL_18;
  }
  v18 = sub_1000BA294(&qword_100BC5F78);
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_18:
  v35 = v7[9];
  v36 = (char *)v6 + v35;
  v37 = (char *)a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)((char *)a2 + v35);
  v36[16] = *((_BYTE *)a2 + v35 + 16);
  v36[17] = *((_BYTE *)a2 + v35 + 17);
  v36[18] = *((_BYTE *)a2 + v35 + 18);
  v38 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v39 = &v36[v38];
  v40 = &v37[v38];
  v41 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  v64 = v7;
  v42 = v7[10];
  v43 = (char *)v6 + v42;
  v44 = (char *)a2 + v42;
  *(_WORD *)((char *)v6 + v42) = *(_WORD *)((char *)a2 + v42);
  v45 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v46 = v45[6];
  v47 = &v43[v46];
  v48 = &v44[v46];
  v49 = type metadata accessor for WeatherMapOverlayKind(0);
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  v50(v47, v48, v49);
  v51 = v45[7];
  v52 = &v43[v51];
  v53 = &v44[v51];
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = v54;
  v55 = v45[8];
  v56 = &v43[v55];
  v57 = &v44[v55];
  swift_bridgeObjectRetain();
  v58 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 3, v58))
  {
    v59 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    *v56 = *v57;
    v50(&v56[*(int *)(v58 + 48)], &v57[*(int *)(v58 + 48)], v49);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 3, v58);
  }
  v43[v45[9]] = v44[v45[9]];
  *((_BYTE *)v6 + v64[11]) = *((_BYTE *)a2 + v64[11]);
  v60 = a3[6];
  *((_BYTE *)v6 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)v6 + v60) = *((_BYTE *)a2 + v60);
  v61 = a3[8];
  *((_BYTE *)v6 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)v6 + v61) = *((_BYTE *)a2 + v61);
  v62 = a3[10];
  *((_BYTE *)v6 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)v6 + v62) = *((_BYTE *)a2 + v62);
  return v6;
}

uint64_t sub_10054F8A8(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(uint64_t, uint64_t);

  swift_release();
  v2 = (int *)type metadata accessor for ViewState(0);
  v3 = a1 + v2[5];
  type metadata accessor for ViewState.SecondaryViewState(0);
  if (swift_getEnumCaseMultiPayload(v3) == 1)
  {
    v4 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + v2[8];
  v6 = type metadata accessor for SearchViewState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    v7 = v5 + *(int *)(v6 + 20);
    type metadata accessor for SearchViewState.ViewState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7);
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!EnumCaseMultiPayload)
    {
      v9 = type metadata accessor for CodableError(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    }
    v10 = v5 + *(int *)(v6 + 28);
    v11 = type metadata accessor for Location(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v12 = a1 + v2[9];
  v13 = v12 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v14 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + v2[10];
  v16 = type metadata accessor for WeatherMapPresentationState(0);
  v17 = v15 + *(int *)(v16 + 24);
  v18 = type metadata accessor for WeatherMapOverlayKind(0);
  v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v22(v17, v18);
  swift_bridgeObjectRelease();
  v19 = v15 + *(int *)(v16 + 32);
  v20 = sub_1000BA294(&qword_100BC5FD0);
  result = _s7Weather24LocationCompositionStateOwet_0(v19, 3, v20);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v22)(v19 + *(int *)(v20 + 48), v18);
  return result;
}

_QWORD *sub_10054FAD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v62;

  *a1 = *a2;
  v5 = (int *)type metadata accessor for ViewState(0);
  v6 = v5[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for ViewState.SecondaryViewState(0);
  swift_retain();
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    *v7 = *v8;
    swift_retain();
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  *((_BYTE *)a1 + v5[6]) = *((_BYTE *)a2 + v5[6]);
  *((_BYTE *)a1 + v5[7]) = *((_BYTE *)a2 + v5[7]);
  v12 = v5[8];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for SearchViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, (uint64_t)v15))
  {
    v16 = sub_1000BA294(&qword_100BC5F78);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_16;
  }
  v17 = v5;
  v18 = v14[1];
  *v13 = *v14;
  v13[1] = v18;
  v19 = v15[5];
  v20 = (_QWORD *)((char *)v13 + v19);
  v21 = (_QWORD *)((char *)v14 + v19);
  v22 = type metadata accessor for SearchViewState.ViewState(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21);
  if (EnumCaseMultiPayload == 1)
  {
    *v20 = *v21;
    swift_bridgeObjectRetain();
    v25 = v20;
    v26 = v22;
    v27 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      goto LABEL_12;
    }
    v24 = type metadata accessor for CodableError(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v20, v21, v24);
    v25 = v20;
    v26 = v22;
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v25, v26, v27);
LABEL_12:
  *((_BYTE *)v13 + v15[6]) = *((_BYTE *)v14 + v15[6]);
  v28 = v15[7];
  v29 = (char *)v13 + v28;
  v30 = (char *)v14 + v28;
  v31 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
  {
    v32 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
  }
  v5 = v17;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, (uint64_t)v15);
LABEL_16:
  v33 = v5[9];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  *(_OWORD *)v34 = *(_OWORD *)((char *)a2 + v33);
  v34[16] = *((_BYTE *)a2 + v33 + 16);
  v34[17] = *((_BYTE *)a2 + v33 + 17);
  v34[18] = *((_BYTE *)a2 + v33 + 18);
  v36 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v37 = &v34[v36];
  v38 = &v35[v36];
  v39 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  v62 = v5;
  v40 = v5[10];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  *(_WORD *)((char *)a1 + v40) = *(_WORD *)((char *)a2 + v40);
  v43 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v44 = v43[6];
  v45 = &v41[v44];
  v46 = &v42[v44];
  v47 = type metadata accessor for WeatherMapOverlayKind(0);
  v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
  v48(v45, v46, v47);
  v49 = v43[7];
  v50 = &v41[v49];
  v51 = &v42[v49];
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = v52;
  v53 = v43[8];
  v54 = &v41[v53];
  v55 = &v42[v53];
  swift_bridgeObjectRetain();
  v56 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 3, v56))
  {
    v57 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    *v54 = *v55;
    v48(&v54[*(int *)(v56 + 48)], &v55[*(int *)(v56 + 48)], v47);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 3, v56);
  }
  v41[v43[9]] = v42[v43[9]];
  *((_BYTE *)a1 + v62[11]) = *((_BYTE *)a2 + v62[11]);
  v58 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)a1 + v58) = *((_BYTE *)a2 + v58);
  v59 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v59) = *((_BYTE *)a2 + v59);
  v60 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v60) = *((_BYTE *)a2 + v60);
  return a1;
}

_QWORD *sub_10054FF00(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  const void *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v86;
  int *v87;

  v3 = a2;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v5 = type metadata accessor for ViewState(0);
  v6 = (int *)v5;
  if (a1 != v3)
  {
    v7 = *(int *)(v5 + 20);
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)v3 + v7);
    sub_10006BD20((uint64_t)a1 + v7, type metadata accessor for ViewState.SecondaryViewState);
    v10 = type metadata accessor for ViewState.SecondaryViewState(0);
    if (swift_getEnumCaseMultiPayload(v9) == 1)
    {
      v11 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = 1;
    }
    else
    {
      *v8 = *v9;
      swift_retain();
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v12);
  }
  *((_BYTE *)a1 + v6[6]) = *((_BYTE *)v3 + v6[6]);
  *((_BYTE *)a1 + v6[7]) = *((_BYTE *)v3 + v6[7]);
  v13 = v6[8];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)v3 + v13);
  v16 = (int *)type metadata accessor for SearchViewState(0);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, (uint64_t)v16);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, (uint64_t)v16);
  if (v17)
  {
    if (!v18)
    {
      v19 = v3;
      *v14 = *v15;
      v14[1] = v15[1];
      v20 = v16[5];
      v21 = (_QWORD *)((char *)v14 + v20);
      v22 = (_QWORD *)((char *)v15 + v20);
      v23 = type metadata accessor for SearchViewState.ViewState(0);
      swift_bridgeObjectRetain();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22);
      if (EnumCaseMultiPayload == 1)
      {
        *v21 = *v22;
        swift_bridgeObjectRetain();
        v26 = v21;
        v27 = v23;
        v28 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          goto LABEL_22;
        }
        v25 = type metadata accessor for CodableError(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v21, v22, v25);
        v26 = v21;
        v27 = v23;
        v28 = 0;
      }
      swift_storeEnumTagMultiPayload(v26, v27, v28);
LABEL_22:
      v3 = v19;
      *((_BYTE *)v14 + v16[6]) = *((_BYTE *)v15 + v16[6]);
      v42 = v16[7];
      v43 = (char *)v14 + v42;
      v44 = (char *)v15 + v42;
      v45 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
      {
        v46 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
      }
      v47 = (uint64_t)v14;
      v48 = (uint64_t)v16;
      goto LABEL_26;
    }
    goto LABEL_13;
  }
  if (v18)
  {
    sub_10006BD20((uint64_t)v14, type metadata accessor for SearchViewState);
LABEL_13:
    v29 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC5F78) - 8) + 64);
    v30 = v14;
    v31 = v15;
LABEL_14:
    memcpy(v30, v31, v29);
    goto LABEL_27;
  }
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != v3)
  {
    v32 = v3;
    v33 = v16[5];
    v34 = (_QWORD *)((char *)v14 + v33);
    v35 = (_QWORD *)((char *)v15 + v33);
    sub_10006BD20((uint64_t)v14 + v33, type metadata accessor for SearchViewState.ViewState);
    v36 = type metadata accessor for SearchViewState.ViewState(0);
    v37 = swift_getEnumCaseMultiPayload(v35);
    if (v37 == 1)
    {
      *v34 = *v35;
      swift_bridgeObjectRetain();
      v39 = v34;
      v40 = v36;
      v41 = 1;
    }
    else
    {
      if (v37)
      {
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        goto LABEL_38;
      }
      v38 = type metadata accessor for CodableError(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v34, v35, v38);
      v39 = v34;
      v40 = v36;
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v40, v41);
LABEL_38:
    v3 = v32;
  }
  *((_BYTE *)v14 + v16[6]) = *((_BYTE *)v15 + v16[6]);
  v77 = v16[7];
  v78 = (uint64_t)v14 + v77;
  v79 = (uint64_t)v15 + v77;
  v80 = type metadata accessor for Location(0);
  v81 = _s7Weather24LocationCompositionStateOwet_0(v78, 1, v80);
  v82 = _s7Weather24LocationCompositionStateOwet_0(v79, 1, v80);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v47 = v78;
      v48 = v80;
LABEL_26:
      _s7Weather24LocationCompositionStateOwst_0(v47, 0, 1, v48);
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  v83 = *(_QWORD *)(v80 - 8);
  if (v82)
  {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v78, v80);
LABEL_44:
    v29 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC35F8) - 8) + 64);
    v30 = (void *)v78;
    v31 = (const void *)v79;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 24))(v78, v79, v80);
LABEL_27:
  v49 = v6[9];
  v50 = (char *)a1 + v49;
  v51 = (char *)v3 + v49;
  *(_QWORD *)v50 = *(_QWORD *)((char *)v3 + v49);
  *((_QWORD *)v50 + 1) = *(_QWORD *)((char *)v3 + v49 + 8);
  v50[16] = *((_BYTE *)v3 + v49 + 16);
  v50[17] = *((_BYTE *)v3 + v49 + 17);
  v50[18] = *((_BYTE *)v3 + v49 + 18);
  v52 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v53 = &v50[v52];
  v54 = &v51[v52];
  v55 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v86 = v3;
  v87 = v6;
  v56 = v6[10];
  v84 = a1;
  v57 = (char *)a1 + v56;
  v58 = (char *)v3 + v56;
  *v57 = *((_BYTE *)v3 + v56);
  v57[1] = *((_BYTE *)v3 + v56 + 1);
  v59 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v60 = v59[6];
  v61 = &v57[v60];
  v62 = &v58[v60];
  v63 = type metadata accessor for WeatherMapOverlayKind(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(void (**)(char *, char *, uint64_t))(v64 + 24);
  v65(v61, v62, v63);
  v66 = v59[7];
  v67 = &v57[v66];
  v68 = &v58[v66];
  *v67 = *(_QWORD *)v68;
  v67[1] = *((_QWORD *)v68 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v69 = v59[8];
  v70 = &v57[v69];
  v71 = &v58[v69];
  v72 = sub_1000BA294(&qword_100BC5FD0);
  v73 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 3, v72);
  v74 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 3, v72);
  if (!v73)
  {
    if (!v74)
    {
      *v70 = *v71;
      v65(&v70[*(int *)(v72 + 48)], &v71[*(int *)(v72 + 48)], v63);
      goto LABEL_33;
    }
    sub_1005505A4((uint64_t)v70);
    goto LABEL_32;
  }
  if (v74)
  {
LABEL_32:
    v75 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_33;
  }
  *v70 = *v71;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(&v70[*(int *)(v72 + 48)], &v71[*(int *)(v72 + 48)], v63);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 3, v72);
LABEL_33:
  result = v84;
  v57[v59[9]] = v58[v59[9]];
  *((_BYTE *)v84 + v87[11]) = *((_BYTE *)v86 + v87[11]);
  *((_BYTE *)v84 + a3[5]) = *((_BYTE *)v86 + a3[5]);
  *((_BYTE *)v84 + a3[6]) = *((_BYTE *)v86 + a3[6]);
  *((_BYTE *)v84 + a3[7]) = *((_BYTE *)v86 + a3[7]);
  *((_BYTE *)v84 + a3[8]) = *((_BYTE *)v86 + a3[8]);
  *((_BYTE *)v84 + a3[9]) = *((_BYTE *)v86 + a3[9]);
  *((_BYTE *)v84 + a3[10]) = *((_BYTE *)v86 + a3[10]);
  return result;
}

uint64_t sub_1005505A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC5FD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1005505E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v52;

  *a1 = *a2;
  v5 = (int *)type metadata accessor for ViewState(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ViewState.SecondaryViewState(0);
  if (swift_getEnumCaseMultiPayload(v8) == 1)
  {
    v10 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *((_BYTE *)a1 + v5[6]) = *((_BYTE *)a2 + v5[6]);
  *((_BYTE *)a1 + v5[7]) = *((_BYTE *)a2 + v5[7]);
  v11 = v5[8];
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for SearchViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, (uint64_t)v14))
  {
    v15 = sub_1000BA294(&qword_100BC5F78);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v5;
    *v12 = *v13;
    v17 = v14[5];
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for SearchViewState.ViewState(0);
    if (swift_getEnumCaseMultiPayload(v19))
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for CodableError(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 0);
    }
    *((_BYTE *)v12 + v14[6]) = *((_BYTE *)v13 + v14[6]);
    v22 = v14[7];
    v23 = (char *)v12 + v22;
    v24 = (char *)v13 + v22;
    v25 = type metadata accessor for Location(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
    {
      v26 = sub_1000BA294(&qword_100BC35F8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
    v5 = v16;
  }
  v27 = v5[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_OWORD *)v28 = *(_OWORD *)((char *)a2 + v27);
  v28[16] = *((_BYTE *)a2 + v27 + 16);
  v28[17] = *((_BYTE *)a2 + v27 + 17);
  v28[18] = *((_BYTE *)a2 + v27 + 18);
  v30 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v31 = &v28[v30];
  v32 = &v29[v30];
  v33 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v52 = v5;
  v34 = v5[10];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  *(_WORD *)((char *)a1 + v34) = *(_WORD *)((char *)a2 + v34);
  v37 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v38 = v37[6];
  v39 = &v35[v38];
  v40 = &v36[v38];
  v41 = type metadata accessor for WeatherMapOverlayKind(0);
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
  v42(v39, v40, v41);
  *(_OWORD *)&v35[v37[7]] = *(_OWORD *)&v36[v37[7]];
  v43 = v37[8];
  v44 = &v35[v43];
  v45 = &v36[v43];
  v46 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 3, v46))
  {
    v47 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    *v44 = *v45;
    v42(&v44[*(int *)(v46 + 48)], &v45[*(int *)(v46 + 48)], v41);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 3, v46);
  }
  v35[v37[9]] = v36[v37[9]];
  *((_BYTE *)a1 + v52[11]) = *((_BYTE *)a2 + v52[11]);
  v48 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  *((_BYTE *)a1 + v48) = *((_BYTE *)a2 + v48);
  v49 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v49) = *((_BYTE *)a2 + v49);
  v50 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v50) = *((_BYTE *)a2 + v50);
  return a1;
}

_QWORD *sub_1005509D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _WORD *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  int *v83;
  int *v84;
  _QWORD *v85;

  *a1 = *a2;
  swift_release();
  v6 = type metadata accessor for ViewState(0);
  v7 = (int *)v6;
  if (a1 != a2)
  {
    v8 = *(int *)(v6 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10006BD20((uint64_t)a1 + v8, type metadata accessor for ViewState.SecondaryViewState);
    v11 = type metadata accessor for ViewState.SecondaryViewState(0);
    if (swift_getEnumCaseMultiPayload(v10) == 1)
    {
      v12 = type metadata accessor for WeatherCondition(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + v7[6]) = *((_BYTE *)a2 + v7[6]);
  *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
  v13 = v7[8];
  v14 = (uint64_t)a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v16 = (int *)type metadata accessor for SearchViewState(0);
  v17 = _s7Weather24LocationCompositionStateOwet_0(v14, 1, (uint64_t)v16);
  v18 = _s7Weather24LocationCompositionStateOwet_0(v15, 1, (uint64_t)v16);
  v84 = a3;
  if (v17)
  {
    if (!v18)
    {
      v19 = v7;
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v20 = v16[5];
      v21 = (void *)(v14 + v20);
      v22 = (const void *)(v15 + v20);
      v23 = type metadata accessor for SearchViewState.ViewState(0);
      if (swift_getEnumCaseMultiPayload(v22))
      {
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v33 = type metadata accessor for CodableError(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v21, v22, v33);
        swift_storeEnumTagMultiPayload(v21, v23, 0);
      }
      *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
      v34 = v16[7];
      v35 = (void *)(v14 + v34);
      v36 = (const void *)(v15 + v34);
      v37 = type metadata accessor for Location(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v37))
      {
        v38 = sub_1000BA294(&qword_100BC35F8);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v37);
      }
      v7 = v19;
      v39 = v14;
      v40 = (uint64_t)v16;
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  if (v18)
  {
    sub_10006BD20(v14, type metadata accessor for SearchViewState);
LABEL_11:
    v24 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC5F78) - 8) + 64);
    v25 = (void *)v14;
    v26 = (const void *)v15;
LABEL_12:
    memcpy(v25, v26, v24);
    goto LABEL_22;
  }
  v27 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v27;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v28 = v7;
    v29 = v16[5];
    v30 = (void *)(v14 + v29);
    v31 = (const void *)(v15 + v29);
    sub_10006BD20(v14 + v29, type metadata accessor for SearchViewState.ViewState);
    v32 = type metadata accessor for SearchViewState.ViewState(0);
    if (swift_getEnumCaseMultiPayload(v31))
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v74 = type metadata accessor for CodableError(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v30, v31, v74);
      swift_storeEnumTagMultiPayload(v30, v32, 0);
    }
    v7 = v28;
  }
  *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
  v75 = v16[7];
  v76 = v14 + v75;
  v77 = v15 + v75;
  v78 = type metadata accessor for Location(0);
  v79 = _s7Weather24LocationCompositionStateOwet_0(v76, 1, v78);
  v80 = _s7Weather24LocationCompositionStateOwet_0(v77, 1, v78);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v76, v77, v78);
      v39 = v76;
      v40 = v78;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v39, 0, 1, v40);
      goto LABEL_22;
    }
    goto LABEL_37;
  }
  v81 = *(_QWORD *)(v78 - 8);
  if (v80)
  {
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v76, v78);
LABEL_37:
    v24 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC35F8) - 8) + 64);
    v25 = (void *)v76;
    v26 = (const void *)v77;
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 40))(v76, v77, v78);
LABEL_22:
  v41 = v7[9];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  *(_OWORD *)v42 = *(_OWORD *)((char *)a2 + v41);
  v42[16] = *((_BYTE *)a2 + v41 + 16);
  v42[17] = *((_BYTE *)a2 + v41 + 17);
  v42[18] = *((_BYTE *)a2 + v41 + 18);
  v44 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v45 = &v42[v44];
  v46 = &v43[v44];
  v47 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v45, v46, v47);
  v82 = a1;
  v83 = v7;
  v48 = v7[10];
  v49 = (char *)a1 + v48;
  v85 = a2;
  v50 = (_WORD *)((char *)a2 + v48);
  *(_WORD *)((char *)a1 + v48) = *v50;
  v51 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v52 = v51[6];
  v53 = &v49[v52];
  v54 = (char *)v50 + v52;
  v55 = type metadata accessor for WeatherMapOverlayKind(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(void (**)(char *, char *, uint64_t))(v56 + 40);
  v57(v53, v54, v55);
  v58 = v51[7];
  v59 = &v49[v58];
  v60 = (uint64_t *)((char *)v50 + v58);
  v62 = *v60;
  v61 = v60[1];
  *(_QWORD *)v59 = v62;
  *((_QWORD *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  v63 = v51[8];
  v64 = &v49[v63];
  v65 = (char *)v50 + v63;
  v66 = sub_1000BA294(&qword_100BC5FD0);
  v67 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 3, v66);
  v68 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 3, v66);
  if (!v67)
  {
    if (!v68)
    {
      *v64 = *v65;
      v57(&v64[*(int *)(v66 + 48)], &v65[*(int *)(v66 + 48)], v55);
      goto LABEL_28;
    }
    sub_1005505A4((uint64_t)v64);
    goto LABEL_27;
  }
  if (v68)
  {
LABEL_27:
    v69 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_28;
  }
  *v64 = *v65;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(&v64[*(int *)(v66 + 48)], &v65[*(int *)(v66 + 48)], v55);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 3, v66);
LABEL_28:
  result = v82;
  v49[v51[9]] = *((_BYTE *)v50 + v51[9]);
  *((_BYTE *)v82 + v83[11]) = *((_BYTE *)v85 + v83[11]);
  v71 = v84[6];
  *((_BYTE *)v82 + v84[5]) = *((_BYTE *)v85 + v84[5]);
  *((_BYTE *)v82 + v71) = *((_BYTE *)v85 + v71);
  v72 = v84[8];
  *((_BYTE *)v82 + v84[7]) = *((_BYTE *)v85 + v84[7]);
  *((_BYTE *)v82 + v72) = *((_BYTE *)v85 + v72);
  v73 = v84[10];
  *((_BYTE *)v82 + v84[9]) = *((_BYTE *)v85 + v84[9]);
  *((_BYTE *)v82 + v73) = *((_BYTE *)v85 + v73);
  return result;
}

uint64_t sub_100550FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100550FF4);
}

uint64_t sub_100550FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v8;

  v6 = type metadata accessor for ViewState(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v6);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v8 >= 2)
    return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10055107C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100551088);
}

uint64_t sub_100551088(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for ViewState(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

_QWORD *sub_1005510FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];
  _QWORD *v20;

  v4 = v3;
  v18 = a2;
  v7 = sub_1000BA294(&qword_100BCF2D8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v20 = _swiftEmptyArrayStorage;
    sub_1006061BC();
    v12 = v20;
    v13 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v14 = *v13;
      v19[0] = *(v13 - 1);
      v19[1] = v14;
      swift_bridgeObjectRetain(v14);
      sub_100552FD8(v19, v18, a3, v10);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease(v14);
      v20 = v12;
      v15 = v12[2];
      if (v15 >= v12[3] >> 1)
      {
        sub_1006061BC();
        v12 = v20;
      }
      v13 += 2;
      v12[2] = v15 + 1;
      sub_100555410((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v15);
      if (!--v11)
      {
        swift_bridgeObjectRelease(a3);
        return v12;
      }
    }
    swift_bridgeObjectRelease(a3);
    swift_release(v12);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
  return v12;
}

id sub_100551298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  NSString v10;
  NSString v11;
  id v12;

  v6 = v5;
  if (!a2)
  {
    v10 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "alertControllerWithTitle:message:preferredStyle:", v10, v11, a5);

  return v12;
}

id sub_10055134C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  NSString v11;
  void *v12;
  id v13;
  _QWORD v15[5];
  uint64_t v16;

  v6 = v5;
  if (!a2)
  {
    v11 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v15[4] = a4;
  v16 = a5;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10021BA7C;
  v15[3] = &unk_100B7F9C8;
  v12 = _Block_copy(v15);
  swift_release(v16);
LABEL_6:
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "actionWithTitle:style:handler:", v11, a3, v12);
  _Block_release(v12);

  return v13;
}

uint64_t sub_100551438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  type metadata accessor for DispatchQoS(0);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  v19 = _swiftEmptyArrayStorage;
  sub_10005329C((unint64_t *)&qword_100BC29A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = v14;
  v16 = sub_1000BA294(&qword_100BC29B0);
  sub_100081288((unint64_t *)&qword_100BC29B8, &qword_100BC29B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v16, v17, v5, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100A09EA0, v13, v9, v4, 0);
}

uint64_t sub_1005515E0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  __n128 v13;
  void (*v14)(_QWORD *, uint64_t);
  __n128 v15;
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49[2];

  v6 = type metadata accessor for DebugModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = sub_100555260;
  v10[1] = a3;
  v11 = enum case for DebugModel.action(_:);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v12)(v10, enum case for DebugModel.action(_:), v6, v8);
  v13 = swift_retain();
  dispatch thunk of DebugDataSource.add(_:_:)(0x6143207261656C43, 0xEB00000000656863, v10, v13);
  v14 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v14(v10, v6);
  *v10 = sub_100555268;
  v10[1] = a3;
  HIDWORD(v45) = v11;
  v12(v10, v11, v6);
  v15 = swift_retain();
  dispatch thunk of DebugDataSource.add(_:_:)(0xD00000000000001FLL, 0x8000000100A09EE0, v10, v15);
  v14(v10, v6);
  *v10 = sub_1005529C4;
  v10[1] = 0;
  v12(v10, enum case for DebugModel.modalPopover(_:), v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000012, 0x8000000100A09F00, v10, v16);
  v14(v10, v6);
  *v10 = sub_100552B84;
  v10[1] = 0;
  v12(v10, enum case for DebugModel.modal(_:), v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0x7365522064726148, 0xEA00000000007465, v10, v17);
  v14(v10, v6);
  sub_10003B59C((uint64_t)a2, (uint64_t)v49);
  v18 = swift_allocObject(&unk_100B7F898, 56, 7);
  sub_10003C800(v49, v18 + 16);
  *v10 = sub_100555270;
  v10[1] = v18;
  v19 = enum case for DebugModel.page(_:);
  v12(v10, enum case for DebugModel.page(_:), v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0x6163696669746F4ELL, 0xED0000736E6F6974, v10, v20);
  v14(v10, v6);
  sub_10003B59C((uint64_t)a2, (uint64_t)v49);
  v21 = swift_allocObject(&unk_100B7F8C0, 56, 7);
  sub_10003C800(v49, v21 + 16);
  *v10 = sub_100555290;
  v10[1] = v21;
  v12(v10, v19, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0x656E696C66664FLL, 0xE700000000000000, v10, v22);
  v14(v10, v6);
  sub_10003B59C((uint64_t)a2, (uint64_t)v49);
  v23 = swift_allocObject(&unk_100B7F8E8, 56, 7);
  sub_10003C800(v49, v23 + 16);
  *v10 = sub_1005552B0;
  v10[1] = v23;
  v12(v10, v19, v6);
  v46 = a1;
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000014, 0x8000000100A09F20, v10, v24);
  v14(v10, v6);
  v25 = type metadata accessor for DebugDataSource(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = DebugDataSource.init()();
  sub_10003B59C((uint64_t)a2, (uint64_t)v49);
  v27 = swift_allocObject(&unk_100B7F910, 56, 7);
  sub_10003C800(v49, v27 + 16);
  *v10 = sub_1005552F4;
  v10[1] = v27;
  v12(v10, v19, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000012, 0x8000000100A09F40, v10, v28);
  v14(v10, v6);
  sub_10003B59C((uint64_t)a2, (uint64_t)v49);
  v29 = swift_allocObject(&unk_100B7F938, 56, 7);
  sub_10003C800(v49, v29 + 16);
  *v10 = sub_100555314;
  v10[1] = v29;
  v12(v10, v19, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000011, 0x8000000100A09F60, v10, v30);
  v14(v10, v6);
  *v10 = sub_100552DDC;
  v10[1] = 0;
  v12(v10, v19, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0x2072656874616557, 0xED00007374696E55, v10, v31);
  v14(v10, v6);
  v32 = a2[3];
  v33 = a2[4];
  sub_1000DB418(a2, v32);
  v34 = sub_1000BA294(&qword_100BEFD78);
  dispatch thunk of ResolverType.resolve<A>(_:)(v34, v34, v32, v33);
  if (v48)
  {
    sub_10003C800(&v47, (uint64_t)v49);
    sub_10003B59C((uint64_t)v49, (uint64_t)&v47);
    v35 = swift_allocObject(&unk_100B7F960, 56, 7);
    sub_10003C800(&v47, v35 + 16);
    *v10 = sub_10055531C;
    v10[1] = v35;
    v12(v10, v19, v6);
    dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000015, 0x8000000100A0A000, v10, v36);
    v14(v10, v6);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v49);
  }
  else
  {
    sub_100021AA4((uint64_t)&v47, &qword_100BEFD80);
  }
  *v10 = v26;
  v12(v10, enum case for DebugModel.dataSource(_:), v6);
  v37 = swift_retain();
  dispatch thunk of DebugDataSource.add(_:_:)(0xD00000000000001CLL, 0x8000000100A09F80, v10, v37);
  v14(v10, v6);
  *v10 = sub_1005537EC;
  v10[1] = 0;
  v38 = HIDWORD(v45);
  v12(v10, HIDWORD(v45), v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000015, 0x8000000100A09FA0, v10, v39);
  v14(v10, v6);
  *v10 = sub_1005537F8;
  v10[1] = 0;
  v12(v10, v38, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000015, 0x8000000100A09FC0, v10, v40);
  v14(v10, v6);
  *v10 = sub_100553804;
  v10[1] = 0;
  v12(v10, v38, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0xD000000000000016, 0x8000000100A09FE0, v10, v41);
  v14(v10, v6);
  *v10 = sub_1003E1088;
  v10[1] = 0;
  v12(v10, v38, v6);
  dispatch thunk of DebugDataSource.add(_:_:)(0x74616E696D726554, 0xE900000000000065, v10, v42);
  v43 = swift_release(v26);
  return ((uint64_t (*)(_QWORD *, uint64_t, __n128))v14)(v10, v6, v43);
}

double sub_100551D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double result;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _BYTE v82[24];
  _BYTE v83[24];
  _BYTE v84[24];
  _BYTE v85[24];
  _BYTE v86[24];
  _BYTE v87[24];
  _BYTE v88[24];
  _BYTE v89[24];
  _BYTE v90[24];
  _BYTE v91[24];
  _BYTE v92[24];
  _BYTE v93[24];
  _BYTE v94[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v94, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    if (qword_100BC2300 != -1)
      swift_once(&qword_100BC2300, sub_10015ABAC);
    v4 = qword_100CAEEC0;
    v93[0] = 1;
    v5 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v6, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v4, v93, v5, v7);
    swift_release(v3);
  }
  swift_beginAccess(v1, v93, 0, 0);
  v8 = swift_weakLoadStrong(v1);
  if (v8)
  {
    v9 = v8;
    v10 = static Settings.AppConfig.clearConfigCacheOnNextLaunch.getter();
    v92[0] = 1;
    v11 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v12, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v10, v92, v11, v13);
    swift_release(v9);
    swift_release(v10);
  }
  swift_beginAccess(v1, v92, 0, 0);
  v14 = swift_weakLoadStrong(v1);
  if (v14)
  {
    v15 = v14;
    v16 = static Settings.Daemon.clearAQIScalesCacheOnNextLaunch.getter();
    v91[0] = 1;
    v17 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v18, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v16, v91, v17, v19);
    swift_release(v15);
    swift_release(v16);
  }
  swift_beginAccess(v1, v91, 0, 0);
  v20 = swift_weakLoadStrong(v1);
  if (v20)
  {
    v21 = v20;
    v22 = static Settings.Daemon.clearWeatherDataCacheOnNextLaunch.getter();
    v90[0] = 1;
    v23 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v24, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v22, v90, v23, v25);
    swift_release(v21);
    swift_release(v22);
  }
  swift_beginAccess(v1, v90, 0, 0);
  v26 = swift_weakLoadStrong(v1);
  if (v26)
  {
    v27 = v26;
    v28 = static Settings.Daemon.clearWeatherAvailableDataSetsCacheOnNextLaunch.getter();
    v89[0] = 1;
    v29 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v30, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v28, v89, v29, v31);
    swift_release(v27);
    swift_release(v28);
  }
  swift_beginAccess(v1, v89, 0, 0);
  v32 = swift_weakLoadStrong(v1);
  if (v32)
  {
    v33 = v32;
    v34 = static Settings.Daemon.clearDailyStatisticsCacheOnNextLaunch.getter();
    v88[0] = 1;
    v35 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v36, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v34, v88, v35, v37);
    swift_release(v33);
    swift_release(v34);
  }
  swift_beginAccess(v1, v88, 0, 0);
  v38 = swift_weakLoadStrong(v1);
  if (v38)
  {
    v39 = v38;
    v40 = static Settings.Daemon.clearDailySummaryCacheOnNextLaunch.getter();
    v87[0] = 1;
    v41 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v42, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v40, v87, v41, v43);
    swift_release(v39);
    swift_release(v40);
  }
  swift_beginAccess(v1, v87, 0, 0);
  v44 = swift_weakLoadStrong(v1);
  if (v44)
  {
    v45 = v44;
    v46 = static Settings.Daemon.clearHourlyStatisticsCacheOnNextLaunch.getter();
    v86[0] = 1;
    v47 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v48, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v46, v86, v47, v49);
    swift_release(v45);
    swift_release(v46);
  }
  swift_beginAccess(v1, v86, 0, 0);
  v50 = swift_weakLoadStrong(v1);
  if (v50)
  {
    v51 = v50;
    v52 = static Settings.Daemon.clearMonthlyStatisticsCacheOnNextLaunch.getter();
    v85[0] = 1;
    v53 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v54, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v52, v85, v53, v55);
    swift_release(v51);
    swift_release(v52);
  }
  swift_beginAccess(v1, v85, 0, 0);
  v56 = swift_weakLoadStrong(v1);
  if (v56)
  {
    v57 = v56;
    v58 = static Settings.Daemon.clearCachedJWTTokenOnNextLaunch.getter();
    v84[0] = 1;
    v59 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v60, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v58, v84, v59, v61);
    swift_release(v57);
    swift_release(v58);
  }
  swift_beginAccess(v1, v84, 0, 0);
  v62 = swift_weakLoadStrong(v1);
  if (v62)
  {
    v63 = v62;
    v64 = static Settings.Geocoding.clearReverseGeocodingCacheOnNextLaunch.getter();
    v83[0] = 1;
    v65 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v66, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v64, v83, v65, v67);
    swift_release(v63);
    swift_release(v64);
  }
  swift_beginAccess(v1, v83, 0, 0);
  v68 = swift_weakLoadStrong(v1);
  if (v68)
  {
    v69 = v68;
    v70 = static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter();
    v82[0] = 1;
    v71 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v72, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v70, v82, v71, v73);
    swift_release(v69);
    swift_release(v70);
  }
  swift_beginAccess(v1, v82, 0, 0);
  v74 = swift_weakLoadStrong(v1);
  if (v74)
  {
    v76 = v74;
    v77 = static Settings.Geocoding.clearCurrentLocationCacheOnNextLaunch.getter();
    v81 = 1;
    v78 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v79, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v77, &v81, v78, v80);
    swift_release(v76);
    *(_QWORD *)&result = swift_release(v77).n128_u64[0];
  }
  return result;
}

double sub_1005523A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _BYTE v76[24];
  _BYTE v77[24];
  _BYTE v78[24];
  _BYTE v79[24];
  _BYTE v80[24];
  _BYTE v81[24];
  _BYTE v82[24];
  _BYTE v83[24];
  _BYTE v84[24];
  _BYTE v85[24];
  _BYTE v86[24];
  _BYTE v87[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v87, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    if (qword_100BC2300 != -1)
      swift_once(&qword_100BC2300, sub_10015ABAC);
    v4 = qword_100CAEEC0;
    v86[0] = 1;
    v5 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v6, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v4, v86, v5, v7);
    swift_release(v3);
  }
  swift_beginAccess(v1, v86, 0, 0);
  v8 = swift_weakLoadStrong(v1);
  if (v8)
  {
    v9 = v8;
    v10 = static Settings.Daemon.clearAQIScalesCacheOnNextLaunch.getter();
    v85[0] = 1;
    v11 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v12, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v10, v85, v11, v13);
    swift_release(v9);
    swift_release(v10);
  }
  swift_beginAccess(v1, v85, 0, 0);
  v14 = swift_weakLoadStrong(v1);
  if (v14)
  {
    v15 = v14;
    v16 = static Settings.Daemon.clearWeatherDataCacheOnNextLaunch.getter();
    v84[0] = 1;
    v17 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v18, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v16, v84, v17, v19);
    swift_release(v15);
    swift_release(v16);
  }
  swift_beginAccess(v1, v84, 0, 0);
  v20 = swift_weakLoadStrong(v1);
  if (v20)
  {
    v21 = v20;
    v22 = static Settings.Daemon.clearWeatherAvailableDataSetsCacheOnNextLaunch.getter();
    v83[0] = 1;
    v23 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v24, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v22, v83, v23, v25);
    swift_release(v21);
    swift_release(v22);
  }
  swift_beginAccess(v1, v83, 0, 0);
  v26 = swift_weakLoadStrong(v1);
  if (v26)
  {
    v27 = v26;
    v28 = static Settings.Daemon.clearDailyStatisticsCacheOnNextLaunch.getter();
    v82[0] = 1;
    v29 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v30, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v28, v82, v29, v31);
    swift_release(v27);
    swift_release(v28);
  }
  swift_beginAccess(v1, v82, 0, 0);
  v32 = swift_weakLoadStrong(v1);
  if (v32)
  {
    v33 = v32;
    v34 = static Settings.Daemon.clearDailySummaryCacheOnNextLaunch.getter();
    v81[0] = 1;
    v35 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v36, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v34, v81, v35, v37);
    swift_release(v33);
    swift_release(v34);
  }
  swift_beginAccess(v1, v81, 0, 0);
  v38 = swift_weakLoadStrong(v1);
  if (v38)
  {
    v39 = v38;
    v40 = static Settings.Daemon.clearHourlyStatisticsCacheOnNextLaunch.getter();
    v80[0] = 1;
    v41 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v42, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v40, v80, v41, v43);
    swift_release(v39);
    swift_release(v40);
  }
  swift_beginAccess(v1, v80, 0, 0);
  v44 = swift_weakLoadStrong(v1);
  if (v44)
  {
    v45 = v44;
    v46 = static Settings.Daemon.clearMonthlyStatisticsCacheOnNextLaunch.getter();
    v79[0] = 1;
    v47 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v48, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v46, v79, v47, v49);
    swift_release(v45);
    swift_release(v46);
  }
  swift_beginAccess(v1, v79, 0, 0);
  v50 = swift_weakLoadStrong(v1);
  if (v50)
  {
    v51 = v50;
    v52 = static Settings.Daemon.mangleCachedJWTTokenOnNextLaunch.getter();
    v78[0] = 1;
    v53 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v54, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v52, v78, v53, v55);
    swift_release(v51);
    swift_release(v52);
  }
  swift_beginAccess(v1, v78, 0, 0);
  v56 = swift_weakLoadStrong(v1);
  if (v56)
  {
    v57 = v56;
    v58 = static Settings.Geocoding.clearReverseGeocodingCacheOnNextLaunch.getter();
    v77[0] = 1;
    v59 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v60, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v58, v77, v59, v61);
    swift_release(v57);
    swift_release(v58);
  }
  swift_beginAccess(v1, v77, 0, 0);
  v62 = swift_weakLoadStrong(v1);
  if (v62)
  {
    v63 = v62;
    v64 = static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter();
    v76[0] = 1;
    v65 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v66, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v64, v76, v65, v67);
    swift_release(v63);
    swift_release(v64);
  }
  swift_beginAccess(v1, v76, 0, 0);
  v68 = swift_weakLoadStrong(v1);
  if (v68)
  {
    v70 = v68;
    v71 = static Settings.Geocoding.clearCurrentLocationCacheOnNextLaunch.getter();
    v75 = 1;
    v72 = type metadata accessor for DebugAssembly();
    sub_10005329C(&qword_100BEFDC0, v73, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE0A8);
    Updatable.save<A>(setting:value:)(v71, &v75, v72, v74);
    swift_release(v70);
    *(_QWORD *)&result = swift_release(v71).n128_u64[0];
  }
  return result;
}

id sub_1005529C4()
{
  id v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DiagnosticFileProvider()), "init");
  v1 = DiagnosticFileProvider.files()();

  v2 = v1[2];
  if (v2)
  {
    v3 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v1);
    v4 = v1 + 5;
    v5 = _swiftEmptyArrayStorage;
    do
    {
      v6 = *(v4 - 1);
      v7 = *v4;
      v15 = v3;
      sub_100077A84(&v14);
      v8 = swift_bridgeObjectRetain(v7);
      URL.init(fileURLWithPath:)(v6, v7, v8);
      swift_bridgeObjectRelease(v7);
      if (v15)
      {
        sub_10011E834(&v14, v16);
        sub_10011E834(v16, &v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        {
          sub_1005FF310();
          v5 = v10;
        }
        v9 = v5[2];
        if (v9 >= v5[3] >> 1)
        {
          sub_1005FF310();
          v5 = v11;
        }
        v5[2] = v9 + 1;
        sub_10011E834(&v14, &v5[4 * v9 + 4]);
      }
      else
      {
        sub_100021AA4((uint64_t)&v14, &qword_100C0B800);
      }
      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(v1, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v5 = _swiftEmptyArrayStorage;
  }
  v12 = objc_allocWithZone((Class)UIActivityViewController);
  return sub_10055417C((uint64_t)v5, (uint64_t)_swiftEmptyArrayStorage);
}

id sub_100552B84()
{
  id v0;
  id v1;

  sub_1000A0794(0, &qword_100BCBB30, UIAlertController_ptr);
  v0 = sub_100551298(0x6557207465736552, 0xED00007265687461, 0xD0000000000000C1, 0x8000000100A0A080, 1);
  sub_1000A0794(0, &qword_100BCBB38, UIAlertAction_ptr);
  v1 = sub_10055134C(19279, 0xE200000000000000, 0, 0, 0);
  objc_msgSend(v0, "addAction:", v1);

  return v0;
}

uint64_t sub_100552C50(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_10009C82C();
  v6 = a2(v5);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v3, v4);
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_100552CA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for JSONText(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = sub_1000BA294(&qword_100BCF678);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (v15)
  {
    sub_10003C800(&v14, (uint64_t)v17);
    v9 = v18;
    v10 = v19;
    sub_1000DB418(v17, v18);
    v15 = type metadata accessor for AppConfiguration(0);
    sub_10005329C(&qword_100BEFDB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AppConfiguration, (uint64_t)&protocol conformance descriptor for AppConfiguration);
    v16 = v11;
    sub_100077A84(&v14);
    dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v9, v10);
    JSONText.init(_:)(&v14);
    v12 = objc_allocWithZone((Class)type metadata accessor for JSONTextViewController(0));
    v13 = JSONTextViewController.init(jsonText:)(v4);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100552DDC()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v0 = type metadata accessor for JSON(0);
  v26 = *(_QWORD *)(v0 - 8);
  v27 = v0;
  v1 = __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for JSONView(0, v1);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = static Locale.current.getter(v15);
  v17 = Locale.identifier.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v20 = swift_allocObject(&unk_100B7F988, 24, 7);
  v21 = static Locale.availableIdentifiers.getter();
  swift_bridgeObjectRetain(v19);
  v22 = sub_1005510FC(v21, v17, v19);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(v20 + 16) = sub_100553678((uint64_t)v22);
  *v3 = v20;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v26 + 104))(v3, enum case for JSON.object(_:), v27);
  JSONView.init(value:)(v3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  v23 = objc_allocWithZone((Class)sub_1000BA294(&qword_100BEFD90));
  v24 = UIHostingController.init(rootView:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v24;
}

uint64_t sub_100552FD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(void);
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  char *v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t *, uint64_t, uint64_t);
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;

  v8 = type metadata accessor for Locale(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UnitDefaults(0, v9);
  v109 = *(_QWORD *)(v12 - 8);
  v110 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = (void *)a1[1];
  swift_bridgeObjectRetain(v16);
  Locale.init(identifier:)(v15, v16);
  UnitDefaults.init(locale:)(v11);
  v17 = v15 == a2 && v16 == a3;
  if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a2, a3, 0) & 1) != 0)
  {
    v117 = 8234;
    v118 = 0xE200000000000000;
    v18._countAndFlagsBits = v15;
    v18._object = v16;
    String.append(_:)(v18);
    v15 = v117;
    v16 = (void *)v118;
  }
  else
  {
    swift_bridgeObjectRetain(v16);
  }
  v19 = sub_1000BA294(&qword_100BCF2D8);
  v20 = *(int *)(v19 + 48);
  v21 = v19;
  v113 = v19;
  v108 = (uint64_t *)((char *)a4 + v20);
  *a4 = v15;
  a4[1] = (uint64_t)v16;
  v107 = swift_allocObject(&unk_100B7F988, 24, 7);
  v22 = sub_1000BA294(&qword_100BEFDA8);
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v25 = *(unsigned __int8 *)(v23 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v22, v26 - v24 + 8 * v24, v25 | 7);
  v106 = v27;
  *(_OWORD *)(v27 + 16) = xmmword_10098C750;
  v28 = (_QWORD *)(v27 + v26);
  v29 = (uint64_t *)(v27 + v26 + v20);
  *v28 = 0x6572757373657270;
  v28[1] = 0xE800000000000000;
  v30 = v27 + v26;
  v111 = v27 + v26;
  v31 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v32 = (void *)UnitDefaults.pressure.getter();
  v33 = objc_msgSend(v32, "symbol");

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  *(_QWORD *)(v31 + 16) = v34;
  *(_QWORD *)(v31 + 24) = v36;
  *v29 = v31;
  v37 = enum case for JSON.string(_:);
  v112 = type metadata accessor for JSON(0);
  v38 = *(_QWORD *)(v112 - 8);
  v119 = v14;
  v114 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v38 + 104);
  v116 = v37;
  v114(v29, v37, v112);
  v39 = v24;
  v115 = v24;
  v40 = (_QWORD *)(v30 + v24);
  v41 = v113;
  v42 = (uint64_t *)(v30 + v24 + *(int *)(v113 + 48));
  *v40 = 0x6C6C61666E696172;
  v40[1] = 0xE800000000000000;
  v43 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v44 = (void *)UnitDefaults.precipitationRainfall.getter();
  v45 = objc_msgSend(v44, "symbol");

  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  *(_QWORD *)(v43 + 16) = v46;
  *(_QWORD *)(v43 + 24) = v48;
  *v42 = v43;
  v49 = v37;
  v50 = v112;
  v51 = v114;
  v114(v42, v49, v112);
  v52 = (_QWORD *)(v111 + 2 * v39);
  v53 = v111;
  v54 = (_QWORD *)((char *)v52 + *(int *)(v41 + 48));
  *v52 = 0x6C6C6166776F6E73;
  v52[1] = 0xE800000000000000;
  v55 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v56 = (void *)UnitDefaults.precipitationSnowfall.getter();
  v57 = objc_msgSend(v56, "symbol");

  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v60 = v59;

  *(_QWORD *)(v55 + 16) = v58;
  *(_QWORD *)(v55 + 24) = v60;
  *v54 = v55;
  v51(v54, v116, v50);
  v61 = v115;
  v62 = (_QWORD *)(v53 + 3 * v115);
  v63 = v113;
  v64 = (_QWORD *)((char *)v62 + *(int *)(v113 + 48));
  *v62 = 0x74617265706D6574;
  v62[1] = 0xEB00000000657275;
  v65 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v66 = (void *)UnitDefaults.temperature.getter();
  v67 = objc_msgSend(v66, "symbol");

  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v70 = v69;

  *(_QWORD *)(v65 + 16) = v68;
  *(_QWORD *)(v65 + 24) = v70;
  *v64 = v65;
  v71 = v112;
  v114(v64, v116, v112);
  v72 = (_QWORD *)(v53 + 4 * v61);
  v73 = (_QWORD *)((char *)v72 + *(int *)(v63 + 48));
  *v72 = 0x696C696269736976;
  v72[1] = 0xEA00000000007974;
  v74 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v75 = (void *)UnitDefaults.visibility.getter();
  v76 = objc_msgSend(v75, "symbol");

  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
  v79 = v78;

  *(_QWORD *)(v74 + 16) = v77;
  *(_QWORD *)(v74 + 24) = v79;
  *v73 = v74;
  v80 = v116;
  v81 = (uint64_t (*)(void))v114;
  v114(v73, v116, v71);
  v82 = v111;
  v83 = (_QWORD *)(v111 + 5 * v115);
  v84 = (_QWORD *)((char *)v83 + *(int *)(v63 + 48));
  *v83 = 0x65657053646E6977;
  v83[1] = 0xE900000000000064;
  v85 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v86 = v119;
  v87 = (void *)UnitDefaults.windSpeed.getter();
  v88 = objc_msgSend(v87, "symbol");

  v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
  v91 = v90;

  *(_QWORD *)(v85 + 16) = v89;
  *(_QWORD *)(v85 + 24) = v91;
  *v84 = v85;
  v92 = v80;
  v93 = v112;
  ((void (*)(uint64_t *, uint64_t, uint64_t))v81)(v84, v92, v112);
  v94 = (_QWORD *)(v82 + 6 * v115);
  v95 = (_QWORD *)((char *)v94 + *(int *)(v113 + 48));
  *v94 = 0x74737547646E6977;
  v94[1] = 0xE800000000000000;
  v96 = swift_allocObject(&unk_100B7F9B0, 32, 7);
  v97 = (void *)UnitDefaults.windGust.getter();
  v98 = objc_msgSend(v97, "symbol");

  v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
  v101 = v100;

  *(_QWORD *)(v96 + 16) = v99;
  *(_QWORD *)(v96 + 24) = v101;
  *v95 = v96;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v81)(v95, v116, v93);
  v102 = Dictionary.init(dictionaryLiteral:)(v106);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v86, v110);
  v104 = v107;
  v103 = v108;
  *(_QWORD *)(v107 + 16) = v102;
  *v103 = v104;
  return v81();
}

void *sub_100553678(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000BA294(&qword_100BEFD98);
    v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v6 = v3;
  swift_bridgeObjectRetain(a1);
  sub_100554B94(v4, 1, &v6);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_100553720(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v11[5];

  v2 = type metadata accessor for JSONText(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1[3];
  v6 = a1[4];
  sub_1000DB418(a1, v5);
  v7 = dispatch thunk of LocationsOfInterestManagerType.locations.getter(v5, v6);
  v11[3] = sub_1000BA294(&qword_100BC5E18);
  v11[4] = sub_100555324();
  v11[0] = v7;
  JSONText.init(_:)(v11);
  v8 = objc_allocWithZone((Class)type metadata accessor for JSONTextViewController(0));
  return JSONTextViewController.init(jsonText:)(v4);
}

void sub_1005537EC()
{
  sub_100553810((SEL *)&selRef_triggerSIGBUS);
}

void sub_1005537F8()
{
  sub_100553810((SEL *)&selRef_triggerSIGILL);
}

void sub_100553804()
{
  sub_100553810((SEL *)&selRef_triggerSIGSEGV);
}

void sub_100553810(SEL *a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)TFCrashSimulator), "init");
  objc_msgSend(v2, *a1);

}

uint64_t sub_10055385C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v0 = sub_1000BA294(&qword_100BD4280);
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - v11;
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v14 = objc_msgSend(v13, "URLsForDirectory:inDomains:", 13, 1);

  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v3);
  sub_1001209F4(v15, (uint64_t)v2);
  swift_bridgeObjectRelease(v15);
  result = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v2, v3);
    DebugCacheRegistry.registerContentsOfDirectory(_:)(v12);
    type metadata accessor for AppGroup(0);
    v17 = static AppGroup.weather.getter();
    AppGroup.containerURL.getter();
    swift_release(v17);
    URL.appendingPathComponent(_:isDirectory:)(0x2F7972617262694CLL, 0xEE00736568636143, 1);
    DebugCacheRegistry.registerContentsOfDirectory(_:)(v6);
    v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v6, v3);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100A09EC0, 1);
    DebugCacheRegistry.registerContentsOfDirectory(_:)(v6);
    v18(v6, v3);
    v18(v9, v3);
    return ((uint64_t (*)(char *, uint64_t))v18)(v12, v3);
  }
  return result;
}

uint64_t sub_100553AB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BEFD60);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (v24)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1000DB418(a1, v6);
    v8 = sub_1000BA294(&qword_100BEFD68);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
    if (v22)
    {
      v9 = (void *)sub_100551438();
      v10 = sub_100068EB4((uint64_t)v23, v24);
      v11 = __chkstk_darwin(v10);
      v13 = (_QWORD *)((char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v14 + 16))(v13, v11);
      v15 = sub_100068EB4((uint64_t)v21, v22);
      v16 = __chkstk_darwin(v15);
      v18 = (_QWORD *)((char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v19 + 16))(v18, v16);
      v20 = sub_100555110(*v13, *v18, v9);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v21);
      _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
      return v20;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_100553C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v0 = type metadata accessor for DebugLocationViewController();
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_100553D30, 0, v0);
  swift_release(v1);
  v2 = type metadata accessor for LocalPresetsViewController(0);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_100553E3C, 0, v2);
  swift_release(v3);
  v4 = type metadata accessor for DebugLocationManager();
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, sub_100553ED0, 0, v4);
  swift_release(v5);
  v6 = sub_1000BA294(&qword_100BEFD60);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_100553F54, 0, v6);
  swift_release(v7);
  v8 = sub_1000BA294(&qword_100BEFD68);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_100553FA8, 0, v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

id sub_100553D30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = type metadata accessor for DebugLocationManager();
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = (uint64_t)result;
  v7 = a1[3];
  v8 = a1[4];
  sub_1000DB418(a1, v7);
  v9 = type metadata accessor for WeatherDataUpdater();
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = (uint64_t)result;
  v11 = a1[3];
  v12 = a1[4];
  sub_1000DB418(a1, v11);
  v13 = sub_1000BA294(&qword_100BC43F0);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (v15)
  {
    v14 = objc_allocWithZone((Class)type metadata accessor for DebugLocationViewController());
    return sub_1007BC8A4(v6, v10, v15, v16);
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_100553E3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BC43B0);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v6)
  {
    v5 = objc_allocWithZone((Class)type metadata accessor for LocalPresetsViewController(0));
    return sub_100296508(v6, v7, v8, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100553ED0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = sub_1000BA294(&qword_100BDC588);
  dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v5[3])
  {
    v4 = type metadata accessor for DebugLocationManager();
    swift_allocObject(v4, 64, 7);
    sub_1005F0720(v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100553F54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DiagnosticRecorder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = sub_1008EDE18();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B9A000;
  *a1 = result;
  return result;
}

uint64_t sub_100553FA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t result;

  v2 = type metadata accessor for DiagnosticSummaryFactory();
  v3 = swift_allocObject(v2, 24, 7);
  v4 = sub_1000BA294(&qword_100BEFD70);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = Cache.init()(v5);
  *(_QWORD *)(v3 + 16) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B653B0;
  *a1 = v3;
  return result;
}

id sub_10055401C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BEFD50);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!v15[3])
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_1000DB418(a1, v6);
  v8 = type metadata accessor for NotificationStore(0);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = (uint64_t)result;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BEFD58);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (v14[3])
  {
    v13 = objc_allocWithZone((Class)type metadata accessor for DebugNotificationSubscriptionsViewController());
    return sub_1003DFF5C(v15, v9, v14);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100554124(uint64_t a1, uint64_t a2)
{
  sub_10005329C(&qword_100BEFD48, a2, (uint64_t (*)(uint64_t))type metadata accessor for DebugAssembly, (uint64_t)&unk_1009AE068);
}

uint64_t sub_100554150()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100554174(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1005515E0(a1, a2, v2);
}

id sub_10055417C(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSArray v5;
  unint64_t v6;
  NSArray v7;
  id v8;

  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = swift_bridgeObjectRelease(a1).n128_u64[0];
  if (a2)
  {
    sub_1000A0794(0, &qword_100BEFDB8, UIActivity_ptr);
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v6 = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  else
  {
    v7.super.isa = 0;
  }
  v8 = objc_msgSend(v2, "initWithActivityItems:applicationActivities:", v5.super.isa, v7.super.isa, *(double *)&v6);

  return v8;
}

void sub_100554224(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v3 = v2;
  type metadata accessor for ElevationData(0);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v50 = v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098728();
  v12 = v11 - v10;
  v13 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000BA294(&qword_100BEFDD0);
  v49 = a2;
  v14 = a2;
  v15 = v13;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, v14);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_42;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v47 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v20 = v19 & *(_QWORD *)(v15 + 64);
  v45 = v2;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v21 = v16 + 64;
  swift_retain();
  v22 = 0;
  v48 = v15;
  if (!v20)
    goto LABEL_9;
LABEL_8:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v27)) + (v22 << 6))
  {
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v15 + 48) + v29 * i;
    if ((v49 & 1) != 0)
    {
      sub_1000C5B18(v12, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
      v31 = sub_1000C4B40();
      sub_1005554C0(v31, v32);
    }
    else
    {
      sub_1000C5B18(v12, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
      v33 = sub_1000C4B40();
      sub_10055547C(v33, v34);
    }
    v35 = *(_QWORD *)(v17 + 40);
    sub_10005329C((unint64_t *)&qword_100BC3588, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36) & ~(-1 << *(_BYTE *)(v17 + 32));
    if (((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6))) == 0)
    {
      sub_1000C567C();
      while (++v40 != v41 || (v39 & 1) == 0)
      {
        v42 = v40 == v41;
        if (v40 == v41)
          v40 = 0;
        v39 |= v42;
        v43 = *(_QWORD *)(v21 + 8 * v40);
        if (v43 != -1)
        {
          v38 = __clz(__rbit64(~v43)) + (v40 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    v38 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v21 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
    sub_1000C5B18(*(_QWORD *)(v17 + 48) + v29 * v38, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    sub_1005554C0(v50, *(_QWORD *)(v17 + 56) + v15 * v38);
    ++*(_QWORD *)(v17 + 16);
    v15 = v48;
    if (v20)
      goto LABEL_8;
LABEL_9:
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_44;
    if (v25 >= v46)
    {
      sub_1000B439C();
      v3 = v45;
      v26 = v47;
      goto LABEL_37;
    }
    v26 = v47;
    v27 = v47[v25];
    ++v22;
    if (!v27)
    {
      v22 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_35;
      v27 = v47[v22];
      if (!v27)
        break;
    }
LABEL_20:
    v20 = (v27 - 1) & v27;
  }
  v28 = v25 + 2;
  if (v28 < v46)
  {
    v27 = v47[v28];
    if (!v27)
    {
      while (1)
      {
        v22 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_45;
        if (v22 >= v46)
          goto LABEL_35;
        v27 = v47[v22];
        ++v28;
        if (v27)
          goto LABEL_20;
      }
    }
    v22 = v28;
    goto LABEL_20;
  }
LABEL_35:
  sub_1000B439C();
  v3 = v45;
LABEL_37:
  if ((v49 & 1) != 0)
  {
    v44 = 1 << *(_BYTE *)(v15 + 32);
    if (v44 >= 64)
      sub_100605B40(0, (unint64_t)(v44 + 63) >> 6, v26);
    else
      *v26 = -1 << v44;
    *(_QWORD *)(v15 + 16) = 0;
  }
LABEL_42:
  sub_1000B439C();
  *v3 = v17;
  sub_100098640();
}

void sub_1005545A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[9];

  v3 = v2;
  v47 = type metadata accessor for JSON(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1000BA294(&qword_100BEFD98);
  v45 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_40;
  v42 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain();
  v17 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(v8 + 56);
    v24 = v8;
    v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * i);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v6 + 72);
    v29 = v23 + v28 * i;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 32))(v46, v29, v47, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v46, v29, v47, v16);
      swift_bridgeObjectRetain(v26);
    }
    Hasher.init(_seed:)(v48);
    String.hash(into:)(v48, v27, v26);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) == 0)
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      while (++v33 != v36 || (v35 & 1) == 0)
      {
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v33);
        if (v38 != -1)
        {
          v34 = __clz(__rbit64(~v38)) + (v33 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v15 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    v39 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v34);
    *v39 = v27;
    v39[1] = v26;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v28 * v34, v46, v47);
    ++*(_QWORD *)(v10 + 16);
    v8 = v24;
    if (v14)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_42;
    if (v20 >= v43)
      goto LABEL_35;
    v21 = v44[v20];
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v43)
        goto LABEL_35;
      v21 = v44[v17];
      if (!v21)
        break;
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 2;
  if (v22 < v43)
  {
    v21 = v44[v22];
    if (!v21)
    {
      while (1)
      {
        v17 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_43;
        if (v17 >= v43)
          goto LABEL_35;
        v21 = v44[v17];
        ++v22;
        if (v21)
          goto LABEL_20;
      }
    }
    v17 = v22;
    goto LABEL_20;
  }
LABEL_35:
  swift_release(v8);
  v3 = v42;
  if ((v45 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v8 + 32);
    if (v40 >= 64)
      sub_100605B40(0, (unint64_t)(v40 + 63) >> 6, v44);
    else
      *v44 = -1 << v40;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_40:
  swift_release(v8);
  *v3 = v10;
}

void sub_100554904(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000BA294(&qword_100BEFDC8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v11 = (uint64_t *)(v5 + 64);
    v10 = *(_QWORD *)(v5 + 64);
    v12 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v12;
    v31 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & v10;
    v32 = (unint64_t)(v12 + 63) >> 6;
    v15 = v7 + 64;
    if ((v13 & v10) == 0)
      goto LABEL_10;
LABEL_9:
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    for (i = v16 | (v9 << 6); ; i = __clz(__rbit64(v19)) + (v9 << 6))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      v23 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v21) & ~(-1 << *(_BYTE *)(v8 + 32));
      if (((-1 << v23) & ~*(_QWORD *)(v15 + 8 * (v23 >> 6))) == 0)
      {
        sub_1000C567C();
        while (++v26 != v27 || (v25 & 1) == 0)
        {
          v28 = v26 == v27;
          if (v26 == v27)
            v26 = 0;
          v25 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v26);
          if (v29 != -1)
          {
            v24 = __clz(__rbit64(~v29)) + (v26 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return;
      }
      v24 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v15 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v15 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v24) = v21;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v24) = v22;
      ++*(_QWORD *)(v8 + 16);
      if (v14)
        goto LABEL_9;
LABEL_10:
      v18 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_43;
      if (v18 >= v32)
        goto LABEL_35;
      v19 = v11[v18];
      ++v9;
      if (!v19)
      {
        v9 = v18 + 1;
        if (v18 + 1 >= v32)
          goto LABEL_35;
        v19 = v11[v9];
        if (!v19)
        {
          v20 = v18 + 2;
          if (v20 >= v32)
          {
LABEL_35:
            if ((a2 & 1) != 0)
            {
              if (v31 >= 64)
                sub_100605B40(0, v32, (_QWORD *)(v5 + 64));
              else
                *v11 = v30;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v19 = v11[v20];
          if (!v19)
          {
            while (1)
            {
              v9 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_44;
              if (v9 >= v32)
                goto LABEL_35;
              v19 = v11[v9];
              ++v20;
              if (v19)
                goto LABEL_21;
            }
          }
          v9 = v20;
        }
      }
LABEL_21:
      v14 = (v19 - 1) & v19;
    }
  }
  sub_100089020();
  *v3 = v8;
}

void sub_100554B94(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  char *v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v50 = a3;
  v6 = type metadata accessor for JSON(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v49 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCF2D8);
  __chkstk_darwin(v9);
  v13 = (_QWORD *)((char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease(a1);
    return;
  }
  v42[1] = v3;
  v43 = a1;
  v48 = (char *)v13 + *(int *)(v10 + 48);
  v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v44 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain(a1);
  v46 = v7;
  v47 = v6;
  v45 = v13;
  while (1)
  {
    sub_1005553C8(v15, (uint64_t)v13);
    v17 = v13[1];
    v53 = *v13;
    v16 = v53;
    v54 = v17;
    v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v18(v49, v48, v6);
    v19 = (_QWORD *)*v50;
    v21 = sub_1000991C8(v16);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v25 = v20;
    if (v19[3] < v24)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v20 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1000BA294(&qword_100BEFDA0);
      _NativeDictionary.copy()();
      if ((v25 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v28 = v49;
    v29 = (_QWORD *)*v50;
    *(_QWORD *)(*v50 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    v30 = (uint64_t *)(v29[6] + 16 * v21);
    *v30 = v16;
    v30[1] = v17;
    v7 = v46;
    v31 = v29[7] + *(_QWORD *)(v46 + 72) * v21;
    v6 = v47;
    v18((char *)v31, v28, v47);
    v32 = v29[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_18;
    v29[2] = v34;
    v13 = v45;
    v15 += v44;
    a2 = 1;
    if (!--v14)
    {
      swift_bridgeObjectRelease_n(v43, 2);
      return;
    }
  }
  sub_1005545A0(v24, a2 & 1);
  v26 = sub_1000991C8(v16);
  if ((v25 & 1) != (v27 & 1))
    goto LABEL_19;
  v21 = v26;
  if ((v25 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v35 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow();
  v55 = v35;
  swift_errorRetain(v35);
  v36 = sub_1000BA294(&qword_100BD7910);
  if ((swift_dynamicCast(v36, &v55, v36, &type metadata for _MergeError, 0) & 1) == 0)
  {
    v37 = v43;
    v38 = swift_bridgeObjectRelease(v43);
    (*(void (**)(char *, uint64_t, __n128))(v46 + 8))(v49, v47, v38);
    v39 = v54;
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v39);
    swift_errorRelease(v55);
    return;
  }
LABEL_20:
  v51 = 0;
  v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v40._object = (void *)0x8000000100A0A060;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)(&v53, &v51, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v51, v52, "Swift/NativeDictionary.swift", 28, 2);
  __break(1u);
}

uint64_t sub_100554F3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v8 = type metadata accessor for UnfairLock.Options(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DiagnosticRecorder(0);
  v26 = &off_100B9A000;
  v24[0] = a1;
  v23[3] = type metadata accessor for DiagnosticSummaryFactory();
  v23[4] = &off_100B653B0;
  v23[0] = a2;
  v12 = sub_1000BA294(&qword_100BC28E8);
  v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_10097CA50;
  static UnfairLock.Options.dataSynchronization.getter(v13);
  v22 = v13;
  sub_10005329C((unint64_t *)&qword_100BC28F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v15 = v14;
  v16 = sub_1000BA294(&qword_100BC28F8);
  sub_100081288((unint64_t *)&qword_100BC2900, &qword_100BC28F8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v8, v15);
  v18 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(a4 + 104) = UnfairLock.init(options:)(v11);
  *(_QWORD *)(a4 + 112) = 0;
  *(_BYTE *)(a4 + 120) = 0;
  sub_10003B59C((uint64_t)v24, a4 + 16);
  sub_10003B59C((uint64_t)v23, a4 + 56);
  *(_QWORD *)(a4 + 96) = a3;
  sub_1000DB418(v24, v25);
  v19 = a3;
  sub_1008ED9FC();

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v24);
  return a4;
}

uint64_t sub_100555110(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  v24 = type metadata accessor for DiagnosticRecorder(0);
  v25 = &off_100B9A000;
  v23[0] = a1;
  v21 = type metadata accessor for DiagnosticSummaryFactory();
  v22 = &off_100B653B0;
  v20[0] = a2;
  v6 = type metadata accessor for DiagnosticManager();
  v7 = swift_allocObject(v6, 121, 7);
  v8 = sub_100068EB4((uint64_t)v23, v24);
  v9 = __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v12 + 16))(v11, v9);
  v13 = sub_100068EB4((uint64_t)v20, v21);
  v14 = __chkstk_darwin(v13);
  v16 = (_QWORD *)((char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v17 + 16))(v16, v14);
  v18 = sub_100554F3C(*v11, *v16, a3, v7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v20);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  return v18;
}

double sub_100555260()
{
  uint64_t v0;

  return sub_100551D00(v0);
}

double sub_100555268()
{
  uint64_t v0;

  return sub_1005523A0(v0);
}

uint64_t sub_100555270()
{
  uint64_t v0;

  return sub_100552C50((_QWORD *)(v0 + 16), (uint64_t (*)(uint64_t))type metadata accessor for DebugNotificationSubscriptionsViewController);
}

uint64_t sub_100555290()
{
  uint64_t v0;

  return sub_100552C50((_QWORD *)(v0 + 16), (uint64_t (*)(uint64_t))type metadata accessor for DebugOfflineViewController);
}

uint64_t sub_1005552B0()
{
  uint64_t v0;

  return sub_100552C50((_QWORD *)(v0 + 16), type metadata accessor for LocalPresetsViewController);
}

uint64_t sub_1005552D0()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005552F4()
{
  uint64_t v0;

  return sub_100552C50((_QWORD *)(v0 + 16), (uint64_t (*)(uint64_t))type metadata accessor for DebugLocationViewController);
}

uint64_t sub_100555314()
{
  uint64_t v0;

  return sub_100552CA0((_QWORD *)(v0 + 16));
}

uint64_t sub_10055531C()
{
  uint64_t v0;

  return sub_100553720((_QWORD *)(v0 + 16));
}

unint64_t sub_100555324()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEFD88;
  if (!qword_100BEFD88)
  {
    v1 = sub_100075EB0(&qword_100BC5E18);
    sub_10005329C(&qword_100BEA9A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocationOfInterest, (uint64_t)&protocol conformance descriptor for LocationOfInterest);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BEFD88);
  }
  return result;
}

uint64_t sub_1005553A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005553C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCF2D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100555410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCF2D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100555458()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055547C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ElevationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005554C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ElevationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100555518(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_10055553C()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100555560()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100555584()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

_QWORD *sub_1005555C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t, __n128);
  __n128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t, __n128);
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t, __n128);
  __n128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ChartKind(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain();
    v12(v9, v10, v11, v13);
    v14 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for DetailChartExtrema(0);
    v18 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    v19 = swift_bridgeObjectRetain();
    v18(v15, v16, v17, v19);
    v20 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v20) = *(_QWORD *)((char *)a2 + v20);
    v21 = a3[11];
    *(_OWORD *)((char *)v4 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
    v22 = (char *)v4 + v21;
    v23 = *(void **)((char *)a2 + v21);
    v24 = *(void **)((char *)a2 + v21 + 8);
    v25 = *(_QWORD *)((char *)a2 + v21 + 16);
    LOBYTE(v18) = *((_BYTE *)a2 + v21 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001A41A0(v23, v24, v25, v18);
    *(_QWORD *)v22 = v23;
    *((_QWORD *)v22 + 1) = v24;
    *((_QWORD *)v22 + 2) = v25;
    v22[24] = (char)v18;
    v26 = a3[12];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    *(_QWORD *)((char *)v4 + v26) = *(_QWORD *)((char *)a2 + v26);
    v29 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
    v30 = &v27[v29];
    v31 = &v28[v29];
    v32 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32))
    {
      v33 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
    }
    v35 = a3[13];
    v36 = a3[14];
    v37 = (char *)v4 + v35;
    v38 = (char *)a2 + v35;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    v39 = (_QWORD *)((char *)v4 + v36);
    v40 = (_QWORD *)((char *)a2 + v36);
    v41 = sub_1000BA294(&qword_100BCB988);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
    {
      v42 = type metadata accessor for ChartViewModel.Background(0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      *v39 = *v40;
      v43 = *(int *)(v41 + 48);
      v44 = (char *)v39 + v43;
      v45 = (char *)v40 + v43;
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v32))
      {
        v46 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v44, v45, v32);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v32);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
    }
    v47 = a3[16];
    *(_QWORD *)((char *)v4 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
    v48 = (char *)v4 + v47;
    v49 = (char *)a2 + v47;
    v50 = type metadata accessor for ChartDarkeningScrim(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    v51 = a3[18];
    *(_QWORD *)((char *)v4 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
    v52 = (char *)v4 + v51;
    v53 = (char *)a2 + v51;
    v54 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v32 - 8) + 16);
    v55 = swift_bridgeObjectRetain();
    v54(v52, v53, v32, v55);
    ((void (*)(char *, char *, uint64_t))v54)((char *)v4 + a3[19], (char *)a2 + a3[19], v32);
    ((void (*)(char *, char *, uint64_t))v54)((char *)v4 + a3[20], (char *)a2 + a3[20], v32);
    v56 = a3[21];
    v57 = (char *)v4 + v56;
    v58 = (char *)a2 + v56;
    v59 = type metadata accessor for DetailChartDataElement(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v58, 1, v59))
    {
      v60 = sub_1000BA294(&qword_100BCB0A0);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v57, 0, 1, v59);
    }
    v61 = a3[23];
    *(_QWORD *)((char *)v4 + a3[22]) = *(_QWORD *)((char *)a2 + a3[22]);
    v62 = (char *)v4 + v61;
    v63 = (char *)a2 + v61;
    v64 = type metadata accessor for ChartPeakMarkStyle(0);
    v65 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v64 - 8) + 16);
    v66 = swift_bridgeObjectRetain();
    v65(v62, v63, v64, v66);
    v67 = a3[25];
    *(_QWORD *)((char *)v4 + a3[24]) = *(_QWORD *)((char *)a2 + a3[24]);
    *(_QWORD *)((char *)v4 + v67) = *(_QWORD *)((char *)a2 + v67);
    v68 = a3[26];
    v69 = (char *)v4 + v68;
    v70 = (char *)a2 + v68;
    v71 = type metadata accessor for ChartViewModelInterpolationMode(0);
    v72 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v71 - 8) + 16);
    v73 = swift_bridgeObjectRetain();
    v72(v69, v70, v71, v73);
    v74 = a3[27];
    v75 = (char *)v4 + v74;
    v76 = (char *)a2 + v74;
    v77 = type metadata accessor for ChartPastDataTreatment(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
    v78 = a3[28];
    v79 = a3[29];
    v80 = (_QWORD *)((char *)v4 + v78);
    v81 = (_QWORD *)((char *)a2 + v78);
    v82 = v81[1];
    *v80 = *v81;
    v80[1] = v82;
    v83 = (_QWORD *)((char *)v4 + v79);
    v84 = (_QWORD *)((char *)a2 + v79);
    v85 = v84[1];
    *v83 = *v84;
    v83[1] = v85;
    v86 = a3[30];
    v87 = a3[31];
    v88 = (_QWORD *)((char *)v4 + v86);
    v89 = (_QWORD *)((char *)a2 + v86);
    v90 = v89[1];
    *v88 = *v89;
    v88[1] = v90;
    v91 = (_QWORD *)((char *)v4 + v87);
    v92 = (_QWORD *)((char *)a2 + v87);
    v93 = v92[1];
    *v91 = *v92;
    v91[1] = v93;
    v94 = a3[32];
    v95 = a3[33];
    v96 = (_QWORD *)((char *)v4 + v94);
    v97 = (_QWORD *)((char *)a2 + v94);
    v98 = v97[1];
    *v96 = *v97;
    v96[1] = v98;
    v99 = (_QWORD *)((char *)v4 + v95);
    v100 = (_QWORD *)((char *)a2 + v95);
    v101 = v100[1];
    *v99 = *v100;
    v99[1] = v101;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t type metadata accessor for ChartViewModel.Background(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF0020, (uint64_t)&nominal type descriptor for ChartViewModel.Background);
}

double sub_100555B14(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void (*v17)(uint64_t, uint64_t, __n128);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for ChartKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + a2[7];
  v7 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A44FC(*(void **)(a1 + a2[11]), *(void **)(a1 + a2[11] + 8), *(_QWORD *)(a1 + a2[11] + 16), *(_BYTE *)(a1 + a2[11] + 24));
  v8 = a1 + a2[12];
  v9 = v8 + *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v10 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[14];
  v12 = sub_1000BA294(&qword_100BCB988);
  if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
  {
    swift_release();
    v13 = v11 + *(int *)(v12 + 48);
    if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v13, v10);
  }
  v14 = a1 + a2[16];
  v15 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = swift_bridgeObjectRelease();
  v17 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 8);
  v17(a1 + a2[18], v10, v16);
  ((void (*)(uint64_t, uint64_t))v17)(a1 + a2[19], v10);
  ((void (*)(uint64_t, uint64_t))v17)(a1 + a2[20], v10);
  v18 = a1 + a2[21];
  v19 = type metadata accessor for DetailChartDataElement(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease();
  v20 = a1 + a2[23];
  v21 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease();
  v22 = a1 + a2[26];
  v23 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = a1 + a2[27];
  v25 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_100555E08(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t, __n128);
  __n128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t, __n128);
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t, __n128);
  __n128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ChartKind(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain();
  v11(v8, v9, v10, v12);
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for DetailChartExtrema(0);
  v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
  v18 = swift_bridgeObjectRetain();
  v17(v14, v15, v16, v18);
  v19 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  v21 = (char *)a1 + v20;
  v22 = *(void **)((char *)a2 + v20);
  v23 = *(void **)((char *)a2 + v20 + 8);
  v24 = *(_QWORD *)((char *)a2 + v20 + 16);
  LOBYTE(v17) = *((_BYTE *)a2 + v20 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v22, v23, v24, v17);
  *(_QWORD *)v21 = v22;
  *((_QWORD *)v21 + 1) = v23;
  *((_QWORD *)v21 + 2) = v24;
  v21[24] = (char)v17;
  v25 = a3[12];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v28 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v29 = &v26[v28];
  v30 = &v27[v28];
  v31 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
  {
    v32 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
  }
  v33 = a3[13];
  v34 = a3[14];
  v35 = (char *)a1 + v33;
  v36 = (char *)a2 + v33;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  v37 = (_QWORD *)((char *)a1 + v34);
  v38 = (_QWORD *)((char *)a2 + v34);
  v39 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v39))
  {
    v40 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    *v37 = *v38;
    v41 = *(int *)(v39 + 48);
    v42 = (char *)v37 + v41;
    v43 = (char *)v38 + v41;
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v31))
    {
      v44 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v42, v43, v31);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v31);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v39);
  }
  v45 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
  v49 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
  v53 = swift_bridgeObjectRetain();
  v52(v50, v51, v31, v53);
  ((void (*)(char *, char *, uint64_t))v52)((char *)a1 + a3[19], (char *)a2 + a3[19], v31);
  ((void (*)(char *, char *, uint64_t))v52)((char *)a1 + a3[20], (char *)a2 + a3[20], v31);
  v54 = a3[21];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
  {
    v58 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
  }
  v59 = a3[23];
  *(_QWORD *)((char *)a1 + a3[22]) = *(_QWORD *)((char *)a2 + a3[22]);
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for ChartPeakMarkStyle(0);
  v63 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v62 - 8) + 16);
  v64 = swift_bridgeObjectRetain();
  v63(v60, v61, v62, v64);
  v65 = a3[25];
  *(_QWORD *)((char *)a1 + a3[24]) = *(_QWORD *)((char *)a2 + a3[24]);
  *(_QWORD *)((char *)a1 + v65) = *(_QWORD *)((char *)a2 + v65);
  v66 = a3[26];
  v67 = (char *)a1 + v66;
  v68 = (char *)a2 + v66;
  v69 = type metadata accessor for ChartViewModelInterpolationMode(0);
  v70 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v69 - 8) + 16);
  v71 = swift_bridgeObjectRetain();
  v70(v67, v68, v69, v71);
  v72 = a3[27];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  v75 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
  v76 = a3[28];
  v77 = a3[29];
  v78 = (_QWORD *)((char *)a1 + v76);
  v79 = (_QWORD *)((char *)a2 + v76);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  v81 = (_QWORD *)((char *)a1 + v77);
  v82 = (_QWORD *)((char *)a2 + v77);
  v83 = v82[1];
  *v81 = *v82;
  v81[1] = v83;
  v84 = a3[30];
  v85 = a3[31];
  v86 = (_QWORD *)((char *)a1 + v84);
  v87 = (_QWORD *)((char *)a2 + v84);
  v88 = v87[1];
  *v86 = *v87;
  v86[1] = v88;
  v89 = (_QWORD *)((char *)a1 + v85);
  v90 = (_QWORD *)((char *)a2 + v85);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  v92 = a3[32];
  v93 = a3[33];
  v94 = (_QWORD *)((char *)a1 + v92);
  v95 = (_QWORD *)((char *)a2 + v92);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  v97 = (_QWORD *)((char *)a1 + v93);
  v98 = (_QWORD *)((char *)a2 + v93);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

char *sub_10055631C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __n128 v67;
  void (*v68)(char *, char *, uint64_t, __n128);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v109;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[10];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  v17 = a3[11];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(id *)v19;
  v21 = (void *)*((_QWORD *)v19 + 1);
  v22 = *((_QWORD *)v19 + 2);
  v23 = v19[24];
  sub_1001A41A0(*(id *)v19, v21, v22, v23);
  v24 = *(void **)v18;
  v25 = (void *)*((_QWORD *)v18 + 1);
  v26 = *((_QWORD *)v18 + 2);
  *(_QWORD *)v18 = v20;
  *((_QWORD *)v18 + 1) = v21;
  *((_QWORD *)v18 + 2) = v22;
  v27 = v18[24];
  v18[24] = v23;
  sub_1001A44FC(v24, v25, v26, v27);
  v28 = a3[12];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];
  v31 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v32 = &v29[v31];
  v33 = &v30[v31];
  v34 = type metadata accessor for Date(0);
  v35 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v34);
  v36 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v37 = *(_QWORD *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_6:
    v38 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v32, v33, v34);
LABEL_7:
  v39 = a3[13];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *(_QWORD *)v41;
  v40[8] = v41[8];
  *(_QWORD *)v40 = v42;
  v43 = a3[14];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = sub_1000BA294(&qword_100BCB988);
  v47 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v46);
  v48 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46);
  if (v47)
  {
    if (!v48)
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v49 = *(int *)(v46 + 48);
      v50 = &v44[v49];
      v51 = &v45[v49];
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v34))
      {
        v52 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v50, v51, v34);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v34);
      }
      v61 = (uint64_t)v44;
      v62 = v46;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (v48)
  {
    sub_100021A14((uint64_t)v44, &qword_100BCB988);
LABEL_13:
    v53 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v54 = v44;
    v55 = v45;
LABEL_14:
    memcpy(v54, v55, v53);
    goto LABEL_22;
  }
  *(_QWORD *)v44 = *(_QWORD *)v45;
  swift_retain();
  swift_release();
  v56 = *(int *)(v46 + 48);
  v57 = (uint64_t)&v44[v56];
  v58 = (uint64_t)&v45[v56];
  v59 = _s7Weather24LocationCompositionStateOwet_0(v57, 1, v34);
  v60 = _s7Weather24LocationCompositionStateOwet_0(v58, 1, v34);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v57, v58, v34);
      v61 = v57;
      v62 = v34;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v61, 0, 1, v62);
      goto LABEL_22;
    }
    goto LABEL_32;
  }
  v109 = *(_QWORD *)(v34 - 8);
  if (v60)
  {
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v57, v34);
LABEL_32:
    v53 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v54 = (void *)v57;
    v55 = (const void *)v58;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 24))(v57, v58, v34);
LABEL_22:
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  v63 = a3[16];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  swift_bridgeObjectRetain();
  v67 = swift_bridgeObjectRelease();
  v68 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 24);
  v68(&a1[a3[18]], &a2[a3[18]], v34, v67);
  ((void (*)(char *, char *, uint64_t))v68)(&a1[a3[19]], &a2[a3[19]], v34);
  ((void (*)(char *, char *, uint64_t))v68)(&a1[a3[20]], &a2[a3[20]], v34);
  v69 = a3[21];
  v70 = &a1[v69];
  v71 = &a2[v69];
  v72 = type metadata accessor for DetailChartDataElement(0);
  v73 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v72);
  v74 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72);
  if (!v73)
  {
    v75 = *(_QWORD *)(v72 - 8);
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v70, v71, v72);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v70, v72);
    goto LABEL_27;
  }
  if (v74)
  {
LABEL_27:
    v76 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
LABEL_28:
  *(_QWORD *)&a1[a3[22]] = *(_QWORD *)&a2[a3[22]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = a3[23];
  v78 = &a1[v77];
  v79 = &a2[v77];
  v80 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 24))(v78, v79, v80);
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  *(_QWORD *)&a1[a3[25]] = *(_QWORD *)&a2[a3[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v81 = a3[26];
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  v85 = a3[27];
  v86 = &a1[v85];
  v87 = &a2[v85];
  v88 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 24))(v86, v87, v88);
  v89 = a3[28];
  v90 = &a1[v89];
  v91 = &a2[v89];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v92 = a3[29];
  v93 = &a1[v92];
  v94 = &a2[v92];
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *((_QWORD *)v93 + 1) = *((_QWORD *)v94 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v95 = a3[30];
  v96 = &a1[v95];
  v97 = &a2[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  *((_QWORD *)v96 + 1) = *((_QWORD *)v97 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v98 = a3[31];
  v99 = &a1[v98];
  v100 = &a2[v98];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *((_QWORD *)v99 + 1) = *((_QWORD *)v100 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = a3[32];
  v102 = &a1[v101];
  v103 = &a2[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v104 = a3[33];
  v105 = &a1[v104];
  v106 = &a2[v104];
  v107 = *((_QWORD *)v106 + 1);
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = v107;
  swift_retain();
  swift_release();
  return a1;
}

char *sub_100556A88(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 9) = *(_OWORD *)(v17 + 9);
  v18 = a3[12];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v21 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v22 = &v19[v21];
  v23 = &v20[v21];
  v24 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v24))
  {
    v25 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v24);
  }
  v26 = a3[13];
  v27 = a3[14];
  v28 = &a1[v26];
  v29 = &a2[v26];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  v30 = &a1[v27];
  v31 = &a2[v27];
  v32 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v32))
  {
    v33 = type metadata accessor for ChartViewModel.Background(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v34 = *(int *)(v32 + 48);
    v35 = &v30[v34];
    v36 = &v31[v34];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, v24))
    {
      v37 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v35, v36, v24);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, v24);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v32);
  }
  v38 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  v42 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v43(&a1[v42], &a2[v42], v24);
  v43(&a1[a3[19]], &a2[a3[19]], v24);
  v43(&a1[a3[20]], &a2[a3[20]], v24);
  v44 = a3[21];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = type metadata accessor for DetailChartDataElement(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
  {
    v48 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
  }
  v49 = a3[23];
  *(_QWORD *)&a1[a3[22]] = *(_QWORD *)&a2[a3[22]];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
  v53 = a3[25];
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  *(_QWORD *)&a1[v53] = *(_QWORD *)&a2[v53];
  v54 = a3[26];
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  v58 = a3[27];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v61 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  v62 = a3[29];
  *(_OWORD *)&a1[a3[28]] = *(_OWORD *)&a2[a3[28]];
  *(_OWORD *)&a1[v62] = *(_OWORD *)&a2[v62];
  v63 = a3[31];
  *(_OWORD *)&a1[a3[30]] = *(_OWORD *)&a2[a3[30]];
  *(_OWORD *)&a1[v63] = *(_OWORD *)&a2[v63];
  v64 = a3[33];
  *(_OWORD *)&a1[a3[32]] = *(_OWORD *)&a2[a3[32]];
  *(_OWORD *)&a1[v64] = *(_OWORD *)&a2[v64];
  return a1;
}

char *sub_100556ED0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __n128 v62;
  void (*v63)(char *, char *, uint64_t, __n128);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for ChartKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for DetailChartExtrema(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  v15 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_QWORD *)v17 + 2);
  v19 = v17[24];
  v20 = *(void **)v16;
  v21 = (void *)*((_QWORD *)v16 + 1);
  v22 = *((_QWORD *)v16 + 2);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_QWORD *)v16 + 2) = v18;
  v23 = v16[24];
  v16[24] = v19;
  sub_1001A44FC(v20, v21, v22, v23);
  v24 = a3[12];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v27 = *(int *)(sub_1000BA294(&qword_100BCB978) + 48);
  v28 = &v25[v27];
  v29 = &v26[v27];
  v30 = type metadata accessor for Date(0);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, v30);
  v32 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v33 = *(_QWORD *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_6:
    v34 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v28, v29, v30);
LABEL_7:
  v35 = a3[13];
  v36 = a3[14];
  v37 = &a1[v35];
  v38 = &a2[v35];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = &a1[v36];
  v40 = &a2[v36];
  v41 = sub_1000BA294(&qword_100BCB988);
  v42 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, v41);
  v43 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41);
  if (v42)
  {
    if (!v43)
    {
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v44 = *(int *)(v41 + 48);
      v45 = &v39[v44];
      v46 = &v40[v44];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v30))
      {
        v47 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v45, v46, v30);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v30);
      }
      v56 = (uint64_t)v39;
      v57 = v41;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (v43)
  {
    sub_100021A14((uint64_t)v39, &qword_100BCB988);
LABEL_13:
    v48 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartViewModel.Background(0) - 8) + 64);
    v49 = v39;
    v50 = v40;
LABEL_14:
    memcpy(v49, v50, v48);
    goto LABEL_22;
  }
  *(_QWORD *)v39 = *(_QWORD *)v40;
  swift_release();
  v51 = *(int *)(v41 + 48);
  v52 = (uint64_t)&v39[v51];
  v53 = (uint64_t)&v40[v51];
  v54 = _s7Weather24LocationCompositionStateOwet_0(v52, 1, v30);
  v55 = _s7Weather24LocationCompositionStateOwet_0(v53, 1, v30);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v52, v53, v30);
      v56 = v52;
      v57 = v30;
LABEL_21:
      _s7Weather24LocationCompositionStateOwst_0(v56, 0, 1, v57);
      goto LABEL_22;
    }
    goto LABEL_32;
  }
  v111 = *(_QWORD *)(v30 - 8);
  if (v55)
  {
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v52, v30);
LABEL_32:
    v48 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
    v49 = (void *)v52;
    v50 = (const void *)v53;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 40))(v52, v53, v30);
LABEL_22:
  v58 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v61 = type metadata accessor for ChartDarkeningScrim(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  v62 = swift_bridgeObjectRelease();
  v63 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 40);
  v63(&a1[a3[18]], &a2[a3[18]], v30, v62);
  ((void (*)(char *, char *, uint64_t))v63)(&a1[a3[19]], &a2[a3[19]], v30);
  ((void (*)(char *, char *, uint64_t))v63)(&a1[a3[20]], &a2[a3[20]], v30);
  v64 = a3[21];
  v65 = &a1[v64];
  v66 = &a2[v64];
  v67 = type metadata accessor for DetailChartDataElement(0);
  v68 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v65, 1, v67);
  v69 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, v67);
  if (!v68)
  {
    v70 = *(_QWORD *)(v67 - 8);
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 40))(v65, v66, v67);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v67);
    goto LABEL_27;
  }
  if (v69)
  {
LABEL_27:
    v71 = sub_1000BA294(&qword_100BCB0A0);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 0, 1, v67);
LABEL_28:
  *(_QWORD *)&a1[a3[22]] = *(_QWORD *)&a2[a3[22]];
  swift_bridgeObjectRelease();
  v72 = a3[23];
  v73 = &a1[v72];
  v74 = &a2[v72];
  v75 = type metadata accessor for ChartPeakMarkStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 40))(v73, v74, v75);
  v76 = a3[25];
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  *(_QWORD *)&a1[v76] = *(_QWORD *)&a2[v76];
  swift_bridgeObjectRelease();
  v77 = a3[26];
  v78 = &a1[v77];
  v79 = &a2[v77];
  v80 = type metadata accessor for ChartViewModelInterpolationMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  v81 = a3[27];
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = type metadata accessor for ChartPastDataTreatment(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v82, v83, v84);
  v85 = a3[28];
  v86 = &a1[v85];
  v87 = (uint64_t *)&a2[v85];
  v89 = *v87;
  v88 = v87[1];
  *(_QWORD *)v86 = v89;
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  v90 = a3[29];
  v91 = &a1[v90];
  v92 = (uint64_t *)&a2[v90];
  v94 = *v92;
  v93 = v92[1];
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  v95 = a3[30];
  v96 = &a1[v95];
  v97 = (uint64_t *)&a2[v95];
  v99 = *v97;
  v98 = v97[1];
  *(_QWORD *)v96 = v99;
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRelease();
  v100 = a3[31];
  v101 = &a1[v100];
  v102 = (uint64_t *)&a2[v100];
  v104 = *v102;
  v103 = v102[1];
  *(_QWORD *)v101 = v104;
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  v105 = a3[32];
  v106 = &a1[v105];
  v107 = (uint64_t *)&a2[v105];
  v109 = *v107;
  v108 = v107[1];
  *(_QWORD *)v106 = v109;
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[33]] = *(_OWORD *)&a2[a3[33]];
  swift_release();
  return a1;
}

uint64_t sub_100557560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10055756C);
}

uint64_t sub_10055756C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1000C0AD0();
    sub_100088FF0();
    if (v11)
    {
      v9 = v8;
      v10 = a3[5];
    }
    else
    {
      sub_1000E77C8();
      sub_100088FF0();
      if (v11)
      {
        v9 = v12;
        v10 = a3[7];
      }
      else
      {
        sub_1000BDD48();
        sub_100088FF0();
        if (v13)
        {
          v14 = a1 + a3[12];
          v9 = sub_1000BA294(&qword_100BCB978);
          v15 = v14;
          return _s7Weather24LocationCompositionStateOwet_0(v15, a2, v9);
        }
        type metadata accessor for ChartViewModel.Background(0);
        sub_100088FF0();
        if (v16)
        {
          v9 = v17;
          v10 = a3[14];
        }
        else
        {
          sub_1000CF8BC();
          sub_100088FF0();
          if (v18)
          {
            v9 = v19;
            v10 = a3[16];
          }
          else
          {
            sub_100098778();
            sub_100088FF0();
            if (v20)
            {
              v9 = v21;
              v10 = a3[18];
            }
            else
            {
              sub_1000BA294(&qword_100BCB0A0);
              sub_100088FF0();
              if (v22)
              {
                v9 = v23;
                v10 = a3[21];
              }
              else
              {
                sub_1000D0700();
                sub_100088FF0();
                if (v24)
                {
                  v9 = v25;
                  v10 = a3[23];
                }
                else
                {
                  sub_1000BEEDC();
                  sub_100088FF0();
                  if (v26)
                  {
                    v9 = v27;
                    v10 = a3[26];
                  }
                  else
                  {
                    v9 = sub_1000C6B8C();
                    v10 = a3[27];
                  }
                }
              }
            }
          }
        }
      }
    }
    v15 = a1 + v10;
    return _s7Weather24LocationCompositionStateOwet_0(v15, a2, v9);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v4) = -1;
  return (v4 + 1);
}

uint64_t sub_1005576D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005576E0);
}

uint64_t sub_1005576E0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
    return result;
  }
  sub_1000C0AD0();
  sub_10009D2E8();
  if (v10)
  {
    v8 = v7;
    v9 = a4[5];
LABEL_30:
    v14 = v5 + v9;
    return sub_1000987C4(v14, a2, a2, v8);
  }
  sub_1000E77C8();
  sub_10009D2E8();
  if (v10)
  {
    v8 = v11;
    v9 = a4[7];
    goto LABEL_30;
  }
  sub_1000BDD48();
  sub_10009D2E8();
  if (!v12)
  {
    type metadata accessor for ChartViewModel.Background(0);
    sub_10009D2E8();
    if (v15)
    {
      v8 = v16;
      v9 = a4[14];
    }
    else
    {
      sub_1000CF8BC();
      sub_10009D2E8();
      if (v17)
      {
        v8 = v18;
        v9 = a4[16];
      }
      else
      {
        sub_100098778();
        sub_10009D2E8();
        if (v19)
        {
          v8 = v20;
          v9 = a4[18];
        }
        else
        {
          sub_1000BA294(&qword_100BCB0A0);
          sub_10009D2E8();
          if (v21)
          {
            v8 = v22;
            v9 = a4[21];
          }
          else
          {
            sub_1000D0700();
            sub_10009D2E8();
            if (v23)
            {
              v8 = v24;
              v9 = a4[23];
            }
            else
            {
              sub_1000BEEDC();
              sub_10009D2E8();
              if (v25)
              {
                v8 = v26;
                v9 = a4[26];
              }
              else
              {
                v8 = sub_1000C6B8C();
                v9 = a4[27];
              }
            }
          }
        }
      }
    }
    goto LABEL_30;
  }
  v13 = v5 + a4[12];
  v8 = sub_1000BA294(&qword_100BCB978);
  v14 = v13;
  return sub_1000987C4(v14, a2, a2, v8);
}

uint64_t type metadata accessor for ChartViewModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BEFF00, (uint64_t)&nominal type descriptor for ChartViewModel);
}

void sub_100557850(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[32];
  _QWORD v23[14];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;

  v23[0] = &unk_1009AE168;
  v2 = type metadata accessor for ChartKind(319);
  if (v3 <= 0x3F)
  {
    v23[1] = *(_QWORD *)(v2 - 8) + 64;
    v23[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for DetailChartExtrema(319);
    if (v5 <= 0x3F)
    {
      v23[3] = *(_QWORD *)(v4 - 8) + 64;
      v23[4] = &unk_1009AE180;
      v23[5] = &unk_1009AE180;
      v23[6] = &unk_1009AE198;
      v23[7] = &unk_1009AE1B0;
      sub_1001345CC(319, (unint64_t *)&qword_100BC3500, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        swift_getTupleTypeLayout2(v22, (char *)&value witness table for Builtin.Int64 + 64, *(_QWORD *)(v6 - 8) + 64);
        v23[8] = v22;
        v23[9] = &unk_1009AE1C8;
        v8 = type metadata accessor for ChartViewModel.Background(319);
        if (v9 <= 0x3F)
        {
          v23[10] = *(_QWORD *)(v8 - 8) + 64;
          v23[11] = (char *)&value witness table for Builtin.Int64 + 64;
          v10 = type metadata accessor for ChartDarkeningScrim(319);
          if (v11 <= 0x3F)
          {
            v23[12] = *(_QWORD *)(v10 - 8) + 64;
            v23[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
            v12 = type metadata accessor for Date(319);
            if (v13 <= 0x3F)
            {
              v24 = *(_QWORD *)(v12 - 8) + 64;
              v25 = v24;
              v26 = v24;
              sub_1001345CC(319, (unint64_t *)&unk_100BEFF10, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartDataElement);
              if (v15 <= 0x3F)
              {
                v27 = *(_QWORD *)(v14 - 8) + 64;
                v28 = (char *)&value witness table for Builtin.BridgeObject + 64;
                v16 = type metadata accessor for ChartPeakMarkStyle(319);
                if (v17 <= 0x3F)
                {
                  v29 = *(_QWORD *)(v16 - 8) + 64;
                  v30 = (char *)&value witness table for Builtin.Int64 + 64;
                  v31 = (char *)&value witness table for Builtin.BridgeObject + 64;
                  v18 = type metadata accessor for ChartViewModelInterpolationMode(319);
                  if (v19 <= 0x3F)
                  {
                    v32 = *(_QWORD *)(v18 - 8) + 64;
                    v20 = type metadata accessor for ChartPastDataTreatment(319);
                    if (v21 <= 0x3F)
                    {
                      v33 = *(_QWORD *)(v20 - 8) + 64;
                      v34 = &unk_1009AE168;
                      v35 = &unk_1009AE168;
                      v36 = &unk_1009AE168;
                      v37 = &unk_1009AE168;
                      v38 = &unk_1009AE1E0;
                      v39 = (char *)&value witness table for () + 64;
                      swift_initStructMetadata(a1, 256, 30, v23, a1 + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t *sub_100557A7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BCB988);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      v9 = *(int *)(v7 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100557BB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1000BA294(&qword_100BCB988);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_release();
    v4 = a1 + *(int *)(v2 + 48);
    v5 = type metadata accessor for Date(0);
    result = _s7Weather24LocationCompositionStateOwet_0(v4, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return result;
}

_QWORD *sub_100557C40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(v6 + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_100557D54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = sub_1000BA294(&qword_100BCB988);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      v9 = *(int *)(v6 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      swift_retain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v21 = (uint64_t)a1;
      v22 = v6;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100021A14((uint64_t)a1, &qword_100BCB988);
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
    v15 = a1;
    goto LABEL_8;
  }
  *a1 = *a2;
  swift_retain();
  swift_release();
  v16 = *(int *)(v6 + 48);
  v17 = (uint64_t)a1 + v16;
  a2 = (_QWORD *)((char *)a2 + v16);
  v18 = type metadata accessor for Date(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0(v17, 1, v18);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, a2, v18);
      v21 = v17;
      v22 = v18;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v21, 0, 1, v22);
      return a1;
    }
  }
  else
  {
    v24 = *(_QWORD *)(v18 - 8);
    if (!v20)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v24 + 24))(v17, a2, v18);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v17, v18);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v15 = (void *)v17;
LABEL_8:
  memcpy(v15, a2, v14);
  return a1;
}

_QWORD *sub_100557F68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000BA294(&qword_100BCB988);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(v6 + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_100558074(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = sub_1000BA294(&qword_100BCB988);
  v7 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      v9 = *(int *)(v6 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v21 = (uint64_t)a1;
      v22 = v6;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_100021A14((uint64_t)a1, &qword_100BCB988);
LABEL_7:
    v14 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
    v15 = a1;
    goto LABEL_8;
  }
  *a1 = *a2;
  swift_release();
  v16 = *(int *)(v6 + 48);
  v17 = (uint64_t)a1 + v16;
  a2 = (_QWORD *)((char *)a2 + v16);
  v18 = type metadata accessor for Date(0);
  v19 = _s7Weather24LocationCompositionStateOwet_0(v17, 1, v18);
  v20 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a2, v18);
      v21 = v17;
      v22 = v18;
LABEL_14:
      _s7Weather24LocationCompositionStateOwst_0(v21, 0, 1, v22);
      return a1;
    }
  }
  else
  {
    v24 = *(_QWORD *)(v18 - 8);
    if (!v20)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v24 + 40))(v17, a2, v18);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v17, v18);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
  v15 = (void *)v17;
LABEL_8:
  memcpy(v15, a2, v14);
  return a1;
}

uint64_t sub_100558278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100558284);
}

uint64_t sub_100558284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1000BA294(&qword_100BCB988);
  v5 = _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_1005582CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005582D8);
}

uint64_t sub_1005582D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_1000BA294(&qword_100BCB988);
  return sub_1000987C4(a1, v5, a3, v6);
}

uint64_t sub_10055831C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCB988);
  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
}

uint64_t sub_100558350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB988);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v4);
}

void sub_10055838C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];

  sub_1001345CC(319, (unint64_t *)&qword_100BC3500, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, (char *)&value witness table for Builtin.NativeObject + 64, *(_QWORD *)(v2 - 8) + 64);
    swift_initEnumMetadataSinglePayload(a1, 256, v4, 1);
  }
}

void sub_100558414(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  sub_10004A298();
}

void sub_100558460(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  BOOL v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;

  v8 = type metadata accessor for DetailChartDataElement(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v31 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v28 = (char *)&v28 - v12;
  v34 = a2;
  v13 = sub_10021A640(a1, a2, a3);
  v35 = _swiftEmptyArrayStorage;
  sub_100605D80();
  if ((v13 & 0x8000000000000000) == 0)
  {
    v14 = v35;
    v32 = a3;
    v33 = a4;
    if (v13)
    {
      v30 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v29 = a4 + v30;
      v15 = v31;
      while (1)
      {
        v16 = a1 <= v34;
        if (a3 > 0)
          v16 = a1 >= v34;
        if (v16)
          break;
        if (__OFADD__(a1, a3))
          v17 = ((a1 + a3) >> 63) ^ 0x8000000000000000;
        else
          v17 = a1 + a3;
        if (a1 < 0)
          goto LABEL_34;
        if ((unint64_t)a1 >= *(_QWORD *)(a4 + 16))
          goto LABEL_35;
        v18 = *(_QWORD *)(v9 + 72);
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v29 + v18 * a1, v8);
        v35 = v14;
        v19 = v14[2];
        if (v19 >= v14[3] >> 1)
        {
          sub_100605D80();
          v14 = v35;
        }
        v14[2] = v19 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v14 + v30 + v19 * v18, v15, v8);
        a1 = v17;
        --v13;
        a3 = v32;
        a4 = v33;
        if (!v13)
          goto LABEL_17;
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    else
    {
      v17 = a1;
LABEL_17:
      v20 = v17 <= v34;
      if (a3 > 0)
        v20 = v17 >= v34;
      if (v20)
      {
LABEL_20:
        swift_bridgeObjectRelease(a4);
        return;
      }
      v21 = v28;
      while (1)
      {
        v22 = __OFADD__(v17, a3) ? ((v17 + a3) >> 63) ^ 0x8000000000000000 : v17 + a3;
        if (v17 < 0)
          break;
        if ((unint64_t)v17 >= *(_QWORD *)(a4 + 16))
          goto LABEL_37;
        v23 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v24 = a4 + v23;
        v25 = *(_QWORD *)(v9 + 72);
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v21, v24 + v25 * v17, v8);
        v35 = v14;
        v26 = v14[2];
        if (v26 >= v14[3] >> 1)
        {
          sub_100605D80();
          v14 = v35;
        }
        v14[2] = v26 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v14 + v23 + v26 * v25, v21, v8);
        a4 = v33;
        v27 = v22 <= v34;
        a3 = v32;
        if (v32 > 0)
          v27 = v22 >= v34;
        v17 = v22;
        if (v27)
          goto LABEL_20;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10055874C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22,uint64_t a23,unsigned __int8 a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void);
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v184 = a8;
  v172 = a7;
  v185 = a6;
  v186 = a4;
  v187 = a3;
  v188 = a5;
  v171 = a2;
  v168 = a1;
  v167 = a9;
  v169 = a26;
  v170 = a25;
  v180 = a19;
  v181 = a17;
  v182 = a16;
  v183 = a15;
  v166 = sub_1000C6B8C();
  v165 = *(_QWORD *)(v166 - 8);
  sub_10009D98C();
  __chkstk_darwin(v43);
  sub_100088FDC();
  v162 = v44;
  v164 = sub_1000BEEDC();
  v163 = *(_QWORD *)(v164 - 8);
  sub_10009D98C();
  __chkstk_darwin(v45);
  sub_1000CD848(v46, v130);
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  sub_1000986FC();
  v158 = v48;
  sub_10009D2A4();
  __chkstk_darwin(v49);
  v146 = (uint64_t)&v130 - v50;
  v51 = sub_1000D0700();
  v178 = *(_QWORD *)(v51 - 8);
  v179 = v51;
  sub_10009D98C();
  __chkstk_darwin(v52);
  sub_100088FDC();
  v176 = v53;
  sub_1000BA294(&qword_100BCB0A0);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_1000986FC();
  v149 = v55;
  sub_10009D2A4();
  __chkstk_darwin(v56);
  sub_1000860D0();
  v145 = v57;
  sub_10009D2A4();
  __chkstk_darwin(v58);
  v175 = (uint64_t)&v130 - v59;
  v177 = sub_1000CF8BC();
  v60 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  sub_100079F58();
  type metadata accessor for ChartViewModel.Background(0);
  sub_1000B42B0();
  __chkstk_darwin(v61);
  sub_100098728();
  v64 = v63 - v62;
  sub_1000BDD48();
  sub_1000B42B0();
  __chkstk_darwin(v65);
  sub_100098728();
  v68 = v67 - v66;
  v69 = sub_1000E77C8();
  v70 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  sub_1000BCED8();
  v71 = sub_100098778();
  v72 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  sub_1000986FC();
  v148 = v73;
  sub_10009D2A4();
  __chkstk_darwin(v74);
  v174 = (char *)&v130 - v75;
  sub_10009D2A4();
  __chkstk_darwin(v76);
  v78 = (char *)&v130 - v77;
  v79 = sub_1000C0AD0();
  __chkstk_darwin(v79);
  sub_100098728();
  v82 = v81 - v80;
  v152 = v83;
  v84 = *(void (**)(void))(v83 + 16);
  v147 = v82;
  v154 = v85;
  v84();
  v173 = v72;
  v86 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  v150 = v78;
  v189 = v71;
  v86(v78, v186, v71);
  v157 = v70;
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16);
  v88 = v145;
  v151 = v39;
  v159 = v69;
  v87(v39, v185, v69);
  v155 = v68;
  sub_10000AB54(v184, v68, type metadata accessor for ChartDateStep);
  v153 = v64;
  sub_10000AB54(v183, v64, type metadata accessor for ChartViewModel.Background);
  v160 = v60;
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v156 = v38;
  v89(v38, v182, v177);
  sub_10003773C(v181, v175, &qword_100BCB0A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 16))(v176, v180, v179);
  sub_1002F6F6C(v188, v88);
  v90 = sub_1000BD520();
  v91 = sub_100088FC8(v88, 1, v90);
  if (v94)
  {
    sub_100021A14(v88, &qword_100BCB0A0);
    v92 = v146;
    v95 = sub_100099B70(v146);
  }
  else
  {
    v92 = v146;
    DetailChartDataElement.date.getter(v91);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v88, v90);
    v93 = v189;
    _s7Weather24LocationCompositionStateOwst_0(v92, 0, 1, v189);
    v95 = sub_100088FC8(v92, 1, v93);
    if (!v94)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v173 + 32))(v174, v92, v189);
      goto LABEL_7;
    }
  }
  Date.init()(v95);
  sub_100021A14(v92, (uint64_t *)&unk_100BD35A0);
LABEL_7:
  v96 = v158;
  v97 = v149;
  v98 = v148;
  v146 = a38;
  v145 = a37;
  v144 = a36;
  v143 = a35;
  v142 = a34;
  v141 = a33;
  v140 = a32;
  v139 = a31;
  v138 = a30;
  v137 = a29;
  v136 = a28;
  v135 = a27;
  v134 = a24;
  v133 = a23;
  v132 = a22;
  v131 = a21;
  v158 = a20;
  v149 = a18;
  v148 = a13;
  sub_10020CBD0(v188, v97);
  v99 = sub_100088FC8(v97, 1, v90);
  if (v94)
  {
    sub_100021A14(v97, &qword_100BCB0A0);
    v102 = sub_100099B70(v96);
LABEL_12:
    Date.init()(v102);
    sub_100021A14(v96, (uint64_t *)&unk_100BD35A0);
    goto LABEL_13;
  }
  DetailChartDataElement.date.getter(v99);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v97, v90);
  v100 = v189;
  _s7Weather24LocationCompositionStateOwst_0(v96, 0, 1, v189);
  v102 = sub_100088FC8(v96, 1, v100);
  if (v101)
    goto LABEL_12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 32))(v98, v96, v189);
LABEL_13:
  v103 = v163;
  v104 = v161;
  v105 = v170;
  v106 = v164;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 16))(v161, v170, v164);
  v107 = v165;
  v108 = v162;
  v109 = v169;
  v110 = v166;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v165 + 16))(v162, v169, v166);
  v129 = v146;
  v128 = v145;
  v127 = v144;
  v126 = v143;
  v125 = v142;
  v124 = v141;
  v123 = v140;
  v122 = v139;
  v121 = v138;
  v120 = v137;
  v119 = v136;
  v118 = v135;
  v117 = v134;
  v116 = v133;
  v115 = v132;
  v114 = v131;
  v113 = (uint64_t)v174;
  sub_1000BF1C8();
  sub_1005590A0(v168, v171, v147, (uint64_t)v150, v188, v151, v172, v155, v167, a10, a11, a12, v148, a14 & 1, v153, v156, v175, v149, v176,
    v111,
    v113,
    v98,
    v114,
    v115,
    v116,
    v117,
    v104,
    v108,
    v118,
    v119,
    v120,
    v121,
    v122,
    v123,
    v124,
    v125,
    v126,
    v127,
    v128,
    v129);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v109, v110);
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v105, v106);
  (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v180, v179);
  sub_100021A14(v181, &qword_100BCB0A0);
  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v182, v177);
  sub_1000215BC(v183, type metadata accessor for ChartViewModel.Background);
  sub_1000215BC(v184, type metadata accessor for ChartDateStep);
  (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v185, v159);
  (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v186, v189);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 8))(v187, v154);
}

uint64_t sub_1005590A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int128 a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v83;
  uint64_t v85;
  uint64_t v87;
  uint64_t v89;

  ChartKind.showSecondLine.getter();
  *a9 = a1;
  a9[1] = a2;
  v51 = (int *)sub_1000995F0();
  v52 = sub_100098B2C();
  v87 = type metadata accessor for ChartKind(v52);
  v89 = *(_QWORD *)(v87 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(a3, a3, v87);
  v53 = sub_100098B2C();
  type metadata accessor for Date(v53);
  sub_1000EB034(a3, a4);
  *(_QWORD *)((char *)a9 + v51[6]) = a5;
  v54 = sub_100098B2C();
  v83 = type metadata accessor for DetailChartExtrema(v54);
  v85 = *(_QWORD *)(v83 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(a3, a6, v83);
  *(_QWORD *)((char *)a9 + v51[8]) = a7;
  v55 = (double *)((char *)a9 + v51[10]);
  *v55 = a10;
  v55[1] = a11;
  sub_10000AB54(a8, (uint64_t)a9 + v51[12], type metadata accessor for ChartDateStep);
  v56 = (char *)a9 + v51[13];
  *(_QWORD *)v56 = a13;
  v56[8] = a14 & 1;
  sub_10000AB54(a15, (uint64_t)a9 + v51[14], type metadata accessor for ChartViewModel.Background);
  *(double *)((char *)a9 + v51[15]) = a12;
  v57 = sub_100098B2C();
  v79 = type metadata accessor for ChartDarkeningScrim(v57);
  v81 = *(_QWORD *)(v79 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(a3, a16, v79);
  sub_10003773C(a17, (uint64_t)a9 + v51[21], &qword_100BCB0A0);
  *(_QWORD *)((char *)a9 + v51[22]) = a18;
  v58 = sub_100098B2C();
  v59 = type metadata accessor for ChartPeakMarkStyle(v58);
  v60 = *(_QWORD *)(v59 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(a3, a19, v59);
  *(_QWORD *)((char *)a9 + v51[24]) = a20;
  sub_1000EB034((uint64_t)a9 + v51[19], a21);
  v61 = sub_1000EB034((uint64_t)a9 + v51[20], a22);
  sub_100079FE8(v61, (unint64_t *)&qword_100BC4E58, NSDateFormatter_ptr);
  v62 = swift_bridgeObjectRetain(a5);
  *(_QWORD *)((char *)a9 + v51[17]) = static NSDateFormatter.prevailingPeriodSymbols.getter(v62);
  sub_100558460(0, *(_QWORD *)(a5 + 16) - 1, 2, a5);
  v64 = v63;
  sub_1000DC9A0(a22);
  sub_1000DC9A0(a21);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(a19, v59);
  sub_100021A14(a17, &qword_100BCB0A0);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(a16, v79);
  sub_1000215BC(a15, type metadata accessor for ChartViewModel.Background);
  sub_1000215BC(a8, type metadata accessor for ChartDateStep);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(a6, v83);
  sub_1000DC9A0(a4);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(a3, v87);
  *(_QWORD *)((char *)a9 + v51[25]) = v64;
  v65 = sub_100098B2C();
  type metadata accessor for ChartPastDataTreatment(v65);
  v66 = sub_1000C52AC();
  v67(v66, a28);
  *(_QWORD *)((char *)a9 + v51[9]) = a23;
  v68 = (char *)a9 + v51[11];
  *(_OWORD *)v68 = a24;
  *((_QWORD *)v68 + 2) = a25;
  v68[24] = a26;
  v69 = sub_100098B2C();
  type metadata accessor for ChartViewModelInterpolationMode(v69);
  v70 = sub_1000C52AC();
  result = v71(v70, a27);
  v73 = (_QWORD *)((char *)a9 + v51[28]);
  *v73 = a29;
  v73[1] = a30;
  v74 = (_QWORD *)((char *)a9 + v51[29]);
  *v74 = a31;
  v74[1] = a32;
  v75 = (_QWORD *)((char *)a9 + v51[30]);
  *v75 = a33;
  v75[1] = a34;
  v76 = (_QWORD *)((char *)a9 + v51[31]);
  *v76 = a35;
  v76[1] = a36;
  v77 = (_QWORD *)((char *)a9 + v51[32]);
  *v77 = a37;
  v77[1] = a38;
  v78 = (_QWORD *)((char *)a9 + v51[33]);
  *v78 = a39;
  v78[1] = a40;
  return result;
}

uint64_t sub_100559568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = variable initialization expression of SessionEventsAndDataCoordinator.lastPushedTemperatureUnit();
  *a1 = result;
  return result;
}

BOOL sub_10055958C(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1008FBD24(*a1, *v1);
}

uint64_t sub_100559598@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10081C530(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1005595C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_1005595F4(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1005595F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = *v1 & a1;
  if (result)
    *v1 &= ~a1;
  return result;
}

uint64_t sub_100559618@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10050419C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

BOOL sub_100559648(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100559654(*a1, *v1);
}

BOOL sub_100559654(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100559660()
{
  uint64_t *v0;

  return sub_100559668(*v0);
}

BOOL sub_100559668(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_100559674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v57 = (char *)a2;
  v5 = sub_100098778();
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v54 = v7;
  v8 = sub_1000BA294(&qword_100BC4978);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v52 - v20;
  type metadata accessor for ChartViewModel.Background(0);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000BCED8();
  sub_1000BA294(&qword_100BF0058);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100079F58();
  v25 = (uint64_t *)(v2 + *(int *)(v24 + 48));
  sub_10000AB54(a1, v2, type metadata accessor for ChartViewModel.Background);
  sub_10000AB54((uint64_t)v57, (uint64_t)v25, type metadata accessor for ChartViewModel.Background);
  v26 = sub_1000BA294(&qword_100BCB988);
  sub_100088FC8(v2, 1, v26);
  if (v32)
  {
    sub_100088FC8((uint64_t)v25, 1, v26);
    if (v32)
      goto LABEL_5;
  }
  else
  {
    v52 = v15;
    v53 = v18;
    v57 = v21;
    v28 = v56;
    sub_10000AB54(v2, (uint64_t)v3, type metadata accessor for ChartViewModel.Background);
    v29 = *v3;
    v30 = *(int *)(v26 + 48);
    v31 = (uint64_t)v3 + v30;
    sub_100088FC8((uint64_t)v25, 1, v26);
    if (!v32)
    {
      v33 = *v25;
      v34 = (uint64_t)v25 + v30;
      v35 = (uint64_t)v57;
      sub_10016C5F4(v31, (uint64_t)v57);
      v36 = (uint64_t)v53;
      sub_10016C5F4(v34, (uint64_t)v53);
      v37 = static Color.== infix(_:_:)(v29, v33);
      if ((v37 & 1) != 0)
      {
        v38 = v35;
        v39 = v12;
        v40 = v12 + *(int *)(v8 + 48);
        sub_10003773C(v38, v39, (uint64_t *)&unk_100BD35A0);
        sub_10003773C(v36, v40, (uint64_t *)&unk_100BD35A0);
        sub_100088FC8(v39, 1, v28);
        if (v32)
        {
          sub_10009D330();
          sub_100098834();
          sub_100099298(v36);
          sub_100099298(v38);
          sub_100088FC8(v40, 1, v28);
          if (v32)
          {
            sub_100021A14(v39, (uint64_t *)&unk_100BD35A0);
            goto LABEL_5;
          }
        }
        else
        {
          v43 = (uint64_t)v52;
          sub_10003773C(v39, (uint64_t)v52, (uint64_t *)&unk_100BD35A0);
          sub_100088FC8(v40, 1, v28);
          v45 = v55;
          if (!v44)
          {
            v46 = v54;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v54, v40, v28);
            sub_100086DA4((unint64_t *)&qword_100BC3590, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v48 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v46, v28, v47);
            sub_10009D330();
            sub_100098834();
            v49 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
            v49(v46, v28);
            sub_100021A14((uint64_t)v53, (uint64_t *)&unk_100BD35A0);
            sub_100021A14((uint64_t)v57, (uint64_t *)&unk_100BD35A0);
            v49(v43, v28);
            v50 = sub_1000987A8();
            sub_100021A14(v50, v51);
            if ((v48 & 1) == 0)
              goto LABEL_22;
LABEL_5:
            sub_1000215BC(v2, type metadata accessor for ChartViewModel.Background);
            return 1;
          }
          sub_10009D330();
          sub_100098834();
          sub_100099298((uint64_t)v53);
          sub_100099298((uint64_t)v57);
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v28);
        }
        v42 = &qword_100BC4978;
        v41 = v39;
      }
      else
      {
        sub_10009D330();
        sub_100098834();
        sub_100099298(v36);
        v41 = v35;
        v42 = (uint64_t *)&unk_100BD35A0;
      }
      sub_100021A14(v41, v42);
LABEL_22:
      sub_1000215BC(v2, type metadata accessor for ChartViewModel.Background);
      return 0;
    }
    sub_100021A14(v31, (uint64_t *)&unk_100BD35A0);
    sub_10009D330();
  }
  sub_100021A14(v2, &qword_100BF0058);
  return 0;
}

void sub_100559AA8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_100558414(a1);
  *a2 = v3;
}

uint64_t sub_100559AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  double *v145;
  double v146;
  double v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  BOOL v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t (*v251)(uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t (*v270)(uint64_t);
  uint64_t v271;
  uint64_t v272;

  v241 = sub_1000BD520();
  v239 = *(_QWORD *)(v241 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v237 = v5;
  sub_1000BA294(&qword_100BCB0A0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v238 = v7;
  v240 = sub_1000BA294(&qword_100BF0030);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000CD848(v9, v234);
  sub_1000995F0();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000986FC();
  v259 = v11;
  sub_10009D2A4();
  __chkstk_darwin(v12);
  sub_1000860D0();
  v267 = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_1000860D0();
  v263 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_1000860D0();
  v262 = v17;
  sub_10009D2A4();
  __chkstk_darwin(v18);
  sub_1000860D0();
  v261 = v19;
  sub_10009D2A4();
  __chkstk_darwin(v20);
  sub_1000860D0();
  v260 = v21;
  sub_10009D2A4();
  __chkstk_darwin(v22);
  sub_1000860D0();
  v270 = (uint64_t (*)(uint64_t))v23;
  sub_10009D2A4();
  __chkstk_darwin(v24);
  sub_1000860D0();
  v266 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_1000860D0();
  v265 = v27;
  sub_10009D2A4();
  __chkstk_darwin(v28);
  sub_1000860D0();
  v264 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_1000860D0();
  v257 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v258 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v256 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  sub_1000860D0();
  v248 = v37;
  sub_10009D2A4();
  __chkstk_darwin(v38);
  v255 = (char *)&v234 - v39;
  sub_10009D2A4();
  __chkstk_darwin(v40);
  sub_1000860D0();
  v247 = v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  sub_1000860D0();
  v245 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000860D0();
  v246 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_1000860D0();
  v253 = v47;
  sub_10009D2A4();
  __chkstk_darwin(v48);
  sub_1000860D0();
  v254 = v49;
  sub_10009D2A4();
  __chkstk_darwin(v50);
  sub_1000860D0();
  v271 = v51;
  sub_10009D2A4();
  __chkstk_darwin(v52);
  sub_1000860D0();
  v243 = v53;
  sub_10009D2A4();
  __chkstk_darwin(v54);
  sub_1000860D0();
  v269 = v55;
  sub_10009D2A4();
  __chkstk_darwin(v56);
  sub_1000860D0();
  v272 = v57;
  sub_10009D2A4();
  __chkstk_darwin(v58);
  sub_1000860D0();
  v251 = (uint64_t (*)(uint64_t))v59;
  sub_10009D2A4();
  __chkstk_darwin(v60);
  sub_1000860D0();
  v252 = v61;
  sub_10009D2A4();
  __chkstk_darwin(v62);
  sub_1000860D0();
  v249 = v63;
  sub_10009D2A4();
  __chkstk_darwin(v64);
  sub_1000860D0();
  v250 = v65;
  sub_10009D2A4();
  v67 = __chkstk_darwin(v66);
  v69 = (char *)&v234 - v68;
  __chkstk_darwin(v67);
  sub_1000860D0();
  v244 = v70;
  sub_10009D2A4();
  v72 = __chkstk_darwin(v71);
  v74 = (char *)&v234 - v73;
  v75 = __chkstk_darwin(v72);
  v77 = (char *)&v234 - v76;
  v78 = __chkstk_darwin(v75);
  v80 = (char *)&v234 - v79;
  v81 = __chkstk_darwin(v78);
  v83 = (char *)&v234 - v82;
  v84 = v81;
  v85 = static ChartKind.== infix(_:_:)(a1 + *(int *)(v81 + 20), a2 + *(int *)(v81 + 20));
  sub_1000CDF6C(a1, (uint64_t)v83);
  sub_1000CDF6C(a2, (uint64_t)v80);
  v268 = a1;
  if ((v85 & 1) == 0)
  {
    sub_1000215BC((uint64_t)v83, type metadata accessor for ChartViewModel);
    sub_1000215BC((uint64_t)v80, type metadata accessor for ChartViewModel);
    v101 = sub_1000987A8();
    sub_10000AB54(v101, v102, type metadata accessor for ChartViewModel);
    sub_10000AB54(a2, (uint64_t)v74, type metadata accessor for ChartViewModel);
    v91 = a2;
    v90 = v267;
    goto LABEL_8;
  }
  sub_100946D9C();
  v87 = v86;
  sub_1000215BC((uint64_t)v83, type metadata accessor for ChartViewModel);
  sub_1000215BC((uint64_t)v80, type metadata accessor for ChartViewModel);
  v88 = sub_1000987A8();
  sub_1000CDF6C(v88, v89);
  v90 = v267;
  sub_10000AB54(a2, (uint64_t)v74, type metadata accessor for ChartViewModel);
  v91 = a2;
  if ((v87 & 1) == 0)
  {
LABEL_8:
    sub_10009EFA8((uint64_t)v74);
    sub_10009EFA8((uint64_t)v77);
    v100 = v271;
    v96 = v268;
    v95 = v244;
LABEL_9:
    sub_1000DD09C(v96, v95);
    sub_1000DD09C(v91, (uint64_t)v69);
    goto LABEL_10;
  }
  v236 = a2;
  v235 = v84;
  v92 = *(int *)(v84 + 32);
  v93 = *(_QWORD *)&v77[v92];
  v94 = *(_QWORD *)&v74[v92];
  v95 = v244;
  if (!v93)
  {
    swift_bridgeObjectRetain(v94);
    sub_10009EFA8((uint64_t)v74);
    sub_10009EFA8((uint64_t)v77);
    v96 = v268;
    if (!v94)
    {
      sub_1000DD09C(v268, v95);
      v91 = v236;
      sub_1000DD09C(v236, (uint64_t)v69);
      v99 = v235;
      v100 = v271;
      goto LABEL_33;
    }
    v141 = v94;
    goto LABEL_31;
  }
  v96 = v268;
  if (!v94)
  {
    sub_1000989F8();
    sub_10009D2F8((uint64_t)v74);
    sub_10009D2F8((uint64_t)v77);
    v141 = v93;
LABEL_31:
    swift_bridgeObjectRelease(v141);
    v91 = v236;
    v100 = v271;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(v94);
  sub_1000989F8();
  sub_100946D9C();
  v98 = v97;
  swift_bridgeObjectRelease(v94);
  sub_10009D2F8((uint64_t)v74);
  sub_10009D2F8((uint64_t)v77);
  swift_bridgeObjectRelease(v93);
  sub_10000AB54(v96, v95, type metadata accessor for ChartViewModel);
  v91 = sub_1000DC214();
  sub_10000AB54(v91, (uint64_t)v69, type metadata accessor for ChartViewModel);
  v99 = v235;
  v100 = v271;
  if ((v98 & 1) == 0)
  {
LABEL_10:
    sub_10009EFA8((uint64_t)v69);
    sub_10009EFA8(v95);
    v103 = v250;
    sub_1000DD09C(v96, v250);
    v104 = v249;
    sub_1000DD09C(v91, v249);
LABEL_11:
    v105 = v90;
    sub_100079F9C(v104);
    sub_100079F9C(v103);
    v106 = sub_1000CDD24();
    sub_1000BC534(v106, v107);
    v108 = v251;
    sub_1000BC534(v91, (uint64_t)v251);
    v109 = (uint64_t)v255;
    v110 = v253;
LABEL_12:
    sub_100079F9C((uint64_t)v108);
    sub_100079F9C(v90);
    v111 = v272;
    sub_1000BC534(v96, v272);
    v112 = v269;
    sub_1000BC534(v91, v269);
LABEL_13:
    v113 = v105;
    sub_100079F9C(v112);
    sub_100079F9C(v111);
    v114 = v270;
LABEL_14:
    v115 = v243;
    sub_1000BC534(v96, v243);
    sub_1000BC534(v91, v100);
LABEL_15:
    sub_100079F9C(v115);
    sub_100079F9C(v100);
    v116 = v254;
    sub_1000BC534(v96, v254);
    sub_1000BC534(v91, v110);
LABEL_16:
    sub_100079F9C(v110);
    sub_100079F9C(v116);
    v117 = sub_1000C6EAC();
    sub_1000BC534(v117, v118);
    v119 = sub_1000DACD4();
    sub_1000BC534(v119, v120);
    v121 = v248;
LABEL_17:
    sub_100079F9C(v116);
    sub_100079F9C(v115);
    v122 = sub_1000C2248();
    sub_1000BC534(v122, v123);
    sub_1000BC534(v91, v109);
LABEL_18:
    sub_100079F9C(v115);
    sub_100079F9C(v109);
    sub_1000BC534(v96, v121);
    v124 = v256;
    sub_1000BC534(v91, v256);
LABEL_19:
    v125 = v113;
    sub_100079F9C(v121);
    sub_100079F9C(v124);
    v126 = v258;
    sub_1000BC534(v96, v258);
    v127 = v257;
    sub_1000BC534(v91, v257);
LABEL_20:
    sub_100079F9C(v127);
    sub_100079F9C(v126);
    v128 = v264;
    sub_1000BC534(v96, v264);
    v129 = v265;
    sub_1000BC534(v91, v265);
    v130 = v266;
LABEL_21:
    sub_100079F9C(v128);
    sub_100079F9C(v129);
    sub_1000BC534(v96, v130);
    sub_1000BC534(v91, (uint64_t)v114);
    v131 = v91;
    goto LABEL_22;
  }
LABEL_33:
  v142 = *(int *)(v99 + 40);
  v143 = v95 + v142;
  v144 = *(double *)(v95 + v142);
  v145 = (double *)&v69[v142];
  if (v144 != *v145)
    goto LABEL_10;
  v146 = v145[1];
  v147 = *(double *)(v143 + 8);
  v108 = type metadata accessor for ChartViewModel;
  sub_10009EFA8((uint64_t)v69);
  sub_10009EFA8(v95);
  v103 = v250;
  sub_1000DD09C(v96, v250);
  v104 = v249;
  sub_1000DD09C(v91, v249);
  if (v147 != v146)
    goto LABEL_11;
  v148 = v99;
  v105 = v90;
  v149 = sub_1004FF888(v103 + *(int *)(v148 + 48), v104 + *(int *)(v148 + 48));
  sub_10009EFA8(v104);
  sub_10009EFA8(v103);
  v150 = sub_1000CDD24();
  sub_1000DD09C(v150, v151);
  sub_10009DB94(v91, (uint64_t)v251);
  v109 = (uint64_t)v255;
  v110 = v253;
  if (!v149)
    goto LABEL_12;
  sub_1000D9F78();
  LODWORD(v250) = sub_1004FF888(v90 + *(int *)(v152 + 48), (uint64_t)type metadata accessor for ChartViewModel + *(int *)(v152 + 48));
  sub_100079F9C((uint64_t)type metadata accessor for ChartViewModel);
  sub_100079F9C(v90);
  v111 = v272;
  sub_1000BC534(v96, v272);
  v112 = v269;
  sub_1000BC534(v91, v269);
  if ((v250 & 1) == 0)
    goto LABEL_13;
  sub_1000D9F78();
  v154 = *(int *)(v153 + 84);
  v155 = v111 + v154;
  v156 = v112 + v154;
  v157 = v242;
  v158 = v242 + *(int *)(v240 + 48);
  sub_10003773C(v155, v242, &qword_100BCB0A0);
  v159 = v156;
  v160 = v157;
  sub_10003773C(v159, v158, &qword_100BCB0A0);
  v161 = v157;
  v162 = v241;
  sub_100088FC8(v161, 1, v241);
  if (v165)
  {
    sub_10009EFA8(v112);
    sub_10009EFA8(v272);
    v163 = sub_100088FC8(v158, 1, v162);
    v114 = v270;
    v100 = v271;
    if (v165)
    {
      v113 = v105;
      sub_1000D01F0(v163, &qword_100BCB0A0);
      v115 = v243;
      sub_1000BC534(v96, v243);
      sub_1000BC534(v91, v100);
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  v164 = v238;
  sub_10003773C(v160, v238, &qword_100BCB0A0);
  sub_100088FC8(v158, 1, v162);
  if (v165)
  {
    sub_100079F9C(v269);
    sub_100079F9C(v272);
    sub_1000BF1C8();
    v163 = (*(uint64_t (**)(uint64_t, uint64_t))(v166 + 8))(v164, v162);
    v114 = v270;
    v100 = v271;
LABEL_45:
    v113 = v105;
    sub_1000D01F0(v163, &qword_100BF0030);
    goto LABEL_14;
  }
  v113 = v105;
  sub_1000BF1C8();
  v168 = v237;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 32))(v237, v158, v162);
  sub_100086DA4(&qword_100BF0038, (uint64_t (*)(uint64_t))&type metadata accessor for DetailChartDataElement, (uint64_t)&protocol conformance descriptor for DetailChartDataElement);
  v169 = v238;
  LODWORD(v252) = dispatch thunk of static Equatable.== infix(_:_:)(v238, v168, v162, v170);
  sub_1000BF1C8();
  v172 = *(void (**)(uint64_t, uint64_t))(v171 + 8);
  v172(v168, v162);
  sub_10009EFA8(v269);
  sub_10009EFA8(v272);
  v173 = ((uint64_t (*)(uint64_t, uint64_t))v172)(v169, v162);
  sub_1000D01F0(v173, &qword_100BCB0A0);
  v115 = v243;
  sub_1000DD09C(v96, v243);
  v100 = v271;
  sub_1000DD09C(v91, v271);
  v114 = v270;
  if ((v252 & 1) == 0)
    goto LABEL_15;
LABEL_47:
  sub_1000D9F78();
  sub_100946D9C();
  v175 = v174;
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v115);
  sub_10009EFA8(v100);
  v116 = v254;
  sub_1000DD09C(v96, v254);
  sub_1000C5690(v91, v110);
  if ((v175 & 1) == 0)
    goto LABEL_16;
  sub_1000D9F78();
  v177 = static Date.== infix(_:_:)(v116 + *(int *)(v176 + 76), v110 + *(int *)(v176 + 76));
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v110);
  sub_10009EFA8(v116);
  v178 = sub_1000C6EAC();
  sub_1000DD09C(v178, v179);
  v180 = sub_1000DACD4();
  sub_1000C5690(v180, v181);
  v121 = v248;
  if ((v177 & 1) == 0)
    goto LABEL_17;
  sub_1000D9F78();
  v183 = static Date.== infix(_:_:)(v115 + *(int *)(v182 + 80), v116 + *(int *)(v182 + 80));
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v116);
  sub_10009EFA8(v115);
  v184 = sub_1000C2248();
  sub_1000DD09C(v184, v185);
  sub_1000C5690(v91, v109);
  if ((v183 & 1) == 0)
    goto LABEL_18;
  v186 = v235;
  sub_10009B4AC(*(_QWORD **)(v115 + *(int *)(v235 + 68)), *(_QWORD **)(v109 + *(int *)(v235 + 68)));
  v188 = v187;
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v115);
  sub_10009EFA8(v109);
  sub_1000DD09C(v96, v121);
  v124 = v256;
  sub_1000C5690(v91, v256);
  if ((v188 & 1) == 0)
    goto LABEL_19;
  v125 = v113;
  sub_100946D9C();
  v190 = v189;
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v121);
  sub_10009EFA8(v124);
  v126 = v258;
  sub_1000DD09C(v96, v258);
  v127 = v257;
  sub_1000C5690(v91, v257);
  if ((v190 & 1) == 0)
    goto LABEL_20;
  v191 = static ChartViewModelInterpolationMode.== infix(_:_:)(v126 + *(int *)(v186 + 104));
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v127);
  sub_10009EFA8(v126);
  v128 = v264;
  sub_1000DD09C(v96, v264);
  v131 = v186;
  v129 = v265;
  sub_1000C5690(v91, v265);
  v130 = v266;
  if ((v191 & 1) == 0)
    goto LABEL_21;
  sub_100099534();
  if (v165)
    v196 = v193 == v195;
  else
    v196 = 0;
  if (v196)
  {
    sub_100079F9C(v264);
    sub_100079F9C(v265);
    sub_1000BC534(v268, v266);
    v199 = sub_1000DC214();
    sub_1000BC534(v199, (uint64_t)v270);
    goto LABEL_60;
  }
  v197 = sub_100099264(v192, v193, v194, v195);
  v114 = type metadata accessor for ChartViewModel;
  sub_10009EFA8(v264);
  sub_10009EFA8(v265);
  v96 = v268;
  v130 = v266;
  sub_1000DD09C(v268, v266);
  v198 = sub_1000D0A34();
  sub_10009DB94(v198, (uint64_t)v270);
  v125 = v267;
  if ((v197 & 1) == 0)
  {
LABEL_22:
    sub_100079F9C(v130);
    sub_100079F9C((uint64_t)v114);
    v132 = v260;
    sub_1000BC534(v96, v260);
    v133 = v261;
    sub_1000BC534(v131, v261);
    v134 = v125;
    v136 = v262;
    v135 = v263;
    goto LABEL_23;
  }
LABEL_60:
  sub_1000D9F78();
  sub_100099534();
  if (v165)
    v204 = v201 == v203;
  else
    v204 = 0;
  if (v204)
  {
    sub_100079F9C(v266);
    sub_100079F9C((uint64_t)v270);
    sub_1000BC534(v268, v260);
    v207 = sub_1000DC214();
    sub_1000BC534(v207, v261);
    goto LABEL_67;
  }
  v205 = sub_100099264(v200, v201, v202, v203);
  sub_10009EFA8(v266);
  sub_10009EFA8((uint64_t)v270);
  v96 = v268;
  v132 = v260;
  sub_1000DD09C(v268, v260);
  v206 = sub_1000D0A34();
  v133 = v261;
  sub_1000DD09C(v206, v261);
  v134 = v267;
  v136 = v262;
  v135 = v263;
  if ((v205 & 1) == 0)
  {
LABEL_23:
    sub_100079F9C(v132);
    sub_100079F9C(v133);
    sub_1000BC534(v96, v136);
    v137 = sub_1000987A8();
    sub_1000BC534(v137, v138);
    goto LABEL_24;
  }
LABEL_67:
  sub_1000D9F78();
  sub_100099534();
  if (v165)
    v212 = v209 == v211;
  else
    v212 = 0;
  if (v212)
  {
    sub_100079F9C(v260);
    sub_100079F9C(v261);
    sub_1000BC534(v268, v262);
    v215 = sub_1000DC214();
    v135 = v263;
    sub_1000BC534(v215, v263);
    goto LABEL_74;
  }
  v213 = sub_100099264(v208, v209, v210, v211);
  sub_10009EFA8(v260);
  sub_10009EFA8(v261);
  v96 = v268;
  v136 = v262;
  sub_1000DD09C(v268, v262);
  v214 = sub_1000D0A34();
  v135 = v263;
  sub_1000DD09C(v214, v263);
  v134 = v267;
  if ((v213 & 1) == 0)
  {
LABEL_24:
    sub_100079F9C(v136);
    sub_100079F9C(v135);
    sub_1000BC534(v96, v134);
    v135 = v259;
    sub_1000BC534(v131, v259);
    goto LABEL_25;
  }
LABEL_74:
  sub_1000D9F78();
  sub_100099534();
  if (v165)
    v220 = v217 == v219;
  else
    v220 = 0;
  if (v220)
  {
    sub_100079F9C(v262);
    sub_100079F9C(v263);
    v134 = v267;
    sub_1000BC534(v268, v267);
    v224 = sub_1000CE5E4();
    sub_1000BC534(v224, v225);
    goto LABEL_81;
  }
  v221 = sub_100099264(v216, v217, v218, v219);
  sub_10009EFA8(v262);
  sub_10009EFA8(v263);
  v134 = v267;
  sub_1000DD09C(v268, v267);
  v222 = sub_1000CE5E4();
  sub_1000DD09C(v222, v223);
  if ((v221 & 1) == 0)
  {
LABEL_25:
    sub_100079F9C(v135);
    sub_100079F9C(v134);
LABEL_26:
    v139 = 0;
    return v139 & 1;
  }
LABEL_81:
  sub_1000D9F78();
  v227 = *(int *)(v226 + 128);
  v228 = (uint64_t *)(v134 + v227);
  v229 = *(_QWORD *)(v134 + v227 + 8);
  v230 = (uint64_t *)(v135 + v227);
  v231 = v230[1];
  if (!v229)
  {
    sub_1000989F8();
    sub_100079F9C(v259);
    sub_100079F9C(v267);
    if (!v231)
    {
      v139 = 1;
      return v139 & 1;
    }
    v233 = v231;
    goto LABEL_91;
  }
  if (!v231)
  {
    sub_10009EF94();
    sub_10009EFA8(v259);
    sub_10009EFA8(v267);
    v233 = v229;
LABEL_91:
    swift_bridgeObjectRelease(v233);
    goto LABEL_26;
  }
  if (*v228 == *v230 && v229 == v231)
    v139 = 1;
  else
    v139 = sub_100099264(*v228, v229, *v230, v230[1]);
  sub_10009EF94();
  sub_1000215BC(v259, type metadata accessor for ChartViewModel);
  sub_1000215BC(v267, type metadata accessor for ChartViewModel);
  swift_bridgeObjectRelease(v229);
  return v139 & 1;
}

uint64_t sub_10055AD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int *v21;
  id v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  _UNKNOWN **v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::OpaquePointer v107;
  Swift::OpaquePointer v108;

  v1 = v0;
  v2 = sub_1000BD520();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000995F0();
  v8 = (uint64_t *)(v0 + *(int *)(v7 + 120));
  v9 = *v8;
  v10 = v8[1];
  v102 = *(int *)(v7 + 24);
  v104 = (int *)v7;
  v11 = *(_QWORD *)(v0 + v102);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v100 = *v8;
    v97 = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10009AAB0();
    v13 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v105 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v15 = v2;
    do
    {
      v14(v6, v13, v2);
      v16 = sub_1000BEAF0();
      v18 = v17;
      sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009AAB0();
      v19 = _swiftEmptyArrayStorage[2];
      if (v19 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10009AAB0();
      _swiftEmptyArrayStorage[2] = v19 + 1;
      v20 = &_swiftEmptyArrayStorage[2 * v19];
      v20[4] = v16;
      v20[5] = v18;
      v13 += v105;
      --v12;
      v2 = v15;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v21 = v104;
    v1 = v0;
    v10 = v97;
    v9 = v100;
  }
  else
  {
    v21 = (int *)v7;
    swift_bridgeObjectRetain();
  }
  v22 = objc_allocWithZone((Class)AXCategoricalDataAxisDescriptor);
  v23 = sub_10055B328(v9, v10, (uint64_t)_swiftEmptyArrayStorage);
  sub_100079FE8((uint64_t)v23, &qword_100BF0040, AXNumericDataAxisDescriptor_ptr);
  v24 = (uint64_t *)(v1 + v21[31]);
  v25 = *v24;
  v26 = v24[1];
  v27 = (double *)(v1 + v21[10]);
  v28 = *v27;
  v29 = v27[1];
  v30 = (uint64_t *)(v1 + v21[33]);
  v31 = *v30;
  v32 = v30[1];
  swift_bridgeObjectRetain();
  swift_retain();
  v98 = v25;
  v101 = (void *)AXNumericDataAxisDescriptor.init(title:range:gridlinePositions:valueDescriptionProvider:)(v25, v26, _swiftEmptyArrayStorage, v31, v32, v28, v29);
  v95 = v26;
  v33 = swift_bridgeObjectRetain();
  v34 = ChartKind.isContinuous.getter(v33);
  v35 = v34;
  v36 = *(_QWORD *)(v1 + v102);
  v37 = *(_QWORD *)(v36 + 16);
  if (v37)
  {
    v94 = v34;
    sub_10009EF94();
    v38 = specialized ContiguousArray.reserveCapacity(_:)(v37);
    v39 = sub_100079FE8(v38, &qword_100BF0048, AXDataPoint_ptr);
    sub_1000995D8(v39);
    v41 = v36 + v40;
    v42 = *(_QWORD *)(v35 + 72);
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
    do
    {
      v43(v6, v41, v2);
      v44 = sub_1000BEAF0();
      DetailChartDataElement.value.getter(v44);
      v45 = sub_1000DC46C();
      sub_1000C0F38(v45, v46, v47, v107, (unint64_t)_swiftEmptyArrayStorage, v48);
      v49 = sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      sub_1000BEEE4((uint64_t)_swiftEmptyArrayStorage);
      v50 = sub_1000BDAD0();
      specialized ContiguousArray._endMutation()(v50);
      v41 += v42;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
    v21 = v104;
    v1 = v0;
    LOBYTE(v35) = v94;
  }
  v51 = &_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyXl_Ts5_ptr;
  v52 = objc_allocWithZone((Class)AXDataSeriesDescriptor);
  v53 = sub_10055B3A4(v98, v95, v35 & 1);
  v54 = sub_1000BA294(&qword_100BCB640);
  v55 = swift_allocObject(v54, 40, 7);
  *(_OWORD *)(v55 + 16) = xmmword_1009898A0;
  *(_QWORD *)(v55 + 32) = v53;
  v106 = v55;
  specialized Array._endMutation()(v55);
  v56 = v106;
  v57 = v53;
  v58 = ChartKind.showSecondLine.getter();
  v99 = v57;
  if ((v58 & 1) != 0)
  {
    v59 = (uint64_t *)(v1 + v21[32]);
    v60 = v59[1];
    if (v60)
    {
      v61 = *v59;
      sub_10009EF94();
      v96 = ChartKind.isContinuous.getter(v62);
      v63 = *(_QWORD *)(v1 + v102);
      v64 = *(_QWORD *)(v63 + 16);
      if (v64)
      {
        v103 = v60;
        v65 = v63;
        swift_bridgeObjectRetain();
        v66 = specialized ContiguousArray.reserveCapacity(_:)(v64);
        v67 = sub_100079FE8(v66, &qword_100BF0048, AXDataPoint_ptr);
        sub_1000995D8(v67);
        v69 = v65 + v68;
        v70 = *(_QWORD *)(v61 + 72);
        v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
        do
        {
          v71(v6, v69, v2);
          sub_1000BEAF0();
          DetailChartDataElement.secondValue.getter();
          v72 = sub_1000DC46C();
          sub_1000C0F38(v72, v73, v74, v108, (unint64_t)_swiftEmptyArrayStorage, v75);
          v76 = sub_1000CCCD8(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v76);
          sub_1000BEEE4((uint64_t)_swiftEmptyArrayStorage);
          v77 = sub_1000BDAD0();
          specialized ContiguousArray._endMutation()(v77);
          v69 += v70;
          --v64;
        }
        while (v64);
        swift_bridgeObjectRelease();
        v21 = v104;
        v1 = v0;
        v51 = &_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyXl_Ts5_ptr;
        v60 = v103;
      }
      v78 = objc_allocWithZone((Class)v51[177]);
      v79 = sub_10055B3A4(v61, v60, v96 & 1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
      v80 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v80 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1);
      v81 = sub_1000987A8();
      v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v82);
      specialized Array._endMutation()(v83);

      v56 = v106;
    }
  }
  sub_100079FE8(v58, &qword_100BF0050, AXChartDescriptor_ptr);
  v84 = v21[29];
  v85 = (uint64_t *)(v1 + v21[28]);
  v86 = *v85;
  v87 = v85[1];
  v88 = *(_QWORD *)(v1 + v84);
  v89 = *(_QWORD *)(v1 + v84 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v90 = v23;
  v91 = v101;
  v92 = AXChartDescriptor.init(title:summary:xAxis:yAxis:additionalAxes:series:)(v86, v87, v88, v89, v90, v101, _swiftEmptyArrayStorage, v56);

  return v92;
}

id sub_10055B328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  Class isa;
  id v8;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v3, "initWithTitle:categoryOrder:", v6, isa, swift_bridgeObjectRelease(a3).n128_f64[0]);

  return v8;
}

id sub_10055B3A4(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v5;
  Class isa;
  id v7;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1000A0794(0, &qword_100BF0048, AXDataPoint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v3, "initWithName:isContinuous:dataPoints:", v5, a3 & 1, isa, swift_bridgeObjectRelease().n128_f64[0]);

  return v7;
}

ValueMetadata *type metadata accessor for ChartViewModel.PeakMarkerLabelPosition()
{
  return &type metadata for ChartViewModel.PeakMarkerLabelPosition;
}

unint64_t sub_10055B458()
{
  unint64_t result;

  result = qword_100BF0060;
  if (!qword_100BF0060)
  {
    result = swift_getWitnessTable(&unk_1009AE2D8, &type metadata for ChartViewModel.PeakMarkerLabelPosition);
    atomic_store(result, (unint64_t *)&qword_100BF0060);
  }
  return result;
}

unint64_t sub_10055B498()
{
  unint64_t result;

  result = qword_100BF0068;
  if (!qword_100BF0068)
  {
    result = swift_getWitnessTable(&unk_1009AE2A8, &type metadata for ChartViewModel.PeakMarkerLabelPosition);
    atomic_store(result, (unint64_t *)&qword_100BF0068);
  }
  return result;
}

unint64_t sub_10055B4D8()
{
  unint64_t result;

  result = qword_100BF0070;
  if (!qword_100BF0070)
  {
    result = swift_getWitnessTable(&unk_1009AE300, &type metadata for ChartViewModel.PeakMarkerLabelPosition);
    atomic_store(result, (unint64_t *)&qword_100BF0070);
  }
  return result;
}

unint64_t sub_10055B518()
{
  unint64_t result;

  result = qword_100BF0078;
  if (!qword_100BF0078)
  {
    result = swift_getWitnessTable(&unk_1009AE338, &type metadata for ChartViewModel.PeakMarkerLabelPosition);
    atomic_store(result, (unint64_t *)&qword_100BF0078);
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkUpdatedTip()
{
  return &type metadata for WorkUpdatedTip;
}

uint64_t sub_10055B578()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x8000000100A0A310);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view title when work location is updated.");
}

uint64_t sub_10055B5D0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000044, 0x8000000100A0A1D0);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view message describing user's work location is updated and that the user can use the Contacts app to update their home/work addresses and that the user can use the Contacts app to update their home/work addresses.");
}

uint64_t sub_10055B628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BA294(&qword_100BCBB48);
  sub_10009D98C();
  __chkstk_darwin(v0);
  sub_100098728();
  v3 = v2 - v1;
  v4 = Image.init(_internalSystemName:)(0xD000000000000025, 0x8000000100A0A1A0);
  static SymbolRenderingMode.hierarchical.getter();
  v5 = type metadata accessor for SymbolRenderingMode(0);
  _s7Weather24LocationCompositionStateOwst_0(v3, 0, 1, v5);
  v6 = Image.symbolRenderingMode(_:)(v3, v4);
  swift_release();
  sub_10021D790(v3);
  return v6;
}

uint64_t sub_10055B6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;

  v37 = sub_1000BA294(&qword_100BC4FE8);
  v38 = *(_QWORD *)(v37 - 8);
  sub_10009D98C();
  __chkstk_darwin(v0);
  sub_100088FDC();
  v35 = v1;
  v33 = sub_1000BA294(&qword_100BC4FF0);
  v36 = *(_QWORD *)(v33 - 8);
  sub_10009D98C();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v31 = v3;
  v4 = type metadata accessor for Tips.IgnoresDisplayFrequency(0);
  v30 = *(_QWORD *)(v4 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v9 = sub_1000BA294(&qword_100BC4FF8);
  v34 = *(_QWORD *)(v9 - 8);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = type metadata accessor for Tips.MaxDisplayCount(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100098728();
  v18 = v17 - v16;
  v19 = sub_1000BA294(&qword_100BC5000);
  v32 = *(_QWORD *)(v19 - 8);
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_100098728();
  v23 = v22 - v21;
  Tips.MaxDisplayCount.init(_:)(3);
  static Tips.OptionsBuilder.buildExpression<A>(_:)(v18, v14, &protocol witness table for Tips.MaxDisplayCount);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  Tips.IgnoresDisplayFrequency.init(_:)(1);
  static Tips.OptionsBuilder.buildExpression<A>(_:)(v8, v4, &protocol witness table for Tips.IgnoresDisplayFrequency);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v8, v4);
  v39 = v14;
  v40 = &protocol witness table for Tips.MaxDisplayCount;
  v24 = sub_10009885C((uint64_t)&v39, (uint64_t)&opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>);
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)(v23, v19, v24);
  v39 = v19;
  v40 = (void *)v24;
  v25 = sub_10009885C((uint64_t)&v39, (uint64_t)&opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>);
  v39 = v4;
  v40 = &protocol witness table for Tips.IgnoresDisplayFrequency;
  v26 = sub_10009885C((uint64_t)&v39, (uint64_t)&opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>);
  static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)(v31, v13, v33, v9, v25, v26);
  v39 = v33;
  v40 = (void *)v9;
  v41 = v25;
  v42 = v26;
  v27 = sub_10009885C((uint64_t)&v39, (uint64_t)&opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)>>);
  v28 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)(v35, v37, v27);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v35, v37);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v31, v33);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v13, v9);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v23, v19);
  return v28;
}

uint64_t sub_10055B9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1000BA294(&qword_100BC3130);
  sub_10004037C(v0, qword_100CAECD0);
  sub_1000AECD4(v0, (uint64_t)qword_100CAECD0);
  v5 = 0;
  v1 = sub_1000BA294(&qword_100BC5020);
  v2 = type metadata accessor for Tips.ParameterOption(0);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097CA50;
  static Tips.ParameterOption.transient.getter();
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for WorkUpdatedTip, 0x79616C707369642BLL, 0xEB00000000706954, &v5, v3, &type metadata for Bool, &type metadata for WorkUpdatedTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_10055BAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v0 = sub_1000BA294(&qword_100BC3130);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  if (qword_100BC21D0 != -1)
    swift_once(&qword_100BC21D0, sub_10055B9CC);
  v10 = sub_1000AECD4(v0, (uint64_t)qword_100CAECD0);
  swift_beginAccess(v10, v14, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v10, v0);
  Tips.Rule.init<A>(_:_:)(v4, sub_1001AD5F8, 0);
  v11 = static Tips.RuleBuilder.buildExpression(_:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v12 = static Tips.RuleBuilder.buildPartialBlock(first:)(v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10055BC30()
{
  return sub_10055B578();
}

uint64_t sub_10055BC60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100162CF0();
  result = Tip.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_10055BCA0()
{
  unint64_t result;

  result = qword_100BF0080;
  if (!qword_100BF0080)
  {
    result = swift_getWitnessTable(&unk_1009AE448, &type metadata for WorkUpdatedTip);
    atomic_store(result, (unint64_t *)&qword_100BF0080);
  }
  return result;
}

uint64_t sub_10055BCDC(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  char v7;

  KeyPath = swift_getKeyPath(&unk_1009AE6F0);
  v6 = v1;
  v7 = a1;
  sub_10055BD3C(KeyPath, (uint64_t)sub_10055C65C, (uint64_t)&v5);
  return swift_release(KeyPath);
}

uint64_t sub_10055BD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  sub_10000F1C8(&qword_100BE3238, type metadata accessor for WireframeContentManager);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, a1, a2, a3, &type metadata for () + 1, v6);
}

uint64_t sub_10055BDDC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1009AE6C8);
  v4 = v0;
  sub_10000F1C8(&qword_100BE3238, type metadata accessor for WireframeContentManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_weakLoadStrong(v0 + 64);
}

uint64_t sub_10055BE64()
{
  uint64_t v0;

  swift_retain();
  return sub_10055BE8C(v0);
}

uint64_t sub_10055BE8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1009AE6C8);
  v6 = v1;
  v7 = a1;
  sub_10055BD3C(KeyPath, (uint64_t)sub_10055C5F8, (uint64_t)&v5);
  swift_release(KeyPath);
  return swift_release(a1);
}

void sub_10055BEF0()
{
  char v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000DF738();
  sub_1000AE898();
  __chkstk_darwin(v2);
  sub_1000BB0C0();
  v3 = sub_1000BBE70();
  *v1 = v3;
  sub_1000B4B4C(v3, enum case for DispatchPredicate.onQueue(_:));
  _dispatchPreconditionTest(_:)(v1);
  sub_1000C4B58();
  if ((v0 & 1) != 0)
  {
    sub_100132090(1);
    sub_10004A2A0();
  }
  else
  {
    __break(1u);
  }
}

void sub_10055BF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v3 = v0;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100099864();
  v6 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098694();
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  if (!*(_BYTE *)(v3 + 16))
  {
    v25 = *(_QWORD *)(v3 + 32);
    v29 = v6;
    v14 = *(_QWORD *)(v3 + 40);
    *(_BYTE *)(v3 + 16) = 1;
    sub_10009FFE0();
    v28 = v5;
    v27 = sub_1000BBE70();
    static DispatchTime.now()(v27);
    + infix(_:_:)(v11);
    v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    v26(v11, v7);
    v15 = (_QWORD *)swift_allocObject(&unk_100B7FE78, 40, 7);
    v16 = v25;
    v15[2] = v3;
    v15[3] = v16;
    v15[4] = v14;
    aBlock[4] = sub_10055C6A0;
    v32 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100121D84;
    aBlock[3] = &unk_100B7FE90;
    v17 = _Block_copy(aBlock);
    v18 = v32;
    swift_retain();
    swift_retain();
    swift_retain();
    v19 = swift_release(v18);
    static DispatchQoS.unspecified.getter(v19);
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v21 = v20;
    v22 = sub_1000BA294(&qword_100BD4F10);
    sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v4, v21);
    v24 = (void *)v27;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v13, v2, v1, v17);
    _Block_release(v17);

    sub_1000BD208(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v29);
    v26(v13, v7);
  }
  sub_100098640();
}

void sub_10055C1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10055BDDC();
  if (v1)
  {
    v2 = v1;
    sub_100937100(v0);
    swift_release(v2);
  }
  else
  {
    sub_10004A298();
  }
}

double sub_10055C230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;

  v5 = swift_allocObject(&unk_100B7FEC8, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a3;
  swift_retain();
  swift_retain();
  sub_1008C100C((uint64_t)sub_10055C6D8, v5);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_10055C2A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend((id)objc_opt_self(CATransaction), "setFrameStallSkipRequest:", 1);
  v14 = 0;
  swift_retain();
  v7 = Transaction.animation.setter(v6);
  v8 = static os_signpost_type_t.event.getter(v7);
  if (qword_100BC2460 != -1)
    swift_once(&qword_100BC2460, sub_1006F3868);
  v9 = qword_100CAF118;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v8, &_mh_execute_header, v9, "WireframeContentLoadAsync", 25, 2, v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10055C1F4();
  v10 = v14;
  swift_retain();
  withTransaction<A>(_:_:)(v11, sub_10055C6E0, a1, &type metadata for () + 1);
  return swift_release_n(v10, 2);
}

void sub_10055C3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_weakDestroy(v0 + 64);
  v1 = v0 + OBJC_IVAR____TtC7Weather23WireframeContentManager___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10004A298();
}

uint64_t sub_10055C450()
{
  uint64_t v0;

  sub_10055C3F8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10055C474()
{
  return type metadata accessor for WireframeContentManager(0);
}

uint64_t sub_10055C47C()
{
  uint64_t v0;

  sub_10055C1F4();
  swift_release();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for WireframeContentManagerReference()
{
  return objc_opt_self(_TtC7Weather32WireframeContentManagerReference);
}

uint64_t storeEnumTagSinglePayload for WireframeContentManager.ContentLoadState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10055C520 + 4 * byte_1009AE515[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10055C554 + 4 * byte_1009AE510[v4]))();
}

uint64_t sub_10055C554(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10055C55C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10055C564);
  return result;
}

uint64_t sub_10055C570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10055C578);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10055C57C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10055C584(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_10055C594()
{
  unint64_t result;

  result = qword_100BF0218;
  if (!qword_100BF0218)
  {
    result = swift_getWitnessTable(&unk_1009AE684, &type metadata for WireframeContentManager.ContentLoadState);
    atomic_store(result, (unint64_t *)&qword_100BF0218);
  }
  return result;
}

void sub_10055C5D0(uint64_t *a1@<X8>)
{
  *a1 = sub_10055BDDC();
  sub_10004A298();
}

uint64_t sub_10055C5F8()
{
  uint64_t v0;

  return swift_weakAssign(*(_QWORD *)(v0 + 16) + 64, *(_QWORD *)(v0 + 24));
}

void sub_10055C614(_BYTE *a1@<X8>)
{
  *a1 = sub_1000548F0() & 1;
  sub_10004A298();
}

void sub_10055C63C(char *a1)
{
  sub_10055BCDC(*a1);
  sub_10004A298();
}

void sub_10055C65C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 17) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10055C66C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

double sub_10055C6A0()
{
  uint64_t *v0;

  return sub_10055C230(v0[2], v0[3], v0[4]);
}

uint64_t sub_10055C6AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055C6D8()
{
  uint64_t v0;

  return sub_10055C2A0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10055C6E0()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 16) = 2;
  return sub_10055BCDC(1);
}

unint64_t sub_10055C714()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = qword_100BF0240;
  if (!qword_100BF0240)
  {
    v1 = sub_100075EB0(&qword_100BF0238);
    v2 = sub_100075EB0(&qword_100BF0228);
    v3 = type metadata accessor for WireframeContentManager(255);
    sub_10003D2DC(&qword_100BF0230, &qword_100BF0228);
    v5 = v4;
    sub_10000F1C8(&qword_100BE3238, type metadata accessor for WireframeContentManager);
    v7[0] = v2;
    v7[1] = v3;
    v7[2] = v5;
    v7[3] = v6;
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    sub_10013DC7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF0240);
  }
  return result;
}

_QWORD *sub_10055C804@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BF0308);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v48)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1000BA294(&qword_100BC4708);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = (uint64_t)result;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000DB418(a1, v12);
  v14 = sub_1000BA294((uint64_t *)&unk_100C0A200);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = (uint64_t)result;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BE6650);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (!v47)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v19 = a1[3];
  v20 = a1[4];
  sub_1000DB418(a1, v19);
  v21 = sub_1000BA294(&qword_100BC46A0);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v21, v21, v19, v20);
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v22 = (uint64_t)result;
  v40 = a2;
  v41 = v49;
  v42 = v48;
  v23 = a1[3];
  v24 = a1[4];
  sub_1000DB418(a1, v23);
  v25 = sub_1000BA294(&qword_100BD4D20);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v45, v25, 0x75646F4D7473694CLL, 0xEA0000000000656CLL, v25, v23, v24);
  v26 = v45[0];
  if (!v45[0])
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v27 = v45[2];
  v29 = a1[3];
  v28 = a1[4];
  sub_1000DB418(a1, v29);
  v30 = sub_1000BA294(&qword_100BD4D28);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v30, v30, v29, v28);
  if (v44)
  {
    v31 = type metadata accessor for ListModule();
    ObjectType = swift_getObjectType(v26);
    v33 = sub_100068EB4((uint64_t)v46, v47);
    v34 = __chkstk_darwin(v33);
    v36 = (char *)&v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v37 + 16))(v36, v34);
    v38 = sub_1007CE044(v42, v41, v11, v15, (uint64_t)v36, v22, v26, &v43, v31, ObjectType, (uint64_t)&type metadata for ContentStatusBannerViewFactory, v27, (uint64_t)&off_100B99BA0);
    result = (_QWORD *)_s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v46);
    v39 = v40;
    v40[3] = v31;
    v39[4] = &off_100B91A58;
    *v39 = v38;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10055CAFC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10014ADA8(a1, (uint64_t)&off_100B75EE8, a2);
}

uint64_t sub_10055CB08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_1000DB418(a1, v1);
  v3 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = Tracker.chain(name:identifier:)(1953720684, 0xE400000000000000, 0, 0);
    swift_release(v5);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10055CB84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = type metadata accessor for Tracker(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v5, 0x75646F4D7473694CLL, 0xEA0000000000656CLL, v5, v3, v4);
  if (result)
  {
    a2[3] = (uint64_t)&type metadata for ListTracker;
    a2[4] = (uint64_t)&off_100B6B6A8;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10055CC08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[5];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1[3];
  v5 = a1[4];
  sub_1000DB418(a1, v4);
  v6 = sub_1000BA294(&qword_100BC43F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  v8 = v25;
  if (!v25)
  {
    __break(1u);
    goto LABEL_6;
  }
  v9 = v26;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BF0300);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v24)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = a1[3];
  v14 = a1[4];
  sub_1000DB418(a1, v13);
  v15 = sub_1000BA294(&qword_100BDC590);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (v22[3])
  {
    v16 = sub_100068EB4((uint64_t)v23, v24);
    v17 = __chkstk_darwin(v16);
    v19 = (_QWORD *)((char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
    v21 = sub_10055DDA8(v8, v9, *v19, v22);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    *a2 = v21;
    a2[1] = &off_100B81DB8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10055CD8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for ListInputFactory();
  result = swift_allocObject(v2, 17, 7);
  *(_BYTE *)(result + 16) = 3;
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B717C8;
  *a1 = result;
  return result;
}

uint64_t sub_10055CDD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BF0310);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for ListInputFactory();
  v25 = &off_100B717C8;
  v23[0] = v13;
  sub_100043CA8((uint64_t)v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B800D8, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B80100, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10055D8A4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BE6648);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    v19 = *sub_1000DB418(v26, v27);
    v24 = type metadata accessor for ListViewModelFactory(0);
    v25 = &off_100B75EE8;
    v23[0] = v19;
    sub_100043CA8((uint64_t)v23, (uint64_t)v22);
    v20 = swift_allocObject(&unk_100B80128, 56, 7);
    sub_10003C800(v22, v20 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v21 = sub_1000BA294(&qword_100BC4708);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_100183DD4(v6, v9, v8, v7, sub_1001434BC, 0, sub_1000A22C0, v15, sub_10055D8C4, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10055D030(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  _QWORD v25[3];
  uint64_t active;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v30;
  if (!v30)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v32;
  v7 = v33;
  v9 = v31;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BED428);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v29)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v28, v29);
  active = type metadata accessor for ActiveLocationInputFactory();
  v27 = &off_100B66978;
  v25[0] = v13;
  sub_100043CA8((uint64_t)v25, (uint64_t)v24);
  v14 = swift_allocObject(&unk_100B80010, 56, 7);
  sub_10003C800(v24, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
  v15 = swift_allocObject(&unk_100B80038, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10055D840;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_100B80060, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1000A22E4;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = a1[3];
  v18 = a1[4];
  sub_1000DB418(a1, v17);
  v19 = sub_1000BA294(&qword_100BED430);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (v29)
  {
    v20 = *sub_1000DB418(v28, v29);
    active = type metadata accessor for ActiveLocationModelFactory();
    v27 = &off_100B66968;
    v25[0] = v20;
    sub_100043CA8((uint64_t)v25, (uint64_t)v24);
    v21 = swift_allocObject(&unk_100B80088, 56, 7);
    sub_10003C800(v24, v21 + 16);
    swift_retain();
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v25);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    v22 = swift_allocObject(&unk_100B800B0, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_10055D884;
    *(_QWORD *)(v22 + 24) = v21;
    v23 = sub_1000BA294((uint64_t *)&unk_100C0A200);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    return sub_10004EB7C(v6, v9, v8, v7, sub_10055D2D4, 0, sub_1000EBF68, v16, sub_10013DB04, v22);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10055D2D4(uint64_t a1)
{
  _BYTE *v1;
  _BYTE v3[24];

  v1 = (_BYTE *)(*(_QWORD *)(a1 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment);
  swift_beginAccess(v1, v3, 0, 0);
  if ((*v1 & 1) != 0)
    return 1;
  if ((sub_100076C68() & 1) != 0)
    return 0x3FA999999999999ALL;
  return 0;
}

void sub_10055D34C(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  sub_1000BC53C(a1, a2, a3);
  sub_100079F70();
}

uint64_t sub_10055D368@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for NotificationsOptInTipViewFactory();
  result = swift_allocObject(v2, 18, 7);
  *(_WORD *)(result + 16) = 257;
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100B84850;
  *a1 = result;
  return result;
}

uint64_t sub_10055D3B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_1000DB418(a1, v2);
  v4 = sub_1000BA294(&qword_100BC43B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  v6 = v28;
  if (!v28)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = v30;
  v7 = v31;
  v9 = v29;
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_1000BA294(&qword_100BEFE98);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (!v27)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = *sub_1000DB418(v26, v27);
  v24 = type metadata accessor for WeatherConditionBackgroundModelInputFactory(0);
  v25 = &off_100B953A8;
  *(_QWORD *)&v23 = v13;
  sub_100043CA8((uint64_t)&v23, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100B7FF70, 56, 7);
  sub_10003C800(v22, v14 + 16);
  swift_retain();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(&v23);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  v15 = swift_allocObject(&unk_100B7FF98, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10055D820;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = a1[3];
  v17 = a1[4];
  sub_1000DB418(a1, v16);
  v18 = sub_1000BA294(&qword_100BDC5A8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (v27)
  {
    sub_100043CA8((uint64_t)v26, (uint64_t)&v23);
    v19 = swift_allocObject(&unk_100B7FFC0, 56, 7);
    sub_10003C800(&v23, v19 + 16);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
    v20 = swift_allocObject(&unk_100B7FFE8, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_100134C04;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = sub_1000BA294(&qword_100BC46A0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return sub_10002F508(v6, v9, v8, v7, sub_100134920, 0, sub_1000A309C, v15, sub_100121E9C, v20);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10055D5FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000DB418(a1, v3);
  v5 = sub_1000BA294(&qword_100BDC5B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v29)
  {
    v7 = sub_100068EB4((uint64_t)v28, v29);
    v8 = __chkstk_darwin(v7);
    v10 = (_QWORD *)((char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v11 + 16))(v10, v8);
    v12 = *v10;
    v13 = type metadata accessor for WeatherConditionBackgroundTimeDataFactory();
    v27[3] = v13;
    v27[4] = &off_100B70D90;
    v27[0] = v12;
    v14 = type metadata accessor for WeatherConditionBackgroundModelInputFactory(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = sub_100068EB4((uint64_t)v27, v13);
    v17 = __chkstk_darwin(v16);
    v19 = (_QWORD *)((char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v20 + 16))(v19, v17);
    v21 = *v19;
    v22 = (_QWORD *)(v15
                   + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_weatherConditionBackgroundTimeDataFactory);
    v22[3] = v13;
    v22[4] = &off_100B70D90;
    *v22 = v21;
    v23 = v15
        + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___locationAnimationKind;
    v24 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
    _s7Weather24LocationCompositionStateOwst_0(v23, 1, 1, v24);
    v25 = v15 + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___animationKind;
    v26 = type metadata accessor for BackgroundAnimationKind(0);
    _s7Weather24LocationCompositionStateOwst_0(v25, 1, 1, v26);
    *(_BYTE *)(v15
             + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_forceTileGradientPresentationContext) = 0;
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v27);
    result = _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v28);
    *(_BYTE *)(v15
             + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_forceTileGradientPresentationContext) = 1;
    a2[3] = v14;
    a2[4] = (uint64_t)&off_100B953A8;
    *a2 = v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10055D7FC()
{
  uint64_t v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10055D820(uint64_t a1)
{
  uint64_t v1;

  sub_10055D34C(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_1000A4D70);
}

void sub_10055D840(uint64_t a1)
{
  uint64_t v1;

  sub_10055D34C(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_1000F0E9C);
}

uint64_t sub_10055D860()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10055D884(uint64_t a1)
{
  uint64_t v1;

  sub_10055D34C(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_100010160);
}

void sub_10055D8A4(uint64_t a1)
{
  uint64_t v1;

  sub_10055D34C(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_1003C4938);
}

void sub_10055D8C4(uint64_t a1)
{
  uint64_t v1;

  sub_10055D34C(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_1004931A0);
}

uint64_t sub_10055D8E4(__int128 *a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, char a7, __int128 *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  __int128 v31;
  uint64_t v32;
  _UNKNOWN **v33;
  Swift::String v34;

  v32 = type metadata accessor for WeatherConditionBackgroundTimeDataFactory();
  v33 = &off_100B70D90;
  *(_QWORD *)&v31 = a2;
  v15 = a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory____lazy_storage___listAnimationKind;
  v16 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  _s7Weather24LocationCompositionStateOwst_0(v15, 1, 1, v16);
  *(_BYTE *)(a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory____lazy_storage___allListVfxBackgroundsEnabled) = 2;
  v17 = a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory____lazy_storage___listVfxCellsEnabled;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_cachedInput;
  v19 = type metadata accessor for ActualListInput(0);
  _s7Weather24LocationCompositionStateOwst_0(v18, 1, 1, v19);
  v20 = a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_cachedModel;
  v21 = type metadata accessor for ListViewModel(0);
  _s7Weather24LocationCompositionStateOwst_0(v20, 1, 1, v21);
  *(_QWORD *)(a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_temperatureUnitUsedToPreprocess) = 0;
  *(_QWORD *)(a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_temperatureUnitUsedByCachedModel) = 0;
  v22 = (Swift::String *)(a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_myLocationString);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v34._countAndFlagsBits = 0xD000000000000039;
  v34._object = (void *)0x8000000100A0A4E0;
  v24._countAndFlagsBits = 0x7461636F4C20794DLL;
  v24._object = (void *)0xEB000000006E6F69;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v34);

  *v22 = v26;
  v27 = OBJC_IVAR____TtC7Weather20ListViewModelFactory_logger;
  sub_100120350();
  *(_QWORD *)(a9 + v27) = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x80000001009F0D20, 0x776569567473694CLL, 0xE800000000000000);
  sub_10003C800(a1, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_weatherConditionBackgroundModelFactory);
  sub_10003C800(&v31, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_weatherConditionBackgroundTimeDataFactory);
  sub_10003C800(a3, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_weatherEventDescriptionStringBuilder);
  sub_10003C800(a4, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_appConfigurationManager);
  sub_10003C800(a5, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_listViewTipManager);
  sub_10003C800(a6, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_notificationsOptInStatusFactory);
  *(_BYTE *)(a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_forceDisplayHomeAndWorkUI) = a7;
  sub_10003C800(a8, a9 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_weatherProviderAttributionCacheManager);
  return a9;
}

uint64_t sub_10055DB98(__int128 *a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, char a7, __int128 *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;

  v27 = type metadata accessor for WeatherConditionBackgroundTimeDataFactory();
  v28 = &off_100B70D90;
  v26[0] = a2;
  v16 = type metadata accessor for ListViewModelFactory(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v18 = sub_100068EB4((uint64_t)v26, v27);
  v19 = __chkstk_darwin(v18);
  v21 = (_QWORD *)((char *)&v26[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v22 + 16))(v21, v19);
  v23 = sub_10055D8E4(a1, *v21, a3, a4, a5, a6, a7, a8, v17);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v26);
  return v23;
}

_QWORD *sub_10055DCB4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  void (*v9)(__n128);
  __n128 v10;
  _BYTE v12[24];
  _QWORD v13[5];

  v13[0] = a3;
  v13[3] = &type metadata for ListTracker;
  v13[4] = &off_100B6B6A8;
  a5[2] = a1;
  a5[3] = a2;
  sub_100043CA8((uint64_t)v13, (uint64_t)(a5 + 4));
  sub_100043CA8((uint64_t)a4, (uint64_t)(a5 + 9));
  swift_beginAccess(a5 + 9, v12, 33, 0);
  v8 = a5[13];
  sub_100068EB4((uint64_t)(a5 + 9), a5[12]);
  v9 = *(void (**)(__n128))(v8 + 16);
  swift_retain();
  v10 = swift_retain();
  v9(v10);
  swift_endAccess(v12);
  swift_release(a2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a4);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v13);
  return a5;
}

_QWORD *sub_10055DDA8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v17[5];

  v17[3] = &type metadata for ListTracker;
  v17[4] = &off_100B6B6A8;
  v17[0] = a3;
  v7 = type metadata accessor for ListInteractor();
  v8 = (_QWORD *)swift_allocObject(v7, 112, 7);
  v9 = sub_100068EB4((uint64_t)v17, (uint64_t)&type metadata for ListTracker);
  v10 = __chkstk_darwin(v9);
  v12 = (_QWORD *)((char *)&v17[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v13 + 16))(v12, v10);
  v14 = sub_10055DCB4(a1, a2, *v12, a4, v8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v17);
  return v14;
}

ValueMetadata *type metadata accessor for HomeUpdatedTip()
{
  return &type metadata for HomeUpdatedTip;
}

uint64_t sub_10055DEC0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x8000000100A0A570);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view title when home location is updated.");
}

uint64_t sub_10055DF18()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000044, 0x8000000100A0A1D0);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view message describing user's home location is updated.");
}

uint64_t sub_10055DF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1000BA294(&qword_100BC3130);
  sub_10004037C(v0, qword_100CAECE8);
  sub_1000AECD4(v0, (uint64_t)qword_100CAECE8);
  v5 = 0;
  v1 = sub_1000BA294(&qword_100BC5020);
  v2 = type metadata accessor for Tips.ParameterOption(0);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097CA50;
  static Tips.ParameterOption.transient.getter();
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for HomeUpdatedTip, 0x79616C707369642BLL, 0xEB00000000706954, &v5, v3, &type metadata for Bool, &type metadata for HomeUpdatedTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_10055E074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v0 = sub_1000BA294(&qword_100BC3130);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  if (qword_100BC21D8 != -1)
    swift_once(&qword_100BC21D8, sub_10055DF70);
  v10 = sub_1000AECD4(v0, (uint64_t)qword_100CAECE8);
  swift_beginAccess(v10, v14, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v10, v0);
  Tips.Rule.init<A>(_:_:)(v4, sub_1001AD5F8, 0);
  v11 = static Tips.RuleBuilder.buildExpression(_:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v12 = static Tips.RuleBuilder.buildPartialBlock(first:)(v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10055E1D4()
{
  return sub_10055DEC0();
}

uint64_t sub_10055E1FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100162D2C();
  result = Tip.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_10055E23C()
{
  unint64_t result;

  result = qword_100BF0338;
  if (!qword_100BF0338)
  {
    result = swift_getWitnessTable(&unk_1009AE814, &type metadata for HomeUpdatedTip);
    atomic_store(result, (unint64_t *)&qword_100BF0338);
  }
  return result;
}

double sub_10055E278()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 72) & 1) == 0)
    return *(double *)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0x4010000000000000;
  *(_BYTE *)(v0 + 72) = 0;
  return 4.0;
}

uint64_t type metadata accessor for UVIndexChartHeaderStyle()
{
  return objc_opt_self(_TtC7Weather23UVIndexChartHeaderStyle);
}

double sub_10055E2BC()
{
  return sub_10055E278();
}

void sub_10055E2DC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UVIndexChartHeaderStyle();
  v1 = swift_allocObject(v0, 154, 7);
  sub_1003B52FC();
  qword_100CAED00 = v1;
}

uint64_t sub_10055E314(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0)
      return a1 == a3;
    return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  }
  if ((a4 & 1) == 0)
    return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  return 1;
}

uint64_t static ExternalSearchQuery.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3);
}

void sub_10055E36C(uint64_t a1, __int16 a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  char v18;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v37;

  v18 = a4;
  if ((a2 & 0x100) != 0)
  {
    a1 = *(_QWORD *)(a14 + 16);
    v20 = *(_BYTE *)(a14 + 24);
  }
  else
  {
    v20 = a2 & 1;
  }
  v34 = v20;
  if (a3 == 2)
    v21 = *(_BYTE *)(a14 + 25);
  else
    v21 = a3 & 1;
  v33 = v21;
  if (a4 == 3)
    v18 = *(_BYTE *)(a14 + 26);
  if (a6)
  {
    v22 = a6;
  }
  else
  {
    a5 = *(_QWORD *)(a14 + 32);
    v22 = *(_QWORD *)(a14 + 40);
    swift_bridgeObjectRetain(v22);
  }
  v23 = a7;
  v37 = a8;
  if (a8 == 1)
  {
    v23 = *(_QWORD *)(a14 + 48);
    v37 = *(_QWORD *)(a14 + 56);
    swift_bridgeObjectRetain(v37);
  }
  v35 = a5;
  if (a9 == 2)
    v24 = *(_BYTE *)(a14 + 64);
  else
    v24 = a9 & 1;
  v32 = v24;
  v25 = a11;
  if (!a11)
  {
    v25 = *(_QWORD *)(a14 + 80);
    a10 = *(_QWORD *)(a14 + 72);
    swift_bridgeObjectRetain(v25);
  }
  if (a12 == 2)
    v26 = *(_BYTE *)(a14 + 88);
  else
    v26 = a12 & 1;
  v31 = v26;
  v27 = v22;
  v28 = v18;
  if (a13 == 2)
    v29 = *(_BYTE *)(a14 + 89);
  else
    v29 = a13 & 1;
  v30 = type metadata accessor for ListViewState._Storage();
  swift_allocObject(v30, 90, 7);
  swift_bridgeObjectRetain(a6);
  sub_1000ED0FC(a7, a8);
  swift_bridgeObjectRetain(a11);
  sub_100149094(a1, v34, v33, v28, v35, v27, v23, v37, v32, a10, v25, v31, v29);
}

uint64_t sub_10055E52C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x676E6974696465 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6974696465, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1970169197 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1970169197, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10055E608(char a1)
{
  if ((a1 & 1) != 0)
    return 1970169197;
  else
    return 0x676E6974696465;
}

uint64_t sub_10055E638(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10055E6BC()
{
  return 0x6E6F697369766572;
}

void sub_10055E6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_100099310();
  a23 = v27;
  a24 = v28;
  a10 = v29;
  v42 = v30;
  v32 = v31;
  v43 = sub_1000BA294(&qword_100BF05A0);
  v41 = *(_QWORD *)(v43 - 8);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_10004A2E8();
  v34 = sub_1000BA294(&qword_100BF05A8);
  sub_1000AE898();
  __chkstk_darwin(v35);
  sub_100094EC4();
  v44 = *(_QWORD *)(sub_1000BA294(&qword_100BF05B0) - 8);
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_10009E540();
  v37 = *(_QWORD *)(v32 + 24);
  v38 = *(_QWORD *)(v32 + 32);
  sub_10009D48C();
  v39 = sub_100560678();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ListToolbarMenuCategory.CodingKeys, &type metadata for ListToolbarMenuCategory.CodingKeys, v39, v37, v38);
  if ((a10 & 1) != 0)
  {
    a13 = 0;
    sub_1005606F0();
    sub_1000BD548((uint64_t)&type metadata for ListToolbarMenuCategory.EditingCodingKeys, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v34);
  }
  else
  {
    sub_1000E77D0();
    sub_1000BD548((uint64_t)&type metadata for ListToolbarMenuCategory.MenuCodingKeys, (uint64_t)&a14);
    KeyedEncodingContainer.encode(_:forKey:)(v42, v40, v43);
    sub_1000C6064(v41);
  }
  sub_100098748(v26, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
  sub_1000B44B0();
}

_QWORD *sub_10055E850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  sub_100099310();
  v34 = v2;
  v35 = v3;
  v5 = v4;
  v31 = sub_1000BA294(&qword_100BF0570);
  v30 = *(_QWORD *)(v31 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  sub_1000BA294(&qword_100BF0578);
  sub_1000AE898();
  __chkstk_darwin(v7);
  sub_100094EC4();
  v8 = sub_1000BA294(&qword_100BF0580);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100099234();
  v10 = v5[4];
  v11 = sub_1000DB418(v5, v5[3]);
  v12 = sub_100560678();
  sub_1000BC570((uint64_t)&type metadata for ListToolbarMenuCategory.CodingKeys, v13, v12);
  if (v0)
    goto LABEL_8;
  v29 = v9;
  v14 = KeyedDecodingContainer.allKeys.getter(v8);
  v17 = *(_QWORD *)(v14 + 16);
  if (!v17
    || (v18 = *(_BYTE *)(v14 + 32), sub_1000DAA6C(v14, v17, v15, v14 + 32, v16, (2 * v17) | 1), sub_100098EB4(), v10))
  {
    v11 = (_QWORD *)v1;
    v20 = sub_1000C09D0();
    sub_10009D46C(v20, (uint64_t)&protocol witness table for DecodingError);
    v22 = v21;
    sub_1000BA294(&qword_100BC6CF8);
    *v22 = &unk_100B80420;
    v23 = KeyedDecodingContainer.codingPath.getter(v8);
    v25 = sub_10003BD2C(v23, v24, 0x80000001009F2600);
    v26 = sub_1000E71A8(v25, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v26, v27);
    sub_100099400();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
LABEL_8:
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v5);
    return v11;
  }
  if ((v18 & 1) != 0)
  {
    sub_1000E77D0();
    v19 = sub_1000D90EC((uint64_t)&type metadata for ListToolbarMenuCategory.MenuCodingKeys, (uint64_t)&v33);
    v11 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v19, v31);
    sub_1000C6064(v30);
    sub_100099400();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
  }
  else
  {
    v32 = 0;
    sub_1005606F0();
    sub_1000D90EC((uint64_t)&type metadata for ListToolbarMenuCategory.EditingCodingKeys, (uint64_t)&v32);
    sub_1000D9F84();
    sub_100099400();
    sub_100098820(v1, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
    v11 = 0;
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v5);
  return v11;
}

uint64_t sub_10055EB34()
{
  char *v0;

  return sub_10055E608(*v0);
}

uint64_t sub_10055EB3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10055E52C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10055EB60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100560678();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055EB88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100560678();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055EBB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005606F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055EBD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005606F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055EC04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10055E638(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10055EC2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005606B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055EC54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005606B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055EC7C(uint64_t a1, uint64_t a2)
{
  return sub_10055E314(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

_QWORD *sub_10055EC98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  char v4;

  result = sub_10055E850();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = v4 & 1;
  }
  return result;
}

#error "10055ECD8: call analysis failed (funcsize=7)"

uint64_t sub_10055ECE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_100696A54(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_10055ED14(uint64_t a1)
{
  uint64_t v1;

  return sub_100696B38(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_10055ED30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x636E75614C707061 && a2 == 0xE900000000000068)
  {
    v5 = 0xE900000000000068;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E75614C707061, 0xE900000000000068, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6976614E72657375 && a2 == 0xEE006E6F69746167)
  {
    swift_bridgeObjectRelease(0xEE006E6F69746167);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6976614E72657375, 0xEE006E6F69746167, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10055EE50(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6976614E72657375;
  else
    return 0x636E75614C707061;
}

uint64_t sub_10055EE98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055F184();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055EEC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055F184();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055EEE8()
{
  char *v0;

  return sub_10055EE50(*v0);
}

uint64_t sub_10055EEF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10055ED30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10055EF14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055F10C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055EF3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055F10C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055EF64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055F148();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055EF8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055F148();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ListSessionTrigger.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_100099310();
  a23 = v27;
  a24 = v28;
  a10 = v29;
  v31 = v30;
  v32 = sub_1000BA294(&qword_100BF0440);
  v42 = *(_QWORD *)(v32 - 8);
  v43 = v32;
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_10009E540();
  v41 = sub_1000BA294(&qword_100BF0448);
  v34 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v36 = (char *)&v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BF0450);
  sub_1000AE898();
  __chkstk_darwin(v37);
  sub_100094EC4();
  v38 = *(_QWORD *)(v31 + 24);
  v39 = *(_QWORD *)(v31 + 32);
  sub_10009D48C();
  v40 = sub_10055F10C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ListSessionTrigger.CodingKeys, &type metadata for ListSessionTrigger.CodingKeys, v40, v38, v39);
  if ((a10 & 1) != 0)
  {
    sub_1000D0D70();
    sub_100098B5C((uint64_t)&type metadata for ListSessionTrigger.UserNavigationCodingKeys, (uint64_t)&a14);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v26, v43);
  }
  else
  {
    a13 = 0;
    sub_10055F184();
    sub_100098B5C((uint64_t)&type metadata for ListSessionTrigger.AppLaunchCodingKeys, (uint64_t)&a13);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v41);
  }
  sub_100098748(v25, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  sub_1000B44B0();
}

unint64_t sub_10055F10C()
{
  unint64_t result;

  result = qword_100BF0458;
  if (!qword_100BF0458)
  {
    result = swift_getWitnessTable(&unk_1009AF284, &type metadata for ListSessionTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0458);
  }
  return result;
}

unint64_t sub_10055F148()
{
  unint64_t result;

  result = qword_100BF0460;
  if (!qword_100BF0460)
  {
    result = swift_getWitnessTable(&unk_1009AF234, &type metadata for ListSessionTrigger.UserNavigationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0460);
  }
  return result;
}

unint64_t sub_10055F184()
{
  unint64_t result;

  result = qword_100BF0468;
  if (!qword_100BF0468)
  {
    result = swift_getWitnessTable(&unk_1009AF1E4, &type metadata for ListSessionTrigger.AppLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0468);
  }
  return result;
}

uint64_t ListSessionTrigger.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  sub_100099310();
  v37 = v3;
  v38 = v4;
  v6 = v5;
  v7 = sub_1000BA294(&qword_100BF0470);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v32 = v9;
  v31 = sub_1000BA294(&qword_100BF0478);
  v10 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100079FBC();
  v11 = sub_1000BA294(&qword_100BF0480);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100098694();
  v13 = v6[3];
  sub_1000DB418(v6, v13);
  v14 = sub_10055F10C();
  sub_1000BC570((uint64_t)&type metadata for ListSessionTrigger.CodingKeys, v15, v14);
  if (v0)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v6);
  v30 = v12;
  v16 = KeyedDecodingContainer.allKeys.getter(v11);
  v19 = *(_QWORD *)(v16 + 16);
  if (!v19
    || (v20 = *(unsigned __int8 *)(v16 + 32),
        sub_1000DAA6C(v16, v19, v17, v16 + 32, v18, (2 * v19) | 1),
        sub_100098EB4(),
        v13 >> 1))
  {
    v22 = sub_1000C09D0();
    sub_10009D46C(v22, (uint64_t)&protocol witness table for DecodingError);
    v24 = v23;
    sub_1000BA294(&qword_100BC6CF8);
    *v24 = &type metadata for ListSessionTrigger;
    v25 = KeyedDecodingContainer.codingPath.getter(v11);
    sub_10003BD2C(v25, v26, 0x80000001009F2600);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v22);
    swift_willThrow(v27, v28);
    sub_100099400();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v11);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v6);
  }
  if ((v20 & 1) != 0)
  {
    sub_1000D0D70();
    sub_1000B46D8((uint64_t)&type metadata for ListSessionTrigger.UserNavigationCodingKeys, (uint64_t)&v36);
    v21 = v30;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }
  else
  {
    v35 = 0;
    sub_10055F184();
    sub_1000B46D8((uint64_t)&type metadata for ListSessionTrigger.AppLaunchCodingKeys, (uint64_t)&v35);
    v21 = v30;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v31);
  }
  sub_100099400();
  (*(void (**)(uint64_t, unint64_t))(v21 + 8))(v2, v13);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v6);
  return v20;
}

uint64_t sub_10055F484()
{
  unsigned __int8 *v0;

  return ListSessionTrigger.hashValue.getter(*v0);
}

uint64_t sub_10055F48C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = ListSessionTrigger.init(from:)();
  if (!v1)
    *a1 = result & 1;
  return result;
}

#error "10055F4C4: call analysis failed (funcsize=6)"

uint64_t sub_10055F4D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7551686372616573 && a2 == 0xEB00000000797265)
  {
    swift_bridgeObjectRelease(0xEB00000000797265);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7551686372616573, 0xEB00000000797265, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10055F5C4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7551686372616573;
  else
    return 1701736302;
}

void sub_10055F5FC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  sub_10007A148();
  sub_100098918();
}

uint64_t sub_10055F630()
{
  char *v0;

  return sub_10055F5C4(*v0);
}

uint64_t sub_10055F638@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10055F4D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10055F65C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055FF5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055F684(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055FF5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055F6AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055FFD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055F6D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055FFD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055F6FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055FF98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055F724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10055FF98();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ExternalSearchQuery.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_100099310();
  a22 = v26;
  a23 = v27;
  v43 = v28;
  v41 = v29;
  v31 = v30;
  v32 = sub_1000BA294(&qword_100BF0488);
  v42 = *(_QWORD *)(v32 - 8);
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_100099234();
  v40 = sub_1000BA294(&qword_100BF0490);
  v34 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_10009E540();
  v44 = *(_QWORD *)(sub_1000BA294(&qword_100BF0498) - 8);
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_10004A2E8();
  v36 = *(_QWORD *)(v31 + 24);
  v37 = *(_QWORD *)(v31 + 32);
  sub_10009D48C();
  v38 = sub_10055FF5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ExternalSearchQuery.CodingKeys, &type metadata for ExternalSearchQuery.CodingKeys, v38, v36, v37);
  if (v43)
  {
    sub_100099B80();
    sub_1000D1EF8((uint64_t)&type metadata for ExternalSearchQuery.SearchQueryCodingKeys, (uint64_t)&a13);
    KeyedEncodingContainer.encode(_:forKey:)(v41, v43, v39, v32);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v32);
  }
  else
  {
    a12 = 0;
    sub_10055FFD4();
    sub_1000D1EF8((uint64_t)&type metadata for ExternalSearchQuery.NoneCodingKeys, (uint64_t)&a12);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v23, v40);
  }
  sub_100098748(v24, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
  sub_1000B44B0();
}

_QWORD *ExternalSearchQuery.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  sub_100099310();
  v34 = v2;
  v35 = v3;
  v5 = v4;
  v31 = sub_1000BA294(&qword_100BF04B8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v30 = sub_1000BA294(&qword_100BF04C0);
  __chkstk_darwin(v30);
  sub_100098694();
  v7 = sub_1000BA294(&qword_100BF04C8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100079FBC();
  v9 = sub_1000DB418(v5, v5[3]);
  v10 = sub_10055FF5C();
  sub_1000BC570((uint64_t)&type metadata for ExternalSearchQuery.CodingKeys, v11, v10);
  if (v0)
    goto LABEL_8;
  v12 = KeyedDecodingContainer.allKeys.getter(v7);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    v14 = v1;
    goto LABEL_7;
  }
  v14 = v1;
  v15 = *(_BYTE *)(v12 + 32);
  sub_100560600(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease();
  if (v17 != v19 >> 1)
  {
LABEL_7:
    v21 = sub_1000C09D0();
    sub_10009D46C(v21, (uint64_t)&protocol witness table for DecodingError);
    v23 = v22;
    sub_1000BA294(&qword_100BC6CF8);
    *v23 = &type metadata for ExternalSearchQuery;
    v9 = (_QWORD *)v14;
    v24 = KeyedDecodingContainer.codingPath.getter(v7);
    v26 = sub_10003BD2C(v24, v25, 0x80000001009F2600);
    v27 = sub_1000E71A8(v26, enum case for DecodingError.typeMismatch(_:));
    swift_willThrow(v27, v28);
    sub_1000C0EBC();
    sub_100098820(v14, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
LABEL_8:
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v5);
    return v9;
  }
  if ((v15 & 1) != 0)
  {
    sub_100099B80();
    v20 = sub_1000C6B94((uint64_t)&type metadata for ExternalSearchQuery.SearchQueryCodingKeys, (uint64_t)&v33, v7, (uint64_t)&type metadata for ExternalSearchQuery.SearchQueryCodingKeys);
    v9 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v20, v31);
    sub_1000C171C();
    sub_1000C0EBC();
    sub_10009CC44(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  }
  else
  {
    v32 = 0;
    sub_10055FFD4();
    sub_1000C6B94((uint64_t)&type metadata for ExternalSearchQuery.NoneCodingKeys, (uint64_t)&v32, v7, (uint64_t)&type metadata for ExternalSearchQuery.NoneCodingKeys);
    sub_1000D9F84();
    sub_1000C0EBC();
    sub_100098820(v14, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    v9 = 0;
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v5);
  return v9;
}

_QWORD *sub_10055FC18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = ExternalSearchQuery.init(from:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

#error "10055FC4C: call analysis failed (funcsize=6)"

void sub_10055FC58(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  static ExternalSearchQuery.read(from:)(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

void sub_10055FC80(uint64_t a1)
{
  uint64_t *v1;

  ExternalSearchQuery.write(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10055FC98(uint64_t *a1, uint64_t *a2)
{
  return static ExternalSearchQuery.__derived_enum_equals(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10055FCAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = sub_1000BA294(&qword_100BC31F0);
  inited = swift_initStackObject(v4, &v21);
  *(_OWORD *)(inited + 16) = xmmword_10098C750;
  sub_1000C0AA4();
  *(_QWORD *)(v6 + 32) = 0xD000000000000010;
  *(_QWORD *)(v6 + 40) = v7;
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 72) = &unk_100B80420;
  *(_QWORD *)(v6 + 80) = 0xD000000000000019;
  sub_1000C0AA4();
  *(_QWORD *)(v9 + 88) = v10;
  *(_BYTE *)(v9 + 96) = *(_BYTE *)(a1 + 25);
  *(_QWORD *)(v9 + 120) = &type metadata for Bool;
  *(_QWORD *)(v9 + 128) = 0xD00000000000001CLL;
  sub_1000C0AA4();
  *(_QWORD *)(v11 + 136) = v12;
  if (*(_BYTE *)(a1 + 26))
  {
    if (*(_BYTE *)(a1 + 26) == 1)
    {
      v13 = 0xEE006465696E6544;
      v14 = 0x6E6F697461636F6CLL;
    }
    else
    {
      sub_1000C0AA4();
    }
  }
  else
  {
    v13 = 0xE600000000000000;
    v14 = 0x6E6564646968;
  }
  *(_QWORD *)(inited + 144) = v14;
  *(_QWORD *)(inited + 152) = v13;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 0x6863726165537369;
  *(_QWORD *)(inited + 184) = 0xEB00000000676E69;
  *(_BYTE *)(inited + 192) = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_QWORD *)(inited + 224) = 0x697469736E617274;
  *(_QWORD *)(inited + 232) = 0xEF6449676E696E6FLL;
  v16 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v17 = sub_1000BA294(&qword_100BC5AA8);
  *(_QWORD *)(inited + 240) = v16;
  *(_QWORD *)(inited + 248) = v15;
  *(_QWORD *)(inited + 264) = v17;
  *(_QWORD *)(inited + 272) = 0x72656767697274;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  *(_BYTE *)(inited + 288) = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(inited + 312) = &type metadata for ListSessionTrigger;
  *(_QWORD *)(inited + 320) = 0xD00000000000001FLL;
  sub_1000C0AA4();
  *(_QWORD *)(inited + 328) = v18;
  LOBYTE(v18) = *(_BYTE *)(a1 + 89);
  *(_QWORD *)(inited + 360) = &type metadata for Bool;
  *(_BYTE *)(inited + 336) = v18;
  swift_bridgeObjectRetain();
  v19 = Dictionary.init(dictionaryLiteral:)(inited);
  a2[3] = sub_1000BA294(&qword_100BF0558);
  a2[4] = sub_100560580();
  sub_10005F164(a2);
  return ShortDescription.init(name:_:)(0x776569567473694CLL, 0xED00006574617453, v19, &unk_100B62BC8);
}

uint64_t sub_10055FF28@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_10055FCAC(*v1, a1);
}

uint64_t sub_10055FF30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005605C4();
  return ShortDescribable.description.getter(a1, v2);
}

unint64_t sub_10055FF5C()
{
  unint64_t result;

  result = qword_100BF04A0;
  if (!qword_100BF04A0)
  {
    result = swift_getWitnessTable(&unk_1009AF194, &type metadata for ExternalSearchQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04A0);
  }
  return result;
}

unint64_t sub_10055FF98()
{
  unint64_t result;

  result = qword_100BF04A8;
  if (!qword_100BF04A8)
  {
    result = swift_getWitnessTable(&unk_1009AF144, &type metadata for ExternalSearchQuery.SearchQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04A8);
  }
  return result;
}

unint64_t sub_10055FFD4()
{
  unint64_t result;

  result = qword_100BF04B0;
  if (!qword_100BF04B0)
  {
    result = swift_getWitnessTable(&unk_1009AF0F4, &type metadata for ExternalSearchQuery.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04B0);
  }
  return result;
}

unint64_t sub_100560014()
{
  unint64_t result;

  result = qword_100BF04D0;
  if (!qword_100BF04D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListSessionTrigger, &type metadata for ListSessionTrigger);
    atomic_store(result, (unint64_t *)&qword_100BF04D0);
  }
  return result;
}

void type metadata accessor for ListSessionTrigger()
{
  sub_100098884();
}

uint64_t getEnumTagSinglePayload for ExternalSearchQuery(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ExternalSearchQuery(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for ExternalSearchQuery()
{
  sub_100098884();
}

void type metadata accessor for ListToolbarMenuCategory()
{
  sub_100098884();
}

ValueMetadata *type metadata accessor for ExternalSearchQuery.CodingKeys()
{
  return &type metadata for ExternalSearchQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for ExternalSearchQuery.NoneCodingKeys()
{
  return &type metadata for ExternalSearchQuery.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for ExternalSearchQuery.SearchQueryCodingKeys()
{
  return &type metadata for ExternalSearchQuery.SearchQueryCodingKeys;
}

ValueMetadata *type metadata accessor for ListSessionTrigger.CodingKeys()
{
  return &type metadata for ListSessionTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for ListSessionTrigger.AppLaunchCodingKeys()
{
  return &type metadata for ListSessionTrigger.AppLaunchCodingKeys;
}

ValueMetadata *type metadata accessor for ListSessionTrigger.UserNavigationCodingKeys()
{
  return &type metadata for ListSessionTrigger.UserNavigationCodingKeys;
}

unint64_t sub_100560184()
{
  unint64_t result;

  result = qword_100BF04D8;
  if (!qword_100BF04D8)
  {
    result = swift_getWitnessTable(&unk_1009AEDEC, &type metadata for ListSessionTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04D8);
  }
  return result;
}

unint64_t sub_1005601C4()
{
  unint64_t result;

  result = qword_100BF04E0;
  if (!qword_100BF04E0)
  {
    result = swift_getWitnessTable(&unk_1009AEEA4, &type metadata for ExternalSearchQuery.SearchQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04E0);
  }
  return result;
}

unint64_t sub_100560204()
{
  unint64_t result;

  result = qword_100BF04E8;
  if (!qword_100BF04E8)
  {
    result = swift_getWitnessTable(&unk_1009AEFAC, &type metadata for ExternalSearchQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04E8);
  }
  return result;
}

unint64_t sub_100560244()
{
  unint64_t result;

  result = qword_100BF04F0;
  if (!qword_100BF04F0)
  {
    result = swift_getWitnessTable(&unk_1009AF09C, &unk_100B62BC8);
    atomic_store(result, (unint64_t *)&qword_100BF04F0);
  }
  return result;
}

unint64_t sub_100560284()
{
  unint64_t result;

  result = qword_100BF04F8;
  if (!qword_100BF04F8)
  {
    result = swift_getWitnessTable(&unk_1009AEECC, &type metadata for ExternalSearchQuery.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF04F8);
  }
  return result;
}

unint64_t sub_1005602C4()
{
  unint64_t result;

  result = qword_100BF0500;
  if (!qword_100BF0500)
  {
    result = swift_getWitnessTable(&unk_1009AEEF4, &type metadata for ExternalSearchQuery.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0500);
  }
  return result;
}

unint64_t sub_100560304()
{
  unint64_t result;

  result = qword_100BF0508;
  if (!qword_100BF0508)
  {
    result = swift_getWitnessTable(&unk_1009AEE14, &type metadata for ExternalSearchQuery.SearchQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0508);
  }
  return result;
}

unint64_t sub_100560344()
{
  unint64_t result;

  result = qword_100BF0510;
  if (!qword_100BF0510)
  {
    result = swift_getWitnessTable(&unk_1009AEE3C, &type metadata for ExternalSearchQuery.SearchQueryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0510);
  }
  return result;
}

unint64_t sub_100560384()
{
  unint64_t result;

  result = qword_100BF0518;
  if (!qword_100BF0518)
  {
    result = swift_getWitnessTable(&unk_1009AEF1C, &type metadata for ExternalSearchQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0518);
  }
  return result;
}

unint64_t sub_1005603C4()
{
  unint64_t result;

  result = qword_100BF0520;
  if (!qword_100BF0520)
  {
    result = swift_getWitnessTable(&unk_1009AEF44, &type metadata for ExternalSearchQuery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0520);
  }
  return result;
}

unint64_t sub_100560404()
{
  unint64_t result;

  result = qword_100BF0528;
  if (!qword_100BF0528)
  {
    result = swift_getWitnessTable(&unk_1009AED0C, &type metadata for ListSessionTrigger.AppLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0528);
  }
  return result;
}

unint64_t sub_100560444()
{
  unint64_t result;

  result = qword_100BF0530;
  if (!qword_100BF0530)
  {
    result = swift_getWitnessTable(&unk_1009AED34, &type metadata for ListSessionTrigger.AppLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0530);
  }
  return result;
}

unint64_t sub_100560484()
{
  unint64_t result;

  result = qword_100BF0538;
  if (!qword_100BF0538)
  {
    result = swift_getWitnessTable(&unk_1009AECBC, &type metadata for ListSessionTrigger.UserNavigationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0538);
  }
  return result;
}

unint64_t sub_1005604C4()
{
  unint64_t result;

  result = qword_100BF0540;
  if (!qword_100BF0540)
  {
    result = swift_getWitnessTable(&unk_1009AECE4, &type metadata for ListSessionTrigger.UserNavigationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0540);
  }
  return result;
}

unint64_t sub_100560504()
{
  unint64_t result;

  result = qword_100BF0548;
  if (!qword_100BF0548)
  {
    result = swift_getWitnessTable(&unk_1009AED5C, &type metadata for ListSessionTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0548);
  }
  return result;
}

unint64_t sub_100560544()
{
  unint64_t result;

  result = qword_100BF0550;
  if (!qword_100BF0550)
  {
    result = swift_getWitnessTable(&unk_1009AED84, &type metadata for ListSessionTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0550);
  }
  return result;
}

unint64_t sub_100560580()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF0560;
  if (!qword_100BF0560)
  {
    v1 = sub_100075EB0(&qword_100BF0558);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShortDescription<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF0560);
  }
  return result;
}

unint64_t sub_1005605C4()
{
  unint64_t result;

  result = qword_100BF0568;
  if (!qword_100BF0568)
  {
    result = swift_getWitnessTable(&unk_1009AF0C4, &unk_100B62BC8);
    atomic_store(result, (unint64_t *)&qword_100BF0568);
  }
  return result;
}

uint64_t sub_100560600(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain(a3);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100560678()
{
  unint64_t result;

  result = qword_100BF0588;
  if (!qword_100BF0588)
  {
    result = swift_getWitnessTable(&unk_1009AF564, &type metadata for ListToolbarMenuCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0588);
  }
  return result;
}

unint64_t sub_1005606B4()
{
  unint64_t result;

  result = qword_100BF0590;
  if (!qword_100BF0590)
  {
    result = swift_getWitnessTable(&unk_1009AF514, &type metadata for ListToolbarMenuCategory.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0590);
  }
  return result;
}

unint64_t sub_1005606F0()
{
  unint64_t result;

  result = qword_100BF0598;
  if (!qword_100BF0598)
  {
    result = swift_getWitnessTable(&unk_1009AF4C4, &type metadata for ListToolbarMenuCategory.EditingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF0598);
  }
  return result;
}

uint64_t _s7Weather18ListSessionTriggerOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100560778 + 4 * byte_1009AE9F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005607AC + 4 * byte_1009AE9F0[v4]))();
}

uint64_t sub_1005607AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005607B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005607BCLL);
  return result;
}

uint64_t sub_1005607C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005607D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005607D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005607DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListToolbarMenuCategory.CodingKeys()
{
  return &type metadata for ListToolbarMenuCategory.CodingKeys;
}

ValueMetadata *type metadata accessor for ListToolbarMenuCategory.EditingCodingKeys()
{
  return &type metadata for ListToolbarMenuCategory.EditingCodingKeys;
}

uint64_t _s7Weather19ExternalSearchQueryO21SearchQueryCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100560848 + 4 * byte_1009AE9FA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100560868 + 4 * byte_1009AE9FF[v4]))();
}

_BYTE *sub_100560848(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100560868(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100560870(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100560878(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100560880(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100560888(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ListToolbarMenuCategory.MenuCodingKeys()
{
  return &type metadata for ListToolbarMenuCategory.MenuCodingKeys;
}

unint64_t sub_1005608A8()
{
  unint64_t result;

  result = qword_100BF05B8;
  if (!qword_100BF05B8)
  {
    result = swift_getWitnessTable(&unk_1009AF394, &type metadata for ListToolbarMenuCategory.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05B8);
  }
  return result;
}

unint64_t sub_1005608E8()
{
  unint64_t result;

  result = qword_100BF05C0;
  if (!qword_100BF05C0)
  {
    result = swift_getWitnessTable(&unk_1009AF49C, &type metadata for ListToolbarMenuCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05C0);
  }
  return result;
}

unint64_t sub_100560928()
{
  unint64_t result;

  result = qword_100BF05C8;
  if (!qword_100BF05C8)
  {
    result = swift_getWitnessTable(&unk_1009AF3BC, &type metadata for ListToolbarMenuCategory.EditingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05C8);
  }
  return result;
}

unint64_t sub_100560968()
{
  unint64_t result;

  result = qword_100BF05D0;
  if (!qword_100BF05D0)
  {
    result = swift_getWitnessTable(&unk_1009AF3E4, &type metadata for ListToolbarMenuCategory.EditingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05D0);
  }
  return result;
}

unint64_t sub_1005609A8()
{
  unint64_t result;

  result = qword_100BF05D8;
  if (!qword_100BF05D8)
  {
    result = swift_getWitnessTable(&unk_1009AF304, &type metadata for ListToolbarMenuCategory.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05D8);
  }
  return result;
}

unint64_t sub_1005609E8()
{
  unint64_t result;

  result = qword_100BF05E0;
  if (!qword_100BF05E0)
  {
    result = swift_getWitnessTable(&unk_1009AF32C, &type metadata for ListToolbarMenuCategory.MenuCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05E0);
  }
  return result;
}

unint64_t sub_100560A28()
{
  unint64_t result;

  result = qword_100BF05E8;
  if (!qword_100BF05E8)
  {
    result = swift_getWitnessTable(&unk_1009AF40C, &type metadata for ListToolbarMenuCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05E8);
  }
  return result;
}

unint64_t sub_100560A68()
{
  unint64_t result;

  result = qword_100BF05F0;
  if (!qword_100BF05F0)
  {
    result = swift_getWitnessTable(&unk_1009AF434, &type metadata for ListToolbarMenuCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF05F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AveragesDetailTracker()
{
  return &type metadata for AveragesDetailTracker;
}

ValueMetadata *type metadata accessor for HomeAndWorkUpdatedTip()
{
  return &type metadata for HomeAndWorkUpdatedTip;
}

uint64_t sub_100560AC8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100A0A6C0);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view title when home location is updated.");
}

uint64_t sub_100560B20()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000044, 0x8000000100A0A1D0);
  return sub_1000C2638(v0, v2, v1 & 1, v3, v4, v5, v6, (uint64_t)"List view tip view message describing user's home and work location are updated and that the user can use the Contacts app to update their home/work addresses.");
}

uint64_t sub_100560B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1000BA294(&qword_100BC3130);
  sub_10004037C(v0, qword_100CAED08);
  sub_1000AECD4(v0, (uint64_t)qword_100CAED08);
  v5 = 0;
  v1 = sub_1000BA294(&qword_100BC5020);
  v2 = type metadata accessor for Tips.ParameterOption(0);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_10097CA50;
  static Tips.ParameterOption.transient.getter();
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for HomeAndWorkUpdatedTip, 0x79616C707369642BLL, 0xEB00000000706954, &v5, v3, &type metadata for Bool, &type metadata for HomeAndWorkUpdatedTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_100560C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v0 = sub_1000BA294(&qword_100BC3130);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100098728();
  v4 = v3 - v2;
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  if (qword_100BC21E8 != -1)
    swift_once(&qword_100BC21E8, sub_100560B78);
  v10 = sub_1000AECD4(v0, (uint64_t)qword_100CAED08);
  swift_beginAccess(v10, v14, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v10, v0);
  Tips.Rule.init<A>(_:_:)(v4, sub_1001AD5F8, 0);
  v11 = static Tips.RuleBuilder.buildExpression(_:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v12 = static Tips.RuleBuilder.buildPartialBlock(first:)(v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100560DDC()
{
  return sub_100560AC8();
}

uint64_t sub_100560E04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100162DA4();
  result = Tip.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_100560E44()
{
  unint64_t result;

  result = qword_100BF05F8;
  if (!qword_100BF05F8)
  {
    result = swift_getWitnessTable(&unk_1009AF638, &type metadata for HomeAndWorkUpdatedTip);
    atomic_store(result, (unint64_t *)&qword_100BF05F8);
  }
  return result;
}

uint64_t sub_100560E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 8);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
    v2 = Color.init(uiColor:)(v3);
    *(_QWORD *)(v0 + 8) = v2;
    swift_retain(v2);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

void sub_100560EE4(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[32];

  v93 = a3;
  v5 = type metadata accessor for TipPriorityQueue.GridEntry(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v92 = v7;
  __chkstk_darwin(v8);
  v91 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v68 - v11;
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for LocationComponentViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - v20;
  sub_1000BA294(&qword_100BCC760);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_1000986FC();
  v89 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v68 - v31;
  if (a1)
  {
    if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        v33 = &qword_100BF0A78;
        goto LABEL_11;
      }
    }
    else if ((a2 & 1) != 0)
    {
      v33 = &qword_100BF0E48;
      goto LABEL_11;
    }
    v33 = &qword_100BF0C60;
  }
  else if ((a2 & 1) != 0)
  {
    v33 = &qword_100BF06A8;
  }
  else
  {
    v33 = &qword_100BF0890;
  }
LABEL_11:
  v34 = *((_BYTE *)v33 + 224);
  v76 = *v33;
  v75 = v33[1];
  v74 = v33[2];
  v73 = v33[3];
  v35 = v33[8];
  v79 = v33[9];
  v80 = v35;
  v36 = v33[10];
  v77 = v33[11];
  v78 = v36;
  v37 = v33[24];
  v72 = v33[25];
  v71 = v33[26];
  v70 = v33[27];
  v38 = v33[49];
  v83 = v33[50];
  v84 = v38;
  v39 = v33[51];
  v81 = v33[52];
  v82 = v39;
  v40 = v33[57];
  v87 = v33[58];
  v88 = v40;
  v41 = v93 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_map;
  v43 = v33[59];
  v42 = v33[60];
  v85 = v43;
  v86 = v42;
  sub_1000992EC(v93 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_map, (uint64_t)v94);
  sub_10003773C(v41, v15, &qword_100BC4A98);
  v44 = sub_1000878BC();
  if (_s7Weather24LocationCompositionStateOwet_0(v15, 1, v44) == 1)
  {
    sub_100021A14(v15, &qword_100BC4A98);
LABEL_16:
    v45 = 1;
    goto LABEL_17;
  }
  v69 = v37;
  sub_10009D3BC(v15 + *(int *)(v44 + 20), (uint64_t)v18);
  sub_1000215BC(v15, type metadata accessor for LocationComponentContainerViewModel);
  sub_10007C77C((uint64_t)v18, (uint64_t)v21, type metadata accessor for LocationComponentViewModel);
  if ((v34 & 1) != 0)
  {
    sub_1000215BC((uint64_t)v21, type metadata accessor for LocationComponentViewModel);
    goto LABEL_16;
  }
  sub_10007C77C((uint64_t)v21, (uint64_t)v29, type metadata accessor for LocationComponentViewModel);
  v45 = 0;
  v46 = &v29[*(int *)(v5 + 20)];
  v47 = v72;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v48 = v70;
  *((_QWORD *)v46 + 2) = v71;
  *((_QWORD *)v46 + 3) = v48;
LABEL_17:
  sub_1000988B8((uint64_t)v29, v45);
  sub_1002228F0((uint64_t)v29, (uint64_t)v32);
  sub_10009D3BC(v93 + *(int *)(v44 + 20) + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_airQuality, (uint64_t)v26);
  v49 = &v26[*(int *)(v5 + 20)];
  v50 = v75;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v50;
  v51 = v73;
  *((_QWORD *)v49 + 2) = v74;
  *((_QWORD *)v49 + 3) = v51;
  sub_1000988B8((uint64_t)v26, 0);
  v52 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast);
  v53 = v90;
  sub_10009D3BC(v52, v90);
  v54 = (uint64_t *)(v53 + *(int *)(v5 + 20));
  v55 = v79;
  *v54 = v80;
  v54[1] = v55;
  v56 = v77;
  v54[2] = v78;
  v54[3] = v56;
  v57 = v89;
  sub_10003773C((uint64_t)v32, v89, &qword_100BCC760);
  v58 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex);
  v59 = v91;
  sub_10009D3BC(v58, v91);
  v60 = (uint64_t *)(v59 + *(int *)(v5 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = v81;
  v60[2] = v82;
  v60[3] = v62;
  v63 = sub_10009D3C4(OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind);
  v64 = v92;
  sub_10009D3BC(v63, v92);
  v65 = (uint64_t *)(v64 + *(int *)(v5 + 20));
  v66 = v87;
  *v65 = v88;
  v65[1] = v66;
  v67 = v86;
  v65[2] = v85;
  v65[3] = v67;
  sub_10087CED0((uint64_t)v26, v53, v57, v59, v64);
  sub_100021A14((uint64_t)v32, &qword_100BCC760);
  sub_100098640();
}

void sub_1005613E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  __n128 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  _BYTE v107[24];

  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000878BC();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10009E540();
  v9 = a1;
  v10 = a1 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_map;
  sub_1000992EC(a1 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_map, (uint64_t)v107);
  sub_10003773C(v10, v6, &qword_100BC4A98);
  if (_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7) == 1)
  {
    sub_100021A14(v6, &qword_100BC4A98);
    v11 = sub_1000BA294(&qword_100BCC750);
    v12 = swift_allocObject(v11, 248, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10098E040;
    v13 = sub_1000BA294(&qword_100BCC758);
    v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v15 = *(_QWORD *)(v8 + 72);
    v16 = v13;
    v17 = (__n128 *)sub_1000BA6B8(v13);
    v18 = sub_100099954(v17, (__n128)xmmword_10097CA50);
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_severeAlert, (uint64_t)v18 + v14);
    *(_QWORD *)(v12 + 32) = sub_1000B4580();
    *(_QWORD *)(v12 + 40) = v19;
    *(_QWORD *)(v12 + 48) = v20;
    v21 = sub_1000BA6B8(v16);
    *(_OWORD *)(v21 + 16) = v106;
    sub_10009F7F4(a1 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_airQuality, v21 + v14);
    *(_QWORD *)(v12 + 56) = sub_1000B4580();
    *(_QWORD *)(v12 + 64) = v22;
    *(_QWORD *)(v12 + 72) = v23;
    v24 = (__n128 *)sub_1000BA6B8(v16);
    sub_10009D458(v24);
    sub_10009F7F4(v25 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v26);
    *(_QWORD *)(v12 + 80) = sub_1000B4580();
    *(_QWORD *)(v12 + 88) = v27;
    *(_QWORD *)(v12 + 96) = v28;
    v29 = (__n128 *)sub_1000BA6B8(v16);
    sub_10009D458(v29);
    sub_10009F7F4(v30 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v31);
    *(_QWORD *)(v12 + 104) = sub_100080C44((uint64_t)v29);
    *(_QWORD *)(v12 + 112) = v32;
    *(_QWORD *)(v12 + 120) = v33;
    v34 = (__n128 *)sub_1000C2514(v16, v14 + 2 * v15);
    v35 = (char *)sub_100099954(v34, (__n128)xmmword_10097DA20) + v14;
    v36 = *(_QWORD *)(a1 + 16);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v35);
    sub_10009F7F4(v36 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 128) = sub_1000B4580();
    *(_QWORD *)(v12 + 136) = v37;
    *(_QWORD *)(v12 + 144) = v38;
    v39 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v39);
    sub_100095B78(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v35, type metadata accessor for LocationComponentContainerViewModel);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 152) = sub_1000B4580();
    *(_QWORD *)(v12 + 160) = v40;
    *(_QWORD *)(v12 + 168) = v41;
    v42 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v42);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v35);
    sub_100098A1C(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 176) = sub_1000B4580();
    *(_QWORD *)(v12 + 184) = v43;
    *(_QWORD *)(v12 + 192) = v44;
    v45 = (__n128 *)sub_1000BA6B8(v16);
    sub_1000B46B8(v45);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v35);
    sub_100098B48(v15 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v35[v15]);
    *(_QWORD *)(v12 + 200) = sub_1000B4580();
    *(_QWORD *)(v12 + 208) = v46;
    *(_QWORD *)(v12 + 216) = v47;
    v48 = sub_1000BA6B8(v16);
    *(_OWORD *)(v48 + 16) = v106;
    v49 = *(_QWORD *)(a1 + 16);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v48 + v14);
    sub_10009D3BC(v49 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v48 + v14 + v15);
    *(_QWORD *)(v12 + 224) = sub_100080C44(v48);
    *(_QWORD *)(v12 + 232) = v50;
    *(_QWORD *)(v12 + 240) = v51;
  }
  else
  {
    sub_10007C77C(v6, v1, type metadata accessor for LocationComponentContainerViewModel);
    v52 = sub_1000BA294(&qword_100BCC750);
    v53 = swift_allocObject(v52, 272, 7);
    *(_OWORD *)(v53 + 16) = xmmword_10097FA60;
    v54 = sub_1000BA294(&qword_100BCC758);
    v55 = *(_QWORD *)(v8 + 72);
    v56 = *(unsigned __int8 *)(v8 + 80);
    v57 = (v56 + 32) & ~v56;
    v105 = v1;
    v58 = v56 | 7;
    v59 = v54;
    v60 = (__n128 *)swift_allocObject(v54, v57 + v55, v56 | 7);
    v61 = sub_100099954(v60, (__n128)xmmword_10097CA50);
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_severeAlert, (uint64_t)v61 + v57);
    *(_QWORD *)(v53 + 32) = sub_1000B4588();
    *(_QWORD *)(v53 + 40) = v62;
    *(_QWORD *)(v53 + 48) = v63;
    v64 = sub_1000BA5D8();
    *(_OWORD *)(v64 + 16) = v106;
    sub_1000B4590(v9 + OBJC_IVAR____TtCV7Weather24ElevatedAqiSevereContent8_Storage_airQuality, v64 + v57);
    *(_QWORD *)(v53 + 56) = sub_1000B4588();
    *(_QWORD *)(v53 + 64) = v65;
    *(_QWORD *)(v53 + 72) = v66;
    v67 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v67);
    sub_1000B4590(v68 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_hourlyForecast, v69);
    *(_QWORD *)(v53 + 80) = sub_1000B4588();
    *(_QWORD *)(v53 + 88) = v70;
    *(_QWORD *)(v53 + 96) = v71;
    v72 = (__n128 *)sub_1000BA5D8();
    sub_100098A48(v72);
    sub_1000B4590(v73 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_dailyForecast, v74);
    *(_QWORD *)(v53 + 104) = sub_1000B4588();
    *(_QWORD *)(v53 + 112) = v75;
    *(_QWORD *)(v53 + 120) = v76;
    v77 = sub_1000BA5D8();
    *(_OWORD *)(v77 + 16) = v106;
    sub_1000B4590(v1, v77 + v57);
    *(_QWORD *)(v53 + 128) = sub_1000B4580();
    *(_QWORD *)(v53 + 136) = v78;
    *(_QWORD *)(v53 + 144) = v79;
    v80 = v9;
    v81 = (__n128 *)swift_allocObject(v59, v57 + 2 * v55, v58);
    v82 = (char *)sub_100099954(v81, (__n128)xmmword_10097DA20) + v57;
    v83 = *(_QWORD *)(v80 + 16);
    v103 = v80;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_uvIndex, (uint64_t)v82);
    v104 = v55;
    sub_1000B4590(v83 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_sunriseSunset, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 152) = sub_1000B4588();
    *(_QWORD *)(v53 + 160) = v84;
    *(_QWORD *)(v53 + 168) = v85;
    v86 = (__n128 *)sub_1000C2514(v59, v57 + 2 * v55);
    sub_1000C52D8(v86);
    v87 = *(_QWORD *)(v80 + 16);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_wind, (uint64_t)v82);
    sub_1000B4590(v87 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_precipitationTotal, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 176) = sub_1000B4588();
    *(_QWORD *)(v53 + 184) = v88;
    *(_QWORD *)(v53 + 192) = v89;
    v90 = v57 + 2 * v55;
    v91 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v91);
    v92 = *(_QWORD *)(v103 + 16);
    sub_1000B4590(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_feelsLike, (uint64_t)v82);
    sub_100098A1C(v92 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_humidity, (uint64_t)&v82[v55]);
    *(_QWORD *)(v53 + 200) = sub_1000B4588();
    *(_QWORD *)(v53 + 208) = v93;
    *(_QWORD *)(v53 + 216) = v94;
    v95 = (__n128 *)sub_1000C2514(v59, v90);
    sub_1000C52D8(v95);
    v96 = *(_QWORD *)(v103 + 16);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_visibility, (uint64_t)v82, type metadata accessor for LocationComponentContainerViewModel);
    sub_100095B78(v96 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_pressure, (uint64_t)&v82[v55], type metadata accessor for LocationComponentContainerViewModel);
    *(_QWORD *)(v53 + 224) = sub_1000B4588();
    *(_QWORD *)(v53 + 232) = v97;
    *(_QWORD *)(v53 + 240) = v98;
    v99 = swift_allocObject(v59, v90, v58);
    *(_OWORD *)(v99 + 16) = v106;
    v100 = *(_QWORD *)(v103 + 16);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_moon, v99 + v57);
    sub_100098B48(v100 + OBJC_IVAR____TtCV7Weather28LocationCommonViewComponents8_Storage_averages, v99 + v57 + v104);
    *(_QWORD *)(v53 + 248) = sub_100080C44(v99);
    *(_QWORD *)(v53 + 256) = v101;
    *(_QWORD *)(v53 + 264) = v102;
    sub_1000215BC(v105, type metadata accessor for LocationComponentContainerViewModel);
  }
  sub_100098640();
}

void sub_100561B24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_1000878BC();
  sub_1000B42B0();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for LocationViewComponent(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_10009E540();
  sub_1000BA294(&qword_100BC4A98);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  v14 = *(_QWORD *)(a1 + 16);
  swift_retain();
  sub_100520630();
  v17 = v15;
  swift_release(v14);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather38LocationElevatedAqiSevereConfiguration8_Storage_map);
  sub_1000C661C();
  sub_100098B50();
  _s7Weather24LocationCompositionStateOwst_0(v13, 0, 1, v2);
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather38LocationElevatedAqiSevereConfiguration8_Storage_airQuality);
  sub_1000C661C();
  sub_100098B50();
  sub_1000C5D34(OBJC_IVAR____TtCV7Weather38LocationElevatedAqiSevereConfiguration8_Storage_severeAlert);
  sub_1000C661C();
  sub_100098B50();
  sub_1001DAEB8(v17, v13, (uint64_t)v8, (uint64_t)v6);
  sub_100098640();
}

BOOL sub_100561C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v5 = sub_100098778();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  v10 = sub_1000BA294(&qword_100BC4978);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_10007A130();
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v30 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v30 - v19;
  if ((static Location.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v31 = v2;
  v21 = (int *)sub_1000DF744();
  if ((sub_1000C4448(v21[5]) & 1) == 0 || (sub_1000C4448(v21[6]) & 1) == 0 || (sub_1000C4448(v21[7]) & 1) == 0)
    return 0;
  sub_1000CD58C(a1 + v21[8], (uint64_t)v20);
  sub_1000CD58C(a2 + v21[8], (uint64_t)v18);
  v22 = *(int *)(v10 + 48);
  v23 = v31;
  v24 = v31 + v22;
  sub_1000CD58C((uint64_t)v20, v31);
  sub_1000CD58C((uint64_t)v18, v24);
  sub_100088FC8(v23, 1, v5);
  if (v25)
  {
    sub_10009E47C((uint64_t)v18);
    sub_10009E47C((uint64_t)v20);
    sub_100088FC8(v24, 1, v5);
    if (v25)
    {
      sub_100021A14(v23, (uint64_t *)&unk_100BD35A0);
      return 1;
    }
    goto LABEL_13;
  }
  sub_10003773C(v23, (uint64_t)v15, (uint64_t *)&unk_100BD35A0);
  sub_100088FC8(v24, 1, v5);
  if (v25)
  {
    sub_10009E47C((uint64_t)v18);
    sub_10009E47C((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
LABEL_13:
    sub_100021A14(v23, &qword_100BC4978);
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v24, v5);
  sub_100086DA4((unint64_t *)&qword_100BC3590, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v27 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v9, v5, v26);
  v28 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v28(v9, v5);
  sub_10009E47C((uint64_t)v18);
  sub_10009E47C((uint64_t)v20);
  v28((uint64_t)v15, v5);
  sub_10009E47C(v23);
  return (v27 & 1) != 0;
}

uint64_t sub_100561F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v63)(uint64_t, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int EnumCaseMultiPayload;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  os_log_type_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  __n128 v112;
  void (*v113)(uint64_t, uint64_t, __n128);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  char v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t (*v135)(uint64_t, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  uint64_t v168;

  v165 = a2;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000986FC();
  v152 = v5;
  sub_10009D2A4();
  __chkstk_darwin(v6);
  sub_1000860D0();
  v151 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  v156 = (uint64_t)&v134 - v9;
  v10 = sub_10009876C();
  type metadata accessor for TimeState(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v153 = v12;
  v13 = sub_10009876C();
  v143 = type metadata accessor for CurrentWeather(v13);
  v142 = *(_QWORD *)(v143 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v141 = v15;
  v16 = sub_10009876C();
  v139 = type metadata accessor for WeatherData(v16);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v140 = v18;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100098728();
  v22 = v21 - v20;
  v162 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_1000986FC();
  v147 = v24;
  sub_10009D2A4();
  __chkstk_darwin(v25);
  v148 = (uint64_t)&v134 - v26;
  v27 = sub_10009876C();
  v160 = type metadata accessor for TimeZone(v27);
  v154 = *(_QWORD *)(v160 - 8);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_100098728();
  v31 = v30 - v29;
  v32 = type metadata accessor for Calendar(0);
  v157 = *(_QWORD *)(v32 - 8);
  v158 = v32;
  sub_10009D98C();
  __chkstk_darwin(v33);
  sub_10007A130();
  v34 = type metadata accessor for Location(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_1000986FC();
  v150 = v36;
  sub_10009D2A4();
  __chkstk_darwin(v37);
  v39 = (char *)&v134 - v38;
  v159 = sub_100098778();
  v164 = *(_QWORD *)(v159 - 8);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_1000986FC();
  v149 = v41;
  sub_10009D2A4();
  __chkstk_darwin(v42);
  sub_1000860D0();
  v163 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000860D0();
  v155 = v45;
  sub_10009D2A4();
  __chkstk_darwin(v46);
  sub_1000860D0();
  v138 = v47;
  sub_10009D2A4();
  __chkstk_darwin(v48);
  v161 = (char *)&v134 - v49;
  sub_1000BA294(&qword_100BC6CC0);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100098728();
  v53 = v52 - v51;
  v54 = type metadata accessor for MoonDetailViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v55);
  sub_100098728();
  v58 = v57 - v56;
  sub_1001D41C0(a1, v53);
  v146 = v54;
  sub_100088FC8(v53, 1, v54);
  if (v70)
  {
    sub_100021A14(v53, &qword_100BC6CC0);
    v59 = sub_1000DF744();
    return sub_10009D34C(v165, v60, v61, v59);
  }
  sub_10007C77C(v53, v58, type metadata accessor for MoonDetailViewState);
  v137 = v35;
  v63 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 16);
  v145 = v34;
  v135 = v63;
  v64 = v63((uint64_t)v39, (char *)v58, v34);
  v144 = v39;
  Location.timeZone.getter(v64);
  static Calendar.currentCalendar(with:)(v31);
  v134 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
  v134(v31, v160);
  v65 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v65);
  v67 = Location.id.getter(v66);
  v69 = v68;
  sub_1000EED10(v67, v68, v65);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v65);
  sub_100088FC8(v22, 1, v162);
  v154 = v2;
  v71 = v58;
  v72 = a1;
  if (v70)
  {
    sub_100021A14(v22, &qword_100BC3380);
    v74 = v163;
    v73 = v164;
  }
  else
  {
    v75 = v148;
    sub_10007C77C(v22, v148, type metadata accessor for LocationWeatherDataState);
    v76 = v147;
    sub_100095B78(v75, v147, type metadata accessor for LocationWeatherDataState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v76);
    v74 = v163;
    if (EnumCaseMultiPayload == 1)
    {
      v78 = sub_1000BA294(&qword_100BC3358);
      v79 = v76 + *(int *)(v78 + 48);
      v80 = v76 + *(int *)(v78 + 64);
      v81 = v76;
      v82 = v140;
      sub_10007C77C(v81, v140, type metadata accessor for WeatherData);
      sub_1000215BC(v80, type metadata accessor for NewsDataModel);
      sub_1000215BC(v79, type metadata accessor for PreprocessedWeatherData);
      v83 = v141;
      v85 = WeatherDataModel.currentWeather.getter(v84);
      v86 = v138;
      CurrentWeather.date.getter(v85);
      (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v83, v143);
      sub_1000215BC(v82, type metadata accessor for WeatherData);
      sub_1000215BC(v75, type metadata accessor for LocationWeatherDataState);
      v73 = v164;
      v87 = (uint64_t)v161;
      v88 = (uint64_t)v161;
      v89 = v86;
      goto LABEL_11;
    }
    sub_1000215BC(v75, type metadata accessor for LocationWeatherDataState);
    sub_1000215BC(v76, type metadata accessor for LocationWeatherDataState);
    v73 = v164;
  }
  v90 = v153;
  sub_100095B78(v72 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v153, type metadata accessor for TimeState);
  v87 = (uint64_t)v161;
  v88 = (uint64_t)v161;
  v89 = v90;
LABEL_11:
  v91 = v159;
  sub_1000B4B5C(v88, v89);
  v92 = v156;
  sub_1005629E4(v87, v156);
  sub_100088FC8(v92, 1, v91);
  v136 = v71;
  if (v70)
  {
    sub_100021A14(v92, (uint64_t *)&unk_100BD35A0);
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v93 = type metadata accessor for Logger(0);
    sub_1000AECD4(v93, (uint64_t)qword_100CAF0E8);
    v94 = v150;
    v95 = (uint64_t)v144;
    v96 = v145;
    v97 = v135(v150, v144, v145);
    v98 = Logger.logObject.getter(v97);
    v100 = static os_log_type_t.error.getter(v98, v99);
    v101 = v100;
    if (os_log_type_enabled(v98, v100))
    {
      v102 = swift_slowAlloc(22, -1);
      v163 = swift_slowAlloc(64, -1);
      v168 = v163;
      *(_DWORD *)v102 = 136446466;
      swift_beginAccess(v87, v167, 0, 0);
      sub_100086DA4((unint64_t *)&qword_100BC52F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v162) = v101;
      v103 = dispatch thunk of CustomStringConvertible.description.getter(v91);
      v105 = v104;
      v166 = sub_1000CE1C8(v103, v104, &v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167);
      swift_bridgeObjectRelease(v105);
      *(_WORD *)(v102 + 12) = 2082;
      Location.timeZone.getter(v106);
      sub_100086DA4(&qword_100BF1168, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
      v107 = v160;
      v108 = dispatch thunk of CustomStringConvertible.description.getter(v160);
      v110 = v109;
      v134(v31, v107);
      v166 = sub_1000CE1C8(v108, v110, &v168);
      v73 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167);
      v111 = v110;
      v87 = (uint64_t)v161;
      v112 = swift_bridgeObjectRelease(v111);
      v113 = *(void (**)(uint64_t, uint64_t, __n128))(v137 + 8);
      v114 = v145;
      v113(v94, v145, v112);
      _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v162, "Failed to get currentMonth for date %{public}s, timeZone: %{public}s", (uint8_t *)v102, 0x16u);
      v115 = v163;
      swift_arrayDestroy(v163, 2);
      sub_1000986F0(v115);
      sub_1000986F0(v102);

      sub_1000D9724();
      ((void (*)(char *, uint64_t))v113)(v144, v114);
    }
    else
    {

      v121 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
      v121(v94, v96);
      sub_1000D9724();
      v121(v95, v96);
    }
    sub_1000215BC(v136, type metadata accessor for MoonDetailViewState);
    v122 = v165;
    v123 = sub_1000DF744();
    sub_10009D34C(v122, v124, v125, v123);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v87, v91);
  }
  else
  {
    v116 = v155;
    sub_1000B4B5C(v155, v92);
    v117 = v151;
    sub_10003773C(v71 + *(int *)(v146 + 24), v151, (uint64_t *)&unk_100BD35A0);
    v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
    v119 = v149;
    v118(v149, v116, v91);
    sub_100088FC8(v117, 1, v91);
    if (v120)
    {
      sub_1000B4B5C(v74, v119);
      sub_100021A14(v117, (uint64_t *)&unk_100BD35A0);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v119, v91);
      sub_1000B4B5C(v74, v117);
    }
    v126 = v145;
    v127 = (uint64_t)v144;
    v128 = v137;
    v129 = v152;
    v130 = v136;
    v131 = v154;
    sub_100562B8C(v136, v87, v154, (uint64_t)v144, v152);
    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v131, v158);
    sub_1000215BC(v130, type metadata accessor for MoonDetailViewState);
    v132 = v165;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 32))(v165, v127, v126);
    v133 = (int *)sub_1000DF744();
    v118(v132 + v133[5], v87, v91);
    sub_1000B4B5C(v132 + v133[6], v155);
    sub_1000B4B5C(v132 + v133[7], v163);
    sub_10016C5F4(v129, v132 + v133[8]);
    _s7Weather24LocationCompositionStateOwst_0(v132, 0, 1, (uint64_t)v133);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v164 + 8))(v87, v91);
  }
}

uint64_t sub_1005629E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t);
  uint64_t v18;
  __n128 v19;
  double v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a1;
  v25 = a2;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents(0);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC4E50);
  v10 = type metadata accessor for Calendar.Component(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v9, v14 + 2 * v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_10097DA20;
  v16 = v15 + v14;
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104);
  v17(v16, enum case for Calendar.Component.year(_:), v10);
  v17(v16 + v12, enum case for Calendar.Component.month(_:), v10);
  v18 = sub_1000A8278(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  Calendar.dateComponents(_:from:)(v18, v5);
  v19 = swift_bridgeObjectRelease(v18);
  v20 = (*(double (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v19);
  Calendar.date(from:)(v8, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v24);
}

uint64_t sub_100562B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, uint64_t);
  uint64_t v41;
  double v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v75 = a4;
  v76 = a2;
  v82 = a3;
  v7 = type metadata accessor for TimeZone(0);
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  __chkstk_darwin(v7);
  v71 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Location(0);
  v78 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  __chkstk_darwin(v9);
  v77 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DateComponents(0);
  v80 = *(_QWORD *)(v11 - 8);
  v81 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BC6CB8);
  __chkstk_darwin(v14);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v70 - v21;
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v74 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v70 - v27;
  v29 = type metadata accessor for MoonDetailViewState(0);
  sub_10003773C(a1 + *(int *)(v29 + 20), (uint64_t)v16, &qword_100BC6CB8);
  v30 = type metadata accessor for MoonDetailSelectedDate(0);
  v31 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v30);
  v83 = a5;
  if (v31 == 1)
  {
    sub_100021A14((uint64_t)v16, &qword_100BC6CB8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 1, 1, v23);
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v28, v76, v23);
    sub_100021A14((uint64_t)v22, (uint64_t *)&unk_100BD35A0);
    goto LABEL_6;
  }
  sub_1006692BC((uint64_t)v22);
  sub_1000215BC((uint64_t)v16, type metadata accessor for MoonDetailSelectedDate);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v23);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23) == 1)
    goto LABEL_4;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v28, v22, v23);
LABEL_6:
  v32 = sub_1000BA294(&qword_100BC4E50);
  v33 = type metadata accessor for Calendar.Component(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 72);
  v36 = *(unsigned __int8 *)(v34 + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = swift_allocObject(v32, v37 + 3 * v35, v36 | 7);
  *(_OWORD *)(v38 + 16) = xmmword_10098B610;
  v39 = v38 + v37;
  v40 = *(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104);
  v40(v39, enum case for Calendar.Component.year(_:), v33);
  v40(v39 + v35, enum case for Calendar.Component.month(_:), v33);
  v40(v39 + 2 * v35, enum case for Calendar.Component.day(_:), v33);
  v41 = sub_1000A8278(v38);
  Calendar.dateComponents(_:from:)(v41, v28);
  *(_QWORD *)&v42 = swift_bridgeObjectRelease(v41).n128_u64[0];
  Calendar.date(from:)(v13, v42);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v13, v81);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v23) == 1)
  {
    sub_100021A14((uint64_t)v20, (uint64_t *)&unk_100BD35A0);
    if (qword_100BC2450 != -1)
      swift_once(&qword_100BC2450, sub_1006F3844);
    v43 = type metadata accessor for Logger(0);
    sub_1000AECD4(v43, (uint64_t)qword_100CAF0E8);
    v44 = v74;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v74, v28, v23);
    v46 = v77;
    v45 = v78;
    v47 = v79;
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v75, v79);
    v49 = Logger.logObject.getter(v48);
    v51 = static os_log_type_t.error.getter(v49, v50);
    v52 = v51;
    if (os_log_type_enabled(v49, v51))
    {
      v53 = swift_slowAlloc(22, -1);
      v82 = swift_slowAlloc(64, -1);
      v85 = v82;
      *(_DWORD *)v53 = 136446466;
      sub_100086DA4((unint64_t *)&qword_100BC52F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v81) = v52;
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v23);
      v56 = v55;
      v84 = sub_1000CE1C8(v54, v55, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
      v57 = swift_bridgeObjectRelease(v56);
      v80 = *(_QWORD *)(v24 + 8);
      v58 = ((uint64_t (*)(char *, uint64_t, __n128))v80)(v44, v23, v57);
      *(_WORD *)(v53 + 12) = 2082;
      v59 = v71;
      Location.timeZone.getter(v58);
      sub_100086DA4(&qword_100BF1168, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
      v60 = v73;
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v73);
      v63 = v62;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v59, v60);
      v84 = sub_1000CE1C8(v61, v63, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
      v64 = swift_bridgeObjectRelease(v63);
      (*(void (**)(char *, uint64_t, __n128))(v78 + 8))(v77, v79, v64);
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v81, "Failed to get selected day for date %{public}s, timeZone: %{public}s", (uint8_t *)v53, 0x16u);
      v65 = v82;
      swift_arrayDestroy(v82, 2);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      ((void (*)(char *, uint64_t))v80)(v28, v23);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
      v68 = *(void (**)(char *, uint64_t))(v24 + 8);
      v68(v44, v23);
      v68(v28, v23);
    }
    v67 = 1;
    v66 = v83;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v23);
    v66 = v83;
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v83, v20, v23);
    v67 = 0;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v66, v67, 1, v23);
}

uint64_t type metadata accessor for MoonCalendarInputFactory()
{
  return objc_opt_self(_TtC7Weather24MoonCalendarInputFactory);
}

char *sub_100563260(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v12(&a1[a3[6]], &a2[a3[6]], v11);
    v12(&a1[a3[7]], &a2[a3[7]], v11);
    v13 = a3[8];
    v14 = &a1[v13];
    v15 = &a2[v13];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v11))
    {
      v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_1005633AC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date(0);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v9(v5, v6);
  v9(a1 + a2[6], v6);
  v9(a1 + a2[7], v6);
  v7 = a1 + a2[8];
  result = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v6);
  if (!(_DWORD)result)
    return v9(v7, v6);
  return result;
}

uint64_t sub_10056348C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v11((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v10);
  v11((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v10))
  {
    v15 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1005635AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v12((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v10);
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  LODWORD(v8) = _s7Weather24LocationCompositionStateOwet_0(a1 + v13, 1, v10);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v16)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v10);
  return a1;
}

uint64_t sub_100563710(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v10);
  v11((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v10))
  {
    v15 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100563830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v12((void *)(a1 + a3[6]), (const void *)(a2 + a3[6]), v10);
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  LODWORD(v8) = _s7Weather24LocationCompositionStateOwet_0(a1 + v13, 1, v10);
  v16 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v16)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v10);
  return a1;
}

uint64_t sub_100563994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005639A0);
}

uint64_t sub_1005639A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v9 = sub_100098778();
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      v10 = *(int *)(a3 + 32);
    }
    v8 = v4 + v10;
  }
  return _s7Weather24LocationCompositionStateOwet_0(v8, v3, v7);
}

uint64_t sub_100563A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100563A2C);
}

uint64_t sub_100563A2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000988EC();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v11 = sub_100098778();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      v12 = *(int *)(a4 + 32);
    }
    v10 = v5 + v12;
  }
  return _s7Weather24LocationCompositionStateOwst_0(v10, v4, v4, v9);
}

uint64_t type metadata accessor for MoonCalendarInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF1120;
  if (!qword_100BF1120)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonCalendarInput);
  return result;
}

void sub_100563AEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for Location(319);
  if (v3 <= 0x3F)
  {
    v8 = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = v9;
      v11 = v9;
      sub_10015BB24(319);
      if (v7 <= 0x3F)
      {
        v12 = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, &v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100563BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = a3;
  v65 = a2;
  v59 = a1;
  v3 = sub_1000BA294(&qword_100BC5F60);
  v4 = __chkstk_darwin(v3);
  v64 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v66 = (uint64_t)&v58 - v6;
  v7 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v7);
  v61 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v60);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v20);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v26);
  v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v29);
  v31 = (char *)&v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v32);
  v34 = (char *)&v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v35);
  v37 = (char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AppConfigurationState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 1, 1, v38);
  v39 = type metadata accessor for EnvironmentState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 1, 1, v39);
  v40 = type metadata accessor for LocationsState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 1, 1, v40);
  v41 = type metadata accessor for NotificationsOptInState(0);
  v62 = v28;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 1, 1, v41);
  v42 = type metadata accessor for TimeState(0);
  v63 = v25;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 1, 1, v42);
  sub_100080C0C(v67 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v19, type metadata accessor for ViewState);
  *v17 = v59;
  v43 = type metadata accessor for ViewState.SecondaryViewState(0);
  swift_storeEnumTagMultiPayload(v17, v43, 0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v43);
  v44 = type metadata accessor for SearchViewState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 1, 1, v44);
  v45 = type metadata accessor for DisplayMetrics(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 1, 1, v45);
  v46 = type metadata accessor for WeatherMapPresentationState(0);
  v47 = v61;
  _s7Weather24LocationCompositionStateOwst_0(v61, 1, 1, v46);
  swift_retain();
  sub_100112494();
  sub_100021A14(v47, &qword_100BC5F68);
  sub_100021A14((uint64_t)v11, &qword_100BC5F70);
  sub_100021A14((uint64_t)v14, &qword_100BC5F78);
  v48 = (uint64_t)v17;
  v49 = (uint64_t)v64;
  sub_100021A14(v48, &qword_100BC5F80);
  sub_1000215BC((uint64_t)v19, type metadata accessor for ViewState);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v22, 0, 1, v60);
  sub_100565214(v65, v49);
  v50 = type metadata accessor for ModalViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0(v49, 1, v50) == 1)
  {
    v51 = v66;
    v52 = v67;
    sub_100080C0C(v67 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v66, type metadata accessor for ModalViewState);
    sub_100021A14(v49, &qword_100BC5F60);
  }
  else
  {
    v51 = v66;
    sub_10007802C(v49, v66, type metadata accessor for ModalViewState);
    v52 = v67;
  }
  _s7Weather24LocationCompositionStateOwst_0(v51, 0, 1, v50);
  v57 = v52;
  v53 = (uint64_t)v63;
  v54 = (uint64_t)v62;
  v55 = sub_1000DEBAC(0, 3, (uint64_t)v37, (uint64_t)v34, (uint64_t)v31, 0, 0, 0, (uint64_t)v62, (uint64_t)v63, (uint64_t)v22, v51, 0, 0, 0, 0, 0, 0, 0,
          v57);
  sub_100021A14(v51, &qword_100BC5F60);
  sub_100021A14((uint64_t)v22, &qword_100BC5F88);
  sub_100021A14(v53, &qword_100BC5F90);
  sub_100021A14(v54, &qword_100BC5F98);
  sub_100021A14((uint64_t)v31, &qword_100BC5FA0);
  sub_100021A14((uint64_t)v34, &qword_100BC5FA8);
  sub_100021A14((uint64_t)v37, &qword_100BC5FB0);
  return v55;
}

uint64_t sub_10056420C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v73 = a2;
  v74 = a5;
  v82 = a4;
  v6 = sub_1000BA294(&qword_100BC5F60);
  __chkstk_darwin(v6);
  v83 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BC5F68);
  __chkstk_darwin(v8);
  v77 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC5F70);
  __chkstk_darwin(v10);
  v79 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC5F78);
  __chkstk_darwin(v12);
  v76 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100BC5F80);
  __chkstk_darwin(v14);
  v75 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BC5F88);
  __chkstk_darwin(v16);
  v81 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BC5F90);
  __chkstk_darwin(v18);
  v80 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BC5F98);
  __chkstk_darwin(v20);
  v78 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000BA294(&qword_100BC5FA0);
  __chkstk_darwin(v22);
  v85 = (uint64_t)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294(&qword_100BC5FA8);
  __chkstk_darwin(v24);
  v84 = (uint64_t)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000BA294(&qword_100BC5FB0);
  __chkstk_darwin(v26);
  v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000BA294(&qword_100BC6000);
  __chkstk_darwin(v29);
  v31 = (char *)&v68 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for WeatherMapPresentationState(0);
  __chkstk_darwin(v72);
  v33 = (char *)&v68 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for LocationViewerViewAction(0);
  __chkstk_darwin(v34);
  v36 = (char *)&v68 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v37);
  v39 = (char *)&v68 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000BA294(qword_100BC6008);
  __chkstk_darwin(v40);
  v42 = (char *)&v68 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005649A8(v73, (uint64_t)a3, v82, (uint64_t)v42);
  v82 = a3;
  sub_100080C0C((uint64_t)a3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v39, type metadata accessor for ViewState);
  sub_100080C0C(v74, (uint64_t)v36, type metadata accessor for LocationViewerViewAction);
  if (swift_getEnumCaseMultiPayload(v36, v34) == 6)
  {
    v43 = 0;
  }
  else
  {
    v43 = v39[*(int *)(v37 + 40)];
    sub_1000215BC((uint64_t)v36, type metadata accessor for LocationViewerViewAction);
  }
  v44 = type metadata accessor for WeatherMapTrackingState(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 1, 1, v44);
  v45 = (uint64_t)v33;
  v69 = v33;
  v71 = v42;
  sub_1001514A0(v43);
  sub_100021A14((uint64_t)v31, &qword_100BC6000);
  v46 = type metadata accessor for AppConfigurationState(0);
  v70 = v28;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 1, 1, v46);
  v47 = type metadata accessor for EnvironmentState(0);
  _s7Weather24LocationCompositionStateOwst_0(v84, 1, 1, v47);
  v48 = type metadata accessor for LocationsState(0);
  _s7Weather24LocationCompositionStateOwst_0(v85, 1, 1, v48);
  v49 = type metadata accessor for NotificationsOptInState(0);
  v50 = v78;
  _s7Weather24LocationCompositionStateOwst_0(v78, 1, 1, v49);
  v51 = type metadata accessor for TimeState(0);
  v52 = v80;
  _s7Weather24LocationCompositionStateOwst_0(v80, 1, 1, v51);
  v53 = type metadata accessor for ViewState.SecondaryViewState(0);
  v54 = v75;
  _s7Weather24LocationCompositionStateOwst_0(v75, 1, 1, v53);
  v55 = type metadata accessor for SearchViewState(0);
  v56 = v76;
  _s7Weather24LocationCompositionStateOwst_0(v76, 1, 1, v55);
  v57 = type metadata accessor for DisplayMetrics(0);
  v58 = v79;
  _s7Weather24LocationCompositionStateOwst_0(v79, 1, 1, v57);
  v59 = v77;
  sub_100080C0C(v45, v77, type metadata accessor for WeatherMapPresentationState);
  _s7Weather24LocationCompositionStateOwst_0(v59, 0, 1, v72);
  v60 = (uint64_t)v81;
  sub_100112494();
  sub_100021A14(v59, &qword_100BC5F68);
  sub_100021A14(v58, &qword_100BC5F70);
  sub_100021A14(v56, &qword_100BC5F78);
  sub_100021A14(v54, &qword_100BC5F80);
  _s7Weather24LocationCompositionStateOwst_0(v60, 0, 1, v37);
  v61 = type metadata accessor for ModalViewState(0);
  v62 = v83;
  _s7Weather24LocationCompositionStateOwst_0(v83, 1, 1, v61);
  v63 = (uint64_t)v70;
  v64 = v84;
  v65 = v85;
  v66 = sub_1000DEBAC(0, 3, (uint64_t)v70, v84, v85, 0, 0, 0, v50, v52, v60, v62, 0, 0, 0, 0, 0, 0, 0,
          (uint64_t)v82);
  sub_100021A14(v62, &qword_100BC5F60);
  sub_100021A14(v60, &qword_100BC5F88);
  sub_100021A14(v52, &qword_100BC5F90);
  sub_100021A14(v50, &qword_100BC5F98);
  sub_100021A14(v65, &qword_100BC5FA0);
  sub_100021A14(v64, &qword_100BC5FA8);
  sub_100021A14(v63, &qword_100BC5FB0);
  sub_1000215BC((uint64_t)v69, type metadata accessor for WeatherMapPresentationState);
  sub_1000215BC((uint64_t)v39, type metadata accessor for ViewState);
  sub_100021A14((uint64_t)v71, qword_100BC6008);
  return v66;
}

uint64_t sub_1005649A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t active;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, unint64_t, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  char v113[32];

  v99 = a3;
  v108 = a2;
  v110 = a4;
  v5 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v5);
  v100 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC3460);
  __chkstk_darwin(v7);
  v97 = (uint64_t)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v98);
  v105 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v10);
  v104 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Location(0);
  v106 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v107 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for LocationsState(0);
  __chkstk_darwin(v101);
  v109 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000BA294(&qword_100C0B8D0);
  __chkstk_darwin(v14);
  v103 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocationModel(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v95 - v21;
  v23 = type metadata accessor for Location.Identifier(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v95 - v28;
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v32 = (char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, (uint64_t)v32, v33);
  v34 = 1;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v23) != 1)
  {
    v95 = v16;
    v96 = v22;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v32, v23);
    v35 = v108;
    v36 = (uint64_t)v109;
    sub_100080C0C(v108 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)v109, type metadata accessor for LocationsState);
    static CurrentLocation.placeholderIdentifier.getter();
    v37 = static Location.Identifier.== infix(_:_:)(v29, v27);
    v111 = *(void (**)(char *, uint64_t))(v24 + 8);
    v111(v27, v23);
    v112 = v23;
    if ((v37 & 1) != 0)
    {
      v38 = sub_1000BA294(&qword_100BC3488);
      v39 = (uint64_t)v103;
      v40 = &v103[*(int *)(v38 + 48)];
      v41 = type metadata accessor for CurrentLocation(0);
      swift_storeEnumTagMultiPayload(v39, v41, 3);
      v42 = type metadata accessor for LocationOfInterest(0);
      v43 = (uint64_t)v40;
      v44 = v39;
      _s7Weather24LocationCompositionStateOwst_0(v43, 1, 1, v42);
      v45 = v95;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v39, enum case for LocationModel.current(_:), v95);
      _s7Weather24LocationCompositionStateOwst_0(v39, 0, 1, v45);
      v46 = v106;
      v47 = v107;
      v48 = (uint64_t)v104;
      v49 = (uint64_t)v105;
      v50 = v96;
    }
    else
    {
      v51 = *(_QWORD *)(v36 + *(int *)(v101 + 24));
      v52 = *(_QWORD *)(v51 + 16);
      v101 = v51;
      v53 = v29;
      if (v52)
      {
        v54 = v51 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
        v55 = *(_QWORD *)(v17 + 72);
        v56 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v17 + 16);
        v57 = swift_bridgeObjectRetain(v51);
        v45 = v95;
        while (1)
        {
          v58 = v56(v20, v54, v45, v57);
          LocationModel.identifier.getter(v58);
          v59 = static Location.Identifier.== infix(_:_:)(v27, v53);
          v111(v27, v112);
          if ((v59 & 1) != 0)
            break;
          (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v45);
          v54 += v55;
          if (!--v52)
            goto LABEL_10;
        }
        v44 = (uint64_t)v103;
        (*(void (**)(void))(v17 + 32))();
        v60 = v44;
        v61 = 0;
      }
      else
      {
        swift_bridgeObjectRetain(v51);
        v45 = v95;
LABEL_10:
        v44 = (uint64_t)v103;
        v60 = (uint64_t)v103;
        v61 = 1;
      }
      _s7Weather24LocationCompositionStateOwst_0(v60, v61, 1, v45);
      swift_bridgeObjectRelease(v101);
      v49 = (uint64_t)v105;
      v46 = v106;
      v47 = v107;
      v35 = v108;
      v50 = v96;
      v29 = v53;
      v48 = (uint64_t)v104;
    }
    sub_1000215BC((uint64_t)v109, type metadata accessor for LocationsState);
    if (_s7Weather24LocationCompositionStateOwet_0(v44, 1, v45) == 1)
    {
      v111(v29, v112);
      v62 = &qword_100C0B8D0;
      v63 = v44;
LABEL_17:
      sub_100021A14(v63, v62);
LABEL_18:
      v34 = 1;
      goto LABEL_19;
    }
    v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32))(v50, v44, v45);
    LocationModel.location.getter(v64);
    v65 = v102;
    if (_s7Weather24LocationCompositionStateOwet_0(v48, 1, v102) == 1)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v50, v45);
      v111(v29, v112);
      v62 = &qword_100BC35F8;
      v63 = v48;
      goto LABEL_17;
    }
    v109 = v29;
    v68 = v48;
    v69 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v47, v68, v65);
    v70 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
    if (*(unsigned __int8 *)(v35 + *(int *)(type metadata accessor for ViewState(0) + 40) + v70 + 1) != 128)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v65);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v50, v45);
      v111(v109, v112);
      goto LABEL_18;
    }
    v71 = v35;
    v72 = *(_QWORD *)(v35 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    swift_bridgeObjectRetain(v72);
    v74 = Location.id.getter(v73);
    v76 = v75;
    v77 = (uint64_t)v100;
    sub_1000EED10(v74, v75, v72);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v72);
    v78 = type metadata accessor for LocationWeatherDataState(0);
    if (_s7Weather24LocationCompositionStateOwet_0(v77, 1, v78) == 1)
    {
      sub_100021A14(v77, &qword_100BC3380);
      v79 = v97;
      _s7Weather24LocationCompositionStateOwst_0(v97, 1, 1, v98);
      v80 = v99;
    }
    else
    {
      v81 = v77;
      v82 = v71;
      v79 = v97;
      sub_1000EADE8();
      sub_1000215BC(v81, type metadata accessor for LocationWeatherDataState);
      v83 = v98;
      v84 = _s7Weather24LocationCompositionStateOwet_0(v79, 1, v98);
      v80 = v99;
      if (v84 != 1)
      {
        sub_10007802C(v79, v49, type metadata accessor for WeatherData);
        v86 = v83;
        v87 = v82 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
        swift_beginAccess(v82 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v113, 0, 0);
        v88 = *(_BYTE *)(v87 + 2) == 4;
        sub_1000DB418(v80 + 7, v80[10]);
        v89 = sub_100023644(v49, v88);
        v90 = v69;
        v92 = v91;
        sub_1000DB418(v80 + 12, v80[15]);
        v93 = v90;
        v94 = (uint64_t)v109;
        sub_10005886C(v49 + *(int *)(v86 + 24), (uint64_t)v89, v92, (uint64_t)v109, v93);
        swift_bridgeObjectRelease(v92);
        swift_bridgeObjectRelease(v89);
        sub_1000215BC(v49, type metadata accessor for WeatherData);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v107, v102);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v96, v45);
        v85 = v94;
        goto LABEL_27;
      }
    }
    sub_100021A14(v79, &qword_100BC3460);
    sub_1000DB418(v80 + 12, v80[15]);
    sub_1000198FC(v69);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v107, v102);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v96, v45);
    v85 = (uint64_t)v109;
LABEL_27:
    v111((char *)v85, v112);
    v34 = 0;
  }
LABEL_19:
  v66 = type metadata accessor for WeatherMapOverlayKind(0);
  return _s7Weather24LocationCompositionStateOwst_0(v110, v34, 1, v66);
}

uint64_t sub_100565214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC5F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056525C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v89 = v3;
  sub_1000BA294(&qword_100BC5F68);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v87 = v5;
  sub_1000BA294(&qword_100BC5F70);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v86 = v7;
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v85 = v9;
  sub_1000BA294(&qword_100BC5F80);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = (uint64_t *)(v12 - v11);
  v88 = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v83 = v15;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v84 = v17;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100098728();
  v21 = v20 - v19;
  v77 = v20 - v19;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100098728();
  v25 = v24 - v23;
  v78 = v24 - v23;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100098728();
  v29 = v28 - v27;
  v79 = v28 - v27;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100098728();
  v33 = v32 - v31;
  v80 = v32 - v31;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100098728();
  v37 = v36 - v35;
  v82 = v36 - v35;
  v81 = a1;
  v38 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  v39 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view);
  swift_retain();
  sub_10055E36C(0, 256, 2, 3, 0, 0, 0, 1, 2, 0, 0, 0, 2, v39);
  swift_release();
  v40 = sub_10056579C(a1);
  v41 = type metadata accessor for AppConfigurationState(0);
  v44 = sub_1000BA2E8(v37, v42, v43, v41);
  v45 = type metadata accessor for EnvironmentState(v44);
  v48 = sub_1000BA2E8(v33, v46, v47, v45);
  v49 = type metadata accessor for LocationsState(v48);
  v52 = sub_1000BA2E8(v29, v50, v51, v49);
  v53 = type metadata accessor for NotificationsOptInState(v52);
  v56 = sub_1000BA2E8(v25, v54, v55, v53);
  v57 = type metadata accessor for TimeState(v56);
  sub_10009D34C(v21, v58, v59, v57);
  sub_100084050(v38, v83, type metadata accessor for ViewState);
  *v13 = v40;
  v60 = type metadata accessor for ViewState.SecondaryViewState(0);
  swift_storeEnumTagMultiPayload(v13, v60, 0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v60);
  v61 = type metadata accessor for SearchViewState(0);
  v64 = sub_1000BA2E8(v85, v62, v63, v61);
  v65 = type metadata accessor for DisplayMetrics(v64);
  v68 = sub_1000BA2E8(v86, v66, v67, v65);
  v69 = type metadata accessor for WeatherMapPresentationState(v68);
  sub_10009D34C(v87, v70, v71, v69);
  swift_retain();
  swift_retain();
  sub_100112494();
  swift_release();
  sub_100021A14(v87, &qword_100BC5F68);
  sub_100021A14(v86, &qword_100BC5F70);
  sub_100021A14(v85, &qword_100BC5F78);
  sub_100021A14((uint64_t)v13, &qword_100BC5F80);
  sub_1000215BC(v83, type metadata accessor for ViewState);
  _s7Weather24LocationCompositionStateOwst_0(v84, 0, 1, v88);
  v72 = type metadata accessor for ModalViewState(0);
  sub_10009D34C(v89, v73, v74, v72);
  v75 = sub_1000DEBAC(0, 3, v82, v80, v79, 0, 0, 0, v78, v77, v84, v89, 0, 0, 0, 0, 0, 0, 0, v81);
  swift_release();
  swift_release();
  sub_100021A14(v89, &qword_100BC5F60);
  sub_100021A14(v84, &qword_100BC5F88);
  sub_100021A14(v77, &qword_100BC5F90);
  sub_100021A14(v78, &qword_100BC5F98);
  sub_100021A14(v79, &qword_100BC5FA0);
  sub_100021A14(v80, &qword_100BC5FA8);
  sub_100021A14(v82, &qword_100BC5FB0);
  return v75;
}

uint64_t sub_10056579C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t active;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = sub_1000BA294(&qword_100BC5F40);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100084050(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v13, type metadata accessor for ViewState);
  sub_100084050((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v10, type metadata accessor for ViewState.SecondaryViewState);
  sub_1000215BC((uint64_t)v13, type metadata accessor for ViewState);
  if (swift_getEnumCaseMultiPayload(v10) == 1)
  {
    sub_1000215BC((uint64_t)v10, type metadata accessor for ViewState.SecondaryViewState);
    v14 = type metadata accessor for Location.Identifier(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 1, 1, v14);
    v15 = type metadata accessor for LocationViewerViewState._Storage(0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    sub_100133204((uint64_t)v7, 0, 0, 2, 0, 0);
    return v16;
  }
  else
  {
    v18 = *v10;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v4, 1, 1, active);
    sub_100023164((uint64_t)v4, 3, 2, 2, 2, 3, v18);
    v17 = v19;
    swift_release();
    sub_100021A14((uint64_t)v4, &qword_100BC5F40);
  }
  return v17;
}

void sub_1005659E0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController____lazy_storage___dateFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController____lazy_storage___dateFormatter);
  if (!v2)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    sub_1000BD398(v3, "setDateStyle:");
    sub_1000BD398(v3, "setTimeStyle:");
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v5 = v3;

    v2 = 0;
  }
  v6 = v2;
  sub_100079F70();
}

char *sub_100565A68(uint64_t a1, _QWORD *a2)
{
  char *v2;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  objc_super v18;

  *(_QWORD *)&v2[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController____lazy_storage___dateFormatter] = 0;
  v5 = OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_mapView;
  v6 = objc_allocWithZone((Class)MKMapView);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  v8 = &v7[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_alert];
  v10 = type metadata accessor for WeatherAlertEntity(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a1, v10);
  v12 = _swiftEmptyArrayStorage;
  if (a2)
    v12 = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_notifications] = v12;

  v18.receiver = v7;
  v18.super_class = (Class)sub_1000C6074();
  v13 = (char *)objc_msgSendSuper2(&v18, "initWithStyle:", 2);
  v14 = *(void **)&v13[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_mapView];
  v15 = v13;
  v16 = sub_1000D9734((uint64_t)objc_msgSend(v14, "setDelegate:", v15), "setScrollEnabled:");
  sub_1000D9734((uint64_t)v16, "setZoomEnabled:");

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v15;
}

void sub_100565BA8()
{
  char *v0;
  uint64_t v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController____lazy_storage___dateFormatter] = 0;
  v1 = OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_mapView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)MKMapView), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x706F2D6F6ELL, 0xE500000000000000, "Weather/DebugIncomingWeatherAlertViewController.swift", 53, 2);
  __break(1u);
}

id sub_100565C48()
{
  char *v0;
  uint64_t v1;
  char *v2;
  id result;
  void *v4;
  unint64_t v5;
  NSString v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  objc_super v18;

  v2 = v0;
  v18.receiver = v0;
  v18.super_class = (Class)sub_1000C6074();
  objc_msgSendSuper2(&v18, "viewDidLoad");
  result = objc_msgSend(v0, "tableView");
  if (result)
  {
    v4 = result;
    v5 = sub_1003E9A38();
    swift_getObjCClassFromMetadata(v5);
    v6 = sub_1000C2938();
    objc_msgSend(v4, "registerClass:forCellReuseIdentifier:", v1, v6);

    sub_1000B2FC4();
    sub_1001207F8(0xD000000000000016, v7, v2);
    v8 = (_QWORD *)WeatherAlertEntity.boundingBox.getter();
    v9 = *(void **)&v2[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_mapView];
    v10 = sub_100516E10(v8);
    objc_msgSend(v9, "addOverlay:", v10);

    v11 = Array<A>.maxLatitude.getter(v8);
    v12 = (v11 - Array<A>.minLatitude.getter(v8)) * 1.5;
    v13 = Array<A>.maxLongitude.getter(v8);
    v14 = (v13 - Array<A>.minLongitude.getter(v8)) * 1.5;
    v15 = Array<A>.center.getter(v8);
    v17 = v16;
    sub_1000986C4();
    return objc_msgSend(v9, "setRegion:animated:", 0, v15, v17, v12, v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100565E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!a2)
    return 5;
  if (a2 == 2)
    return *(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_notifications)
                     + 16);
  return a2 == 1;
}

uint64_t sub_100565E5C(uint64_t a1, unint64_t a2)
{
  if (a2 > 2)
    return 0;
  else
    return *(_QWORD *)&aAlert_1[8 * a2];
}

void sub_100565ED0()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for SevereNotificationEntity(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (IndexPath.section.getter(v4) != 2)
    return;
  v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_notifications];
  v9 = IndexPath.row.getter(v7);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9 >= *(_QWORD *)(v8 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v9, v2);
  v10 = objc_allocWithZone((Class)type metadata accessor for DebugSevereNotificationViewController(0));
  v11 = (void *)sub_1003E8D54((uint64_t)v6);
  v12 = objc_msgSend(v1, "navigationController");
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, "pushViewController:animated:", v11, 1);

    v11 = v13;
  }

}

id sub_1005660A0()
{
  void *v0;
  NSString v1;
  Class isa;
  id v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v1 = sub_1000C2938();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(v0, "dequeueReusableCellWithIdentifier:forIndexPath:", v1, isa);

  objc_msgSend(v3, "setAccessoryType:", 0);
  if (IndexPath.section.getter(v4))
  {
    if (IndexPath.section.getter(v5) == 1)
    {
      sub_1005666F0(v3);
    }
    else if (IndexPath.section.getter(v6) == 2)
    {
      sub_100566778(v3);
    }
  }
  else
  {
    sub_100566328();
  }
  return v3;
}

CGFloat sub_100566230()
{
  uint64_t v0;
  CGFloat result;

  v0 = IndexPath.section.getter();
  result = UITableViewAutomaticDimension;
  if (v0 == 1)
    return 400.0;
  return result;
}

void sub_100566328()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  __n128 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  Class isa;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];

  v1 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v1);
  sub_100094EC4();
  v2 = type metadata accessor for UIListContentConfiguration(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100079FBC();
  static UIListContentConfiguration.valueCell()(v4);
  if (!IndexPath.row.getter(v5))
  {
    v9 = sub_1000BA734();
    WeatherAlertEntity.id.getter(v9);
    goto LABEL_7;
  }
  if (IndexPath.row.getter(v6) == 1)
  {
    sub_1000B2FC4();
    v8 = sub_1000BA734();
    WeatherAlertEntity.alertIdentifier.getter(v8);
LABEL_7:
    dispatch thunk of Column.value.getter(v41);
    sub_10009880C();
LABEL_8:
    v12 = v41[0];
LABEL_9:
    UIListContentConfiguration.secondaryText.setter(v12);
LABEL_10:
    v41[3] = v2;
    v41[4] = &protocol witness table for UIListContentConfiguration;
    v13 = sub_10005F164(v41);
    sub_1000999F8((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    v14 = UITableViewCell.contentConfiguration.setter(v41);
    v15 = sub_1000DB984(v14, "setSelectionStyle:");
    sub_1000DB984((uint64_t)v15, "setAccessoryType:");
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_100098640();
    return;
  }
  if (IndexPath.row.getter(v7) == 2)
  {
    sub_1000B2FC4();
    v11 = sub_1000BA734();
    WeatherAlertEntity.channelIdentifier.getter(v11);
    goto LABEL_7;
  }
  if (IndexPath.row.getter(v10) != 3)
  {
    if (IndexPath.row.getter(v16) != 4)
      goto LABEL_10;
    v23 = sub_1000BA734();
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    v24 = WeatherAlertEntity.boundingBox.getter(v23);
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v39 = v3;
      v40 = v24;
      sub_10009AAB0();
      v26 = v40;
      v27 = 0;
      do
      {
        v28 = Double.description.getter(*(double *)(v26 + 8 * v27 + 32));
        v30 = v29;
        v31 = _swiftEmptyArrayStorage[2];
        if (v31 >= _swiftEmptyArrayStorage[3] >> 1)
        {
          sub_10009AAB0();
          v26 = v40;
        }
        ++v27;
        _swiftEmptyArrayStorage[2] = v31 + 1;
        v32 = &_swiftEmptyArrayStorage[2 * v31];
        v32[4] = v28;
        v32[5] = v30;
      }
      while (v25 != v27);
      sub_1000986C4();
      v3 = v39;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v33 = sub_1000BA294(&qword_100BF1280);
    v34 = sub_1000B2E60();
    v35 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v33, v34);
    v37 = v36;
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1000BA734();
  sub_1005659E0();
  v18 = v17;
  WeatherAlertEntity.created.getter();
  dispatch thunk of Column.value.getter(v0);
  sub_10009880C();
  v19 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v0, 1, v19) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8));
    v21 = objc_msgSend(v18, "stringFromDate:", isa);

    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v12 = v22;
    goto LABEL_9;
  }
  __break(1u);
}

void sub_1005666F0(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_mapView);
  objc_msgSend(a1, "bounds");
  objc_msgSend(v3, "setFrame:", 0.0, 0.0);
  v4 = objc_msgSend(a1, "contentView");
  sub_1000CC90C(v4, "addSubview:");

}

void sub_100566778(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  Class isa;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  void (*v30)(uint64_t *, _QWORD);
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38[2];

  v33 = a1;
  v3 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v3);
  v5 = (void **)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for UIListContentConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100079FBC();
  v8 = type metadata accessor for SevereNotificationEntity(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100094EC4();
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Weather39DebugIncomingWeatherAlertViewController_notifications);
  v12 = IndexPath.row.getter(v11);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v12 >= *(_QWORD *)(v10 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v2, v10+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v12, v8);
  v14 = static UIListContentConfiguration.subtitleCell()(v13);
  SevereNotificationEntity.id.getter(v14);
  dispatch thunk of Column.value.getter(&v34);
  sub_10009880C();
  sub_1000BA734();
  UIListContentConfiguration.textProperties.modify(&v34);
  UIListContentConfiguration.TextProperties.adjustsFontSizeToFitWidth.setter(1);
  sub_100098D88();
  UIListContentConfiguration.textProperties.modify(&v34);
  UIListContentConfiguration.TextProperties.numberOfLines.setter(1);
  sub_100098D88();
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v34 = 0x203A65746144;
  v35 = 0xE600000000000000;
  sub_1005659E0();
  v16 = v15;
  SevereNotificationEntity.date.getter();
  dispatch thunk of Column.value.getter(v5);
  sub_10009880C();
  v17 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v5, 1, v17) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v5, v17);
    v19 = objc_msgSend(v16, "stringFromDate:", isa);

    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    sub_1000B2FC4();
    v24._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v24);
    SevereNotificationEntity.subscription.getter(v25);
    dispatch thunk of Column.value.getter(v38);
    sub_10009880C();
    v26 = sub_1004907AC(v38[0], v38[1]);
    v28 = v27;
    sub_1000986C4();
    v29._countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    UIListContentConfiguration.secondaryText.setter(v34);
    v30 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify(&v34);
    UIListContentConfiguration.TextProperties.numberOfLines.setter(0);
    v30(&v34, 0);
    v36 = v6;
    v37 = &protocol witness table for UIListContentConfiguration;
    v31 = sub_10005F164(&v34);
    sub_1000999F8((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    v32 = v33;
    UITableViewCell.contentConfiguration.setter(&v34);
    sub_1000BD398(v32, "setAccessoryType:");
    sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    sub_10009171C(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    sub_100098640();
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_100566AB4()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugIncomingWeatherAlertViewController", 47, "init(style:)", 12, 0);
  __break(1u);
}

void sub_100566AEC()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.DebugIncomingWeatherAlertViewController", 47, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_100566B3C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1000C6074();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DebugIncomingWeatherAlertViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF1268;
  if (!qword_100BF1268)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugIncomingWeatherAlertViewController);
  return result;
}

uint64_t sub_100566C14(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for WeatherAlertEntity(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[2] = "\b";
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100566CA4(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v2 = objc_msgSend(objc_allocWithZone((Class)MKPolygonRenderer), "initWithOverlay:", a2);
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v2;
  v5 = objc_msgSend(v3, "grayColor");
  sub_1000CC90C(v4, "setStrokeColor:");

  v6 = v4;
  v7 = objc_msgSend(v6, "strokeColor");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "colorWithAlphaComponent:", 0.2);

  }
  else
  {
    v9 = 0;
  }
  sub_1000CC90C(v6, "setFillColor:");

  objc_msgSend(v6, "setLineWidth:", 1.0);
  sub_100079F70();
}

uint64_t storeEnumTagSinglePayload for AddLocationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100566E58 + 4 * byte_1009AF8F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100566E8C + 4 * byte_1009AF8F0[v4]))();
}

uint64_t sub_100566E8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100566E94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100566E9CLL);
  return result;
}

uint64_t sub_100566EA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100566EB0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100566EB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100566EBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddLocationContext()
{
  return &type metadata for AddLocationContext;
}

uint64_t *sub_100566ED8(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != (uint64_t *)a2)
  {
    sub_10056710C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2))
    {
      case 0u:
        v6 = type metadata accessor for CurrentLocation(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
        if (EnumCaseMultiPayload == 2)
        {
          v20 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
          v9 = a1;
          v10 = v6;
          v11 = 2;
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v21 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
          v9 = a1;
          v10 = v6;
          v11 = 1;
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
            goto LABEL_16;
          }
          v8 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
          v9 = a1;
          v10 = v6;
          v11 = 0;
        }
        swift_storeEnumTagMultiPayload(v9, v10, v11);
LABEL_16:
        v14 = a1;
        v15 = a3;
        v16 = 0;
        goto LABEL_17;
      case 1u:
        v12 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = sub_1000BA294(&qword_100BDEBF8);
        *((_BYTE *)a1 + *(int *)(v13 + 48)) = a2[*(int *)(v13 + 48)];
        v14 = a1;
        v15 = a3;
        v16 = 1;
        goto LABEL_17;
      case 2u:
        *a1 = *(_QWORD *)a2;
        a1[1] = *((_QWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14 = a1;
        v15 = a3;
        v16 = 2;
        goto LABEL_17;
      case 5u:
        *a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        v14 = a1;
        v15 = a3;
        v16 = 5;
        goto LABEL_17;
      case 6u:
        v17 = *(_QWORD *)a2;
        v18 = *((_QWORD *)a2 + 1);
        v19 = a2[16];
        sub_100163980(v17, v18, v19);
        *a1 = v17;
        a1[1] = v18;
        *((_BYTE *)a1 + 16) = v19;
        v14 = a1;
        v15 = a3;
        v16 = 6;
LABEL_17:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        return a1;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t sub_10056710C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationsAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *sub_100567148(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v13 = type metadata accessor for Location(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
    v14 = sub_1000BA294(&qword_100BDEBF8);
    a1[*(int *)(v14 + 48)] = a2[*(int *)(v14 + 48)];
    v15 = a1;
    v16 = a3;
    v17 = 1;
LABEL_14:
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for CurrentLocation(0);
    v8 = swift_getEnumCaseMultiPayload(a2);
    if (v8 == 2)
    {
      v18 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
      v10 = a1;
      v11 = v7;
      v12 = 2;
    }
    else if (v8 == 1)
    {
      v19 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      if (v8)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_13;
      }
      v9 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
LABEL_13:
    v15 = a1;
    v16 = a3;
    v17 = 0;
    goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_BYTE *sub_1005672D4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_10056710C((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v14 = sub_1000BA294(&qword_100BDEBF8);
      a1[*(int *)(v14 + 48)] = a2[*(int *)(v14 + 48)];
      v15 = a1;
      v16 = a3;
      v17 = 1;
LABEL_15:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for CurrentLocation(0);
      v8 = swift_getEnumCaseMultiPayload(a2);
      if (v8 == 2)
      {
        v18 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
        v10 = a1;
        v11 = v7;
        v12 = 2;
      }
      else if (v8 == 1)
      {
        v19 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
        v10 = a1;
        v11 = v7;
        v12 = 1;
      }
      else
      {
        if (v8)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          goto LABEL_14;
        }
        v9 = type metadata accessor for Location(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        v10 = a1;
        v11 = v7;
        v12 = 0;
      }
      swift_storeEnumTagMultiPayload(v10, v11, v12);
LABEL_14:
      v15 = a1;
      v16 = a3;
      v17 = 0;
      goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_100567470(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_100567494(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100A0A8A0)
  {
    swift_bridgeObjectRelease(0x8000000100A0A8A0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100A0A8A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_100567518()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100567534(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = sub_1000BA294(&qword_100BF1348);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_1000DB418(a1, v8);
  v10 = sub_1005678AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AddLocationContext.CodingKeys, &type metadata for AddLocationContext.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int sub_100567614(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_100567658(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000BA294(&qword_100BF1338);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_1000DB418(a1, v7);
  v10 = sub_1005678AC();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AddLocationContext.CodingKeys, &type metadata for AddLocationContext.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v9 & 1;
}

uint64_t sub_100567760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100567494(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100567788(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005678AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005677B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005678AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1005677D8()
{
  char *v0;

  return sub_100567614(*v0);
}

void sub_1005677E0(uint64_t a1)
{
  char *v1;

  sub_100567470(a1, *v1);
}

Swift::Int sub_1005677E8()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100567828@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100567658(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_100567854(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_100567534(a1, *v1);
}

unint64_t sub_100567870()
{
  unint64_t result;

  result = qword_100BF1330;
  if (!qword_100BF1330)
  {
    result = swift_getWitnessTable(&unk_1009AFA38, &type metadata for AddLocationContext);
    atomic_store(result, (unint64_t *)&qword_100BF1330);
  }
  return result;
}

unint64_t sub_1005678AC()
{
  unint64_t result;

  result = qword_100BF1340;
  if (!qword_100BF1340)
  {
    result = swift_getWitnessTable(&unk_1009AFB24, &type metadata for AddLocationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1340);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AddLocationContext.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100567928 + 4 * byte_1009AF916[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100567948 + 4 * byte_1009AF91B[v4]))();
}

_BYTE *sub_100567928(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100567948(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100567950(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100567958(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100567960(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100567968(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AddLocationContext.CodingKeys()
{
  return &type metadata for AddLocationContext.CodingKeys;
}

unint64_t sub_100567988()
{
  unint64_t result;

  result = qword_100BF1350;
  if (!qword_100BF1350)
  {
    result = swift_getWitnessTable(&unk_1009AFAFC, &type metadata for AddLocationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1350);
  }
  return result;
}

unint64_t sub_1005679C8()
{
  unint64_t result;

  result = qword_100BF1358;
  if (!qword_100BF1358)
  {
    result = swift_getWitnessTable(&unk_1009AFA6C, &type metadata for AddLocationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1358);
  }
  return result;
}

unint64_t sub_100567A08()
{
  unint64_t result;

  result = qword_100BF1360;
  if (!qword_100BF1360)
  {
    result = swift_getWitnessTable(&unk_1009AFA94, &type metadata for AddLocationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1360);
  }
  return result;
}

uint64_t ReportWeatherMonitor.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for LocationRowPreviewViewController(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF1428, (uint64_t)&nominal type descriptor for LocationRowPreviewViewController);
}

uint64_t sub_100567A60(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = &unk_1009AFCB8;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + qword_100CAED30);
}

uint64_t sub_100567AB8()
{
  uint64_t v0;
  uint64_t KeyPath;

  swift_getKeyPath(&unk_1009AFE00);
  KeyPath = swift_getKeyPath(&unk_1009AFE28);
  sub_1000BA754(KeyPath);
  swift_release();
  return sub_1000DDCD0(v0);
}

uint64_t sub_100567B0C()
{
  uint64_t v0;
  uint64_t KeyPath;

  swift_getKeyPath(&unk_1009AFE00);
  KeyPath = swift_getKeyPath(&unk_1009AFE28);
  sub_1000BA754(KeyPath);
  swift_release();
  return sub_1000DDCD0(v0);
}

void sub_100567B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);

  sub_1000986AC();
  a19 = v22;
  a20 = v23;
  sub_1000D18F0();
  sub_1000C6D9C();
  __chkstk_darwin(v24);
  sub_10003BC68();
  __chkstk_darwin(v25);
  v27 = (char *)&a9 - v26;
  v28 = type metadata accessor for Location(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_100098728();
  v32 = v31 - v30;
  sub_1000DAF84((uint64_t)v27);
  v33 = sub_1000B3154();
  if (v34(v33) == enum case for WeatherMapPreviewLocationState.loaded(_:))
  {
    v35 = sub_1000B3154();
    v36(v35);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v32, v27, v28);
    sub_10091CCE8(v32);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v32, v28);
  }
  else
  {
    v37 = sub_1000B3154();
    v39(v37, v38);
  }
  sub_1000DAF84(v20);
  sub_100567C80(v20);
  sub_1000BF1A0(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  sub_100098640();
}

uint64_t sub_100567C80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;

  v3 = sub_1000D18F0();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100098728();
  v7 = v6 - v5;
  KeyPath = swift_getKeyPath(&unk_1009AFE00);
  v9 = swift_getKeyPath(&unk_1009AFE28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  swift_retain();
  static Published.subscript.setter(v7, v1, KeyPath, v9);
  return sub_1000BF1A0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

#error "100567D6C: call analysis failed (funcsize=30)"

void sub_100567DC4(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100567D3C(a3);
}

id sub_100567DDC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  objc_super v14;

  v14.receiver = v0;
  v14.super_class = (Class)sub_10009D408();
  sub_10009C9AC((uint64_t)v14.super_class, "viewWillLayoutSubviews", v1, v2, v3, v4, v5, v6, v14);
  result = sub_1000D1F08();
  if (result)
  {
    v8 = result;
    objc_msgSend(result, "sizeToFit");

    result = sub_1000D1F08();
    if (result)
    {
      v9 = result;
      objc_msgSend(result, "frame");
      v11 = v10;
      v13 = v12;

      return objc_msgSend(v0, "setPreferredContentSize:", v11, v13);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100567E94(void *a1)
{
  id v1;

  v1 = a1;
  sub_100567DDC();

}

void sub_100567EC8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  objc_super v10;

  v10.receiver = v0;
  v10.super_class = (Class)sub_10009D408();
  sub_10009C9AC((uint64_t)v10.super_class, "viewDidLoad", v1, v2, v3, v4, v5, v6, v10);
  v7 = objc_msgSend(v0, "view");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v8, "setBackgroundColor:", v9);

  }
  else
  {
    __break(1u);
  }
}

void sub_100567F60(void *a1)
{
  id v1;

  v1 = a1;
  sub_100567EC8();

}

void sub_100567F94()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.LocationRowPreviewViewController", 40, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_100567FC0()
{
  _swift_stdlib_reportUnimplementedInitializer("Weather.LocationRowPreviewViewController", 40, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_100567FEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_100BF1410));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + qword_100BF1418));
  return swift_release(*(_QWORD *)(v0 + qword_100BF1420));
}

id sub_100568028()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)sub_10009D408();
  return sub_10009C9AC((uint64_t)v8.super_class, "dealloc", v1, v2, v3, v4, v5, v6, v8);
}

uint64_t sub_100568054(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + qword_100BF1410));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + qword_100BF1418));
  return swift_release(*(_QWORD *)(a1 + qword_100BF1420));
}

uint64_t sub_10056809C()
{
  return type metadata accessor for LocationRowPreviewViewController(0);
}

uint64_t (*sub_1005680AC(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for WeatherMapPreviewLocationState(0);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  sub_100567AB8();
  return sub_10056812C;
}

#error "10056818C: call analysis failed (funcsize=35)"

uint64_t sub_1005681B8(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for WeatherMapPreviewLocationState(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return sub_100567C80((uint64_t)v5);
}

uint64_t sub_100568238()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000BA294(&qword_100BF15E8);
  sub_10003BC44(v1);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10056827C()
{
  return type metadata accessor for LocationStateObservable(0);
}

uint64_t type metadata accessor for LocationStateObservable(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF14A8, (uint64_t)&nominal type descriptor for LocationStateObservable);
}

void sub_100568298(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100568304(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_100568304(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BF14B8)
  {
    v2 = type metadata accessor for WeatherMapPreviewLocationState(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BF14B8);
  }
}

uint64_t destroy for LocationRowPreview(_QWORD *a1)
{
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 5);
  swift_unknownObjectRelease(a1[10]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 12);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 17);
}

uint64_t initializeWithCopy for LocationRowPreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  __int128 v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2 + 40;
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v8 - 8);
  swift_retain(v4);
  v11 = swift_retain(v6);
  v10(a1 + 40, v7, v9, v11);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v12;
  v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v13;
  v14 = v13;
  v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  swift_unknownObjectRetain(v12);
  v15(a1 + 96, a2 + 96, v14);
  v16 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 136, a2 + 136);
  return a1;
}

_QWORD *assignWithCopy for LocationRowPreview(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  sub_100094D04(a1 + 5, a2 + 5);
  v4 = a2[10];
  v5 = a2[11];
  v6 = a1[10];
  a1[10] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[11] = v5;
  sub_100094D04(a1 + 12, a2 + 12);
  sub_100094D04(a1 + 17, a2 + 17);
  return a1;
}

void *initializeWithTake for LocationRowPreview(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

uint64_t assignWithTake for LocationRowPreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_unknownObjectRelease(v7);
  *(_QWORD *)(a1 + 88) = v6;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 96));
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationRowPreview(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 176))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationRowPreview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationRowPreview()
{
  return &type metadata for LocationRowPreview;
}

uint64_t sub_1005686BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9648, 1);
}

void sub_1005686CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  sub_1000986AC();
  a19 = v24;
  a20 = v25;
  v26 = sub_1000BA294(&qword_100BF15E8);
  sub_1000C6D9C();
  __chkstk_darwin(v27);
  sub_100099864();
  v28 = sub_1000D18F0();
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_10003BC68();
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&a9 - v32;
  v34 = v20 + OBJC_IVAR____TtC7Weather23LocationStateObservable__locationState;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v29 + 104))((char *)&a9 - v32, enum case for WeatherMapPreviewLocationState.loading(_:), v28, v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v22, v33, v28);
  Published.init(initialValue:)(v22, v28);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v34, v21, v26);
  sub_100098640();
}

void sub_1005687C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void (__swiftcall **v60)();
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t active;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  __int128 v126[3];

  sub_1000986AC();
  v4 = v0;
  v119 = v5;
  active = type metadata accessor for ActiveLocationModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v101 = v7;
  __chkstk_darwin(v8);
  v10 = sub_1000987B4((uint64_t)&v99 - v9);
  type metadata accessor for ListLocationViewModel(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v13 = sub_1000987B4(v12);
  v14 = (int *)type metadata accessor for ListLocationRowView(v13);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100099234();
  v104 = sub_1000BA294(&qword_100BF1540);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v106 = v17;
  v108 = sub_1000BA294(&qword_100BF1548);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_1000986FC();
  v105 = v19;
  __chkstk_darwin(v20);
  v22 = sub_1000987B4((uint64_t)&v99 - v21);
  v23 = type metadata accessor for Location(v22);
  v116 = *(_QWORD *)(v23 - 8);
  v117 = v23;
  __chkstk_darwin(v23);
  sub_100088FDC();
  v115 = v24;
  v113 = sub_1000BA294(&qword_100BF1550);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v114 = v26;
  v110 = sub_1000BA294(&qword_100BF1558);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v111 = v28;
  v118 = sub_1000BA294(&qword_100BF1560);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100088FDC();
  v112 = v30;
  v109 = sub_1000BA294(&qword_100BF1568);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100098728();
  v34 = v33 - v32;
  v35 = sub_1000D18F0();
  sub_1000C6D9C();
  __chkstk_darwin(v36);
  sub_100099864();
  KeyPath = swift_getKeyPath(&unk_1009AFE00);
  v38 = swift_getKeyPath(&unk_1009AFE28);
  swift_retain();
  static Published.subscript.getter(v1, v39, KeyPath, v38);
  swift_release();
  swift_release();
  v40 = swift_release();
  v41 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v2 + 88))(v1, v35, v40);
  if ((_DWORD)v41 == enum case for WeatherMapPreviewLocationState.loaded(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v2 + 96))(v1, v35);
    v42 = v115;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v116 + 32))(v115, v1, v117);
    v99 = *(_OWORD *)(v4 + 80);
    sub_10003B59C(v4 + 136, (uint64_t)v126);
    sub_1000DB418((_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 64));
    swift_unknownObjectRetain(v99);
    v43 = v103;
    sub_1004EAAB8(v42, v103);
    v44 = type metadata accessor for Location.Identifier(0);
    v45 = v102;
    _s7Weather24LocationCompositionStateOwst_0(v102, 1, 1, v44);
    v46 = v45 + *(int *)(active + 20);
    *(_QWORD *)v46 = 0;
    *(_BYTE *)(v46 + 8) = 1;
    v47 = v101;
    sub_100095B78(v45, v101, type metadata accessor for ActiveLocationModel);
    v48 = sub_1000BA294((uint64_t *)&unk_100C0A200);
    v49 = sub_1000860C4(v48);
    v50 = v49 + *(_QWORD *)(*(_QWORD *)v49 + 120);
    sub_10007C77C(v47, v50, type metadata accessor for ActiveLocationModel);
    v51 = sub_1000BA294(&qword_100BC45F8);
    swift_storeEnumTagMultiPayload(v50, v51, 2);
    sub_1000215BC(v45, type metadata accessor for ActiveLocationModel);
    v102 = Namespace.wrappedValue.getter(*(_QWORD *)v4);
    v121 = 0;
    static Binding.constant(_:)(&v121, &type metadata for Bool);
    v52 = v123;
    v53 = v124;
    LOBYTE(v47) = v125;
    *v3 = swift_getKeyPath(&unk_1009AFE48);
    v54 = sub_1000BA294(&qword_100BC2990);
    sub_1000916FC((uint64_t)v3, v54);
    v55 = (char *)v3 + v14[5];
    v120 = 0;
    State.init(wrappedValue:)(&v120, &type metadata for Bool);
    v56 = v122;
    *v55 = v121;
    *((_QWORD *)v55 + 1) = v56;
    *(_OWORD *)((char *)v3 + v14[6]) = v99;
    sub_10003C800(v126, (uint64_t)v3 + v14[7]);
    sub_10007C77C(v43, (uint64_t)v3 + v14[8], type metadata accessor for ListLocationViewModel);
    v57 = (_QWORD *)((char *)v3 + v14[9]);
    sub_10003D2DC(&qword_100BC4620, (uint64_t *)&unk_100C0A200);
    *v57 = ObservedObject.init(wrappedValue:)(v49, v48, v58);
    v57[1] = v59;
    *(_QWORD *)((char *)v3 + v14[10]) = v102;
    v60 = (void (__swiftcall **)())((char *)v3 + v14[11]);
    *v60 = LocationSearchEntityFromStringResolver.init();
    v60[1] = 0;
    v61 = (char *)v3 + v14[12];
    *(_QWORD *)v61 = v52;
    *((_QWORD *)v61 + 1) = v53;
    v61[16] = v47;
    v62 = type metadata accessor for LocationViewCollisionOptions(0);
    sub_1000860C4(v62);
    v63 = sub_10012AAD4();
    sub_10000F1C8(&qword_100BCCB38, type metadata accessor for LocationViewCollisionOptions);
    v65 = static ObservableObject.environmentStore.getter(v62, v64);
    v66 = v106;
    sub_100095B78((uint64_t)v3, v106, type metadata accessor for ListLocationRowView);
    v67 = (uint64_t *)(v66 + *(int *)(v104 + 36));
    *v67 = v65;
    v67[1] = v63;
    sub_1000215BC((uint64_t)v3, type metadata accessor for ListLocationRowView);
    v69 = static Color.white.getter(v68);
    v70 = swift_getKeyPath(&unk_1009AFE78);
    v71 = v105;
    sub_10003773C(v66, v105, &qword_100BF1540);
    v72 = v108;
    v73 = (uint64_t *)(v71 + *(int *)(v108 + 36));
    *v73 = v70;
    v73[1] = v69;
    sub_100021A14(v66, &qword_100BF1540);
    v74 = v107;
    sub_100569654(v71, v107);
    v75 = v111;
    sub_10003773C(v74, v111, &qword_100BF1548);
    swift_storeEnumTagMultiPayload(v75, v110, 1);
    sub_10003D2DC(&qword_100BF1578, &qword_100BF1568);
    v77 = v76;
    v78 = sub_100569524();
    v79 = v112;
    _ConditionalContent<>.init(storage:)(v75, v109, v72, v77, v78);
    v80 = v114;
    sub_10003773C(v79, v114, &qword_100BF1560);
    sub_1000916FC(v80, v113);
    v81 = sub_1005694A0();
    _ConditionalContent<>.init(storage:)(v80, v118, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    sub_100021A14(v79, &qword_100BF1560);
    sub_100021A14(v74, &qword_100BF1548);
    (*(void (**)(_QWORD *, uint64_t))(v116 + 8))(v115, v117);
  }
  else
  {
    v83 = v110;
    v82 = v111;
    v84 = v109;
    v85 = v112;
    v86 = v113;
    v87 = v114;
    if ((_DWORD)v41 == enum case for WeatherMapPreviewLocationState.loading(_:))
    {
      *(_QWORD *)v34 = static VerticalAlignment.center.getter(v41);
      *(_QWORD *)(v34 + 8) = 0;
      *(_BYTE *)(v34 + 16) = 1;
      v88 = sub_1000BA294(&qword_100BF1598);
      sub_100569004(v34 + *(int *)(v88 + 44));
      v89 = v82;
      sub_10003773C(v34, v82, &qword_100BF1568);
      sub_1000916FC(v82, v83);
      sub_10003D2DC(&qword_100BF1578, &qword_100BF1568);
      v91 = v90;
      v92 = sub_100569524();
      _ConditionalContent<>.init(storage:)(v89, v84, v108, v91, v92);
      sub_10003773C(v85, v87, &qword_100BF1560);
      sub_1000916FC(v87, v86);
      v93 = sub_1005694A0();
      sub_1000D9100(v93, v94, (uint64_t)&type metadata for EmptyView, v93, (uint64_t)&protocol witness table for EmptyView);
      sub_100021A14(v85, &qword_100BF1560);
      v95 = sub_1000B3154();
      sub_100021A14(v95, v96);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v114, v113, 1);
      v97 = sub_1005694A0();
      sub_1000D9100(v97, v98, (uint64_t)&type metadata for EmptyView, v97, (uint64_t)&protocol witness table for EmptyView);
      (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v1, v35);
    }
  }
  sub_100098640();
}

void sub_100569004(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_1000BA294(&qword_100BF15A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v24 - v6);
  v8 = sub_1000BA294(&qword_100BF15A8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - v12;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v15 = sub_1000BA294(&qword_100BF15B0);
  v16 = &v13[*(int *)(v15 + 44)];
  *v7 = static Alignment.center.getter(v15);
  v7[1] = v17;
  v18 = sub_1000BA294(&qword_100BF15B8);
  sub_100569200((_QWORD *)((char *)v7 + *(int *)(v18 + 44)), v19);
  sub_10003773C((uint64_t)v7, (uint64_t)v4, &qword_100BF15A0);
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v20 = sub_1000BA294(&qword_100BF15C0);
  sub_10003773C((uint64_t)v4, (uint64_t)&v16[*(int *)(v20 + 48)], &qword_100BF15A0);
  v21 = &v16[*(int *)(v20 + 64)];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  sub_100021A14((uint64_t)v7, &qword_100BF15A0);
  sub_100021A14((uint64_t)v4, &qword_100BF15A0);
  sub_10003773C((uint64_t)v13, (uint64_t)v10, &qword_100BF15A8);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v22 = sub_1000BA294(&qword_100BF15C8);
  sub_10003773C((uint64_t)v10, a1 + *(int *)(v22 + 48), &qword_100BF15A8);
  v23 = a1 + *(int *)(v22 + 64);
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  sub_100021A14((uint64_t)v13, &qword_100BF15A8);
  sub_100021A14((uint64_t)v10, &qword_100BF15A8);
}

double sub_100569200@<D0>(uint64_t *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, __n128);
  __n128 v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v31 = a1;
  v2 = type metadata accessor for CircularProgressViewStyle(0, a2);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BEC348);
  v29 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BF15D0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - v13;
  v16 = static Color.clear.getter(v15);
  v17 = ProgressView<>.init<>()();
  CircularProgressViewStyle.init()(v17);
  sub_10003D2DC(&qword_100BEC378, &qword_100BEC348);
  v19 = v18;
  sub_10000F1C8(&qword_100BEC380, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle);
  View.progressViewStyle<A>(_:)(v4, v5, v2, v19, v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v11, v8);
  v21 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v21(v11, v14, v8);
  v22 = v31;
  *v31 = v16;
  *((_WORD *)v22 + 4) = 256;
  v23 = v22;
  v24 = sub_1000BA294(&qword_100BF15D8);
  v21((char *)v23 + *(int *)(v24 + 48), v11, v8);
  v25 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
  v26 = swift_retain();
  v25(v14, v8, v26);
  ((void (*)(char *, uint64_t))v25)(v11, v8);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_100569440(uint64_t a1)
{
  uint64_t v2;

  sub_10000F1C8(&qword_100BF1538, type metadata accessor for LocationRowPreviewViewController);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_10056947C()
{
  return sub_100567B0C();
}

unint64_t sub_1005694A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1570;
  if (!qword_100BF1570)
  {
    v1 = sub_100075EB0(&qword_100BF1560);
    sub_10003D2DC(&qword_100BF1578, &qword_100BF1568);
    sub_100569524();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1570);
  }
  return result;
}

unint64_t sub_100569524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1580;
  if (!qword_100BF1580)
  {
    v1 = sub_100075EB0(&qword_100BF1548);
    sub_1005695A8();
    sub_10003D2DC((unint64_t *)&qword_100BC4B98, (uint64_t *)&unk_100C09EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1580);
  }
  return result;
}

unint64_t sub_1005695A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1588;
  if (!qword_100BF1588)
  {
    v1 = sub_100075EB0(&qword_100BF1540);
    sub_10000F1C8(&qword_100BF1590, type metadata accessor for ListLocationRowView);
    sub_10003D2DC(&qword_100BCCB60, &qword_100BCCB68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1588);
  }
  return result;
}

uint64_t sub_100569654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF1548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10056969C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  objc_class *v24;
  objc_class *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[3];
  uint64_t *v45;
  uint64_t v46;

  sub_1000986AC();
  v25 = v24;
  v43 = v26;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v45 = a21;
  v46 = a23;
  v39 = sub_10005F164(v44);
  (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*(a21 - 1) + 32))(v39, v38, a21);
  v40 = (char *)objc_allocWithZone(v25);
  v41 = sub_100068EB4((uint64_t)v44, (uint64_t)v45);
  __chkstk_darwin(v41);
  sub_100099234();
  (*(void (**)(uint64_t *))(v42 + 16))(a21);
  sub_100569790(*a21, v36, v34, v32, v30, v28, v43, v40, a22, a24);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
  sub_100098640();
}

void *sub_100569790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39[22];
  _QWORD v40[5];
  _QWORD v41[7];
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[6];

  v44[3] = type metadata accessor for LocationRowViewModelProvider();
  v44[4] = &off_100B79270;
  v44[0] = a1;
  v17 = qword_100BF1410;
  v18 = type metadata accessor for LocationStateObservable(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v20 = a8;
  sub_1005686CC((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, a10, a4, v39[0], v39[1], v39[2], v39[3], v39[4], v39[5], v39[6], v39[7], v39[8],
    v39[9]);
  *(_QWORD *)&a8[v17] = v19;
  sub_10003B59C((uint64_t)v44, (uint64_t)v41);
  sub_10003B59C((uint64_t)a6, (uint64_t)&v42);
  sub_10003B59C((uint64_t)a7, (uint64_t)&v43);
  v40[0] = 0;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(a5);
  v28 = sub_1000BA294(&qword_100BC45B0);
  sub_10003D2DC(&qword_100BC45B8, &qword_100BC45B0);
  v40[1] = ObservedObject.init(wrappedValue:)(a2, v28, v29);
  v40[2] = v30;
  sub_10000F1C8(&qword_100BF15E0, type metadata accessor for LocationStateObservable);
  v40[3] = ObservedObject.init(wrappedValue:)(v19, v18, v31);
  v40[4] = v32;
  v41[5] = a5;
  v41[6] = v36;
  *(_QWORD *)&v20[qword_100BF1420] = a2;
  v33 = &v20[qword_100BF1418];
  *(_QWORD *)v33 = a3;
  *((_QWORD *)v33 + 1) = v38;
  swift_retain();
  swift_unknownObjectRetain(a3);

  sub_1005699A0((uint64_t)v40, (uint64_t)v39);
  v34 = (void *)UIHostingController.init(rootView:)(v39);
  objc_msgSend(v34, "setPreferredContentSize:", 0.0, 112.0);
  swift_release();
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a5);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a7);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a6);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v44);
  sub_1005699D4(v40);
  return v34;
}

uint64_t sub_1005699A0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LocationRowPreview(a2, a1);
  return a2;
}

_QWORD *sub_1005699D4(_QWORD *a1)
{
  destroy for LocationRowPreview(a1);
  return a1;
}

unint64_t sub_100569A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF15F0;
  if (!qword_100BF15F0)
  {
    v1 = sub_100075EB0(&qword_100BF15F8);
    sub_1005694A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF15F0);
  }
  return result;
}

uint64_t sub_100569A70(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t active;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t EnumCaseMultiPayload;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __n128 v152;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void (*v161)(uint64_t, char *, uint64_t, __n128);

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v9 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v10 = (void *)a2[14];
    v160 = (void *)a2[13];
    v11 = a2[15];
    v12 = *((_BYTE *)a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001A41A0(v160, v10, v11, v12);
    *(_QWORD *)(a1 + 104) = v160;
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    *(_BYTE *)(a1 + 128) = v12;
    v14 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v14;
    v15 = a2[19];
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    v16 = a3[12];
    v17 = a1 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)(a1 + 152) = v15;
    v19 = type metadata accessor for Date(0);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v21 = swift_bridgeObjectRetain();
    v20(v17, v18, v19, v21);
    v22 = (int *)type metadata accessor for PeakUpperMarkModel(0);
    *(_QWORD *)(v17 + v22[5]) = *(_QWORD *)(v18 + v22[5]);
    v23 = v22[6];
    v24 = (_QWORD *)(v17 + v23);
    v25 = (_QWORD *)(v18 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v22[7];
    v28 = (_QWORD *)(v17 + v27);
    v29 = (_QWORD *)(v18 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = v22[8];
    v32 = (_QWORD *)(v17 + v31);
    v33 = (_QWORD *)(v18 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = a3[13];
    v36 = a1 + v35;
    v37 = (uint64_t)a2 + v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = swift_bridgeObjectRetain();
    v20(v36, v37, v19, v38);
    *(_QWORD *)(v36 + v22[5]) = *(_QWORD *)(v37 + v22[5]);
    v39 = v22[6];
    v40 = (_QWORD *)(v36 + v39);
    v41 = (_QWORD *)(v37 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = v22[7];
    v44 = (_QWORD *)(v36 + v43);
    v45 = (_QWORD *)(v37 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = v22[8];
    v48 = (_QWORD *)(v36 + v47);
    v49 = (_QWORD *)(v37 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = a3[14];
    v159 = a1;
    v52 = a1 + v51;
    v53 = (uint64_t)a2 + v51;
    v54 = type metadata accessor for DetailHeroChartLollipopModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v161 = (void (*)(uint64_t, char *, uint64_t, __n128))v20;
    if (swift_getEnumCaseMultiPayload(v53) == 1)
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
      v56 = *(int *)(active + 20);
      v57 = v52 + v56;
      v58 = v53 + v56;
      ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v52 + v56, v53 + v56, v19);
      v59 = (int *)type metadata accessor for LollipopMarkModel(0);
      *(_QWORD *)(v57 + v59[5]) = *(_QWORD *)(v58 + v59[5]);
      *(_QWORD *)(v57 + v59[6]) = *(_QWORD *)(v58 + v59[6]);
      *(_QWORD *)(v57 + v59[7]) = *(_QWORD *)(v58 + v59[7]);
      v60 = *(int *)(active + 24);
      v61 = v52 + v60;
      v62 = v53 + v60;
      v63 = type metadata accessor for LollipopDetailViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62);
      v65 = EnumCaseMultiPayload;
      v156 = v54;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v79 = *(_QWORD *)(v62 + 8);
        *(_QWORD *)v61 = *(_QWORD *)v62;
        *(_QWORD *)(v61 + 8) = v79;
        v158 = v19;
        v80 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v81 = v80[5];
        v82 = v63;
        v83 = v61 + v81;
        v154 = v65;
        v84 = v62 + v81;
        v85 = type metadata accessor for AttributedString(0);
        v86 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v85 - 8) + 16);
        v87 = swift_bridgeObjectRetain();
        v88 = v83;
        v63 = v82;
        v89 = v84;
        v65 = v154;
        v86(v88, v89, v85, v87);
        v90 = v80[6];
        v91 = (_QWORD *)(v61 + v90);
        v92 = (_QWORD *)(v62 + v90);
        v93 = v92[1];
        *v91 = *v92;
        v91[1] = v93;
        v94 = v80[7];
        v95 = (_QWORD *)(v61 + v94);
        v96 = (_QWORD *)(v62 + v94);
        v97 = v96[1];
        *v95 = *v96;
        v95[1] = v97;
        v98 = v80[8];
        v99 = (_QWORD *)(v61 + v98);
        v100 = (_QWORD *)(v62 + v98);
        v101 = v100[1];
        *v99 = *v100;
        v99[1] = v101;
        v102 = v80[9];
        v103 = (_QWORD *)(v61 + v102);
        v104 = (_QWORD *)(v62 + v102);
        v105 = v104[1];
        *v103 = *v104;
        v103[1] = v105;
        v106 = v80[10];
        v107 = (_QWORD *)(v61 + v106);
        v108 = (_QWORD *)(v62 + v106);
        v109 = v108[1];
        *v107 = *v108;
        v107[1] = v109;
        v110 = v80[11];
        v19 = v158;
        *(_BYTE *)(v61 + v110) = *(_BYTE *)(v62 + v110);
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((_DWORD)EnumCaseMultiPayload != 1)
        {
          v71 = v159;
          v111 = *(_QWORD *)(v62 + 8);
          *(_QWORD *)v61 = *(_QWORD *)v62;
          *(_QWORD *)(v61 + 8) = v111;
          v112 = *(_QWORD *)(v62 + 24);
          *(_QWORD *)(v61 + 16) = *(_QWORD *)(v62 + 16);
          *(_QWORD *)(v61 + 24) = v112;
          v113 = *(_QWORD *)(v62 + 40);
          *(_QWORD *)(v61 + 32) = *(_QWORD *)(v62 + 32);
          *(_QWORD *)(v61 + 40) = v113;
          goto LABEL_13;
        }
        v66 = *(_QWORD *)(v62 + 8);
        *(_QWORD *)v61 = *(_QWORD *)v62;
        *(_QWORD *)(v61 + 8) = v66;
        v67 = *(_QWORD *)(v62 + 24);
        *(_QWORD *)(v61 + 16) = *(_QWORD *)(v62 + 16);
        *(_QWORD *)(v61 + 24) = v67;
        v68 = *(_QWORD *)(v62 + 40);
        *(_QWORD *)(v61 + 32) = *(_QWORD *)(v62 + 32);
        *(_QWORD *)(v61 + 40) = v68;
        v69 = *(_QWORD *)(v62 + 56);
        *(_QWORD *)(v61 + 48) = *(_QWORD *)(v62 + 48);
        *(_QWORD *)(v61 + 56) = v69;
        *(_BYTE *)(v61 + 64) = *(_BYTE *)(v62 + 64);
        *(_BYTE *)(v61 + 65) = *(_BYTE *)(v62 + 65);
      }
      swift_bridgeObjectRetain();
      v71 = v159;
LABEL_13:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v61, v63, v65);
      v114 = 1;
      v13 = a3;
      v54 = v156;
LABEL_18:
      v152 = swift_storeEnumTagMultiPayload(v52, v54, v114);
      v161(v71 + v13[15], (char *)a2 + v13[15], v19, v152);
      ((void (*)(uint64_t, char *, uint64_t))v161)(v71 + v13[16], (char *)a2 + v13[16], v19);
      return v71;
    }
    v72 = type metadata accessor for LollipopDetailViewModel(0);
    v73 = swift_getEnumCaseMultiPayload(v53);
    v74 = v73;
    v157 = v19;
    if ((_DWORD)v73 == 2)
    {
      v115 = *(_QWORD *)(v53 + 8);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_QWORD *)(v52 + 8) = v115;
      v116 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v117 = v116[5];
      v118 = v72;
      v119 = v52 + v117;
      v155 = v74;
      v120 = v53 + v117;
      v121 = v54;
      v122 = type metadata accessor for AttributedString(0);
      v123 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v122 - 8) + 16);
      v124 = swift_bridgeObjectRetain();
      v125 = v119;
      v72 = v118;
      v126 = v120;
      v74 = v155;
      v127 = v122;
      v54 = v121;
      v123(v125, v126, v127, v124);
      v128 = v116[6];
      v129 = (_QWORD *)(v52 + v128);
      v130 = (_QWORD *)(v53 + v128);
      v131 = v130[1];
      *v129 = *v130;
      v129[1] = v131;
      v132 = v116[7];
      v133 = (_QWORD *)(v52 + v132);
      v134 = (_QWORD *)(v53 + v132);
      v135 = v134[1];
      *v133 = *v134;
      v133[1] = v135;
      v136 = v116[8];
      v137 = (_QWORD *)(v52 + v136);
      v138 = (_QWORD *)(v53 + v136);
      v139 = v138[1];
      *v137 = *v138;
      v137[1] = v139;
      v140 = v116[9];
      v141 = (_QWORD *)(v52 + v140);
      v142 = (_QWORD *)(v53 + v140);
      v143 = v142[1];
      *v141 = *v142;
      v141[1] = v143;
      v144 = v116[10];
      v145 = (_QWORD *)(v52 + v144);
      v146 = (_QWORD *)(v53 + v144);
      v147 = v146[1];
      *v145 = *v146;
      v145[1] = v147;
      v148 = v116[11];
      v13 = a3;
      *(_BYTE *)(v52 + v148) = *(_BYTE *)(v53 + v148);
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((_DWORD)v73 != 1)
      {
        v71 = a1;
        v149 = *(_QWORD *)(v53 + 8);
        *(_QWORD *)v52 = *(_QWORD *)v53;
        *(_QWORD *)(v52 + 8) = v149;
        v150 = *(_QWORD *)(v53 + 24);
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
        *(_QWORD *)(v52 + 24) = v150;
        v151 = *(_QWORD *)(v53 + 40);
        *(_QWORD *)(v52 + 32) = *(_QWORD *)(v53 + 32);
        *(_QWORD *)(v52 + 40) = v151;
        goto LABEL_17;
      }
      v75 = *(_QWORD *)(v53 + 8);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_QWORD *)(v52 + 8) = v75;
      v76 = *(_QWORD *)(v53 + 24);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
      *(_QWORD *)(v52 + 24) = v76;
      v77 = *(_QWORD *)(v53 + 40);
      *(_QWORD *)(v52 + 32) = *(_QWORD *)(v53 + 32);
      *(_QWORD *)(v52 + 40) = v77;
      v78 = *(_QWORD *)(v53 + 56);
      *(_QWORD *)(v52 + 48) = *(_QWORD *)(v53 + 48);
      *(_QWORD *)(v52 + 56) = v78;
      *(_BYTE *)(v52 + 64) = *(_BYTE *)(v53 + 64);
      *(_BYTE *)(v52 + 65) = *(_BYTE *)(v53 + 65);
    }
    swift_bridgeObjectRetain();
    v71 = v159;
LABEL_17:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v52, v72, v74);
    v114 = 0;
    v19 = v157;
    goto LABEL_18;
  }
  v70 = *a2;
  *(_QWORD *)a1 = *a2;
  v71 = v70 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v71;
}

uint64_t sub_10056A0E0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t active;
  int EnumCaseMultiPayload;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A44FC(*(void **)(a1 + 104), *(void **)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[12];
  v5 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v14(v4, v5);
  type metadata accessor for PeakUpperMarkModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v14)(a1 + a2[13], v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + a2[14];
  type metadata accessor for DetailHeroChartLollipopModel(0);
  if (swift_getEnumCaseMultiPayload(v7) == 1)
  {
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    v14(v7 + *(int *)(active + 20), v5);
    v7 += *(int *)(active + 24);
  }
  type metadata accessor for LollipopDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      v11 = v7 + *(int *)(type metadata accessor for TitleAndDetailLollipopDetailViewModel(0) + 20);
      v12 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      v10 = swift_bridgeObjectRelease();
      break;
  }
  ((void (*)(uint64_t, uint64_t, __n128))v14)(a1 + a2[15], v5, v10);
  return ((uint64_t (*)(uint64_t, uint64_t))v14)(a1 + a2[16], v5);
}

uint64_t sub_10056A388(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t active;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t EnumCaseMultiPayload;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v146)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 120);
  v148 = *(void **)(a2 + 112);
  v150 = *(void **)(a2 + 104);
  v11 = *(_BYTE *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v150, v148, v10, v11);
  *(_QWORD *)(a1 + 104) = v150;
  *(_QWORD *)(a1 + 112) = v148;
  *(_QWORD *)(a1 + 120) = v10;
  *(_BYTE *)(a1 + 128) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v14 = a3[12];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + 152) = v13;
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  v19 = swift_bridgeObjectRetain();
  v18(v15, v16, v17, v19);
  v20 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v15 + v20[5]) = *(_QWORD *)(v16 + v20[5]);
  v21 = v20[6];
  v22 = (_QWORD *)(v15 + v21);
  v23 = (_QWORD *)(v16 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = v20[7];
  v26 = (_QWORD *)(v15 + v25);
  v27 = (_QWORD *)(v16 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = v20[8];
  v30 = (_QWORD *)(v15 + v29);
  v31 = (_QWORD *)(v16 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = a3[13];
  v34 = a1 + v33;
  v35 = a2 + v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = swift_bridgeObjectRetain();
  v18(v34, v35, v17, v36);
  *(_QWORD *)(v34 + v20[5]) = *(_QWORD *)(v35 + v20[5]);
  v37 = v20[6];
  v38 = (_QWORD *)(v34 + v37);
  v39 = (_QWORD *)(v35 + v37);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = v20[7];
  v42 = (_QWORD *)(v34 + v41);
  v43 = (_QWORD *)(v35 + v41);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = v20[8];
  v46 = (_QWORD *)(v34 + v45);
  v47 = (_QWORD *)(v35 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = a3[14];
  v149 = a2;
  v151 = a1;
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = type metadata accessor for DetailHeroChartLollipopModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v147 = v52;
  if (swift_getEnumCaseMultiPayload(v51) != 1)
  {
    v68 = type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51);
    v70 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v144 = v68;
      v108 = *(_QWORD *)(v51 + 8);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_QWORD *)(v50 + 8) = v108;
      v146 = v18;
      v109 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v110 = v109[5];
      v111 = v50 + v110;
      v112 = v51 + v110;
      v113 = type metadata accessor for AttributedString(0);
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v113 - 8) + 16);
      v115 = swift_bridgeObjectRetain();
      v114(v111, v112, v113, v115);
      v116 = v109[6];
      v117 = (_QWORD *)(v50 + v116);
      v118 = (_QWORD *)(v51 + v116);
      v119 = v118[1];
      *v117 = *v118;
      v117[1] = v119;
      v120 = v109[7];
      v121 = (_QWORD *)(v50 + v120);
      v122 = (_QWORD *)(v51 + v120);
      v123 = v122[1];
      *v121 = *v122;
      v121[1] = v123;
      v124 = v109[8];
      v125 = (_QWORD *)(v50 + v124);
      v126 = (_QWORD *)(v51 + v124);
      v127 = v126[1];
      *v125 = *v126;
      v125[1] = v127;
      v128 = v109[9];
      v129 = (_QWORD *)(v50 + v128);
      v130 = (_QWORD *)(v51 + v128);
      v131 = v130[1];
      *v129 = *v130;
      v129[1] = v131;
      v132 = v109[10];
      v133 = (_QWORD *)(v50 + v132);
      v134 = (_QWORD *)(v51 + v132);
      v135 = v134[1];
      *v133 = *v134;
      v133[1] = v135;
      v136 = v109[11];
      v18 = v146;
      *(_BYTE *)(v50 + v136) = *(_BYTE *)(v51 + v136);
      swift_bridgeObjectRetain();
      v68 = v144;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload != 1)
      {
        v137 = *(_QWORD *)(v51 + 8);
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *(_QWORD *)(v50 + 8) = v137;
        v138 = *(_QWORD *)(v51 + 24);
        *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
        *(_QWORD *)(v50 + 24) = v138;
        v139 = *(_QWORD *)(v51 + 40);
        *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
        *(_QWORD *)(v50 + 40) = v139;
        goto LABEL_15;
      }
      v71 = *(_QWORD *)(v51 + 8);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_QWORD *)(v50 + 8) = v71;
      v72 = *(_QWORD *)(v51 + 24);
      *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
      *(_QWORD *)(v50 + 24) = v72;
      v73 = *(_QWORD *)(v51 + 40);
      *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
      *(_QWORD *)(v50 + 40) = v73;
      v74 = *(_QWORD *)(v51 + 56);
      *(_QWORD *)(v50 + 48) = *(_QWORD *)(v51 + 48);
      *(_QWORD *)(v50 + 56) = v74;
      *(_BYTE *)(v50 + 64) = *(_BYTE *)(v51 + 64);
      *(_BYTE *)(v50 + 65) = *(_BYTE *)(v51 + 65);
    }
    swift_bridgeObjectRetain();
LABEL_15:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v50, v68, v70);
    v107 = 0;
    goto LABEL_16;
  }
  *(_QWORD *)v50 = *(_QWORD *)v51;
  active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
  v54 = *(int *)(active + 20);
  v55 = v50 + v54;
  v56 = v51 + v54;
  v145 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v50 + v54, v51 + v54, v17);
  v57 = (int *)type metadata accessor for LollipopMarkModel(0);
  *(_QWORD *)(v55 + v57[5]) = *(_QWORD *)(v56 + v57[5]);
  *(_QWORD *)(v55 + v57[6]) = *(_QWORD *)(v56 + v57[6]);
  *(_QWORD *)(v55 + v57[7]) = *(_QWORD *)(v56 + v57[7]);
  v58 = *(int *)(active + 24);
  v59 = v50 + v58;
  v60 = v51 + v58;
  v61 = type metadata accessor for LollipopDetailViewModel(0);
  v62 = swift_getEnumCaseMultiPayload(v60);
  v63 = v62;
  if ((_DWORD)v62 == 2)
  {
    v143 = v61;
    v75 = *(_QWORD *)(v60 + 8);
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *(_QWORD *)(v59 + 8) = v75;
    v76 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v77 = v76[5];
    v142 = v63;
    v78 = v59 + v77;
    v79 = v60 + v77;
    v80 = type metadata accessor for AttributedString(0);
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v80 - 8) + 16);
    v82 = swift_bridgeObjectRetain();
    v83 = v78;
    v63 = v142;
    v81(v83, v79, v80, v82);
    v84 = v76[6];
    v85 = (_QWORD *)(v59 + v84);
    v86 = (_QWORD *)(v60 + v84);
    v87 = v86[1];
    *v85 = *v86;
    v85[1] = v87;
    v88 = v76[7];
    v89 = (_QWORD *)(v59 + v88);
    v90 = (_QWORD *)(v60 + v88);
    v91 = v90[1];
    *v89 = *v90;
    v89[1] = v91;
    v92 = v76[8];
    v93 = (_QWORD *)(v59 + v92);
    v94 = (_QWORD *)(v60 + v92);
    v95 = v94[1];
    *v93 = *v94;
    v93[1] = v95;
    v96 = v76[9];
    v97 = (_QWORD *)(v59 + v96);
    v98 = (_QWORD *)(v60 + v96);
    v99 = v98[1];
    *v97 = *v98;
    v97[1] = v99;
    v100 = v76[10];
    v101 = (_QWORD *)(v59 + v100);
    v102 = (_QWORD *)(v60 + v100);
    v103 = v102[1];
    *v101 = *v102;
    v101[1] = v103;
    *(_BYTE *)(v59 + v76[11]) = *(_BYTE *)(v60 + v76[11]);
    swift_bridgeObjectRetain();
    v61 = v143;
  }
  else
  {
    if ((_DWORD)v62 != 1)
    {
      v104 = *(_QWORD *)(v60 + 8);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *(_QWORD *)(v59 + 8) = v104;
      v105 = *(_QWORD *)(v60 + 24);
      *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
      *(_QWORD *)(v59 + 24) = v105;
      v106 = *(_QWORD *)(v60 + 40);
      *(_QWORD *)(v59 + 32) = *(_QWORD *)(v60 + 32);
      *(_QWORD *)(v59 + 40) = v106;
      goto LABEL_11;
    }
    v64 = *(_QWORD *)(v60 + 8);
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *(_QWORD *)(v59 + 8) = v64;
    v65 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
    *(_QWORD *)(v59 + 24) = v65;
    v66 = *(_QWORD *)(v60 + 40);
    *(_QWORD *)(v59 + 32) = *(_QWORD *)(v60 + 32);
    *(_QWORD *)(v59 + 40) = v66;
    v67 = *(_QWORD *)(v60 + 56);
    *(_QWORD *)(v59 + 48) = *(_QWORD *)(v60 + 48);
    *(_QWORD *)(v59 + 56) = v67;
    *(_BYTE *)(v59 + 64) = *(_BYTE *)(v60 + 64);
    *(_BYTE *)(v59 + 65) = *(_BYTE *)(v60 + 65);
  }
  swift_bridgeObjectRetain();
LABEL_11:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(v59, v61, v63);
  v107 = 1;
  v18 = v145;
LABEL_16:
  v140 = swift_storeEnumTagMultiPayload(v50, v147, v107);
  v18(v151 + a3[15], v149 + a3[15], v17, v140);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v151 + a3[16], v149 + a3[16], v17);
  return v151;
}

uint64_t sub_10056A99C(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t active;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int EnumCaseMultiPayload;
  unsigned int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  int *v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v6 = *(void **)(a2 + 104);
  v7 = *(void **)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_BYTE *)(a2 + 128);
  sub_1001A41A0(v6, v7, v8, v9);
  v10 = *(void **)(a1 + 104);
  v11 = *(void **)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v8;
  v13 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v9;
  sub_1001A44FC(v10, v11, v12, v13);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v14 = a3[12];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  v20 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v15 + v20[5]) = *(_QWORD *)(v16 + v20[5]);
  v21 = v20[6];
  v22 = (_QWORD *)(v15 + v21);
  v23 = (_QWORD *)(v16 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = v20[7];
  v25 = (_QWORD *)(v15 + v24);
  v26 = (_QWORD *)(v16 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = v20[8];
  v28 = (_QWORD *)(v15 + v27);
  v29 = (_QWORD *)(v16 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  v30 = swift_bridgeObjectRelease();
  v31 = a3[13];
  v32 = a1 + v31;
  v33 = a2 + v31;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v19)(a1 + v31, a2 + v31, v17, v30);
  *(_QWORD *)(v32 + v20[5]) = *(_QWORD *)(v33 + v20[5]);
  v34 = v20[6];
  v35 = (_QWORD *)(v32 + v34);
  v36 = (_QWORD *)(v33 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = v20[7];
  v38 = (_QWORD *)(v32 + v37);
  v39 = (_QWORD *)(v33 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = v20[8];
  v41 = (_QWORD *)(v32 + v40);
  v42 = (_QWORD *)(v33 + v40);
  *v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  v43 = swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v44 = a3[14];
    v45 = a1 + v44;
    v46 = a2 + v44;
    sub_10056B17C(a1 + v44);
    v47 = type metadata accessor for DetailHeroChartLollipopModel(0);
    v114 = v19;
    if (swift_getEnumCaseMultiPayload(v46) == 1)
    {
      v111 = v47;
      v112 = a3;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
      v49 = *(int *)(active + 20);
      v50 = v45 + v49;
      v51 = v46 + v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v45 + v49, v46 + v49, v17);
      v52 = (int *)type metadata accessor for LollipopMarkModel(0);
      *(_QWORD *)(v50 + v52[5]) = *(_QWORD *)(v51 + v52[5]);
      *(_QWORD *)(v50 + v52[6]) = *(_QWORD *)(v51 + v52[6]);
      *(_QWORD *)(v50 + v52[7]) = *(_QWORD *)(v51 + v52[7]);
      v53 = *(int *)(active + 24);
      v54 = v45 + v53;
      v55 = v46 + v53;
      v56 = type metadata accessor for LollipopDetailViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v55);
      v109 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
        v108 = v56;
        v59 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v60 = v59[5];
        v104 = v55 + v60;
        v105 = v54 + v60;
        v61 = type metadata accessor for AttributedString(0);
        v62 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v61 - 8) + 16);
        v63 = swift_bridgeObjectRetain();
        v62(v105, v104, v61, v63);
        v64 = v59[6];
        v65 = (_QWORD *)(v54 + v64);
        v66 = (_QWORD *)(v55 + v64);
        *v65 = *v66;
        v65[1] = v66[1];
        v67 = v59[7];
        v68 = (_QWORD *)(v54 + v67);
        v69 = (_QWORD *)(v55 + v67);
        *v68 = *v69;
        v68[1] = v69[1];
        v70 = v59[8];
        v71 = (_QWORD *)(v54 + v70);
        v72 = (_QWORD *)(v55 + v70);
        *v71 = *v72;
        v71[1] = v72[1];
        v73 = v59[9];
        v74 = (_QWORD *)(v54 + v73);
        v75 = (_QWORD *)(v55 + v73);
        *v74 = *v75;
        v74[1] = v75[1];
        v76 = v59[10];
        v77 = (_QWORD *)(v54 + v76);
        v78 = (_QWORD *)(v55 + v76);
        *v77 = *v78;
        v77[1] = v78[1];
        v79 = v59[11];
        v56 = v108;
        *(_BYTE *)(v54 + v79) = *(_BYTE *)(v55 + v79);
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          *(_QWORD *)v54 = *(_QWORD *)v55;
          *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
          *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
          *(_QWORD *)(v54 + 24) = *(_QWORD *)(v55 + 24);
          *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
          *(_QWORD *)(v54 + 40) = *(_QWORD *)(v55 + 40);
          goto LABEL_12;
        }
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
        *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
        *(_QWORD *)(v54 + 24) = *(_QWORD *)(v55 + 24);
        *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
        *(_QWORD *)(v54 + 40) = *(_QWORD *)(v55 + 40);
        *(_QWORD *)(v54 + 48) = *(_QWORD *)(v55 + 48);
        *(_QWORD *)(v54 + 56) = *(_QWORD *)(v55 + 56);
        *(_BYTE *)(v54 + 64) = *(_BYTE *)(v55 + 64);
        *(_BYTE *)(v54 + 65) = *(_BYTE *)(v55 + 65);
      }
      swift_bridgeObjectRetain();
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v54, v56, v109);
      v80 = 1;
      a3 = v112;
      v19 = v114;
      v47 = v111;
LABEL_17:
      v43 = swift_storeEnumTagMultiPayload(v45, v47, v80);
      goto LABEL_18;
    }
    v110 = type metadata accessor for LollipopDetailViewModel(0);
    v58 = swift_getEnumCaseMultiPayload(v46);
    v107 = v58;
    if (v58 == 2)
    {
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
      v113 = a3;
      v81 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v82 = v81[5];
      v106 = v45 + v82;
      v83 = v46 + v82;
      v84 = type metadata accessor for AttributedString(0);
      v85 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v84 - 8) + 16);
      v86 = swift_bridgeObjectRetain();
      v85(v106, v83, v84, v86);
      v87 = v81[6];
      v88 = (_QWORD *)(v45 + v87);
      v89 = (_QWORD *)(v46 + v87);
      *v88 = *v89;
      v88[1] = v89[1];
      v90 = v81[7];
      v91 = (_QWORD *)(v45 + v90);
      v92 = (_QWORD *)(v46 + v90);
      *v91 = *v92;
      v91[1] = v92[1];
      v93 = v81[8];
      v94 = (_QWORD *)(v45 + v93);
      v95 = (_QWORD *)(v46 + v93);
      *v94 = *v95;
      v94[1] = v95[1];
      v96 = v81[9];
      v97 = (_QWORD *)(v45 + v96);
      v98 = (_QWORD *)(v46 + v96);
      *v97 = *v98;
      v97[1] = v98[1];
      v99 = v81[10];
      v100 = (_QWORD *)(v45 + v99);
      v101 = (_QWORD *)(v46 + v99);
      *v100 = *v101;
      v100[1] = v101[1];
      v102 = v81[11];
      a3 = v113;
      *(_BYTE *)(v45 + v102) = *(_BYTE *)(v46 + v102);
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v58 != 1)
      {
        *(_QWORD *)v45 = *(_QWORD *)v46;
        *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
        *(_QWORD *)(v45 + 16) = *(_QWORD *)(v46 + 16);
        *(_QWORD *)(v45 + 24) = *(_QWORD *)(v46 + 24);
        *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
        *(_QWORD *)(v45 + 40) = *(_QWORD *)(v46 + 40);
        goto LABEL_16;
      }
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
      *(_QWORD *)(v45 + 16) = *(_QWORD *)(v46 + 16);
      *(_QWORD *)(v45 + 24) = *(_QWORD *)(v46 + 24);
      *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
      *(_QWORD *)(v45 + 40) = *(_QWORD *)(v46 + 40);
      *(_QWORD *)(v45 + 48) = *(_QWORD *)(v46 + 48);
      *(_QWORD *)(v45 + 56) = *(_QWORD *)(v46 + 56);
      *(_BYTE *)(v45 + 64) = *(_BYTE *)(v46 + 64);
      *(_BYTE *)(v45 + 65) = *(_BYTE *)(v46 + 65);
    }
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v45, v110, v107);
    v80 = 0;
    v19 = v114;
    goto LABEL_17;
  }
LABEL_18:
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v19)(a1 + a3[15], a2 + a3[15], v17, v43);
  v19(a1 + a3[16], a2 + a3[16], v17);
  return a1;
}

uint64_t sub_10056B17C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DetailHeroChartLollipopModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10056B1B8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t active;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 145) = *(_OWORD *)(a2 + 145);
  v9 = a3[12];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v14 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v10 + v14[5]) = *(_QWORD *)(v11 + v14[5]);
  *(_OWORD *)(v10 + v14[6]) = *(_OWORD *)(v11 + v14[6]);
  *(_OWORD *)(v10 + v14[7]) = *(_OWORD *)(v11 + v14[7]);
  *(_OWORD *)(v10 + v14[8]) = *(_OWORD *)(v11 + v14[8]);
  v15 = a3[13];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v13(a1 + v15, a2 + v15, v12);
  *(_QWORD *)(v16 + v14[5]) = *(_QWORD *)(v17 + v14[5]);
  *(_OWORD *)(v16 + v14[6]) = *(_OWORD *)(v17 + v14[6]);
  *(_OWORD *)(v16 + v14[7]) = *(_OWORD *)(v17 + v14[7]);
  *(_OWORD *)(v16 + v14[8]) = *(_OWORD *)(v17 + v14[8]);
  v18 = a3[14];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = type metadata accessor for DetailHeroChartLollipopModel(0);
  if (swift_getEnumCaseMultiPayload(v20) == 1)
  {
    v46 = v21;
    *v19 = *v20;
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    v23 = *(int *)(active + 20);
    v24 = (char *)v19 + v23;
    v25 = (char *)v20 + v23;
    v13((uint64_t)v19 + v23, (uint64_t)v20 + v23, v12);
    v26 = (int *)type metadata accessor for LollipopMarkModel(0);
    *(_QWORD *)&v24[v26[5]] = *(_QWORD *)&v25[v26[5]];
    *(_QWORD *)&v24[v26[6]] = *(_QWORD *)&v25[v26[6]];
    *(_QWORD *)&v24[v26[7]] = *(_QWORD *)&v25[v26[7]];
    v27 = *(int *)(active + 24);
    v28 = (_OWORD *)((char *)v19 + v27);
    v29 = (_OWORD *)((char *)v20 + v27);
    v30 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v29) == 2)
    {
      *v28 = *v29;
      v31 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v32 = v31[5];
      v43 = (char *)v29 + v32;
      v44 = (char *)v28 + v32;
      v33 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v44, v43, v33);
      *(_OWORD *)((char *)v28 + v31[6]) = *(_OWORD *)((char *)v29 + v31[6]);
      *(_OWORD *)((char *)v28 + v31[7]) = *(_OWORD *)((char *)v29 + v31[7]);
      *(_OWORD *)((char *)v28 + v31[8]) = *(_OWORD *)((char *)v29 + v31[8]);
      *(_OWORD *)((char *)v28 + v31[9]) = *(_OWORD *)((char *)v29 + v31[9]);
      *(_OWORD *)((char *)v28 + v31[10]) = *(_OWORD *)((char *)v29 + v31[10]);
      *((_BYTE *)v28 + v31[11]) = *((_BYTE *)v29 + v31[11]);
      swift_storeEnumTagMultiPayload(v28, v30, 2);
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    v40 = 1;
    v21 = v46;
  }
  else
  {
    v34 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v20) == 2)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v35 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v36 = v35[5];
      v45 = (char *)v19 + v36;
      v47 = v21;
      v37 = (char *)v20 + v36;
      v38 = type metadata accessor for AttributedString(0);
      v39 = v37;
      v21 = v47;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v45, v39, v38);
      *(_OWORD *)((char *)v19 + v35[6]) = *(_OWORD *)((char *)v20 + v35[6]);
      *(_OWORD *)((char *)v19 + v35[7]) = *(_OWORD *)((char *)v20 + v35[7]);
      *(_OWORD *)((char *)v19 + v35[8]) = *(_OWORD *)((char *)v20 + v35[8]);
      *(_OWORD *)((char *)v19 + v35[9]) = *(_OWORD *)((char *)v20 + v35[9]);
      *(_OWORD *)((char *)v19 + v35[10]) = *(_OWORD *)((char *)v20 + v35[10]);
      *((_BYTE *)v19 + v35[11]) = *((_BYTE *)v20 + v35[11]);
      swift_storeEnumTagMultiPayload(v19, v34, 2);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    v40 = 0;
  }
  v41 = swift_storeEnumTagMultiPayload(v19, v21, v40);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v13)(a1 + a3[15], a2 + a3[15], v12, v41);
  v13(a1 + a3[16], a2 + a3[16], v12);
  return a1;
}

uint64_t sub_10056B580(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t active;
  uint64_t v64;
  char *v65;
  char *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v86;
  uint64_t v87;
  char *v88;
  int *v89;
  int *v90;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_BYTE *)(a2 + 128);
  v12 = *(void **)(a1 + 104);
  v13 = *(void **)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = v10;
  v15 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v11;
  sub_1001A44FC(v12, v13, v14, v15);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v17 = a3[12];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
  v22(v18, v19, v20);
  v23 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v18 + v23[5]) = *(_QWORD *)(v19 + v23[5]);
  v24 = v23[6];
  v25 = (_QWORD *)(v18 + v24);
  v26 = (uint64_t *)(v19 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  v29 = v23[7];
  v30 = (_QWORD *)(v18 + v29);
  v31 = (uint64_t *)(v19 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = v23[8];
  v35 = (_QWORD *)(v18 + v34);
  v36 = (uint64_t *)(v19 + v34);
  v38 = *v36;
  v37 = v36[1];
  *v35 = v38;
  v35[1] = v37;
  v39 = swift_bridgeObjectRelease();
  v40 = a3[13];
  v41 = a1 + v40;
  v42 = a2 + v40;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v22)(a1 + v40, a2 + v40, v20, v39);
  *(_QWORD *)(v41 + v23[5]) = *(_QWORD *)(v42 + v23[5]);
  v43 = v23[6];
  v44 = (_QWORD *)(v41 + v43);
  v45 = (uint64_t *)(v42 + v43);
  v47 = *v45;
  v46 = v45[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  v48 = v23[7];
  v49 = (_QWORD *)(v41 + v48);
  v50 = (uint64_t *)(v42 + v48);
  v52 = *v50;
  v51 = v50[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  v53 = v23[8];
  v54 = (_QWORD *)(v41 + v53);
  v55 = (uint64_t *)(v42 + v53);
  v57 = *v55;
  v56 = v55[1];
  *v54 = v57;
  v54[1] = v56;
  v58 = swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v59 = a3[14];
    v60 = (char *)(a1 + v59);
    v61 = (char *)(a2 + v59);
    sub_10056B17C(a1 + v59);
    v62 = type metadata accessor for DetailHeroChartLollipopModel(0);
    if (swift_getEnumCaseMultiPayload(v61) == 1)
    {
      v87 = v62;
      v89 = a3;
      *(_QWORD *)v60 = *(_QWORD *)v61;
      active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
      v64 = *(int *)(active + 20);
      v65 = &v60[v64];
      v66 = &v61[v64];
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v60[v64], &v61[v64], v20);
      v67 = (int *)type metadata accessor for LollipopMarkModel(0);
      *(_QWORD *)&v65[v67[5]] = *(_QWORD *)&v66[v67[5]];
      *(_QWORD *)&v65[v67[6]] = *(_QWORD *)&v66[v67[6]];
      *(_QWORD *)&v65[v67[7]] = *(_QWORD *)&v66[v67[7]];
      v68 = *(int *)(active + 24);
      v69 = &v60[v68];
      v70 = &v61[v68];
      v71 = type metadata accessor for LollipopDetailViewModel(0);
      if (swift_getEnumCaseMultiPayload(v70) == 2)
      {
        *(_OWORD *)v69 = *(_OWORD *)v70;
        v72 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v73 = v72[5];
        v74 = &v69[v73];
        v86 = &v70[v73];
        v75 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v74, v86, v75);
        *(_OWORD *)&v69[v72[6]] = *(_OWORD *)&v70[v72[6]];
        *(_OWORD *)&v69[v72[7]] = *(_OWORD *)&v70[v72[7]];
        *(_OWORD *)&v69[v72[8]] = *(_OWORD *)&v70[v72[8]];
        *(_OWORD *)&v69[v72[9]] = *(_OWORD *)&v70[v72[9]];
        *(_OWORD *)&v69[v72[10]] = *(_OWORD *)&v70[v72[10]];
        v69[v72[11]] = v70[v72[11]];
        swift_storeEnumTagMultiPayload(v69, v71, 2);
      }
      else
      {
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      v84 = 1;
      v62 = v87;
      a3 = v89;
    }
    else
    {
      v76 = type metadata accessor for LollipopDetailViewModel(0);
      if (swift_getEnumCaseMultiPayload(v61) == 2)
      {
        *(_OWORD *)v60 = *(_OWORD *)v61;
        v90 = a3;
        v77 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v78 = v77[5];
        v88 = &v60[v78];
        v79 = v62;
        v80 = &v61[v78];
        v81 = type metadata accessor for AttributedString(0);
        v82 = v80;
        v62 = v79;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v88, v82, v81);
        *(_OWORD *)&v60[v77[6]] = *(_OWORD *)&v61[v77[6]];
        *(_OWORD *)&v60[v77[7]] = *(_OWORD *)&v61[v77[7]];
        *(_OWORD *)&v60[v77[8]] = *(_OWORD *)&v61[v77[8]];
        *(_OWORD *)&v60[v77[9]] = *(_OWORD *)&v61[v77[9]];
        *(_OWORD *)&v60[v77[10]] = *(_OWORD *)&v61[v77[10]];
        v83 = v77[11];
        a3 = v90;
        v60[v83] = v61[v83];
        swift_storeEnumTagMultiPayload(v60, v76, 2);
      }
      else
      {
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      v84 = 0;
    }
    v58 = swift_storeEnumTagMultiPayload(v60, v62, v84);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v22)(a1 + a3[15], a2 + a3[15], v20, v58);
  v22(a1 + a3[16], a2 + a3[16], v20);
  return a1;
}

uint64_t sub_10056BA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10056BA64);
}

uint64_t sub_10056BA64(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PeakUpperMarkModel(0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = a3[12];
    }
    else
    {
      v11 = type metadata accessor for DetailHeroChartLollipopModel(0);
      if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)a2)
      {
        v9 = v11;
        v10 = a3[14];
      }
      else
      {
        v9 = sub_100098778();
        v10 = a3[15];
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_10056BB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10056BB28);
}

uint64_t sub_10056BB28(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PeakUpperMarkModel(0);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = a4[12];
    }
    else
    {
      v11 = type metadata accessor for DetailHeroChartLollipopModel(0);
      if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
      {
        v9 = v11;
        v10 = a4[14];
      }
      else
      {
        v9 = sub_100098778();
        v10 = a4[15];
      }
    }
    return _s7Weather24LocationCompositionStateOwst_0(v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PrecipitationAveragesHeroChartViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF1658;
  if (!qword_100BF1658)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrecipitationAveragesHeroChartViewModel);
  return result;
}

uint64_t sub_10056BC14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[0] = "@";
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[6] = &unk_1009AFEF0;
  v6[7] = &unk_1009AFF08;
  result = type metadata accessor for PeakUpperMarkModel(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    v8 = v7;
    result = type metadata accessor for DetailHeroChartLollipopModel(319);
    if (v4 <= 0x3F)
    {
      v9 = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for Date(319);
      if (v5 <= 0x3F)
      {
        v10 = *(_QWORD *)(result - 8) + 64;
        v11 = v10;
        swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10056BCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  int *v36;
  char v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v42 = *(_QWORD *)(a1 + 56);
  v43 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = v4 == *(_QWORD *)a2 && v5 == v10;
  v40 = *(_QWORD *)(a2 + 48);
  v41 = *(_QWORD *)(a2 + 56);
  if (!v15 && (sub_100099264(v4, v5, *(_QWORD *)a2, v10) & 1) == 0)
    return 0;
  v16 = v6 == v11 && v7 == v12;
  if (!v16 && (sub_1000BB0DC() & 1) == 0)
    return 0;
  v17 = v8 == v13 && v9 == v14;
  if (!v17 && (sub_100099264(v8, v9, v13, v14) & 1) == 0)
    return 0;
  v18 = v43 == v40 && v42 == v41;
  if (!v18 && (sub_100099264(v43, v42, v40, v41) & 1) == 0)
    return 0;
  sub_100946D9C();
  if ((v19 & 1) == 0)
    return 0;
  sub_100946D9C();
  if ((v20 & 1) == 0)
    return 0;
  sub_100948FA8();
  if ((v21 & 1) == 0)
    return 0;
  if (*(double *)(a1 + 88) != *(double *)(a2 + 88))
    return 0;
  if (*(double *)(a1 + 96) != *(double *)(a2 + 96))
    return 0;
  if (!sub_1005F80A4(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120), *(_BYTE *)(a2 + 128)))return 0;
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_QWORD *)(a1 + 152);
  v30 = *(unsigned __int8 *)(a1 + 160);
  v31 = *(_QWORD *)(a2 + 144);
  v32 = *(_QWORD *)(a2 + 152);
  v33 = *(unsigned __int8 *)(a2 + 160);
  sub_100946E20(*(_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), v22, v23, v24, v25, v26, v27, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50,
    v51);
  if ((v34 & 1) == 0)
    return 0;
  if (v28 == v31 && v29 == v32)
  {
    if (v30 != v33)
      return 0;
  }
  else if ((sub_1000BB0DC() & 1) == 0 || ((v30 ^ v33) & 1) != 0)
  {
    return 0;
  }
  v36 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  sub_1000C3CC8(v36[12]);
  if ((v37 & 1) != 0)
  {
    sub_1000C3CC8(v36[13]);
    if ((v38 & 1) != 0
      && (sub_1003E66C4(a1 + v36[14], a2 + v36[14]) & 1) != 0
      && (static Date.== infix(_:_:)(a1 + v36[15], a2 + v36[15]) & 1) != 0)
    {
      return static Date.== infix(_:_:)(a1 + v36[16], a2 + v36[16]);
    }
  }
  return 0;
}

uint64_t sub_10056BF14@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, __int128 a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(uint64_t, uint64_t, uint64_t);

  v20 = a1[1];
  *(_OWORD *)a9 = *a1;
  *(_OWORD *)(a9 + 16) = v20;
  v21 = a1[3];
  *(_OWORD *)(a9 + 32) = a1[2];
  *(_OWORD *)(a9 + 48) = v21;
  *(_QWORD *)(a9 + 64) = a2;
  *(_QWORD *)(a9 + 72) = a3;
  *(_QWORD *)(a9 + 80) = a4;
  *(double *)(a9 + 88) = a10;
  *(double *)(a9 + 96) = a11;
  *(_QWORD *)(a9 + 104) = a5;
  *(_QWORD *)(a9 + 112) = a6;
  *(_QWORD *)(a9 + 120) = a7;
  *(_BYTE *)(a9 + 128) = a8;
  *(_OWORD *)(a9 + 136) = a12;
  *(_QWORD *)(a9 + 152) = a13;
  *(_BYTE *)(a9 + 160) = a14;
  v22 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  sub_100080BA8(a15, a9 + v22[12], type metadata accessor for PeakUpperMarkModel);
  sub_100080BA8(a16, a9 + v22[13], type metadata accessor for PeakUpperMarkModel);
  sub_100080BA8(a17, a9 + v22[14], type metadata accessor for DetailHeroChartLollipopModel);
  v23 = a9 + v22[15];
  v24 = sub_100098778();
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v26(v23, a18, v24);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)(a9 + v22[16], a19, v24);
}

uint64_t sub_10056C038(double a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  double v17;
  uint64_t v18;

  v3 = round(a1);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v1 = (uint64_t)v3;
  v4 = static UVIndex.ExposureCategory.allCases.getter();
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_12:
    swift_bridgeObjectRelease(v4);
    if (qword_100BC24C8 == -1)
    {
LABEL_13:
      v10 = type metadata accessor for Logger(0);
      v11 = sub_1000AECD4(v10, (uint64_t)qword_100CAF240);
      v12 = Logger.logObject.getter(v11);
      v14 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v12, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v15 = 134349056;
        v17 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
        _os_log_impl((void *)&_mh_execute_header, v12, v14, "Failed to find UV Index Category matching value=%{public}f", v15, 0xCu);
        swift_slowDealloc(v15, -1, -1);
      }

      return UVIndex.init(value:category:)(v1 & ~(v1 >> 63), 0);
    }
LABEL_19:
    swift_once(&qword_100BC24C8, sub_1006F3984);
    goto LABEL_13;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(v4 + v6 + 32);
    if (UVIndex.ExposureCategory.rangeValue.getter(v7) <= v1 && v8 >= v1)
      break;
    if (v5 == ++v6)
      goto LABEL_12;
  }
  swift_bridgeObjectRelease(v4);
  return UVIndex.init(value:category:)(v1, v7);
}

uint64_t sub_10056C214()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_QWORD *sub_10056C224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = type metadata accessor for HistoricalFactsCategory(0);
  v20 = *(_QWORD *)(v2 - 8);
  v21 = v2;
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_100605D18();
    v6 = v22;
    v7 = sub_1000BA294(&qword_100BF16D8);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
    v18 = *(_QWORD *)(v8 + 72);
    v19 = v7;
    v17 = type metadata accessor for WeatherDescription(0);
    do
    {
      v10 = *v9;
      v11 = v9[1];
      v12 = sub_1000BA294(&qword_100BF16D0);
      NonEmpty.map<A>(_:)(sub_10056CCC0, 0, v12, v17);
      *v4 = v10;
      v4[1] = v11;
      v22 = v6;
      v13 = v6[2];
      v14 = v6[3];
      swift_bridgeObjectRetain(v11);
      if (v13 >= v14 >> 1)
      {
        sub_100605D18();
        v6 = v22;
      }
      v9 = (uint64_t *)((char *)v9 + v18);
      v6[2] = v13 + 1;
      sub_10056CE1C((uint64_t)v4, (uint64_t)v6+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v13);
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t sub_10056C3D4(uint64_t a1)
{
  return sub_10056C9DC(a1, &enum case for HistoricalFact.Condition.temperature(_:));
}

unint64_t sub_10056C3E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF16C0;
  if (!qword_100BF16C0)
  {
    v1 = type metadata accessor for HistoricalFact.Condition(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for HistoricalFact.Condition, v1);
    atomic_store(result, (unint64_t *)&qword_100BF16C0);
  }
  return result;
}

void sub_10056C420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  void (*v47)(_QWORD *, _QWORD);
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  _QWORD v78[4];

  v2 = sub_1000BA294(&qword_100BF16C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000BA294(&qword_100BF16D0);
  v64 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v63 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000BA294(&qword_100BF16D8);
  v71 = *(_QWORD *)(v68 - 8);
  v7 = __chkstk_darwin(v68);
  v62 = (uint64_t *)((char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v57 - v9);
  v11 = type metadata accessor for HistoricalFact(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v69 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v57 - v15;
  v74 = *(_QWORD *)(a1 + 16);
  if (v74)
  {
    v17 = *(unsigned __int8 *)(v12 + 80);
    v72 = (v17 + 32) & ~v17;
    v73 = a1 + v72;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v76 = *(_QWORD *)(v12 + 72);
    v77 = v18;
    v61 = v76 + v72;
    v60 = v17 | 7;
    v58 = a1;
    swift_bridgeObjectRetain(a1);
    v19 = 0;
    v20 = _swiftEmptyArrayStorage;
    v59 = xmmword_10097CA50;
    v70 = v11;
    v66 = v5;
    v67 = v4;
    v65 = v12;
    while (1)
    {
      v77(v16, v73 + v76 * v19, v11);
      v21 = v20[2];
      if (v21)
      {
        v75 = v19;
        v22 = v71;
        v23 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        swift_bridgeObjectRetain(v20);
        v24 = 0;
        v25 = *(_QWORD *)(v22 + 72);
        while (1)
        {
          v26 = sub_10056CD48((uint64_t)v20 + v23, (uint64_t)v10);
          v27 = *v10;
          v28 = v10[1];
          v29 = HistoricalFact.heading.getter(v26);
          if (v27 == v29 && v28 == v30)
            break;
          v32 = v30;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0);
          swift_bridgeObjectRelease(v32);
          sub_100021A68((uint64_t)v10, &qword_100BF16D8);
          if ((v33 & 1) != 0)
            goto LABEL_20;
          ++v24;
          v23 += v25;
          if (v21 == v24)
          {
            swift_bridgeObjectRelease(v20);
            v5 = v66;
            v4 = v67;
            v11 = v70;
            v12 = v65;
            v19 = v75;
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease(v28);
        sub_100021A68((uint64_t)v10, &qword_100BF16D8);
LABEL_20:
        v46 = swift_bridgeObjectRelease(v20);
        v11 = v70;
        ((void (*)(char *, char *, uint64_t, __n128))v77)(v69, v16, v70, v46);
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        {
          sub_100867008();
          v20 = v53;
        }
        if (v24 >= v20[2])
        {
          __break(1u);
          return;
        }
        v5 = v66;
        v47 = (void (*)(_QWORD *, _QWORD))NonEmpty.rawElements.modify(v78, v66);
        v49 = v48;
        sub_10048BDB4();
        v50 = *(_QWORD *)(*v49 + 16);
        sub_1001ADDA0(v50);
        v51 = *v49;
        *(_QWORD *)(v51 + 16) = v50 + 1;
        v52 = v51 + v72 + v50 * v76;
        v12 = v65;
        (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v52, v69, v11);
        v47(v78, 0);
        v4 = v67;
        v19 = v75;
      }
      else
      {
LABEL_12:
        v34 = sub_1000BA294(&qword_100BF16E0);
        v35 = swift_allocObject(v34, v61, v60);
        *(_OWORD *)(v35 + 16) = v59;
        v77((char *)(v35 + v72), (uint64_t)v16, v11);
        v78[0] = v35;
        v36 = sub_1000BA294(&qword_100BF16E8);
        v37 = sub_10056CD90();
        NonEmpty.init(_:)(v78, v36, v37);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v4, 1, v5) == 1)
        {
          sub_100021A68((uint64_t)v4, &qword_100BF16C8);
          simulateCrash(_:_:)("This should always succeed.", 27, 2, _swiftEmptyArrayStorage);
        }
        else
        {
          v39 = v63;
          v38 = v64;
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 32))(v63, v4, v5);
          v41 = HistoricalFact.heading.getter(v40);
          v42 = v62;
          v43 = (char *)v62 + *(int *)(v68 + 48);
          *v62 = v41;
          v42[1] = v44;
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v43, v39, v5);
          if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
          {
            sub_1005FED44();
            v20 = v54;
          }
          v45 = v20[2];
          if (v45 >= v20[3] >> 1)
          {
            sub_1005FED44();
            v20 = v55;
          }
          v20[2] = v45 + 1;
          sub_10056CDD4((uint64_t)v62, (uint64_t)v20+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v45);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v5);
          v11 = v70;
        }
      }
      ++v19;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      if (v19 == v74)
      {
        swift_bridgeObjectRelease(v58);
        swift_bridgeObjectRetain(v20);
        sub_10056C224(v56);
        swift_bridgeObjectRelease_n(v20, 2);
        return;
      }
    }
  }
}

uint64_t sub_10056C9D0(uint64_t a1)
{
  return sub_10056C9DC(a1, &enum case for HistoricalFact.Condition.precipitation(_:));
}

uint64_t sub_10056C9DC(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  void (*v24)(uint64_t, char *, uint64_t);
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v3 = type metadata accessor for HistoricalFact.Condition(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000986FC();
  v35 = v5;
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - v7;
  v39 = type metadata accessor for HistoricalFact(0);
  v9 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_1000986FC();
  v36 = v10;
  v12 = __chkstk_darwin(v11);
  v38 = (char *)&v29 - v13;
  result = HistoricalFacts.facts.getter(v12);
  v15 = _swiftEmptyArrayStorage;
  v44 = _swiftEmptyArrayStorage;
  v34 = *(_QWORD *)(result + 16);
  if (!v34)
  {
LABEL_18:
    swift_bridgeObjectRelease(result);
    sub_10056C420((uint64_t)v15);
    v28 = v27;
    swift_release(v15);
    return v28;
  }
  v16 = 0;
  v31 = *a2;
  v30 = v4;
  v17 = v35;
  v32 = result;
  v33 = v8;
  while (v16 < *(_QWORD *)(result + 16))
  {
    v18 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v37 = *(_QWORD *)(v9 + 72);
    v19 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16))(v38, result + v18 + v37 * v16, v39);
    HistoricalFact.condition.getter(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v17, v31, v3);
    sub_10056C3E0();
    sub_1000BC584();
    sub_1000BC584();
    v20 = v43;
    v21 = v41;
    if (v42 == v40 && v43 == v41)
    {
      swift_bridgeObjectRelease_n(v43, 2);
      sub_10009C1DC(v17);
      sub_10009C1DC((uint64_t)v8);
LABEL_11:
      v24 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
      v24((uint64_t)v36, v38, v39);
      v25 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      {
        sub_100605D4C();
        v25 = v44;
      }
      v8 = v33;
      v26 = v25[2];
      if (v26 >= v25[3] >> 1)
      {
        sub_100605D4C();
        v25 = v44;
      }
      v25[2] = v26 + 1;
      v24((uint64_t)v25 + v18 + v26 * v37, v36, v39);
      v44 = v25;
      v4 = v30;
      goto LABEL_16;
    }
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v40, v41, 0);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v21);
    sub_10009C1DC(v17);
    sub_10009C1DC((uint64_t)v8);
    if ((v23 & 1) != 0)
      goto LABEL_11;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v38, v39);
    v8 = v33;
LABEL_16:
    ++v16;
    v17 = v35;
    result = v32;
    if (v34 == v16)
    {
      v15 = v44;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10056CCC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for HistoricalFact(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return WeatherDescription.init(historicalFact:)(v4);
}

uint64_t sub_10056CD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF16D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10056CD90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF16F0;
  if (!qword_100BF16F0)
  {
    v1 = sub_100075EB0(&qword_100BF16E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BF16F0);
  }
  return result;
}

uint64_t sub_10056CDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF16D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056CE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HistoricalFactsCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for HistoricalFactsPlatterInputFactory()
{
  return &type metadata for HistoricalFactsPlatterInputFactory;
}

_QWORD *sub_10056CE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9)
{
  _QWORD *v9;

  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  sub_10003C800(a5, (uint64_t)(v9 + 6));
  v9[11] = a6;
  v9[12] = a7;
  v9[13] = a8;
  sub_10003C800(a9, (uint64_t)(v9 + 14));
  return v9;
}

_QWORD *sub_10056CED4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[152];
  _QWORD v21[6];
  _QWORD v22[6];
  __int128 v23;
  uint64_t v24;

  v18 = a2;
  v4 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  sub_100043CA8(v2 + 48, (uint64_t)v22);
  v11 = *(_QWORD *)(v2 + 88);
  v19 = *(_OWORD *)(v2 + 96);
  sub_100043CA8(v2 + 112, (uint64_t)&v24);
  LOBYTE(v21[0]) = a1;
  v12 = v18;
  v21[1] = v18;
  v21[2] = v8;
  v21[3] = v7;
  v21[4] = v10;
  v21[5] = v9;
  v22[5] = v11;
  v23 = v19;
  v13 = type metadata accessor for TaskPriority(0);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 1, 1, v13);
  sub_100223C20((uint64_t)v21, (uint64_t)v20);
  v14 = swift_allocObject(&unk_100B80DF8, 200, 7);
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_BYTE *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = v12;
  memcpy((void *)(v14 + 48), v20, 0x98uLL);
  swift_bridgeObjectRetain_n(v12, 2);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v19);
  v15 = sub_100966894((uint64_t)v6, (uint64_t)&unk_100BF17D0, v14);
  swift_release(v15);
  return sub_100223C5C(v21);
}

uint64_t sub_10056D05C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 56) = a6;
  *(_BYTE *)(v6 + 169) = a4;
  return swift_task_switch(sub_10056D078, 0, 0);
}

uint64_t sub_10056D078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 64) = v2;
  if (!v2)
    return sub_1000BC590(*(uint64_t (**)(void))(v0 + 8));
  *(_QWORD *)(v0 + 72) = 0;
  v3 = (_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)sub_1000BB0F4(v3);
  *(_QWORD *)(v0 + 80) = v4;
  v5 = sub_1000C3CD4(v4, (uint64_t)sub_10056D0DC);
  return sub_1000C2CF4(v5, v6, v7, v8);
}

uint64_t sub_10056D0DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_10056D348;
  }
  else
  {
    v3 = sub_10056D148;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10056D148()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = *(_QWORD *)(v0 + 72) + 1;
  if (v1 == *(_QWORD *)(v0 + 64))
  {
    swift_bridgeObjectRelease();
    return sub_1000BC590(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    *(_QWORD *)(v0 + 72) = v1;
    v3 = (_QWORD *)sub_1000BB0F4((_QWORD *)(*(_QWORD *)(v0 + 48) + 40 * v1 + 32));
    *(_QWORD *)(v0 + 80) = v3;
    v4 = sub_1000C3CD4(v3, (uint64_t)sub_10056D0DC);
    return sub_1000C2CF4(v4, v5, v6, v7);
  }
}

uint64_t sub_10056D1B8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = objc_msgSend(*(id *)(v0 + 96), "sharedApplication", swift_release().n128_f64[0]);
  return swift_task_switch(sub_10056D214, 0, 0);
}

uint64_t sub_10056D214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 128) = sub_1004142A4(*(_BYTE *)(v0 + 169));
  *(_QWORD *)(v0 + 136) = v2;
  *(_QWORD *)(v0 + 16) = v1;
  swift_errorRetain(v1);
  sub_1000BA294(&qword_100BD7910);
  v3 = String.init<A>(describing:)(v0 + 16);
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = static MainActor.shared.getter(v3);
  v5 = sub_100099AB8();
  return swift_task_switch(sub_10056D2B0, v5, v6);
}

uint64_t sub_10056D2B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = v0[19];
  v3 = v0[17];
  v2 = v0[18];
  v5 = (void *)v0[15];
  v4 = v0[16];
  swift_release();
  sub_10056D748(v4, v3, v2, v1, v5);

  return swift_task_switch(sub_10056D320, 0, 0);
}

uint64_t sub_10056D320()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 88));
  return sub_1000950D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10056D348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_1000AECD4(v2, (uint64_t)qword_100CAF270);
  swift_bridgeObjectRetain();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.error.getter(v4, v5);
  v7 = os_log_type_enabled(v4, v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v9 = *(_BYTE *)(v0 + 169);
    v10 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v20 = v19;
    *(_DWORD *)v10 = 136315394;
    *(_BYTE *)(v0 + 168) = v9;
    v11 = String.init<A>(describing:)(v0 + 168);
    *(_QWORD *)(v0 + 24) = sub_1000CE1C8(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    sub_1000CCF40();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v0 + 32) = v8;
    swift_errorRetain(v8);
    sub_1000BA294(&qword_100BD7910);
    v13 = String.init<A>(describing:)(v0 + 32);
    *(_QWORD *)(v0 + 40) = sub_1000CE1C8(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease();
    sub_1000DBA9C();
    sub_1000DBA9C();
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "An error occurred while performing test: %s -  %s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v19, 2);
    sub_1000986F0(v19);
    sub_1000986F0(v10);
  }
  else
  {
    sub_1000CCF40();
    sub_1000DBA9C();
    sub_1000DBA9C();
  }

  *(_QWORD *)(v0 + 96) = objc_opt_self(UIApplication);
  v15 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 104) = v15;
  *(_QWORD *)(v0 + 112) = static MainActor.shared.getter(v15);
  v16 = sub_100099AB8();
  return swift_task_switch(sub_10056D1B8, v16, v17);
}

_QWORD *sub_10056D5CC()
{
  _QWORD *v0;

  swift_release();
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 6);
  swift_release();
  swift_unknownObjectRelease(v0[12]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 14);
  return v0;
}

uint64_t sub_10056D618()
{
  uint64_t v0;

  sub_10056D5CC();
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for PerformanceTestRunner()
{
  return objc_opt_self(_TtC7Weather21PerformanceTestRunner);
}

uint64_t sub_10056D658()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
  swift_release();
  swift_unknownObjectRelease(v0[18]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 20);
  return swift_deallocObject(v0, 200, 7);
}

uint64_t sub_10056D6C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = v1 + 48;
  v8 = *(_BYTE *)(v1 + 32);
  v9 = (_QWORD *)swift_task_alloc(dword_100BF17CC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100223BE0;
  return sub_10056D05C(a1, v4, v5, v8, v6, v7);
}

void sub_10056D748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8;
  NSString v9;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(a5, "failedTest:withFailure:", v8, v9, swift_bridgeObjectRelease(a4).n128_f64[0]);

}

uint64_t sub_10056D7D4(_QWORD *a1, _QWORD *a2)
{
  return sub_10056D7D0(*a1, *a2);
}

uint64_t sub_10056D7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[16];

  sub_1000BA294(&qword_100BE7B38);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098694();
  v3 = type metadata accessor for OverviewTableValueString(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v9 = &v26[-v8];
  v11 = static Font.body.getter(v10);
  v12 = type metadata accessor for OverviewTableRowViewModel(0);
  sub_10056DC88(v0 + *(int *)(v12 + 24), v1);
  if (_s7Weather24LocationCompositionStateOwet_0(v1, 1, v3) == 1)
  {
    sub_100021A68(v1, &qword_100BE7B38);
    v13 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
    v17 = Text.init(_:tableName:bundle:comment:)(v13, v15, v14 & 1, v16, 0, 0, 0, 0, 0, 256);
    v19 = v18;
    v21 = v20;
    v23 = v22 & 1;
    swift_retain();
    Text.font(_:)(v24, v17, v19, v23, v21);
    sub_1000C4B6C();
    swift_release();
    sub_1000D31B4(v17, v19, v23);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10056DD0C(v1, (uint64_t)v9);
    sub_10056E8A8((uint64_t)v9, (uint64_t)v6);
    sub_1009533EC((uint64_t)v6, v11);
    sub_1000C4B6C();
    sub_10056DCD0((uint64_t)v9);
  }
  return v0;
}

uint64_t sub_10056D9A8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v33;

  type metadata accessor for OverviewTableValueString(0);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098694();
  v6 = sub_1000BA294(&qword_100BF17D8);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BE7B38);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - v17;
  v19 = a1[1];
  v20 = *a1 == *a2 && v19 == a2[1];
  if (v20 || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v19, *a2), v22 = 0, (v21 & 1) != 0))
  {
    v23 = a1[2];
    v24 = a1[3];
    v25 = a2[2];
    v26 = v23 == v25 && v24 == a2[3];
    if (v26 || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25), v22 = 0, (v27 & 1) != 0))
    {
      v28 = type metadata accessor for OverviewTableRowViewModel(0);
      sub_10056DC88((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v18);
      sub_10056DC88((uint64_t)a2 + *(int *)(v28 + 24), (uint64_t)v15);
      v29 = (uint64_t)&v9[*(int *)(v6 + 48)];
      sub_10056DC88((uint64_t)v18, (uint64_t)v9);
      sub_10056DC88((uint64_t)v15, v29);
      sub_1000BBCA0((uint64_t)v9);
      if (v20)
      {
        sub_1000BBC98((uint64_t)v15);
        sub_1000BBC98((uint64_t)v18);
        sub_1000BBCA0(v29);
        if (v20)
        {
          sub_100021A68((uint64_t)v9, &qword_100BE7B38);
LABEL_21:
          v22 = *((_BYTE *)a1 + *(int *)(v28 + 28)) ^ *((_BYTE *)a2 + *(int *)(v28 + 28)) ^ 1;
          return v22 & 1;
        }
      }
      else
      {
        sub_10056DC88((uint64_t)v9, (uint64_t)v12);
        sub_1000BBCA0(v29);
        if (!v30)
        {
          sub_10056DD0C(v29, v2);
          v31 = sub_10095362C((uint64_t)v12, v2);
          sub_10056DCD0(v2);
          sub_1000BBC98((uint64_t)v15);
          sub_1000BBC98((uint64_t)v18);
          sub_10056DCD0((uint64_t)v12);
          sub_1000BBC98((uint64_t)v9);
          if ((v31 & 1) != 0)
            goto LABEL_21;
LABEL_22:
          v22 = 0;
          return v22 & 1;
        }
        sub_100021A68((uint64_t)v15, &qword_100BE7B38);
        sub_100021A68((uint64_t)v18, &qword_100BE7B38);
        sub_10056DCD0((uint64_t)v12);
      }
      sub_100021A68((uint64_t)v9, &qword_100BF17D8);
      goto LABEL_22;
    }
  }
  return v22 & 1;
}

uint64_t type metadata accessor for OverviewTableRowViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF1840;
  if (!qword_100BF1840)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OverviewTableRowViewModel);
  return result;
}

uint64_t sub_10056DC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BE7B38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056DCD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OverviewTableValueString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10056DD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OverviewTableValueString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10056DD50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for OverviewTableValueString(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
    {
      v13 = sub_1000BA294(&qword_100BE7B38);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11);
      v16 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v17 = *v11;
        v18 = v11[1];
        v19 = *((_BYTE *)v11 + 16);
        sub_100121DEC(v17, v18, v19);
        *v10 = v17;
        v10[1] = v18;
        *((_BYTE *)v10 + 16) = v19;
      }
      else
      {
        v20 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v10, v11, v20);
        v21 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
        v22 = (uint64_t *)((char *)v10 + v21);
        v23 = (uint64_t *)((char *)v11 + v21);
        v24 = v23[1];
        *v22 = *v23;
        v22[1] = v24;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload(v10, v12, v16);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

double sub_10056DEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  int EnumCaseMultiPayload;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for OverviewTableValueString(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4);
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      return sub_100121E04(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    }
    else if (!EnumCaseMultiPayload)
    {
      v8 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);
      sub_1000BA294(&qword_100BF17E0);
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    }
  }
  return result;
}

_QWORD *sub_10056DFB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for OverviewTableValueString(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11))
  {
    v12 = sub_1000BA294(&qword_100BE7B38);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10);
    v14 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      v15 = *v10;
      v16 = v10[1];
      v17 = *((_BYTE *)v10 + 16);
      sub_100121DEC(v15, v16, v17);
      *v9 = v15;
      v9[1] = v16;
      *((_BYTE *)v9 + 16) = v17;
    }
    else
    {
      v18 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v10, v18);
      v19 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
      v20 = (uint64_t *)((char *)v9 + v19);
      v21 = (uint64_t *)((char *)v10 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload(v9, v11, v14);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_10056E128(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (uint64_t)a1 + v6;
  v8 = (uint64_t)a2 + v6;
  v9 = type metadata accessor for OverviewTableValueString(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0(v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0(v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8);
      v13 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
      {
        v14 = *(_QWORD *)v8;
        v15 = *(_QWORD *)(v8 + 8);
        v16 = *(_BYTE *)(v8 + 16);
        sub_100121DEC(v14, v15, v16);
        *(_QWORD *)v7 = v14;
        *(_QWORD *)(v7 + 8) = v15;
        *(_BYTE *)(v7 + 16) = v16;
      }
      else
      {
        v25 = type metadata accessor for AttributedString(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v7, v8, v25);
        v26 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
        v27 = (_QWORD *)(v7 + v26);
        v28 = (_QWORD *)(v8 + v26);
        *v27 = *v28;
        v27[1] = v28[1];
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload(v7, v9, v13);
      _s7Weather24LocationCompositionStateOwst_0(v7, 0, 1, v9);
      goto LABEL_18;
    }
LABEL_8:
    v17 = sub_1000BA294(&qword_100BE7B38);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_18;
  }
  if (v11)
  {
    sub_10056DCD0(v7);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_10056DCD0(v7);
    v18 = swift_getEnumCaseMultiPayload(v8);
    if (v18 == 2)
    {
      v29 = *(_QWORD *)v8;
      v30 = *(_QWORD *)(v8 + 8);
      v31 = *(_BYTE *)(v8 + 16);
      sub_100121DEC(v29, v30, v31);
      *(_QWORD *)v7 = v29;
      *(_QWORD *)(v7 + 8) = v30;
      *(_BYTE *)(v7 + 16) = v31;
      v22 = v7;
      v23 = v9;
      v24 = 2;
    }
    else if (v18 == 1)
    {
      v19 = *(_QWORD *)v8;
      v20 = *(_QWORD *)(v8 + 8);
      v21 = *(_BYTE *)(v8 + 16);
      sub_100121DEC(v19, v20, v21);
      *(_QWORD *)v7 = v19;
      *(_QWORD *)(v7 + 8) = v20;
      *(_BYTE *)(v7 + 16) = v21;
      v22 = v7;
      v23 = v9;
      v24 = 1;
    }
    else
    {
      v32 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v7, v8, v32);
      v33 = *(int *)(sub_1000BA294(&qword_100BF17E0) + 48);
      v34 = (_QWORD *)(v7 + v33);
      v35 = (_QWORD *)(v8 + v33);
      *v34 = *v35;
      v34[1] = v35[1];
      swift_bridgeObjectRetain();
      v22 = v7;
      v23 = v9;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
  }
LABEL_18:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_OWORD *sub_10056E3D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for OverviewTableValueString(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BE7B38);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v9))
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
      v13 = sub_1000BA294(&qword_100BF17E0);
      *(_OWORD *)&v8[*(int *)(v13 + 48)] = *(_OWORD *)&v9[*(int *)(v13 + 48)];
      swift_storeEnumTagMultiPayload(v8, v10, 0);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *sub_10056E4F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for OverviewTableValueString(0);
  v12 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v11);
  v13 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v11);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_10056DCD0((uint64_t)v9);
      if (!swift_getEnumCaseMultiPayload(v10))
      {
        v18 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v9, v10, v18);
        v19 = sub_1000BA294(&qword_100BF17E0);
        *(_OWORD *)&v9[*(int *)(v19 + 48)] = *(_OWORD *)&v10[*(int *)(v19 + 48)];
        swift_storeEnumTagMultiPayload(v9, v11, 0);
        goto LABEL_14;
      }
      v14 = *(_QWORD *)(v11 - 8);
      goto LABEL_8;
    }
    sub_10056DCD0((uint64_t)v9);
LABEL_7:
    v14 = *(_QWORD *)(sub_1000BA294(&qword_100BE7B38) - 8);
LABEL_8:
    memcpy(v9, v10, *(_QWORD *)(v14 + 64));
    goto LABEL_14;
  }
  if (v13)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload(v10))
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v9, v10, v15);
    v16 = sub_1000BA294(&qword_100BF17E0);
    *(_OWORD *)&v9[*(int *)(v16 + 48)] = *(_OWORD *)&v10[*(int *)(v16 + 48)];
    swift_storeEnumTagMultiPayload(v9, v11, 0);
  }
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v11);
LABEL_14:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10056E6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10056E6D4);
}

uint64_t sub_10056E6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000BA294(&qword_100BE7B38);
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10056E74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10056E758);
}

uint64_t sub_10056E758(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000BA294(&qword_100BE7B38);
    return _s7Weather24LocationCompositionStateOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_10056E7C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1009B0040;
  v4[1] = &unk_1009B0040;
  sub_10056E844(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1009B0058;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_10056E844(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BF1850)
  {
    v2 = type metadata accessor for OverviewTableValueString(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BF1850);
  }
}

ValueMetadata *type metadata accessor for OverviewTableViewModel()
{
  return &type metadata for OverviewTableViewModel;
}

uint64_t sub_10056E8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OverviewTableValueString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for Mica(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10056E938 + 4 * byte_1009B0115[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10056E96C + 4 * byte_1009B0110[v4]))();
}

uint64_t sub_10056E96C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10056E974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10056E97CLL);
  return result;
}

uint64_t sub_10056E988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10056E990);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10056E994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10056E99C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Mica()
{
  return &type metadata for Mica;
}

uint64_t sub_10056E9B8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v2 + 61) = a2;
  v3 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  *(_QWORD *)(v2 + 16) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 32) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 40) = swift_task_alloc(v5);
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 48) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6);
  return swift_task_switch(sub_10056EA5C, v7, v8);
}

uint64_t sub_10056EA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __n128 v13;
  char v14;
  void (*v15)(uint64_t, uint64_t);
  char v16;
  id v17;
  uint64_t v18;

  swift_release();
  if (qword_100BC24D8 != -1)
    swift_once(&qword_100BC24D8, sub_1006F39A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AECD4(v1, (uint64_t)qword_100CAF270);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 61);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 56) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 60);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing Mica instruction: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD **)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(_QWORD *)(v0 + 24);
  v11 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v11);
  static Settings.VFX.animatedBackgrounds.getter(v12);
  Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter();
  swift_release();
  SettingReader.read<A>(_:)(v7);
  swift_release();
  v13 = swift_release();
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v10 + 104))(v8, enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.mica(_:), v9, v13);
  v14 = sub_10011E9F0((uint64_t)v7, v8);
  v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v15(v8, v9);
  v15((uint64_t)v7, v9);
  if ((v14 & 1) != 0)
  {
    v16 = *(_BYTE *)(v0 + 61);
    v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    *(_BYTE *)(v0 + 60) = v16;
    NSUserDefaults.set<A>(_:for:)(v0 + 60, 0xD000000000000027, 0x8000000100A0AB00, &type metadata for Bool);

  }
  v18 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10056EC8C()
{
  char *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(dword_100BF1894);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10014E920;
  return sub_10056E9B8((uint64_t)v3, v2);
}

_QWORD *sub_10056ECD8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t, __n128);
  __n128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  int *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t, __n128);
  __n128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __n128 v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void (*v152)(char *, char *, uint64_t, __n128);
  __n128 v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  void (*v165)(char *, char *, uint64_t, __n128);
  __n128 v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  const void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  const void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  void (*v231)(char *, char *, uint64_t, __n128);
  void (*v232)(char *, char *, uint64_t, __n128);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v63 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v63 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v236 = a3;
      v64 = a2[1];
      *a1 = *a2;
      a1[1] = v64;
      v65 = a2[3];
      a1[2] = a2[2];
      a1[3] = v65;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v66 = (int *)_s10PolarModelVMa(0);
      v67 = v66[7];
      v68 = (char *)a1 + v67;
      v69 = (char *)a2 + v67;
      v70 = type metadata accessor for Date(0);
      v71 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v70 - 8) + 16);
      v232 = v71;
      v234 = v70;
      swift_bridgeObjectRetain();
      v72 = swift_bridgeObjectRetain();
      v71(v68, v69, v70, v72);
      v73 = v66[8];
      v74 = (char *)a1 + v73;
      v75 = (char *)a2 + v73;
      v76 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
      v77 = v66[9];
      v78 = (char *)a1 + v77;
      v79 = (char *)a2 + v77;
      v225 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v225 - 8) + 16))(v78, v79);
      *(_QWORD *)((char *)a1 + v66[10]) = *(_QWORD *)((char *)a2 + v66[10]);
      v80 = v66[11];
      v81 = (_QWORD *)((char *)a1 + v80);
      v82 = (_QWORD *)((char *)a2 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      v84 = v66[12];
      v85 = (char *)a1 + v84;
      v240 = a2;
      v86 = (_QWORD *)((char *)a2 + v84);
      *(_QWORD *)((char *)a1 + v84) = *v86;
      v87 = (int *)_s14ChartViewModelVMa(0);
      v88 = v87[5];
      v229 = &v85[v88];
      v89 = (char *)v86 + v88;
      v238 = a1;
      v90 = type metadata accessor for DetailChartDataElement(0);
      v91 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v90 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v92 = swift_bridgeObjectRetain();
      v91(v229, v89, v90, v92);
      v93 = v87[6];
      v94 = &v85[v93];
      v95 = (char *)v86 + v93;
      v96 = type metadata accessor for Location(0);
      v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
      v97(v94, v95, v96);
      v98 = v87[7];
      v99 = &v85[v98];
      v100 = (_QWORD *)((char *)v86 + v98);
      v101 = *v100;
      v102 = v100[1];
      *(_QWORD *)v99 = v101;
      *((_QWORD *)v99 + 1) = v102;
      *(_QWORD *)&v85[v87[8]] = *(_QWORD *)((char *)v86 + v87[8]);
      *(_QWORD *)&v85[v87[9]] = *(_QWORD *)((char *)v86 + v87[9]);
      *(_QWORD *)&v85[v87[10]] = *(_QWORD *)((char *)v86 + v87[10]);
      v103 = v87[11];
      v227 = (char *)v86 + v103;
      v230 = &v85[v103];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v104 = swift_bridgeObjectRetain();
      v232(v230, v227, v234, v104);
      v105 = v87[12];
      v106 = *(_QWORD *)((char *)v86 + v105);
      v107 = v240;
      *(_QWORD *)&v85[v105] = v106;
      v108 = v66[13];
      v109 = (char *)v238 + v108;
      v110 = (char *)v240 + v108;
      v111 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v97)(v109, v110, v96, v111);
      *(_QWORD *)((char *)v238 + v66[15]) = *(_QWORD *)((char *)v240 + v66[15]);
      v112 = v66[16];
      a1 = v238;
      v113 = (_QWORD *)((char *)v238 + v112);
      v114 = (_QWORD *)((char *)v240 + v112);
      v115 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v115))
      {
        v116 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        v119 = v114[1];
        if (v119)
        {
          *v113 = *v114;
          v113[1] = v119;
          v120 = v114[3];
          v113[2] = v114[2];
          v113[3] = v120;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v133 = *((_OWORD *)v114 + 1);
          *(_OWORD *)v113 = *(_OWORD *)v114;
          *((_OWORD *)v113 + 1) = v133;
        }
        v134 = *(int *)(v115 + 20);
        v135 = (_QWORD *)((char *)v113 + v134);
        v136 = (_QWORD *)((char *)v114 + v134);
        v137 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v136) == 1)
        {
          v222 = v137;
          v138 = v136[1];
          *v135 = *v136;
          v135[1] = v138;
          v139 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v140 = v139[5];
          v141 = (char *)v135 + v140;
          v142 = (char *)v136 + v140;
          v143 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          v224 = v115;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v142, 1, v143))
          {
            v144 = sub_1000BA294(&qword_100BD4280);
            memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v141, 0, 1, v143);
          }
          v158 = v139[6];
          v159 = (_QWORD *)((char *)v135 + v158);
          v160 = (_QWORD *)((char *)v136 + v158);
          v161 = v160[1];
          *v159 = *v160;
          v159[1] = v161;
          v162 = v139[7];
          v163 = (char *)v135 + v162;
          v164 = (char *)v136 + v162;
          v165 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v143 - 8) + 16);
          v166 = swift_bridgeObjectRetain();
          v165(v163, v164, v143, v166);
          v167 = v139[8];
          v168 = (char *)v135 + v167;
          v169 = (char *)v136 + v167;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v136 + v167, 1, v143))
          {
            v170 = sub_1000BA294(&qword_100BD4280);
            memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v165)(v168, v169, v143);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v168, 0, 1, v143);
          }
          a1 = v238;
          v115 = v224;
          *((_BYTE *)v135 + v139[9]) = *((_BYTE *)v136 + v139[9]);
          swift_storeEnumTagMultiPayload(v135, v222, 1);
          v107 = v240;
        }
        else
        {
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        v194 = *(int *)(v115 + 24);
        v195 = (char *)v113 + v194;
        v196 = (char *)v114 + v194;
        v197 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v196, 1, v197))
        {
          v198 = sub_1000BA294(&qword_100BD3100);
          memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        }
        else
        {
          v199 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v195, v196, v199);
          v200 = sub_1000BA294(&qword_100BC5FE8);
          v195[*(int *)(v200 + 48)] = v196[*(int *)(v200 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v195, 0, 1, v197);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v115);
      }
      v201 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
      v202 = (char *)a1 + v201;
      v203 = (uint64_t)v107 + v201;
      v204 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v203, 1, v204))
      {
        v206 = *(_QWORD *)v203;
        v207 = *(_QWORD *)(v203 + 8);
        v208 = *(_BYTE *)(v203 + 16);
        sub_1000B2044(*(_QWORD *)v203, v207, v208);
        *(_QWORD *)v202 = v206;
        *((_QWORD *)v202 + 1) = v207;
        v202[16] = v208;
        v209 = *(_QWORD *)(v203 + 32);
        *((_QWORD *)v202 + 3) = *(_QWORD *)(v203 + 24);
        *((_QWORD *)v202 + 4) = v209;
        v210 = *(int *)(v204 + 24);
        v211 = &v202[v210];
        v212 = (const void *)(v203 + v210);
        v213 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v212, 1, v213))
        {
          v214 = sub_1000BA294(&qword_100BC3368);
          memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v213 - 8) + 16))(v211, v212, v213);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v211, 0, 1, v213);
        }
        v215 = v203 + *(int *)(v204 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v216 = (char *)&loc_10056FAA0 + 4 * byte_1009B0140[swift_getEnumCaseMultiPayload(v215)];
        __asm { BR              X10 }
      }
      v205 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v202, (const void *)v203, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
      v217 = a1;
      v218 = v236;
      v219 = 1;
      goto LABEL_54;
    }
    if (!EnumCaseMultiPayload)
    {
      v235 = a3;
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      v11 = a2[5];
      a1[4] = a2[4];
      a1[5] = v11;
      v12 = (int *)_s11NormalModelVMa(0);
      v13 = v12[7];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for Date(0);
      v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
      v231 = v17;
      v233 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = swift_bridgeObjectRetain();
      v17(v14, v15, v16, v18);
      ((void (*)(char *, char *, uint64_t))v17)((char *)a1 + v12[8], (char *)a2 + v12[8], v16);
      ((void (*)(char *, char *, uint64_t))v17)((char *)a1 + v12[9], (char *)a2 + v12[9], v16);
      v19 = v12[10];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      v23 = v12[11];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v226 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v226 - 8) + 16))(v24, v25);
      *(_QWORD *)((char *)a1 + v12[12]) = *(_QWORD *)((char *)a2 + v12[12]);
      v26 = v12[13];
      v27 = (char *)a1 + v26;
      v239 = a2;
      v28 = (_QWORD *)((char *)a2 + v26);
      *(_QWORD *)((char *)a1 + v26) = *v28;
      v29 = (int *)_s14ChartViewModelVMa(0);
      v30 = v29[5];
      v31 = &v27[v30];
      v32 = (char *)v28 + v30;
      v33 = type metadata accessor for DetailChartDataElement(0);
      v237 = a1;
      v34 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 16);
      swift_bridgeObjectRetain();
      v35 = swift_bridgeObjectRetain();
      v34(v31, v32, v33, v35);
      v36 = v29[6];
      v37 = &v27[v36];
      v38 = (char *)v28 + v36;
      v39 = type metadata accessor for Location(0);
      v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
      v40(v37, v38, v39);
      v41 = v29[7];
      v42 = &v27[v41];
      v43 = (_QWORD *)((char *)v28 + v41);
      v44 = *v43;
      v45 = v43[1];
      *(_QWORD *)v42 = v44;
      *((_QWORD *)v42 + 1) = v45;
      *(_QWORD *)&v27[v29[8]] = *(_QWORD *)((char *)v28 + v29[8]);
      *(_QWORD *)&v27[v29[9]] = *(_QWORD *)((char *)v28 + v29[9]);
      *(_QWORD *)&v27[v29[10]] = *(_QWORD *)((char *)v28 + v29[10]);
      v46 = v29[11];
      v228 = &v27[v46];
      v47 = (char *)v28 + v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = swift_bridgeObjectRetain();
      v231(v228, v47, v233, v48);
      *(_QWORD *)&v27[v29[12]] = *(_QWORD *)((char *)v28 + v29[12]);
      v49 = v12[14];
      v50 = v239;
      v51 = (char *)v237 + v49;
      v52 = (char *)v239 + v49;
      v53 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v40)(v51, v52, v39, v53);
      v54 = v12[15];
      v55 = (char *)v237 + v54;
      v56 = (char *)v239 + v54;
      v57 = type metadata accessor for SunEvents(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
      *(_QWORD *)((char *)v237 + v12[16]) = *(_QWORD *)((char *)v239 + v12[16]);
      v58 = v12[18];
      a1 = v237;
      v59 = (_QWORD *)((char *)v237 + v58);
      v60 = (_QWORD *)((char *)v239 + v58);
      v61 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v61))
      {
        v62 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v117 = v60[1];
        if (v117)
        {
          *v59 = *v60;
          v59[1] = v117;
          v118 = v60[3];
          v59[2] = v60[2];
          v59[3] = v118;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v121 = *((_OWORD *)v60 + 1);
          *(_OWORD *)v59 = *(_OWORD *)v60;
          *((_OWORD *)v59 + 1) = v121;
        }
        v122 = *(int *)(v61 + 20);
        v123 = (_QWORD *)((char *)v59 + v122);
        v124 = (_QWORD *)((char *)v60 + v122);
        v125 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v124) == 1)
        {
          v221 = v125;
          v126 = v124[1];
          *v123 = *v124;
          v123[1] = v126;
          v127 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v128 = v127[5];
          v129 = (char *)v123 + v128;
          v130 = (char *)v124 + v128;
          v131 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          v223 = v61;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v130, 1, v131))
          {
            v132 = sub_1000BA294(&qword_100BD4280);
            memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v129, 0, 1, v131);
          }
          v145 = v127[6];
          v146 = (_QWORD *)((char *)v123 + v145);
          v147 = (_QWORD *)((char *)v124 + v145);
          v148 = v147[1];
          *v146 = *v147;
          v146[1] = v148;
          v149 = v127[7];
          v150 = (char *)v123 + v149;
          v151 = (char *)v124 + v149;
          v152 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v131 - 8) + 16);
          v153 = swift_bridgeObjectRetain();
          v152(v150, v151, v131, v153);
          v154 = v127[8];
          v155 = (char *)v123 + v154;
          v156 = (char *)v124 + v154;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v124 + v154, 1, v131))
          {
            v157 = sub_1000BA294(&qword_100BD4280);
            memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v152)(v155, v156, v131);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v155, 0, 1, v131);
          }
          v61 = v223;
          *((_BYTE *)v123 + v127[9]) = *((_BYTE *)v124 + v127[9]);
          swift_storeEnumTagMultiPayload(v123, v221, 1);
          a1 = v237;
          v50 = v239;
        }
        else
        {
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        v171 = *(int *)(v61 + 24);
        v172 = (char *)v59 + v171;
        v173 = (char *)v60 + v171;
        v174 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v173, 1, v174))
        {
          v175 = sub_1000BA294(&qword_100BD3100);
          memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
        }
        else
        {
          v176 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v172, v173, v176);
          v177 = sub_1000BA294(&qword_100BC5FE8);
          v172[*(int *)(v177 + 48)] = v173[*(int *)(v177 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v172, 0, 1, v174);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v61);
      }
      v178 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
      v179 = (char *)a1 + v178;
      v180 = (uint64_t)v50 + v178;
      v181 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v180, 1, v181))
      {
        v183 = *(_QWORD *)v180;
        v184 = *(_QWORD *)(v180 + 8);
        v185 = *(_BYTE *)(v180 + 16);
        sub_1000B2044(*(_QWORD *)v180, v184, v185);
        *(_QWORD *)v179 = v183;
        *((_QWORD *)v179 + 1) = v184;
        v179[16] = v185;
        v186 = *(_QWORD *)(v180 + 32);
        *((_QWORD *)v179 + 3) = *(_QWORD *)(v180 + 24);
        *((_QWORD *)v179 + 4) = v186;
        v187 = *(int *)(v181 + 24);
        v188 = &v179[v187];
        v189 = (const void *)(v180 + v187);
        v190 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v189, 1, v190))
        {
          v191 = sub_1000BA294(&qword_100BC3368);
          memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v190 - 8) + 16))(v188, v189, v190);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v188, 0, 1, v190);
        }
        v192 = v180 + *(int *)(v181 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v193 = (char *)&loc_10056F844 + 4 * byte_1009B0150[swift_getEnumCaseMultiPayload(v192)];
        __asm { BR              X10 }
      }
      v182 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v179, (const void *)v180, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
      v217 = a1;
      v218 = v235;
      v219 = 0;
LABEL_54:
      swift_storeEnumTagMultiPayload(v217, v218, v219);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void sub_100571FA8(uint64_t a1)
{
  int EnumCaseMultiPayload;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(uint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  void (*v69)(uint64_t, uint64_t, __n128);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  int v126;
  int *v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  void (*v150)(uint64_t, uint64_t, __n128);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t, __n128);
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t, __n128);
  int *v181;
  int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  int *v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(uint64_t, uint64_t);
  void (*v192)(uint64_t, uint64_t);
  void (*v193)(uint64_t, uint64_t);
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, uint64_t);
  void (*v200)(uint64_t);
  void (*v201)(uint64_t, uint64_t);
  uint64_t v202;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = (int *)_s10PolarModelVMa(0);
    v43 = a1 + v42[7];
    v44 = type metadata accessor for Date(0);
    v45 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8);
    v45(v43, v44);
    v46 = a1 + v42[8];
    v47 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
    v48 = a1 + v42[9];
    v49 = type metadata accessor for AttributedString(0);
    v200 = *(void (**)(uint64_t))(*(_QWORD *)(v49 - 8) + 8);
    v202 = v49;
    v200(v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = a1 + v42[12];
    swift_bridgeObjectRelease();
    v51 = (int *)_s14ChartViewModelVMa(0);
    v52 = v50 + v51[5];
    v53 = type metadata accessor for DetailChartDataElement(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
    v54 = v50 + v51[6];
    v55 = type metadata accessor for Location(0);
    v56 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8);
    v56(v54, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v57 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v45)(v50 + v51[11], v44, v57);
    v58 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v56)(a1 + v42[13], v55, v58);
    swift_bridgeObjectRelease();
    v59 = a1 + v42[16];
    v60 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v59, 1, v60))
    {
      v61 = v45;
      if (*(_QWORD *)(v59 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v62 = v59 + *(int *)(v60 + 20);
      type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v62) == 1)
      {
        v197 = v44;
        v63 = v56;
        v64 = v60;
        swift_bridgeObjectRelease();
        v65 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v66 = v62 + v65[5];
        v67 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v66, 1, v67))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v66, v67);
        v68 = swift_bridgeObjectRelease();
        v69 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v67 - 8) + 8);
        v69(v62 + v65[7], v67, v68);
        v70 = v62 + v65[8];
        v60 = v64;
        v56 = v63;
        v44 = v197;
        if (!_s7Weather24LocationCompositionStateOwet_0(v70, 1, v67))
          ((void (*)(uint64_t, uint64_t))v69)(v70, v67);
      }
      v71 = v59 + *(int *)(v60 + 24);
      v72 = type metadata accessor for DetailComponentAction(0);
      v45 = v61;
      if (!_s7Weather24LocationCompositionStateOwet_0(v71, 1, v72))
      {
        v73 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v71, v73);
      }
    }
    v74 = a1 + *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    v75 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v74, 1, (uint64_t)v75))
    {
      v198 = v60;
      sub_10006BD8C(*(_QWORD *)v74, *(_QWORD *)(v74 + 8), *(_BYTE *)(v74 + 16));
      swift_bridgeObjectRelease();
      v76 = v74 + v75[6];
      v39 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v76, 1, v39))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v76, v39);
      v77 = v74 + v75[7];
      v78 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v77))
      {
        case 0u:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v77, v39);
          goto LABEL_117;
        case 1u:
          goto LABEL_74;
        case 2u:
          ((void (*)(uint64_t, uint64_t))v200)(v77, v202);
          goto LABEL_117;
        case 3u:
          v85 = sub_1000BA294(&qword_100BD30F8);
          goto LABEL_69;
        case 4u:
          v192 = v45;
          if (*(_QWORD *)(v77 + 8))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v86 = v77 + *(int *)(v198 + 20);
          type metadata accessor for NewsArticleComponentViewModel(0);
          if (swift_getEnumCaseMultiPayload(v86) == 1)
          {
            swift_bridgeObjectRelease();
            v188 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v179 = v86 + v188[5];
            v184 = type metadata accessor for URL(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v179, 1, v184))
              (*(void (**)(uint64_t))(*(_QWORD *)(v184 - 8) + 8))(v179);
            v87 = swift_bridgeObjectRelease();
            v180 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v184 - 8) + 8);
            v180(v86 + v188[7], v184, v87);
            v88 = v86 + v188[8];
            if (!_s7Weather24LocationCompositionStateOwet_0(v88, 1, v184))
              ((void (*)(uint64_t, uint64_t))v180)(v88, v184);
          }
          v77 += *(int *)(v198 + 24);
          v89 = type metadata accessor for DetailComponentAction(0);
          v45 = v192;
          if (_s7Weather24LocationCompositionStateOwet_0(v77, 1, v89))
            goto LABEL_117;
          v85 = type metadata accessor for URL(0);
LABEL_69:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(v77, v85);
LABEL_117:
          v121 = v74 + v75[8];
          v122 = v198;
          if (!_s7Weather24LocationCompositionStateOwet_0(v121, 1, v78))
          {
            switch(swift_getEnumCaseMultiPayload(v121))
            {
              case 0u:
LABEL_120:
                v125 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8);
                v123 = v121;
                v124 = v39;
                goto LABEL_165;
              case 1u:
                goto LABEL_140;
              case 2u:
                v123 = v121;
                v125 = (void (*)(uint64_t, uint64_t))v200;
                v124 = v202;
                goto LABEL_165;
              case 3u:
LABEL_121:
                v144 = sub_1000BA294(&qword_100BD30F8);
                goto LABEL_135;
              case 4u:
LABEL_122:
                if (*(_QWORD *)(v121 + 8))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                v145 = v121 + *(int *)(v122 + 20);
                type metadata accessor for NewsArticleComponentViewModel(0);
                if (swift_getEnumCaseMultiPayload(v145) == 1)
                {
                  swift_bridgeObjectRelease();
                  v146 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                  v147 = v145 + v146[5];
                  v148 = type metadata accessor for URL(0);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v147, 1, v148))
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 8))(v147, v148);
                  v149 = swift_bridgeObjectRelease();
                  v150 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v148 - 8) + 8);
                  v150(v145 + v146[7], v148, v149);
                  v151 = v145 + v146[8];
                  if (!_s7Weather24LocationCompositionStateOwet_0(v151, 1, v148))
                    ((void (*)(uint64_t, uint64_t))v150)(v151, v148);
                }
                v152 = v121 + *(int *)(v122 + 24);
                v153 = type metadata accessor for DetailComponentAction(0);
                if (_s7Weather24LocationCompositionStateOwet_0(v152, 1, v153))
                  return;
                v154 = type metadata accessor for URL(0);
                goto LABEL_164;
              case 5u:
LABEL_131:
                if (*(_QWORD *)(v121 + 24))
                {
                  sub_1000D31B4(*(_QWORD *)v121, *(_QWORD *)(v121 + 8), *(_BYTE *)(v121 + 16));
                  swift_bridgeObjectRelease();
                }
                sub_1002387C0(*(_QWORD *)(v121 + 32), *(_QWORD *)(v121 + 40), *(_QWORD *)(v121 + 48), *(_QWORD *)(v121 + 56), *(_QWORD *)(v121 + 64), *(_QWORD *)(v121 + 72), *(_QWORD *)(v121 + 80), *(unsigned __int8 *)(v121 + 88), *(_BYTE *)(v121 + 89));
                return;
              case 6u:
LABEL_134:
                v144 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
LABEL_135:
                v124 = v144;
                v125 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 8);
                v123 = v121;
                goto LABEL_165;
              case 7u:
                type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
                v126 = swift_getEnumCaseMultiPayload(v121);
                if (v126 == 1)
                {
                  swift_bridgeObjectRelease();
                  v155 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                  v56(v121 + v155[5], v55);
                  v156 = v121 + v155[6];
                  v157 = (int *)type metadata accessor for WeatherData(0);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v156, 1, (uint64_t)v157))
                  {
                    swift_bridgeObjectRelease();
                    v158 = v156 + v157[5];
                    v159 = type metadata accessor for Locale(0);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v158, 1, v159))
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 8))(v158, v159);
                    v160 = v156 + v157[6];
                    v161 = type metadata accessor for WeatherDataModel(0);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 8))(v160, v161);
                    v162 = v156 + v157[7];
                    v163 = sub_1000BA294(&qword_100BC3348);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v162, 1, v163))
                      v45(v162, v44);
                    v164 = v156 + v157[8];
                    type metadata accessor for WeatherData.WeatherStatisticsState(0);
                    v165 = swift_getEnumCaseMultiPayload(v164);
                    if (v165 == 1)
                    {
                      v171 = type metadata accessor for WeatherStatisticsModel(0);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 8))(v164, v171);
                    }
                    else if (!v165)
                    {
                      swift_bridgeObjectRelease();
                    }
                    v172 = v156 + v157[9];
                    v173 = type metadata accessor for WeatherDataOverrides(0);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v172, 1, v173))
                    {
                      if (!_s7Weather24LocationCompositionStateOwet_0(v172, 1, v44))
                        v45(v172, v44);
                      v174 = v172 + *(int *)(v173 + 20);
                      if (!_s7Weather24LocationCompositionStateOwet_0(v174, 1, v44))
                        v45(v174, v44);
                    }
                  }
                  swift_bridgeObjectRelease();
                  v170 = v155[8];
LABEL_163:
                  v152 = v121 + v170;
                  v154 = type metadata accessor for WeatherMapOverlayKind(0);
LABEL_164:
                  v124 = v154;
                  v125 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 8);
                  v123 = v152;
LABEL_165:
                  v125(v123, v124);
                }
                else
                {
LABEL_138:
                  if (!v126)
                  {
                    swift_bridgeObjectRelease();
LABEL_140:
                    swift_bridgeObjectRelease();
                  }
                }
                break;
              default:
                return;
            }
          }
          break;
        case 5u:
          if (*(_QWORD *)(v77 + 24))
          {
            sub_1000D31B4(*(_QWORD *)v77, *(_QWORD *)(v77 + 8), *(_BYTE *)(v77 + 16));
            swift_bridgeObjectRelease();
          }
          sub_1002387C0(*(_QWORD *)(v77 + 32), *(_QWORD *)(v77 + 40), *(_QWORD *)(v77 + 48), *(_QWORD *)(v77 + 56), *(_QWORD *)(v77 + 64), *(_QWORD *)(v77 + 72), *(_QWORD *)(v77 + 80), *(unsigned __int8 *)(v77 + 88), *(_BYTE *)(v77 + 89));
          goto LABEL_117;
        case 6u:
          v85 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          goto LABEL_69;
        case 7u:
          type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          v90 = swift_getEnumCaseMultiPayload(v77);
          if (v90 == 1)
          {
            v194 = v45;
            swift_bridgeObjectRelease();
            v103 = type metadata accessor for ConditionDetailMapViewModel(0);
            v56(v77 + *(int *)(v103 + 20), v55);
            v186 = v103;
            v104 = v77 + *(int *)(v103 + 24);
            v105 = type metadata accessor for WeatherData(0);
            v190 = v104;
            v106 = v104;
            v107 = (int *)v105;
            if (!_s7Weather24LocationCompositionStateOwet_0(v106, 1, v105))
            {
              swift_bridgeObjectRelease();
              v182 = v107;
              v108 = v190 + v107[5];
              v109 = type metadata accessor for Locale(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v108, 1, v109))
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 8))(v108, v109);
              v176 = v190 + v182[6];
              v110 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 8))(v176, v110);
              v111 = v190 + v182[7];
              v112 = sub_1000BA294(&qword_100BC3348);
              if (!_s7Weather24LocationCompositionStateOwet_0(v111, 1, v112))
                v194(v111, v44);
              v113 = v190 + v182[8];
              type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v114 = swift_getEnumCaseMultiPayload(v113);
              if (v114 == 1)
              {
                v138 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 8))(v113, v138);
              }
              else if (!v114)
              {
                swift_bridgeObjectRelease();
              }
              v139 = v190 + v182[9];
              v140 = type metadata accessor for WeatherDataOverrides(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v139, 1, v140))
              {
                if (!_s7Weather24LocationCompositionStateOwet_0(v139, 1, v44))
                  v194(v139, v44);
                v141 = v139 + *(int *)(v140 + 20);
                if (!_s7Weather24LocationCompositionStateOwet_0(v141, 1, v44))
                  v194(v141, v44);
              }
            }
            swift_bridgeObjectRelease();
            v142 = v77 + *(int *)(v186 + 32);
            v143 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 8))(v142, v143);
            v45 = v194;
          }
          else if (!v90)
          {
            swift_bridgeObjectRelease();
LABEL_74:
            swift_bridgeObjectRelease();
          }
          goto LABEL_117;
        default:
          goto LABEL_117;
      }
    }
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = (int *)_s11NormalModelVMa(0);
    v4 = a1 + v3[7];
    v5 = type metadata accessor for Date(0);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(v4, v5);
    v6(a1 + v3[8], v5);
    v6(a1 + v3[9], v5);
    v7 = a1 + v3[10];
    v8 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    v9 = a1 + v3[11];
    v10 = type metadata accessor for AttributedString(0);
    v201 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v201(v9, v10);
    swift_bridgeObjectRelease();
    v11 = a1 + v3[13];
    swift_bridgeObjectRelease();
    v12 = (int *)_s14ChartViewModelVMa(0);
    v13 = v11 + v12[5];
    v14 = type metadata accessor for DetailChartDataElement(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = v11 + v12[6];
    v16 = type metadata accessor for Location(0);
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    v17(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v6)(v11 + v12[11], v5, v18);
    v19 = swift_bridgeObjectRelease();
    v199 = v17;
    ((void (*)(uint64_t, uint64_t, __n128))v17)(a1 + v3[14], v16, v19);
    v20 = a1 + v3[15];
    v21 = type metadata accessor for SunEvents(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    v22 = a1 + v3[18];
    v23 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v23))
    {
      v24 = v6;
      if (*(_QWORD *)(v22 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v25 = v22 + *(int *)(v23 + 20);
      type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v25) == 1)
      {
        v195 = v10;
        v26 = v23;
        swift_bridgeObjectRelease();
        v27 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v28 = v25 + v27[5];
        v29 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v28, 1, v29))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
        v30 = swift_bridgeObjectRelease();
        v31 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 8);
        v31(v25 + v27[7], v29, v30);
        v32 = v25 + v27[8];
        v23 = v26;
        v10 = v195;
        if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v29))
          ((void (*)(uint64_t, uint64_t))v31)(v32, v29);
      }
      v33 = v22 + *(int *)(v23 + 24);
      v34 = type metadata accessor for DetailComponentAction(0);
      v6 = v24;
      if (!_s7Weather24LocationCompositionStateOwet_0(v33, 1, v34))
      {
        v35 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v33, v35);
      }
    }
    v36 = a1 + *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    v37 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v36, 1, (uint64_t)v37))
    {
      v196 = v23;
      sub_10006BD8C(*(_QWORD *)v36, *(_QWORD *)(v36 + 8), *(_BYTE *)(v36 + 16));
      swift_bridgeObjectRelease();
      v38 = v36 + v37[6];
      v39 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v38, 1, v39))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v38, v39);
      v40 = v36 + v37[7];
      v41 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v40))
      {
        case 0u:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v40, v39);
          goto LABEL_98;
        case 1u:
          goto LABEL_53;
        case 2u:
          v201(v40, v10);
          goto LABEL_98;
        case 3u:
          v79 = sub_1000BA294(&qword_100BD30F8);
          goto LABEL_48;
        case 4u:
          v191 = v6;
          if (*(_QWORD *)(v40 + 8))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v80 = v40 + *(int *)(v196 + 20);
          type metadata accessor for NewsArticleComponentViewModel(0);
          if (swift_getEnumCaseMultiPayload(v80) == 1)
          {
            swift_bridgeObjectRelease();
            v187 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v177 = v80 + v187[5];
            v183 = type metadata accessor for URL(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v177, 1, v183))
              (*(void (**)(uint64_t))(*(_QWORD *)(v183 - 8) + 8))(v177);
            v81 = swift_bridgeObjectRelease();
            v178 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v183 - 8) + 8);
            v178(v80 + v187[7], v183, v81);
            v82 = v80 + v187[8];
            if (!_s7Weather24LocationCompositionStateOwet_0(v82, 1, v183))
              ((void (*)(uint64_t, uint64_t))v178)(v82, v183);
          }
          v40 += *(int *)(v196 + 24);
          v83 = type metadata accessor for DetailComponentAction(0);
          v6 = v191;
          if (_s7Weather24LocationCompositionStateOwet_0(v40, 1, v83))
            goto LABEL_98;
          v79 = type metadata accessor for URL(0);
LABEL_48:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v40, v79);
LABEL_98:
          v121 = v36 + v37[8];
          v122 = v196;
          if (!_s7Weather24LocationCompositionStateOwet_0(v121, 1, v41))
          {
            switch(swift_getEnumCaseMultiPayload(v121))
            {
              case 0u:
                goto LABEL_120;
              case 1u:
                goto LABEL_140;
              case 2u:
                v123 = v121;
                v124 = v10;
                v125 = v201;
                goto LABEL_165;
              case 3u:
                goto LABEL_121;
              case 4u:
                goto LABEL_122;
              case 5u:
                goto LABEL_131;
              case 6u:
                goto LABEL_134;
              case 7u:
                type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
                v126 = swift_getEnumCaseMultiPayload(v121);
                if (v126 != 1)
                  goto LABEL_138;
                swift_bridgeObjectRelease();
                v127 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                v199(v121 + v127[5], v16);
                v128 = v121 + v127[6];
                v129 = (int *)type metadata accessor for WeatherData(0);
                if (!_s7Weather24LocationCompositionStateOwet_0(v128, 1, (uint64_t)v129))
                {
                  swift_bridgeObjectRelease();
                  v130 = v128 + v129[5];
                  v131 = type metadata accessor for Locale(0);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v130, 1, v131))
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 8))(v130, v131);
                  v132 = v128 + v129[6];
                  v133 = type metadata accessor for WeatherDataModel(0);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(v132, v133);
                  v134 = v128 + v129[7];
                  v135 = sub_1000BA294(&qword_100BC3348);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v134, 1, v135))
                    v6(v134, v5);
                  v136 = v128 + v129[8];
                  type metadata accessor for WeatherData.WeatherStatisticsState(0);
                  v137 = swift_getEnumCaseMultiPayload(v136);
                  if (v137 == 1)
                  {
                    v166 = type metadata accessor for WeatherStatisticsModel(0);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 8))(v136, v166);
                  }
                  else if (!v137)
                  {
                    swift_bridgeObjectRelease();
                  }
                  v167 = v128 + v129[9];
                  v168 = type metadata accessor for WeatherDataOverrides(0);
                  if (!_s7Weather24LocationCompositionStateOwet_0(v167, 1, v168))
                  {
                    if (!_s7Weather24LocationCompositionStateOwet_0(v167, 1, v5))
                      v6(v167, v5);
                    v169 = v167 + *(int *)(v168 + 20);
                    if (!_s7Weather24LocationCompositionStateOwet_0(v169, 1, v5))
                      v6(v169, v5);
                  }
                }
                swift_bridgeObjectRelease();
                v170 = v127[8];
                goto LABEL_163;
              default:
                return;
            }
          }
          break;
        case 5u:
          if (*(_QWORD *)(v40 + 24))
          {
            sub_1000D31B4(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
            swift_bridgeObjectRelease();
          }
          sub_1002387C0(*(_QWORD *)(v40 + 32), *(_QWORD *)(v40 + 40), *(_QWORD *)(v40 + 48), *(_QWORD *)(v40 + 56), *(_QWORD *)(v40 + 64), *(_QWORD *)(v40 + 72), *(_QWORD *)(v40 + 80), *(unsigned __int8 *)(v40 + 88), *(_BYTE *)(v40 + 89));
          goto LABEL_98;
        case 6u:
          v79 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          goto LABEL_48;
        case 7u:
          type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          v84 = swift_getEnumCaseMultiPayload(v40);
          if (v84 == 1)
          {
            v193 = v6;
            swift_bridgeObjectRelease();
            v91 = type metadata accessor for ConditionDetailMapViewModel(0);
            v199(v40 + *(int *)(v91 + 20), v16);
            v185 = v91;
            v92 = v40 + *(int *)(v91 + 24);
            v93 = type metadata accessor for WeatherData(0);
            v189 = v92;
            v94 = v92;
            v95 = (int *)v93;
            if (!_s7Weather24LocationCompositionStateOwet_0(v94, 1, v93))
            {
              swift_bridgeObjectRelease();
              v181 = v95;
              v96 = v189 + v95[5];
              v97 = type metadata accessor for Locale(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v96, 1, v97))
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v96, v97);
              v175 = v189 + v181[6];
              v98 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 8))(v175, v98);
              v99 = v189 + v181[7];
              v100 = sub_1000BA294(&qword_100BC3348);
              if (!_s7Weather24LocationCompositionStateOwet_0(v99, 1, v100))
                v193(v99, v5);
              v101 = v189 + v181[8];
              type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v102 = swift_getEnumCaseMultiPayload(v101);
              if (v102 == 1)
              {
                v115 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 8))(v101, v115);
              }
              else if (!v102)
              {
                swift_bridgeObjectRelease();
              }
              v116 = v189 + v181[9];
              v117 = type metadata accessor for WeatherDataOverrides(0);
              if (!_s7Weather24LocationCompositionStateOwet_0(v116, 1, v117))
              {
                if (!_s7Weather24LocationCompositionStateOwet_0(v116, 1, v5))
                  v193(v116, v5);
                v118 = v116 + *(int *)(v117 + 20);
                if (!_s7Weather24LocationCompositionStateOwet_0(v118, 1, v5))
                  v193(v118, v5);
              }
            }
            swift_bridgeObjectRelease();
            v119 = v40 + *(int *)(v185 + 32);
            v120 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 8))(v119, v120);
            v6 = v193;
          }
          else if (!v84)
          {
            swift_bridgeObjectRelease();
LABEL_53:
            swift_bridgeObjectRelease();
          }
          goto LABEL_98;
        default:
          goto LABEL_98;
      }
    }
  }
}

_QWORD *sub_100573628(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __n128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t, __n128);
  __n128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t, __n128);
  __n128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __n128 v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __n128 v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  void (*v154)(char *, char *, uint64_t, __n128);
  __n128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  void (*v167)(char *, char *, uint64_t, __n128);
  __n128 v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  const void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  const void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  void (*__dst)(char *, char *, uint64_t, __n128);
  void (*__dsta)(char *, char *, uint64_t, __n128);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v235 = a3;
    v63 = a2[1];
    *a1 = *a2;
    a1[1] = v63;
    v64 = a2[3];
    a1[2] = a2[2];
    a1[3] = v64;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    v65 = (int *)_s10PolarModelVMa(0);
    v66 = v65[7];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    v233 = type metadata accessor for Date(0);
    v69 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v233 - 8) + 16);
    __dsta = v69;
    swift_bridgeObjectRetain();
    v70 = swift_bridgeObjectRetain();
    v69(v67, v68, v233, v70);
    v71 = v65[8];
    v72 = (char *)a1 + v71;
    v73 = (char *)a2 + v71;
    v74 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
    v75 = v65[9];
    v76 = (char *)a1 + v75;
    v77 = (char *)a2 + v75;
    v226 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v226 - 8) + 16))(v76, v77);
    *(_QWORD *)((char *)a1 + v65[10]) = *(_QWORD *)((char *)a2 + v65[10]);
    v78 = v65[11];
    v79 = (_QWORD *)((char *)a1 + v78);
    v80 = (_QWORD *)((char *)a2 + v78);
    v81 = v80[1];
    *v79 = *v80;
    v79[1] = v81;
    v82 = v65[12];
    v83 = (char *)a1 + v82;
    v239 = a2;
    v84 = (_QWORD *)((char *)a2 + v82);
    *(_QWORD *)((char *)a1 + v82) = *v84;
    v85 = (int *)_s14ChartViewModelVMa(0);
    v86 = v85[5];
    v228 = &v83[v86];
    v237 = a1;
    v87 = (char *)v84 + v86;
    v88 = type metadata accessor for DetailChartDataElement(0);
    v89 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v90 = swift_bridgeObjectRetain();
    v89(v228, v87, v88, v90);
    v91 = v85[6];
    v92 = &v83[v91];
    v93 = (char *)v84 + v91;
    v94 = type metadata accessor for Location(0);
    v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
    v95(v92, v93, v94);
    v96 = v85[7];
    v97 = &v83[v96];
    v98 = (_QWORD *)((char *)v84 + v96);
    v99 = *v98;
    v100 = v98[1];
    *(_QWORD *)v97 = v99;
    *((_QWORD *)v97 + 1) = v100;
    *(_QWORD *)&v83[v85[8]] = *(_QWORD *)((char *)v84 + v85[8]);
    *(_QWORD *)&v83[v85[9]] = *(_QWORD *)((char *)v84 + v85[9]);
    *(_QWORD *)&v83[v85[10]] = *(_QWORD *)((char *)v84 + v85[10]);
    v101 = v85[11];
    v229 = &v83[v101];
    v102 = (char *)v84 + v101;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v103 = swift_bridgeObjectRetain();
    v104 = v102;
    a1 = v237;
    __dsta(v229, v104, v233, v103);
    v105 = v85[12];
    v106 = *(_QWORD *)((char *)v84 + v105);
    v107 = v239;
    *(_QWORD *)&v83[v105] = v106;
    v108 = v65[13];
    v109 = (char *)v237 + v108;
    v110 = (char *)v239 + v108;
    v111 = swift_bridgeObjectRetain();
    ((void (*)(char *, char *, uint64_t, __n128))v95)(v109, v110, v94, v111);
    *(_QWORD *)((char *)v237 + v65[15]) = *(_QWORD *)((char *)v239 + v65[15]);
    v112 = v65[16];
    v113 = (_QWORD *)((char *)v237 + v112);
    v114 = (_QWORD *)((char *)v239 + v112);
    v115 = type metadata accessor for DetailComponentContainerViewModel(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v115))
    {
      v116 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    }
    else
    {
      v119 = v114[1];
      if (v119)
      {
        *v113 = *v114;
        v113[1] = v119;
        v120 = v114[3];
        v113[2] = v114[2];
        v113[3] = v120;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v134 = *((_OWORD *)v114 + 1);
        *(_OWORD *)v113 = *(_OWORD *)v114;
        *((_OWORD *)v113 + 1) = v134;
      }
      v135 = *(int *)(v115 + 20);
      v136 = (_QWORD *)((char *)v113 + v135);
      v137 = (_QWORD *)((char *)v114 + v135);
      v138 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v137) == 1)
      {
        v224 = v138;
        v139 = v115;
        v140 = v137[1];
        *v136 = *v137;
        v136[1] = v140;
        v141 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v142 = v141[5];
        v143 = (char *)v136 + v142;
        v144 = (char *)v137 + v142;
        v145 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v144, 1, v145))
        {
          v146 = sub_1000BA294(&qword_100BD4280);
          memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v144, v145);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v143, 0, 1, v145);
        }
        v160 = v141[6];
        v161 = (_QWORD *)((char *)v136 + v160);
        v162 = (_QWORD *)((char *)v137 + v160);
        v163 = v162[1];
        *v161 = *v162;
        v161[1] = v163;
        v164 = v141[7];
        v165 = (char *)v136 + v164;
        v166 = (char *)v137 + v164;
        v167 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v145 - 8) + 16);
        v168 = swift_bridgeObjectRetain();
        v167(v165, v166, v145, v168);
        v169 = v141[8];
        v170 = (char *)v136 + v169;
        v171 = (char *)v137 + v169;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v137 + v169, 1, v145))
        {
          v172 = sub_1000BA294(&qword_100BD4280);
          memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v167)(v170, v171, v145);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v170, 0, 1, v145);
        }
        v115 = v139;
        *((_BYTE *)v136 + v141[9]) = *((_BYTE *)v137 + v141[9]);
        swift_storeEnumTagMultiPayload(v136, v224, 1);
        a1 = v237;
        v107 = v239;
      }
      else
      {
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
      }
      v196 = *(int *)(v115 + 24);
      v197 = (char *)v113 + v196;
      v198 = (char *)v114 + v196;
      v199 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v198, 1, v199))
      {
        v200 = sub_1000BA294(&qword_100BD3100);
        memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
      }
      else
      {
        v201 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 16))(v197, v198, v201);
        v202 = sub_1000BA294(&qword_100BC5FE8);
        v197[*(int *)(v202 + 48)] = v198[*(int *)(v202 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v197, 0, 1, v199);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v115);
    }
    v203 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    v204 = (char *)a1 + v203;
    v205 = (uint64_t)v107 + v203;
    v206 = type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v205, 1, v206))
    {
      v208 = *(_QWORD *)v205;
      v209 = *(_QWORD *)(v205 + 8);
      v210 = *(_BYTE *)(v205 + 16);
      sub_1000B2044(*(_QWORD *)v205, v209, v210);
      *(_QWORD *)v204 = v208;
      *((_QWORD *)v204 + 1) = v209;
      v204[16] = v210;
      v211 = *(_QWORD *)(v205 + 32);
      *((_QWORD *)v204 + 3) = *(_QWORD *)(v205 + 24);
      *((_QWORD *)v204 + 4) = v211;
      v212 = *(int *)(v206 + 24);
      v213 = &v204[v212];
      v214 = (const void *)(v205 + v212);
      v215 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v214, 1, v215))
      {
        v216 = sub_1000BA294(&qword_100BC3368);
        memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v215 - 8) + 16))(v213, v214, v215);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v213, 0, 1, v215);
      }
      v217 = v205 + *(int *)(v206 + 28);
      type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      v218 = (char *)&loc_1005743F0 + 4 * byte_1009B0190[swift_getEnumCaseMultiPayload(v217)];
      __asm { BR              X10 }
    }
    v207 = sub_1000BA294(&qword_100BC68B8);
    memcpy(v204, (const void *)v205, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
    v219 = a1;
    v220 = v235;
    v221 = 1;
    goto LABEL_52;
  }
  if (!EnumCaseMultiPayload)
  {
    v234 = a3;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = (int *)_s11NormalModelVMa(0);
    v11 = v10[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v232 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v232 - 8) + 16);
    __dst = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    v14(v12, v13, v232, v15);
    ((void (*)(char *, char *, uint64_t))v14)((char *)a1 + v10[8], (char *)a2 + v10[8], v232);
    ((void (*)(char *, char *, uint64_t))v14)((char *)a1 + v10[9], (char *)a2 + v10[9], v232);
    v16 = v10[10];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = v10[11];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v225 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v225 - 8) + 16))(v21, v22);
    *(_QWORD *)((char *)a1 + v10[12]) = *(_QWORD *)((char *)a2 + v10[12]);
    v23 = v10[13];
    v24 = (char *)a1 + v23;
    v238 = a2;
    v25 = (_QWORD *)((char *)a2 + v23);
    *(_QWORD *)((char *)a1 + v23) = *v25;
    v26 = (int *)_s14ChartViewModelVMa(0);
    v27 = v26[5];
    v28 = &v24[v27];
    v29 = (char *)v25 + v27;
    v236 = a1;
    v30 = type metadata accessor for DetailChartDataElement(0);
    v31 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    v32 = swift_bridgeObjectRetain();
    v31(v28, v29, v30, v32);
    v33 = v26[6];
    v34 = &v24[v33];
    v35 = (char *)v25 + v33;
    v36 = type metadata accessor for Location(0);
    v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
    v37(v34, v35, v36);
    v38 = v26[7];
    v39 = &v24[v38];
    v40 = (_QWORD *)((char *)v25 + v38);
    v41 = *v40;
    v42 = v40[1];
    *(_QWORD *)v39 = v41;
    *((_QWORD *)v39 + 1) = v42;
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)((char *)v25 + v26[8]);
    *(_QWORD *)&v24[v26[9]] = *(_QWORD *)((char *)v25 + v26[9]);
    *(_QWORD *)&v24[v26[10]] = *(_QWORD *)((char *)v25 + v26[10]);
    v43 = v26[11];
    v227 = &v24[v43];
    v44 = (char *)v25 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = swift_bridgeObjectRetain();
    v46 = v44;
    a1 = v236;
    __dst(v227, v46, v232, v45);
    v47 = v26[12];
    v48 = *(_QWORD *)((char *)v25 + v47);
    v49 = v238;
    *(_QWORD *)&v24[v47] = v48;
    v50 = v10[14];
    v51 = (char *)v236 + v50;
    v52 = (char *)v238 + v50;
    v53 = swift_bridgeObjectRetain();
    ((void (*)(char *, char *, uint64_t, __n128))v37)(v51, v52, v36, v53);
    v54 = v10[15];
    v55 = (char *)v236 + v54;
    v56 = (char *)v238 + v54;
    v57 = type metadata accessor for SunEvents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
    *(_QWORD *)((char *)v236 + v10[16]) = *(_QWORD *)((char *)v238 + v10[16]);
    v58 = v10[18];
    v59 = (_QWORD *)((char *)v236 + v58);
    v60 = (_QWORD *)((char *)v238 + v58);
    v61 = type metadata accessor for DetailComponentContainerViewModel(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v60, 1, v61))
    {
      v62 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v117 = v60[1];
      if (v117)
      {
        *v59 = *v60;
        v59[1] = v117;
        v118 = v60[3];
        v59[2] = v60[2];
        v59[3] = v118;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v121 = *((_OWORD *)v60 + 1);
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *((_OWORD *)v59 + 1) = v121;
      }
      v122 = *(int *)(v61 + 20);
      v123 = (_QWORD *)((char *)v59 + v122);
      v124 = (_QWORD *)((char *)v60 + v122);
      v125 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v124) == 1)
      {
        v223 = v125;
        v126 = v61;
        v127 = v124[1];
        *v123 = *v124;
        v123[1] = v127;
        v128 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v129 = v128[5];
        v130 = (char *)v123 + v129;
        v131 = (char *)v124 + v129;
        v132 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v131, 1, v132))
        {
          v133 = sub_1000BA294(&qword_100BD4280);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v130, v131, v132);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v130, 0, 1, v132);
        }
        v147 = v128[6];
        v148 = (_QWORD *)((char *)v123 + v147);
        v149 = (_QWORD *)((char *)v124 + v147);
        v150 = v149[1];
        *v148 = *v149;
        v148[1] = v150;
        v151 = v128[7];
        v152 = (char *)v123 + v151;
        v153 = (char *)v124 + v151;
        v154 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v132 - 8) + 16);
        v155 = swift_bridgeObjectRetain();
        v154(v152, v153, v132, v155);
        v156 = v128[8];
        v157 = (char *)v123 + v156;
        v158 = (char *)v124 + v156;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v124 + v156, 1, v132))
        {
          v159 = sub_1000BA294(&qword_100BD4280);
          memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v154)(v157, v158, v132);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v157, 0, 1, v132);
        }
        v61 = v126;
        *((_BYTE *)v123 + v128[9]) = *((_BYTE *)v124 + v128[9]);
        swift_storeEnumTagMultiPayload(v123, v223, 1);
        a1 = v236;
        v49 = v238;
      }
      else
      {
        memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
      }
      v173 = *(int *)(v61 + 24);
      v174 = (char *)v59 + v173;
      v175 = (char *)v60 + v173;
      v176 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v175, 1, v176))
      {
        v177 = sub_1000BA294(&qword_100BD3100);
        memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
      }
      else
      {
        v178 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v174, v175, v178);
        v179 = sub_1000BA294(&qword_100BC5FE8);
        v174[*(int *)(v179 + 48)] = v175[*(int *)(v179 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v174, 0, 1, v176);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v59, 0, 1, v61);
    }
    v180 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    v181 = (char *)a1 + v180;
    v182 = (uint64_t)v49 + v180;
    v183 = type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v182, 1, v183))
    {
      v185 = *(_QWORD *)v182;
      v186 = *(_QWORD *)(v182 + 8);
      v187 = *(_BYTE *)(v182 + 16);
      sub_1000B2044(*(_QWORD *)v182, v186, v187);
      *(_QWORD *)v181 = v185;
      *((_QWORD *)v181 + 1) = v186;
      v181[16] = v187;
      v188 = *(_QWORD *)(v182 + 32);
      *((_QWORD *)v181 + 3) = *(_QWORD *)(v182 + 24);
      *((_QWORD *)v181 + 4) = v188;
      v189 = *(int *)(v183 + 24);
      v190 = &v181[v189];
      v191 = (const void *)(v182 + v189);
      v192 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v191, 1, v192))
      {
        v193 = sub_1000BA294(&qword_100BC3368);
        memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v192 - 8) + 16))(v190, v191, v192);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v190, 0, 1, v192);
      }
      v194 = v182 + *(int *)(v183 + 28);
      type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      v195 = (char *)&loc_10057418C + 4 * byte_1009B01A0[swift_getEnumCaseMultiPayload(v194)];
      __asm { BR              X10 }
    }
    v184 = sub_1000BA294(&qword_100BC68B8);
    memcpy(v181, (const void *)v182, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
    v219 = a1;
    v220 = v234;
    v221 = 0;
LABEL_52:
    swift_storeEnumTagMultiPayload(v219, v220, v221);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_1005768A4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  __n128 v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t, __n128);
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  int *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __n128 v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  void (*v132)(char *, char *, uint64_t, __n128);
  __n128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  void (*v144)(char *, char *, uint64_t, __n128);
  __n128 v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  char *v166;
  const void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 v186;
  uint64_t v187;
  char *v188;
  const void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  void (*v208)(char *, char *, uint64_t, __n128);
  void (*v209)(char *, char *, uint64_t, __n128);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;

  v3 = (_QWORD *)a1;
  if ((_QWORD *)a1 != a2)
  {
    sub_1000215BC(a1, type metadata accessor for SunriseSunsetDetailViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v213 = a3;
      *v3 = *a2;
      v3[1] = a2[1];
      v3[2] = a2[2];
      v3[3] = a2[3];
      *((_BYTE *)v3 + 32) = *((_BYTE *)a2 + 32);
      v56 = (int *)_s10PolarModelVMa(0);
      v57 = v56[7];
      v58 = (char *)v3 + v57;
      v59 = (char *)a2 + v57;
      v60 = type metadata accessor for Date(0);
      v61 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v60 - 8) + 16);
      v209 = v61;
      v211 = v60;
      swift_bridgeObjectRetain();
      v62 = swift_bridgeObjectRetain();
      v61(v58, v59, v60, v62);
      v63 = v56[8];
      v64 = (char *)v3 + v63;
      v65 = (char *)a2 + v63;
      v66 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
      v67 = v56[9];
      v68 = (char *)v3 + v67;
      v69 = (char *)a2 + v67;
      v202 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v202 - 8) + 16))(v68, v69);
      *(_QWORD *)((char *)v3 + v56[10]) = *(_QWORD *)((char *)a2 + v56[10]);
      v70 = v56[11];
      v71 = (_QWORD *)((char *)v3 + v70);
      v72 = (_QWORD *)((char *)a2 + v70);
      *v71 = *v72;
      v71[1] = v72[1];
      v73 = v56[12];
      v74 = (char *)v3 + v73;
      v217 = a2;
      v75 = (_QWORD *)((char *)a2 + v73);
      *(_QWORD *)((char *)v3 + v73) = *v75;
      v76 = (int *)_s14ChartViewModelVMa(0);
      v77 = v76[5];
      v206 = &v74[v77];
      v78 = (char *)v75 + v77;
      v215 = v3;
      v79 = type metadata accessor for DetailChartDataElement(0);
      v80 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v79 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v81 = swift_bridgeObjectRetain();
      v80(v206, v78, v79, v81);
      v82 = v76[6];
      v83 = &v74[v82];
      v84 = (char *)v75 + v82;
      v85 = type metadata accessor for Location(0);
      v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16);
      v86(v83, v84, v85);
      v87 = v76[7];
      v88 = &v74[v87];
      v89 = (_QWORD *)((char *)v75 + v87);
      *(_QWORD *)v88 = *v89;
      *((_QWORD *)v88 + 1) = v89[1];
      *(_QWORD *)&v74[v76[8]] = *(_QWORD *)((char *)v75 + v76[8]);
      *(_QWORD *)&v74[v76[9]] = *(_QWORD *)((char *)v75 + v76[9]);
      *(_QWORD *)&v74[v76[10]] = *(_QWORD *)((char *)v75 + v76[10]);
      v90 = v76[11];
      v204 = (char *)v75 + v90;
      v207 = &v74[v90];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v91 = swift_bridgeObjectRetain();
      v209(v207, v204, v211, v91);
      v92 = v76[12];
      v93 = *(_QWORD *)((char *)v75 + v92);
      v94 = v217;
      *(_QWORD *)&v74[v92] = v93;
      v95 = v56[13];
      v96 = (char *)v215 + v95;
      v97 = (char *)v217 + v95;
      v98 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v86)(v96, v97, v85, v98);
      *(_QWORD *)((char *)v215 + v56[15]) = *(_QWORD *)((char *)v217 + v56[15]);
      v99 = v56[16];
      v3 = v215;
      v100 = (_QWORD *)((char *)v215 + v99);
      v101 = (_QWORD *)((char *)v217 + v99);
      v102 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v101, 1, v102))
      {
        v103 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
        if (v101[1])
        {
          *v100 = *v101;
          v100[1] = v101[1];
          v100[2] = v101[2];
          v100[3] = v101[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v115 = *((_OWORD *)v101 + 1);
          *(_OWORD *)v100 = *(_OWORD *)v101;
          *((_OWORD *)v100 + 1) = v115;
        }
        v116 = *(int *)(v102 + 20);
        v117 = (_QWORD *)((char *)v100 + v116);
        v118 = (_QWORD *)((char *)v101 + v116);
        v119 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v118) == 1)
        {
          v199 = v119;
          *v117 = *v118;
          v117[1] = v118[1];
          v120 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v121 = v120[5];
          v122 = (char *)v117 + v121;
          v123 = (char *)v118 + v121;
          v124 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          v201 = (void *)v102;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v123, 1, v124))
          {
            v125 = sub_1000BA294(&qword_100BD4280);
            memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v122, 0, 1, v124);
          }
          v138 = v120[6];
          v139 = (_QWORD *)((char *)v117 + v138);
          v140 = (_QWORD *)((char *)v118 + v138);
          *v139 = *v140;
          v139[1] = v140[1];
          v141 = v120[7];
          v142 = (char *)v117 + v141;
          v143 = (char *)v118 + v141;
          v144 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v124 - 8) + 16);
          v145 = swift_bridgeObjectRetain();
          v144(v142, v143, v124, v145);
          v146 = v120[8];
          v147 = (char *)v117 + v146;
          v148 = (char *)v118 + v146;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v118 + v146, 1, v124))
          {
            v149 = sub_1000BA294(&qword_100BD4280);
            memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v144)(v147, v148, v124);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v147, 0, 1, v124);
          }
          v102 = (uint64_t)v201;
          *((_BYTE *)v117 + v120[9]) = *((_BYTE *)v118 + v120[9]);
          swift_storeEnumTagMultiPayload(v117, v199, 1);
          v3 = v215;
          v94 = v217;
        }
        else
        {
          memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
        }
        v172 = *(int *)(v102 + 24);
        v173 = (char *)v100 + v172;
        v174 = (char *)v101 + v172;
        v175 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v174, 1, v175))
        {
          v176 = sub_1000BA294(&qword_100BD3100);
          memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
        }
        else
        {
          v177 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v173, v174, v177);
          v178 = sub_1000BA294(&qword_100BC5FE8);
          v173[*(int *)(v178 + 48)] = v174[*(int *)(v178 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v173, 0, 1, v175);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v100, 0, 1, v102);
      }
      v179 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
      v180 = (char *)v3 + v179;
      v181 = (uint64_t)v94 + v179;
      v182 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v181, 1, v182))
      {
        v184 = *(_QWORD *)v181;
        v185 = *(_QWORD *)(v181 + 8);
        v186 = *(_BYTE *)(v181 + 16);
        sub_1000B2044(*(_QWORD *)v181, v185, v186);
        *(_QWORD *)v180 = v184;
        *((_QWORD *)v180 + 1) = v185;
        v180[16] = v186;
        *((_QWORD *)v180 + 3) = *(_QWORD *)(v181 + 24);
        *((_QWORD *)v180 + 4) = *(_QWORD *)(v181 + 32);
        v187 = *(int *)(v182 + 24);
        v188 = &v180[v187];
        v189 = (const void *)(v181 + v187);
        v190 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v189, 1, v190))
        {
          v191 = sub_1000BA294(&qword_100BC3368);
          memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v190 - 8) + 16))(v188, v189, v190);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v188, 0, 1, v190);
        }
        v192 = v181 + *(int *)(v182 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v193 = (char *)&loc_1005776EC + 4 * byte_1009B01B0[swift_getEnumCaseMultiPayload(v192)];
        __asm { BR              X10 }
      }
      v183 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v180, (const void *)v181, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
      v194 = v3;
      v195 = v213;
      v196 = 1;
      goto LABEL_53;
    }
    if (!EnumCaseMultiPayload)
    {
      v212 = a3;
      *v3 = *a2;
      v3[1] = a2[1];
      v3[2] = a2[2];
      v3[3] = a2[3];
      v3[4] = a2[4];
      v3[5] = a2[5];
      v7 = (int *)_s11NormalModelVMa(0);
      v8 = v7[7];
      v9 = (char *)v3 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date(0);
      v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
      v208 = v12;
      v210 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = swift_bridgeObjectRetain();
      v12(v9, v10, v11, v13);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v3 + v7[8], (char *)a2 + v7[8], v11);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v3 + v7[9], (char *)a2 + v7[9], v11);
      v14 = v7[10];
      v15 = (char *)v3 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v18 = v7[11];
      v19 = (char *)v3 + v18;
      v20 = (char *)a2 + v18;
      v203 = type metadata accessor for AttributedString(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v203 - 8) + 16))(v19, v20);
      *(_QWORD *)((char *)v3 + v7[12]) = *(_QWORD *)((char *)a2 + v7[12]);
      v21 = v7[13];
      v22 = (char *)v3 + v21;
      v216 = a2;
      v23 = (_QWORD *)((char *)a2 + v21);
      *(_QWORD *)((char *)v3 + v21) = *v23;
      v24 = (int *)_s14ChartViewModelVMa(0);
      v25 = v24[5];
      v26 = &v22[v25];
      v27 = (char *)v23 + v25;
      v28 = type metadata accessor for DetailChartDataElement(0);
      v214 = v3;
      v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v30 = swift_bridgeObjectRetain();
      v29(v26, v27, v28, v30);
      v31 = v24[6];
      v32 = &v22[v31];
      v33 = (char *)v23 + v31;
      v34 = type metadata accessor for Location(0);
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v35(v32, v33, v34);
      v36 = v24[7];
      v37 = &v22[v36];
      v38 = (_QWORD *)((char *)v23 + v36);
      *(_QWORD *)v37 = *v38;
      *((_QWORD *)v37 + 1) = v38[1];
      *(_QWORD *)&v22[v24[8]] = *(_QWORD *)((char *)v23 + v24[8]);
      *(_QWORD *)&v22[v24[9]] = *(_QWORD *)((char *)v23 + v24[9]);
      *(_QWORD *)&v22[v24[10]] = *(_QWORD *)((char *)v23 + v24[10]);
      v39 = v24[11];
      v205 = &v22[v39];
      v40 = (char *)v23 + v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41 = swift_bridgeObjectRetain();
      v208(v205, v40, v210, v41);
      *(_QWORD *)&v22[v24[12]] = *(_QWORD *)((char *)v23 + v24[12]);
      v42 = v7[14];
      v43 = v216;
      v44 = (char *)v214 + v42;
      v45 = (char *)v216 + v42;
      v46 = swift_bridgeObjectRetain();
      ((void (*)(char *, char *, uint64_t, __n128))v35)(v44, v45, v34, v46);
      v47 = v7[15];
      v48 = (char *)v214 + v47;
      v49 = (char *)v216 + v47;
      v50 = type metadata accessor for SunEvents(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      *(_QWORD *)((char *)v214 + v7[16]) = *(_QWORD *)((char *)v216 + v7[16]);
      v51 = v7[18];
      v3 = v214;
      v52 = (_QWORD *)((char *)v214 + v51);
      v53 = (_QWORD *)((char *)v216 + v51);
      v54 = type metadata accessor for DetailComponentContainerViewModel(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
      {
        v55 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        if (v53[1])
        {
          *v52 = *v53;
          v52[1] = v53[1];
          v52[2] = v53[2];
          v52[3] = v53[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v104 = *((_OWORD *)v53 + 1);
          *(_OWORD *)v52 = *(_OWORD *)v53;
          *((_OWORD *)v52 + 1) = v104;
        }
        v105 = *(int *)(v54 + 20);
        v106 = (_QWORD *)((char *)v52 + v105);
        v107 = (_QWORD *)((char *)v53 + v105);
        v108 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v107) == 1)
        {
          v198 = v108;
          *v106 = *v107;
          v106[1] = v107[1];
          v109 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v110 = v109[5];
          v111 = (char *)v106 + v110;
          v112 = (char *)v107 + v110;
          v113 = type metadata accessor for URL(0);
          swift_bridgeObjectRetain();
          v200 = (void *)v54;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v112, 1, v113))
          {
            v114 = sub_1000BA294(&qword_100BD4280);
            memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v111, 0, 1, v113);
          }
          v126 = v109[6];
          v127 = (_QWORD *)((char *)v106 + v126);
          v128 = (_QWORD *)((char *)v107 + v126);
          *v127 = *v128;
          v127[1] = v128[1];
          v129 = v109[7];
          v130 = (char *)v106 + v129;
          v131 = (char *)v107 + v129;
          v132 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v113 - 8) + 16);
          v133 = swift_bridgeObjectRetain();
          v132(v130, v131, v113, v133);
          v134 = v109[8];
          v135 = (char *)v106 + v134;
          v136 = (char *)v107 + v134;
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v107 + v134, 1, v113))
          {
            v137 = sub_1000BA294(&qword_100BD4280);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            ((void (*)(char *, char *, uint64_t))v132)(v135, v136, v113);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v135, 0, 1, v113);
          }
          v3 = v214;
          v54 = (uint64_t)v200;
          *((_BYTE *)v106 + v109[9]) = *((_BYTE *)v107 + v109[9]);
          swift_storeEnumTagMultiPayload(v106, v198, 1);
          v43 = v216;
        }
        else
        {
          memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        v150 = *(int *)(v54 + 24);
        v151 = (char *)v52 + v150;
        v152 = (char *)v53 + v150;
        v153 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v152, 1, v153))
        {
          v154 = sub_1000BA294(&qword_100BD3100);
          memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
        }
        else
        {
          v155 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v151, v152, v155);
          v156 = sub_1000BA294(&qword_100BC5FE8);
          v151[*(int *)(v156 + 48)] = v152[*(int *)(v156 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v151, 0, 1, v153);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
      }
      v157 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
      v158 = (char *)v3 + v157;
      v159 = (uint64_t)v43 + v157;
      v160 = type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v159, 1, v160))
      {
        v162 = *(_QWORD *)v159;
        v163 = *(_QWORD *)(v159 + 8);
        v164 = *(_BYTE *)(v159 + 16);
        sub_1000B2044(*(_QWORD *)v159, v163, v164);
        *(_QWORD *)v158 = v162;
        *((_QWORD *)v158 + 1) = v163;
        v158[16] = v164;
        *((_QWORD *)v158 + 3) = *(_QWORD *)(v159 + 24);
        *((_QWORD *)v158 + 4) = *(_QWORD *)(v159 + 32);
        v165 = *(int *)(v160 + 24);
        v166 = &v158[v165];
        v167 = (const void *)(v159 + v165);
        v168 = type metadata accessor for WeatherDescription(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v167, 1, v168))
        {
          v169 = sub_1000BA294(&qword_100BC3368);
          memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v168 - 8) + 16))(v166, v167, v168);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v166, 0, 1, v168);
        }
        v170 = v159 + *(int *)(v160 + 28);
        type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        v171 = (char *)&loc_10057748C + 4 * byte_1009B01C0[swift_getEnumCaseMultiPayload(v170)];
        __asm { BR              X10 }
      }
      v161 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v158, (const void *)v159, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
      v194 = v3;
      v195 = v212;
      v196 = 0;
LABEL_53:
      swift_storeEnumTagMultiPayload(v194, v195, v196);
      return v3;
    }
    memcpy(v3, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return v3;
}

uint64_t type metadata accessor for SunriseSunsetDetailViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF1918;
  if (!qword_100BF1918)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunriseSunsetDetailViewModel);
  return result;
}

_OWORD *sub_100579D38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  char *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  _OWORD *v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  char *v154;
  uint64_t v155;
  _OWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  _OWORD *v162;
  char *v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  int *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  _OWORD *v282;
  char *v283;
  uint64_t v284;
  _OWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  void (*v300)(char *, char *, uint64_t);
  uint64_t v301;
  uint64_t v302;
  char *v303;
  int *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  _OWORD *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  _OWORD *v334;
  _OWORD *v335;
  uint64_t v336;
  _OWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  int *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  void (*v352)(char *, char *, uint64_t);
  uint64_t v353;
  uint64_t v354;
  int *v355;
  uint64_t v356;
  _OWORD *v357;
  _OWORD *v358;
  int *v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  void *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  _OWORD *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _OWORD *v436;
  char *v437;
  char *v438;
  uint64_t v439;
  char *v440;
  char *v442;
  _OWORD *v443;
  char *v444;
  int *v445;
  uint64_t v446;
  void *v447;
  char *v448;
  void *v449;
  void (*v450)(char *, char *, uint64_t);
  char *v451;
  uint64_t v452;
  char *v453;
  int *v454;
  void (*v455)(char *, char *, uint64_t);
  uint64_t v456;
  int *v457;
  _OWORD *v458;
  _OWORD *v459;
  uint64_t v460;
  _OWORD *v461;
  _OWORD *v462;
  uint64_t v463;
  uint64_t v464;
  _BYTE *__dst;
  _OWORD *__dsta;
  _OWORD *__dstb;
  _OWORD *__dstc;
  uint64_t v469;
  void (*v470)(char *, char *, uint64_t);
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  void (*v479)(char *, char *, uint64_t);
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  void (*v483)(char *, char *, uint64_t);
  uint64_t v484;
  void (*v485)(char *, char *, uint64_t);
  uint64_t v486;
  _OWORD *v487;
  uint64_t v488;
  uint64_t v489;
  void (*v490)(char *, char *);
  int *v491;
  uint64_t v492;
  void (*v493)(char *, char *);
  uint64_t v494;
  uint64_t v495;
  void (*v496)(char *, char *, uint64_t);
  _OWORD *v497;
  _OWORD *v498;
  uint64_t v499;
  void (*v500)(char *, char *, uint64_t);
  _OWORD *v501;
  _OWORD *v502;
  uint64_t v503;
  void (*v504)(char *, char *, uint64_t);
  void (*v505)(char *, char *, uint64_t);
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
  if (EnumCaseMultiPayload == 1)
  {
    v510 = a3;
    v44 = a2[1];
    *a1 = *a2;
    a1[1] = v44;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    v45 = (int *)_s10PolarModelVMa(0);
    v46 = v45[7];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v506 = type metadata accessor for Date(0);
    v500 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v506 - 8) + 32);
    v500(v47, v48, v506);
    v49 = v45[8];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    v52 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
    v53 = v45[9];
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    v56 = type metadata accessor for AttributedString(0);
    v490 = *(void (**)(char *, char *))(*(_QWORD *)(v56 - 8) + 32);
    v494 = v56;
    v490(v54, v55);
    *(_QWORD *)((char *)a1 + v45[10]) = *(_QWORD *)((char *)a2 + v45[10]);
    *(_OWORD *)((char *)a1 + v45[11]) = *(_OWORD *)((char *)a2 + v45[11]);
    v57 = v45[12];
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);
    v60 = (int *)_s14ChartViewModelVMa(0);
    v61 = v60[5];
    v62 = &v58[v61];
    v63 = &v59[v61];
    v64 = type metadata accessor for DetailChartDataElement(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
    v65 = v60[6];
    v66 = &v58[v65];
    v67 = &v59[v65];
    v68 = type metadata accessor for Location(0);
    v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
    v69(v66, v67, v68);
    *(_OWORD *)&v58[v60[7]] = *(_OWORD *)&v59[v60[7]];
    *(_QWORD *)&v58[v60[8]] = *(_QWORD *)&v59[v60[8]];
    *(_QWORD *)&v58[v60[9]] = *(_QWORD *)&v59[v60[9]];
    *(_QWORD *)&v58[v60[10]] = *(_QWORD *)&v59[v60[10]];
    v500(&v58[v60[11]], &v59[v60[11]], v506);
    *(_QWORD *)&v58[v60[12]] = *(_QWORD *)&v59[v60[12]];
    v483 = v69;
    v486 = v68;
    v70 = v68;
    v71 = a2;
    v69((char *)a1 + v45[13], (char *)a2 + v45[13], v70);
    *(_QWORD *)((char *)a1 + v45[15]) = *(_QWORD *)((char *)a2 + v45[15]);
    v72 = v45[16];
    v73 = (_OWORD *)((char *)a1 + v72);
    v74 = (_OWORD *)((char *)a2 + v72);
    v75 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v74, 1, v75))
    {
      v76 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      v77 = v510;
    }
    else
    {
      v90 = v74[1];
      *v73 = *v74;
      v73[1] = v90;
      v91 = *(int *)(v75 + 20);
      v92 = (char *)v73 + v91;
      v93 = (char *)v74 + v91;
      v94 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v93) == 1)
      {
        v469 = v75;
        *(_OWORD *)v92 = *(_OWORD *)v93;
        v95 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v96 = v95[5];
        v97 = &v92[v96];
        v98 = &v93[v96];
        v99 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v98, 1, v99))
        {
          v100 = sub_1000BA294(&qword_100BD4280);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32);
        }
        else
        {
          v107 = v98;
          v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32);
          v101(v97, v107, v99);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v97, 0, 1, v99);
        }
        *(_OWORD *)&v92[v95[6]] = *(_OWORD *)&v93[v95[6]];
        v479 = v101;
        v101(&v92[v95[7]], &v93[v95[7]], v99);
        v108 = v95[8];
        v109 = &v92[v108];
        v110 = &v93[v108];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v93[v108], 1, v99))
        {
          v111 = sub_1000BA294(&qword_100BD4280);
          memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
        }
        else
        {
          v479(v109, v110, v99);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v109, 0, 1, v99);
        }
        v92[v95[9]] = v93[v95[9]];
        swift_storeEnumTagMultiPayload(v92, v94, 1);
        v77 = v510;
        v75 = v469;
      }
      else
      {
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        v77 = v510;
      }
      v136 = *(int *)(v75 + 24);
      v137 = (char *)v73 + v136;
      v138 = (char *)v74 + v136;
      v139 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v138, 1, v139))
      {
        v140 = sub_1000BA294(&qword_100BD3100);
        memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
      }
      else
      {
        v141 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v137, v138, v141);
        v142 = sub_1000BA294(&qword_100BC5FE8);
        v137[*(int *)(v142 + 48)] = v138[*(int *)(v142 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v137, 0, 1, v139);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v73, 0, 1, v75);
    }
    v143 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    v144 = (_OWORD *)((char *)a1 + v143);
    v145 = (_OWORD *)((char *)v71 + v143);
    v146 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v145, 1, (uint64_t)v146))
    {
      v147 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      *v144 = *v145;
      *((_BYTE *)v144 + 16) = *((_BYTE *)v145 + 16);
      *(_OWORD *)((char *)v144 + 24) = *(_OWORD *)((char *)v145 + 24);
      v148 = v146[6];
      v149 = (char *)v144 + v148;
      v150 = (char *)v145 + v148;
      v481 = type metadata accessor for WeatherDescription(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v150, 1, v481))
      {
        v151 = sub_1000BA294(&qword_100BC3368);
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v481 - 8) + 32))(v149, v150, v481);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v149, 0, 1, v481);
      }
      v152 = v146[7];
      v153 = (_OWORD *)((char *)v144 + v152);
      v154 = (char *)v145 + v152;
      v155 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v154))
      {
        case 0u:
          (*(void (**)(_OWORD *, char *))(*(_QWORD *)(v481 - 8) + 32))(v153, v154);
          v156 = v153;
          v157 = v155;
          v158 = 0;
          goto LABEL_160;
        case 2u:
          ((void (*)(_OWORD *, char *, uint64_t))v490)(v153, v154, v494);
          v156 = v153;
          v157 = v155;
          v158 = 2;
          goto LABEL_160;
        case 3u:
          v179 = sub_1000BA294(&qword_100BD30F8);
          (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(v153, v154, v179);
          v156 = v153;
          v157 = v155;
          v158 = 3;
          goto LABEL_160;
        case 4u:
          v180 = *((_OWORD *)v154 + 1);
          *v153 = *(_OWORD *)v154;
          v153[1] = v180;
          v181 = *(int *)(v75 + 20);
          v182 = (char *)v153 + v181;
          v183 = &v154[v181];
          v184 = type metadata accessor for NewsArticleComponentViewModel(0);
          __dstb = v153;
          if (swift_getEnumCaseMultiPayload(v183) == 1)
          {
            v460 = v155;
            v472 = v75;
            *(_OWORD *)v182 = *(_OWORD *)v183;
            v185 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v186 = v185[5];
            v448 = &v182[v186];
            v453 = v183;
            v187 = &v183[v186];
            v188 = type metadata accessor for URL(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v187, 1, v188))
            {
              v189 = sub_1000BA294(&qword_100BD4280);
              memcpy(v448, v187, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
              v190 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32);
            }
            else
            {
              v190 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 32);
              v190(v448, v187, v188);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v448, 0, 1, v188);
            }
            *(_OWORD *)&v182[v185[6]] = *(_OWORD *)&v453[v185[6]];
            v450 = v190;
            v190(&v182[v185[7]], &v453[v185[7]], v188);
            v208 = v185[8];
            v209 = &v182[v208];
            v210 = &v453[v208];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v453[v208], 1, v188))
            {
              v211 = sub_1000BA294(&qword_100BD4280);
              memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
            }
            else
            {
              v450(v209, v210, v188);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v209, 0, 1, v188);
            }
            v153 = __dstb;
            v182[v185[9]] = v453[v185[9]];
            swift_storeEnumTagMultiPayload(v182, v184, 1);
            v77 = v510;
            v155 = v460;
            v75 = v472;
          }
          else
          {
            memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
            v77 = v510;
          }
          v224 = *(int *)(v75 + 24);
          v225 = (char *)v153 + v224;
          v226 = &v154[v224];
          v227 = type metadata accessor for DetailComponentAction(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v226, 1, v227))
          {
            v228 = sub_1000BA294(&qword_100BD3100);
            memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            v229 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v229 - 8) + 32))(v225, v226, v229);
            v230 = sub_1000BA294(&qword_100BC5FE8);
            v225[*(int *)(v230 + 48)] = v226[*(int *)(v230 + 48)];
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v225, 0, 1, v227);
          }
          v156 = __dstb;
          v157 = v155;
          v158 = 4;
          goto LABEL_160;
        case 6u:
          v191 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v191 - 8) + 32))(v153, v154, v191);
          v156 = v153;
          v157 = v155;
          v158 = 6;
          goto LABEL_160;
        case 7u:
          v192 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          if (swift_getEnumCaseMultiPayload(v154) == 1)
          {
            v449 = (void *)v192;
            *v153 = *(_OWORD *)v154;
            v193 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
            v483((char *)v153 + v193[5], &v154[v193[5]], v486);
            v194 = v193[6];
            v458 = (_OWORD *)((char *)v153 + v194);
            v195 = &v154[v194];
            v196 = (int *)type metadata accessor for WeatherData(0);
            v461 = v195;
            v454 = v193;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v195, 1, (uint64_t)v196))
            {
              v197 = sub_1000BA294(&qword_100BC3460);
              memcpy(v458, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
              v77 = v510;
            }
            else
            {
              __dstc = v153;
              v474 = v75;
              *v458 = *(_OWORD *)v195;
              v446 = (uint64_t)v196;
              v212 = v196[5];
              v213 = (char *)v458 + v212;
              v214 = &v195[v212];
              v215 = type metadata accessor for Locale(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v214, 1, v215))
              {
                v216 = sub_1000BA294(&qword_100BC3340);
                memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v215 - 8) + 32))(v213, v214, v215);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v213, 0, 1, v215);
              }
              v77 = v510;
              v239 = v196[6];
              v444 = (char *)v458 + v239;
              v240 = (char *)v461 + v239;
              v241 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 32))(v444, v240, v241);
              v242 = v196[7];
              v243 = (char *)v458 + v242;
              v244 = (char *)v461 + v242;
              v245 = sub_1000BA294(&qword_100BC3348);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v244, 1, v245))
              {
                v246 = type metadata accessor for WeatherData.CachingState(0);
                memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
              }
              else
              {
                v500(v243, v244, v506);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v243, 0, 1, v245);
              }
              v258 = v196[8];
              v259 = (char *)v458 + v258;
              v260 = (char *)v461 + v258;
              v261 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
              if (swift_getEnumCaseMultiPayload(v260) == 1)
              {
                v262 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v262 - 8) + 32))(v259, v260, v262);
                swift_storeEnumTagMultiPayload(v259, v261, 1);
              }
              else
              {
                memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
              }
              v263 = v196[9];
              v264 = (char *)v458 + v263;
              v265 = (char *)v461 + v263;
              v266 = type metadata accessor for WeatherDataOverrides(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v265, 1, v266))
              {
                v267 = sub_1000BA294(&qword_100BC3350);
                memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
              }
              else
              {
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v265, 1, v506))
                {
                  v269 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
                }
                else
                {
                  v500(v264, v265, v506);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v264, 0, 1, v506);
                }
                v273 = *(int *)(v266 + 20);
                v274 = &v264[v273];
                v275 = &v265[v273];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v275, 1, v506))
                {
                  v276 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v274, v275, *(_QWORD *)(*(_QWORD *)(v276 - 8) + 64));
                }
                else
                {
                  v500(v274, v275, v506);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v274, 0, 1, v506);
                }
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v264, 0, 1, v266);
              }
              v153 = __dstc;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v458, 0, 1, v446);
              v75 = v474;
              v193 = v454;
            }
            *(_OWORD *)((char *)v153 + v193[7]) = *(_OWORD *)&v154[v193[7]];
            v327 = v193[8];
            v328 = (char *)v153 + v327;
            v329 = v153;
            v330 = &v154[v327];
            v331 = type metadata accessor for WeatherMapOverlayKind(0);
            v332 = v330;
            v153 = v329;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v331 - 8) + 32))(v328, v332, v331);
            *((_BYTE *)v329 + v454[9]) = v154[v454[9]];
            swift_storeEnumTagMultiPayload(v329, v449, 1);
          }
          else
          {
            memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          v156 = v153;
          v157 = v155;
          v158 = 7;
LABEL_160:
          swift_storeEnumTagMultiPayload(v156, v157, v158);
          break;
        default:
          memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
          break;
      }
      v333 = v146[8];
      v334 = (_OWORD *)((char *)v144 + v333);
      v335 = (_OWORD *)((char *)v145 + v333);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v145 + v333, 1, v155))
      {
        v336 = sub_1000BA294(&qword_100BD3108);
        memcpy(v334, v335, *(_QWORD *)(*(_QWORD *)(v336 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v335))
        {
          case 0u:
            (*(void (**)(_OWORD *, _OWORD *))(*(_QWORD *)(v481 - 8) + 32))(v334, v335);
            v337 = v334;
            v338 = v155;
            v339 = 0;
            goto LABEL_230;
          case 2u:
            ((void (*)(_OWORD *, _OWORD *, uint64_t))v490)(v334, v335, v494);
            v337 = v334;
            v338 = v155;
            v339 = 2;
            goto LABEL_230;
          case 3u:
            v340 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v340 - 8) + 32))(v334, v335, v340);
            v337 = v334;
            v338 = v155;
            v339 = 3;
            goto LABEL_230;
          case 4u:
            v341 = v335[1];
            *v334 = *v335;
            v334[1] = v341;
            v342 = *(int *)(v75 + 20);
            v497 = v334;
            v343 = (char *)v334 + v342;
            v344 = (char *)v335 + v342;
            v345 = type metadata accessor for NewsArticleComponentViewModel(0);
            if (swift_getEnumCaseMultiPayload(v344) == 1)
            {
              v508 = v345;
              v477 = v75;
              v463 = v155;
              *(_OWORD *)v343 = *(_OWORD *)v344;
              v346 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
              v347 = v346[5];
              v348 = &v343[v347];
              v349 = &v344[v347];
              v350 = type metadata accessor for URL(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v349, 1, v350))
              {
                v351 = sub_1000BA294(&qword_100BD4280);
                memcpy(v348, v349, *(_QWORD *)(*(_QWORD *)(v351 - 8) + 64));
                v352 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v350 - 8) + 32);
              }
              else
              {
                v361 = v348;
                v503 = (uint64_t)v348;
                v352 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v350 - 8) + 32);
                v352(v361, v349, v350);
                _s7Weather24LocationCompositionStateOwst_0(v503, 0, 1, v350);
              }
              *(_OWORD *)&v343[v346[6]] = *(_OWORD *)&v344[v346[6]];
              v504 = v352;
              v352(&v343[v346[7]], &v344[v346[7]], v350);
              v362 = v346[8];
              v363 = &v343[v362];
              v364 = &v344[v362];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v344[v362], 1, v350))
              {
                v365 = sub_1000BA294(&qword_100BD4280);
                memcpy(v363, v364, *(_QWORD *)(*(_QWORD *)(v365 - 8) + 64));
              }
              else
              {
                v504(v363, v364, v350);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v363, 0, 1, v350);
              }
              v77 = v510;
              v343[v346[9]] = v344[v346[9]];
              swift_storeEnumTagMultiPayload(v343, v508, 1);
              v155 = v463;
              v75 = v477;
            }
            else
            {
              memcpy(v343, v344, *(_QWORD *)(*(_QWORD *)(v345 - 8) + 64));
            }
            v371 = *(int *)(v75 + 24);
            v372 = (char *)v497 + v371;
            v373 = (char *)v335 + v371;
            v374 = type metadata accessor for DetailComponentAction(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v373, 1, v374))
            {
              v375 = sub_1000BA294(&qword_100BD3100);
              memcpy(v372, v373, *(_QWORD *)(*(_QWORD *)(v375 - 8) + 64));
            }
            else
            {
              v376 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v376 - 8) + 32))(v372, v373, v376);
              v377 = sub_1000BA294(&qword_100BC5FE8);
              v372[*(int *)(v377 + 48)] = v373[*(int *)(v377 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v372, 0, 1, v374);
            }
            v334 = v497;
            v337 = v497;
            v338 = v155;
            v339 = 4;
            goto LABEL_230;
          case 6u:
            v353 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v353 - 8) + 32))(v334, v335, v353);
            v337 = v334;
            v338 = v155;
            v339 = 6;
            goto LABEL_230;
          case 7u:
            v354 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v335) == 1)
            {
              v464 = v155;
              *v334 = *v335;
              v355 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
              v483((char *)v334 + v355[5], (char *)v335 + v355[5], v486);
              v356 = v355[6];
              v357 = (_OWORD *)((char *)v334 + v356);
              v358 = (_OWORD *)((char *)v335 + v356);
              v359 = (int *)type metadata accessor for WeatherData(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v358, 1, (uint64_t)v359))
              {
                v360 = sub_1000BA294(&qword_100BC3460);
                memcpy(v357, v358, *(_QWORD *)(*(_QWORD *)(v360 - 8) + 64));
                v77 = v510;
              }
              else
              {
                v484 = v354;
                v488 = (uint64_t)v357;
                v492 = (uint64_t)v359;
                v498 = v334;
                *v357 = *v358;
                v366 = v359[5];
                v367 = (char *)v357 + v366;
                v368 = (char *)v358 + v366;
                v369 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v368, 1, v369))
                {
                  v370 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v367, v368, *(_QWORD *)(*(_QWORD *)(v370 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v369 - 8) + 32))(v367, v368, v369);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v367, 0, 1, v369);
                }
                v387 = v359[6];
                v388 = v488 + v387;
                v389 = (char *)v358 + v387;
                v390 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v390 - 8) + 32))(v388, v389, v390);
                v391 = v359[7];
                v392 = (void *)(v488 + v391);
                v393 = (char *)v358 + v391;
                v394 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v393, 1, v394))
                {
                  v395 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v392, v393, *(_QWORD *)(*(_QWORD *)(v395 - 8) + 64));
                }
                else
                {
                  v500((char *)v392, v393, v506);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v392, 0, 1, v394);
                }
                v407 = v359[8];
                v408 = (void *)(v488 + v407);
                v409 = (char *)v358 + v407;
                v410 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v409) == 1)
                {
                  v411 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v411 - 8) + 32))(v408, v409, v411);
                  swift_storeEnumTagMultiPayload(v408, v410, 1);
                }
                else
                {
                  memcpy(v408, v409, *(_QWORD *)(*(_QWORD *)(v410 - 8) + 64));
                }
                v412 = v359[9];
                v413 = (char *)(v488 + v412);
                v414 = (char *)v358 + v412;
                v415 = type metadata accessor for WeatherDataOverrides(0);
                v354 = v484;
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v414, 1, v415))
                {
                  v416 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v413, v414, *(_QWORD *)(*(_QWORD *)(v416 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v414, 1, v506))
                  {
                    v418 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v413, v414, *(_QWORD *)(*(_QWORD *)(v418 - 8) + 64));
                  }
                  else
                  {
                    v500(v413, v414, v506);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v413, 0, 1, v506);
                  }
                  v423 = *(int *)(v415 + 20);
                  v424 = &v413[v423];
                  v425 = &v414[v423];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v425, 1, v506))
                  {
                    v426 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v424, v425, *(_QWORD *)(*(_QWORD *)(v426 - 8) + 64));
                  }
                  else
                  {
                    v500(v424, v425, v506);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v424, 0, 1, v506);
                  }
                  v354 = v484;
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v413, 0, 1, v415);
                }
                _s7Weather24LocationCompositionStateOwst_0(v488, 0, 1, v492);
                v77 = v510;
                v334 = v498;
              }
              *(_OWORD *)((char *)v334 + v355[7]) = *(_OWORD *)((char *)v335 + v355[7]);
              v435 = v355[8];
              v436 = v334;
              v437 = (char *)v334 + v435;
              v438 = (char *)v335 + v435;
              v439 = type metadata accessor for WeatherMapOverlayKind(0);
              v440 = v437;
              v334 = v436;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v439 - 8) + 32))(v440, v438, v439);
              *((_BYTE *)v436 + v355[9]) = *((_BYTE *)v335 + v355[9]);
              swift_storeEnumTagMultiPayload(v436, v354, 1);
              v155 = v464;
            }
            else
            {
              memcpy(v334, v335, *(_QWORD *)(*(_QWORD *)(v354 - 8) + 64));
            }
            v337 = v334;
            v338 = v155;
            v339 = 7;
LABEL_230:
            swift_storeEnumTagMultiPayload(v337, v338, v339);
            break;
          default:
            memcpy(v334, v335, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v334, 0, 1, v155);
      }
      *((_BYTE *)v144 + v146[9]) = *((_BYTE *)v145 + v146[9]);
      *((_BYTE *)v144 + v146[10]) = *((_BYTE *)v145 + v146[10]);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v144, 0, 1, (uint64_t)v146);
    }
    v432 = a1;
    v433 = v77;
    v434 = 1;
    goto LABEL_234;
  }
  if (!EnumCaseMultiPayload)
  {
    v509 = a3;
    v6 = a2[1];
    v7 = (char *)a2;
    *a1 = *a2;
    a1[1] = v6;
    a1[2] = a2[2];
    v8 = (int *)_s11NormalModelVMa(0);
    v9 = v8[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v505 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v505(v10, v11, v12);
    v505((char *)a1 + v8[8], (char *)a2 + v8[8], v12);
    v505((char *)a1 + v8[9], (char *)a2 + v8[9], v12);
    v13 = v8[10];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    v17 = v8[11];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for AttributedString(0);
    v493 = *(void (**)(char *, char *))(*(_QWORD *)(v20 - 8) + 32);
    v499 = v20;
    v493(v18, v19);
    *(_QWORD *)((char *)a1 + v8[12]) = *(_QWORD *)((char *)a2 + v8[12]);
    v21 = v8[13];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
    v24 = (int *)_s14ChartViewModelVMa(0);
    v25 = v24[5];
    v26 = &v22[v25];
    v27 = &v23[v25];
    v28 = type metadata accessor for DetailChartDataElement(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    v29 = v24[6];
    v30 = &v22[v29];
    v31 = &v23[v29];
    v32 = type metadata accessor for Location(0);
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
    v33(v30, v31, v32);
    *(_OWORD *)&v22[v24[7]] = *(_OWORD *)&v23[v24[7]];
    *(_QWORD *)&v22[v24[8]] = *(_QWORD *)&v23[v24[8]];
    *(_QWORD *)&v22[v24[9]] = *(_QWORD *)&v23[v24[9]];
    *(_QWORD *)&v22[v24[10]] = *(_QWORD *)&v23[v24[10]];
    v482 = v12;
    v505(&v22[v24[11]], &v23[v24[11]], v12);
    *(_QWORD *)&v22[v24[12]] = *(_QWORD *)&v23[v24[12]];
    v485 = v33;
    v489 = v32;
    v33((char *)a1 + v8[14], &v7[v8[14]], v32);
    v34 = v8[15];
    v35 = (char *)a1 + v34;
    v36 = &v7[v34];
    v37 = type metadata accessor for SunEvents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
    *(_QWORD *)((char *)a1 + v8[16]) = *(_QWORD *)&v7[v8[16]];
    v38 = v8[18];
    v39 = (_OWORD *)((char *)a1 + v38);
    v40 = &v7[v38];
    v41 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
    {
      v42 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      v43 = v509;
    }
    else
    {
      v78 = *((_OWORD *)v40 + 1);
      *v39 = *(_OWORD *)v40;
      v39[1] = v78;
      v79 = *(int *)(v41 + 20);
      v80 = (char *)v39 + v79;
      v81 = &v40[v79];
      v82 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v81) == 1)
      {
        v478 = v41;
        *(_OWORD *)v80 = *(_OWORD *)v81;
        v83 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v84 = v83[5];
        v85 = &v80[v84];
        v86 = &v81[v84];
        v87 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
        {
          v88 = sub_1000BA294(&qword_100BD4280);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
        }
        else
        {
          v102 = v86;
          v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32);
          v89(v85, v102, v87);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, v87);
        }
        *(_OWORD *)&v80[v83[6]] = *(_OWORD *)&v81[v83[6]];
        v470 = v89;
        v89(&v80[v83[7]], &v81[v83[7]], v87);
        v103 = v83[8];
        v104 = &v80[v103];
        v105 = &v81[v103];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v81[v103], 1, v87))
        {
          v106 = sub_1000BA294(&qword_100BD4280);
          memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
        }
        else
        {
          v470(v104, v105, v87);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v104, 0, 1, v87);
        }
        v43 = v509;
        v80[v83[9]] = v81[v83[9]];
        swift_storeEnumTagMultiPayload(v80, v82, 1);
        v41 = v478;
      }
      else
      {
        memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
        v43 = v509;
      }
      v112 = *(int *)(v41 + 24);
      v113 = (char *)v39 + v112;
      v114 = &v40[v112];
      v115 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v115))
      {
        v116 = sub_1000BA294(&qword_100BD3100);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        v117 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v113, v114, v117);
        v118 = sub_1000BA294(&qword_100BC5FE8);
        v113[*(int *)(v118 + 48)] = v114[*(int *)(v118 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v115);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
    }
    v119 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    v120 = (_OWORD *)((char *)a1 + v119);
    v121 = &v7[v119];
    v122 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v121, 1, (uint64_t)v122))
    {
      v123 = sub_1000BA294(&qword_100BC68B8);
      memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    }
    else
    {
      *v120 = *(_OWORD *)v121;
      *((_BYTE *)v120 + 16) = v121[16];
      *(_OWORD *)((char *)v120 + 24) = *(_OWORD *)(v121 + 24);
      v124 = v122[6];
      v125 = (char *)v120 + v124;
      v126 = &v121[v124];
      v127 = type metadata accessor for WeatherDescription(0);
      v480 = v41;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v126, 1, v127))
      {
        v128 = sub_1000BA294(&qword_100BC3368);
        memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v125, v126, v127);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v125, 0, 1, v127);
      }
      v129 = v122[7];
      v130 = (_OWORD *)((char *)v120 + v129);
      v131 = &v121[v129];
      v132 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
      switch(swift_getEnumCaseMultiPayload(v131))
      {
        case 0u:
          (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v130, v131, v127);
          v133 = v130;
          v134 = v132;
          v135 = 0;
          goto LABEL_127;
        case 2u:
          ((void (*)(_OWORD *, char *, uint64_t))v493)(v130, v131, v499);
          v133 = v130;
          v134 = v132;
          v135 = 2;
          goto LABEL_127;
        case 3u:
          v159 = sub_1000BA294(&qword_100BD30F8);
          (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v130, v131, v159);
          v133 = v130;
          v134 = v132;
          v135 = 3;
          goto LABEL_127;
        case 4u:
          v160 = *((_OWORD *)v131 + 1);
          *v130 = *(_OWORD *)v131;
          v130[1] = v160;
          v161 = *(int *)(v480 + 20);
          v162 = (_OWORD *)((char *)v130 + v161);
          v163 = &v131[v161];
          v164 = type metadata accessor for NewsArticleComponentViewModel(0);
          if (swift_getEnumCaseMultiPayload(v163) == 1)
          {
            v456 = v164;
            v459 = v130;
            v471 = v132;
            *v162 = *(_OWORD *)v163;
            v165 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
            v166 = v165[5];
            __dst = v162;
            v167 = (char *)v162 + v166;
            v168 = &v163[v166];
            v169 = type metadata accessor for URL(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v168, 1, v169))
            {
              v170 = sub_1000BA294(&qword_100BD4280);
              memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
              v171 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32);
            }
            else
            {
              v198 = v168;
              v171 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 32);
              v171(v167, v198, v169);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v167, 0, 1, v169);
            }
            *(_OWORD *)&__dst[v165[6]] = *(_OWORD *)&v163[v165[6]];
            v455 = v171;
            v171(&__dst[v165[7]], &v163[v165[7]], v169);
            v199 = v165[8];
            v200 = &__dst[v199];
            v201 = &v163[v199];
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v163[v199], 1, v169))
            {
              v202 = sub_1000BA294(&qword_100BD4280);
              memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
            }
            else
            {
              v455(v200, v201, v169);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v200, 0, 1, v169);
            }
            v43 = v509;
            __dst[v165[9]] = v163[v165[9]];
            swift_storeEnumTagMultiPayload(__dst, v456, 1);
            v132 = v471;
            v130 = v459;
          }
          else
          {
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
            v43 = v509;
          }
          v217 = *(int *)(v480 + 24);
          v218 = (char *)v130 + v217;
          v219 = &v131[v217];
          v220 = type metadata accessor for DetailComponentAction(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v219, 1, v220))
          {
            v221 = sub_1000BA294(&qword_100BD3100);
            memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
          }
          else
          {
            v222 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 32))(v218, v219, v222);
            v223 = sub_1000BA294(&qword_100BC5FE8);
            v218[*(int *)(v223 + 48)] = v219[*(int *)(v223 + 48)];
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v218, 0, 1, v220);
          }
          v133 = v130;
          v134 = v132;
          v135 = 4;
          goto LABEL_127;
        case 6u:
          v172 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
          (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 32))(v130, v131, v172);
          v133 = v130;
          v134 = v132;
          v135 = 6;
          goto LABEL_127;
        case 7u:
          v173 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
          if (swift_getEnumCaseMultiPayload(v131) == 1)
          {
            v447 = (void *)v127;
            v452 = v173;
            *v130 = *(_OWORD *)v131;
            v174 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
            v485((char *)v130 + v174[5], &v131[v174[5]], v489);
            v175 = v174[6];
            __dsta = (_OWORD *)((char *)v130 + v175);
            v176 = &v131[v175];
            v177 = type metadata accessor for WeatherData(0);
            v457 = v174;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v176, 1, v177))
            {
              v178 = sub_1000BA294(&qword_100BC3460);
              memcpy(__dsta, v176, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
              v127 = (uint64_t)v447;
            }
            else
            {
              v473 = v132;
              *__dsta = *(_OWORD *)v176;
              v443 = v176;
              v445 = (int *)v177;
              v203 = *(int *)(v177 + 20);
              v204 = (char *)__dsta + v203;
              v205 = &v176[v203];
              v206 = type metadata accessor for Locale(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v205, 1, v206))
              {
                v207 = sub_1000BA294(&qword_100BC3340);
                memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 32))(v204, v205, v206);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v206);
              }
              v231 = v445[6];
              v442 = (char *)__dsta + v231;
              v232 = &v176[v231];
              v233 = type metadata accessor for WeatherDataModel(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 32))(v442, v232, v233);
              v234 = v445[7];
              v235 = (char *)__dsta + v234;
              v236 = &v176[v234];
              v237 = sub_1000BA294(&qword_100BC3348);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v236, 1, v237))
              {
                v238 = type metadata accessor for WeatherData.CachingState(0);
                memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
              }
              else
              {
                v505(v235, v236, v482);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v235, 0, 1, v237);
              }
              v127 = (uint64_t)v447;
              v247 = v445[8];
              v248 = (char *)__dsta + v247;
              v249 = (char *)v443 + v247;
              v250 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
              v462 = v130;
              if (swift_getEnumCaseMultiPayload(v249) == 1)
              {
                v251 = type metadata accessor for WeatherStatisticsModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v251 - 8) + 32))(v248, v249, v251);
                swift_storeEnumTagMultiPayload(v248, v250, 1);
              }
              else
              {
                memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
              }
              v252 = v445[9];
              v253 = (uint64_t)__dsta;
              v254 = (char *)__dsta + v252;
              v255 = (char *)v443 + v252;
              v256 = type metadata accessor for WeatherDataOverrides(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v255, 1, v256))
              {
                v257 = sub_1000BA294(&qword_100BC3350);
                memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
                v130 = v462;
              }
              else
              {
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v255, 1, v482))
                {
                  v268 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
                }
                else
                {
                  v505(v254, v255, v482);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v254, 0, 1, v482);
                }
                v270 = *(int *)(v256 + 20);
                v451 = &v254[v270];
                v271 = &v255[v270];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v271, 1, v482))
                {
                  v272 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                  memcpy(v451, v271, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
                }
                else
                {
                  v505(v451, v271, v482);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v451, 0, 1, v482);
                }
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v254, 0, 1, v256);
                v130 = v462;
                v253 = (uint64_t)__dsta;
              }
              _s7Weather24LocationCompositionStateOwst_0(v253, 0, 1, (uint64_t)v445);
              v132 = v473;
              v174 = v457;
            }
            *(_OWORD *)((char *)v130 + v174[7]) = *(_OWORD *)&v131[v174[7]];
            v277 = v174[8];
            v278 = (char *)v130 + v277;
            v279 = &v131[v277];
            v280 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v280 - 8) + 32))(v278, v279, v280);
            *((_BYTE *)v130 + v457[9]) = v131[v457[9]];
            swift_storeEnumTagMultiPayload(v130, v452, 1);
          }
          else
          {
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
          }
          v133 = v130;
          v134 = v132;
          v135 = 7;
LABEL_127:
          swift_storeEnumTagMultiPayload(v133, v134, v135);
          break;
        default:
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          break;
      }
      v281 = v122[8];
      v282 = (_OWORD *)((char *)v120 + v281);
      v283 = &v121[v281];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v121[v281], 1, v132))
      {
        v284 = sub_1000BA294(&qword_100BD3108);
        memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v283))
        {
          case 0u:
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v282, v283, v127);
            v285 = v282;
            v286 = v132;
            v287 = 0;
            goto LABEL_221;
          case 2u:
            ((void (*)(_OWORD *, char *, uint64_t))v493)(v282, v283, v499);
            v285 = v282;
            v286 = v132;
            v287 = 2;
            goto LABEL_221;
          case 3u:
            v288 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v288 - 8) + 32))(v282, v283, v288);
            v285 = v282;
            v286 = v132;
            v287 = 3;
            goto LABEL_221;
          case 4u:
            v289 = *((_OWORD *)v283 + 1);
            *v282 = *(_OWORD *)v283;
            v282[1] = v289;
            v290 = *(int *)(v480 + 20);
            v291 = (char *)v282 + v290;
            v292 = &v283[v290];
            v293 = type metadata accessor for NewsArticleComponentViewModel(0);
            if (swift_getEnumCaseMultiPayload(v292) == 1)
            {
              v507 = v293;
              v501 = v282;
              v475 = v132;
              *(_OWORD *)v291 = *(_OWORD *)v292;
              v294 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
              v295 = v294[5];
              v296 = &v291[v295];
              v297 = &v292[v295];
              v298 = type metadata accessor for URL(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v297, 1, v298))
              {
                v299 = sub_1000BA294(&qword_100BD4280);
                memcpy(v296, v297, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
                v300 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v298 - 8) + 32);
              }
              else
              {
                v310 = v297;
                v300 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v298 - 8) + 32);
                v300(v296, v310, v298);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v296, 0, 1, v298);
              }
              *(_OWORD *)&v291[v294[6]] = *(_OWORD *)&v292[v294[6]];
              v496 = v300;
              v300(&v291[v294[7]], &v292[v294[7]], v298);
              v311 = v294[8];
              v312 = &v291[v311];
              v313 = &v292[v311];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v292[v311], 1, v298))
              {
                v314 = sub_1000BA294(&qword_100BD4280);
                memcpy(v312, v313, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
              }
              else
              {
                v496(v312, v313, v298);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v312, 0, 1, v298);
              }
              v43 = v509;
              v291[v294[9]] = v292[v294[9]];
              swift_storeEnumTagMultiPayload(v291, v507, 1);
              v132 = v475;
              v282 = v501;
            }
            else
            {
              memcpy(v291, v292, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
            }
            v320 = *(int *)(v480 + 24);
            v321 = (char *)v282 + v320;
            v322 = &v283[v320];
            v323 = type metadata accessor for DetailComponentAction(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v322, 1, v323))
            {
              v324 = sub_1000BA294(&qword_100BD3100);
              memcpy(v321, v322, *(_QWORD *)(*(_QWORD *)(v324 - 8) + 64));
            }
            else
            {
              v325 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v325 - 8) + 32))(v321, v322, v325);
              v326 = sub_1000BA294(&qword_100BC5FE8);
              v321[*(int *)(v326 + 48)] = v322[*(int *)(v326 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v321, 0, 1, v323);
            }
            v285 = v282;
            v286 = v132;
            v287 = 4;
            goto LABEL_221;
          case 6u:
            v301 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v301 - 8) + 32))(v282, v283, v301);
            v285 = v282;
            v286 = v132;
            v287 = 6;
            goto LABEL_221;
          case 7u:
            v302 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v283) == 1)
            {
              v495 = v302;
              *v282 = *(_OWORD *)v283;
              v303 = (char *)v282;
              v304 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
              v485(&v303[v304[5]], &v283[v304[5]], v489);
              v305 = v304[6];
              v502 = v303;
              v306 = &v303[v305];
              v307 = &v283[v305];
              v308 = type metadata accessor for WeatherData(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v307, 1, v308))
              {
                v309 = sub_1000BA294(&qword_100BC3460);
                memcpy(v306, v307, *(_QWORD *)(*(_QWORD *)(v309 - 8) + 64));
              }
              else
              {
                v476 = v132;
                *(_OWORD *)v306 = *(_OWORD *)v307;
                v487 = v306;
                v491 = (int *)v308;
                v315 = *(int *)(v308 + 20);
                v316 = &v306[v315];
                v317 = &v307[v315];
                v318 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v317, 1, v318))
                {
                  v319 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v319 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v318 - 8) + 32))(v316, v317, v318);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v316, 0, 1, v318);
                }
                v378 = v491[6];
                v379 = (char *)v487 + v378;
                v380 = &v307[v378];
                v381 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v381 - 8) + 32))(v379, v380, v381);
                v382 = v491[7];
                v383 = (char *)v487 + v382;
                v384 = &v307[v382];
                v385 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v384, 1, v385))
                {
                  v386 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v383, v384, *(_QWORD *)(*(_QWORD *)(v386 - 8) + 64));
                }
                else
                {
                  v505(v383, v384, v482);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v383, 0, 1, v385);
                }
                v396 = v491[8];
                v397 = (char *)v487 + v396;
                v398 = &v307[v396];
                v399 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v398) == 1)
                {
                  v400 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v400 - 8) + 32))(v397, v398, v400);
                  swift_storeEnumTagMultiPayload(v397, v399, 1);
                }
                else
                {
                  memcpy(v397, v398, *(_QWORD *)(*(_QWORD *)(v399 - 8) + 64));
                }
                v401 = (uint64_t)v487;
                v402 = v491[9];
                v403 = (char *)v487 + v402;
                v404 = &v307[v402];
                v405 = type metadata accessor for WeatherDataOverrides(0);
                v132 = v476;
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v404, 1, v405))
                {
                  v406 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v403, v404, *(_QWORD *)(*(_QWORD *)(v406 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v404, 1, v482))
                  {
                    v417 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v403, v404, *(_QWORD *)(*(_QWORD *)(v417 - 8) + 64));
                  }
                  else
                  {
                    v505(v403, v404, v482);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v403, 0, 1, v482);
                  }
                  v419 = *(int *)(v405 + 20);
                  v420 = &v403[v419];
                  v421 = &v404[v419];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v421, 1, v482))
                  {
                    v422 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v420, v421, *(_QWORD *)(*(_QWORD *)(v422 - 8) + 64));
                  }
                  else
                  {
                    v505(v420, v421, v482);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v420, 0, 1, v482);
                  }
                  v132 = v476;
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v403, 0, 1, v405);
                  v401 = (uint64_t)v487;
                }
                _s7Weather24LocationCompositionStateOwst_0(v401, 0, 1, (uint64_t)v491);
              }
              v43 = v509;
              *(_OWORD *)((char *)v502 + v304[7]) = *(_OWORD *)&v283[v304[7]];
              v427 = v304[8];
              v428 = (char *)v502 + v427;
              v429 = &v283[v427];
              v430 = type metadata accessor for WeatherMapOverlayKind(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v430 - 8) + 32))(v428, v429, v430);
              v431 = v304[9];
              v282 = v502;
              *((_BYTE *)v502 + v431) = v283[v431];
              swift_storeEnumTagMultiPayload(v502, v495, 1);
            }
            else
            {
              memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
            }
            v285 = v282;
            v286 = v132;
            v287 = 7;
LABEL_221:
            swift_storeEnumTagMultiPayload(v285, v286, v287);
            break;
          default:
            memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v282, 0, 1, v132);
      }
      *((_BYTE *)v120 + v122[9]) = v121[v122[9]];
      *((_BYTE *)v120 + v122[10]) = v121[v122[10]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, (uint64_t)v122);
    }
    v432 = a1;
    v433 = v43;
    v434 = 0;
LABEL_234:
    swift_storeEnumTagMultiPayload(v432, v433, v434);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_10057C88C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  _OWORD *v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  _OWORD *v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  char *v155;
  uint64_t v156;
  _OWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  _OWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  int *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, char *, uint64_t);
  uint64_t v195;
  uint64_t v196;
  int *v197;
  uint64_t v198;
  char *v199;
  int *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(char *, char *, uint64_t);
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  _OWORD *v289;
  uint64_t v290;
  _OWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  int *v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  void (*v306)(char *, char *, uint64_t);
  uint64_t v307;
  uint64_t v308;
  int *v309;
  uint64_t v310;
  _OWORD *v311;
  _OWORD *v312;
  int *v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _OWORD *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  _OWORD *v335;
  char *v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  _OWORD *v340;
  _OWORD *v341;
  uint64_t v342;
  _OWORD *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  int *v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  void (*v358)(char *, char *, uint64_t);
  uint64_t v359;
  uint64_t v360;
  int *v361;
  uint64_t v362;
  _OWORD *v363;
  _OWORD *v364;
  int *v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _OWORD *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  _OWORD *v431;
  char *v432;
  char *v433;
  uint64_t v434;
  char *v435;
  _OWORD *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  _OWORD *v444;
  char *v445;
  char *v446;
  uint64_t v447;
  char *v448;
  char *v450;
  char *v451;
  uint64_t v452;
  int *v453;
  int *__src;
  char *__srca;
  uint64_t v456;
  uint64_t v457;
  int *v458;
  void (*v459)(char *, char *, uint64_t);
  void *__dst;
  _OWORD *__dsta;
  _BYTE *__dstb;
  _OWORD *__dstc;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _OWORD *v473;
  _OWORD *v474;
  _OWORD *v475;
  _OWORD *v476;
  void (*v477)(char *, char *, uint64_t);
  void (*v478)(char *, char *, uint64_t);
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  void (*v487)(char *, char *, uint64_t);
  void (*v488)(char *, char *, uint64_t);
  _OWORD *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void (*v495)(char *, char *);
  void (*v496)(char *, char *);
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _OWORD *v501;
  _OWORD *v502;
  _OWORD *v503;
  _OWORD *v504;
  void (*v505)(char *, char *);
  void (*v506)(char *, char *, uint64_t);
  void (*v507)(char *, char *, uint64_t);
  void (*v508)(char *, char *, uint64_t);
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for SunriseSunsetDetailViewModel);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2);
    if (EnumCaseMultiPayload == 1)
    {
      v514 = a3;
      v47 = a2[1];
      *a1 = *a2;
      a1[1] = v47;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v48 = (int *)_s10PolarModelVMa(0);
      v49 = v48[7];
      v50 = (char *)a1 + v49;
      v51 = (char *)a2 + v49;
      v510 = type metadata accessor for Date(0);
      v506 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v510 - 8) + 32);
      v506(v50, v51, v510);
      v52 = v48[8];
      v53 = (char *)a1 + v52;
      v54 = (char *)a2 + v52;
      v55 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      v56 = v48[9];
      v57 = (char *)a1 + v56;
      v58 = (char *)a2 + v56;
      v59 = type metadata accessor for AttributedString(0);
      v496 = *(void (**)(char *, char *))(*(_QWORD *)(v59 - 8) + 32);
      v500 = v59;
      v496(v57, v58);
      *(_QWORD *)((char *)a1 + v48[10]) = *(_QWORD *)((char *)a2 + v48[10]);
      *(_OWORD *)((char *)a1 + v48[11]) = *(_OWORD *)((char *)a2 + v48[11]);
      v60 = v48[12];
      v61 = (char *)a1 + v60;
      v62 = (char *)a2 + v60;
      *(_QWORD *)((char *)a1 + v60) = *(_QWORD *)((char *)a2 + v60);
      v63 = (int *)_s14ChartViewModelVMa(0);
      v64 = v63[5];
      v65 = &v61[v64];
      v66 = &v62[v64];
      v67 = type metadata accessor for DetailChartDataElement(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
      v68 = v63[6];
      v69 = &v61[v68];
      v70 = &v62[v68];
      v71 = type metadata accessor for Location(0);
      v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32);
      v72(v69, v70, v71);
      *(_OWORD *)&v61[v63[7]] = *(_OWORD *)&v62[v63[7]];
      *(_QWORD *)&v61[v63[8]] = *(_QWORD *)&v62[v63[8]];
      *(_QWORD *)&v61[v63[9]] = *(_QWORD *)&v62[v63[9]];
      *(_QWORD *)&v61[v63[10]] = *(_QWORD *)&v62[v63[10]];
      v506(&v61[v63[11]], &v62[v63[11]], v510);
      *(_QWORD *)&v61[v63[12]] = *(_QWORD *)&v62[v63[12]];
      v488 = v72;
      v492 = v71;
      v72((char *)a1 + v48[13], (char *)a2 + v48[13], v71);
      *(_QWORD *)((char *)a1 + v48[15]) = *(_QWORD *)((char *)a2 + v48[15]);
      v73 = v48[16];
      v74 = (_OWORD *)((char *)a1 + v73);
      v75 = (_OWORD *)((char *)a2 + v73);
      v76 = type metadata accessor for DetailComponentContainerViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v76))
      {
        v77 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        v78 = v514;
      }
      else
      {
        v91 = v75[1];
        *v74 = *v75;
        v74[1] = v91;
        v482 = v76;
        v92 = *(int *)(v76 + 20);
        v93 = (char *)v74 + v92;
        v94 = (char *)v75 + v92;
        v95 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v94) == 1)
        {
          *(_OWORD *)v93 = *(_OWORD *)v94;
          v96 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v97 = v96[5];
          v98 = &v93[v97];
          v99 = &v94[v97];
          v100 = type metadata accessor for URL(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, v100))
          {
            v101 = sub_1000BA294(&qword_100BD4280);
            memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
            v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32);
          }
          else
          {
            v108 = v99;
            v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32);
            v102(v98, v108, v100);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v98, 0, 1, v100);
          }
          *(_OWORD *)&v93[v96[6]] = *(_OWORD *)&v94[v96[6]];
          v478 = v102;
          v102(&v93[v96[7]], &v94[v96[7]], v100);
          v109 = v96[8];
          v110 = &v93[v109];
          v111 = &v94[v109];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v94[v109], 1, v100))
          {
            v112 = sub_1000BA294(&qword_100BD4280);
            memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
          }
          else
          {
            v478(v110, v111, v100);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v110, 0, 1, v100);
          }
          v93[v96[9]] = v94[v96[9]];
          swift_storeEnumTagMultiPayload(v93, v95, 1);
        }
        else
        {
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        v78 = v514;
        v76 = v482;
        v136 = *(int *)(v482 + 24);
        v137 = (char *)v74 + v136;
        v138 = (char *)v75 + v136;
        v139 = type metadata accessor for DetailComponentAction(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v138, 1, v139))
        {
          v140 = sub_1000BA294(&qword_100BD3100);
          memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
        }
        else
        {
          v141 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v137, v138, v141);
          v142 = sub_1000BA294(&qword_100BC5FE8);
          v137[*(int *)(v142 + 48)] = v138[*(int *)(v142 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v137, 0, 1, v139);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, v482);
      }
      v143 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
      v144 = (_OWORD *)((char *)a1 + v143);
      v145 = (_OWORD *)((char *)a2 + v143);
      v146 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v145, 1, (uint64_t)v146))
      {
        v147 = sub_1000BA294(&qword_100BC68B8);
        memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
      }
      else
      {
        *v144 = *v145;
        *((_BYTE *)v144 + 16) = *((_BYTE *)v145 + 16);
        *(_OWORD *)((char *)v144 + 24) = *(_OWORD *)((char *)v145 + 24);
        v148 = v146[6];
        v149 = (char *)v144 + v148;
        v150 = (char *)v145 + v148;
        v151 = type metadata accessor for WeatherDescription(0);
        v480 = v151;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v150, 1, v151))
        {
          v152 = sub_1000BA294(&qword_100BC3368);
          memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v149, v150, v151);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v149, 0, 1, v151);
        }
        v153 = v146[7];
        v154 = (_OWORD *)((char *)v144 + v153);
        v155 = (char *)v145 + v153;
        v156 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        switch(swift_getEnumCaseMultiPayload(v155))
        {
          case 0u:
            (*(void (**)(_OWORD *, char *))(*(_QWORD *)(v480 - 8) + 32))(v154, v155);
            v157 = v154;
            v158 = v156;
            v159 = 0;
            goto LABEL_161;
          case 2u:
            ((void (*)(_OWORD *, char *, uint64_t))v496)(v154, v155, v500);
            v157 = v154;
            v158 = v156;
            v159 = 2;
            goto LABEL_161;
          case 3u:
            v180 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 32))(v154, v155, v180);
            v157 = v154;
            v158 = v156;
            v159 = 3;
            goto LABEL_161;
          case 4u:
            v181 = *((_OWORD *)v155 + 1);
            *v154 = *(_OWORD *)v155;
            v154[1] = v181;
            v484 = v76;
            v182 = *(int *)(v76 + 20);
            v183 = (_OWORD *)((char *)v154 + v182);
            v184 = &v155[v182];
            v185 = type metadata accessor for NewsArticleComponentViewModel(0);
            v474 = v154;
            if (swift_getEnumCaseMultiPayload(v184) == 1)
            {
              v457 = v185;
              v465 = v156;
              *v183 = *(_OWORD *)v184;
              v186 = type metadata accessor for NewsArticleComponentContentViewModel(0);
              v187 = v183;
              v188 = (int *)v186;
              v189 = *(int *)(v186 + 20);
              __dstb = v187;
              v190 = (char *)v187 + v189;
              v191 = &v184[v189];
              v192 = type metadata accessor for URL(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v191, 1, v192))
              {
                v193 = sub_1000BA294(&qword_100BD4280);
                memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
                v194 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32);
              }
              else
              {
                v212 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32);
                v212(v190, v191, v192);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v190, 0, 1, v192);
                v194 = v212;
              }
              *(_OWORD *)&__dstb[v188[6]] = *(_OWORD *)&v184[v188[6]];
              v213 = v194;
              v194(&__dstb[v188[7]], &v184[v188[7]], v192);
              v214 = v188[8];
              v215 = &__dstb[v214];
              v216 = &v184[v214];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v184[v214], 1, v192))
              {
                v217 = sub_1000BA294(&qword_100BD4280);
                memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
              }
              else
              {
                v213(v215, v216, v192);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v215, 0, 1, v192);
              }
              v154 = v474;
              __dstb[v188[9]] = v184[v188[9]];
              swift_storeEnumTagMultiPayload(__dstb, v457, 1);
              v78 = v514;
              v156 = v465;
            }
            else
            {
              memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
            }
            v76 = v484;
            v230 = *(int *)(v484 + 24);
            v231 = (char *)v154 + v230;
            v232 = &v155[v230];
            v233 = type metadata accessor for DetailComponentAction(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v232, 1, v233))
            {
              v234 = sub_1000BA294(&qword_100BD3100);
              memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
            }
            else
            {
              v235 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v235 - 8) + 32))(v231, v232, v235);
              v236 = sub_1000BA294(&qword_100BC5FE8);
              v231[*(int *)(v236 + 48)] = v232[*(int *)(v236 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v231, 0, 1, v233);
            }
            v157 = v474;
            v158 = v156;
            v159 = 4;
            goto LABEL_161;
          case 6u:
            v195 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 32))(v154, v155, v195);
            v157 = v154;
            v158 = v156;
            v159 = 6;
            goto LABEL_161;
          case 7u:
            v196 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v155) == 1)
            {
              v452 = v196;
              *v154 = *(_OWORD *)v155;
              v197 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
              v488((char *)v154 + v197[5], &v155[v197[5]], v492);
              v198 = v197[6];
              __dstc = (_OWORD *)((char *)v154 + v198);
              v199 = &v155[v198];
              v200 = (int *)type metadata accessor for WeatherData(0);
              __srca = v199;
              v458 = v197;
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v199, 1, (uint64_t)v200))
              {
                v201 = sub_1000BA294(&qword_100BC3460);
                memcpy(__dstc, v199, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
                v78 = v514;
              }
              else
              {
                v467 = v156;
                v476 = v154;
                *__dstc = *(_OWORD *)v199;
                v218 = v200[5];
                v219 = (char *)__dstc + v218;
                v220 = &v199[v218];
                v221 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v220, 1, v221))
                {
                  v222 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v221 - 8) + 32))(v219, v220, v221);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v219, 0, 1, v221);
                }
                v78 = v514;
                v245 = v200[6];
                v451 = (char *)__dstc + v245;
                v246 = &__srca[v245];
                v247 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 32))(v451, v246, v247);
                v248 = v200[7];
                v249 = (char *)__dstc + v248;
                v250 = &__srca[v248];
                v251 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v250, 1, v251))
                {
                  v252 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
                }
                else
                {
                  v506(v249, v250, v510);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v249, 0, 1, v251);
                }
                v264 = v200[8];
                v265 = (char *)__dstc + v264;
                v266 = &__srca[v264];
                v267 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v266) == 1)
                {
                  v268 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v268 - 8) + 32))(v265, v266, v268);
                  swift_storeEnumTagMultiPayload(v265, v267, 1);
                }
                else
                {
                  memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
                }
                v269 = v200[9];
                v270 = (char *)__dstc + v269;
                v271 = &__srca[v269];
                v272 = type metadata accessor for WeatherDataOverrides(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v271, 1, v272))
                {
                  v273 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v270, v271, *(_QWORD *)(*(_QWORD *)(v273 - 8) + 64));
                }
                else
                {
                  v485 = v76;
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v271, 1, v510))
                  {
                    v275 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v270, v271, *(_QWORD *)(*(_QWORD *)(v275 - 8) + 64));
                  }
                  else
                  {
                    v506(v270, v271, v510);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v270, 0, 1, v510);
                  }
                  v280 = *(int *)(v272 + 20);
                  v281 = &v270[v280];
                  v282 = &v271[v280];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v282, 1, v510))
                  {
                    v283 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
                  }
                  else
                  {
                    v506(v281, v282, v510);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v281, 0, 1, v510);
                  }
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v270, 0, 1, v272);
                  v76 = v485;
                }
                v154 = v476;
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dstc, 0, 1, (uint64_t)v200);
                v156 = v467;
                v197 = v458;
              }
              *(_OWORD *)((char *)v154 + v197[7]) = *(_OWORD *)&v155[v197[7]];
              v333 = v197[8];
              v334 = (char *)v154 + v333;
              v335 = v154;
              v336 = &v155[v333];
              v337 = type metadata accessor for WeatherMapOverlayKind(0);
              v338 = v336;
              v154 = v335;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v337 - 8) + 32))(v334, v338, v337);
              *((_BYTE *)v335 + v458[9]) = v155[v458[9]];
              swift_storeEnumTagMultiPayload(v335, v452, 1);
            }
            else
            {
              memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
            }
            v157 = v154;
            v158 = v156;
            v159 = 7;
LABEL_161:
            swift_storeEnumTagMultiPayload(v157, v158, v159);
            break;
          default:
            memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
            break;
        }
        v339 = v146[8];
        v340 = (_OWORD *)((char *)v144 + v339);
        v341 = (_OWORD *)((char *)v145 + v339);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v145 + v339, 1, v156))
        {
          v342 = sub_1000BA294(&qword_100BD3108);
          memcpy(v340, v341, *(_QWORD *)(*(_QWORD *)(v342 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v341))
          {
            case 0u:
              (*(void (**)(_OWORD *, _OWORD *))(*(_QWORD *)(v480 - 8) + 32))(v340, v341);
              v343 = v340;
              v344 = v156;
              v345 = 0;
              goto LABEL_231;
            case 2u:
              ((void (*)(_OWORD *, _OWORD *, uint64_t))v496)(v340, v341, v500);
              v343 = v340;
              v344 = v156;
              v345 = 2;
              goto LABEL_231;
            case 3u:
              v346 = sub_1000BA294(&qword_100BD30F8);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v346 - 8) + 32))(v340, v341, v346);
              v343 = v340;
              v344 = v156;
              v345 = 3;
              goto LABEL_231;
            case 4u:
              v347 = v341[1];
              *v340 = *v341;
              v340[1] = v347;
              v486 = v76;
              v348 = *(int *)(v76 + 20);
              v349 = (char *)v340 + v348;
              v350 = (char *)v341 + v348;
              v351 = type metadata accessor for NewsArticleComponentViewModel(0);
              if (swift_getEnumCaseMultiPayload(v350) == 1)
              {
                v512 = v351;
                v503 = v340;
                v471 = v156;
                *(_OWORD *)v349 = *(_OWORD *)v350;
                v352 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                v353 = v352[5];
                v354 = &v349[v353];
                v355 = &v350[v353];
                v356 = type metadata accessor for URL(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v355, 1, v356))
                {
                  v357 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v354, v355, *(_QWORD *)(*(_QWORD *)(v357 - 8) + 64));
                  v358 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v356 - 8) + 32);
                }
                else
                {
                  v367 = v355;
                  v358 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v356 - 8) + 32);
                  v358(v354, v367, v356);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v354, 0, 1, v356);
                }
                *(_OWORD *)&v349[v352[6]] = *(_OWORD *)&v350[v352[6]];
                v508 = v358;
                v358(&v349[v352[7]], &v350[v352[7]], v356);
                v368 = v352[8];
                v369 = &v349[v368];
                v370 = &v350[v368];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v350[v368], 1, v356))
                {
                  v371 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v369, v370, *(_QWORD *)(*(_QWORD *)(v371 - 8) + 64));
                }
                else
                {
                  v508(v369, v370, v356);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v369, 0, 1, v356);
                }
                v78 = v514;
                v349[v352[9]] = v350[v352[9]];
                swift_storeEnumTagMultiPayload(v349, v512, 1);
                v156 = v471;
                v340 = v503;
              }
              else
              {
                memcpy(v349, v350, *(_QWORD *)(*(_QWORD *)(v351 - 8) + 64));
              }
              v377 = *(int *)(v486 + 24);
              v378 = v340;
              v379 = (char *)v340 + v377;
              v380 = (char *)v341 + v377;
              v381 = type metadata accessor for DetailComponentAction(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v380, 1, v381))
              {
                v382 = sub_1000BA294(&qword_100BD3100);
                memcpy(v379, v380, *(_QWORD *)(*(_QWORD *)(v382 - 8) + 64));
              }
              else
              {
                v383 = type metadata accessor for URL(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v383 - 8) + 32))(v379, v380, v383);
                v384 = sub_1000BA294(&qword_100BC5FE8);
                v379[*(int *)(v384 + 48)] = v380[*(int *)(v384 + 48)];
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v379, 0, 1, v381);
              }
              v340 = v378;
              v343 = v378;
              v344 = v156;
              v345 = 4;
              goto LABEL_231;
            case 6u:
              v359 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v359 - 8) + 32))(v340, v341, v359);
              v343 = v340;
              v344 = v156;
              v345 = 6;
              goto LABEL_231;
            case 7u:
              v360 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
              if (swift_getEnumCaseMultiPayload(v341) == 1)
              {
                v498 = v360;
                *v340 = *v341;
                v361 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                v488((char *)v340 + v361[5], (char *)v341 + v361[5], v492);
                v362 = v361[6];
                v363 = (_OWORD *)((char *)v340 + v362);
                v364 = (_OWORD *)((char *)v341 + v362);
                v365 = (int *)type metadata accessor for WeatherData(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v364, 1, (uint64_t)v365))
                {
                  v366 = sub_1000BA294(&qword_100BC3460);
                  memcpy(v363, v364, *(_QWORD *)(*(_QWORD *)(v366 - 8) + 64));
                  v78 = v514;
                }
                else
                {
                  v504 = v340;
                  v472 = v156;
                  *v363 = *v364;
                  v490 = (uint64_t)v363;
                  v494 = (uint64_t)v365;
                  v372 = v365[5];
                  v373 = (char *)v363 + v372;
                  v374 = (char *)v364 + v372;
                  v375 = type metadata accessor for Locale(0);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v374, 1, v375))
                  {
                    v376 = sub_1000BA294(&qword_100BC3340);
                    memcpy(v373, v374, *(_QWORD *)(*(_QWORD *)(v376 - 8) + 64));
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v375 - 8) + 32))(v373, v374, v375);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v373, 0, 1, v375);
                  }
                  v394 = v365[6];
                  v395 = v490 + v394;
                  v396 = (char *)v364 + v394;
                  v397 = type metadata accessor for WeatherDataModel(0);
                  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v397 - 8) + 32))(v395, v396, v397);
                  v398 = v365[7];
                  v399 = (void *)(v490 + v398);
                  v400 = (char *)v364 + v398;
                  v401 = sub_1000BA294(&qword_100BC3348);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v400, 1, v401))
                  {
                    v402 = type metadata accessor for WeatherData.CachingState(0);
                    memcpy(v399, v400, *(_QWORD *)(*(_QWORD *)(v402 - 8) + 64));
                  }
                  else
                  {
                    v506((char *)v399, v400, v510);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v399, 0, 1, v401);
                  }
                  v414 = v365[8];
                  v415 = (void *)(v490 + v414);
                  v416 = (char *)v364 + v414;
                  v417 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                  if (swift_getEnumCaseMultiPayload(v416) == 1)
                  {
                    v418 = type metadata accessor for WeatherStatisticsModel(0);
                    (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v418 - 8) + 32))(v415, v416, v418);
                    swift_storeEnumTagMultiPayload(v415, v417, 1);
                  }
                  else
                  {
                    memcpy(v415, v416, *(_QWORD *)(*(_QWORD *)(v417 - 8) + 64));
                  }
                  v419 = v365[9];
                  v420 = (char *)(v490 + v419);
                  v421 = (char *)v364 + v419;
                  v422 = type metadata accessor for WeatherDataOverrides(0);
                  v156 = v472;
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v421, 1, v422))
                  {
                    v423 = sub_1000BA294(&qword_100BC3350);
                    memcpy(v420, v421, *(_QWORD *)(*(_QWORD *)(v423 - 8) + 64));
                  }
                  else
                  {
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v421, 1, v510))
                    {
                      v425 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v420, v421, *(_QWORD *)(*(_QWORD *)(v425 - 8) + 64));
                    }
                    else
                    {
                      v506(v420, v421, v510);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v420, 0, 1, v510);
                    }
                    v439 = *(int *)(v422 + 20);
                    v440 = &v420[v439];
                    v441 = &v421[v439];
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v441, 1, v510))
                    {
                      v442 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v440, v441, *(_QWORD *)(*(_QWORD *)(v442 - 8) + 64));
                    }
                    else
                    {
                      v506(v440, v441, v510);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v440, 0, 1, v510);
                    }
                    v156 = v472;
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v420, 0, 1, v422);
                  }
                  v78 = v514;
                  _s7Weather24LocationCompositionStateOwst_0(v490, 0, 1, v494);
                  v340 = v504;
                }
                *(_OWORD *)((char *)v340 + v361[7]) = *(_OWORD *)((char *)v341 + v361[7]);
                v443 = v361[8];
                v444 = v340;
                v445 = (char *)v340 + v443;
                v446 = (char *)v341 + v443;
                v447 = type metadata accessor for WeatherMapOverlayKind(0);
                v448 = v445;
                v340 = v444;
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v447 - 8) + 32))(v448, v446, v447);
                *((_BYTE *)v444 + v361[9]) = *((_BYTE *)v341 + v361[9]);
                swift_storeEnumTagMultiPayload(v444, v498, 1);
              }
              else
              {
                memcpy(v340, v341, *(_QWORD *)(*(_QWORD *)(v360 - 8) + 64));
              }
              v343 = v340;
              v344 = v156;
              v345 = 7;
LABEL_231:
              swift_storeEnumTagMultiPayload(v343, v344, v345);
              break;
            default:
              memcpy(v340, v341, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
              break;
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v340, 0, 1, v156);
        }
        *((_BYTE *)v144 + v146[9]) = *((_BYTE *)v145 + v146[9]);
        *((_BYTE *)v144 + v146[10]) = *((_BYTE *)v145 + v146[10]);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v144, 0, 1, (uint64_t)v146);
      }
      v436 = a1;
      v437 = v78;
      v438 = 1;
      goto LABEL_235;
    }
    if (!EnumCaseMultiPayload)
    {
      v513 = a3;
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      v7 = (int *)_s11NormalModelVMa(0);
      v8 = v7[7];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date(0);
      v505 = *(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 32);
      v12 = v9;
      v13 = v11;
      v509 = v11;
      v505(v12, v10);
      ((void (*)(char *, char *, uint64_t))v505)((char *)a1 + v7[8], (char *)a2 + v7[8], v13);
      ((void (*)(char *, char *, uint64_t))v505)((char *)a1 + v7[9], (char *)a2 + v7[9], v13);
      v14 = v7[10];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      v18 = v7[11];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for AttributedString(0);
      v495 = *(void (**)(char *, char *))(*(_QWORD *)(v21 - 8) + 32);
      v499 = v21;
      v495(v19, v20);
      *(_QWORD *)((char *)a1 + v7[12]) = *(_QWORD *)((char *)a2 + v7[12]);
      v22 = v7[13];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)((char *)a2 + v22);
      v25 = (int *)_s14ChartViewModelVMa(0);
      v26 = v25[5];
      v27 = &v23[v26];
      v28 = &v24[v26];
      v29 = type metadata accessor for DetailChartDataElement(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
      v30 = v25[6];
      v31 = &v23[v30];
      v32 = &v24[v30];
      v33 = type metadata accessor for Location(0);
      v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
      v34(v31, v32, v33);
      *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
      *(_QWORD *)&v23[v25[8]] = *(_QWORD *)&v24[v25[8]];
      *(_QWORD *)&v23[v25[9]] = *(_QWORD *)&v24[v25[9]];
      *(_QWORD *)&v23[v25[10]] = *(_QWORD *)&v24[v25[10]];
      ((void (*)(char *, char *, uint64_t))v505)(&v23[v25[11]], &v24[v25[11]], v509);
      *(_QWORD *)&v23[v25[12]] = *(_QWORD *)&v24[v25[12]];
      v487 = v34;
      v491 = v33;
      v34((char *)a1 + v7[14], (char *)a2 + v7[14], v33);
      v35 = v7[15];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = type metadata accessor for SunEvents(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      *(_QWORD *)((char *)a1 + v7[16]) = *(_QWORD *)((char *)a2 + v7[16]);
      v39 = v7[18];
      v40 = (_OWORD *)((char *)a1 + v39);
      v41 = a2;
      v42 = (_OWORD *)((char *)a2 + v39);
      v43 = type metadata accessor for DetailComponentContainerViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
      {
        v44 = sub_1000BA294(&qword_100BC68A0);
        memcpy(v40, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        v45 = v513;
        v46 = v509;
      }
      else
      {
        v79 = v42[1];
        *v40 = *v42;
        v40[1] = v79;
        v80 = *(int *)(v43 + 20);
        v81 = (char *)v40 + v80;
        v82 = (char *)v42 + v80;
        v83 = type metadata accessor for NewsArticleComponentViewModel(0);
        if (swift_getEnumCaseMultiPayload(v82) == 1)
        {
          v481 = v43;
          *(_OWORD *)v81 = *(_OWORD *)v82;
          v84 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
          v85 = v84[5];
          v86 = &v81[v85];
          v87 = &v82[v85];
          v88 = type metadata accessor for URL(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
          {
            v89 = sub_1000BA294(&qword_100BD4280);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
            v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
          }
          else
          {
            v103 = v87;
            v90 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32);
            v90(v86, v103, v88);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v86, 0, 1, v88);
          }
          *(_OWORD *)&v81[v84[6]] = *(_OWORD *)&v82[v84[6]];
          v477 = v90;
          v90(&v81[v84[7]], &v82[v84[7]], v88);
          v104 = v84[8];
          v105 = &v81[v104];
          v106 = &v82[v104];
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v82[v104], 1, v88))
          {
            v107 = sub_1000BA294(&qword_100BD4280);
            memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          }
          else
          {
            v477(v105, v106, v88);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v105, 0, 1, v88);
          }
          v45 = v513;
          v81[v84[9]] = v82[v84[9]];
          swift_storeEnumTagMultiPayload(v81, v83, 1);
          v43 = v481;
        }
        else
        {
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
          v45 = v513;
        }
        v113 = *(int *)(v43 + 24);
        v114 = (char *)v40 + v113;
        v115 = (char *)v42 + v113;
        v116 = type metadata accessor for DetailComponentAction(0);
        v46 = v509;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v115, 1, v116))
        {
          v117 = sub_1000BA294(&qword_100BD3100);
          memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        }
        else
        {
          v118 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 32))(v114, v115, v118);
          v119 = sub_1000BA294(&qword_100BC5FE8);
          v114[*(int *)(v119 + 48)] = v115[*(int *)(v119 + 48)];
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v114, 0, 1, v116);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v43);
      }
      v120 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
      v121 = (_OWORD *)((char *)a1 + v120);
      v122 = (_OWORD *)((char *)v41 + v120);
      v123 = (int *)type metadata accessor for ConditionDetailPlatterViewModel(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v122, 1, (uint64_t)v123))
      {
        v124 = sub_1000BA294(&qword_100BC68B8);
        memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
      }
      else
      {
        *v121 = *v122;
        *((_BYTE *)v121 + 16) = *((_BYTE *)v122 + 16);
        *(_OWORD *)((char *)v121 + 24) = *(_OWORD *)((char *)v122 + 24);
        v125 = v123[6];
        v126 = (char *)v121 + v125;
        v127 = (char *)v122 + v125;
        v479 = type metadata accessor for WeatherDescription(0);
        v483 = v43;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v127, 1, v479))
        {
          v128 = sub_1000BA294(&qword_100BC3368);
          memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v479 - 8) + 32))(v126, v127, v479);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v126, 0, 1, v479);
        }
        v129 = v123[7];
        v130 = (_OWORD *)((char *)v121 + v129);
        v131 = (char *)v122 + v129;
        v132 = type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
        switch(swift_getEnumCaseMultiPayload(v131))
        {
          case 0u:
            (*(void (**)(_OWORD *, char *))(*(_QWORD *)(v479 - 8) + 32))(v130, v131);
            v133 = v130;
            v134 = v132;
            v135 = 0;
            goto LABEL_128;
          case 2u:
            ((void (*)(_OWORD *, char *, uint64_t))v495)(v130, v131, v499);
            v133 = v130;
            v134 = v132;
            v135 = 2;
            goto LABEL_128;
          case 3u:
            v160 = sub_1000BA294(&qword_100BD30F8);
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v130, v131, v160);
            v133 = v130;
            v134 = v132;
            v135 = 3;
            goto LABEL_128;
          case 4u:
            v161 = *((_OWORD *)v131 + 1);
            *v130 = *(_OWORD *)v131;
            v130[1] = v161;
            v162 = *(int *)(v483 + 20);
            v163 = (char *)v130 + v162;
            v164 = &v131[v162];
            v165 = type metadata accessor for NewsArticleComponentViewModel(0);
            v473 = v130;
            if (swift_getEnumCaseMultiPayload(v164) == 1)
            {
              __dst = (void *)v165;
              v464 = v132;
              *(_OWORD *)v163 = *(_OWORD *)v164;
              v166 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
              v167 = v166[5];
              v168 = &v163[v167];
              v169 = &v164[v167];
              v170 = type metadata accessor for URL(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v169, 1, v170))
              {
                v171 = sub_1000BA294(&qword_100BD4280);
                memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
                v172 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32);
              }
              else
              {
                v202 = v169;
                v172 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32);
                v172(v168, v202, v170);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v168, 0, 1, v170);
              }
              *(_OWORD *)&v163[v166[6]] = *(_OWORD *)&v164[v166[6]];
              v459 = v172;
              v172(&v163[v166[7]], &v164[v166[7]], v170);
              v203 = v166[8];
              v204 = &v163[v203];
              v205 = &v164[v203];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v164[v203], 1, v170))
              {
                v206 = sub_1000BA294(&qword_100BD4280);
                memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
              }
              else
              {
                v459(v204, v205, v170);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v170);
              }
              v45 = v513;
              v163[v166[9]] = v164[v166[9]];
              swift_storeEnumTagMultiPayload(v163, __dst, 1);
              v132 = v464;
              v130 = v473;
            }
            else
            {
              memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
            }
            v223 = *(int *)(v483 + 24);
            v224 = (char *)v130 + v223;
            v225 = &v131[v223];
            v226 = type metadata accessor for DetailComponentAction(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v225, 1, v226))
            {
              v227 = sub_1000BA294(&qword_100BD3100);
              memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
            }
            else
            {
              v228 = type metadata accessor for URL(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v228 - 8) + 32))(v224, v225, v228);
              v229 = sub_1000BA294(&qword_100BC5FE8);
              v224[*(int *)(v229 + 48)] = v225[*(int *)(v229 + 48)];
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v224, 0, 1, v226);
            }
            v133 = v473;
            v134 = v132;
            v135 = 4;
            goto LABEL_128;
          case 6u:
            v173 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
            (*(void (**)(_OWORD *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 32))(v130, v131, v173);
            v133 = v130;
            v134 = v132;
            v135 = 6;
            goto LABEL_128;
          case 7u:
            v174 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
            if (swift_getEnumCaseMultiPayload(v131) == 1)
            {
              v456 = v174;
              *v130 = *(_OWORD *)v131;
              v175 = type metadata accessor for ConditionDetailMapViewModel(0);
              v487((char *)v130 + *(int *)(v175 + 20), &v131[*(int *)(v175 + 20)], v491);
              __src = (int *)v175;
              v176 = *(int *)(v175 + 24);
              __dsta = (_OWORD *)((char *)v130 + v176);
              v177 = &v131[v176];
              v178 = type metadata accessor for WeatherData(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v177, 1, v178))
              {
                v179 = sub_1000BA294(&qword_100BC3460);
                memcpy(__dsta, v177, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
              }
              else
              {
                v466 = v132;
                v475 = v130;
                *__dsta = *(_OWORD *)v177;
                v453 = (int *)v178;
                v207 = *(int *)(v178 + 20);
                v208 = (char *)__dsta + v207;
                v209 = &v177[v207];
                v210 = type metadata accessor for Locale(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v209, 1, v210))
                {
                  v211 = sub_1000BA294(&qword_100BC3340);
                  memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v210 - 8) + 32))(v208, v209, v210);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v208, 0, 1, v210);
                }
                v237 = v453[6];
                v450 = (char *)__dsta + v237;
                v238 = &v177[v237];
                v239 = type metadata accessor for WeatherDataModel(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v239 - 8) + 32))(v450, v238, v239);
                v240 = v453[7];
                v241 = (char *)__dsta + v240;
                v242 = &v177[v240];
                v243 = sub_1000BA294(&qword_100BC3348);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v242, 1, v243))
                {
                  v244 = type metadata accessor for WeatherData.CachingState(0);
                  memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
                }
                else
                {
                  ((void (*)(char *, char *, uint64_t))v505)(v241, v242, v46);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v241, 0, 1, v243);
                }
                v253 = v453[8];
                v254 = (char *)__dsta + v253;
                v255 = &v177[v253];
                v256 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                if (swift_getEnumCaseMultiPayload(v255) == 1)
                {
                  v257 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v257 - 8) + 32))(v254, v255, v257);
                  swift_storeEnumTagMultiPayload(v254, v256, 1);
                }
                else
                {
                  memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
                }
                v258 = v453[9];
                v259 = (uint64_t)__dsta;
                v260 = (char *)__dsta + v258;
                v261 = &v177[v258];
                v262 = type metadata accessor for WeatherDataOverrides(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v261, 1, v262))
                {
                  v263 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v263 - 8) + 64));
                }
                else
                {
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v261, 1, v509))
                  {
                    v274 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
                  }
                  else
                  {
                    ((void (*)(char *, char *, uint64_t))v505)(v260, v261, v509);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v260, 0, 1, v509);
                  }
                  v276 = *(int *)(v262 + 20);
                  v277 = &v260[v276];
                  v278 = &v261[v276];
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v278, 1, v509))
                  {
                    v279 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                    memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
                  }
                  else
                  {
                    ((void (*)(char *, char *, uint64_t))v505)(v277, v278, v509);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v277, 0, 1, v509);
                  }
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v260, 0, 1, v262);
                  v259 = (uint64_t)__dsta;
                }
                _s7Weather24LocationCompositionStateOwst_0(v259, 0, 1, (uint64_t)v453);
                v132 = v466;
                v130 = v475;
              }
              *(_OWORD *)((char *)v130 + __src[7]) = *(_OWORD *)&v131[__src[7]];
              v284 = __src[8];
              v468 = (char *)v130 + v284;
              v285 = &v131[v284];
              v286 = type metadata accessor for WeatherMapOverlayKind(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v286 - 8) + 32))(v468, v285, v286);
              *((_BYTE *)v130 + __src[9]) = v131[__src[9]];
              swift_storeEnumTagMultiPayload(v130, v456, 1);
            }
            else
            {
              memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
            }
            v133 = v130;
            v134 = v132;
            v135 = 7;
LABEL_128:
            swift_storeEnumTagMultiPayload(v133, v134, v135);
            break;
          default:
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
            break;
        }
        v287 = v123[8];
        v288 = (_OWORD *)((char *)v121 + v287);
        v289 = (_OWORD *)((char *)v122 + v287);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v122 + v287, 1, v132))
        {
          v290 = sub_1000BA294(&qword_100BD3108);
          memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v289))
          {
            case 0u:
              (*(void (**)(_OWORD *, _OWORD *))(*(_QWORD *)(v479 - 8) + 32))(v288, v289);
              v291 = v288;
              v292 = v132;
              v293 = 0;
              goto LABEL_219;
            case 2u:
              ((void (*)(_OWORD *, _OWORD *, uint64_t))v495)(v288, v289, v499);
              v291 = v288;
              v292 = v132;
              v293 = 2;
              goto LABEL_219;
            case 3u:
              v294 = sub_1000BA294(&qword_100BD30F8);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v294 - 8) + 32))(v288, v289, v294);
              v291 = v288;
              v292 = v132;
              v293 = 3;
              goto LABEL_219;
            case 4u:
              v295 = v289[1];
              *v288 = *v289;
              v288[1] = v295;
              v296 = *(int *)(v483 + 20);
              v297 = (char *)v288 + v296;
              v298 = (char *)v289 + v296;
              v299 = type metadata accessor for NewsArticleComponentViewModel(0);
              if (swift_getEnumCaseMultiPayload(v298) == 1)
              {
                v511 = v299;
                v501 = v288;
                v469 = v132;
                *(_OWORD *)v297 = *(_OWORD *)v298;
                v300 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                v301 = v300[5];
                v302 = &v297[v301];
                v303 = &v298[v301];
                v304 = type metadata accessor for URL(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v303, 1, v304))
                {
                  v305 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v302, v303, *(_QWORD *)(*(_QWORD *)(v305 - 8) + 64));
                  v306 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v304 - 8) + 32);
                }
                else
                {
                  v315 = v303;
                  v306 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v304 - 8) + 32);
                  v306(v302, v315, v304);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v302, 0, 1, v304);
                }
                *(_OWORD *)&v297[v300[6]] = *(_OWORD *)&v298[v300[6]];
                v507 = v306;
                v306(&v297[v300[7]], &v298[v300[7]], v304);
                v316 = v300[8];
                v317 = &v297[v316];
                v318 = &v298[v316];
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v298[v316], 1, v304))
                {
                  v319 = sub_1000BA294(&qword_100BD4280);
                  memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v319 - 8) + 64));
                }
                else
                {
                  v507(v317, v318, v304);
                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v317, 0, 1, v304);
                }
                v45 = v513;
                v297[v300[9]] = v298[v300[9]];
                swift_storeEnumTagMultiPayload(v297, v511, 1);
                v132 = v469;
                v288 = v501;
              }
              else
              {
                memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
              }
              v325 = *(int *)(v483 + 24);
              v326 = v288;
              v327 = (char *)v288 + v325;
              v328 = (char *)v289 + v325;
              v329 = type metadata accessor for DetailComponentAction(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v328, 1, v329))
              {
                v330 = sub_1000BA294(&qword_100BD3100);
                memcpy(v327, v328, *(_QWORD *)(*(_QWORD *)(v330 - 8) + 64));
              }
              else
              {
                v331 = type metadata accessor for URL(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v331 - 8) + 32))(v327, v328, v331);
                v332 = sub_1000BA294(&qword_100BC5FE8);
                v327[*(int *)(v332 + 48)] = v328[*(int *)(v332 + 48)];
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v327, 0, 1, v329);
              }
              v288 = v326;
              v291 = v326;
              v292 = v132;
              v293 = 4;
              goto LABEL_219;
            case 6u:
              v307 = type metadata accessor for PrecipitationTotalPlatterViewModel(0);
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v307 - 8) + 32))(v288, v289, v307);
              v291 = v288;
              v292 = v132;
              v293 = 6;
              goto LABEL_219;
            case 7u:
              v308 = type metadata accessor for ConditionDetailDynamicContentIdentifier(0);
              if (swift_getEnumCaseMultiPayload(v289) == 1)
              {
                v497 = v308;
                *v288 = *v289;
                v309 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
                v487((char *)v288 + v309[5], (char *)v289 + v309[5], v491);
                v310 = v309[6];
                v311 = (_OWORD *)((char *)v288 + v310);
                v312 = (_OWORD *)((char *)v289 + v310);
                v313 = (int *)type metadata accessor for WeatherData(0);
                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v312, 1, (uint64_t)v313))
                {
                  v314 = sub_1000BA294(&qword_100BC3460);
                  memcpy(v311, v312, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
                  v45 = v513;
                }
                else
                {
                  v502 = v288;
                  v470 = v132;
                  *v311 = *v312;
                  v489 = v311;
                  v493 = (uint64_t)v313;
                  v320 = v313[5];
                  v321 = (char *)v311 + v320;
                  v322 = (char *)v312 + v320;
                  v323 = type metadata accessor for Locale(0);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v322, 1, v323))
                  {
                    v324 = sub_1000BA294(&qword_100BC3340);
                    memcpy(v321, v322, *(_QWORD *)(*(_QWORD *)(v324 - 8) + 64));
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v323 - 8) + 32))(v321, v322, v323);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v321, 0, 1, v323);
                  }
                  v385 = v313[6];
                  v386 = (char *)v489 + v385;
                  v387 = (char *)v312 + v385;
                  v388 = type metadata accessor for WeatherDataModel(0);
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v388 - 8) + 32))(v386, v387, v388);
                  v389 = v313[7];
                  v390 = (char *)v489 + v389;
                  v391 = (char *)v312 + v389;
                  v392 = sub_1000BA294(&qword_100BC3348);
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v391, 1, v392))
                  {
                    v393 = type metadata accessor for WeatherData.CachingState(0);
                    memcpy(v390, v391, *(_QWORD *)(*(_QWORD *)(v393 - 8) + 64));
                  }
                  else
                  {
                    ((void (*)(char *, char *, uint64_t))v505)(v390, v391, v509);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v390, 0, 1, v392);
                  }
                  v403 = v313[8];
                  v404 = (char *)v489 + v403;
                  v405 = (char *)v312 + v403;
                  v406 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                  if (swift_getEnumCaseMultiPayload(v405) == 1)
                  {
                    v407 = type metadata accessor for WeatherStatisticsModel(0);
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v407 - 8) + 32))(v404, v405, v407);
                    swift_storeEnumTagMultiPayload(v404, v406, 1);
                  }
                  else
                  {
                    memcpy(v404, v405, *(_QWORD *)(*(_QWORD *)(v406 - 8) + 64));
                  }
                  v408 = (uint64_t)v489;
                  v409 = v313[9];
                  v410 = (char *)v489 + v409;
                  v411 = (char *)v312 + v409;
                  v412 = type metadata accessor for WeatherDataOverrides(0);
                  v132 = v470;
                  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v411, 1, v412))
                  {
                    v413 = sub_1000BA294(&qword_100BC3350);
                    memcpy(v410, v411, *(_QWORD *)(*(_QWORD *)(v413 - 8) + 64));
                    v45 = v513;
                  }
                  else
                  {
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v411, 1, v509))
                    {
                      v424 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v410, v411, *(_QWORD *)(*(_QWORD *)(v424 - 8) + 64));
                    }
                    else
                    {
                      ((void (*)(char *, char *, uint64_t))v505)(v410, v411, v509);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v410, 0, 1, v509);
                    }
                    v426 = *(int *)(v412 + 20);
                    v427 = &v410[v426];
                    v428 = &v411[v426];
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v411[v426], 1, v509))
                    {
                      v429 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v427, v428, *(_QWORD *)(*(_QWORD *)(v429 - 8) + 64));
                    }
                    else
                    {
                      ((void (*)(char *, char *, uint64_t))v505)(v427, v428, v509);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v427, 0, 1, v509);
                    }
                    v45 = v513;
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v410, 0, 1, v412);
                    v132 = v470;
                    v408 = (uint64_t)v489;
                  }
                  _s7Weather24LocationCompositionStateOwst_0(v408, 0, 1, v493);
                  v288 = v502;
                }
                *(_OWORD *)((char *)v288 + v309[7]) = *(_OWORD *)((char *)v289 + v309[7]);
                v430 = v309[8];
                v431 = v288;
                v432 = (char *)v288 + v430;
                v433 = (char *)v289 + v430;
                v434 = type metadata accessor for WeatherMapOverlayKind(0);
                v435 = v432;
                v288 = v431;
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v434 - 8) + 32))(v435, v433, v434);
                *((_BYTE *)v431 + v309[9]) = *((_BYTE *)v289 + v309[9]);
                swift_storeEnumTagMultiPayload(v431, v497, 1);
              }
              else
              {
                memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v308 - 8) + 64));
              }
              v291 = v288;
              v292 = v132;
              v293 = 7;
LABEL_219:
              swift_storeEnumTagMultiPayload(v291, v292, v293);
              break;
            default:
              memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
              break;
          }
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v288, 0, 1, v132);
        }
        *((_BYTE *)v121 + v123[9]) = *((_BYTE *)v122 + v123[9]);
        *((_BYTE *)v121 + v123[10]) = *((_BYTE *)v122 + v123[10]);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v121, 0, 1, (uint64_t)v123);
      }
      v436 = a1;
      v437 = v45;
      v438 = 0;
LABEL_235:
      swift_storeEnumTagMultiPayload(v436, v437, v438);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10057F404(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[32];
  _BYTE v11[32];
  _QWORD v12[2];

  v2 = _s11NormalModelVMa(319);
  if (v3 <= 0x3F)
  {
    sub_10057F4DC(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      swift_getTupleTypeLayout2(v11, *(_QWORD *)(v2 - 8) + 64, v6);
      v12[0] = v11;
      v7 = _s10PolarModelVMa(319);
      v2 = v7;
      if (v8 <= 0x3F)
      {
        swift_getTupleTypeLayout2(v10, *(_QWORD *)(v7 - 8) + 64, v6);
        v12[1] = v10;
        swift_initEnumMetadataMultiPayload(a1, 256, 2, v12);
        return 0;
      }
    }
  }
  return v2;
}

void sub_10057F4DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100BC9748)
  {
    v2 = type metadata accessor for ConditionDetailPlatterViewModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100BC9748);
  }
}

void sub_10057F530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  int EnumCaseMultiPayload;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);

  sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000C3CF4();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000CCF4C();
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100079F58();
  sub_100095B78(v1, v0, v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0);
  if (!EnumCaseMultiPayload)
  {
    v8 = *(_DWORD *)(sub_1000BA294(&qword_100BF1898) + 48);
    sub_10007C77C(v0, v2, _s11NormalModelVMa);
    sub_100099360();
    v9 = v2;
    v10 = _s11NormalModelVMa;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *(_DWORD *)(sub_1000BA294(&qword_100BF18A0) + 48);
    sub_10007C77C(v0, v1, _s10PolarModelVMa);
    sub_100099360();
    v9 = v1;
    v10 = _s10PolarModelVMa;
LABEL_5:
    sub_1000215BC(v9, v10);
    sub_100021A14(v0 + v8, &qword_100BC68B8);
  }
  sub_10004A2A0();
}

void sub_10057F66C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000C3CF4();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000D9740();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C0F18(v5, v6, v11);
  v7 = sub_1000ECFF8();
  if (!v7)
  {
    v8 = *(_DWORD *)(sub_1000BA294(&qword_100BF1898) + 48);
    sub_10009DBA0();
    sub_100099360();
    v9 = sub_1000C0108();
    goto LABEL_5;
  }
  if (v7 == 1)
  {
    v8 = *(_DWORD *)(sub_1000BA294(&qword_100BF18A0) + 48);
    sub_10009BD30(v0, v1);
    sub_100099360();
    v9 = v1;
    v10 = _s10PolarModelVMa;
LABEL_5:
    sub_1000215BC(v9, v10);
    sub_100021A14(v0 + v8, &qword_100BC68B8);
  }
  sub_10004A2A0();
}

void sub_10057F788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000C3CF4();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000D9740();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_1000C0F18(v5, v6, v11);
  v7 = sub_1000ECFF8();
  if (!v7)
  {
    v8 = *(_DWORD *)(sub_1000BA294(&qword_100BF1898) + 48);
    sub_10009DBA0();
    sub_100099360();
    v9 = sub_1000C0108();
    goto LABEL_5;
  }
  if (v7 == 1)
  {
    v8 = *(_DWORD *)(sub_1000BA294(&qword_100BF18A0) + 48);
    sub_10009BD30(v0, v1);
    sub_100099360();
    v9 = v1;
    v10 = _s10PolarModelVMa;
LABEL_5:
    sub_1000215BC(v9, v10);
    sub_100021A14(v0 + v8, &qword_100BC68B8);
  }
  sub_10004A2A0();
}

#error "10057F910: call analysis failed (funcsize=65)"

#error "10057FA54: call analysis failed (funcsize=74)"

#error "10057FB70: call analysis failed (funcsize=65)"

void sub_10057FC24(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v58 = a1;
  v55 = sub_1000992C4();
  v53 = *(_QWORD *)(v55 - 8);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v51 = v4;
  v56 = sub_1000B267C();
  v54 = *(_QWORD *)(v56 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v52 = v6;
  v7 = type metadata accessor for DetailChartDataElement(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v48 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v47 = (char *)&v45 - v11;
  v57 = type metadata accessor for DetailChartDataElement.ValueLabel(0);
  v12 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v45 - v16);
  v18 = sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100098EC8();
  sub_1000B42B0();
  __chkstk_darwin(v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D9740();
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_100079F58();
  v46 = v2;
  sub_100095B78(v2, v1, v27);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      *v17 = 0;
      v17[1] = 0xE000000000000000;
      v31 = v57;
      v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v17, enum case for DetailChartDataElement.ValueLabel.text(_:), v57);
      v33 = v52;
      Date.init()(v32);
      (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v14, v17, v31);
      v34 = v47;
      v35 = v33;
      DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(v33, 0, 1, v14, 0, 0xE000000000000000, 0, 0xE000000000000000);
      v45 = Gradient.init(stops:)(_swiftEmptyArrayStorage);
      v37 = v48;
      v36 = v49;
      v38 = v50;
      v39 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 16))(v48, v34, v50);
      v40 = v51;
      v41 = sub_100580014(v39);
      Date.init()(v41);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v38);
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v17, v57);
      v42 = v58;
      *(_QWORD *)v58 = _swiftEmptyArrayStorage;
      v43 = (int *)_s14ChartViewModelVMa(0);
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(&v42[v43[5]], v37, v38);
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(&v42[v43[6]], v40, v55);
      v44 = (uint64_t *)&v42[v43[7]];
      *v44 = v45;
      v44[1] = 0;
      *(_QWORD *)&v42[v43[8]] = _swiftEmptyArrayStorage;
      *(_QWORD *)&v42[v43[9]] = _swiftEmptyArrayStorage;
      *(_QWORD *)&v42[v43[10]] = _swiftEmptyArrayStorage;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(&v42[v43[11]], v35, v56);
      *(_QWORD *)&v42[v43[12]] = _swiftEmptyArrayStorage;
      goto LABEL_7;
    }
    sub_1000BA294(&qword_100BF18A0);
    sub_10009BD30(v1, (uint64_t)v21);
    sub_100095B78((uint64_t)&v21[*(int *)(v18 + 48)], (uint64_t)v58, _s14ChartViewModelVMa);
    v29 = (uint64_t)v21;
  }
  else
  {
    sub_1000BA294(&qword_100BF1898);
    sub_10009BD30(v1, (uint64_t)v25);
    sub_100095B78((uint64_t)&v25[*(int *)(v22 + 52)], (uint64_t)v58, _s14ChartViewModelVMa);
    v29 = (uint64_t)v25;
  }
  sub_1000B3B44(v29);
  sub_10009518C(v30, &qword_100BC68B8);
LABEL_7:
  sub_100098640();
}

#error "100580080: call analysis failed (funcsize=65)"

#error "1005801C4: call analysis failed (funcsize=74)"

void sub_100580274(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000D9740();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000C0108();
  sub_100095B78(v5, v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4);
  if (!EnumCaseMultiPayload)
  {
    v11 = sub_1000BA294(&qword_100BF1898);
    sub_1000DB2D8(v11);
    v10 = _s11NormalModelVMa;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v9 = sub_1000BA294(&qword_100BF18A0);
    sub_1000DB2D8(v9);
    v10 = _s10PolarModelVMa;
LABEL_5:
    sub_1000215BC((uint64_t)v4, v10);
    return;
  }
  v12 = type metadata accessor for ConditionDetailPlatterViewModel(0);
  sub_10009D34C(a1, v13, v14, v12);
}

#error "1005803B4: call analysis failed (funcsize=70)"

uint64_t sub_100580484(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t (*v67)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t countAndFlagsBits;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v74;
  NSBundle v76;
  uint64_t v77;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  id v171;
  uint64_t v172;
  uint64_t v174;
  NSBundle v176;
  uint64_t v177;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  id v187;
  uint64_t v188;
  uint64_t v190;
  NSBundle v192;
  uint64_t v193;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t v200;
  os_log_type_t v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t);
  uint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t);
  uint64_t v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  id v237;
  Swift::String v238;
  Swift::String v239;
  void (*v240)(uint64_t, uint64_t);
  uint64_t (*v241)(uint64_t, _QWORD);
  id v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  Swift::String v309;

  v304 = a1;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v4);
  sub_1000860D0();
  v292 = v5;
  sub_10009D2A4();
  __chkstk_darwin(v6);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v7);
  sub_1000860D0();
  v294 = v8;
  sub_10009D2A4();
  __chkstk_darwin(v9);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_1000860D0();
  v296 = v11;
  sub_10009D2A4();
  __chkstk_darwin(v12);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v13);
  sub_1000860D0();
  v293 = v14;
  sub_10009D2A4();
  __chkstk_darwin(v15);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v16);
  sub_1000860D0();
  v298 = v17;
  sub_10009D2A4();
  __chkstk_darwin(v18);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v19);
  sub_1000860D0();
  v295 = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_1000860D0();
  v299 = v22;
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_1000860D0();
  v297 = v24;
  sub_10009D2A4();
  __chkstk_darwin(v25);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v26);
  v302 = (char *)&v309._object - v27;
  v301 = sub_1000B267C();
  v303 = *(_QWORD *)(v301 - 8);
  sub_10009D98C();
  __chkstk_darwin(v28);
  sub_1000986FC();
  v305 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v31);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v32);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v33);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v34);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v35);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v36);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v37);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v38);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v39);
  sub_1000860D0();
  v290 = v40;
  sub_10009D2A4();
  __chkstk_darwin(v41);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v42);
  sub_1000860D0();
  v291 = v43;
  sub_10009D2A4();
  __chkstk_darwin(v44);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v45);
  v47 = (char *)&v309._object - v46;
  __chkstk_darwin(v48);
  v50 = (char *)&v309._object - v49;
  __chkstk_darwin(v51);
  v53 = (char *)&v309._object - v52;
  v54 = type metadata accessor for SunEvents(0);
  v55 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v57 = (char *)&v309._object - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100098EC8();
  sub_1000B42B0();
  __chkstk_darwin(v59);
  v61 = (char *)&v309._object - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v62);
  sub_100088FDC();
  v300 = v63;
  sub_1000D9740();
  sub_1000B42B0();
  __chkstk_darwin(v64);
  v66 = (char *)&v309._object - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78((uint64_t)v306, (uint64_t)v66, v67);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v66);
  if (!EnumCaseMultiPayload)
  {
    v267 = v50;
    v268 = v47;
    v80 = v303;
    v306 = &v66[*(int *)(sub_1000BA294(&qword_100BF1898) + 48)];
    sub_10007C77C((uint64_t)v66, (uint64_t)v61, _s11NormalModelVMa);
    v81 = &v61[*(int *)(v58 + 60)];
    v271 = v55;
    v82 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    v300 = v54;
    v82(v57, v81, v54);
    v83 = (uint64_t)v302;
    sub_10009BD38();
    SunEvents.nauticalDawn.getter();
    v84 = v301;
    v85 = _s7Weather24LocationCompositionStateOwet_0(v83, 1, v301);
    v270 = v61;
    if ((_DWORD)v85 == 1)
    {
      sub_10009ED60(v85, (uint64_t *)&unk_100BD35A0);
      v87 = v80;
    }
    else
    {
      v87 = v80;
      v90 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 32);
      v90(v53, v83, v84);
      v91 = v289;
      sub_1000DC220();
      SunEvents.astronomicalDawn.getter();
      sub_1000BBCA0(v91);
      if (!v102)
      {
        countAndFlagsBits = (uint64_t)v267;
        v90(v267, v91, v84);
        sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
        v94 = v304;
        v95 = sub_1000BF1D4(v304, countAndFlagsBits);
        v93 = v299;
        if ((v95 & 1) != 0)
        {
          v96 = countAndFlagsBits;
        }
        else
        {
          if ((sub_1000BF1D4((uint64_t)v53, v94) & 1) == 0)
          {
            v211 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            sub_1000CF8D8();
            sub_1000989C4();
            sub_1000BABFC(v212, 0x8000000100A0ABD0, v213, v214, v215, v216, v217, v218);
            sub_1000C569C();
            sub_1000DA63C((uint64_t)v267);
            v219 = (uint64_t)v53;
            goto LABEL_114;
          }
          v96 = (uint64_t)v267;
        }
        sub_10009554C(v96);
        v86 = sub_10009554C((uint64_t)v53);
LABEL_18:
        v97 = v297;
        SunEvents.civilDawn.getter(v86);
        sub_1000BBCA0(v97);
        v98 = v298;
        if (v102)
        {
          v99 = v87;
          v100 = v97;
        }
        else
        {
          v101 = (uint64_t)v268;
          sub_1000D910C((uint64_t)v268, v97);
          sub_1000DC220();
          SunEvents.nauticalDawn.getter();
          sub_1000BBCA0(v93);
          if (!v102)
          {
            v104 = v277;
            sub_1000D910C(v277, v93);
            sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
            countAndFlagsBits = v105;
            v106 = sub_1000C4B80(v94, v104);
            if ((v106 & 1) == 0 && (sub_1000C4B80((uint64_t)v268, v94) & 1) == 0)
            {
              v220 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              sub_1000D0714();
              sub_1000989C4();
              sub_1000BABFC(v221, 0x8000000100A0AC50, v222, v223, v224, v225, v226, v227);
              sub_1000C569C();
              sub_1000DA63C(v104);
              sub_1000DA63C((uint64_t)v268);
              (*(void (**)(char *, uint64_t))(v271 + 8))(v57, v300);
              goto LABEL_110;
            }
            v99 = v87;
            sub_10009554C(v104);
            v103 = sub_10009554C((uint64_t)v268);
LABEL_28:
            countAndFlagsBits = v305;
            v107 = v295;
            SunEvents.civilDawn.getter(v103);
            sub_1000BBCA0(v107);
            v269 = v57;
            if (v102)
            {
              sub_100021A14(v107, (uint64_t *)&unk_100BD35A0);
              v109 = v296;
              v112 = v99;
              goto LABEL_38;
            }
            v110 = v107;
            v111 = v94;
            v112 = v99;
            v113 = v291;
            v114 = sub_1000D910C(v291, v110);
            v115 = v286;
            SunEvents.sunrise.getter(v114);
            sub_1000BBCA0(v115);
            if (v116)
            {
              sub_100098748(v113, *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8));
              sub_100021A14(v115, (uint64_t *)&unk_100BD35A0);
LABEL_36:
              countAndFlagsBits = v305;
              v109 = v296;
              v94 = v111;
LABEL_37:
              v57 = v269;
LABEL_38:
              SunEvents.sunrise.getter(v108);
              v120 = sub_1000BBCA0(v98);
              v121 = v293;
              if (v102)
              {
                sub_1000988A0(v120, (uint64_t *)&unk_100BD35A0);
                sub_1000C1B30();
              }
              else
              {
                v122 = v290;
                v123 = sub_1000D910C(v290, v98);
                v98 = v285;
                SunEvents.sunset.getter(v123);
                sub_1000BBCA0(v98);
                if (!v124)
                {
                  v136 = v275;
                  sub_1000D910C(v275, v98);
                  sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
                  sub_1000C4B80(v94, v122);
                  sub_1000C1B30();
                  v138 = v122;
                  v126 = v294;
                  if ((v137 & 1) != 0)
                  {
                    v139 = v136;
                    v112 = v303;
                    sub_10009554C(v139);
                    sub_10009554C(v138);
                    countAndFlagsBits = v305;
                  }
                  else
                  {
                    if ((sub_1000C4B80(v136, v94) & 1) == 0)
                    {
                      v237 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                      sub_1000989C4();
                      v238._countAndFlagsBits = 5849412;
                      v238._object = (void *)0xE300000000000000;
                      v239._countAndFlagsBits = 0;
                      v239._object = (void *)0xE000000000000000;
                      v309._countAndFlagsBits = 0xD000000000000048;
                      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v238, (Swift::String_optional)0, (NSBundle)v237, v239, v309)._countAndFlagsBits;

                      v240 = *(void (**)(uint64_t, uint64_t))(v303 + 8);
                      v240(v136, v84);
                      v240(v290, v84);
                      v241 = *(uint64_t (**)(uint64_t, _QWORD))(v98 + 8);
LABEL_115:
                      sub_1000DACE8(v241);
                      v88 = _s11NormalModelVMa;
                      v89 = (uint64_t)v270;
                      goto LABEL_116;
                    }
                    v152 = v136;
                    v112 = v303;
                    sub_10009554C(v152);
                    sub_10009554C(v290);
                    v94 = v304;
                    countAndFlagsBits = v305;
                  }
                  goto LABEL_45;
                }
                v125 = sub_100098748(v122, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                sub_1000988A0(v125, (uint64_t *)&unk_100BD35A0);
                sub_1000C1B30();
                countAndFlagsBits = v305;
              }
              v126 = v294;
LABEL_45:
              sub_10009BD38();
              SunEvents.sunset.getter(v127);
              v128 = sub_1000BBCA0(v121);
              if (v102)
              {
                sub_10009ED60(v128, (uint64_t *)&unk_100BD35A0);
LABEL_56:
                SunEvents.civilDusk.getter(v129);
                sub_1000BBCA0(v109);
                if (v102)
                {
                  sub_100021A14(v109, (uint64_t *)&unk_100BD35A0);
                  goto LABEL_73;
                }
                v143 = v109;
                v144 = v287;
                sub_1000D910C(v287, v143);
                v145 = v282;
                sub_10009BD38();
                SunEvents.nauticalDusk.getter();
                sub_1000BBCA0(v145);
                if (v146)
                {
                  v147 = sub_100098748(v144, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                  sub_10009ED60(v147, (uint64_t *)&unk_100BD35A0);
                  countAndFlagsBits = v305;
                  goto LABEL_73;
                }
                v98 = v273;
                sub_1000D910C(v273, v145);
                sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
                countAndFlagsBits = v148;
                v149 = sub_1000C4B80(v94, v144);
                if ((v149 & 1) != 0)
                {
                  sub_10009554C(v98);
                  v150 = v144;
LABEL_72:
                  sub_10009554C(v150);
                  countAndFlagsBits = v305;
                  sub_1000C1B30();
LABEL_73:
                  sub_1000DC220();
                  SunEvents.nauticalDusk.getter();
                  v154 = sub_1000BBCA0(v126);
                  if (v102)
                  {
                    v155 = (uint64_t)v270;
                    sub_1000988B0(v154, (uint64_t *)&unk_100BD35A0);
                  }
                  else
                  {
                    v156 = v126;
                    v157 = (uint64_t)v270;
                    v158 = v279;
                    v159 = sub_1000D910C(v279, v156);
                    v160 = v280;
                    SunEvents.astronomicalDusk.getter(v159);
                    sub_1000BBCA0(v160);
                    if (v161)
                    {
                      v155 = v157;
                      v162 = sub_100098748(v158, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                      sub_10009518C(v162, (uint64_t *)&unk_100BD35A0);
                      countAndFlagsBits = v305;
                    }
                    else
                    {
                      v98 = v272;
                      sub_1000D910C(v272, v160);
                      sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
                      countAndFlagsBits = v163;
                      v164 = sub_1000C4B80(v94, v158);
                      if ((v164 & 1) == 0 && (sub_1000C4B80(v98, v94) & 1) == 0)
                      {
                        v258 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                        sub_1000CF8D8();
                        sub_1000989C4();
                        sub_1000BABFC(v259, 0x8000000100A0ABD0, v260, v261, v262, v263, v264, v265);
                        sub_1000C569C();
                        sub_1000DA63C(v98);
                        sub_1000DA63C(v158);
                        sub_1000DACE8(*(uint64_t (**)(uint64_t, _QWORD))(v271 + 8));
                        v88 = _s11NormalModelVMa;
                        v89 = v157;
                        goto LABEL_116;
                      }
                      v155 = v157;
                      sub_10009554C(v98);
                      sub_10009554C(v158);
                      countAndFlagsBits = v305;
                      sub_1000C1B30();
                    }
                  }
                  v165 = v292;
                  sub_10009BD38();
                  SunEvents.sunrise.getter(v166);
                  v167 = v165;
                  v168 = sub_1000BBCA0(v165);
                  if (v102)
                  {
                    sub_10009518C(v168, (uint64_t *)&unk_100BD35A0);
                  }
                  else
                  {
                    v169 = v278;
                    sub_10008908C(v278, v167, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 32));
                    v170 = static Date.< infix(_:_:)(v94, v169);
                    if ((v170 & 1) != 0)
                    {
                      v171 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                      if (a2 >= 0.0)
                        v172 = sub_1000E71C0();
                      else
                        v172 = sub_1000C607C();
                      NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v172, *(Swift::String_optional *)&v174, v176, *(Swift::String *)&v177, *(Swift::String *)(&v266 - 1));
                      sub_1000C569C();
                      v209 = *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8);
                      v210 = v169;
LABEL_107:
                      sub_100098748(v210, v209);
                      sub_1000DACE8(*(uint64_t (**)(uint64_t, _QWORD))(v98 + 8));
                      v88 = _s11NormalModelVMa;
                      v89 = v155;
LABEL_116:
                      sub_1000215BC(v89, v88);
LABEL_117:
                      sub_1000988B0(v208, &qword_100BC68B8);
                      return countAndFlagsBits;
                    }
                    sub_100098748(v169, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                  }
                  v180 = v288;
                  sub_1000DC220();
                  SunEvents.sunset.getter(v181);
                  v182 = sub_1000BBCA0(v180);
                  if (v102)
                  {
                    sub_1000988B0(v182, (uint64_t *)&unk_100BD35A0);
                  }
                  else
                  {
                    v183 = v281;
                    sub_10008908C(v281, v180, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 32));
                    v184 = sub_1000C0108();
                    v186 = static Date.> infix(_:_:)(v184, v185);
                    if ((v186 & 1) != 0)
                    {
                      v187 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                      if (a2 >= 0.0)
                        v188 = sub_1000E71C0();
                      else
                        v188 = sub_1000C607C();
                      NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v188, *(Swift::String_optional *)&v190, v192, *(Swift::String *)&v193, *(Swift::String *)(&v266 - 1));
                      sub_1000C569C();
                      v209 = *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8);
                      v210 = v281;
                      goto LABEL_107;
                    }
                    sub_100098748(v183, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                  }
                  if (qword_100BC2410 != -1)
                    swift_once(&qword_100BC2410, sub_10015961C);
                  v196 = type metadata accessor for Logger(0);
                  sub_1000AECD4(v196, (uint64_t)qword_100CAF028);
                  v197 = sub_10008908C(countAndFlagsBits, v94, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 16));
                  v198 = Logger.logObject.getter(v197);
                  v200 = v84;
                  v201 = static os_log_type_t.error.getter(v198, v199);
                  if (os_log_type_enabled(v198, v201))
                  {
                    v202 = (uint8_t *)swift_slowAlloc(12, -1);
                    v203 = swift_slowAlloc(32, -1);
                    v308 = v203;
                    *(_DWORD *)v202 = 136446210;
                    sub_1000A84E0((unint64_t *)&qword_100BC52F0, (uint64_t)&protocol conformance descriptor for Date);
                    v204 = dispatch thunk of CustomStringConvertible.description.getter(v200);
                    v307 = sub_1000CE1C8(v204, v205, &v308);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
                    swift_bridgeObjectRelease();
                    sub_1000DBB88();
                    _os_log_impl((void *)&_mh_execute_header, v198, v201, "Failed to create Day Phase string for date:%{public}s", v202, 0xCu);
                    swift_arrayDestroy(v203, 1);
                    sub_1000986F0(v203);
                    sub_1000986F0((uint64_t)v202);

                    v206 = sub_1000F44C4();
                  }
                  else
                  {

                    sub_1000DBB88();
                    v207 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
                    v206 = (uint64_t)v57;
                  }
                  v207(v206, v300);
                  sub_1000215BC((uint64_t)v270, _s11NormalModelVMa);
                  countAndFlagsBits = 0;
                  goto LABEL_117;
                }
                if ((sub_1000C4B80(v98, v94) & 1) != 0)
                {
                  sub_10009554C(v98);
                  v150 = v287;
                  goto LABEL_72;
                }
                v249 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                sub_1000D0714();
                sub_1000989C4();
                sub_1000BABFC(v250, 0x8000000100A0AC50, v251, v252, v253, v254, v255, v256);
                sub_1000C569C();
                sub_1000DA63C(v98);
                v219 = v287;
                goto LABEL_114;
              }
              v130 = v98;
              v131 = v121;
              v132 = v284;
              v133 = sub_1000D910C(v284, v131);
              v98 = v283;
              SunEvents.civilDusk.getter(v133);
              sub_1000BBCA0(v98);
              if (v134)
              {
                v135 = sub_100098748(v132, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                sub_1000988A0(v135, (uint64_t *)&unk_100BD35A0);
                v94 = v304;
                countAndFlagsBits = v305;
                v98 = v130;
LABEL_55:
                v57 = v269;
                goto LABEL_56;
              }
              v140 = v274;
              sub_1000D910C(v274, v98);
              sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
              countAndFlagsBits = v141;
              v94 = v304;
              v142 = sub_1000C4B80(v304, v132);
              if ((v142 & 1) != 0)
              {
                sub_10009554C(v140);
                sub_10009554C(v132);
                countAndFlagsBits = v305;
                sub_1000C1B30();
                goto LABEL_55;
              }
              v98 = v140;
              v153 = sub_1000C4B80(v140, v94);
              v57 = v269;
              if ((v153 & 1) != 0)
              {
                sub_10009554C(v98);
                sub_10009554C(v132);
                v94 = v304;
                countAndFlagsBits = v305;
                sub_1000C1B30();
                goto LABEL_56;
              }
              v242 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              sub_100089148();
              sub_1000BABFC(0x5754204C49564943, 0xEE00544847494C49, v243, v244, v245, v246, v247, v248);
              sub_1000C569C();
              sub_1000DA63C(v98);
              v219 = v132;
LABEL_114:
              sub_1000DA63C(v219);
              v241 = *(uint64_t (**)(uint64_t, _QWORD))(v271 + 8);
              goto LABEL_115;
            }
            v117 = v276;
            sub_1000D910C(v276, v115);
            sub_1000A84E0((unint64_t *)&qword_100BCB0E0, (uint64_t)&protocol conformance descriptor for Date);
            countAndFlagsBits = v118;
            v119 = sub_1000C4B80(v111, v113);
            if ((v119 & 1) != 0)
            {
              sub_10009554C(v117);
              v108 = sub_10009554C(v113);
              goto LABEL_36;
            }
            v151 = sub_1000C4B80(v117, v111);
            v109 = v296;
            if ((v151 & 1) != 0)
            {
              v94 = v111;
              sub_10009554C(v117);
              v108 = sub_10009554C(v291);
              countAndFlagsBits = v305;
              goto LABEL_37;
            }
            v228 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            sub_100089148();
            sub_1000BABFC(0x5754204C49564943, 0xEE00544847494C49, v229, v230, v231, v232, v233, v234);
            sub_1000C569C();
            sub_1000DA63C(v117);
            sub_1000DA63C(v291);
            v235 = sub_1000F44C4();
            v236(v235, v300);
LABEL_110:
            v88 = _s11NormalModelVMa;
            v89 = (uint64_t)v270;
            goto LABEL_116;
          }
          v99 = v87;
          sub_100098748(v101, *(uint64_t (**)(uint64_t, uint64_t))(v87 + 8));
          v100 = v93;
        }
        sub_100021A14(v100, (uint64_t *)&unk_100BD35A0);
        goto LABEL_28;
      }
      v92 = sub_100098748((uint64_t)v53, *(uint64_t (**)(uint64_t, uint64_t))(v87 + 8));
      sub_1000988B0(v92, (uint64_t *)&unk_100BD35A0);
    }
    v94 = v304;
    v93 = v299;
    goto LABEL_18;
  }
  countAndFlagsBits = 0;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1000BA294(&qword_100BF18A0);
    v70 = v300;
    sub_10007C77C((uint64_t)v66, v300, _s10PolarModelVMa);
    countAndFlagsBits = *(unsigned __int8 *)(v70 + 32);
    v71 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if ((countAndFlagsBits & 1) != 0)
      v72 = sub_1000C607C();
    else
      v72 = sub_1000E71C0();
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v72, *(Swift::String_optional *)&v74, v76, *(Swift::String *)&v77, *(Swift::String *)(&v266 - 1));
    sub_1000C569C();
    v88 = _s10PolarModelVMa;
    v89 = v70;
    goto LABEL_116;
  }
  return countAndFlagsBits;
}

void sub_100581854(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  sub_100098EC8();
  sub_1000B42B0();
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100099928();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D9740();
  sub_1000B42B0();
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100095B78(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v23 = sub_1000B4928();
      sub_10009D34C(v27, v24, v25, v23);
      goto LABEL_7;
    }
    v18 = (uint64_t)&v15[*(int *)(sub_1000BA294(&qword_100BF18A0) + 48)];
    sub_10007C77C((uint64_t)v15, (uint64_t)v12, _s10PolarModelVMa);
    sub_10057FB04(v19);
    sub_100736DC0(v26, (uint64_t)v9, v27);
    sub_100098748((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v20 = (uint64_t)v12;
    v21 = _s10PolarModelVMa;
  }
  else
  {
    v18 = (uint64_t)&v15[*(int *)(sub_1000BA294(&qword_100BF1898) + 48)];
    sub_10007C77C((uint64_t)v15, (uint64_t)v5, _s11NormalModelVMa);
    sub_10057FB04(v22);
    sub_100737A4C();
    sub_100098748((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v20 = (uint64_t)v5;
    v21 = _s11NormalModelVMa;
  }
  sub_1000215BC(v20, v21);
  sub_100021A14(v18, &qword_100BC68B8);
LABEL_7:
  sub_100098640();
}

uint64_t sub_100581A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;

  v84 = a1;
  v85 = (char *)a2;
  sub_1000CD868();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v82 = v5;
  v79 = type metadata accessor for ConditionDetailPlatterViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v75 = v7;
  v78 = sub_1000BA294(&qword_100BCA050);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v77 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v83 = (char *)&v74 - v11;
  sub_1000BA294(&qword_100BC68B8);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_1000986FC();
  v76 = v13;
  sub_10009D2A4();
  __chkstk_darwin(v14);
  sub_1000860D0();
  v80 = v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_1000860D0();
  v81 = v17;
  sub_10009D2A4();
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v74 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v74 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v74 - v25;
  sub_100098EC8();
  sub_1000B42B0();
  __chkstk_darwin(v27);
  v28 = sub_1000CCF4C();
  sub_1000B42B0();
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (uint64_t *)((char *)&v74 - v33);
  sub_1000BA294(&qword_100BF1950);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100079F58();
  v37 = v2 + *(int *)(v36 + 48);
  sub_100095B78(v84, v2, type metadata accessor for SunriseSunsetDetailViewModel);
  sub_100095B78((uint64_t)v85, v37, type metadata accessor for SunriseSunsetDetailViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v28);
  if (!EnumCaseMultiPayload)
  {
    v85 = v24;
    v49 = v3;
    v50 = (uint64_t)v83;
    sub_100095B78(v2, (uint64_t)v34, type metadata accessor for SunriseSunsetDetailViewModel);
    v51 = *(int *)(sub_1000BA294(&qword_100BF1898) + 48);
    if (!sub_1000C6BB0())
    {
      sub_10007C77C(v37, (uint64_t)v49, _s11NormalModelVMa);
      sub_10058214C((uint64_t)v34 + v51, (uint64_t)v26);
      v55 = v37 + v51;
      v56 = (uint64_t)v85;
      sub_10058214C(v55, (uint64_t)v85);
      v57 = sub_1007749E8(v34, v49);
      sub_1000215BC((uint64_t)v34, _s11NormalModelVMa);
      if (v57)
      {
        v58 = v50 + *(int *)(v78 + 48);
        sub_1000BDD50((uint64_t)v26, v50);
        sub_1000BDD50(v56, v58);
        if (_s7Weather24LocationCompositionStateOwet_0(v50, 1, v79) == 1)
        {
          sub_10009E47C(v56);
          sub_10009E47C((uint64_t)v26);
          sub_1000C6EC0(v59, _s11NormalModelVMa);
          sub_1000BBCA0(v58);
          if (v47)
          {
            v48 = v50;
LABEL_21:
            sub_100021A14(v48, &qword_100BC68B8);
            goto LABEL_12;
          }
        }
        else
        {
          sub_10003773C(v50, (uint64_t)v21, &qword_100BC68B8);
          sub_1000BBCA0(v58);
          if (!v47)
          {
            v71 = v75;
            sub_10009BD30(v58, v75);
            sub_1008B5D2C((uint64_t)v21, v71);
            v68 = v72;
            sub_10009BEDC();
            sub_100098854((uint64_t)v85);
            sub_100098854((uint64_t)v26);
            sub_1000C6EC0(v73, _s11NormalModelVMa);
            sub_1000B3B44((uint64_t)v21);
            v70 = v50;
LABEL_34:
            sub_100098854(v70);
            if ((v68 & 1) == 0)
              goto LABEL_35;
LABEL_12:
            sub_1000215BC(v2, type metadata accessor for SunriseSunsetDetailViewModel);
            return 1;
          }
          sub_100099298((uint64_t)v85);
          sub_100099298((uint64_t)v26);
          sub_1000C6EC0(v65, _s11NormalModelVMa);
          sub_1000215BC((uint64_t)v21, type metadata accessor for ConditionDetailPlatterViewModel);
        }
        v64 = v50;
        goto LABEL_33;
      }
      sub_100099298(v56);
      sub_100099298((uint64_t)v26);
      v60 = _s11NormalModelVMa;
      v61 = (uint64_t)v49;
LABEL_24:
      sub_1000215BC(v61, v60);
LABEL_35:
      sub_1000215BC(v2, type metadata accessor for SunriseSunsetDetailViewModel);
      return 0;
    }
    sub_100021A14((uint64_t)v34 + v51, &qword_100BC68B8);
    v52 = _s11NormalModelVMa;
    v53 = (uint64_t)v34;
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_100095B78(v2, (uint64_t)v32, type metadata accessor for SunriseSunsetDetailViewModel);
    v39 = *(int *)(sub_1000BA294(&qword_100BF18A0) + 48);
    if (sub_1000C6BB0() == 1)
    {
      v40 = v82;
      sub_10007C77C(v37, v82, _s10PolarModelVMa);
      v41 = v81;
      sub_10058214C((uint64_t)&v32[v39], v81);
      v42 = v80;
      sub_10058214C(v37 + v39, v80);
      v43 = sub_1005D738C((uint64_t)v32, v40);
      sub_1000215BC((uint64_t)v32, _s10PolarModelVMa);
      if (v43)
      {
        v44 = v77;
        v45 = v77 + *(int *)(v78 + 48);
        sub_1000BDD50(v41, v77);
        sub_1000BDD50(v42, v45);
        if (_s7Weather24LocationCompositionStateOwet_0(v44, 1, v79) == 1)
        {
          sub_10009E47C(v42);
          sub_10009E47C(v41);
          sub_1000998E4(v46, _s10PolarModelVMa);
          sub_1000BBCA0(v45);
          if (!v47)
            goto LABEL_28;
          v48 = v44;
          goto LABEL_21;
        }
        v62 = v76;
        sub_10003773C(v44, v76, &qword_100BC68B8);
        sub_1000BBCA0(v45);
        if (v47)
        {
          sub_100099298(v42);
          sub_100099298(v41);
          sub_1000998E4(v63, _s10PolarModelVMa);
          sub_1000215BC(v62, type metadata accessor for ConditionDetailPlatterViewModel);
LABEL_28:
          v64 = v44;
LABEL_33:
          sub_100021A14(v64, &qword_100BCA050);
          goto LABEL_35;
        }
        v66 = v75;
        sub_10009BD30(v45, v75);
        sub_1008B5D2C(v62, v66);
        v68 = v67;
        sub_10009BEDC();
        sub_100098854(v42);
        sub_100098854(v41);
        sub_1000998E4(v69, _s10PolarModelVMa);
        sub_1000B3B44(v62);
        v70 = v44;
        goto LABEL_34;
      }
      sub_100099298(v42);
      sub_100099298(v41);
      v60 = _s10PolarModelVMa;
      v61 = v40;
      goto LABEL_24;
    }
    sub_100021A14((uint64_t)&v32[v39], &qword_100BC68B8);
    v52 = _s10PolarModelVMa;
    v53 = (uint64_t)v32;
LABEL_14:
    sub_1000215BC(v53, v52);
    goto LABEL_15;
  }
  if (sub_1000C6BB0() == 2)
    goto LABEL_12;
LABEL_15:
  sub_100021A14(v2, &qword_100BF1950);
  return 0;
}

uint64_t sub_10058214C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC68B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100582194()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __n128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];
  char v25;

  sub_1000986AC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = type metadata accessor for MapsConfiguration(0);
  v22 = *(_QWORD *)(v8 - 8);
  v23 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  v13 = type metadata accessor for AppConfiguration(0);
  sub_1000AE898();
  __chkstk_darwin(v14);
  sub_10004A2E8();
  *(_QWORD *)&v24[0] = v5;
  sub_100043CA8((uint64_t)v3, (uint64_t)v24 + 8);
  v15 = v3[3];
  v16 = v3[4];
  sub_1000DB418(v3, v15);
  swift_retain();
  v17 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v15, v16);
  AppConfiguration.maps.getter(v17);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v13);
  v19 = MapsConfiguration.enableExitOvlInfo.getter(v18);
  v20 = swift_release(v5);
  (*(void (**)(uint64_t, uint64_t, __n128))(v22 + 8))(v12, v23, v20);
  v25 = v19 & 1;
  *(_BYTE *)(v7 + 48) = v19 & 1;
  v21 = v24[1];
  *(_OWORD *)v7 = v24[0];
  *(_OWORD *)(v7 + 16) = v21;
  *(_OWORD *)(v7 + 32) = v24[2];
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v3);
  sub_100098640();
}

void sub_1005822B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_1000986AC();
  v40 = v0;
  v37 = v3;
  v4 = sub_1000C4A10();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v38 = v4;
  v39 = v6;
  __chkstk_darwin(v4);
  v36 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10009876C();
  v9 = type metadata accessor for ViewAction(v8);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_10004A2E8();
  v11 = type metadata accessor for ViewType(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100098728();
  v15 = v14 - v13;
  v16 = type metadata accessor for UUID(0);
  sub_1000AE898();
  __chkstk_darwin(v17);
  sub_100098728();
  v20 = v19 - v18;
  v22 = UUID.init()(v21);
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v20, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v15, enum case for ViewType.map(_:), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v2, enum case for ViewAction.unknown(_:), v35);
  v26 = v37;
  ViewData.init(viewSessionID:viewType:viewAction:)(v23, v25, v15, v2);
  v27 = v36;
  v28 = v26;
  v29 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v36, v28, v38);
  v30 = *(unsigned __int8 *)(v5 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = swift_allocObject(&unk_100B80FF0, v31 + v39, v30 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v32 + v31, v27, v29);
  Tracker.diagnosticTransaction(block:)(sub_1005841E8, v32);
  swift_release();
  sub_100098640();
}

uint64_t sub_100582484(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for ViewData(0);
  v4 = sub_100051B90(&qword_100BD4610, (uint64_t (*)(uint64_t))&type metadata accessor for ViewData, (uint64_t)&protocol conformance descriptor for ViewData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 69, v3, v4);
  v5 = type metadata accessor for MapViewEvent(0);
  v6 = sub_100051B90(&qword_100BF1A18, (uint64_t (*)(uint64_t))&type metadata accessor for MapViewEvent, (uint64_t)&protocol conformance descriptor for MapViewEvent);
  return AccessTracker.time<A>(_:submitAndRestartWithSession:)(v5, 0, v5, v6);
}

void sub_100582544()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  unsigned int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  sub_1000986AC();
  v61 = v0;
  v3 = v2;
  v4 = type metadata accessor for ZoomData(0);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  v64 = *(_QWORD *)(v62 + 64);
  __chkstk_darwin(v4);
  sub_10003BD18();
  v69 = v5;
  __chkstk_darwin(v6);
  v68 = (char *)&v52 - v7;
  v8 = sub_1000B4608();
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  sub_10009D98C();
  __chkstk_darwin(v9);
  v10 = sub_1000BA8E0();
  type metadata accessor for MapOverlay(v10);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100098728();
  v14 = v13 - v12;
  v60 = sub_1000E71F8();
  v66 = *(_QWORD *)(v60 - 8);
  v57 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v60);
  sub_10003BD18();
  v67 = v15;
  __chkstk_darwin(v16);
  v65 = (char *)&v52 - v17;
  v18 = sub_10009876C();
  v19 = type metadata accessor for EmbedState(v18);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_100098728();
  v23 = v22 - v21;
  v24 = sub_1000DAFA0();
  v54 = *(_QWORD *)(v24 - 8);
  v55 = v24;
  v25 = *(_QWORD *)(v54 + 64);
  __chkstk_darwin(v24);
  v53 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v52 - v28;
  if (*v3)
    v30 = (unsigned int *)&enum case for EmbedState.fullScreen(_:);
  else
    v30 = (unsigned int *)&enum case for EmbedState.pinned(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v20 + 104))(v23, *v30, v19, v27);
  v56 = v29;
  MapEmbedStateData.init(embedState:)(v23);
  v31 = type metadata accessor for InteractiveMapViewEvent(0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v58 + 16))(v1, &v3[*(int *)(v31 + 20)], v59);
  sub_1005828A8();
  v32 = v65;
  v33 = MapOverlayData.init(overlay:)(v14);
  v34 = *(double *)&v3[*(int *)(v31 + 24)];
  v35 = v68;
  ZoomData.init(level:)(v33, v34);
  v61 = (_QWORD *)*v61;
  v37 = v54;
  v36 = v55;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))((char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v55);
  v38 = v66;
  v39 = v60;
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v67, v32, v60);
  v41 = v62;
  v40 = v63;
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v69, v35, v63);
  v42 = *(unsigned __int8 *)(v37 + 80);
  v43 = (v42 + 16) & ~v42;
  v44 = *(unsigned __int8 *)(v38 + 80);
  v45 = (v25 + v44 + v43) & ~v44;
  v46 = *(unsigned __int8 *)(v41 + 80);
  v47 = (v57 + v46 + v45) & ~v46;
  v48 = swift_allocObject(&unk_100B81018, v47 + v64, v42 | v44 | v46 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v48 + v43, v53, v36);
  v49 = v48 + v45;
  v50 = v66;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v49, v67, v39);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v48 + v47, v69, v40);
  Tracker.diagnosticTransaction(block:)(sub_100584324, v48);
  v51 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v41 + 8))(v68, v40, v51);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v65, v39);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v56, v36);
  sub_100098640();
}

void sub_1005828A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  sub_1000986AC();
  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100098728();
  v6 = v5 - v4;
  v7 = sub_1000B4608();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v28 - v12;
  sub_10009D6C4((uint64_t)v28 - v12);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v13, v7);
  if ((_DWORD)v14 == enum case for WeatherMapOverlayKind.precipitation(_:))
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v15(v1, v7);
    v16 = sub_1000CD870();
    sub_1000C3D10(v16);
    v15((uint64_t)v13, v7);
  }
  else if ((_DWORD)v14 == enum case for WeatherMapOverlayKind.airQuality(_:)
         || (_DWORD)v14 == enum case for WeatherMapOverlayKind.temperature(_:)
         || (_DWORD)v14 == enum case for WeatherMapOverlayKind.wind(_:))
  {
    sub_1000CCC8C();
    v17 = sub_1000CD870();
    sub_1000C3D10(v17);
  }
  else
  {
    static Logger.map.getter(v14);
    v18 = sub_10009D6C4((uint64_t)v10);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.error.getter(v19, v20);
    v32 = v21;
    if (os_log_type_enabled(v19, v21))
    {
      v31 = v19;
      v22 = (uint8_t *)sub_100098710(12);
      v30 = sub_100098710(32);
      v34 = v30;
      *(_DWORD *)v22 = 136446210;
      v28[1] = v22 + 12;
      v29 = v22;
      v28[0] = v22 + 4;
      sub_100051B90((unint64_t *)&qword_100BF1958, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherMapOverlayKind, (uint64_t)&protocol conformance descriptor for WeatherMapOverlayKind);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v7);
      v33 = sub_1000CE1C8(v23, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      sub_1000986C4();
      sub_1000C60B8((uint64_t)v10);
      v25 = v29;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "Map overlay kind unknown to InteractiveMapTracker: %{public}s", v29, 0xCu);
      v26 = v30;
      swift_arrayDestroy(v30, 1);
      sub_1000986F0(v26);
      sub_1000986F0((uint64_t)v25);

    }
    else
    {
      sub_1000C60B8((uint64_t)v10);

    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    sub_1000C60B8(v1);
    v27 = sub_1000CD870();
    sub_1000C3D10(v27);
    sub_1000C60B8((uint64_t)v13);
  }
  sub_100098640();
}

uint64_t sub_100582BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[2];

  v7 = type metadata accessor for MapEmbedStateData(0);
  v8 = sub_100051B90(&qword_100BF1A20, (uint64_t (*)(uint64_t))&type metadata accessor for MapEmbedStateData, (uint64_t)&protocol conformance descriptor for MapEmbedStateData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 86, v7, v8);
  v9 = type metadata accessor for MapOverlayData(0);
  v10 = sub_100051B90(&qword_100BF1960, (uint64_t (*)(uint64_t))&type metadata accessor for MapOverlayData, (uint64_t)&protocol conformance descriptor for MapOverlayData);
  AccessTracker.push<A>(data:traits:file:line:)(a3, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 87, v9, v10);
  v11 = type metadata accessor for ZoomData(0);
  v12 = sub_100051B90(&qword_100BF1A28, (uint64_t (*)(uint64_t))&type metadata accessor for ZoomData, (uint64_t)&protocol conformance descriptor for ZoomData);
  AccessTracker.push<A>(data:traits:file:line:)(a4, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 88, v11, v12);
  v13 = type metadata accessor for MapViewEvent(0);
  v14 = sub_100051B90(&qword_100BF1A18, (uint64_t (*)(uint64_t))&type metadata accessor for MapViewEvent, (uint64_t)&protocol conformance descriptor for MapViewEvent);
  memset(v16, 0, sizeof(v16));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v13, 1, v16, 0, 0, v13, v14);
  return sub_1002CAAB4((uint64_t)v16);
}

void sub_100582D44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  _BYTE v109[12];
  int v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;

  sub_1000986AC();
  v149 = v0;
  v127 = v3;
  v5 = v4;
  v147 = sub_1000C4A10();
  v131 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v129 = v6;
  v145 = &v109[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10009876C();
  v8 = type metadata accessor for MapStallStatisticsData(v7);
  v132 = *(_QWORD *)(v8 - 8);
  v133 = v8;
  __chkstk_darwin(v8);
  sub_10003BD18();
  v144 = v9;
  v128 = v10;
  __chkstk_darwin(v11);
  v146 = &v109[-v12];
  v13 = sub_10009876C();
  v125 = type metadata accessor for WeatherMapSessionStatistics.Timing(v13);
  v124 = *(_QWORD *)(v125 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v123 = v15;
  v16 = sub_10009876C();
  v121 = type metadata accessor for WeatherMapSessionStatistics.ResponseCounters(v16);
  v119 = *(_QWORD *)(v121 - 8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v120 = v18;
  v19 = sub_10009876C();
  v143 = type metadata accessor for MapSessionStatisticsData(v19);
  v130 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  sub_10003BD18();
  v141 = v20;
  v126 = v21;
  __chkstk_darwin(v22);
  v142 = &v109[-v23];
  v136 = sub_1000B4608();
  v117 = *(_QWORD *)(v136 - 8);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v118 = v25;
  v26 = sub_10009876C();
  type metadata accessor for MapOverlay(v26);
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v116 = v28;
  v29 = sub_10009876C();
  v30 = type metadata accessor for MapOverlayData(v29);
  v139 = *(_QWORD *)(v30 - 8);
  v140 = v30;
  __chkstk_darwin(v30);
  sub_10003BD18();
  v138 = v31;
  v122 = v32;
  __chkstk_darwin(v33);
  v148 = &v109[-v34];
  v35 = sub_10009876C();
  v36 = type metadata accessor for WeatherMapExitOverlayEvent(v35);
  sub_10009D98C();
  __chkstk_darwin(v37);
  v39 = &v109[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v40);
  v42 = &v109[-v41];
  __chkstk_darwin(v43);
  v45 = &v109[-v44];
  v46 = type metadata accessor for Logger(0);
  v134 = *(_QWORD *)(v46 - 8);
  v135 = v46;
  sub_10009D98C();
  __chkstk_darwin(v47);
  v48 = sub_1000BA8E0();
  v49 = type metadata accessor for WeatherMapSessionStatistics.RequestCounters(v48);
  sub_1000AE898();
  __chkstk_darwin(v50);
  sub_100098728();
  v53 = v52 - v51;
  v137 = v36;
  v115 = v5 + *(int *)(v36 + 20);
  v54 = ((uint64_t (*)(void))WeatherMapSessionStatistics.requestCounters.getter)();
  v55 = WeatherMapSessionStatistics.RequestCounters.requests.getter(v54);
  v56 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v114 = v49;
  v57 = v56(v53, v49);
  if (v55)
  {
    static Logger.mapNetwork.getter(v57);
    sub_1005835A8(v5, (uint64_t)v45);
    sub_1005835A8(v5, (uint64_t)v42);
    v58 = sub_1005835A8(v5, (uint64_t)v39);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter(v59);
    v61 = v60;
    v62 = os_log_type_enabled(v59, v60);
    v113 = v5;
    if (v62)
    {
      v63 = sub_100098710(32);
      v111 = sub_100098710(96);
      v151 = v111;
      *(_DWORD *)v63 = 136315650;
      v112 = v56;
      sub_100051B90((unint64_t *)&qword_100BF1958, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherMapOverlayKind, (uint64_t)&protocol conformance descriptor for WeatherMapOverlayKind);
      v110 = v61;
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v136);
      v150 = sub_100098CFC(v64, v65);
      sub_1000BD568();
      sub_1000986C4();
      sub_1005835EC((uint64_t)v45);
      *(_WORD *)(v63 + 12) = 2080;
      v66 = WeatherMapSessionStatistics.description()();
      v150 = sub_100098CFC(v66._countAndFlagsBits, (unint64_t)v66._object);
      sub_1000BD568();
      sub_1000986C4();
      sub_1005835EC((uint64_t)v42);
      *(_WORD *)(v63 + 22) = 2080;
      v67 = WeatherMapStallStatistics.description()();
      v150 = sub_100098CFC(v67._countAndFlagsBits, (unint64_t)v67._object);
      v56 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
      sub_1000986C4();
      sub_1005835EC((uint64_t)v39);
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v110, "Session stats: Removing overlay %s\n%s\n%s", (uint8_t *)v63, 0x20u);
      v68 = v111;
      swift_arrayDestroy(v111, 3);
      sub_1000986F0(v68);
      sub_1000986F0(v63);
    }
    else
    {
      sub_1005835EC((uint64_t)v45);
      sub_1005835EC((uint64_t)v42);
      sub_1005835EC((uint64_t)v39);
    }

    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v1, v135);
    if (*((_BYTE *)v149 + 48) == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v118, v113, v136);
      v69 = v116;
      sub_1005828A8();
      v70 = MapOverlayData.init(overlay:)(v69);
      v71 = WeatherMapSessionStatistics.requestCounters.getter(v70);
      v72 = WeatherMapSessionStatistics.RequestCounters.requests.getter(v71);
      v56(v53, v114);
      v73 = v120;
      v74 = sub_1000C1730();
      v75 = WeatherMapSessionStatistics.ResponseCounters.success.getter(v74);
      sub_1000DA644(v73);
      v76 = sub_1000C1730();
      v77 = WeatherMapSessionStatistics.ResponseCounters.cancelled.getter(v76);
      sub_1000DA644(v73);
      v78 = sub_1000C1730();
      v79 = WeatherMapSessionStatistics.ResponseCounters.error.getter(v78);
      v80 = sub_1000DA644(v73);
      v81 = v123;
      v82 = WeatherMapSessionStatistics.timing.getter(v80);
      v83 = WeatherMapSessionStatistics.Timing.avgResponseTimeMs.getter(v82);
      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v81, v125);
      v84 = v142;
      v85 = MapSessionStatisticsData.init(totalCalls:successfulCalls:cancelledCalls:errorCalls:avgTime:)(v72, v75, v77, v79, v83);
      v86 = WeatherMapStallStatistics.activeTasksCount.getter(v85);
      v87 = WeatherMapStallStatistics.tasksStalled.getter();
      v88 = WeatherMapStallStatistics.avgStalledTimeMs.getter();
      v89 = v146;
      MapStallStatisticsData.init(activeTaskCount:tasksStalled:avgTimeTaskStalled:)(v86, 0, v87, v88);
      v149 = (uint64_t *)*v149;
      v90 = v139;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v139 + 16))(v138, v148, v140);
      v91 = v131;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v131 + 16))(v145, v127, v147);
      v92 = v130;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v130 + 16))(v141, v84, v143);
      v93 = v132;
      v94 = v133;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v132 + 16))(v144, v89, v133);
      v95 = *(unsigned __int8 *)(v90 + 80);
      v96 = v90;
      v97 = (v95 + 16) & ~v95;
      v98 = *(unsigned __int8 *)(v91 + 80);
      v99 = (v122 + v98 + v97) & ~v98;
      v100 = *(unsigned __int8 *)(v92 + 80);
      v101 = (v129 + v100 + v99) & ~v100;
      v102 = *(unsigned __int8 *)(v93 + 80);
      v103 = (v126 + v102 + v101) & ~v102;
      v104 = swift_allocObject(&unk_100B80F20, v103 + v128, v95 | v98 | v100 | v102 | 7);
      v105 = v104 + v97;
      v106 = v140;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v105, v138, v140);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v91 + 32))(v104 + v99, v145, v147);
      v107 = v143;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v104 + v101, v141, v143);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 32))(v104 + v103, v144, v94);
      Tracker.diagnosticTransaction(block:)(sub_100583948, v104);
      v108 = swift_release();
      (*(void (**)(_BYTE *, uint64_t, __n128))(v93 + 8))(v146, v94, v108);
      (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v142, v107);
      (*(void (**)(_BYTE *, uint64_t))(v139 + 8))(v148, v106);
    }
  }
  sub_100098640();
}

uint64_t type metadata accessor for WeatherMapExitOverlayEvent(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF19D8, (uint64_t)&nominal type descriptor for WeatherMapExitOverlayEvent);
}

uint64_t sub_1005835A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherMapExitOverlayEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005835EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeatherMapExitOverlayEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100583628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[2];

  v9 = type metadata accessor for MapOverlayData(0);
  v10 = sub_100051B90(&qword_100BF1960, (uint64_t (*)(uint64_t))&type metadata accessor for MapOverlayData, (uint64_t)&protocol conformance descriptor for MapOverlayData);
  AccessTracker.push<A>(data:traits:file:line:)(a2, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 120, v9, v10);
  v11 = type metadata accessor for ViewData(0);
  v12 = sub_100051B90(&qword_100BD4610, (uint64_t (*)(uint64_t))&type metadata accessor for ViewData, (uint64_t)&protocol conformance descriptor for ViewData);
  AccessTracker.push<A>(data:traits:file:line:)(a3, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 121, v11, v12);
  v13 = type metadata accessor for MapSessionStatisticsData(0);
  v14 = sub_100051B90(&qword_100BF1968, (uint64_t (*)(uint64_t))&type metadata accessor for MapSessionStatisticsData, (uint64_t)&protocol conformance descriptor for MapSessionStatisticsData);
  AccessTracker.push<A>(data:traits:file:line:)(a4, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 122, v13, v14);
  v15 = type metadata accessor for MapStallStatisticsData(0);
  v16 = sub_100051B90(&qword_100BF1970, (uint64_t (*)(uint64_t))&type metadata accessor for MapStallStatisticsData, (uint64_t)&protocol conformance descriptor for MapStallStatisticsData);
  AccessTracker.push<A>(data:traits:file:line:)(a5, _swiftEmptyArrayStorage, 0xD000000000000068, 0x8000000100A0AD30, 123, v15, v16);
  v17 = type metadata accessor for MapExitOverlayEvent(0);
  v18 = sub_100051B90(&qword_100BF1978, (uint64_t (*)(uint64_t))&type metadata accessor for MapExitOverlayEvent, (uint64_t)&protocol conformance descriptor for MapExitOverlayEvent);
  memset(v20, 0, sizeof(v20));
  AccessTracker.submit<A>(_:onlyIfTimed:userInfo:completion:)(v17, 0, v20, 0, 0, v17, v18);
  return sub_1002CAAB4((uint64_t)v20);
}

uint64_t sub_100583814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = sub_1000E71F8();
  v1 = *(_QWORD *)(v23 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v18 = (v2 + 16) & ~v2;
  v3 = *(_QWORD *)(v1 + 64);
  v22 = sub_1000C4A10();
  v4 = *(_QWORD *)(v22 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v17 = (v18 + v3 + v5) & ~v5;
  v6 = *(_QWORD *)(v4 + 64);
  v21 = type metadata accessor for MapSessionStatisticsData(0);
  v7 = *(_QWORD *)(v21 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v17 + v6 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for MapStallStatisticsData(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  v19 = v14 + *(_QWORD *)(v12 + 64);
  v20 = v11;
  v15 = v2 | v5 | v8 | v13 | 7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v17, v22);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v21);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v14, v20);
  return swift_deallocObject(v0, v19, v15);
}

uint64_t sub_100583948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(sub_1000E71F8() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  sub_1000C4A10();
  v7 = sub_1000CCDDC();
  v8 = *(_QWORD *)(type metadata accessor for MapSessionStatisticsData(v7) - 8);
  v9 = (v6 + v2 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MapStallStatisticsData(0) - 8) + 80);
  return sub_100583628(a1, v1 + v5, v1 + v6, v1 + v9, v1 + ((v9 + v10 + v11) & ~v11));
}

uint64_t *sub_1005839E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for WeatherMapSessionStatistics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for WeatherMapStallStatistics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_100583ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for WeatherMapSessionStatistics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for WeatherMapStallStatistics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_100583B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherMapSessionStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for WeatherMapStallStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_100583BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherMapSessionStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for WeatherMapStallStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_100583CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherMapSessionStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for WeatherMapStallStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_100583D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for WeatherMapSessionStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for WeatherMapStallStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_100583E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100583E10);
}

uint64_t sub_100583E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1000B4608();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v9 = type metadata accessor for WeatherMapSessionStatistics(0);
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = type metadata accessor for WeatherMapStallStatistics(0);
      v10 = *(int *)(a3 + 24);
    }
    v8 = a1 + v10;
  }
  return sub_1000B250C(v8, a2, v7);
}

uint64_t sub_100583E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100583E9C);
}

uint64_t sub_100583E9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1000B4608();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for WeatherMapSessionStatistics(0);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = type metadata accessor for WeatherMapStallStatistics(0);
      v12 = *(int *)(a4 + 24);
    }
    v10 = a1 + v12;
  }
  return sub_1000987C4(v10, a2, a2, v9);
}

uint64_t sub_100583F24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WeatherMapSessionStatistics(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for WeatherMapStallStatistics(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for InteractiveMapTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t *, uint64_t, __n128);
  __n128 v9;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t *, uint64_t, __n128))(v6 - 8);
  v9 = swift_retain(v4);
  v8(a1 + 8, v5, v7, v9);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t assignWithCopy for InteractiveMapTracker(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  sub_100094D04((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for InteractiveMapTracker(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractiveMapTracker(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractiveMapTracker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractiveMapTracker()
{
  return &type metadata for InteractiveMapTracker;
}

uint64_t sub_10058418C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000C4A10();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005841E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000C4A10() - 8) + 80);
  return sub_100582484(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t type metadata accessor for InteractiveMapViewEvent(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF1A88, (uint64_t)&nominal type descriptor for InteractiveMapViewEvent);
}

uint64_t sub_100584234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = sub_1000DAFA0();
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = sub_1000E71F8();
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for ZoomData(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100584324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(sub_1000DAFA0() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  sub_1000E71F8();
  v7 = sub_1000CCDDC();
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ZoomData(v7) - 8) + 80);
  return sub_100582BA8(a1, v1 + v5, v1 + v6, v1 + ((v6 + v2 + v8) & ~v8));
}

uint64_t *sub_100584398(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_10058443C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for WeatherMapOverlayKind(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *sub_100584474(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1005844EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_100584564(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1005845DC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100584654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100584660);
}

uint64_t sub_100584660(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_1000B4608();
    return sub_1000B250C((uint64_t)&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t sub_1005846C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005846D4);
}

_BYTE *sub_1005846D4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_1000B4608();
    return (_BYTE *)sub_1000987C4((uint64_t)&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100584730(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1009B02E8;
  result = type metadata accessor for WeatherMapOverlayKind(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1005847B0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for LocationOfInterestMonitor()
{
  return objc_opt_self(_TtC7Weather25LocationOfInterestMonitor);
}

double sub_1005847F4()
{
  return sub_1004ECE40();
}

uint64_t sub_100584818(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  uint64_t v50;
  double (*v51)(uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v5 = type metadata accessor for WeatherFormatPlaceholder(0);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v61 = v8 - v7;
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  v13 = type metadata accessor for WeatherFormatScaling(0);
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  sub_10009D98C();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v18 = type metadata accessor for NSUnitLength.WeatherFormatUsage(0);
  v53 = *(_QWORD *)(v18 - 8);
  v54 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100098728();
  v22 = v21 - v20;
  v23 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(0);
  v59 = *(_QWORD *)(v23 - 8);
  v60 = v23;
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  if ((a3 & 1) != 0)
    v28 = sub_100584B6C(a2);
  else
    v28 = sub_1005850E0(a2);
  v57 = v29;
  v58 = v28;
  v30 = sub_1000BA294(&qword_100BCE380);
  v31 = type metadata accessor for WeatherDescription.Argument(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = *(unsigned __int8 *)(v32 + 80);
  v35 = (v34 + 32) & ~v34;
  v52 = swift_allocObject(v30, v35 + 2 * v33, v34 | 7);
  *(_OWORD *)(v52 + 16) = xmmword_10097DA20;
  v50 = sub_1000BA294(&qword_100BCB0A8);
  v36 = Measurement.value.getter(v50);
  *(_QWORD *)(v52 + v35) = Double.pluralRuleInteger.getter(v36);
  v51 = *(double (**)(uint64_t, _QWORD, uint64_t))(v32 + 104);
  v51(v52 + v35, enum case for WeatherDescription.Argument.pluralRule(_:), v31);
  v37 = (uint64_t *)(v52 + v35 + v33);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v53 + 104))(v22, enum case for NSUnitLength.WeatherFormatUsage.rainfall(_:), v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v17, enum case for WeatherFormatScaling.asProvidedButRounded(_:), v56);
  v38 = type metadata accessor for Locale(0);
  v39 = _s7Weather24LocationCompositionStateOwst_0(v12, 1, 1, v38);
  v40 = static Set<>.full.getter(v39);
  static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v40, v22, v17, 2, v12);
  swift_bridgeObjectRelease(v40);
  sub_1000AA25C(v12);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v17, v56);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v22, v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 104))(v61, enum case for WeatherFormatPlaceholder.none(_:), v63);
  v41 = type metadata accessor for UnitManager(0);
  v42 = static UnitManager.standard.getter(v41);
  v43 = sub_1000A9328();
  v44 = Measurement.formatted<A>(_:placeholder:unitManager:)(v27, v61, v42, &protocol witness table for UnitManager, v50, v60, v43);
  v46 = v45;
  v47 = swift_release(v42);
  (*(void (**)(uint64_t, uint64_t, __n128))(v62 + 8))(v61, v63, v47);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v27, v60);
  *v37 = v44;
  v37[1] = v46;
  v48.n128_f64[0] = v51((uint64_t)v37, enum case for WeatherDescription.Argument.measurement(_:), v31);
  return WeatherDescription.init(format:_:)(v58, v57, v52, v48);
}

uint64_t sub_100584B6C(uint64_t a1)
{
  id v1;
  unint64_t v2;
  unint64_t v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t countAndFlagsBits;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  switch(a1)
  {
    case 1:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000049;
      v3 = 0xD000000000000099;
      v17 = 0x8000000100A0B9B0;
      v4 = "averages_monthly_total_precipitation_summary_january_with_calendar_string";
      goto LABEL_17;
    case 2:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD00000000000009BLL;
      v17 = 0x8000000100A0B8C0;
      v12 = "averages_monthly_total_precipitation_summary_february_with_calendar_string";
      goto LABEL_20;
    case 3:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000047;
      v3 = 0xD000000000000095;
      v17 = 0x8000000100A0B7D0;
      v4 = "averages_monthly_total_precipitation_summary_march_with_calendar_string";
      goto LABEL_17;
    case 4:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000047;
      v3 = 0xD000000000000095;
      v17 = 0x8000000100A0B6E0;
      v4 = "averages_monthly_total_precipitation_summary_april_with_calendar_string";
      goto LABEL_17;
    case 5:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000045;
      v3 = 0xD000000000000091;
      v17 = 0x8000000100A0B5F0;
      v4 = "averages_monthly_total_precipitation_summary_may_with_calendar_string";
      goto LABEL_17;
    case 6:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000046;
      v3 = 0xD000000000000093;
      v17 = 0x8000000100A0B500;
      v4 = "averages_monthly_total_precipitation_summary_june_with_calendar_string";
      goto LABEL_17;
    case 7:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000046;
      v3 = 0xD000000000000093;
      v17 = 0x8000000100A0B410;
      v4 = "averages_monthly_total_precipitation_summary_july_with_calendar_string";
      goto LABEL_17;
    case 8:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000048;
      v3 = 0xD000000000000097;
      v17 = 0x8000000100A0B320;
      v4 = "averages_monthly_total_precipitation_summary_august_with_calendar_string";
      goto LABEL_17;
    case 9:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD00000000000004BLL;
      v3 = 0xD00000000000009DLL;
      v17 = 0x8000000100A0B230;
      v4 = "averages_monthly_total_precipitation_summary_september_with_calendar_string";
      goto LABEL_17;
    case 10:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000049;
      v3 = 0xD000000000000099;
      v17 = 0x8000000100A0B140;
      v4 = "averages_monthly_total_precipitation_summary_october_with_calendar_string";
      goto LABEL_17;
    case 11:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD00000000000009BLL;
      v17 = 0x8000000100A0B050;
      v12 = "averages_monthly_total_precipitation_summary_november_with_calendar_string";
      goto LABEL_20;
    case 12:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD00000000000009BLL;
      v17 = 0x8000000100A0AF60;
      v12 = "averages_monthly_total_precipitation_summary_december_with_calendar_string";
LABEL_20:
      v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      v2 = 0xD00000000000004ALL;
      break;
    default:
      if (qword_100BC2478 != -1)
        swift_once(&qword_100BC2478, sub_1006F38E8);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_1000AECD4(v6, (uint64_t)qword_100CAF150);
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.error.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v11 = 134217984;
        v18 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
        _os_log_impl((void *)&_mh_execute_header, v8, v10, "Encountered an unexpected monthOfYear while building the monthly average summary string. monthOfYear=%ld", v11, 0xCu);
        swift_slowDealloc(v11, -1, -1);
      }

      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000037;
      v3 = 0xD0000000000000DELL;
      v17 = 0x8000000100A0AE30;
      v4 = "averages_monthly_total_precipitation_summary_this_month";
LABEL_17:
      v13 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      break;
  }
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v14, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1005850E0(uint64_t a1)
{
  id v1;
  unint64_t v2;
  unint64_t v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t countAndFlagsBits;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  switch(a1)
  {
    case 1:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000034;
      v3 = 0xD000000000000099;
      v17 = 0x8000000100A0B9B0;
      v4 = "averages_monthly_total_precipitation_summary_january";
      goto LABEL_17;
    case 2:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD00000000000009BLL;
      v17 = 0x8000000100A0B8C0;
      v12 = "averages_monthly_total_precipitation_summary_february";
      goto LABEL_20;
    case 3:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000032;
      v3 = 0xD000000000000095;
      v17 = 0x8000000100A0B7D0;
      v4 = "averages_monthly_total_precipitation_summary_march";
      goto LABEL_17;
    case 4:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000032;
      v3 = 0xD000000000000095;
      v17 = 0x8000000100A0B6E0;
      v4 = "averages_monthly_total_precipitation_summary_april";
      goto LABEL_17;
    case 5:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000030;
      v3 = 0xD000000000000091;
      v17 = 0x8000000100A0B5F0;
      v4 = "averages_monthly_total_precipitation_summary_may";
      goto LABEL_17;
    case 6:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000031;
      v3 = 0xD000000000000093;
      v17 = 0x8000000100A0B500;
      v4 = "averages_monthly_total_precipitation_summary_june";
      goto LABEL_17;
    case 7:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000031;
      v3 = 0xD000000000000093;
      v17 = 0x8000000100A0B410;
      v4 = "averages_monthly_total_precipitation_summary_july";
      goto LABEL_17;
    case 8:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000033;
      v3 = 0xD000000000000097;
      v17 = 0x8000000100A0B320;
      v4 = "averages_monthly_total_precipitation_summary_august";
      goto LABEL_17;
    case 9:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000036;
      v3 = 0xD00000000000009DLL;
      v17 = 0x8000000100A0B230;
      v4 = "averages_monthly_total_precipitation_summary_september";
      goto LABEL_17;
    case 10:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000034;
      v3 = 0xD000000000000099;
      v17 = 0x8000000100A0B140;
      v4 = "averages_monthly_total_precipitation_summary_october";
      goto LABEL_17;
    case 11:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD00000000000009BLL;
      v17 = 0x8000000100A0B050;
      v12 = "averages_monthly_total_precipitation_summary_november";
      goto LABEL_20;
    case 12:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD00000000000009BLL;
      v17 = 0x8000000100A0AF60;
      v12 = "averages_monthly_total_precipitation_summary_december";
LABEL_20:
      v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      v2 = 0xD000000000000035;
      break;
    default:
      if (qword_100BC2478 != -1)
        swift_once(&qword_100BC2478, sub_1006F38E8);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_1000AECD4(v6, (uint64_t)qword_100CAF150);
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.error.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v11 = 134217984;
        v18 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
        _os_log_impl((void *)&_mh_execute_header, v8, v10, "Encountered an unexpected monthOfYear while building the monthly average summary string. monthOfYear=%ld", v11, 0xCu);
        swift_slowDealloc(v11, -1, -1);
      }

      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000037;
      v3 = 0xD0000000000000DELL;
      v17 = 0x8000000100A0AE30;
      v4 = "averages_monthly_total_precipitation_summary_this_month";
LABEL_17:
      v13 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      break;
  }
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v14, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

ValueMetadata *type metadata accessor for PrecipitationMonthlyAveragesSummaryStringBuilder()
{
  return &type metadata for PrecipitationMonthlyAveragesSummaryStringBuilder;
}

_QWORD *sub_100585664(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  id v35;
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  int EnumCaseMultiPayload;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t, __n128);
  __n128 v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  char *__dst;
  _BYTE *__dsta;
  void *__dstb;
  char *v139;
  int *v140;
  uint64_t *v141;
  int *v142;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }
  v7 = type metadata accessor for AirQualityDetailViewModel.Model(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v7))
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    return a1;
  }
  v9 = a2[1];
  *a1 = *a2;
  a1[1] = v9;
  v10 = a2[3];
  a1[2] = a2[2];
  a1[3] = v10;
  v11 = a2[5];
  a1[4] = a2[4];
  a1[5] = v11;
  v12 = a2[7];
  a1[6] = a2[6];
  a1[7] = v12;
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  v13 = a2[14];
  a1[13] = a2[13];
  a1[14] = v13;
  v14 = a2[16];
  a1[15] = a2[15];
  a1[16] = v14;
  a1[17] = a2[17];
  v142 = (int *)v7;
  v15 = *(int *)(v7 + 56);
  __dst = (char *)a1 + v15;
  v139 = (char *)a2 + v15;
  v16 = type metadata accessor for AirPollutant(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v139, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BDACB0);
    memcpy(__dst, v139, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v139, v16);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v16);
  }
  v18 = v142[15];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = v20[1];
  if (v21)
  {
    *v19 = *v20;
    v19[1] = v21;
    v19[2] = v20[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
    v19[2] = v20[2];
  }
  v22 = v142[16];
  v23 = a2;
  v24 = *(void **)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + v22) = v24;
  *(_QWORD *)((char *)a1 + v142[17]) = *(uint64_t *)((char *)v23 + v142[17]);
  v25 = v142[18];
  v135 = (uint64_t)a1;
  v26 = (_QWORD *)((char *)a1 + v25);
  v141 = v23;
  v27 = (char *)v23 + v25;
  v28 = *(uint64_t *)((char *)v23 + v25 + 8);
  *v26 = *(uint64_t *)((char *)v23 + v25);
  v26[1] = v28;
  v29 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v30 = v29[5];
  v31 = (char *)v26 + v30;
  v32 = &v27[v30];
  v33 = type metadata accessor for Location(0);
  v34 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 16);
  v35 = v24;
  swift_bridgeObjectRetain();
  v36 = swift_bridgeObjectRetain();
  v34(v31, v32, v33, v36);
  __dsta = v27;
  v37 = v29[6];
  v38 = (_QWORD *)((char *)v26 + v37);
  v39 = &v27[v37];
  v40 = (int *)type metadata accessor for WeatherData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, (uint64_t)v40))
  {
    v133 = v26;
    v43 = v39[1];
    *v38 = *v39;
    v38[1] = v43;
    v44 = v40[5];
    v45 = (char *)v38 + v44;
    v46 = (char *)v39 + v44;
    v47 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
    {
      v48 = sub_1000BA294(&qword_100BC3340);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
    }
    v42 = v141;
    v49 = v40[6];
    v50 = (char *)v38 + v49;
    v51 = (char *)v39 + v49;
    v52 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    v53 = v40[7];
    v54 = (char *)v38 + v53;
    v55 = (char *)v39 + v53;
    v56 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v56))
    {
      v57 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v58 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v54, v55, v58);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v54, 0, 1, v56);
    }
    v59 = v40[8];
    v60 = (_QWORD *)((char *)v38 + v59);
    v61 = (_QWORD *)((char *)v39 + v59);
    v62 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v61);
    if (EnumCaseMultiPayload == 1)
    {
      v68 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v60, v61, v68);
      v65 = v60;
      v66 = v62;
      v67 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        goto LABEL_25;
      }
      v64 = v61[1];
      *v60 = *v61;
      v60[1] = v64;
      swift_bridgeObjectRetain();
      v65 = v60;
      v66 = v62;
      v67 = 0;
    }
    swift_storeEnumTagMultiPayload(v65, v66, v67);
LABEL_25:
    v69 = v40[9];
    v70 = (char *)v38 + v69;
    v71 = (char *)v39 + v69;
    v72 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
    {
      v73 = sub_1000BA294(&qword_100BC3350);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      v74 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v74))
      {
        v75 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v70, v71, v74);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v74);
      }
      v76 = *(int *)(v72 + 20);
      v77 = &v70[v76];
      v78 = &v71[v76];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v78, 1, v74))
      {
        v79 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v77, v78, v74);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v77, 0, 1, v74);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
    }
    v26 = v133;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
    goto LABEL_35;
  }
  v41 = sub_1000BA294(&qword_100BC3460);
  memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  v42 = v141;
LABEL_35:
  v80 = v29[7];
  v81 = (_QWORD *)((char *)v26 + v80);
  v82 = &__dsta[v80];
  v83 = v82[1];
  *v81 = *v82;
  v81[1] = v83;
  v84 = v29[8];
  v85 = (char *)v26 + v84;
  v86 = &__dsta[v84];
  v87 = type metadata accessor for WeatherMapOverlayKind(0);
  v88 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v87 - 8) + 16);
  v89 = swift_bridgeObjectRetain();
  v88(v85, v86, v87, v89);
  *((_BYTE *)v26 + v29[9]) = __dsta[v29[9]];
  v90 = v142[19];
  a1 = (_QWORD *)v135;
  v91 = (_QWORD *)(v135 + v90);
  v92 = (uint64_t *)((char *)v42 + v90);
  v93 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v92, 1, v93))
  {
    v94 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
  }
  else
  {
    v95 = v92[1];
    if (v95)
    {
      *v91 = *v92;
      v91[1] = v95;
      v96 = v92[3];
      v91[2] = v92[2];
      v91[3] = v96;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v92 + 1);
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v97;
    }
    v98 = *(int *)(v93 + 20);
    v99 = (_QWORD *)((char *)v91 + v98);
    v100 = (_QWORD *)((char *)v92 + v98);
    v101 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v100) == 1)
    {
      __dstb = (void *)v101;
      v102 = v100[1];
      *v99 = *v100;
      v99[1] = v102;
      v140 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v103 = v140[5];
      v134 = (char *)v99 + v103;
      v104 = (char *)v100 + v103;
      v105 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v132 = v93;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v104, 1, v105))
      {
        v106 = sub_1000BA294(&qword_100BD4280);
        memcpy(v134, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v134, v104, v105);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v134, 0, 1, v105);
      }
      v107 = v140[6];
      v108 = (_QWORD *)((char *)v99 + v107);
      v109 = (_QWORD *)((char *)v100 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v140[7];
      v112 = (char *)v99 + v111;
      v113 = (char *)v100 + v111;
      v114 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v105 - 8) + 16);
      v115 = swift_bridgeObjectRetain();
      v114(v112, v113, v105, v115);
      v116 = v140[8];
      v117 = (char *)v99 + v116;
      v118 = (char *)v100 + v116;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v100 + v116, 1, v105))
      {
        v119 = sub_1000BA294(&qword_100BD4280);
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v114)(v117, v118, v105);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v117, 0, 1, v105);
      }
      v42 = v141;
      v93 = v132;
      *((_BYTE *)v99 + v140[9]) = *((_BYTE *)v100 + v140[9]);
      swift_storeEnumTagMultiPayload(v99, __dstb, 1);
    }
    else
    {
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    v120 = *(int *)(v93 + 24);
    v121 = (char *)v91 + v120;
    v122 = (char *)v92 + v120;
    v123 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v122, 1, v123))
    {
      v124 = sub_1000BA294(&qword_100BD3100);
      memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    }
    else
    {
      v125 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v121, v122, v125);
      v126 = sub_1000BA294(&qword_100BC5FE8);
      v121[*(int *)(v126 + 48)] = v122[*(int *)(v126 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v121, 0, 1, v123);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v91, 0, 1, v93);
  }
  *(_BYTE *)(v135 + v142[20]) = *((_BYTE *)v42 + v142[20]);
  v127 = v142[21];
  v128 = v135 + v127;
  v129 = (uint64_t)v42 + v127;
  v130 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
  _s7Weather24LocationCompositionStateOwst_0(v135, 0, 1, (uint64_t)v142);
  return a1;
}

uint64_t type metadata accessor for AirQualityDetailViewModel.Model(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF1C40, (uint64_t)&nominal type descriptor for AirQualityDetailViewModel.Model);
}

uint64_t sub_100586038(uint64_t a1)
{
  int *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  void (*v35)(uint64_t, uint64_t, __n128);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = (int *)type metadata accessor for AirQualityDetailViewModel.Model(0);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, (uint64_t)v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = a1 + v2[14];
    v5 = type metadata accessor for AirPollutant(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    if (*(_QWORD *)(a1 + v2[15] + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    v6 = a1 + v2[18];
    swift_bridgeObjectRelease();
    v7 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
    v8 = v6 + v7[5];
    v9 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = v6 + v7[6];
    v11 = (int *)type metadata accessor for WeatherData(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, (uint64_t)v11))
    {
      swift_bridgeObjectRelease();
      v12 = v10 + v11[5];
      v13 = type metadata accessor for Locale(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      v14 = v10 + v11[6];
      v15 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      v16 = v10 + v11[7];
      v17 = sub_1000BA294(&qword_100BC3348);
      if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
      {
        v18 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      }
      v19 = v10 + v11[8];
      type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19);
      if (EnumCaseMultiPayload == 1)
      {
        v21 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
      }
      else if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease();
      }
      v22 = v10 + v11[9];
      v23 = type metadata accessor for WeatherDataOverrides(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v23))
      {
        v24 = type metadata accessor for Date(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v24))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
        v25 = v22 + *(int *)(v23 + 20);
        if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, v24))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v25, v24);
      }
    }
    swift_bridgeObjectRelease();
    v26 = v6 + v7[8];
    v27 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
    v28 = a1 + v2[19];
    v29 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v28, 1, v29))
    {
      if (*(_QWORD *)(v28 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v30 = v28 + *(int *)(v29 + 20);
      type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v30) == 1)
      {
        swift_bridgeObjectRelease();
        v31 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v32 = v30 + v31[5];
        v33 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
        v34 = swift_bridgeObjectRelease();
        v35 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 8);
        v35(v30 + v31[7], v33, v34);
        v36 = v30 + v31[8];
        if (!_s7Weather24LocationCompositionStateOwet_0(v36, 1, v33))
          ((void (*)(uint64_t, uint64_t))v35)(v36, v33);
      }
      v37 = v28 + *(int *)(v29 + 24);
      v38 = type metadata accessor for DetailComponentAction(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
      {
        v39 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v37, v39);
      }
    }
    v40 = a1 + v2[21];
    v41 = type metadata accessor for LocationDetailEntity(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
  }
  return result;
}

_QWORD *sub_1005864D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t, __n128);
  id v36;
  __n128 v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  int EnumCaseMultiPayload;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t, __n128);
  __n128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t, __n128);
  __n128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  char *__dst;
  _QWORD *__dsta;
  int *__dstb;
  _QWORD *v140;
  int *v141;

  v6 = type metadata accessor for AirQualityDetailViewModel.Model(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  v11 = a2[14];
  v12 = a2[15];
  a1[13] = a2[13];
  a1[14] = v11;
  v13 = a2[16];
  v14 = a2[17];
  a1[15] = v12;
  a1[16] = v13;
  a1[17] = v14;
  v140 = a2;
  v141 = (int *)v6;
  v15 = *(int *)(v6 + 56);
  __dst = (char *)a1 + v15;
  v16 = (char *)a2 + v15;
  v17 = type metadata accessor for AirPollutant(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17))
  {
    v18 = sub_1000BA294(&qword_100BDACB0);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(__dst, v16, v17);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v17);
  }
  v19 = v141[15];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  v23 = a1;
  if (v22)
  {
    *v20 = *v21;
    v20[1] = v22;
    v20[2] = v21[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
  }
  v24 = v141[16];
  v25 = *(void **)((char *)a2 + v24);
  *(_QWORD *)((char *)v23 + v24) = v25;
  *(_QWORD *)((char *)v23 + v141[17]) = *(_QWORD *)((char *)a2 + v141[17]);
  v26 = v141[18];
  __dsta = v23;
  v27 = (_QWORD *)((char *)v23 + v26);
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26 + 8);
  *v27 = *(_QWORD *)((char *)a2 + v26);
  v27[1] = v29;
  v30 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v31 = v30[5];
  v32 = (char *)v27 + v31;
  v33 = &v28[v31];
  v34 = type metadata accessor for Location(0);
  v35 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
  v36 = v25;
  swift_bridgeObjectRetain();
  v37 = swift_bridgeObjectRetain();
  v35(v32, v33, v34, v37);
  v38 = v30[6];
  v39 = (_QWORD *)((char *)v27 + v38);
  v40 = &v28[v38];
  v41 = (int *)type metadata accessor for WeatherData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, (uint64_t)v41))
  {
    v135 = v27;
    v44 = *((_QWORD *)v40 + 1);
    *v39 = *(_QWORD *)v40;
    v39[1] = v44;
    v45 = v41[5];
    v46 = (char *)v39 + v45;
    v47 = &v40[v45];
    v48 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v48))
    {
      v49 = sub_1000BA294(&qword_100BC3340);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v46, 0, 1, v48);
    }
    a1 = __dsta;
    v50 = v41[6];
    v51 = (char *)v39 + v50;
    v52 = &v40[v50];
    v53 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    v54 = v41[7];
    v55 = (char *)v39 + v54;
    v56 = &v40[v54];
    v57 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
    {
      v58 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      v59 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v55, v56, v59);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
    }
    v60 = v41[8];
    v61 = (_QWORD *)((char *)v39 + v60);
    v62 = &v40[v60];
    v63 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62);
    if (EnumCaseMultiPayload == 1)
    {
      v69 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v61, v62, v69);
      v66 = v61;
      v67 = v63;
      v68 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        goto LABEL_23;
      }
      v65 = *((_QWORD *)v62 + 1);
      *v61 = *(_QWORD *)v62;
      v61[1] = v65;
      swift_bridgeObjectRetain();
      v66 = v61;
      v67 = v63;
      v68 = 0;
    }
    swift_storeEnumTagMultiPayload(v66, v67, v68);
LABEL_23:
    v43 = v140;
    v70 = v41[9];
    v71 = (char *)v39 + v70;
    v72 = &v40[v70];
    v73 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v73))
    {
      v74 = sub_1000BA294(&qword_100BC3350);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      v75 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v75))
      {
        v76 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v71, v72, v75);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v75);
      }
      v77 = *(int *)(v73 + 20);
      v78 = &v71[v77];
      v79 = &v72[v77];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v79, 1, v75))
      {
        v80 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v78, v79, v75);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v78, 0, 1, v75);
      }
      v43 = v140;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v73);
    }
    v27 = v135;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, (uint64_t)v41);
    goto LABEL_33;
  }
  v42 = sub_1000BA294(&qword_100BC3460);
  memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  a1 = __dsta;
  v43 = a2;
LABEL_33:
  v81 = v30[7];
  v82 = (_QWORD *)((char *)v27 + v81);
  v83 = &v28[v81];
  v84 = *((_QWORD *)v83 + 1);
  *v82 = *(_QWORD *)v83;
  v82[1] = v84;
  v85 = v30[8];
  v86 = (char *)v27 + v85;
  v87 = &v28[v85];
  v88 = type metadata accessor for WeatherMapOverlayKind(0);
  v89 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 16);
  v90 = swift_bridgeObjectRetain();
  v89(v86, v87, v88, v90);
  *((_BYTE *)v27 + v30[9]) = v28[v30[9]];
  v91 = v141[19];
  v92 = (_QWORD *)((char *)a1 + v91);
  v93 = (_QWORD *)((char *)v43 + v91);
  v94 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v93, 1, v94))
  {
    v95 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    v96 = v93[1];
    if (v96)
    {
      *v92 = *v93;
      v92[1] = v96;
      v97 = v93[3];
      v92[2] = v93[2];
      v92[3] = v97;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v98 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v98;
    }
    v99 = *(int *)(v94 + 20);
    v100 = (_QWORD *)((char *)v92 + v99);
    v101 = (_QWORD *)((char *)v93 + v99);
    v102 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v101) == 1)
    {
      v103 = v101[1];
      *v100 = *v101;
      v100[1] = v103;
      __dstb = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v104 = __dstb[5];
      v134 = (char *)v100 + v104;
      v105 = (char *)v101 + v104;
      v106 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      v136 = v102;
      v133 = v94;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v106))
      {
        v107 = sub_1000BA294(&qword_100BD4280);
        memcpy(v134, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v134, v105, v106);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v134, 0, 1, v106);
      }
      v108 = __dstb[6];
      v109 = (_QWORD *)((char *)v100 + v108);
      v110 = (_QWORD *)((char *)v101 + v108);
      v111 = v110[1];
      *v109 = *v110;
      v109[1] = v111;
      v112 = __dstb[7];
      v113 = (char *)v100 + v112;
      v114 = (char *)v101 + v112;
      v115 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v106 - 8) + 16);
      v116 = swift_bridgeObjectRetain();
      v115(v113, v114, v106, v116);
      v117 = __dstb[8];
      v118 = (char *)v100 + v117;
      v119 = (char *)v101 + v117;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v101 + v117, 1, v106))
      {
        v120 = sub_1000BA294(&qword_100BD4280);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v115)(v118, v119, v106);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v106);
      }
      v43 = v140;
      v94 = v133;
      *((_BYTE *)v100 + __dstb[9]) = *((_BYTE *)v101 + __dstb[9]);
      swift_storeEnumTagMultiPayload(v100, v136, 1);
    }
    else
    {
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    v121 = *(int *)(v94 + 24);
    v122 = (char *)v92 + v121;
    v123 = (char *)v93 + v121;
    v124 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v123, 1, v124))
    {
      v125 = sub_1000BA294(&qword_100BD3100);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      v126 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v122, v123, v126);
      v127 = sub_1000BA294(&qword_100BC5FE8);
      v122[*(int *)(v127 + 48)] = v123[*(int *)(v127 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v122, 0, 1, v124);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v92, 0, 1, v94);
  }
  *((_BYTE *)a1 + v141[20]) = *((_BYTE *)v43 + v141[20]);
  v128 = v141[21];
  v129 = (char *)a1 + v128;
  v130 = (char *)v43 + v128;
  v131 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, (uint64_t)v141);
  return a1;
}

uint64_t sub_100586E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  id v35;
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  int *v98;
  int v99;
  int v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  void *v107;
  const void *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t, uint64_t, __n128);
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  char *v158;
  int *v159;
  char *v160;
  void (*v161)(char *, char *, uint64_t, __n128);
  __n128 v162;
  char *v163;
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  int EnumCaseMultiPayload;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  int v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  int *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  int v254;
  int v255;
  size_t v256;
  void *v257;
  const void *v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  void (*v275)(char *, char *, uint64_t, __n128);
  __n128 v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  uint64_t v308;
  char *v309;
  char *v310;
  void (*v311)(char *, char *, uint64_t, __n128);
  __n128 v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t v334;
  char *__dst;
  char *__dsta;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  int *v340;
  int *v341;
  uint64_t v342;
  int *v343;
  int *v344;
  int *v345;
  int *v346;
  int *v347;
  int *v348;
  int *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;

  v6 = (int *)type metadata accessor for AirQualityDetailViewModel.Model(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0(a1, 1, (uint64_t)v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0(a2, 1, (uint64_t)v6);
  if (!v7)
  {
    if (v8)
    {
      sub_1000215BC(a1, type metadata accessor for AirQualityDetailViewModel.Model);
      goto LABEL_7;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14 = v6[14];
    v15 = (void *)(a1 + v14);
    v16 = (const void *)(a2 + v14);
    v17 = type metadata accessor for AirPollutant(0);
    v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17);
    v19 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v17);
    if (v18)
    {
      if (!v19)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v17);
        goto LABEL_22;
      }
    }
    else
    {
      v48 = *(_QWORD *)(v17 - 8);
      if (!v19)
      {
        (*(void (**)(void *, const void *, uint64_t))(v48 + 24))(v15, v16, v17);
LABEL_22:
        v50 = v6[15];
        v51 = (_QWORD *)(a1 + v50);
        v52 = (_QWORD *)(a2 + v50);
        v53 = *(_QWORD *)(a1 + v50 + 8);
        v54 = *(_QWORD *)(a2 + v50 + 8);
        if (v53)
        {
          if (v54)
          {
            *v51 = *v52;
            v51[1] = v52[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v51[2] = v52[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_100366A60((uint64_t)v51);
            v64 = v52[2];
            *(_OWORD *)v51 = *(_OWORD *)v52;
            v51[2] = v64;
          }
        }
        else if (v54)
        {
          *v51 = *v52;
          v51[1] = v52[1];
          v51[2] = v52[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v82 = *(_OWORD *)v52;
          v51[2] = v52[2];
          *(_OWORD *)v51 = v82;
        }
        v83 = v6[16];
        v84 = *(void **)(a1 + v83);
        v85 = *(void **)(a2 + v83);
        *(_QWORD *)(a1 + v83) = v85;
        v86 = v85;

        *(_QWORD *)(a1 + v6[17]) = *(_QWORD *)(a2 + v6[17]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v87 = v6[18];
        v88 = (_QWORD *)(a1 + v87);
        v89 = a2 + v87;
        *v88 = *(_QWORD *)(a2 + v87);
        v88[1] = *(_QWORD *)(a2 + v87 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v90 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
        v91 = v90[5];
        v92 = (char *)v88 + v91;
        v93 = v89 + v91;
        v94 = type metadata accessor for Location(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 24))(v92, v93, v94);
        v95 = v90[6];
        v96 = (_QWORD *)((char *)v88 + v95);
        v97 = (_QWORD *)(v89 + v95);
        v98 = (int *)type metadata accessor for WeatherData(0);
        v99 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v96, 1, (uint64_t)v98);
        v100 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v97, 1, (uint64_t)v98);
        if (v99)
        {
          if (!v100)
          {
            v340 = v90;
            v346 = v6;
            v351 = a2;
            v356 = a1;
            *v96 = *v97;
            v96[1] = v97[1];
            v101 = v98[5];
            v102 = (char *)v96 + v101;
            v103 = (char *)v97 + v101;
            v104 = type metadata accessor for Locale(0);
            swift_bridgeObjectRetain();
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
            {
              v105 = sub_1000BA294(&qword_100BC3340);
              memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
            }
            v119 = v98[6];
            v120 = (char *)v96 + v119;
            v121 = (char *)v97 + v119;
            v122 = type metadata accessor for WeatherDataModel(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
            v123 = v98[7];
            v124 = (char *)v96 + v123;
            v125 = (char *)v97 + v123;
            v126 = sub_1000BA294(&qword_100BC3348);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v125, 1, v126))
            {
              v127 = type metadata accessor for WeatherData.CachingState(0);
              memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
            }
            else
            {
              v180 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v124, v125, v180);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v124, 0, 1, v126);
            }
            v90 = v340;
            v181 = v98[8];
            v182 = (_QWORD *)((char *)v96 + v181);
            v183 = (_QWORD *)((char *)v97 + v181);
            v184 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v183);
            if (EnumCaseMultiPayload == 1)
            {
              v189 = type metadata accessor for WeatherStatisticsModel(0);
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(v182, v183, v189);
              v186 = v182;
              v187 = v184;
              v188 = 1;
            }
            else
            {
              if (EnumCaseMultiPayload)
              {
                memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
                goto LABEL_90;
              }
              *v182 = *v183;
              v182[1] = v183[1];
              swift_bridgeObjectRetain();
              v186 = v182;
              v187 = v184;
              v188 = 0;
            }
            swift_storeEnumTagMultiPayload(v186, v187, v188);
LABEL_90:
            a1 = v356;
            v190 = v98[9];
            v191 = (char *)v96 + v190;
            v192 = (char *)v97 + v190;
            v193 = type metadata accessor for WeatherDataOverrides(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v193))
            {
              v194 = sub_1000BA294(&qword_100BC3350);
              memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
            }
            else
            {
              v195 = type metadata accessor for Date(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v195))
              {
                v196 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v191, v192, v195);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v195);
              }
              v218 = *(int *)(v193 + 20);
              v219 = &v191[v218];
              v220 = &v192[v218];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v220, 1, v195))
              {
                v221 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v219, v220, v195);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v219, 0, 1, v195);
              }
              a1 = v356;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v193);
            }
            v6 = v346;
            a2 = v351;
            v222 = (uint64_t)v96;
            v223 = (uint64_t)v98;
            goto LABEL_113;
          }
          goto LABEL_50;
        }
        if (v100)
        {
          sub_1000215BC((uint64_t)v96, type metadata accessor for WeatherData);
LABEL_50:
          v106 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3460) - 8) + 64);
          v107 = v96;
          v108 = v97;
LABEL_51:
          memcpy(v107, v108, v106);
          goto LABEL_135;
        }
        v341 = v90;
        v347 = v6;
        v352 = a2;
        v357 = a1;
        *v96 = *v97;
        v96[1] = v97[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v109 = v98[5];
        v110 = (char *)v96 + v109;
        v111 = (char *)v97 + v109;
        v112 = type metadata accessor for Locale(0);
        v113 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v110, 1, v112);
        v114 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v111, 1, v112);
        if (v113)
        {
          if (!v114)
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v110, v111, v112);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v110, 0, 1, v112);
            goto LABEL_97;
          }
        }
        else
        {
          v197 = *(_QWORD *)(v112 - 8);
          if (!v114)
          {
            (*(void (**)(char *, char *, uint64_t))(v197 + 24))(v110, v111, v112);
LABEL_97:
            v199 = v98[6];
            v200 = (char *)v96 + v199;
            v201 = (char *)v97 + v199;
            v202 = type metadata accessor for WeatherDataModel(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 24))(v200, v201, v202);
            v203 = v98[7];
            v204 = (char *)v96 + v203;
            v205 = (char *)v97 + v203;
            v206 = sub_1000BA294(&qword_100BC3348);
            LODWORD(v201) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v204, 1, v206);
            v207 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v205, 1, v206);
            if ((_DWORD)v201)
            {
              if (!v207)
              {
                v208 = type metadata accessor for Date(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v204, v205, v208);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v206);
                goto LABEL_103;
              }
            }
            else
            {
              if (!v207)
              {
                v234 = type metadata accessor for Date(0);
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v234 - 8) + 24))(v204, v205, v234);
LABEL_103:
                a2 = v352;
                a1 = v357;
                if (v357 == v352)
                  goto LABEL_118;
                v210 = v98[8];
                v211 = (_QWORD *)((char *)v96 + v210);
                v212 = (_QWORD *)((char *)v97 + v210);
                sub_1000215BC((uint64_t)v96 + v210, type metadata accessor for WeatherData.WeatherStatisticsState);
                v213 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                v214 = swift_getEnumCaseMultiPayload(v212);
                if (v214 == 1)
                {
                  v224 = type metadata accessor for WeatherStatisticsModel(0);
                  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v224 - 8) + 16))(v211, v212, v224);
                  v215 = v211;
                  v216 = v213;
                  v217 = 1;
                }
                else
                {
                  if (v214)
                  {
                    memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
                    goto LABEL_117;
                  }
                  *v211 = *v212;
                  v211[1] = v212[1];
                  swift_bridgeObjectRetain();
                  v215 = v211;
                  v216 = v213;
                  v217 = 0;
                }
                swift_storeEnumTagMultiPayload(v215, v216, v217);
LABEL_117:
                a2 = v352;
                a1 = v357;
LABEL_118:
                v225 = v98[9];
                v226 = (char *)v96 + v225;
                v227 = (char *)v97 + v225;
                v228 = type metadata accessor for WeatherDataOverrides(0);
                v229 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v226, 1, v228);
                v230 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v227, 1, v228);
                if (v229)
                {
                  v6 = v347;
                  if (!v230)
                  {
                    v231 = type metadata accessor for Date(0);
                    v90 = v341;
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v227, 1, v231))
                    {
                      v232 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v231 - 8) + 16))(v226, v227, v231);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v226, 0, 1, v231);
                    }
                    v238 = *(int *)(v228 + 20);
                    v239 = &v226[v238];
                    v240 = &v227[v238];
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v240, 1, v231))
                    {
                      v241 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v231 - 8) + 16))(v239, v240, v231);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v239, 0, 1, v231);
                    }
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v226, 0, 1, v228);
                    a2 = v352;
LABEL_135:
                    v242 = v90[7];
                    v243 = (_QWORD *)((char *)v88 + v242);
                    v244 = (_QWORD *)(v89 + v242);
                    *v243 = *v244;
                    v245 = v90;
                    v243[1] = v244[1];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v246 = v90[8];
                    v247 = (char *)v88 + v246;
                    v248 = v89 + v246;
                    v249 = type metadata accessor for WeatherMapOverlayKind(0);
                    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v249 - 8) + 24))(v247, v248, v249);
                    *((_BYTE *)v88 + v245[9]) = *(_BYTE *)(v89 + v245[9]);
                    v250 = v6[19];
                    v251 = (_QWORD *)(a1 + v250);
                    v252 = (_QWORD *)(a2 + v250);
                    v253 = type metadata accessor for DetailComponentContainerViewModel(0);
                    v254 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v251, 1, v253);
                    v255 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v252, 1, v253);
                    if (v254)
                    {
                      if (!v255)
                      {
                        if (v252[1])
                        {
                          *v251 = *v252;
                          v251[1] = v252[1];
                          v251[2] = v252[2];
                          v251[3] = v252[3];
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          v260 = *((_OWORD *)v252 + 1);
                          *(_OWORD *)v251 = *(_OWORD *)v252;
                          *((_OWORD *)v251 + 1) = v260;
                        }
                        v261 = *(int *)(v253 + 20);
                        v262 = (_QWORD *)((char *)v251 + v261);
                        v263 = (_QWORD *)((char *)v252 + v261);
                        v264 = type metadata accessor for NewsArticleComponentViewModel(0);
                        if (swift_getEnumCaseMultiPayload(v263) == 1)
                        {
                          v348 = v6;
                          v358 = a1;
                          *v262 = *v263;
                          v262[1] = v263[1];
                          v343 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                          v265 = v343[5];
                          __dst = (char *)v262 + v265;
                          v266 = (char *)v263 + v265;
                          v267 = type metadata accessor for URL(0);
                          swift_bridgeObjectRetain();
                          v353 = a2;
                          v338 = v264;
                          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v266, 1, v267))
                          {
                            v268 = sub_1000BA294(&qword_100BD4280);
                            memcpy(__dst, v266, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
                          }
                          else
                          {
                            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v267 - 8) + 16))(__dst, v266, v267);
                            _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v267);
                          }
                          v269 = v343[6];
                          v270 = (_QWORD *)((char *)v262 + v269);
                          v271 = (_QWORD *)((char *)v263 + v269);
                          *v270 = *v271;
                          v270[1] = v271[1];
                          v272 = v343[7];
                          v273 = (char *)v262 + v272;
                          v274 = (char *)v263 + v272;
                          v275 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v267 - 8) + 16);
                          v276 = swift_bridgeObjectRetain();
                          v275(v273, v274, v267, v276);
                          v277 = v343[8];
                          v278 = (char *)v262 + v277;
                          v279 = (char *)v263 + v277;
                          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v263 + v277, 1, v267))
                          {
                            v280 = sub_1000BA294(&qword_100BD4280);
                            memcpy(v278, v279, *(_QWORD *)(*(_QWORD *)(v280 - 8) + 64));
                          }
                          else
                          {
                            ((void (*)(char *, char *, uint64_t))v275)(v278, v279, v267);
                            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v278, 0, 1, v267);
                          }
                          a2 = v353;
                          *((_BYTE *)v262 + v343[9]) = *((_BYTE *)v263 + v343[9]);
                          swift_storeEnumTagMultiPayload(v262, v338, 1);
                          a1 = v358;
                          v6 = v348;
                        }
                        else
                        {
                          memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
                        }
                        v281 = *(int *)(v253 + 24);
                        v282 = (char *)v251 + v281;
                        v283 = (char *)v252 + v281;
                        v284 = type metadata accessor for DetailComponentAction(0);
                        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v283, 1, v284))
                        {
                          v285 = sub_1000BA294(&qword_100BD3100);
                          memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
                        }
                        else
                        {
                          v286 = type metadata accessor for URL(0);
                          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v286 - 8) + 16))(v282, v283, v286);
                          v287 = sub_1000BA294(&qword_100BC5FE8);
                          v282[*(int *)(v287 + 48)] = v283[*(int *)(v287 + 48)];
                          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v282, 0, 1, v284);
                        }
                        v288 = (uint64_t)v251;
                        v289 = v253;
                        goto LABEL_162;
                      }
                    }
                    else
                    {
                      if (!v255)
                      {
                        v259 = v252[1];
                        if (v251[1])
                        {
                          if (v259)
                          {
                            *v251 = *v252;
                            v251[1] = v252[1];
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRelease();
                            v251[2] = v252[2];
                            v251[3] = v252[3];
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            sub_10035C44C((uint64_t)v251);
                            v295 = *((_OWORD *)v252 + 1);
                            *(_OWORD *)v251 = *(_OWORD *)v252;
                            *((_OWORD *)v251 + 1) = v295;
                          }
                        }
                        else if (v259)
                        {
                          *v251 = *v252;
                          v251[1] = v252[1];
                          v251[2] = v252[2];
                          v251[3] = v252[3];
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          v296 = *((_OWORD *)v252 + 1);
                          *(_OWORD *)v251 = *(_OWORD *)v252;
                          *((_OWORD *)v251 + 1) = v296;
                        }
                        if (a1 != a2)
                        {
                          v297 = *(int *)(v253 + 20);
                          v298 = (_QWORD *)((char *)v251 + v297);
                          v299 = (_QWORD *)((char *)v252 + v297);
                          sub_1000215BC((uint64_t)v251 + v297, type metadata accessor for NewsArticleComponentViewModel);
                          v300 = type metadata accessor for NewsArticleComponentViewModel(0);
                          if (swift_getEnumCaseMultiPayload(v299) == 1)
                          {
                            v349 = v6;
                            v359 = a1;
                            *v298 = *v299;
                            v298[1] = v299[1];
                            v344 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                            v301 = v344[5];
                            __dsta = (char *)v298 + v301;
                            v302 = (char *)v299 + v301;
                            v303 = type metadata accessor for URL(0);
                            swift_bridgeObjectRetain();
                            v354 = a2;
                            v339 = v300;
                            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v302, 1, v303))
                            {
                              v304 = sub_1000BA294(&qword_100BD4280);
                              memcpy(__dsta, v302, *(_QWORD *)(*(_QWORD *)(v304 - 8) + 64));
                            }
                            else
                            {
                              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v303 - 8) + 16))(__dsta, v302, v303);
                              _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dsta, 0, 1, v303);
                            }
                            v305 = v344[6];
                            v306 = (_QWORD *)((char *)v298 + v305);
                            v307 = (_QWORD *)((char *)v299 + v305);
                            *v306 = *v307;
                            v306[1] = v307[1];
                            v308 = v344[7];
                            v309 = (char *)v298 + v308;
                            v310 = (char *)v299 + v308;
                            v311 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v303 - 8) + 16);
                            v312 = swift_bridgeObjectRetain();
                            v311(v309, v310, v303, v312);
                            v313 = v344[8];
                            v314 = (char *)v298 + v313;
                            v315 = (char *)v299 + v313;
                            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v299 + v313, 1, v303))
                            {
                              v316 = sub_1000BA294(&qword_100BD4280);
                              memcpy(v314, v315, *(_QWORD *)(*(_QWORD *)(v316 - 8) + 64));
                            }
                            else
                            {
                              ((void (*)(char *, char *, uint64_t))v311)(v314, v315, v303);
                              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v314, 0, 1, v303);
                            }
                            a2 = v354;
                            *((_BYTE *)v298 + v344[9]) = *((_BYTE *)v299 + v344[9]);
                            swift_storeEnumTagMultiPayload(v298, v339, 1);
                            a1 = v359;
                            v6 = v349;
                          }
                          else
                          {
                            memcpy(v298, v299, *(_QWORD *)(*(_QWORD *)(v300 - 8) + 64));
                          }
                        }
                        v317 = *(int *)(v253 + 24);
                        v318 = (uint64_t)v251 + v317;
                        v319 = (uint64_t)v252 + v317;
                        v320 = type metadata accessor for DetailComponentAction(0);
                        v321 = _s7Weather24LocationCompositionStateOwet_0(v318, 1, v320);
                        v322 = _s7Weather24LocationCompositionStateOwet_0(v319, 1, v320);
                        if (v321)
                        {
                          if (!v322)
                          {
                            v323 = type metadata accessor for URL(0);
                            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v323 - 8) + 16))(v318, v319, v323);
                            v324 = sub_1000BA294(&qword_100BC5FE8);
                            *(_BYTE *)(v318 + *(int *)(v324 + 48)) = *(_BYTE *)(v319 + *(int *)(v324 + 48));
                            v288 = v318;
                            v289 = v320;
LABEL_162:
                            _s7Weather24LocationCompositionStateOwst_0(v288, 0, 1, v289);
                            goto LABEL_163;
                          }
                        }
                        else
                        {
                          if (!v322)
                          {
                            v325 = type metadata accessor for URL(0);
                            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v325 - 8) + 24))(v318, v319, v325);
                            v326 = sub_1000BA294(&qword_100BC5FE8);
                            *(_BYTE *)(v318 + *(int *)(v326 + 48)) = *(_BYTE *)(v319 + *(int *)(v326 + 48));
                            goto LABEL_163;
                          }
                          sub_1000215BC(v318, type metadata accessor for DetailComponentAction);
                        }
                        v256 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
                        v257 = (void *)v318;
                        v258 = (const void *)v319;
LABEL_142:
                        memcpy(v257, v258, v256);
LABEL_163:
                        *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
                        v290 = v6[21];
                        v291 = a1 + v290;
                        v292 = a2 + v290;
                        v293 = type metadata accessor for LocationDetailEntity(0);
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v293 - 8) + 24))(v291, v292, v293);
                        return a1;
                      }
                      sub_1000215BC((uint64_t)v251, type metadata accessor for DetailComponentContainerViewModel);
                    }
                    v256 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
                    v257 = v251;
                    v258 = v252;
                    goto LABEL_142;
                  }
LABEL_124:
                  v233 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
                  v90 = v341;
                  goto LABEL_135;
                }
                v6 = v347;
                if (v230)
                {
                  sub_1000215BC((uint64_t)v226, type metadata accessor for WeatherDataOverrides);
                  goto LABEL_124;
                }
                v235 = type metadata accessor for Date(0);
                v236 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v226, 1, v235);
                v237 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v227, 1, v235);
                v90 = v341;
                if (v236)
                {
                  if (!v237)
                  {
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v235 - 8) + 16))(v226, v227, v235);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v226, 0, 1, v235);
                    goto LABEL_187;
                  }
                }
                else
                {
                  v327 = *(_QWORD *)(v235 - 8);
                  if (!v237)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v327 + 24))(v226, v227, v235);
LABEL_187:
                    a2 = v352;
                    v329 = *(int *)(v228 + 20);
                    v330 = (uint64_t)&v226[v329];
                    v331 = (uint64_t)&v227[v329];
                    v332 = _s7Weather24LocationCompositionStateOwet_0(v330, 1, v235);
                    v333 = _s7Weather24LocationCompositionStateOwet_0(v331, 1, v235);
                    if (v332)
                    {
                      if (!v333)
                      {
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v235 - 8) + 16))(v330, v331, v235);
                        v222 = v330;
                        v223 = v235;
LABEL_113:
                        _s7Weather24LocationCompositionStateOwst_0(v222, 0, 1, v223);
                        goto LABEL_135;
                      }
                    }
                    else
                    {
                      v334 = *(_QWORD *)(v235 - 8);
                      if (!v333)
                      {
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(v334 + 24))(v330, v331, v235);
                        goto LABEL_135;
                      }
                      (*(void (**)(uint64_t, uint64_t))(v334 + 8))(v330, v235);
                    }
                    v106 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
                    v107 = (void *)v330;
                    v108 = (const void *)v331;
                    goto LABEL_51;
                  }
                  (*(void (**)(char *, uint64_t))(v327 + 8))(v226, v235);
                }
                v328 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
                goto LABEL_187;
              }
              sub_100021A14((uint64_t)v204, &qword_100BC3348);
            }
            v209 = type metadata accessor for WeatherData.CachingState(0);
            memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
            goto LABEL_103;
          }
          (*(void (**)(char *, uint64_t))(v197 + 8))(v110, v112);
        }
        v198 = sub_1000BA294(&qword_100BC3340);
        memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        goto LABEL_97;
      }
      (*(void (**)(void *, uint64_t))(v48 + 8))(v15, v17);
    }
    v49 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_22;
  }
  if (v8)
  {
LABEL_7:
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v345 = v6;
  v350 = a2;
  v9 = v6[14];
  v355 = a1;
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for AirPollutant(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v20 = v6[15];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  if (v22[1])
  {
    *v21 = *v22;
    v21[1] = v22[1];
    v21[2] = v22[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_OWORD *)v22;
    v21[2] = v22[2];
    *(_OWORD *)v21 = v23;
  }
  v24 = v6[16];
  v25 = *(void **)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  *(_QWORD *)(a1 + v6[17]) = *(_QWORD *)(a2 + v6[17]);
  v26 = v6[18];
  v27 = (_QWORD *)(a1 + v26);
  v28 = a2 + v26;
  *v27 = *(_QWORD *)(a2 + v26);
  v27[1] = *(_QWORD *)(a2 + v26 + 8);
  v29 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v30 = v29[5];
  v31 = (char *)v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for Location(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 16);
  v35 = v25;
  swift_bridgeObjectRetain();
  v36 = swift_bridgeObjectRetain();
  v34(v31, v32, v33, v36);
  v337 = v27;
  v37 = v29[6];
  v38 = (_QWORD *)((char *)v27 + v37);
  v39 = (_QWORD *)(v28 + v37);
  v40 = (int *)type metadata accessor for WeatherData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, (uint64_t)v40))
  {
    *v38 = *v39;
    v38[1] = v39[1];
    v43 = v40[5];
    v44 = (char *)v38 + v43;
    v45 = (char *)v39 + v43;
    v46 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
    {
      v47 = sub_1000BA294(&qword_100BC3340);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
    }
    v55 = v40[6];
    v56 = (char *)v38 + v55;
    v57 = (char *)v39 + v55;
    v58 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
    v59 = v40[7];
    v60 = (char *)v38 + v59;
    v61 = (char *)v39 + v59;
    v62 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
    {
      v63 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v65 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v60, v61, v65);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
    }
    v66 = v40[8];
    v67 = (_QWORD *)((char *)v38 + v66);
    v68 = (_QWORD *)((char *)v39 + v66);
    v69 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v70 = swift_getEnumCaseMultiPayload(v68);
    if (v70 == 1)
    {
      v74 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v67, v68, v74);
      v71 = v67;
      v72 = v69;
      v73 = 1;
    }
    else
    {
      if (v70)
      {
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        goto LABEL_38;
      }
      *v67 = *v68;
      v67[1] = v68[1];
      swift_bridgeObjectRetain();
      v71 = v67;
      v72 = v69;
      v73 = 0;
    }
    swift_storeEnumTagMultiPayload(v71, v72, v73);
LABEL_38:
    v75 = v40[9];
    v76 = (char *)v38 + v75;
    v77 = (char *)v39 + v75;
    v78 = type metadata accessor for WeatherDataOverrides(0);
    a1 = v355;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v77, 1, v78))
    {
      v79 = sub_1000BA294(&qword_100BC3350);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      v80 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v77, 1, v80))
      {
        v81 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v76, v77, v80);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v76, 0, 1, v80);
      }
      v115 = *(int *)(v78 + 20);
      v116 = &v76[v115];
      v117 = &v77[v115];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v80))
      {
        v118 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v116, v117, v80);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v80);
      }
      a1 = v355;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v76, 0, 1, v78);
    }
    v42 = v350;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
    goto LABEL_64;
  }
  v41 = sub_1000BA294(&qword_100BC3460);
  memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  v42 = v350;
  a1 = v355;
LABEL_64:
  v128 = v29[7];
  v129 = (_QWORD *)((char *)v27 + v128);
  v130 = (_QWORD *)(v28 + v128);
  *v129 = *v130;
  v129[1] = v130[1];
  v131 = v29[8];
  v132 = (char *)v27 + v131;
  v133 = v28 + v131;
  v134 = type metadata accessor for WeatherMapOverlayKind(0);
  v135 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v134 - 8) + 16);
  v136 = swift_bridgeObjectRetain();
  v135(v132, v133, v134, v136);
  *((_BYTE *)v337 + v29[9]) = *(_BYTE *)(v28 + v29[9]);
  v137 = (uint64_t)v345;
  v138 = v345[19];
  v139 = (_QWORD *)(a1 + v138);
  v140 = (_QWORD *)(v42 + v138);
  v141 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v140, 1, v141))
  {
    v142 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
  }
  else
  {
    if (v140[1])
    {
      *v139 = *v140;
      v139[1] = v140[1];
      v139[2] = v140[2];
      v139[3] = v140[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v143 = *((_OWORD *)v140 + 1);
      *(_OWORD *)v139 = *(_OWORD *)v140;
      *((_OWORD *)v139 + 1) = v143;
    }
    v144 = *(int *)(v141 + 20);
    v145 = (_QWORD *)((char *)v139 + v144);
    v146 = (_QWORD *)((char *)v140 + v144);
    v147 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v146) == 1)
    {
      v342 = v147;
      *v145 = *v146;
      v145[1] = v146[1];
      v148 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v149 = v148[5];
      v150 = (char *)v145 + v149;
      v151 = (char *)v146 + v149;
      v152 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v151, 1, v152))
      {
        v153 = sub_1000BA294(&qword_100BD4280);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 16))(v150, v151, v152);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v150, 0, 1, v152);
      }
      v154 = v148[6];
      v155 = (_QWORD *)((char *)v145 + v154);
      v156 = (_QWORD *)((char *)v146 + v154);
      *v155 = *v156;
      v155[1] = v156[1];
      v157 = v148[7];
      v158 = (char *)v145 + v157;
      v159 = v148;
      v160 = (char *)v146 + v157;
      v161 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v152 - 8) + 16);
      v162 = swift_bridgeObjectRetain();
      v163 = v158;
      v164 = v159;
      v161(v163, v160, v152, v162);
      v165 = v159[8];
      v166 = (char *)v145 + v165;
      v167 = (char *)v146 + v165;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v146 + v165, 1, v152))
      {
        v168 = sub_1000BA294(&qword_100BD4280);
        memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v161)(v166, v167, v152);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v166, 0, 1, v152);
      }
      v137 = (uint64_t)v345;
      v42 = v350;
      *((_BYTE *)v145 + v164[9]) = *((_BYTE *)v146 + v164[9]);
      swift_storeEnumTagMultiPayload(v145, v342, 1);
      a1 = v355;
    }
    else
    {
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    v169 = *(int *)(v141 + 24);
    v170 = (char *)v139 + v169;
    v171 = (char *)v140 + v169;
    v172 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v171, 1, v172))
    {
      v173 = sub_1000BA294(&qword_100BD3100);
      memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    }
    else
    {
      v174 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v174 - 8) + 16))(v170, v171, v174);
      v175 = sub_1000BA294(&qword_100BC5FE8);
      v170[*(int *)(v175 + 48)] = v171[*(int *)(v175 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v170, 0, 1, v172);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v139, 0, 1, v141);
  }
  *(_BYTE *)(a1 + *(int *)(v137 + 80)) = *(_BYTE *)(v42 + *(int *)(v137 + 80));
  v176 = *(int *)(v137 + 84);
  v177 = a1 + v176;
  v178 = v42 + v176;
  v179 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v177, v178, v179);
  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v137);
  return a1;
}

_OWORD *sub_100588C78(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v98)(char *, char *, uint64_t);
  char *__dst;
  void *__dsta;
  int *v101;
  char *v102;
  char *v103;
  char *v104;
  int *v105;

  v6 = (int *)type metadata accessor for AirQualityDetailViewModel.Model(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, (uint64_t)v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    a1[8] = a2[8];
    v10 = v6[14];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for AirPollutant(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294(&qword_100BDACB0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
    v15 = v6[15];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
    *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)((char *)a2 + v6[16]);
    *(_QWORD *)((char *)a1 + v6[17]) = *(_QWORD *)((char *)a2 + v6[17]);
    v18 = v6[18];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
    v21 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
    v22 = v21[5];
    v23 = &v19[v22];
    v24 = &v20[v22];
    v25 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    v26 = v21[6];
    v27 = &v19[v26];
    v28 = &v20[v26];
    v29 = (int *)type metadata accessor for WeatherData(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, (uint64_t)v29))
    {
      v30 = sub_1000BA294(&qword_100BC3460);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v101 = v21;
      v104 = v19;
      *(_OWORD *)v27 = *(_OWORD *)v28;
      v31 = v29[5];
      v32 = &v27[v31];
      v33 = &v28[v31];
      v34 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
      {
        v35 = sub_1000BA294(&qword_100BC3340);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
      }
      v36 = v29[6];
      v37 = &v27[v36];
      v38 = &v28[v36];
      v39 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
      v40 = v29[7];
      v41 = &v27[v40];
      v42 = &v28[v40];
      v43 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
      {
        v44 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v45 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v41, v42, v45);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
      }
      v46 = v29[8];
      v47 = &v27[v46];
      v48 = &v28[v46];
      v49 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v48) == 1)
      {
        v50 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v47, v48, v50);
        swift_storeEnumTagMultiPayload(v47, v49, 1);
      }
      else
      {
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      v51 = v29[9];
      v52 = &v27[v51];
      v53 = &v28[v51];
      v54 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
      {
        v55 = sub_1000BA294(&qword_100BC3350);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v56 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v56))
        {
          v57 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v52, v53, v56);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v56);
        }
        v58 = *(int *)(v54 + 20);
        __dst = &v52[v58];
        v59 = &v53[v58];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v56))
        {
          v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(__dst, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(__dst, v59, v56);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v56);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
      }
      v21 = v101;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, (uint64_t)v29);
      v19 = v104;
    }
    *(_OWORD *)&v19[v21[7]] = *(_OWORD *)&v20[v21[7]];
    v61 = v21[8];
    v62 = &v19[v61];
    v63 = &v20[v61];
    v64 = type metadata accessor for WeatherMapOverlayKind(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
    v19[v21[9]] = v20[v21[9]];
    v65 = v6[19];
    v66 = (_OWORD *)((char *)a1 + v65);
    v67 = (_OWORD *)((char *)a2 + v65);
    v68 = type metadata accessor for DetailComponentContainerViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68))
    {
      v69 = sub_1000BA294(&qword_100BC68A0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      v70 = v67[1];
      *v66 = *v67;
      v66[1] = v70;
      v71 = *(int *)(v68 + 20);
      v72 = (char *)v66 + v71;
      v73 = (char *)v67 + v71;
      v74 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v73) == 1)
      {
        __dsta = (void *)v74;
        *(_OWORD *)v72 = *(_OWORD *)v73;
        v75 = type metadata accessor for NewsArticleComponentContentViewModel(0);
        v76 = *(int *)(v75 + 20);
        v102 = &v72[v76];
        v105 = (int *)v75;
        v77 = &v73[v76];
        v78 = type metadata accessor for URL(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v77, 1, v78))
        {
          v79 = sub_1000BA294(&qword_100BD4280);
          memcpy(v102, v77, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
          v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
        }
        else
        {
          v81 = v77;
          v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
          v82(v102, v81, v78);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v78);
          v80 = v82;
        }
        *(_OWORD *)&v72[v105[6]] = *(_OWORD *)&v73[v105[6]];
        v98 = v80;
        v80(&v72[v105[7]], &v73[v105[7]], v78);
        v83 = v105[8];
        v103 = &v72[v83];
        v84 = &v73[v83];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v73[v83], 1, v78))
        {
          v85 = sub_1000BA294(&qword_100BD4280);
          memcpy(v103, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          v98(v103, v84, v78);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v103, 0, 1, v78);
        }
        v72[v105[9]] = v73[v105[9]];
        swift_storeEnumTagMultiPayload(v72, __dsta, 1);
      }
      else
      {
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      v86 = *(int *)(v68 + 24);
      v87 = (char *)v66 + v86;
      v88 = (char *)v67 + v86;
      v89 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v88, 1, v89))
      {
        v90 = sub_1000BA294(&qword_100BD3100);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
      }
      else
      {
        v91 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v87, v88, v91);
        v92 = sub_1000BA294(&qword_100BC5FE8);
        v87[*(int *)(v92 + 48)] = v88[*(int *)(v92 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v87, 0, 1, v89);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
    }
    *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
    v93 = v6[21];
    v94 = (char *)a1 + v93;
    v95 = (char *)a2 + v93;
    v96 = type metadata accessor for LocationDetailEntity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v94, v95, v96);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
  }
  return a1;
}

uint64_t sub_1005894CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  int v81;
  int v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const void *v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  _OWORD *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const void *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  __int128 v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(char *, char *, uint64_t);
  size_t v229;
  void *v230;
  const void *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(char *, char *, uint64_t);
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  char *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  uint64_t v294;
  void *__srcc;
  void (*__src)(char *, char *, uint64_t);
  void *__srcd;
  void (*__srca)(char *, char *, uint64_t);
  void *__srce;
  void (*__srcb)(char *, char *, uint64_t);
  char *__dst;
  char *__dsta;
  void *__dstb;
  void *__dstc;
  void *__dstd;
  int *v306;
  int *v307;
  int *v308;
  int *v309;
  int *v310;
  int *v311;
  int *v312;
  int *v313;
  int *v314;
  int *v315;
  int *v316;
  int *v317;

  v6 = (int *)type metadata accessor for AirQualityDetailViewModel.Model(0);
  v7 = _s7Weather24LocationCompositionStateOwet_0(a1, 1, (uint64_t)v6);
  v8 = _s7Weather24LocationCompositionStateOwet_0(a2, 1, (uint64_t)v6);
  if (!v7)
  {
    if (v8)
    {
      sub_1000215BC(a1, type metadata accessor for AirQualityDetailViewModel.Model);
      goto LABEL_7;
    }
    v17 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v17;
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v18;
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v19;
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v20;
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v21 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v21;
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v22;
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v23;
    swift_bridgeObjectRelease();
    v24 = v6[14];
    v25 = (void *)(a1 + v24);
    v26 = (const void *)(a2 + v24);
    v27 = type metadata accessor for AirPollutant(0);
    v28 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v25, 1, v27);
    v29 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v26, 1, v27);
    if (v28)
    {
      if (!v29)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v25, 0, 1, v27);
        goto LABEL_19;
      }
    }
    else
    {
      v51 = *(_QWORD *)(v27 - 8);
      if (!v29)
      {
        (*(void (**)(void *, const void *, uint64_t))(v51 + 40))(v25, v26, v27);
LABEL_19:
        v53 = v6[15];
        v54 = (_QWORD *)(a1 + v53);
        v55 = (_QWORD *)(a2 + v53);
        if (*(_QWORD *)(a1 + v53 + 8))
        {
          v56 = v55[1];
          if (v56)
          {
            *v54 = *v55;
            v54[1] = v56;
            swift_bridgeObjectRelease();
            v54[2] = v55[2];
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
          sub_100366A60((uint64_t)v54);
        }
        *(_OWORD *)v54 = *(_OWORD *)v55;
        v54[2] = v55[2];
LABEL_27:
        v66 = v6[16];
        v67 = *(void **)(a1 + v66);
        *(_QWORD *)(a1 + v66) = *(_QWORD *)(a2 + v66);

        *(_QWORD *)(a1 + v6[17]) = *(_QWORD *)(a2 + v6[17]);
        swift_bridgeObjectRelease();
        v68 = v6[18];
        v69 = (_QWORD *)(a1 + v68);
        v70 = (char *)(a2 + v68);
        v71 = *(_QWORD *)(a2 + v68 + 8);
        *v69 = *(_QWORD *)(a2 + v68);
        v69[1] = v71;
        swift_bridgeObjectRelease();
        v72 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
        v73 = v72[5];
        v74 = (char *)v69 + v73;
        v75 = &v70[v73];
        v76 = type metadata accessor for Location(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
        v77 = v72[6];
        v78 = (uint64_t)v69 + v77;
        v79 = (uint64_t)&v70[v77];
        v80 = (int *)type metadata accessor for WeatherData(0);
        v81 = _s7Weather24LocationCompositionStateOwet_0(v78, 1, (uint64_t)v80);
        v82 = _s7Weather24LocationCompositionStateOwet_0(v79, 1, (uint64_t)v80);
        if (v81)
        {
          if (!v82)
          {
            __dst = v70;
            v307 = v72;
            v313 = v6;
            *(_OWORD *)v78 = *(_OWORD *)v79;
            v83 = v80[5];
            v84 = (void *)(v78 + v83);
            v85 = (const void *)(v79 + v83);
            v86 = type metadata accessor for Locale(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v85, 1, v86))
            {
              v87 = sub_1000BA294(&qword_100BC3340);
              memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v84, v85, v86);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v84, 0, 1, v86);
            }
            v111 = v80[6];
            v112 = v78 + v111;
            v113 = v79 + v111;
            v114 = type metadata accessor for WeatherDataModel(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v112, v113, v114);
            v115 = v80[7];
            v116 = (void *)(v78 + v115);
            v117 = (const void *)(v79 + v115);
            v118 = sub_1000BA294(&qword_100BC3348);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v118))
            {
              v119 = type metadata accessor for WeatherData.CachingState(0);
              memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
            }
            else
            {
              v123 = type metadata accessor for Date(0);
              (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v116, v117, v123);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v116, 0, 1, v118);
            }
            v124 = v80[8];
            v125 = (void *)(v78 + v124);
            v126 = (const void *)(v79 + v124);
            v127 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
            if (swift_getEnumCaseMultiPayload(v126) == 1)
            {
              v128 = type metadata accessor for WeatherStatisticsModel(0);
              (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v125, v126, v128);
              swift_storeEnumTagMultiPayload(v125, v127, 1);
            }
            else
            {
              memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
            }
            v129 = v80[9];
            v130 = (char *)(v78 + v129);
            v131 = (char *)(v79 + v129);
            v132 = type metadata accessor for WeatherDataOverrides(0);
            v72 = v307;
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v131, 1, v132))
            {
              v133 = sub_1000BA294(&qword_100BC3350);
              memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
            }
            else
            {
              v170 = type metadata accessor for Date(0);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v131, 1, v170))
              {
                v171 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32))(v130, v131, v170);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v130, 0, 1, v170);
              }
              v199 = *(int *)(v132 + 20);
              v200 = &v130[v199];
              v201 = &v131[v199];
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v201, 1, v170))
              {
                v202 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32))(v200, v201, v170);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v200, 0, 1, v170);
              }
              v72 = v307;
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v130, 0, 1, v132);
            }
            v6 = v313;
            _s7Weather24LocationCompositionStateOwst_0(v78, 0, 1, (uint64_t)v80);
            goto LABEL_107;
          }
          goto LABEL_33;
        }
        if (v82)
        {
          sub_1000215BC(v78, type metadata accessor for WeatherData);
LABEL_33:
          v88 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC3460) - 8) + 64);
          v89 = (void *)v78;
          v90 = (const void *)v79;
LABEL_34:
          memcpy(v89, v90, v88);
          goto LABEL_108;
        }
        __dst = v70;
        v308 = v72;
        v314 = v6;
        v104 = *(_QWORD *)(v79 + 8);
        *(_QWORD *)v78 = *(_QWORD *)v79;
        *(_QWORD *)(v78 + 8) = v104;
        swift_bridgeObjectRelease();
        v105 = v80[5];
        v106 = (void *)(v78 + v105);
        v107 = (const void *)(v79 + v105);
        v108 = type metadata accessor for Locale(0);
        v109 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v106, 1, v108);
        v110 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v107, 1, v108);
        if (v109)
        {
          if (!v110)
          {
            (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v106, v107, v108);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v106, 0, 1, v108);
            goto LABEL_83;
          }
        }
        else
        {
          v172 = *(_QWORD *)(v108 - 8);
          if (!v110)
          {
            (*(void (**)(void *, const void *, uint64_t))(v172 + 40))(v106, v107, v108);
LABEL_83:
            v174 = v80[6];
            v175 = v78 + v174;
            v176 = v79 + v174;
            v177 = type metadata accessor for WeatherDataModel(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 40))(v175, v176, v177);
            v178 = v80[7];
            v179 = (void *)(v78 + v178);
            v180 = (const void *)(v79 + v178);
            v181 = sub_1000BA294(&qword_100BC3348);
            LODWORD(v176) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v179, 1, v181);
            v182 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v180, 1, v181);
            if ((_DWORD)v176)
            {
              if (!v182)
              {
                v183 = type metadata accessor for Date(0);
                (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v183 - 8) + 32))(v179, v180, v183);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v179, 0, 1, v181);
                goto LABEL_89;
              }
            }
            else
            {
              if (!v182)
              {
                v264 = type metadata accessor for Date(0);
                (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v264 - 8) + 40))(v179, v180, v264);
LABEL_89:
                v72 = v308;
                v6 = v314;
                if (a1 != a2)
                {
                  v185 = v80[8];
                  v186 = (void *)(v78 + v185);
                  v187 = (const void *)(v79 + v185);
                  sub_1000215BC(v78 + v185, type metadata accessor for WeatherData.WeatherStatisticsState);
                  v188 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
                  if (swift_getEnumCaseMultiPayload(v187) == 1)
                  {
                    v189 = type metadata accessor for WeatherStatisticsModel(0);
                    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v189 - 8) + 32))(v186, v187, v189);
                    swift_storeEnumTagMultiPayload(v186, v188, 1);
                  }
                  else
                  {
                    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
                  }
                  v72 = v308;
                  v6 = v314;
                }
                v190 = v80[9];
                v191 = (char *)(v78 + v190);
                v192 = (char *)(v79 + v190);
                v193 = type metadata accessor for WeatherDataOverrides(0);
                v194 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v191, 1, v193);
                v195 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v193);
                if (v194)
                {
                  if (!v195)
                  {
                    v196 = type metadata accessor for Date(0);
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v196))
                    {
                      v197 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v191, v192, v196);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v196);
                    }
                    v283 = *(int *)(v193 + 20);
                    v284 = &v191[v283];
                    v285 = &v192[v283];
                    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v285, 1, v196))
                    {
                      v286 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                      memcpy(v284, v285, *(_QWORD *)(*(_QWORD *)(v286 - 8) + 64));
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v196 - 8) + 32))(v284, v285, v196);
                      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v284, 0, 1, v196);
                    }
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v193);
                    v6 = v314;
                    goto LABEL_107;
                  }
                  goto LABEL_100;
                }
                if (v195)
                {
                  sub_1000215BC((uint64_t)v191, type metadata accessor for WeatherDataOverrides);
LABEL_100:
                  v198 = sub_1000BA294(&qword_100BC3350);
                  memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
LABEL_107:
                  v70 = __dst;
                  goto LABEL_108;
                }
                v265 = type metadata accessor for Date(0);
                v266 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v191, 1, v265);
                v267 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v192, 1, v265);
                if (v266)
                {
                  if (!v267)
                  {
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v265 - 8) + 32))(v191, v192, v265);
                    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v191, 0, 1, v265);
                    goto LABEL_165;
                  }
                }
                else
                {
                  v287 = *(_QWORD *)(v265 - 8);
                  if (!v267)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v287 + 40))(v191, v192, v265);
LABEL_165:
                    v6 = v314;
                    v289 = *(int *)(v193 + 20);
                    v290 = (uint64_t)&v191[v289];
                    v291 = (uint64_t)&v192[v289];
                    v292 = _s7Weather24LocationCompositionStateOwet_0(v290, 1, v265);
                    v293 = _s7Weather24LocationCompositionStateOwet_0(v291, 1, v265);
                    v70 = __dst;
                    if (v292)
                    {
                      if (!v293)
                      {
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v265 - 8) + 32))(v290, v291, v265);
                        _s7Weather24LocationCompositionStateOwst_0(v290, 0, 1, v265);
                        goto LABEL_108;
                      }
                    }
                    else
                    {
                      v294 = *(_QWORD *)(v265 - 8);
                      if (!v293)
                      {
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(v294 + 40))(v290, v291, v265);
LABEL_108:
                        v203 = v72[7];
                        v204 = (_QWORD *)((char *)v69 + v203);
                        v205 = &v70[v203];
                        v207 = *(_QWORD *)v205;
                        v206 = *((_QWORD *)v205 + 1);
                        *v204 = v207;
                        v204[1] = v206;
                        swift_bridgeObjectRelease();
                        v208 = v72[8];
                        v209 = (char *)v69 + v208;
                        v210 = &v70[v208];
                        v211 = type metadata accessor for WeatherMapOverlayKind(0);
                        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v211 - 8) + 40))(v209, v210, v211);
                        *((_BYTE *)v69 + v72[9]) = v70[v72[9]];
                        v212 = v6[19];
                        v213 = a1 + v212;
                        v214 = a2 + v212;
                        v215 = type metadata accessor for DetailComponentContainerViewModel(0);
                        v216 = _s7Weather24LocationCompositionStateOwet_0(v213, 1, v215);
                        v217 = _s7Weather24LocationCompositionStateOwet_0(v214, 1, v215);
                        if (v216)
                        {
                          if (!v217)
                          {
                            v218 = *(_OWORD *)(v214 + 16);
                            *(_OWORD *)v213 = *(_OWORD *)v214;
                            *(_OWORD *)(v213 + 16) = v218;
                            v219 = *(int *)(v215 + 20);
                            v220 = (char *)(v213 + v219);
                            v221 = (char *)(v214 + v219);
                            v222 = type metadata accessor for NewsArticleComponentViewModel(0);
                            if (swift_getEnumCaseMultiPayload(v221) == 1)
                            {
                              __dstc = (void *)v222;
                              v316 = v6;
                              *(_OWORD *)v220 = *(_OWORD *)v221;
                              v310 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                              v223 = v310[5];
                              v224 = &v220[v223];
                              v225 = &v221[v223];
                              v226 = type metadata accessor for URL(0);
                              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v225, 1, v226))
                              {
                                v227 = sub_1000BA294(&qword_100BD4280);
                                memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
                                v228 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v226 - 8) + 32);
                              }
                              else
                              {
                                v234 = v224;
                                __srcd = v224;
                                v228 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v226 - 8) + 32);
                                v228(v234, v225, v226);
                                _s7Weather24LocationCompositionStateOwst_0((uint64_t)__srcd, 0, 1, v226);
                              }
                              *(_OWORD *)&v220[v310[6]] = *(_OWORD *)&v221[v310[6]];
                              __srca = v228;
                              v228(&v220[v310[7]], &v221[v310[7]], v226);
                              v235 = v310[8];
                              v236 = &v220[v235];
                              v237 = &v221[v235];
                              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v221[v235], 1, v226))
                              {
                                v238 = sub_1000BA294(&qword_100BD4280);
                                memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
                              }
                              else
                              {
                                __srca(v236, v237, v226);
                                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v226);
                              }
                              v6 = v316;
                              v220[v310[9]] = v221[v310[9]];
                              swift_storeEnumTagMultiPayload(v220, __dstc, 1);
                            }
                            else
                            {
                              memcpy(v220, v221, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
                            }
                            v239 = *(int *)(v215 + 24);
                            v240 = (void *)(v213 + v239);
                            v241 = (const void *)(v214 + v239);
                            v242 = type metadata accessor for DetailComponentAction(0);
                            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v241, 1, v242))
                            {
                              v243 = sub_1000BA294(&qword_100BD3100);
                              memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
                            }
                            else
                            {
                              v244 = type metadata accessor for URL(0);
                              (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v244 - 8) + 32))(v240, v241, v244);
                              v245 = sub_1000BA294(&qword_100BC5FE8);
                              *((_BYTE *)v240 + *(int *)(v245 + 48)) = *((_BYTE *)v241 + *(int *)(v245 + 48));
                              _s7Weather24LocationCompositionStateOwst_0((uint64_t)v240, 0, 1, v242);
                            }
                            v246 = v213;
                            v247 = v215;
                            goto LABEL_130;
                          }
                          goto LABEL_115;
                        }
                        if (v217)
                        {
                          sub_1000215BC(v213, type metadata accessor for DetailComponentContainerViewModel);
LABEL_115:
                          v229 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
                          v230 = (void *)v213;
                          v231 = (const void *)v214;
                          goto LABEL_116;
                        }
                        if (*(_QWORD *)(v213 + 8))
                        {
                          v232 = *(_QWORD *)(v214 + 8);
                          if (v232)
                          {
                            *(_QWORD *)v213 = *(_QWORD *)v214;
                            *(_QWORD *)(v213 + 8) = v232;
                            swift_bridgeObjectRelease();
                            v233 = *(_QWORD *)(v214 + 24);
                            *(_QWORD *)(v213 + 16) = *(_QWORD *)(v214 + 16);
                            *(_QWORD *)(v213 + 24) = v233;
                            swift_bridgeObjectRelease();
LABEL_135:
                            if (a1 != a2)
                            {
                              v254 = *(int *)(v215 + 20);
                              v255 = (char *)(v213 + v254);
                              v256 = (char *)(v214 + v254);
                              sub_1000215BC(v213 + v254, type metadata accessor for NewsArticleComponentViewModel);
                              v257 = type metadata accessor for NewsArticleComponentViewModel(0);
                              if (swift_getEnumCaseMultiPayload(v256) == 1)
                              {
                                __dstd = (void *)v257;
                                v317 = v6;
                                *(_OWORD *)v255 = *(_OWORD *)v256;
                                v311 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
                                v258 = v311[5];
                                v259 = &v255[v258];
                                v260 = &v256[v258];
                                v261 = type metadata accessor for URL(0);
                                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v260, 1, v261))
                                {
                                  v262 = sub_1000BA294(&qword_100BD4280);
                                  memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
                                  v263 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v261 - 8) + 32);
                                }
                                else
                                {
                                  v268 = v259;
                                  __srce = v259;
                                  v263 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v261 - 8) + 32);
                                  v263(v268, v260, v261);
                                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)__srce, 0, 1, v261);
                                }
                                *(_OWORD *)&v255[v311[6]] = *(_OWORD *)&v256[v311[6]];
                                __srcb = v263;
                                v263(&v255[v311[7]], &v256[v311[7]], v261);
                                v269 = v311[8];
                                v270 = &v255[v269];
                                v271 = &v256[v269];
                                if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v256[v269], 1, v261))
                                {
                                  v272 = sub_1000BA294(&qword_100BD4280);
                                  memcpy(v270, v271, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
                                }
                                else
                                {
                                  __srcb(v270, v271, v261);
                                  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v270, 0, 1, v261);
                                }
                                v6 = v317;
                                v255[v311[9]] = v256[v311[9]];
                                swift_storeEnumTagMultiPayload(v255, __dstd, 1);
                              }
                              else
                              {
                                memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
                              }
                            }
                            v273 = *(int *)(v215 + 24);
                            v274 = v213 + v273;
                            v275 = v214 + v273;
                            v276 = type metadata accessor for DetailComponentAction(0);
                            v277 = _s7Weather24LocationCompositionStateOwet_0(v274, 1, v276);
                            v278 = _s7Weather24LocationCompositionStateOwet_0(v275, 1, v276);
                            if (v277)
                            {
                              if (!v278)
                              {
                                v279 = type metadata accessor for URL(0);
                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v279 - 8) + 32))(v274, v275, v279);
                                v280 = sub_1000BA294(&qword_100BC5FE8);
                                *(_BYTE *)(v274 + *(int *)(v280 + 48)) = *(_BYTE *)(v275 + *(int *)(v280 + 48));
                                v246 = v274;
                                v247 = v276;
LABEL_130:
                                _s7Weather24LocationCompositionStateOwst_0(v246, 0, 1, v247);
                                goto LABEL_131;
                              }
                            }
                            else
                            {
                              if (!v278)
                              {
                                v281 = type metadata accessor for URL(0);
                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v281 - 8) + 40))(v274, v275, v281);
                                v282 = sub_1000BA294(&qword_100BC5FE8);
                                *(_BYTE *)(v274 + *(int *)(v282 + 48)) = *(_BYTE *)(v275 + *(int *)(v282 + 48));
                                goto LABEL_131;
                              }
                              sub_1000215BC(v274, type metadata accessor for DetailComponentAction);
                            }
                            v229 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
                            v230 = (void *)v274;
                            v231 = (const void *)v275;
LABEL_116:
                            memcpy(v230, v231, v229);
LABEL_131:
                            *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
                            v248 = v6[21];
                            v249 = a1 + v248;
                            v250 = a2 + v248;
                            v251 = type metadata accessor for LocationDetailEntity(0);
                            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v251 - 8) + 40))(v249, v250, v251);
                            return a1;
                          }
                          sub_10035C44C(v213);
                        }
                        v253 = *(_OWORD *)(v214 + 16);
                        *(_OWORD *)v213 = *(_OWORD *)v214;
                        *(_OWORD *)(v213 + 16) = v253;
                        goto LABEL_135;
                      }
                      (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v290, v265);
                    }
                    v88 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294((uint64_t *)&unk_100BD35A0) - 8) + 64);
                    v89 = (void *)v290;
                    v90 = (const void *)v291;
                    goto LABEL_34;
                  }
                  (*(void (**)(char *, uint64_t))(v287 + 8))(v191, v265);
                }
                v288 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
                memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v288 - 8) + 64));
                goto LABEL_165;
              }
              sub_100021A14((uint64_t)v179, &qword_100BC3348);
            }
            v184 = type metadata accessor for WeatherData.CachingState(0);
            memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
            goto LABEL_89;
          }
          (*(void (**)(void *, uint64_t))(v172 + 8))(v106, v108);
        }
        v173 = sub_1000BA294(&qword_100BC3340);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
        goto LABEL_83;
      }
      (*(void (**)(void *, uint64_t))(v51 + 8))(v25, v27);
    }
    v52 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_19;
  }
  if (v8)
  {
LABEL_7:
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v12 = v6[14];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for AirPollutant(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
  }
  v30 = v6[15];
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
  *(_QWORD *)(a1 + v6[16]) = *(_QWORD *)(a2 + v6[16]);
  *(_QWORD *)(a1 + v6[17]) = *(_QWORD *)(a2 + v6[17]);
  v33 = v6[18];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  v36 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v37 = v36[5];
  v38 = v34 + v37;
  v39 = v35 + v37;
  v40 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  v41 = v36[6];
  v42 = (_OWORD *)(v34 + v41);
  v43 = (_OWORD *)(v35 + v41);
  v44 = (int *)type metadata accessor for WeatherData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, (uint64_t)v44))
  {
    v45 = sub_1000BA294(&qword_100BC3460);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v306 = v36;
    v312 = v6;
    *v42 = *v43;
    v46 = v44[5];
    v47 = (char *)v42 + v46;
    v48 = (char *)v43 + v46;
    v49 = type metadata accessor for Locale(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, v49))
    {
      v50 = sub_1000BA294(&qword_100BC3340);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, v49);
    }
    v57 = v44[6];
    v58 = (char *)v42 + v57;
    v59 = (char *)v43 + v57;
    v60 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
    v61 = v44[7];
    v62 = (char *)v42 + v61;
    v63 = (char *)v43 + v61;
    v64 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 1, v64))
    {
      v65 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v91 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v62, v63, v91);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 0, 1, v64);
    }
    v92 = v44[8];
    v93 = (char *)v42 + v92;
    v94 = (char *)v43 + v92;
    v95 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v94) == 1)
    {
      v96 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v93, v94, v96);
      swift_storeEnumTagMultiPayload(v93, v95, 1);
    }
    else
    {
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    v97 = v44[9];
    v98 = (char *)v42 + v97;
    v99 = (char *)v43 + v97;
    v100 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, v100))
    {
      v101 = sub_1000BA294(&qword_100BC3350);
      memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    else
    {
      v102 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v99, 1, v102))
      {
        v103 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v98, v99, v102);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v98, 0, 1, v102);
      }
      v120 = *(int *)(v100 + 20);
      __dsta = &v98[v120];
      v121 = &v99[v120];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v121, 1, v102))
      {
        v122 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(__dsta, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(__dsta, v121, v102);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dsta, 0, 1, v102);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v98, 0, 1, v100);
    }
    v6 = v312;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, (uint64_t)v44);
    v36 = v306;
  }
  *(_OWORD *)(v34 + v36[7]) = *(_OWORD *)(v35 + v36[7]);
  v134 = v36[8];
  v135 = v34 + v134;
  v136 = v35 + v134;
  v137 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v135, v136, v137);
  *(_BYTE *)(v34 + v36[9]) = *(_BYTE *)(v35 + v36[9]);
  v138 = v6[19];
  v139 = (_OWORD *)(a1 + v138);
  v140 = (_OWORD *)(a2 + v138);
  v141 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v140, 1, v141))
  {
    v142 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
  }
  else
  {
    v143 = v140[1];
    *v139 = *v140;
    v139[1] = v143;
    v144 = *(int *)(v141 + 20);
    v145 = (char *)v139 + v144;
    v146 = (char *)v140 + v144;
    v147 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v146) == 1)
    {
      __dstb = (void *)v147;
      v315 = v6;
      *(_OWORD *)v145 = *(_OWORD *)v146;
      v309 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v148 = v309[5];
      v149 = &v145[v148];
      v150 = &v146[v148];
      v151 = type metadata accessor for URL(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v150, 1, v151))
      {
        v152 = sub_1000BA294(&qword_100BD4280);
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
        v153 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32);
      }
      else
      {
        v154 = v149;
        __srcc = v149;
        v153 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32);
        v153(v154, v150, v151);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__srcc, 0, 1, v151);
      }
      *(_OWORD *)&v145[v309[6]] = *(_OWORD *)&v146[v309[6]];
      __src = v153;
      v153(&v145[v309[7]], &v146[v309[7]], v151);
      v155 = v309[8];
      v156 = &v145[v155];
      v157 = &v146[v155];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v146[v155], 1, v151))
      {
        v158 = sub_1000BA294(&qword_100BD4280);
        memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
      }
      else
      {
        __src(v156, v157, v151);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v156, 0, 1, v151);
      }
      v6 = v315;
      v145[v309[9]] = v146[v309[9]];
      swift_storeEnumTagMultiPayload(v145, __dstb, 1);
    }
    else
    {
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    v159 = *(int *)(v141 + 24);
    v160 = (char *)v139 + v159;
    v161 = (char *)v140 + v159;
    v162 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v161, 1, v162))
    {
      v163 = sub_1000BA294(&qword_100BD3100);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    }
    else
    {
      v164 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v160, v161, v164);
      v165 = sub_1000BA294(&qword_100BC5FE8);
      v160[*(int *)(v165 + 48)] = v161[*(int *)(v165 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v160, 0, 1, v162);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v139, 0, 1, v141);
  }
  *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
  v166 = v6[21];
  v167 = a1 + v166;
  v168 = a2 + v166;
  v169 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 32))(v167, v168, v169);
  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, (uint64_t)v6);
  return a1;
}

uint64_t sub_10058AEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10058AEBC);
}

uint64_t sub_10058AEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1000D9F98();
  v5 = _s7Weather24LocationCompositionStateOwet_0(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_10058AEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10058AF08);
}

uint64_t sub_10058AF08(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_1000D9F98();
  return sub_1000987C4(a1, v5, a3, v6);
}

uint64_t sub_10058AF44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirQualityDetailViewModel.Model(0);
  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
}

uint64_t sub_10058AF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirQualityDetailViewModel.Model(0);
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v4);
}

uint64_t type metadata accessor for AirQualityDetailViewModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF1BD8, (uint64_t)&nominal type descriptor for AirQualityDetailViewModel);
}

uint64_t sub_10058AFC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for AirQualityDetailViewModel.Model(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_10058B014(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  id v35;
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int EnumCaseMultiPayload;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t, __n128);
  __n128 v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t, __n128);
  __n128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  void *__dst;
  _QWORD *__dsta;
  int *__dstb;
  uint64_t v137;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
    return v16;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  v9 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v9;
  v10 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v10;
  v11 = a3[14];
  __dst = (void *)(a1 + v11);
  v12 = (char *)a2 + v11;
  *(_QWORD *)(a1 + 136) = a2[17];
  v13 = type metadata accessor for AirPollutant(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
  {
    v14 = sub_1000BA294(&qword_100BDACB0);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(__dst, v12, v13);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v13);
  }
  v17 = a3[15];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = v19[1];
  v21 = a1;
  if (v20)
  {
    *v18 = *v19;
    v18[1] = v20;
    v18[2] = v19[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[2] = v19[2];
  }
  v22 = a3[16];
  v23 = a3[17];
  v24 = *(void **)((char *)a2 + v22);
  *(_QWORD *)(v21 + v22) = v24;
  *(_QWORD *)(v21 + v23) = *(uint64_t *)((char *)a2 + v23);
  v25 = a3[18];
  v137 = v21;
  v26 = (_QWORD *)(v21 + v25);
  v27 = (uint64_t)a2 + v25;
  v28 = *(uint64_t *)((char *)a2 + v25 + 8);
  *v26 = *(uint64_t *)((char *)a2 + v25);
  v26[1] = v28;
  v29 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v30 = v29[5];
  v31 = (char *)v26 + v30;
  v32 = v27 + v30;
  v33 = type metadata accessor for Location(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 16);
  v35 = v24;
  swift_bridgeObjectRetain();
  v36 = swift_bridgeObjectRetain();
  v34(v31, v32, v33, v36);
  v37 = v29[6];
  v38 = (_QWORD *)((char *)v26 + v37);
  v39 = (_QWORD *)(v27 + v37);
  v40 = (int *)type metadata accessor for WeatherData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v39, 1, (uint64_t)v40))
  {
    __dsta = v26;
    v42 = v39[1];
    *v38 = *v39;
    v38[1] = v42;
    v43 = v40[5];
    v44 = (char *)v38 + v43;
    v45 = (char *)v39 + v43;
    v46 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v46))
    {
      v47 = sub_1000BA294(&qword_100BC3340);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v44, 0, 1, v46);
    }
    v16 = v137;
    v48 = v40[6];
    v49 = (char *)v38 + v48;
    v50 = (char *)v39 + v48;
    v51 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    v52 = v40[7];
    v53 = (char *)v38 + v52;
    v54 = (char *)v39 + v52;
    v55 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v54, 1, v55))
    {
      v56 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v57 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v53, v54, v57);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v53, 0, 1, v55);
    }
    v58 = v40[8];
    v59 = (_QWORD *)((char *)v38 + v58);
    v60 = (_QWORD *)((char *)v39 + v58);
    v61 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v60);
    if (EnumCaseMultiPayload == 1)
    {
      v67 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v59, v60, v67);
      v64 = v59;
      v65 = v61;
      v66 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        goto LABEL_23;
      }
      v63 = v60[1];
      *v59 = *v60;
      v59[1] = v63;
      swift_bridgeObjectRetain();
      v64 = v59;
      v65 = v61;
      v66 = 0;
    }
    swift_storeEnumTagMultiPayload(v64, v65, v66);
LABEL_23:
    v68 = v40[9];
    v69 = (char *)v38 + v68;
    v70 = (char *)v39 + v68;
    v71 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v71))
    {
      v72 = sub_1000BA294(&qword_100BC3350);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      v26 = __dsta;
    }
    else
    {
      v73 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v70, 1, v73))
      {
        v74 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v69, v70, v73);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v73);
      }
      v75 = *(int *)(v71 + 20);
      v76 = &v69[v75];
      v77 = &v70[v75];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v77, 1, v73))
      {
        v78 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v76, v77, v73);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v76, 0, 1, v73);
      }
      v26 = __dsta;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v69, 0, 1, v71);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
    goto LABEL_33;
  }
  v41 = sub_1000BA294(&qword_100BC3460);
  memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  v16 = v137;
LABEL_33:
  v79 = v29[7];
  v80 = (_QWORD *)((char *)v26 + v79);
  v81 = (_QWORD *)(v27 + v79);
  v82 = v81[1];
  *v80 = *v81;
  v80[1] = v82;
  v83 = v29[8];
  v84 = (char *)v26 + v83;
  v85 = v27 + v83;
  v86 = type metadata accessor for WeatherMapOverlayKind(0);
  v87 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v86 - 8) + 16);
  v88 = swift_bridgeObjectRetain();
  v87(v84, v85, v86, v88);
  *((_BYTE *)v26 + v29[9]) = *(_BYTE *)(v27 + v29[9]);
  v89 = a2;
  v90 = a3[19];
  v91 = (_QWORD *)(v16 + v90);
  v92 = (uint64_t *)((char *)a2 + v90);
  v93 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v92, 1, v93))
  {
    v94 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
  }
  else
  {
    v95 = v92[1];
    if (v95)
    {
      *v91 = *v92;
      v91[1] = v95;
      v96 = v92[3];
      v91[2] = v92[2];
      v91[3] = v96;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v92 + 1);
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v97;
    }
    v98 = *(int *)(v93 + 20);
    v99 = (_QWORD *)((char *)v91 + v98);
    v100 = (_QWORD *)((char *)v92 + v98);
    v101 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v100) == 1)
    {
      v133 = v101;
      v102 = v100[1];
      *v99 = *v100;
      v99[1] = v102;
      __dstb = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v103 = __dstb[5];
      v104 = (char *)v99 + v103;
      v105 = (char *)v100 + v103;
      v106 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v106))
      {
        v107 = sub_1000BA294(&qword_100BD4280);
        memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v104, 0, 1, v106);
      }
      v108 = __dstb[6];
      v109 = (_QWORD *)((char *)v99 + v108);
      v110 = (_QWORD *)((char *)v100 + v108);
      v111 = v110[1];
      *v109 = *v110;
      v109[1] = v111;
      v112 = __dstb[7];
      v113 = (char *)v99 + v112;
      v114 = (char *)v100 + v112;
      v115 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v106 - 8) + 16);
      v116 = swift_bridgeObjectRetain();
      v115(v113, v114, v106, v116);
      v117 = __dstb[8];
      v118 = (char *)v99 + v117;
      v119 = (char *)v100 + v117;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v100 + v117, 1, v106))
      {
        v120 = sub_1000BA294(&qword_100BD4280);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v115)(v118, v119, v106);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v118, 0, 1, v106);
      }
      v16 = v137;
      v89 = a2;
      *((_BYTE *)v99 + __dstb[9]) = *((_BYTE *)v100 + __dstb[9]);
      swift_storeEnumTagMultiPayload(v99, v133, 1);
    }
    else
    {
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    v121 = *(int *)(v93 + 24);
    v122 = (char *)v91 + v121;
    v123 = (char *)v92 + v121;
    v124 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v123, 1, v124))
    {
      v125 = sub_1000BA294(&qword_100BD3100);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    }
    else
    {
      v126 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v122, v123, v126);
      v127 = sub_1000BA294(&qword_100BC5FE8);
      v122[*(int *)(v127 + 48)] = v123[*(int *)(v127 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v122, 0, 1, v124);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v91, 0, 1, v93);
  }
  v128 = a3[21];
  *(_BYTE *)(v16 + a3[20]) = *((_BYTE *)v89 + a3[20]);
  v129 = v16 + v128;
  v130 = (uint64_t)v89 + v128;
  v131 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
  return v16;
}

uint64_t sub_10058B95C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  void (*v35)(uint64_t, uint64_t, __n128);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[14];
  v5 = type metadata accessor for AirPollutant(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(a1 + a2[15] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  v6 = a1 + a2[18];
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v8 = v6 + v7[5];
  v9 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v6 + v7[6];
  v11 = (int *)type metadata accessor for WeatherData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, (uint64_t)v11))
  {
    swift_bridgeObjectRelease();
    v12 = v10 + v11[5];
    v13 = type metadata accessor for Locale(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    v14 = v10 + v11[6];
    v15 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v10 + v11[7];
    v17 = sub_1000BA294(&qword_100BC3348);
    if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
    {
      v18 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
    }
    v19 = v10 + v11[8];
    type metadata accessor for WeatherData.WeatherStatisticsState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19);
    if (EnumCaseMultiPayload == 1)
    {
      v21 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
    }
    else if (!EnumCaseMultiPayload)
    {
      swift_bridgeObjectRelease();
    }
    v22 = v10 + v11[9];
    v23 = type metadata accessor for WeatherDataOverrides(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v23))
    {
      v24 = type metadata accessor for Date(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
      v25 = v22 + *(int *)(v23 + 20);
      if (!_s7Weather24LocationCompositionStateOwet_0(v25, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v25, v24);
    }
  }
  swift_bridgeObjectRelease();
  v26 = v6 + v7[8];
  v27 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = a1 + a2[19];
  v29 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v28, 1, v29))
  {
    if (*(_QWORD *)(v28 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v30 = v28 + *(int *)(v29 + 20);
    type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v30) == 1)
    {
      swift_bridgeObjectRelease();
      v31 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v32 = v30 + v31[5];
      v33 = type metadata accessor for URL(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      v34 = swift_bridgeObjectRelease();
      v35 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 8);
      v35(v30 + v31[7], v33, v34);
      v36 = v30 + v31[8];
      if (!_s7Weather24LocationCompositionStateOwet_0(v36, 1, v33))
        ((void (*)(uint64_t, uint64_t))v35)(v36, v33);
    }
    v37 = v28 + *(int *)(v29 + 24);
    v38 = type metadata accessor for DetailComponentAction(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
    {
      v39 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v37, v39);
    }
  }
  v40 = a1 + a2[21];
  v41 = type metadata accessor for LocationDetailEntity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
}

uint64_t sub_10058BDC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, __n128);
  id v32;
  __n128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int EnumCaseMultiPayload;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t, __n128);
  __n128 v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  __n128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  void *__dst;
  _QWORD *__dsta;
  int *__dstb;
  uint64_t v136;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  v10 = a3[14];
  __dst = (void *)(a1 + v10);
  v11 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v12 = type metadata accessor for AirPollutant(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294(&qword_100BDACB0);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(__dst, v11, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v12);
  }
  v14 = a3[15];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  v18 = a1;
  if (v17)
  {
    *v15 = *v16;
    v15[1] = v17;
    v15[2] = v16[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v15[2] = v16[2];
  }
  v19 = a3[16];
  v20 = a3[17];
  v21 = *(void **)(a2 + v19);
  *(_QWORD *)(v18 + v19) = v21;
  *(_QWORD *)(v18 + v20) = *(_QWORD *)(a2 + v20);
  v22 = a3[18];
  v136 = v18;
  v23 = (_QWORD *)(v18 + v22);
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a2 + v22 + 8);
  *v23 = *(_QWORD *)(a2 + v22);
  v23[1] = v25;
  v26 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v27 = v26[5];
  v28 = (char *)v23 + v27;
  v29 = v24 + v27;
  v30 = type metadata accessor for Location(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
  v32 = v21;
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRetain();
  v31(v28, v29, v30, v33);
  v34 = v26[6];
  v35 = (_QWORD *)((char *)v23 + v34);
  v36 = (_QWORD *)(v24 + v34);
  v37 = (int *)type metadata accessor for WeatherData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v36, 1, (uint64_t)v37))
  {
    v38 = sub_1000BA294(&qword_100BC3460);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    v39 = a3;
    v40 = v136;
    goto LABEL_31;
  }
  __dsta = v23;
  v41 = v36[1];
  *v35 = *v36;
  v35[1] = v41;
  v42 = v37[5];
  v43 = (char *)v35 + v42;
  v44 = (char *)v36 + v42;
  v45 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = sub_1000BA294(&qword_100BC3340);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
  }
  v40 = v136;
  v47 = v37[6];
  v48 = (char *)v35 + v47;
  v49 = (char *)v36 + v47;
  v50 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  v51 = v37[7];
  v52 = (char *)v35 + v51;
  v53 = (char *)v36 + v51;
  v54 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
  {
    v55 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v56 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v52, v53, v56);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
  }
  v57 = v37[8];
  v58 = (_QWORD *)((char *)v35 + v57);
  v59 = (_QWORD *)((char *)v36 + v57);
  v60 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v59);
  if (EnumCaseMultiPayload == 1)
  {
    v66 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v58, v59, v66);
    v63 = v58;
    v64 = v60;
    v65 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      goto LABEL_21;
    }
    v62 = v59[1];
    *v58 = *v59;
    v58[1] = v62;
    swift_bridgeObjectRetain();
    v63 = v58;
    v64 = v60;
    v65 = 0;
  }
  swift_storeEnumTagMultiPayload(v63, v64, v65);
LABEL_21:
  v39 = a3;
  v67 = v37[9];
  v68 = (char *)v35 + v67;
  v69 = (char *)v36 + v67;
  v70 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
  {
    v71 = sub_1000BA294(&qword_100BC3350);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    v72 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v72))
    {
      v73 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v68, v69, v72);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v72);
    }
    v74 = *(int *)(v70 + 20);
    v75 = &v68[v74];
    v76 = &v69[v74];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v76, 1, v72))
    {
      v77 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v75, v76, v72);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v75, 0, 1, v72);
    }
    v39 = a3;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
  }
  v23 = __dsta;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v35, 0, 1, (uint64_t)v37);
LABEL_31:
  v78 = v26[7];
  v79 = (_QWORD *)((char *)v23 + v78);
  v80 = (_QWORD *)(v24 + v78);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = v26[8];
  v83 = (char *)v23 + v82;
  v84 = v24 + v82;
  v85 = type metadata accessor for WeatherMapOverlayKind(0);
  v86 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v85 - 8) + 16);
  v87 = swift_bridgeObjectRetain();
  v86(v83, v84, v85, v87);
  *((_BYTE *)v23 + v26[9]) = *(_BYTE *)(v24 + v26[9]);
  v88 = v39[19];
  v89 = (_QWORD *)(v40 + v88);
  v90 = a2;
  v91 = (_QWORD *)(a2 + v88);
  v92 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v91, 1, v92))
  {
    v93 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v89, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    v94 = v91[1];
    if (v94)
    {
      *v89 = *v91;
      v89[1] = v94;
      v95 = v91[3];
      v89[2] = v91[2];
      v89[3] = v95;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v96 = *((_OWORD *)v91 + 1);
      *(_OWORD *)v89 = *(_OWORD *)v91;
      *((_OWORD *)v89 + 1) = v96;
    }
    v97 = *(int *)(v92 + 20);
    v98 = (_QWORD *)((char *)v89 + v97);
    v99 = (_QWORD *)((char *)v91 + v97);
    v100 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v99) == 1)
    {
      v132 = v100;
      v101 = v99[1];
      *v98 = *v99;
      v98[1] = v101;
      __dstb = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
      v102 = __dstb[5];
      v103 = (char *)v98 + v102;
      v104 = (char *)v99 + v102;
      v105 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v104, 1, v105))
      {
        v106 = sub_1000BA294(&qword_100BD4280);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v103, v104, v105);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v103, 0, 1, v105);
      }
      v107 = __dstb[6];
      v108 = (_QWORD *)((char *)v98 + v107);
      v109 = (_QWORD *)((char *)v99 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = __dstb[7];
      v112 = (char *)v98 + v111;
      v113 = (char *)v99 + v111;
      v114 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v105 - 8) + 16);
      v115 = swift_bridgeObjectRetain();
      v114(v112, v113, v105, v115);
      v116 = __dstb[8];
      v117 = (char *)v98 + v116;
      v118 = (char *)v99 + v116;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v99 + v116, 1, v105))
      {
        v119 = sub_1000BA294(&qword_100BD4280);
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v114)(v117, v118, v105);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v117, 0, 1, v105);
      }
      v90 = a2;
      v39 = a3;
      v40 = v136;
      *((_BYTE *)v98 + __dstb[9]) = *((_BYTE *)v99 + __dstb[9]);
      swift_storeEnumTagMultiPayload(v98, v132, 1);
    }
    else
    {
      memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    v120 = *(int *)(v92 + 24);
    v121 = (char *)v89 + v120;
    v122 = (char *)v91 + v120;
    v123 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v122, 1, v123))
    {
      v124 = sub_1000BA294(&qword_100BD3100);
      memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    }
    else
    {
      v125 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v121, v122, v125);
      v126 = sub_1000BA294(&qword_100BC5FE8);
      v121[*(int *)(v126 + 48)] = v122[*(int *)(v126 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v121, 0, 1, v123);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v89, 0, 1, v92);
  }
  v127 = v39[21];
  *(_BYTE *)(v40 + v39[20]) = *(_BYTE *)(v90 + v39[20]);
  v128 = v40 + v127;
  v129 = v90 + v127;
  v130 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
  return v40;
}

uint64_t sub_10058C6E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  int *v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  int EnumCaseMultiPayload;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  int v121;
  size_t v122;
  void *v123;
  const void *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  void (*v142)(char *, char *, uint64_t, __n128);
  __n128 v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  __int128 v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  __n128 v183;
  void *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *__dst;
  char *__dsta;
  char *__dstb;
  _BYTE *__dstc;
  char *__dstd;
  char *__dstf;
  void (*__dste)(char *, char *, uint64_t);
  int *v222;
  int *v223;
  int *v224;
  int *v225;
  int *v226;
  int *v227;
  int *v228;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[14];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for AirPollutant(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9);
  v11 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[15];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14 + 8);
  v18 = *(_QWORD *)(a2 + v14 + 8);
  if (v17)
  {
    if (v18)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15[2] = v16[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100366A60((uint64_t)v15);
      v19 = v16[2];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      v15[2] = v19;
    }
  }
  else if (v18)
  {
    *v15 = *v16;
    v15[1] = v16[1];
    v15[2] = v16[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_OWORD *)v16;
    v15[2] = v16[2];
    *(_OWORD *)v15 = v20;
  }
  v21 = a3[16];
  v22 = *(void **)(a1 + v21);
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  v24 = v23;

  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[18];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  *v26 = *(_QWORD *)(a2 + v25);
  v26[1] = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v29 = v28[5];
  v30 = (char *)v26 + v29;
  v31 = &v27[v29];
  v32 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  v33 = v28[6];
  v34 = (_QWORD *)((char *)v26 + v33);
  v35 = &v27[v33];
  v36 = (int *)type metadata accessor for WeatherData(0);
  LODWORD(v30) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, (uint64_t)v36);
  v37 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, (uint64_t)v36);
  if ((_DWORD)v30)
  {
    if (!v37)
    {
      __dst = v27;
      v222 = v28;
      v225 = a3;
      *v34 = *(_QWORD *)v35;
      v34[1] = *((_QWORD *)v35 + 1);
      v38 = v36[5];
      v39 = (char *)v34 + v38;
      v40 = &v35[v38];
      v41 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v41))
      {
        v42 = sub_1000BA294(&qword_100BC3340);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v41);
      }
      v50 = v36[6];
      v51 = (char *)v34 + v50;
      v52 = &v35[v50];
      v53 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v54 = v36[7];
      v55 = (char *)v34 + v54;
      v56 = &v35[v54];
      v57 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
      {
        v58 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        v59 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v55, v56, v59);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
      }
      v60 = v36[8];
      v61 = (_QWORD *)((char *)v34 + v60);
      v62 = &v35[v60];
      v63 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62);
      if (EnumCaseMultiPayload == 1)
      {
        v68 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v61, v62, v68);
        v65 = v61;
        v66 = v63;
        v67 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          goto LABEL_35;
        }
        *v61 = *(_QWORD *)v62;
        v61[1] = *((_QWORD *)v62 + 1);
        swift_bridgeObjectRetain();
        v65 = v61;
        v66 = v63;
        v67 = 0;
      }
      swift_storeEnumTagMultiPayload(v65, v66, v67);
LABEL_35:
      v69 = v36[9];
      v70 = (char *)v34 + v69;
      v71 = &v35[v69];
      v72 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BC3350);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v74 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v74))
        {
          v75 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v70, v71, v74);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v74);
        }
        v98 = *(int *)(v72 + 20);
        v99 = &v70[v98];
        v100 = &v71[v98];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v100, 1, v74))
        {
          v101 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v99, v100, v74);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v99, 0, 1, v74);
        }
        v27 = __dst;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      a3 = v225;
      goto LABEL_58;
    }
LABEL_21:
    v43 = sub_1000BA294(&qword_100BC3460);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_70;
  }
  if (v37)
  {
    sub_1000215BC((uint64_t)v34, type metadata accessor for WeatherData);
    goto LABEL_21;
  }
  __dsta = v27;
  v222 = v28;
  v226 = a3;
  *v34 = *(_QWORD *)v35;
  v34[1] = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = v36[5];
  v45 = (char *)v34 + v44;
  v46 = &v35[v44];
  v47 = type metadata accessor for Locale(0);
  v48 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v45, 1, v47);
  v49 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v76 = *(_QWORD *)(v47 - 8);
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v45, v47);
LABEL_41:
    v77 = sub_1000BA294(&qword_100BC3340);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v76 + 24))(v45, v46, v47);
LABEL_42:
  v78 = v36[6];
  v79 = (char *)v34 + v78;
  v80 = &v35[v78];
  v81 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  v82 = v36[7];
  v83 = (char *)v34 + v82;
  v84 = &v35[v82];
  v85 = sub_1000BA294(&qword_100BC3348);
  v86 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v83, 1, v85);
  v87 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85);
  if (v86)
  {
    if (!v87)
    {
      v88 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v83, v84, v88);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v87)
  {
    sub_100021A14((uint64_t)v83, &qword_100BC3348);
LABEL_47:
    v89 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_48;
  }
  v163 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 24))(v83, v84, v163);
LABEL_48:
  v28 = v222;
  if (a1 == a2)
    goto LABEL_63;
  v90 = v36[8];
  v91 = (_QWORD *)((char *)v34 + v90);
  v92 = &v35[v90];
  sub_1000215BC((uint64_t)v34 + v90, type metadata accessor for WeatherData.WeatherStatisticsState);
  v93 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  v94 = swift_getEnumCaseMultiPayload(v92);
  if (v94 == 1)
  {
    v102 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v91, v92, v102);
    v95 = v91;
    v96 = v93;
    v97 = 1;
  }
  else
  {
    if (v94)
    {
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      goto LABEL_62;
    }
    *v91 = *(_QWORD *)v92;
    v91[1] = *((_QWORD *)v92 + 1);
    swift_bridgeObjectRetain();
    v95 = v91;
    v96 = v93;
    v97 = 0;
  }
  swift_storeEnumTagMultiPayload(v95, v96, v97);
LABEL_62:
  v28 = v222;
LABEL_63:
  v103 = v36[9];
  v34 = (_QWORD *)((char *)v34 + v103);
  v104 = &v35[v103];
  v36 = (int *)type metadata accessor for WeatherDataOverrides(0);
  v105 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, (uint64_t)v36);
  v106 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v104, 1, (uint64_t)v36);
  if (v105)
  {
    if (!v106)
    {
      v107 = type metadata accessor for Date(0);
      a3 = v226;
      v27 = __dsta;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v104, 1, v107))
      {
        v108 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v34, v104, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v34, v104, v107);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v107);
      }
      v199 = v36[5];
      v200 = (char *)v34 + v199;
      v201 = &v104[v199];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v201, 1, v107))
      {
        v202 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v200, v201, v107);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v200, 0, 1, v107);
      }
LABEL_58:
      v28 = v222;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, (uint64_t)v36);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (v106)
  {
    sub_1000215BC((uint64_t)v34, type metadata accessor for WeatherDataOverrides);
LABEL_69:
    v109 = sub_1000BA294(&qword_100BC3350);
    memcpy(v34, v104, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    a3 = v226;
    v27 = __dsta;
    goto LABEL_70;
  }
  v164 = type metadata accessor for Date(0);
  v165 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v164);
  v166 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v104, 1, v164);
  if (v165)
  {
    a3 = v226;
    v27 = __dsta;
    if (!v166)
    {
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v34, v104, v164);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v164);
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  v203 = *(_QWORD *)(v164 - 8);
  a3 = v226;
  v27 = __dsta;
  if (v166)
  {
    (*(void (**)(_QWORD *, uint64_t))(v203 + 8))(v34, v164);
LABEL_129:
    v204 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v34, v104, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
    goto LABEL_130;
  }
  (*(void (**)(_QWORD *, char *, uint64_t))(v203 + 24))(v34, v104, v164);
LABEL_130:
  v205 = v36[5];
  v206 = (char *)v34 + v205;
  v207 = &v104[v205];
  v208 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v206, 1, v164);
  v209 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v207, 1, v164);
  if (!v208)
  {
    v210 = *(_QWORD *)(v164 - 8);
    if (!v209)
    {
      (*(void (**)(char *, char *, uint64_t))(v210 + 24))(v206, v207, v164);
      goto LABEL_136;
    }
    (*(void (**)(char *, uint64_t))(v210 + 8))(v206, v164);
    goto LABEL_135;
  }
  if (v209)
  {
LABEL_135:
    v211 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
    goto LABEL_136;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v206, v207, v164);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v206, 0, 1, v164);
LABEL_136:
  v28 = v222;
LABEL_70:
  v110 = v28[7];
  v111 = (_QWORD *)((char *)v26 + v110);
  v112 = &v27[v110];
  *v111 = *(_QWORD *)v112;
  v111[1] = *((_QWORD *)v112 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v113 = v28[8];
  v114 = (char *)v26 + v113;
  v115 = &v27[v113];
  v116 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 24))(v114, v115, v116);
  *((_BYTE *)v26 + v28[9]) = v27[v28[9]];
  v117 = a3[19];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (_QWORD *)(a2 + v117);
  v120 = type metadata accessor for DetailComponentContainerViewModel(0);
  LODWORD(v114) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v118, 1, v120);
  v121 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v119, 1, v120);
  if ((_DWORD)v114)
  {
    if (!v121)
    {
      if (v119[1])
      {
        *v118 = *v119;
        v118[1] = v119[1];
        v118[2] = v119[2];
        v118[3] = v119[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v126 = *((_OWORD *)v119 + 1);
        *(_OWORD *)v118 = *(_OWORD *)v119;
        *((_OWORD *)v118 + 1) = v126;
      }
      v127 = *(int *)(v120 + 20);
      v128 = (_QWORD *)((char *)v118 + v127);
      v129 = (_QWORD *)((char *)v119 + v127);
      v130 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v129) == 1)
      {
        v213 = v130;
        v227 = a3;
        *v128 = *v129;
        v128[1] = v129[1];
        v131 = type metadata accessor for NewsArticleComponentContentViewModel(0);
        v132 = *(int *)(v131 + 20);
        __dstb = (char *)v128 + v132;
        v223 = (int *)v131;
        v133 = (char *)v129 + v132;
        v134 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain();
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v133, 1, v134))
        {
          v135 = sub_1000BA294(&qword_100BD4280);
          memcpy(__dstb, v133, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(__dstb, v133, v134);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dstb, 0, 1, v134);
        }
        v136 = v223[6];
        v137 = (_QWORD *)((char *)v128 + v136);
        v138 = (_QWORD *)((char *)v129 + v136);
        *v137 = *v138;
        v137[1] = v138[1];
        v139 = v223[7];
        v140 = (char *)v128 + v139;
        v141 = (char *)v129 + v139;
        __dstc = v128;
        v142 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v134 - 8) + 16);
        v143 = swift_bridgeObjectRetain();
        v142(v140, v141, v134, v143);
        v144 = v223[8];
        v145 = &__dstc[v144];
        v146 = (char *)v129 + v144;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v129 + v144, 1, v134))
        {
          v147 = sub_1000BA294(&qword_100BD4280);
          memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v142)(v145, v146, v134);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v145, 0, 1, v134);
        }
        a3 = v227;
        __dstc[v223[9]] = *((_BYTE *)v129 + v223[9]);
        swift_storeEnumTagMultiPayload(__dstc, v213, 1);
      }
      else
      {
        memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
      }
      v148 = *(int *)(v120 + 24);
      v149 = (char *)v118 + v148;
      v150 = (char *)v119 + v148;
      v151 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v150, 1, v151))
      {
        v152 = sub_1000BA294(&qword_100BD3100);
        memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        v153 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v149, v150, v153);
        v154 = sub_1000BA294(&qword_100BC5FE8);
        v149[*(int *)(v154 + 48)] = v150[*(int *)(v154 + 48)];
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v149, 0, 1, v151);
      }
      v155 = (uint64_t)v118;
      v156 = v120;
      goto LABEL_97;
    }
    goto LABEL_76;
  }
  if (v121)
  {
    sub_1000215BC((uint64_t)v118, type metadata accessor for DetailComponentContainerViewModel);
LABEL_76:
    v122 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
    v123 = v118;
    v124 = v119;
    goto LABEL_77;
  }
  v125 = v119[1];
  if (v118[1])
  {
    if (v125)
    {
      *v118 = *v119;
      v118[1] = v119[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v118[2] = v119[2];
      v118[3] = v119[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10035C44C((uint64_t)v118);
      v162 = *((_OWORD *)v119 + 1);
      *(_OWORD *)v118 = *(_OWORD *)v119;
      *((_OWORD *)v118 + 1) = v162;
    }
  }
  else if (v125)
  {
    *v118 = *v119;
    v118[1] = v119[1];
    v118[2] = v119[2];
    v118[3] = v119[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v167 = *((_OWORD *)v119 + 1);
    *(_OWORD *)v118 = *(_OWORD *)v119;
    *((_OWORD *)v118 + 1) = v167;
  }
  if (a1 != a2)
  {
    v168 = *(int *)(v120 + 20);
    v169 = (_QWORD *)((char *)v118 + v168);
    v170 = (_QWORD *)((char *)v119 + v168);
    sub_1000215BC((uint64_t)v118 + v168, type metadata accessor for NewsArticleComponentViewModel);
    v171 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v170) == 1)
    {
      v214 = v171;
      v228 = a3;
      *v169 = *v170;
      v169[1] = v170[1];
      v172 = type metadata accessor for NewsArticleComponentContentViewModel(0);
      v173 = *(int *)(v172 + 20);
      __dstd = (char *)v169 + v173;
      v224 = (int *)v172;
      v174 = (char *)v170 + v173;
      v175 = type metadata accessor for URL(0);
      swift_bridgeObjectRetain();
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v174, 1, v175))
      {
        v176 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dstd, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(__dstd, v174, v175);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dstd, 0, 1, v175);
      }
      v177 = v175;
      v178 = v224[6];
      v179 = (_QWORD *)((char *)v169 + v178);
      v180 = (_QWORD *)((char *)v170 + v178);
      *v179 = *v180;
      v179[1] = v180[1];
      v181 = v224[7];
      __dstf = (char *)v169 + v181;
      v212 = (char *)v170 + v181;
      v182 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 16);
      v183 = swift_bridgeObjectRetain();
      v184 = __dstf;
      __dste = v182;
      ((void (*)(void *, char *, uint64_t, __n128))v182)(v184, v212, v175, v183);
      v185 = v224[8];
      v186 = (char *)v169 + v185;
      v187 = (char *)v170 + v185;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v170 + v185, 1, v177))
      {
        v188 = sub_1000BA294(&qword_100BD4280);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
      }
      else
      {
        __dste(v186, v187, v177);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v186, 0, 1, v177);
      }
      a3 = v228;
      *((_BYTE *)v169 + v224[9]) = *((_BYTE *)v170 + v224[9]);
      swift_storeEnumTagMultiPayload(v169, v214, 1);
    }
    else
    {
      memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    }
  }
  v189 = *(int *)(v120 + 24);
  v190 = (uint64_t)v118 + v189;
  v191 = (uint64_t)v119 + v189;
  v192 = type metadata accessor for DetailComponentAction(0);
  v193 = _s7Weather24LocationCompositionStateOwet_0(v190, 1, v192);
  v194 = _s7Weather24LocationCompositionStateOwet_0(v191, 1, v192);
  if (v193)
  {
    if (!v194)
    {
      v195 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v190, v191, v195);
      v196 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v190 + *(int *)(v196 + 48)) = *(_BYTE *)(v191 + *(int *)(v196 + 48));
      v155 = v190;
      v156 = v192;
LABEL_97:
      _s7Weather24LocationCompositionStateOwst_0(v155, 0, 1, v156);
      goto LABEL_98;
    }
  }
  else
  {
    if (!v194)
    {
      v197 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v190, v191, v197);
      v198 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v190 + *(int *)(v198 + 48)) = *(_BYTE *)(v191 + *(int *)(v198 + 48));
      goto LABEL_98;
    }
    sub_1000215BC(v190, type metadata accessor for DetailComponentAction);
  }
  v122 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
  v123 = (void *)v190;
  v124 = (const void *)v191;
LABEL_77:
  memcpy(v123, v124, v122);
LABEL_98:
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v157 = a3[21];
  v158 = a1 + v157;
  v159 = a2 + v157;
  v160 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 24))(v158, v159, v160);
  return a1;
}

uint64_t sub_10058DB14(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  char *__dst;
  char *__dsta;
  void (*__dstb)(char *, char *, uint64_t);
  int *v101;
  int *v102;
  int *v103;
  int *v104;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = a3[14];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v12 = type metadata accessor for AirPollutant(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v14 = v3[15];
  v15 = v3[16];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = v3[18];
  *(_QWORD *)(a1 + v3[17]) = *(_QWORD *)(a2 + v3[17]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v21 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v22 = v21[5];
  v23 = v19 + v22;
  v24 = v20 + v22;
  v25 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  v26 = v21[6];
  v27 = (_OWORD *)(v19 + v26);
  v28 = (_OWORD *)(v20 + v26);
  v29 = (int *)type metadata accessor for WeatherData(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v28, 1, (uint64_t)v29))
  {
    v30 = sub_1000BA294(&qword_100BC3460);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v101 = v21;
    v103 = v3;
    *v27 = *v28;
    v31 = v29[5];
    v32 = (char *)v27 + v31;
    v33 = (char *)v28 + v31;
    v34 = type metadata accessor for Locale(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v33, 1, v34))
    {
      v35 = sub_1000BA294(&qword_100BC3340);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v32, 0, 1, v34);
    }
    v36 = v29[6];
    v37 = (char *)v27 + v36;
    v38 = (char *)v28 + v36;
    v39 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
    v40 = v29[7];
    v41 = (char *)v27 + v40;
    v42 = (char *)v28 + v40;
    v43 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v41, v42, v45);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v43);
    }
    v46 = v29[8];
    v47 = (char *)v27 + v46;
    v48 = (char *)v28 + v46;
    v49 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v48) == 1)
    {
      v50 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v47, v48, v50);
      swift_storeEnumTagMultiPayload(v47, v49, 1);
    }
    else
    {
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    v51 = v29[9];
    v52 = (char *)v27 + v51;
    v53 = (char *)v28 + v51;
    v54 = type metadata accessor for WeatherDataOverrides(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v54))
    {
      v55 = sub_1000BA294(&qword_100BC3350);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v56 = type metadata accessor for Date(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v56))
      {
        v57 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v52, v53, v56);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v56);
      }
      v58 = *(int *)(v54 + 20);
      __dst = &v52[v58];
      v59 = &v53[v58];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v59, 1, v56))
      {
        v60 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(__dst, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(__dst, v59, v56);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v56);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v54);
    }
    v3 = v103;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, 0, 1, (uint64_t)v29);
    v21 = v101;
  }
  *(_OWORD *)(v19 + v21[7]) = *(_OWORD *)(v20 + v21[7]);
  v61 = v21[8];
  v62 = v19 + v61;
  v63 = v20 + v61;
  v64 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
  *(_BYTE *)(v19 + v21[9]) = *(_BYTE *)(v20 + v21[9]);
  v65 = v3[19];
  v66 = (_OWORD *)(a1 + v65);
  v67 = (_OWORD *)(a2 + v65);
  v68 = type metadata accessor for DetailComponentContainerViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v68))
  {
    v69 = sub_1000BA294(&qword_100BC68A0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = v67[1];
    *v66 = *v67;
    v66[1] = v70;
    v71 = *(int *)(v68 + 20);
    v72 = (char *)v66 + v71;
    v73 = (char *)v67 + v71;
    v74 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v73) == 1)
    {
      v104 = v3;
      *(_OWORD *)v72 = *(_OWORD *)v73;
      v75 = type metadata accessor for NewsArticleComponentContentViewModel(0);
      v76 = *(int *)(v75 + 20);
      __dsta = &v72[v76];
      v102 = (int *)v75;
      v77 = &v73[v76];
      v78 = type metadata accessor for URL(0);
      v97 = v74;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v77, 1, v78))
      {
        v79 = sub_1000BA294(&qword_100BD4280);
        memcpy(__dsta, v77, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
      }
      else
      {
        v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
        v80(__dsta, v77, v78);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dsta, 0, 1, v78);
      }
      *(_OWORD *)&v72[v102[6]] = *(_OWORD *)&v73[v102[6]];
      __dstb = v80;
      v80(&v72[v102[7]], &v73[v102[7]], v78);
      v81 = v102[8];
      v82 = &v72[v81];
      v83 = &v73[v81];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v73[v81], 1, v78))
      {
        v84 = sub_1000BA294(&qword_100BD4280);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        __dstb(v82, v83, v78);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v82, 0, 1, v78);
      }
      v3 = v104;
      v72[v102[9]] = v73[v102[9]];
      swift_storeEnumTagMultiPayload(v72, v97, 1);
    }
    else
    {
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    v85 = *(int *)(v68 + 24);
    v86 = (char *)v66 + v85;
    v87 = (char *)v67 + v85;
    v88 = type metadata accessor for DetailComponentAction(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v87, 1, v88))
    {
      v89 = sub_1000BA294(&qword_100BD3100);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      v90 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v86, v87, v90);
      v91 = sub_1000BA294(&qword_100BC5FE8);
      v86[*(int *)(v91 + 48)] = v87[*(int *)(v91 + 48)];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v86, 0, 1, v88);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v68);
  }
  v92 = v3[21];
  *(_BYTE *)(a1 + v3[20]) = *(_BYTE *)(a2 + v3[20]);
  v93 = a1 + v92;
  v94 = a2 + v92;
  v95 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v93, v94, v95);
  return a1;
}

uint64_t sub_10058E308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  int *v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  __int128 v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);
  size_t v129;
  void *v130;
  const void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  char *__dst;
  void *__dsta;
  void *__dstb;
  int *v198;
  int *v199;
  int *v200;
  int *v201;
  char *v202;
  char *v203;
  char *v204;
  void (*v205)(char *, char *, uint64_t);
  char *v206;
  void (*v207)(char *, char *, uint64_t);
  int *v208;
  int *v209;
  int *v210;
  int *v211;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  swift_bridgeObjectRelease();
  v13 = a3[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for AirPollutant(0);
  v17 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v16);
  v18 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v19 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v14, v16);
LABEL_6:
    v20 = sub_1000BA294(&qword_100BDACB0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_7:
  v21 = a3[15];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  if (*(_QWORD *)(a1 + v21 + 8))
  {
    v24 = v23[1];
    if (v24)
    {
      *v22 = *v23;
      v22[1] = v24;
      swift_bridgeObjectRelease();
      v22[2] = v23[2];
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_100366A60((uint64_t)v22);
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v22[2] = v23[2];
LABEL_12:
  v25 = a3[16];
  v26 = *(void **)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);

  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  swift_bridgeObjectRelease();
  v27 = a3[18];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (char *)(a2 + v27);
  v30 = *(_QWORD *)(a2 + v27 + 8);
  *v28 = *(_QWORD *)(a2 + v27);
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v31 = (int *)type metadata accessor for ConditionDetailMapViewModel(0);
  v32 = v31[5];
  v33 = (char *)v28 + v32;
  v34 = &v29[v32];
  v35 = type metadata accessor for Location(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  v36 = v31[6];
  v37 = (_QWORD *)((char *)v28 + v36);
  v38 = &v29[v36];
  v39 = (int *)type metadata accessor for WeatherData(0);
  LODWORD(v33) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, (uint64_t)v39);
  v40 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, (uint64_t)v39);
  if ((_DWORD)v33)
  {
    if (!v40)
    {
      v202 = v29;
      v208 = v31;
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v41 = v39[5];
      v42 = (char *)v37 + v41;
      v43 = &v38[v41];
      v44 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v43, 1, v44))
      {
        v45 = sub_1000BA294(&qword_100BC3340);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v42, 0, 1, v44);
      }
      v55 = v39[6];
      v56 = (char *)v37 + v55;
      v57 = &v38[v55];
      v58 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
      v59 = v39[7];
      v60 = (char *)v37 + v59;
      v61 = &v38[v59];
      v62 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
      {
        v63 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        v64 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v60, v61, v64);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
      }
      v65 = v39[8];
      v66 = (char *)v37 + v65;
      v67 = &v38[v65];
      v68 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v67) == 1)
      {
        v69 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v66, v67, v69);
        swift_storeEnumTagMultiPayload(v66, v68, 1);
      }
      else
      {
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      v70 = v39[9];
      v71 = (char *)v37 + v70;
      v72 = &v38[v70];
      v73 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v73))
      {
        v74 = sub_1000BA294(&qword_100BC3350);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        v29 = v202;
      }
      else
      {
        v199 = a3;
        v75 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v72, 1, v75))
        {
          v76 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v71, v72, v75);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v75);
        }
        v101 = *(int *)(v73 + 20);
        __dst = &v71[v101];
        v102 = &v72[v101];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v72[v101], 1, v75))
        {
          v103 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(__dst, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(__dst, v102, v75);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v75);
        }
        a3 = v199;
        v29 = v202;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v71, 0, 1, v73);
      }
      v31 = v208;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, (uint64_t)v39);
      goto LABEL_62;
    }
    goto LABEL_18;
  }
  if (v40)
  {
    sub_1000215BC((uint64_t)v37, type metadata accessor for WeatherData);
LABEL_18:
    v46 = &qword_100BC3460;
LABEL_19:
    v47 = sub_1000BA294(v46);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_62;
  }
  v203 = v29;
  v209 = v31;
  v198 = a3;
  v48 = *((_QWORD *)v38 + 1);
  *v37 = *(_QWORD *)v38;
  v37[1] = v48;
  swift_bridgeObjectRelease();
  v49 = v39[5];
  v50 = (char *)v37 + v49;
  v51 = &v38[v49];
  v52 = type metadata accessor for Locale(0);
  v53 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v50, 1, v52);
  v54 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v51, 1, v52);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v50, 0, 1, v52);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v77 = *(_QWORD *)(v52 - 8);
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v77 + 8))(v50, v52);
LABEL_37:
    v78 = sub_1000BA294(&qword_100BC3340);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v77 + 40))(v50, v51, v52);
LABEL_38:
  v79 = v39[6];
  v80 = (char *)v37 + v79;
  v81 = &v38[v79];
  v82 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 40))(v80, v81, v82);
  v83 = v39[7];
  v84 = (char *)v37 + v83;
  v85 = &v38[v83];
  v86 = sub_1000BA294(&qword_100BC3348);
  LODWORD(v80) = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v86);
  v87 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v85, 1, v86);
  if ((_DWORD)v80)
  {
    if (!v87)
    {
      v88 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v84, v85, v88);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v84, 0, 1, v86);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v87)
  {
    sub_100021A14((uint64_t)v84, &qword_100BC3348);
LABEL_43:
    v89 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_44;
  }
  v163 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 40))(v84, v85, v163);
LABEL_44:
  a3 = v198;
  v29 = v203;
  v31 = v209;
  if (a1 != a2)
  {
    v90 = v39[8];
    v91 = (char *)v37 + v90;
    v92 = &v38[v90];
    sub_1000215BC((uint64_t)v37 + v90, type metadata accessor for WeatherData.WeatherStatisticsState);
    v93 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    if (swift_getEnumCaseMultiPayload(v92) == 1)
    {
      v94 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v91, v92, v94);
      swift_storeEnumTagMultiPayload(v91, v93, 1);
    }
    else
    {
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    v29 = v203;
    v31 = v209;
  }
  v95 = v39[9];
  v37 = (_QWORD *)((char *)v37 + v95);
  v38 += v95;
  v96 = type metadata accessor for WeatherDataOverrides(0);
  v97 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v96);
  v98 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v96);
  if (!v97)
  {
    if (v98)
    {
      sub_1000215BC((uint64_t)v37, type metadata accessor for WeatherDataOverrides);
      goto LABEL_55;
    }
    v164 = type metadata accessor for Date(0);
    v165 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v37, 1, v164);
    v166 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v164);
    if (v165)
    {
      if (!v166)
      {
        (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v37, v38, v164);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v164);
        goto LABEL_118;
      }
    }
    else
    {
      v186 = *(_QWORD *)(v164 - 8);
      if (!v166)
      {
        (*(void (**)(_QWORD *, char *, uint64_t))(v186 + 40))(v37, v38, v164);
LABEL_118:
        v188 = *(int *)(v96 + 20);
        v189 = (char *)v37 + v188;
        v190 = &v38[v188];
        v191 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v189, 1, v164);
        v192 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v190, 1, v164);
        if (v191)
        {
          if (!v192)
          {
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v189, v190, v164);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v189, 0, 1, v164);
LABEL_124:
            v31 = v209;
            goto LABEL_62;
          }
        }
        else
        {
          v193 = *(_QWORD *)(v164 - 8);
          if (!v192)
          {
            (*(void (**)(char *, char *, uint64_t))(v193 + 40))(v189, v190, v164);
            goto LABEL_124;
          }
          (*(void (**)(char *, uint64_t))(v193 + 8))(v189, v164);
        }
        v194 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
        goto LABEL_124;
      }
      (*(void (**)(_QWORD *, uint64_t))(v186 + 8))(v37, v164);
    }
    v187 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    goto LABEL_118;
  }
  if (v98)
  {
LABEL_55:
    v46 = &qword_100BC3350;
    goto LABEL_19;
  }
  v99 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v38, 1, v99))
  {
    v100 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v37, v38, v99);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v99);
  }
  v182 = *(int *)(v96 + 20);
  v183 = (char *)v37 + v182;
  v184 = &v38[v182];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v38[v182], 1, v99))
  {
    v185 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v183, v184, v99);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v183, 0, 1, v99);
  }
  v31 = v209;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v37, 0, 1, v96);
  v29 = v203;
LABEL_62:
  v104 = v31[7];
  v105 = (_QWORD *)((char *)v28 + v104);
  v106 = &v29[v104];
  v108 = *(_QWORD *)v106;
  v107 = *((_QWORD *)v106 + 1);
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease();
  v109 = v31[8];
  v110 = (char *)v28 + v109;
  v111 = &v29[v109];
  v112 = type metadata accessor for WeatherMapOverlayKind(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 40))(v110, v111, v112);
  *((_BYTE *)v28 + v31[9]) = v29[v31[9]];
  v113 = a3[19];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = type metadata accessor for DetailComponentContainerViewModel(0);
  LODWORD(v110) = _s7Weather24LocationCompositionStateOwet_0(v114, 1, v116);
  v117 = _s7Weather24LocationCompositionStateOwet_0(v115, 1, v116);
  if ((_DWORD)v110)
  {
    if (!v117)
    {
      v118 = *(_OWORD *)(v115 + 16);
      *(_OWORD *)v114 = *(_OWORD *)v115;
      *(_OWORD *)(v114 + 16) = v118;
      v119 = *(int *)(v116 + 20);
      v120 = (char *)(v114 + v119);
      v121 = (char *)(v115 + v119);
      v122 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v121) == 1)
      {
        __dsta = (void *)v122;
        *(_OWORD *)v120 = *(_OWORD *)v121;
        v123 = type metadata accessor for NewsArticleComponentContentViewModel(0);
        v124 = *(int *)(v123 + 20);
        v204 = &v120[v124];
        v210 = (int *)v123;
        v125 = &v121[v124];
        v126 = type metadata accessor for URL(0);
        v200 = a3;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v125, 1, v126))
        {
          v127 = sub_1000BA294(&qword_100BD4280);
          memcpy(v204, v125, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
          v128 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32);
        }
        else
        {
          v128 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32);
          v128(v204, v125, v126);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v204, 0, 1, v126);
        }
        *(_OWORD *)&v120[v210[6]] = *(_OWORD *)&v121[v210[6]];
        v205 = v128;
        v128(&v120[v210[7]], &v121[v210[7]], v126);
        v134 = v210[8];
        v135 = &v120[v134];
        v136 = &v121[v134];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v121[v134], 1, v126))
        {
          v137 = sub_1000BA294(&qword_100BD4280);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          v205(v135, v136, v126);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v135, 0, 1, v126);
        }
        a3 = v200;
        v120[v210[9]] = v121[v210[9]];
        swift_storeEnumTagMultiPayload(v120, __dsta, 1);
      }
      else
      {
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
      }
      v138 = *(int *)(v116 + 24);
      v139 = (void *)(v114 + v138);
      v140 = (const void *)(v115 + v138);
      v141 = type metadata accessor for DetailComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v140, 1, v141))
      {
        v142 = sub_1000BA294(&qword_100BD3100);
        memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        v143 = type metadata accessor for URL(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v143 - 8) + 32))(v139, v140, v143);
        v144 = sub_1000BA294(&qword_100BC5FE8);
        *((_BYTE *)v139 + *(int *)(v144 + 48)) = *((_BYTE *)v140 + *(int *)(v144 + 48));
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v139, 0, 1, v141);
      }
      v145 = v114;
      v146 = v116;
      goto LABEL_84;
    }
    goto LABEL_69;
  }
  if (v117)
  {
    sub_1000215BC(v114, type metadata accessor for DetailComponentContainerViewModel);
LABEL_69:
    v129 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BC68A0) - 8) + 64);
    v130 = (void *)v114;
    v131 = (const void *)v115;
    goto LABEL_70;
  }
  if (!*(_QWORD *)(v114 + 8))
    goto LABEL_87;
  v132 = *(_QWORD *)(v115 + 8);
  if (!v132)
  {
    sub_10035C44C(v114);
LABEL_87:
    v152 = *(_OWORD *)(v115 + 16);
    *(_OWORD *)v114 = *(_OWORD *)v115;
    *(_OWORD *)(v114 + 16) = v152;
    goto LABEL_88;
  }
  *(_QWORD *)v114 = *(_QWORD *)v115;
  *(_QWORD *)(v114 + 8) = v132;
  swift_bridgeObjectRelease();
  v133 = *(_QWORD *)(v115 + 24);
  *(_QWORD *)(v114 + 16) = *(_QWORD *)(v115 + 16);
  *(_QWORD *)(v114 + 24) = v133;
  swift_bridgeObjectRelease();
LABEL_88:
  if (a1 != a2)
  {
    v153 = *(int *)(v116 + 20);
    v154 = (char *)(v114 + v153);
    v155 = (char *)(v115 + v153);
    sub_1000215BC(v114 + v153, type metadata accessor for NewsArticleComponentViewModel);
    v156 = type metadata accessor for NewsArticleComponentViewModel(0);
    if (swift_getEnumCaseMultiPayload(v155) == 1)
    {
      v201 = a3;
      *(_OWORD *)v154 = *(_OWORD *)v155;
      v157 = type metadata accessor for NewsArticleComponentContentViewModel(0);
      v158 = *(int *)(v157 + 20);
      v206 = &v154[v158];
      v211 = (int *)v157;
      v159 = &v155[v158];
      v160 = type metadata accessor for URL(0);
      __dstb = (void *)v156;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v159, 1, v160))
      {
        v161 = sub_1000BA294(&qword_100BD4280);
        memcpy(v206, v159, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
        v162 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32);
      }
      else
      {
        v167 = v159;
        v162 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32);
        v162(v206, v167, v160);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v206, 0, 1, v160);
      }
      *(_OWORD *)&v154[v211[6]] = *(_OWORD *)&v155[v211[6]];
      v207 = v162;
      v162(&v154[v211[7]], &v155[v211[7]], v160);
      v168 = v211[8];
      v169 = &v154[v168];
      v170 = &v155[v168];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v155[v168], 1, v160))
      {
        v171 = sub_1000BA294(&qword_100BD4280);
        memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
      }
      else
      {
        v207(v169, v170, v160);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v169, 0, 1, v160);
      }
      v154[v211[9]] = v155[v211[9]];
      swift_storeEnumTagMultiPayload(v154, __dstb, 1);
      a3 = v201;
    }
    else
    {
      memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    }
  }
  v172 = *(int *)(v116 + 24);
  v173 = v114 + v172;
  v174 = v115 + v172;
  v175 = type metadata accessor for DetailComponentAction(0);
  v176 = _s7Weather24LocationCompositionStateOwet_0(v173, 1, v175);
  v177 = _s7Weather24LocationCompositionStateOwet_0(v174, 1, v175);
  if (v176)
  {
    if (!v177)
    {
      v178 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v178 - 8) + 32))(v173, v174, v178);
      v179 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v173 + *(int *)(v179 + 48)) = *(_BYTE *)(v174 + *(int *)(v179 + 48));
      v145 = v173;
      v146 = v175;
LABEL_84:
      _s7Weather24LocationCompositionStateOwst_0(v145, 0, 1, v146);
      goto LABEL_85;
    }
  }
  else
  {
    if (!v177)
    {
      v180 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 40))(v173, v174, v180);
      v181 = sub_1000BA294(&qword_100BC5FE8);
      *(_BYTE *)(v173 + *(int *)(v181 + 48)) = *(_BYTE *)(v174 + *(int *)(v181 + 48));
      goto LABEL_85;
    }
    sub_1000215BC(v173, type metadata accessor for DetailComponentAction);
  }
  v129 = *(_QWORD *)(*(_QWORD *)(sub_1000BA294(&qword_100BD3100) - 8) + 64);
  v130 = (void *)v173;
  v131 = (const void *)v174;
LABEL_70:
  memcpy(v130, v131, v129);
LABEL_85:
  v147 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v148 = a1 + v147;
  v149 = a2 + v147;
  v150 = type metadata accessor for LocationDetailEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 40))(v148, v149, v150);
  return a1;
}

uint64_t sub_10058F4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10058F4B8);
}

uint64_t sub_10058F4B8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1000BA294(&qword_100BDACB0);
    sub_100088FF0();
    if (v11)
    {
      v9 = v8;
      v10 = a3[14];
    }
    else
    {
      type metadata accessor for ConditionDetailMapViewModel(0);
      sub_100088FF0();
      if (v11)
      {
        v9 = v12;
        v10 = a3[18];
      }
      else
      {
        sub_1000BA294(&qword_100BC68A0);
        sub_100088FF0();
        if (v13)
        {
          v9 = v14;
          v10 = a3[19];
        }
        else
        {
          v9 = sub_1000C1340();
          v10 = a3[21];
        }
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_10058F584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10058F590);
}

void sub_10058F590(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    sub_1000BA294(&qword_100BDACB0);
    sub_10009D2E8();
    if (v10)
    {
      v8 = v7;
      v9 = a4[14];
    }
    else
    {
      type metadata accessor for ConditionDetailMapViewModel(0);
      sub_10009D2E8();
      if (v10)
      {
        v8 = v11;
        v9 = a4[18];
      }
      else
      {
        sub_1000BA294(&qword_100BC68A0);
        sub_10009D2E8();
        if (v12)
        {
          v8 = v13;
          v9 = a4[19];
        }
        else
        {
          v8 = sub_1000C1340();
          v9 = a4[21];
        }
      }
    }
    sub_1000987C4(a1 + v9, a2, a2, v8);
  }
}

void sub_10058F648(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[18];

  v10[0] = &unk_1009B0430;
  v10[1] = &unk_1009B0430;
  v10[2] = &unk_1009B0430;
  v10[3] = &unk_1009B0430;
  v10[4] = &unk_1009B0448;
  v10[5] = &unk_1009B0460;
  v10[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[7] = &unk_1009B0430;
  v10[8] = &unk_1009B0430;
  v10[9] = &unk_1009B0478;
  sub_1001345CC(319, (unint64_t *)&unk_100BF1C50, (uint64_t (*)(uint64_t))&type metadata accessor for AirPollutant);
  if (v3 <= 0x3F)
  {
    v10[10] = *(_QWORD *)(v2 - 8) + 64;
    v10[11] = &unk_1009B0490;
    v10[12] = &unk_1009B04A8;
    v10[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for ConditionDetailMapViewModel(319);
    if (v5 <= 0x3F)
    {
      v10[14] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001345CC(319, (unint64_t *)&qword_100BC9750, type metadata accessor for DetailComponentContainerViewModel);
      if (v7 <= 0x3F)
      {
        v10[15] = *(_QWORD *)(v6 - 8) + 64;
        v10[16] = &unk_1009B0448;
        v8 = type metadata accessor for LocationDetailEntity(319);
        if (v9 <= 0x3F)
        {
          v10[17] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 18, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10058F784()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v1 = v0[1];
  v6[2] = *v0;
  v6[3] = v1;
  v6[0] = 32;
  v6[1] = 0xE100000000000000;
  v2 = sub_100114EF8();
  v3 = StringProtocol.components<A>(separatedBy:)(v6, &type metadata for String, &type metadata for String, v2, v2);
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 32);
    sub_1000860DC();
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10058F814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v5 = sub_1000D9F98();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  type metadata accessor for AirQualityDetailViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BF1CC8);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100079F58();
  v16 = v2 + *(int *)(v15 + 48);
  sub_100590F30(a1, v2);
  sub_100590F30(a2, v16);
  sub_100088FC8(v2, 1, v5);
  if (!v18)
  {
    sub_100590F30(v2, v13);
    sub_100088FC8(v16, 1, v5);
    if (!v18)
    {
      v19 = sub_10007A04C();
      sub_1000DB648(v19, v20, type metadata accessor for AirQualityDetailViewModel.Model);
      v17 = sub_100590670(v13, v9);
      sub_1000215BC(v9, type metadata accessor for AirQualityDetailViewModel.Model);
      sub_1000215BC(v13, type metadata accessor for AirQualityDetailViewModel.Model);
      sub_1000215BC(v2, type metadata accessor for AirQualityDetailViewModel);
      return v17 & 1;
    }
    sub_1000215BC(v13, type metadata accessor for AirQualityDetailViewModel.Model);
LABEL_9:
    sub_100021A14(v2, &qword_100BF1CC8);
    v17 = 0;
    return v17 & 1;
  }
  sub_100088FC8(v16, 1, v5);
  if (!v18)
    goto LABEL_9;
  sub_1000215BC(v2, type metadata accessor for AirQualityDetailViewModel);
  v17 = 1;
  return v17 & 1;
}

uint64_t sub_10058F9B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 7368564 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7368564, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6174756C6C6F70 && a2 == 0xEE00656C62615474)
  {
    swift_bridgeObjectRelease(0xEE00656C62615474);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6174756C6C6F70, 0xEE00656C62615474, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10058FAB0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6174756C6C6F70;
  else
    return 7368564;
}

uint64_t sub_10058FAEC(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char v23;

  v4 = sub_1000BA294(&qword_100BF1D38);
  v5 = sub_1000DAA7C(v4);
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  v19 = sub_1000BA294(&qword_100BF1D40);
  v9 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_10007A130();
  v10 = sub_1000BA294(&qword_100BF1D48);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100098728();
  v14 = v13 - v12;
  v15 = a1[3];
  v16 = a1[4];
  sub_1000DB418(a1, v15);
  v17 = sub_100591034();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirQualityDetailAnchor.CodingKeys, &type metadata for AirQualityDetailAnchor.CodingKeys, v17, v15, v16);
  if ((a2 & 1) != 0)
  {
    sub_1000C66F8();
    sub_100098B5C((uint64_t)&type metadata for AirQualityDetailAnchor.PollutantTableCodingKeys, (uint64_t)&v23);
    (*(void (**)(uint64_t))(v20 + 8))(v8);
  }
  else
  {
    v22 = 0;
    sub_1005910AC();
    sub_100098B5C((uint64_t)&type metadata for AirQualityDetailAnchor.TopCodingKeys, (uint64_t)&v22);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v19);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
}

void sub_10058FC70(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(a1 & 1);
  Hasher._finalize()();
  sub_100098918();
}

uint64_t sub_10058FCAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v4 = sub_1000BA294(&qword_100BF1D08);
  v5 = sub_1000DAA7C(v4);
  __chkstk_darwin(v5);
  sub_100088FDC();
  v30 = v6;
  v29 = sub_1000BA294(&qword_100BF1D10);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_100079FBC();
  v8 = sub_1000BA294(&qword_100BF1D18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100098694();
  v10 = a1[3];
  v11 = a1[4];
  sub_1000DB418(a1, v10);
  v12 = sub_100591034();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirQualityDetailAnchor.CodingKeys, &type metadata for AirQualityDetailAnchor.CodingKeys, v12, v10, v11);
  if (v32)
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v28 = v9;
  v13 = KeyedDecodingContainer.allKeys.getter(v8);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14
    || (v15 = *(unsigned __int8 *)(v13 + 32),
        sub_10055FF58(1, v14, v13, v13 + 32, 0, (2 * v14) | 1),
        v17 = v16,
        v19 = v18,
        swift_bridgeObjectRelease(),
        v17 != v19 >> 1))
  {
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v23 = v22;
    sub_1000BA294(&qword_100BC6CF8);
    *v23 = &type metadata for AirQualityDetailAnchor;
    v24 = KeyedDecodingContainer.codingPath.getter(v8);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v24, 0xD00000000000002BLL, 0x80000001009F2600, 0);
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v25, v26);
    sub_100099400();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v2, v8);
    return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  }
  if ((v15 & 1) != 0)
  {
    sub_1000C66F8();
    sub_1000B46D8((uint64_t)&type metadata for AirQualityDetailAnchor.PollutantTableCodingKeys, (uint64_t)&v34);
    v20 = v28;
    (*(void (**)(uint64_t))(v31 + 8))(v30);
  }
  else
  {
    v33 = 0;
    sub_1005910AC();
    sub_1000B46D8((uint64_t)&type metadata for AirQualityDetailAnchor.TopCodingKeys, (uint64_t)&v33);
    v20 = v28;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v29);
  }
  sub_100099400();
  (*(void (**)(uint64_t, unint64_t))(v20 + 8))(v2, v19);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v15;
}

void sub_10058FFB4()
{
  char *v0;

  sub_10058FC70(*v0);
}

uint64_t sub_10058FFCC()
{
  char *v0;

  return sub_10058FAB0(*v0);
}

uint64_t sub_10058FFD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10058F9B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10058FFF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100591034();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100590020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100591034();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100590048(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100591070();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100590070(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100591070();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100590098(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005910AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005900C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005910AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005900E8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10058FCAC(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_100590114(_QWORD *a1)
{
  char *v1;

  return sub_10058FAEC(a1, *v1);
}

void sub_10059012C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t *, _QWORD);
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];

  v54 = sub_1000BA294(&qword_100BDAE28);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000986FC();
  v53 = v10;
  __chkstk_darwin(v11);
  v52 = (uint64_t)&v49 - v12;
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100079F58();
  v14 = type metadata accessor for AttributedString(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100098728();
  v18 = v17 - v16;
  sub_1000BA294(&qword_100BDAE20);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v56 = (uint64_t)&v49 - v23;
  type metadata accessor for AttributeContainer(0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_10007A130();
  v25 = sub_1000860DC();
  AttributeContainer.init()(v25);
  v55 = a3;
  AttributedString.init(_:attributes:)(a1, a2, v5);
  v26 = v4[1];
  v57 = *v4;
  v58 = v26;
  v59[0] = 32;
  v59[1] = 0xE100000000000000;
  v27 = sub_100114EF8();
  v28 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v59, &type metadata for String, &type metadata for String, v27, v27);
  if (v28[2])
  {
    v30 = v28[4];
    v29 = v28[5];
    sub_1000860DC();
    v31 = sub_1000986C4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v15 + 16))(v18, v55, v14, v31);
    v51 = v30;
    v57 = v30;
    v58 = v29;
    v32 = type metadata accessor for Locale(0);
    _s7Weather24LocationCompositionStateOwst_0(v3, 1, 1, v32);
    sub_10000F1C8((unint64_t *)&qword_100BDAE30, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString);
    v33 = v56;
    v50 = v34;
    AttributedStringProtocol.range<A>(of:options:locale:)(&v57, 0, v3, v14, &type metadata for String);
    sub_100021A14(v3, &qword_100BC3340);
    sub_1000CCF68();
    sub_1001A7210(v33, (uint64_t)v21, &qword_100BDAE20);
    sub_100088FC8((uint64_t)v21, 1, v54);
    if (v35)
    {
      sub_100075DD0(v56);
      swift_bridgeObjectRelease();
      v48 = (uint64_t)v21;
    }
    else
    {
      v36 = v52;
      sub_1001A7244((uint64_t)v21, v52, &qword_100BDAE28);
      v37 = String.lowercased()();
      swift_bridgeObjectRelease();
      AttributeContainer.init()(v38);
      AttributedString.init(_:attributes:)(v37._countAndFlagsBits, v37._object, v5);
      sub_10003D2DC((unint64_t *)&qword_100BDAE38, &qword_100BDAE28);
      v40 = v39;
      v41 = v54;
      AttributedString.replaceSubrange<A, B>(_:with:)(v36, v18, v54, v14, v39, v50);
      sub_1000CCF68();
      v42 = v53;
      sub_1001A7210(v36, v53, &qword_100BDAE28);
      KeyPath = swift_getKeyPath(&unk_1009B0918);
      __chkstk_darwin(KeyPath);
      *(&v49 - 2) = v44;
      v45 = swift_getKeyPath(&unk_1009B0948);
      LOBYTE(v59[0]) = 1;
      v46 = (void (*)(uint64_t *, _QWORD))AttributedString.subscript.modify(&v57, v42, v41, v40);
      v47 = sub_10015BD40();
      AttributedSubstring.subscript.setter(v59, v45, v47);
      v46(&v57, 0);
      sub_100075DD0(v42);
      sub_100075DD0(v36);
      v48 = v56;
    }
    sub_100021A14(v48, &qword_100BDAE20);
  }
  else
  {
    sub_1000986C4();
  }
}

uint64_t sub_10059053C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = 0;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  *(double *)(a9 + 88) = a10;
  *(_OWORD *)(a9 + 96) = a13;
  *(_OWORD *)(a9 + 112) = a14;
  *(_QWORD *)(a9 + 128) = a15;
  *(_QWORD *)(a9 + 136) = a16;
  v26 = (int *)sub_1000D9F98();
  sub_1001A7244(a17, a9 + v26[14], &qword_100BDACB0);
  v27 = a9 + v26[15];
  *(_OWORD *)v27 = a18;
  *(_QWORD *)(v27 + 16) = a19;
  *(_QWORD *)(a9 + v26[16]) = a20;
  *(_QWORD *)(a9 + v26[17]) = a21;
  sub_1000DB648(a22, a9 + v26[18], type metadata accessor for ConditionDetailMapViewModel);
  sub_1001A7244(a23, a9 + v26[19], &qword_100BC68A0);
  *(_BYTE *)(a9 + v26[20]) = a24 & 1;
  v28 = a9 + v26[21];
  v29 = sub_1000C1340();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a25, v29);
}

uint64_t sub_100590670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  void (*v75)(uint64_t);
  uint64_t *v76;
  uint64_t v77;
  uint64_t v79;
  char v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  int *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t *v108;
  uint64_t *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v117 = type metadata accessor for DetailComponentContainerViewModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v114 = (uint64_t *)v7;
  v116 = sub_1000BA294(&qword_100BCA048);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v118 = v9;
  sub_1000BA294(&qword_100BC68A0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000986FC();
  v115 = v11;
  v13 = __chkstk_darwin(v12);
  v119 = (uint64_t)&v111 - v14;
  __chkstk_darwin(v13);
  v120 = (uint64_t)&v111 - v15;
  v16 = type metadata accessor for AirPollutant(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100098694();
  v18 = sub_1000BA294(&qword_100BF1CD0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100079FBC();
  sub_1000BA294(&qword_100BDACB0);
  sub_1000B42B0();
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v111 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v111 - v27;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a2 + 8);
  v31 = *(_QWORD *)a1 == *(_QWORD *)a2 && v29 == v30;
  if (v31 || (sub_100099264(*(_QWORD *)a1, v29, *(_QWORD *)a2, v30), v32 = sub_10007A150(), (v33 & 1) != 0))
  {
    v34 = *(_QWORD *)(a1 + 16);
    v35 = *(_QWORD *)(a1 + 24);
    v36 = *(_QWORD *)(a2 + 16);
    v37 = *(_QWORD *)(a2 + 24);
    v38 = v34 == v36 && v35 == v37;
    if (v38 || (sub_100099264(v34, v35, v36, v37), v32 = sub_10007A150(), (v39 & 1) != 0))
    {
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(_QWORD *)(a1 + 40);
      v42 = *(_QWORD *)(a2 + 32);
      v43 = *(_QWORD *)(a2 + 40);
      v44 = v40 == v42 && v41 == v43;
      if (v44 || (sub_100099264(v40, v41, v42, v43), v32 = sub_10007A150(), (v45 & 1) != 0))
      {
        v46 = *(_QWORD *)(a1 + 48);
        v47 = *(_QWORD *)(a1 + 56);
        v48 = *(_QWORD *)(a2 + 48);
        v49 = *(_QWORD *)(a2 + 56);
        v50 = v46 == v48 && v47 == v49;
        if (v50 || (sub_100099264(v46, v47, v48, v49), v32 = sub_10007A150(), (v51 & 1) != 0))
        {
          if (*(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
            goto LABEL_57;
          v52 = *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72) && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80);
          if (!v52 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
            goto LABEL_57;
          v53 = *(_QWORD *)(a1 + 96);
          v54 = *(_QWORD *)(a1 + 104);
          v55 = *(_QWORD *)(a2 + 96);
          v56 = *(_QWORD *)(a2 + 104);
          v57 = v53 == v55 && v54 == v56;
          if (v57 || (sub_100099264(v53, v54, v55, v56), v32 = sub_10007A150(), (v58 & 1) != 0))
          {
            v59 = *(_QWORD *)(a1 + 112);
            v60 = *(_QWORD *)(a1 + 120);
            v61 = *(_QWORD *)(a2 + 112);
            v62 = *(_QWORD *)(a2 + 120);
            v63 = v59 == v61 && v60 == v62;
            if (v63 || (sub_100099264(v59, v60, v61, v62), v32 = sub_10007A150(), (v64 & 1) != 0))
            {
              v65 = *(_QWORD *)(a1 + 136);
              v66 = *(_QWORD *)(a2 + 136);
              if (v65)
              {
                if (!v66)
                  goto LABEL_57;
                v67 = *(_QWORD *)(a1 + 128);
                v68 = *(_QWORD *)(a2 + 128);
                if (v67 != v68 || v65 != v66)
                {
                  sub_100099264(v67, v65, v68, v66);
                  v32 = sub_10007A150();
                  if ((v70 & 1) == 0)
                    return v32 & 1;
                }
              }
              else if (v66)
              {
                goto LABEL_57;
              }
              v113 = (int *)sub_1000D9F98();
              sub_1001A7210(a1 + v113[14], (uint64_t)v28, &qword_100BDACB0);
              sub_1001A7210(a2 + v113[14], (uint64_t)v26, &qword_100BDACB0);
              v71 = v2 + *(int *)(v18 + 48);
              sub_1001A7210((uint64_t)v28, v2, &qword_100BDACB0);
              v112 = v71;
              sub_1001A7210((uint64_t)v26, v71, &qword_100BDACB0);
              sub_100088FC8(v2, 1, v16);
              if (v31)
              {
                sub_1000987A0((uint64_t)v26);
                sub_1000987A0((uint64_t)v28);
                sub_100088FC8(v112, 1, v16);
                if (v31)
                {
                  sub_100021A14(v2, &qword_100BDACB0);
LABEL_60:
                  v83 = v113;
                  v84 = v113[15];
                  v85 = (_QWORD *)(a1 + v84);
                  v86 = *(_QWORD *)(a1 + v84 + 8);
                  v87 = (uint64_t *)(a2 + v84);
                  v88 = v87[1];
                  if (v86)
                  {
                    if (!v88)
                      goto LABEL_57;
                    v89 = v85[2];
                    v90 = *v87;
                    v91 = v87[2];
                    if (*v85 != *v87 || v86 != v88)
                    {
                      v93 = sub_10007A04C();
                      if ((sub_100099264(v93, v94, v90, v88) & 1) == 0)
                      {
                        sub_1000BC5A0();
                        sub_1000BC5A0();
                        sub_1000D9114();
                        swift_bridgeObjectRelease(v89);
                        sub_1000986C4();
                        swift_bridgeObjectRelease(v91);
                        swift_bridgeObjectRelease(v88);
                        sub_1000D9748();
                        goto LABEL_57;
                      }
                    }
                    sub_1000BC5A0();
                    sub_1000BC5A0();
                    sub_1000D9114();
                    v95 = sub_100947CA8(v89, v91);
                    swift_bridgeObjectRelease(v89);
                    sub_1000986C4();
                    swift_bridgeObjectRelease(v91);
                    swift_bridgeObjectRelease(v88);
                    sub_1000D9748();
                    if ((v95 & 1) == 0)
                    {
LABEL_57:
                      v32 = 0;
                      return v32 & 1;
                    }
                  }
                  else if (v88)
                  {
                    goto LABEL_57;
                  }
                  v96 = v83[16];
                  v97 = *(void **)(a1 + v96);
                  v98 = *(void **)(a2 + v96);
                  if (v97)
                  {
                    if (!v98)
                      goto LABEL_57;
                    sub_100590F74();
                    v99 = v98;
                    v100 = v97;
                    v101 = static NSObject.== infix(_:_:)(v100, v99);

                    if ((v101 & 1) == 0)
                      goto LABEL_57;
                  }
                  else if (v98)
                  {
                    goto LABEL_57;
                  }
                  if ((sub_1000983F4(*(double **)(a1 + v83[17]), *(double **)(a2 + v83[17])) & 1) == 0
                    || (sub_10071ECF4((_QWORD *)(a1 + v83[18]), (_QWORD *)(a2 + v83[18])) & 1) == 0)
                  {
                    goto LABEL_57;
                  }
                  v102 = v120;
                  sub_1000D18F8(a1 + v83[19], v120);
                  v103 = v119;
                  sub_1000D18F8(a2 + v83[19], v119);
                  v104 = v118;
                  v105 = v118 + *(int *)(v116 + 48);
                  sub_1000D18F8(v102, v118);
                  sub_1000D18F8(v103, v105);
                  v106 = v117;
                  sub_100088FC8(v104, 1, v117);
                  if (v31)
                  {
                    sub_100021A14(v119, &qword_100BC68A0);
                    sub_100021A14(v120, &qword_100BC68A0);
                    sub_100088FC8(v105, 1, v106);
                    if (v31)
                    {
                      sub_100021A14(v104, &qword_100BC68A0);
                      goto LABEL_88;
                    }
                  }
                  else
                  {
                    sub_1001A7210(v104, (uint64_t)v115, &qword_100BC68A0);
                    sub_100088FC8(v105, 1, v106);
                    if (!v107)
                    {
                      v108 = v114;
                      sub_1000DB648(v105, (uint64_t)v114, type metadata accessor for DetailComponentContainerViewModel);
                      v109 = v115;
                      v110 = sub_10035CD60(v115, v108);
                      sub_1000215BC((uint64_t)v108, type metadata accessor for DetailComponentContainerViewModel);
                      sub_1000987A0(v119);
                      sub_1000987A0(v120);
                      sub_1000215BC((uint64_t)v109, type metadata accessor for DetailComponentContainerViewModel);
                      sub_1000987A0(v118);
                      if ((v110 & 1) != 0)
                      {
LABEL_88:
                        if (*(unsigned __int8 *)(a1 + v113[20]) == *(unsigned __int8 *)(a2 + v113[20]))
                        {
                          v32 = static LocationDetailEntity.== infix(_:_:)(a1 + v113[21], a2 + v113[21]);
                          return v32 & 1;
                        }
                        goto LABEL_57;
                      }
                      goto LABEL_57;
                    }
                    sub_100075DD0(v119);
                    sub_100075DD0(v120);
                    sub_1000215BC((uint64_t)v115, type metadata accessor for DetailComponentContainerViewModel);
                    v104 = v118;
                  }
                  v76 = &qword_100BCA048;
                  v77 = v104;
LABEL_56:
                  sub_100021A14(v77, v76);
                  goto LABEL_57;
                }
              }
              else
              {
                sub_1001A7210(v2, (uint64_t)v23, &qword_100BDACB0);
                v72 = v112;
                sub_100088FC8(v112, 1, v16);
                if (!v73)
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v3, v72, v16);
                  sub_10000F1C8(&qword_100BF1CE0, (uint64_t (*)(uint64_t))&type metadata accessor for AirPollutant);
                  v80 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v3, v16, v79);
                  v81 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
                  v81(v3, v16);
                  sub_1000987A0((uint64_t)v26);
                  sub_1000987A0((uint64_t)v28);
                  v82 = sub_10007A04C();
                  ((void (*)(uint64_t))v81)(v82);
                  sub_1000987A0(v2);
                  if ((v80 & 1) == 0)
                    goto LABEL_57;
                  goto LABEL_60;
                }
                sub_100075DD0((uint64_t)v26);
                sub_100075DD0((uint64_t)v28);
                v74 = sub_10007A04C();
                v75(v74);
              }
              v76 = &qword_100BF1CD0;
              v77 = v2;
              goto LABEL_56;
            }
          }
        }
      }
    }
  }
  return v32 & 1;
}

void sub_100590DFC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  a1[3] = sub_1000BA294(&qword_100BF1CE8);
  sub_10003D2DC(&qword_100BF1CF0, &qword_100BF1CE8);
  a1[4] = v3;
  sub_10005F164(a1);
  v4 = type metadata accessor for AirQualityDetailViewModel(0);
  ShortDescription.init(name:_:)(0xD000000000000019, 0x80000001009B03F0, v2, v4);
  sub_100079F70();
}

void sub_100590EB0(_QWORD *a1@<X8>)
{
  sub_100590DFC(a1);
}

uint64_t sub_100590EC4(uint64_t a1)
{
  uint64_t v2;

  sub_10000F1C8(&qword_100BF1CF8, type metadata accessor for AirQualityDetailViewModel);
  return ShortDescribable.description.getter(a1, v2);
}

void sub_100590F04()
{
  sub_10000F1C8(&qword_100BF1CC0, type metadata accessor for AirQualityDetailViewModel);
}

uint64_t sub_100590F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirQualityDetailViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100590F74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1CD8;
  if (!qword_100BF1CD8)
  {
    v1 = objc_opt_self(NSAttributedString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BF1CD8);
  }
  return result;
}

double sub_100590FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  return result;
}

ValueMetadata *type metadata accessor for AirQualityDetailAnchor()
{
  return &type metadata for AirQualityDetailAnchor;
}

unint64_t sub_100590FF8()
{
  unint64_t result;

  result = qword_100BF1D00;
  if (!qword_100BF1D00)
  {
    result = swift_getWitnessTable(&unk_1009B05D8, &type metadata for AirQualityDetailAnchor);
    atomic_store(result, (unint64_t *)&qword_100BF1D00);
  }
  return result;
}

unint64_t sub_100591034()
{
  unint64_t result;

  result = qword_100BF1D20;
  if (!qword_100BF1D20)
  {
    result = swift_getWitnessTable(&unk_1009B08C4, &type metadata for AirQualityDetailAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D20);
  }
  return result;
}

unint64_t sub_100591070()
{
  unint64_t result;

  result = qword_100BF1D28;
  if (!qword_100BF1D28)
  {
    result = swift_getWitnessTable(&unk_1009B0874, &type metadata for AirQualityDetailAnchor.PollutantTableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D28);
  }
  return result;
}

unint64_t sub_1005910AC()
{
  unint64_t result;

  result = qword_100BF1D30;
  if (!qword_100BF1D30)
  {
    result = swift_getWitnessTable(&unk_1009B0824, &type metadata for AirQualityDetailAnchor.TopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D30);
  }
  return result;
}

uint64_t _s7Weather22AirQualityDetailAnchorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100591134 + 4 * byte_1009B0405[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100591168 + 4 * byte_1009B0400[v4]))();
}

uint64_t sub_100591168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100591170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100591178);
  return result;
}

uint64_t sub_100591184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059118CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100591190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100591198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirQualityDetailAnchor.CodingKeys()
{
  return &type metadata for AirQualityDetailAnchor.CodingKeys;
}

ValueMetadata *type metadata accessor for AirQualityDetailAnchor.TopCodingKeys()
{
  return &type metadata for AirQualityDetailAnchor.TopCodingKeys;
}

ValueMetadata *type metadata accessor for AirQualityDetailAnchor.PollutantTableCodingKeys()
{
  return &type metadata for AirQualityDetailAnchor.PollutantTableCodingKeys;
}

unint64_t sub_1005911D8()
{
  unint64_t result;

  result = qword_100BF1D50;
  if (!qword_100BF1D50)
  {
    result = swift_getWitnessTable(&unk_1009B07FC, &type metadata for AirQualityDetailAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D50);
  }
  return result;
}

unint64_t sub_100591218()
{
  unint64_t result;

  result = qword_100BF1D58;
  if (!qword_100BF1D58)
  {
    result = swift_getWitnessTable(&unk_1009B071C, &type metadata for AirQualityDetailAnchor.TopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D58);
  }
  return result;
}

unint64_t sub_100591258()
{
  unint64_t result;

  result = qword_100BF1D60;
  if (!qword_100BF1D60)
  {
    result = swift_getWitnessTable(&unk_1009B0744, &type metadata for AirQualityDetailAnchor.TopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D60);
  }
  return result;
}

unint64_t sub_100591298()
{
  unint64_t result;

  result = qword_100BF1D68;
  if (!qword_100BF1D68)
  {
    result = swift_getWitnessTable(&unk_1009B06CC, &type metadata for AirQualityDetailAnchor.PollutantTableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D68);
  }
  return result;
}

unint64_t sub_1005912D8()
{
  unint64_t result;

  result = qword_100BF1D70;
  if (!qword_100BF1D70)
  {
    result = swift_getWitnessTable(&unk_1009B06F4, &type metadata for AirQualityDetailAnchor.PollutantTableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D70);
  }
  return result;
}

unint64_t sub_100591318()
{
  unint64_t result;

  result = qword_100BF1D78;
  if (!qword_100BF1D78)
  {
    result = swift_getWitnessTable(&unk_1009B076C, &type metadata for AirQualityDetailAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100BF1D78);
  }
  return result;
}

unint64_t sub_100591358()
{
  unint64_t result;

  result = qword_100BF1D80[0];
  if (!qword_100BF1D80[0])
  {
    result = swift_getWitnessTable(&unk_1009B0794, &type metadata for AirQualityDetailAnchor.CodingKeys);
    atomic_store(result, qword_100BF1D80);
  }
  return result;
}

uint64_t sub_1005913A0()
{
  return 8;
}

uint64_t sub_1005913AC(_QWORD *a1)
{
  return swift_release(*a1);
}

double sub_1005913B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

_QWORD *sub_1005913C8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1005913D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  sub_100158A50(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DetailViewVisibilityTrackerModel(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "(";
      v8[3] = &unk_1009B0A00;
      v8[4] = &unk_1009B0A18;
      v8[5] = &unk_1009B0A30;
      v8[6] = &unk_1009B0A18;
      v8[7] = &unk_1009B0A30;
      v6 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
      if (v7 <= 0x3F)
      {
        v8[8] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 9, v8, a1 + 32);
      }
    }
  }
}

uint64_t *sub_1005914A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v47;
  __n128 v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void (*v69)(unint64_t, unint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = type metadata accessor for PresentationMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v81 = v7;
  v82 = v6;
  if (((v9 + 16) & (unint64_t)~v9) + *(_QWORD *)(v7 + 64) <= 8)
    v10 = 8;
  else
    v10 = ((v8 + 16) & ~(unint64_t)v8) + *(_QWORD *)(v7 + 64);
  v85 = type metadata accessor for DetailType(0);
  v11 = *(_QWORD *)(v85 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v86 = type metadata accessor for Location(0);
  v13 = *(_QWORD *)(v86 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v14 | v12;
  v16 = type metadata accessor for DetailViewOrigin(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v15 | v18;
  v20 = (v15 | v18);
  v21 = v14;
  v22 = v18;
  v23 = v10 + v20 + 1;
  v83 = v11;
  v84 = v13;
  v24 = *(_QWORD *)(v11 + 64) + v14;
  v25 = *(_QWORD *)(v13 + 64) + v18;
  v26 = ((v25 + (v24 & ~(unint64_t)v14)) & ~(unint64_t)v18)
      + *(_QWORD *)(v17 + 64);
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_DWORD *)(v28 + 80);
  v30 = v20 | v8 | v29;
  v31 = (v19 | v8 | *(_DWORD *)(v28 + 80)) & 0x100000;
  if (v30 > 7
    || v31 != 0
    || ((v29
       + 17
       + ((((((v26 + (v23 & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)) & ~v29)
     + *(_QWORD *)(v28 + 64) > 0x18)
  {
    v34 = *a2;
    *a1 = *a2;
    v35 = (uint64_t *)(v34 + ((v30 & 0xF8 ^ 0x1F8) & (v30 + 16)));
    swift_retain(v34);
  }
  else
  {
    v36 = *((unsigned __int8 *)a2 + v10);
    v79 = *(_QWORD *)(v27 - 8);
    if (v36 >= 2)
    {
      if (v10 <= 3)
        v37 = v10;
      else
        v37 = 4;
      __asm { BR              X16 }
    }
    v38 = a1;
    v39 = v24;
    v75 = v25;
    v76 = *(_QWORD *)(v16 - 8);
    v77 = v16;
    v78 = v29 + 17;
    v80 = *(_QWORD *)(a3 + 16);
    v40 = ~v20;
    v41 = ~v21;
    v73 = ~v22;
    v74 = ~v29;
    v42 = *a2;
    *a1 = *a2;
    if (v36 == 1)
    {
      v43 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v44 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      v45 = *v44;
      *v43 = *v44;
      v72 = ((unint64_t)v43 + v9 + 8) & ~v9;
      v71 = ((unint64_t)v44 + v9 + 8) & ~v9;
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v81 + 16);
      swift_retain(v42);
      v47 = v45;
      v38 = a1;
      v48 = swift_retain(v47);
      v46(v72, v71, v82, v48);
      v49 = 1;
    }
    else
    {
      swift_retain(v42);
      v49 = 0;
    }
    *((_BYTE *)v38 + v10) = v49;
    v50 = ((unint64_t)v38 + v23) & v40;
    v51 = ((unint64_t)a2 + v23) & v40;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v83 + 16))(v50, v51, v85);
    v52 = v39;
    v53 = (v39 + v50) & v41;
    v54 = (v52 + v51) & v41;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v84 + 16))(v53, v54, v86);
    v35 = a1;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v76 + 16))((v75 + v53) & v73, (v75 + v54) & v73, v77);
    v55 = (v50 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v51 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v57 = *(_QWORD *)(v56 + 24);
    *(_QWORD *)(v55 + 24) = v57;
    *(_QWORD *)(v55 + 32) = *(_QWORD *)(v56 + 32);
    (**(void (***)(unint64_t, unint64_t))(v57 - 8))(v55, v56);
    v58 = (_QWORD *)((v55 + 47) & 0xFFFFFFFFFFFFFFF8);
    v59 = (_QWORD *)((v56 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v58 = *v59;
    v60 = v59[1];
    v58[1] = v60;
    v61 = ((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF8;
    v62 = ((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v63 = *(_QWORD *)(v62 + 8);
    *(_QWORD *)(v61 + 8) = v63;
    *(_BYTE *)(v61 + 16) = *(_BYTE *)(v62 + 16);
    v64 = ((unint64_t)v58 + 47) & 0xFFFFFFFFFFFFFFF8;
    v65 = ((unint64_t)v59 + 47) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v66 = *(_QWORD *)(v65 + 8);
    *(_QWORD *)(v64 + 8) = v66;
    *(_BYTE *)(v64 + 16) = *(_BYTE *)(v65 + 16);
    v67 = (v78 + v64) & v74;
    v68 = (v78 + v65) & v74;
    v69 = *(void (**)(unint64_t, unint64_t, uint64_t))(v79 + 16);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v66);
    v69(v67, v68, v80);
  }
  return v35;
}

uint64_t sub_1005918D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __n128 v24;
  uint64_t v26;
  uint64_t v27;

  v3 = type metadata accessor for PresentationMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) <= 8)
    v6 = 8;
  else
    v6 = ((v5 + 16) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X11 }
  }
  v27 = v6;
  swift_release();
  if (v7 == 1)
  {
    v9 = swift_release();
    (*(void (**)(unint64_t, uint64_t, __n128))(v4 + 8))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & ~v5, v3, v9);
  }
  v10 = type metadata accessor for DetailType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = type metadata accessor for Location(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v26 = v13;
  v16 = v15 | v12;
  v17 = type metadata accessor for DetailViewOrigin(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80);
  v20 = (a1 + v27 + (v16 | v19) + 1) & ~(unint64_t)(v16 | v19);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v20, v10);
  v21 = *(_QWORD *)(v11 + 64) + v15;
  (*(void (**)(unint64_t, uint64_t))(v14 + 8))((v21 + v20) & ~(unint64_t)v15, v26);
  v22 = *(_QWORD *)(v14 + 64) + v19;
  (*(void (**)(unint64_t, uint64_t))(v18 + 8))((v22 + ((v21 + v20) & ~(unint64_t)v15)) & ~(unint64_t)v19, v17);
  v23 = (_QWORD *)((v20
                  + *(_QWORD *)(v18 + 64)
                  + ((v22 + (v21 & ~(unint64_t)v15)) & ~(unint64_t)v19)
                  + 7) & 0xFFFFFFFFFFFFFFF8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((((unint64_t)v23 + 47) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)+ *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)+ 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80), v24);
}

uint64_t *sub_100591B24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;

  v5 = type metadata accessor for PresentationMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (((v7 + 16) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
    v8 = 8;
  else
    v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  v11 = *a2;
  *a1 = *a2;
  if (v9 == 1)
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    *v12 = *v13;
    v15 = ((unint64_t)v12 + v7 + 8) & ~v7;
    v16 = ((unint64_t)v13 + v7 + 8) & ~v7;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
    swift_retain(v11);
    v18 = swift_retain(v14);
    v17(v15, v16, v5, v18);
    v19 = 1;
  }
  else
  {
    swift_retain(v11);
    v19 = 0;
  }
  *((_BYTE *)a1 + v8) = v19;
  v20 = type metadata accessor for DetailType(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v57 = type metadata accessor for Location(0);
  v23 = *(_QWORD *)(v57 - 8);
  v24 = *(_DWORD *)(v23 + 80);
  v25 = v24 | v22;
  v58 = type metadata accessor for DetailViewOrigin(0);
  v59 = a1;
  v56 = *(_QWORD *)(v58 - 8);
  v26 = *(_DWORD *)(v56 + 80);
  v27 = (v25 | v26);
  v28 = v24;
  v29 = a1;
  v30 = v26;
  v31 = v8 + v27 + 1;
  v32 = ((unint64_t)v29 + v31) & ~v27;
  v33 = ((unint64_t)a2 + v31) & ~v27;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 16))(v32, v33, v20);
  v34 = *(_QWORD *)(v21 + 64) + v24;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16))((v34 + v32) & ~v28, (v34 + v33) & ~v28, v57);
  v35 = *(_QWORD *)(v23 + 64) + v26;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v56 + 16))((v35 + ((v34 + v32) & ~v28)) & ~v30, (v35 + ((v34 + v33) & ~v28)) & ~v30, v58);
  v36 = ((v35 + (v34 & ~v28)) & ~v30) + *(_QWORD *)(v56 + 64) + 7;
  v37 = (v36 + v32) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v36 + v33) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)(v38 + 24);
  *(_QWORD *)(v37 + 24) = v39;
  *(_QWORD *)(v37 + 32) = *(_QWORD *)(v38 + 32);
  (**(void (***)(unint64_t, unint64_t))(v39 - 8))(v37, v38);
  v40 = (_QWORD *)((v37 + 47) & 0xFFFFFFFFFFFFFFF8);
  v41 = (_QWORD *)((v38 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v40 = *v41;
  v42 = v41[1];
  v40[1] = v42;
  v43 = ((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8;
  v44 = ((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v45 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v43 + 8) = v45;
  *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
  v46 = ((unint64_t)v40 + 47) & 0xFFFFFFFFFFFFFFF8;
  v47 = ((unint64_t)v41 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v48 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)(v46 + 8) = v48;
  *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
  v49 = *(_QWORD *)(a3 + 16);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned __int8 *)(v50 + 80);
  v52 = (v51 + 17 + v46) & ~v51;
  v53 = (v51 + 17 + v47) & ~v51;
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v48);
  v54(v52, v53, v49);
  return v59;
}

_QWORD *sub_100591E70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  if (a1 != a2)
  {
    v5 = type metadata accessor for PresentationMode(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 16) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
      v8 = 8;
    else
      v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X11 }
    }
    v11 = ~v7;
    swift_release();
    if (v9 == 1)
    {
      v12 = swift_release();
      (*(void (**)(unint64_t, uint64_t, __n128))(v6 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v11, v5, v12);
    }
    v13 = *((unsigned __int8 *)a2 + v8);
    if (v13 >= 2)
    {
      if (v8 <= 3)
        v14 = v8;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    *a1 = *a2;
    if (v13 == 1)
    {
      v15 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v16 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v15 = *v16;
      v17 = (char *)v16 + v7;
      v18 = ((unint64_t)v15 + v7 + 8) & v11;
      v19 = (unint64_t)(v17 + 8) & v11;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
      swift_retain();
      v21 = swift_retain();
      v20(v18, v19, v5, v21);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  v22 = type metadata accessor for PresentationMode(0);
  if (((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) <= 8)
    v23 = 8;
  else
    v23 = ((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64);
  v24 = type metadata accessor for DetailType(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_DWORD *)(v25 + 80);
  v53 = type metadata accessor for Location(0);
  v27 = *(_QWORD *)(v53 - 8);
  v28 = *(_DWORD *)(v27 + 80);
  v29 = v28 | v26;
  v54 = type metadata accessor for DetailViewOrigin(0);
  v55 = a1;
  v30 = a1;
  v31 = *(_QWORD *)(v54 - 8);
  v32 = *(_DWORD *)(v31 + 80);
  v33 = (v29 | v32);
  v34 = v28;
  v35 = v32;
  v36 = v23 + v33 + 1;
  v37 = ((unint64_t)v30 + v36) & ~v33;
  v38 = ((unint64_t)a2 + v36) & ~v33;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 24))(v37, v38, v24);
  v39 = *(_QWORD *)(v25 + 64) + v28;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 24))((v39 + v37) & ~v34, (v39 + v38) & ~v34, v53);
  v40 = *(_QWORD *)(v27 + 64) + v32;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 24))((v40 + ((v39 + v37) & ~v34)) & ~v35, (v40 + ((v39 + v38) & ~v34)) & ~v35, v54);
  v41 = ((v40 + (v39 & ~v34)) & ~v35) + *(_QWORD *)(v31 + 64) + 7;
  v42 = (_QWORD *)((v41 + v37) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v41 + v38) & 0xFFFFFFFFFFFFFFF8);
  sub_100094D04(v42, v43);
  v44 = (_QWORD *)(((unint64_t)v42 + 47) & 0xFFFFFFFFFFFFFFF8);
  v45 = (_QWORD *)(((unint64_t)v43 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = ((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8;
  v47 = ((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
  v48 = ((unint64_t)v44 + 47) & 0xFFFFFFFFFFFFFFF8;
  v49 = ((unint64_t)v45 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
  swift_bridgeObjectRetain();
  v50 = swift_bridgeObjectRelease();
  *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
  v51 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v51 + 24))((*(unsigned __int8 *)(v51 + 80) + 17 + v48) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80), (*(unsigned __int8 *)(v51 + 80) + 17 + v49) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80), v50);
  return v55;
}

_QWORD *sub_10059228C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v5 = type metadata accessor for PresentationMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (((v7 + 16) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
    v8 = 8;
  else
    v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    *a1 = *a2;
    v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7, v5);
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v13;
  v14 = type metadata accessor for DetailType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v44 = type metadata accessor for Location(0);
  v17 = *(_QWORD *)(v44 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v18 | v16;
  v45 = type metadata accessor for DetailViewOrigin(0);
  v46 = a1;
  v20 = a1;
  v21 = *(_QWORD *)(v45 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v23 = (v19 | v22);
  v24 = v18;
  v25 = v22;
  v26 = v8 + v23 + 1;
  v27 = ((unint64_t)v20 + v26) & ~v23;
  v28 = ((unint64_t)a2 + v26) & ~v23;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(v27, v28, v14);
  v29 = *(_QWORD *)(v15 + 64) + v18;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 32))((v29 + v27) & ~v24, (v29 + v28) & ~v24, v44);
  v30 = *(_QWORD *)(v17 + 64) + v22;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 32))((v30 + ((v29 + v27) & ~v24)) & ~v25, (v30 + ((v29 + v28) & ~v24)) & ~v25, v45);
  v31 = ((v30 + (v29 & ~v24)) & ~v25) + *(_QWORD *)(v21 + 64) + 7;
  v32 = (v31 + v27) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v31 + v28) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_OWORD *)v33;
  v35 = *(_OWORD *)(v33 + 16);
  *(_QWORD *)(v32 + 32) = *(_QWORD *)(v33 + 32);
  *(_OWORD *)v32 = v34;
  *(_OWORD *)(v32 + 16) = v35;
  v36 = (_OWORD *)((v32 + 47) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_OWORD *)((v33 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  v38 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *(_BYTE *)(v38 + 16) = *(_BYTE *)(v39 + 16);
  v40 = ((unint64_t)v36 + 47) & 0xFFFFFFFFFFFFFFF8;
  v41 = ((unint64_t)v37 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_BYTE *)(v40 + 16) = *(_BYTE *)(v41 + 16);
  v42 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v42 + 32))((*(unsigned __int8 *)(v42 + 80) + 17 + v40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80), (*(unsigned __int8 *)(v42 + 80) + 17 + v41) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  return v46;
}

_QWORD *sub_100592570(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  if (a1 != a2)
  {
    v5 = type metadata accessor for PresentationMode(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 16) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
      v8 = 8;
    else
      v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X11 }
    }
    v11 = ~v7;
    swift_release();
    if (v9 == 1)
    {
      v12 = swift_release();
      (*(void (**)(unint64_t, uint64_t, __n128))(v6 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v11, v5, v12);
    }
    v13 = *((unsigned __int8 *)a2 + v8);
    if (v13 >= 2)
    {
      if (v8 <= 3)
        v14 = v8;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
    {
      *a1 = *a2;
      v15 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v16 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v15 = *v16;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v15 + v7 + 8) & v11, ((unint64_t)v16 + v7 + 8) & v11, v5);
      v17 = 1;
    }
    else
    {
      v17 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v17;
  }
  v18 = type metadata accessor for PresentationMode(0);
  if (((*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) <= 8)
    v19 = 8;
  else
    v19 = ((*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
  v20 = type metadata accessor for DetailType(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v51 = type metadata accessor for Location(0);
  v23 = *(_QWORD *)(v51 - 8);
  v24 = *(_DWORD *)(v23 + 80);
  v25 = v24 | v22;
  v52 = type metadata accessor for DetailViewOrigin(0);
  v53 = a1;
  v26 = a1;
  v27 = *(_QWORD *)(v52 - 8);
  v28 = *(_DWORD *)(v27 + 80);
  v29 = (v25 | v28);
  v30 = v24;
  v31 = v28;
  v32 = v19 + v29 + 1;
  v33 = ((unint64_t)v26 + v32) & ~v29;
  v34 = ((unint64_t)a2 + v32) & ~v29;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 40))(v33, v34, v20);
  v35 = *(_QWORD *)(v21 + 64) + v24;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 40))((v35 + v33) & ~v30, (v35 + v34) & ~v30, v51);
  v36 = *(_QWORD *)(v23 + 64) + v28;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 40))((v36 + ((v35 + v33) & ~v30)) & ~v31, (v36 + ((v35 + v34) & ~v30)) & ~v31, v52);
  v37 = ((v36 + (v35 & ~v30)) & ~v31) + *(_QWORD *)(v27 + 64) + 7;
  v38 = (v37 + v33) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v37 + v34) & 0xFFFFFFFFFFFFFFF8;
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)v38);
  v40 = *(_OWORD *)v39;
  v41 = *(_OWORD *)(v39 + 16);
  *(_QWORD *)(v38 + 32) = *(_QWORD *)(v39 + 32);
  *(_OWORD *)v38 = v40;
  *(_OWORD *)(v38 + 16) = v41;
  v42 = (_QWORD *)((v38 + 47) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v39 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRelease();
  v44 = ((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
  v46 = ((unint64_t)v42 + 47) & 0xFFFFFFFFFFFFFFF8;
  v47 = ((unint64_t)v43 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
  v48 = swift_bridgeObjectRelease();
  *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
  v49 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v49 + 40))((*(unsigned __int8 *)(v49 + 80) + 17 + v46) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80), (*(unsigned __int8 *)(v49 + 80) + 17 + v47) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80), v48);
  return v53;
}

uint64_t sub_100592970(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  int v36;
  unsigned int v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for PresentationMode(0);
  if (((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8)
    v7 = 8;
  else
    v7 = ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = type metadata accessor for DetailType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v44 = type metadata accessor for Location(0);
  v11 = *(_QWORD *)(v44 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  if (v12 <= v10)
    v13 = v10;
  else
    v13 = *(_DWORD *)(v11 + 84);
  v14 = type metadata accessor for DetailViewOrigin(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  if (v16 <= v13)
    v17 = v13;
  else
    v17 = *(_DWORD *)(v15 + 84);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int *)(v19 + 84);
  if (v17 <= v20)
    v21 = *(_DWORD *)(v19 + 84);
  else
    v21 = v17;
  if (v21 <= 0x7FFFFFFF)
    v22 = 0x7FFFFFFF;
  else
    v22 = v21;
  if (!a2)
    return 0;
  v23 = v14;
  v24 = *(_DWORD *)(v11 + 80);
  v25 = *(_DWORD *)(v15 + 80);
  v26 = (v24 | *(_DWORD *)(v9 + 80) | v25);
  v27 = v24;
  v28 = v25;
  v29 = v7 + v26 + 1;
  v30 = *(_QWORD *)(v9 + 64) + v24;
  v31 = *(_QWORD *)(v11 + 64) + v25;
  v32 = ((v31 + (v30 & ~v27)) & ~(unint64_t)v25) + *(_QWORD *)(v15 + 64);
  v33 = *(unsigned __int8 *)(v19 + 80);
  if (a2 <= v22)
    goto LABEL_36;
  v34 = ((v33
        + ((((((v32 + (v29 & ~v26) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 17) & ~v33)
      + *(_QWORD *)(v19 + 64);
  v35 = 8 * v34;
  if (v34 > 3)
    goto LABEL_19;
  v38 = ((a2 - v22 + ~(-1 << v35)) >> v35) + 1;
  if (HIWORD(v38))
  {
    v36 = *(_DWORD *)(a1 + v34);
    if (v36)
      goto LABEL_27;
  }
  else
  {
    if (v38 <= 0xFF)
    {
      if (v38 < 2)
        goto LABEL_36;
LABEL_19:
      v36 = *(unsigned __int8 *)(a1 + v34);
      if (!*(_BYTE *)(a1 + v34))
        goto LABEL_36;
LABEL_27:
      v39 = (v36 - 1) << v35;
      if (v34 > 3)
        v39 = 0;
      if ((_DWORD)v34)
      {
        if (v34 <= 3)
          v40 = v34;
        else
          v40 = 4;
        __asm { BR              X12 }
      }
      return v22 + v39 + 1;
    }
    v36 = *(unsigned __int16 *)(a1 + v34);
    if (*(_WORD *)(a1 + v34))
      goto LABEL_27;
  }
LABEL_36:
  v41 = (v29 + a1) & ~v26;
  if (v17 == v22)
  {
    if ((_DWORD)v10 == v17)
    {
      v16 = v10;
      v18 = v8;
    }
    else
    {
      v41 = (v30 + v41) & ~v27;
      if ((_DWORD)v12 == v17)
      {
        v16 = v12;
        v18 = v44;
      }
      else
      {
        v41 = (v31 + v41) & ~v28;
        v18 = v23;
      }
    }
    return _s7Weather24LocationCompositionStateOwet_0(v41, v16, v18);
  }
  v42 = (v41 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 0x80000000) != 0)
  {
    v41 = (v33 + ((((v42 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 41) & ~v33;
    v16 = v20;
    return _s7Weather24LocationCompositionStateOwet_0(v41, v16, v18);
  }
  v43 = *(_QWORD *)(v42 + 24);
  if (v43 >= 0xFFFFFFFF)
    LODWORD(v43) = -1;
  return (v43 + 1);
}

void sub_100592C84(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  size_t v22;
  char v23;
  _BYTE *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;

  v8 = type metadata accessor for PresentationMode(0);
  if (((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= 8)
    v9 = 8;
  else
    v9 = ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(type metadata accessor for DetailType(0) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(type metadata accessor for Location(0) - 8);
  if (*(_DWORD *)(v12 + 84) <= v11)
    v13 = v11;
  else
    v13 = *(_DWORD *)(v12 + 84);
  v14 = *(_QWORD *)(type metadata accessor for DetailViewOrigin(0) - 8);
  v15 = *(_DWORD *)(v14 + 80);
  if (*(_DWORD *)(v14 + 84) <= v13)
    v16 = v13;
  else
    v16 = *(_DWORD *)(v14 + 84);
  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v16 <= *(_DWORD *)(v17 + 84))
    v18 = *(_DWORD *)(v17 + 84);
  else
    v18 = v16;
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v18;
  v20 = *(_DWORD *)(v12 + 80);
  v21 = (v20 | *(_DWORD *)(v10 + 80) | v15);
  v22 = ((*(unsigned __int8 *)(v17 + 80)
        + ((((((((*(_QWORD *)(v12 + 64)
                + *(_DWORD *)(v14 + 80)
                + ((*(_QWORD *)(v10 + 64) + v20) & ~(unint64_t)v20)) & ~(unint64_t)*(_DWORD *)(v14 + 80))
              + *(_QWORD *)(v14 + 64)
              + ((v9 + v21 + 1) & ~v21)
              + 7) & 0xFFFFFFFFFFFFFFF8)
            + 47) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 17) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
      + *(_QWORD *)(v17 + 64);
  v23 = 8
      * (((*(_BYTE *)(v17 + 80)
         + ((((((((*(_BYTE *)(v12 + 64) + v15 + ((*(_BYTE *)(v10 + 64) + v20) & ~v20)) & ~(_BYTE)v15)
               + *(_BYTE *)(v14 + 64)
               + ((v9 + v21 + 1) & ~(_BYTE)v21)
               + 7) & 0xF8)
             + 47) & 0xF8)
           + 47) & 0xF8)
         + 17) & ~*(_BYTE *)(v17 + 80))
       + *(_BYTE *)(v17 + 64));
  if (a3 <= v19)
  {
    v25 = 0;
    v24 = a1;
  }
  else
  {
    v24 = a1;
    if (v22 <= 3)
    {
      v27 = ((a3 - v19 + ~(-1 << v23)) >> v23) + 1;
      if (HIWORD(v27))
      {
        v25 = &dword_100000004;
      }
      else if (v27 >= 0x100)
      {
        v25 = 2;
      }
      else
      {
        v25 = v27 > 1;
      }
    }
    else
    {
      v25 = &_mh_execute_header.magic + 1;
    }
  }
  if (v19 < a2)
  {
    v26 = ~v19 + a2;
    if (v22 < 4)
    {
      if ((_DWORD)v22)
      {
        v28 = v26 & ~(-1 << (8 * v22));
        bzero(v24, v22);
        if ((_DWORD)v22 == 3)
        {
          *(_WORD *)v24 = v28;
          v24[2] = BYTE2(v28);
        }
        else if ((_DWORD)v22 == 2)
        {
          *(_WORD *)v24 = v28;
        }
        else
        {
          *v24 = v28;
        }
      }
    }
    else
    {
      bzero(v24, v22);
      *(_DWORD *)v24 = v26;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X19 }
}

uint64_t type metadata accessor for DetailContainerView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100108FF8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DetailContainerView);
}

uint64_t sub_100593038(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100AB99C8, 1);
}

uint64_t sub_10059306C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(unint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char v87[16];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v83 = a2;
  v80 = *(_QWORD *)(a1 - 8);
  v78 = a1;
  v81 = *(_QWORD *)(v80 + 64);
  __chkstk_darwin(a1);
  sub_10009511C((uint64_t)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  sub_10009511C((uint64_t)&v65 - v5);
  v77 = type metadata accessor for ColorScheme(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  sub_10009511C((uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for NavigationPath(255);
  v86 = *(_QWORD *)(a1 + 16);
  v8 = v86;
  v9 = sub_100075EB0(&qword_100BF1E08);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = sub_10005F124(&qword_100BF1E10, &qword_100BF1E08, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v101 = v11;
  v102 = v12;
  v66 = v11;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v97 = v10;
  v98 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v97, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v15 = sub_100075EB0(&qword_100BF1E18);
  v97 = v10;
  v98 = WitnessTable;
  v16 = sub_10009885C((uint64_t)&v97, (uint64_t)&opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>);
  v17 = sub_10005F124(&qword_100BF1E20, &qword_100BF1E18, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v97 = OpaqueTypeMetadata2;
  v98 = v15;
  v99 = v16;
  v100 = v17;
  v18 = swift_getOpaqueTypeMetadata2(255, &v97, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v97 = OpaqueTypeMetadata2;
  v98 = v15;
  v99 = v16;
  v100 = v17;
  v19 = sub_10009885C((uint64_t)&v97, (uint64_t)&opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>);
  v20 = type metadata accessor for NavigationStack(0, v7, v18, v19);
  v67 = *(_QWORD *)(v20 - 8);
  sub_1000C3778();
  __chkstk_darwin(v21);
  v23 = (char *)&v65 - v22;
  v24 = sub_100075EB0(&qword_100BE21D8);
  v25 = type metadata accessor for ModifiedContent(0, v20, v24);
  v68 = *(_QWORD *)(v25 - 8);
  sub_1000C3778();
  __chkstk_darwin(v26);
  v28 = (char *)&v65 - v27;
  v29 = type metadata accessor for ModifiedContent(0, v25, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
  v73 = *(_QWORD *)(v29 - 8);
  v70 = v29;
  sub_1000C3778();
  __chkstk_darwin(v30);
  v84 = (char *)&v65 - v31;
  v72 = type metadata accessor for ModifiedContent(0, v32, &type metadata for TrackVisibilityModifier);
  v75 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v69 = (char *)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  sub_10009511C((uint64_t)&v65 - v35);
  v36 = v85;
  v88 = v86;
  v89 = v11;
  v90 = v85;
  NavigationStack.init<>(root:)(sub_100594EE4, v87, v18, v19);
  v37 = v76;
  v38 = v74;
  v39 = v77;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v74, enum case for ColorScheme.dark(_:), v77);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v20);
  View.colorScheme(_:)(v38, v20, v40);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v20);
  v41 = sub_10005F124(&qword_100BE21D0, &qword_100BE21D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v95 = v40;
  v96 = v41;
  v77 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  View.accessibilityIgnoresInvertColors(_:)(1, v25, v77);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v28, v25);
  v42 = v80;
  v76 = *(_QWORD *)(v80 + 16);
  v43 = v79;
  v44 = v78;
  ((void (*)(uint64_t, uint64_t, uint64_t))v76)(v79, v36, v78);
  v45 = v42;
  v46 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v47 = sub_1000B4B64((uint64_t)&unk_100B81380);
  v48 = v86;
  v49 = v66;
  *(_QWORD *)(v47 + 16) = v86;
  *(_QWORD *)(v47 + 24) = v49;
  v50 = *(void (**)(unint64_t, uint64_t, uint64_t))(v45 + 32);
  v50(v47 + v46, v43, v44);
  v51 = v82;
  ((void (*)(uint64_t, uint64_t, uint64_t))v76)(v82, v85, v44);
  v52 = sub_1000B4B64((uint64_t)&unk_100B813A8);
  *(_QWORD *)(v52 + 16) = v48;
  *(_QWORD *)(v52 + 24) = v49;
  v50(v52 + v46, v51, v44);
  v53 = sub_1001CDA94();
  v93 = v77;
  v94 = v53;
  v54 = v70;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v70);
  v56 = v69;
  v57 = v84;
  sub_1006D5DAC((uint64_t)sub_100594EF4, v47, (uint64_t)sub_100594F04, v52, v54, v55);
  swift_release();
  v58 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v57, v54, v58);
  v59 = sub_100594F10();
  v91 = v55;
  v92 = v59;
  v60 = v72;
  v61 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v72);
  v62 = v71;
  sub_1000B2074(v56, v60, v61);
  v63 = *(void (**)(char *, uint64_t))(v75 + 8);
  v63(v56, v60);
  sub_1000B1100(v62, v60, v83);
  return ((uint64_t (*)(uint64_t, uint64_t))v63)(v62, v60);
}

uint64_t sub_1005936C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[16];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v53 = a1;
  v68 = a4;
  v7 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0, a5);
  v66 = *(_QWORD *)(v7 - 8);
  v67 = v7;
  __chkstk_darwin(v7);
  v64 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100075EB0(&qword_100BF1E08);
  v10 = a2;
  v11 = type metadata accessor for ModifiedContent(0, a2, v9);
  v65 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - v12;
  v14 = sub_10005F124(&qword_100BF1E10, &qword_100BF1E08, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v77 = a3;
  v78 = v14;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v73 = v11;
  v74 = WitnessTable;
  v16 = WitnessTable;
  v55 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v73, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v63 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v18 = OpaqueTypeMetadata2;
  v60 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v61 = (char *)&v53 - v19;
  v20 = sub_100075EB0(&qword_100BF1E18);
  v59 = v20;
  v73 = v11;
  v74 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v58 = OpaqueTypeConformance2;
  v57 = sub_10005F124(&qword_100BF1E20, &qword_100BF1E18, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v73 = v18;
  v74 = v20;
  v75 = OpaqueTypeConformance2;
  v76 = v57;
  v22 = swift_getOpaqueTypeMetadata2(0, &v73, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v62 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v54 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v56 = (char *)&v53 - v25;
  v26 = v10;
  type metadata accessor for DetailContainerView(0, v10, a3, v27);
  v28 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  v29 = Color.init(_:)(v28);
  v30 = static SafeAreaRegions.all.getter(v29);
  v31 = static Edge.Set.all.getter(v30);
  v73 = v29;
  v74 = v30;
  LOBYTE(v75) = v31;
  v32 = sub_1000BA294(&qword_100BF1E30);
  v33 = sub_100594F4C();
  v34 = j___s7SwiftUI9AlignmentV6centerACvgZ_0(v26);
  v35 = v26;
  v36 = v32;
  v37 = a3;
  View.background<A>(_:alignment:)(&v73, v34, v38, v26, v36, a3, v33);
  v39 = swift_release();
  v41 = v66;
  v40 = v67;
  v42 = v64;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v66 + 104))(v64, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v67, v39);
  v43 = v61;
  View.navigationBarTitleDisplayMode(_:)(v42, v11, v55);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v13, v11);
  v70 = v35;
  v71 = v37;
  v72 = v53;
  v44 = v54;
  v46 = v59;
  v45 = v60;
  v47 = v58;
  v48 = v57;
  View.toolbar<A>(content:)(sub_100594FB0, v69, v60, v59, v58, v57);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v43, v45);
  v73 = v45;
  v74 = v46;
  v75 = v47;
  v76 = v48;
  v49 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v50 = (uint64_t)v56;
  sub_1000B2074(v44, v22, v49);
  v51 = *(void (**)(char *, uint64_t))(v62 + 8);
  v51(v44, v22);
  sub_1000B1100(v50, v22, v68);
  return ((uint64_t (*)(uint64_t, uint64_t))v51)(v50, v22);
}

uint64_t sub_100593B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];

  v35 = a3;
  v33 = a2;
  v34 = a1;
  v40 = a4;
  v39 = sub_1000BA294(&qword_100BF1E40);
  __chkstk_darwin(v39);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BF1E48);
  v37 = *(_QWORD *)(v9 - 8);
  v38 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000BA294(&qword_100BF1E50);
  v15 = *(_QWORD *)(v36 - 8);
  v16 = __chkstk_darwin(v36);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v16);
  v46 = a2;
  v47 = a3;
  v48 = a1;
  v19 = sub_1000BA294(&qword_100BF1E58);
  v20 = sub_100075EB0(&qword_100BF1E60);
  v21 = sub_100075EB0(&qword_100BF1E68);
  v22 = sub_10005F124(&qword_100BF1E70, &qword_100BF1E60, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v23 = sub_10005F124(&qword_100BF1E78, &qword_100BF1E68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v49[0] = v20;
  v49[1] = v21;
  v49[2] = v22;
  v49[3] = v23;
  swift_getOpaqueTypeConformance2(v49, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v24 = ToolbarItem<>.init(placement:content:)(v14, sub_100594FBC, v45, v19);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v24);
  v42 = v33;
  v43 = v35;
  v44 = v34;
  v25 = sub_1000BA294(&qword_100BF1E80);
  sub_100594FD4();
  ToolbarItem<>.init(placement:content:)(v14, sub_100594FC8, v41, v25);
  v26 = v39;
  v27 = &v8[*(int *)(v39 + 48)];
  v28 = v36;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v8, v18, v36);
  v29 = v37;
  v30 = v27;
  v31 = v38;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v30, v11, v38);
  TupleToolbarContent.init(_:)(v8, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v28);
}

uint64_t sub_100593DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailContainerView(0, a2, a3, a4);
  return sub_100593E18(v4);
}

uint64_t sub_100593E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1000BA294(&qword_100BF1E60);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v6);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v7 = sub_1000BA294(&qword_100BF1E90);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  sub_1005942BC(v1, v9, v8, (uint64_t)&v5[*(int *)(v7 + 44)]);
  v14 = v9;
  v15 = v8;
  v16 = v1;
  v10 = sub_1000BA294(&qword_100BF1E68);
  v11 = sub_10005F124(&qword_100BF1E70, &qword_100BF1E60, (uint64_t)&protocol conformance descriptor for VStack<A>);
  sub_10005F124(&qword_100BF1E78, &qword_100BF1E68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_100595180, v13, v3, v10, v11);
  return sub_100595234((uint64_t)v5, &qword_100BF1E60);
}

uint64_t sub_100593F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[3];
  __int16 v26;

  v9 = type metadata accessor for DetailContainerView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)v25 - v13;
  if (*(_BYTE *)(a1 + *(int *)(v15 + 60)) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v14, a1, v9, v12);
    v16 = *(unsigned __int8 *)(v10 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(&unk_100B813D0, v17 + v11, v16 | 7);
    *(_QWORD *)(v18 + 16) = a2;
    *(_QWORD *)(v18 + 24) = a3;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v14, v9);
    v25[1] = sub_100595114;
    v25[2] = v18;
    v26 = 257;
    v19 = sub_1000BA294(&qword_100BE74F8);
    v20 = sub_1000BA294(&qword_100BCF180);
    v21 = sub_1005950A4();
    sub_10005F124(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1004BF374, 0, v19, v20, v21);
    swift_release();
    v22 = sub_1000BA294(&qword_100BE74E0);
    return _s7Weather24LocationCompositionStateOwst_0(a5, 0, 1, v22);
  }
  else
  {
    v24 = sub_1000BA294(&qword_100BE74E0);
    return _s7Weather24LocationCompositionStateOwst_0(a5, 1, 1, v24);
  }
}

uint64_t sub_100594124()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v0 = type metadata accessor for PresentationMode(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000BA294(&qword_100BC6510);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1007A5A6C(v4);
  Binding.wrappedValue.getter(v3);
  PresentationMode.dismiss()();
  Binding.wrappedValue.setter(v2, v3);
  return sub_100595234((uint64_t)v6, &qword_100BC6510);
}

uint64_t sub_100594204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for DetailContainerView(0, a2, a3, a4);
  v6 = (_QWORD *)(a1 + *(int *)(v5 + 40));
  v7 = v6[3];
  v8 = v6[4];
  sub_1000DB418(v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1 + *(int *)(v5 + 36), v7, v8);
}

uint64_t sub_100594268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)(a1 + *(int *)(type metadata accessor for DetailContainerView(0, a2, a3, a4) + 40));
  v5 = v4[3];
  v6 = v4[4];
  sub_1000DB418(v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
}

uint64_t sub_1005942BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[24];
  unsigned __int8 v105;
  __int128 v106;
  unsigned __int8 v107;
  uint64_t v108;
  char v109;
  char v110;

  v90 = a3;
  v89 = a2;
  v91 = a1;
  v101 = a4;
  v7 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v7);
  v88 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Font.TextStyle(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessibilityTraits(0);
  v98 = *(_QWORD *)(v10 - 8);
  v99 = v10;
  __chkstk_darwin(v10);
  v97 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for AccessibilityChildBehavior(0);
  v12 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1000BA294(&qword_100BF1E98);
  v95 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1000BA294(&qword_100BF1EA0);
  __chkstk_darwin(v96);
  v100 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v85 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v85 - v22;
  __chkstk_darwin(v24);
  v94 = (char *)&v85 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v85 - v27;
  v30 = static VerticalAlignment.center.getter(v29);
  v31 = sub_100594914(a1, a2, a3, (uint64_t *)&v102);
  v32 = v103;
  v33 = v104[0];
  v34 = v105;
  v35 = v106;
  v36 = BYTE8(v106);
  v37 = BYTE9(v106);
  v38 = v102;
  v39 = *(_OWORD *)&v104[8];
  *(_QWORD *)&v102 = v30;
  *((_QWORD *)&v102 + 1) = 0x4010000000000000;
  LOBYTE(v103) = 0;
  *(_OWORD *)v104 = v38;
  *(_QWORD *)&v104[16] = v32;
  v105 = v33;
  v106 = v39;
  v107 = v34;
  v108 = v35;
  v109 = v36;
  v110 = v37;
  static AccessibilityChildBehavior.ignore.getter(v31);
  v40 = sub_1000BA294(&qword_100BF1EA8);
  v41 = sub_10005F124(&qword_100BF1EB0, &qword_100BF1EA8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v14, v40, v41);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v92);
  v42 = v106;
  LOBYTE(v12) = v107;
  sub_10059518C(*(uint64_t *)v104, *(uint64_t *)&v104[8], *(uint64_t *)&v104[16], v105);
  sub_1000D31B4(v42, *((uint64_t *)&v42 + 1), v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v102 = v40;
  *((_QWORD *)&v102 + 1) = v41;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v44 = v93;
  View.accessibilityRespondsToUserInteraction(_:)(1, v93, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v16, v44);
  v46 = type metadata accessor for DetailContainerView(0, v89, v90, v45);
  v47 = v91;
  v48 = (uint64_t *)(v91 + *(int *)(v46 + 44));
  v50 = *v48;
  v49 = v48[1];
  *(_QWORD *)&v102 = v50;
  *((_QWORD *)&v102 + 1) = v49;
  v51 = sub_100114EF8();
  v52 = v96;
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v102, v96, &type metadata for String, v51);
  v53 = sub_100595234((uint64_t)v20, &qword_100BF1EA0);
  v54 = v97;
  static AccessibilityTraits.isHeader.getter(v53);
  v55 = (uint64_t)v94;
  ModifiedContent<>.accessibilityAddTraits(_:)(v54, v52);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v54, v99);
  sub_100595234((uint64_t)v23, &qword_100BF1EA0);
  sub_1005951A4(v55, (uint64_t)v28);
  v56 = (_QWORD *)(v47 + *(int *)(v46 + 56));
  v57 = v56[1];
  if (v57)
  {
    *(_QWORD *)&v102 = *v56;
    *((_QWORD *)&v102 + 1) = v57;
    swift_bridgeObjectRetain();
    v58 = Text.init<A>(_:)(&v102, &type metadata for String, v51);
    v60 = v59;
    v62 = v61;
    v64 = v63 & 1;
    v65 = v86;
    v66 = v85;
    v67 = v87;
    (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, enum case for Font.TextStyle.body(_:), v87);
    v68 = type metadata accessor for Font.Design(0);
    v69 = v88;
    _s7Weather24LocationCompositionStateOwst_0(v88, 1, 1, v68);
    v70 = static Font.system(_:design:weight:)(v66, v69, 0, 1);
    sub_100595234(v69, &qword_100BC3B98);
    v71 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v66, v67);
    static Font.Weight.bold.getter(v71);
    v72 = Font.weight(_:)(v70);
    swift_release();
    v73 = Text.font(_:)(v72, v58, v60, v64, v62);
    v75 = v74;
    LOBYTE(v66) = v76;
    v78 = v77;
    swift_release();
    v79 = v66 & 1;
    sub_1000D31B4(v58, v60, v64);
    swift_bridgeObjectRelease();
    v80 = 257;
  }
  else
  {
    v73 = 0;
    v75 = 0;
    v79 = 0;
    v78 = 0;
    v80 = 0;
  }
  v81 = v100;
  sub_1005951EC((uint64_t)v28, v100);
  v82 = v101;
  sub_1005951EC(v81, v101);
  v83 = v82 + *(int *)(sub_1000BA294(&qword_100BF1EB8) + 48);
  *(_QWORD *)v83 = v73;
  *(_QWORD *)(v83 + 8) = v75;
  *(_QWORD *)(v83 + 16) = v79;
  *(_QWORD *)(v83 + 24) = v78;
  *(_WORD *)(v83 + 32) = v80;
  sub_10010F980(v73, v75, v79, v78);
  sub_100595234((uint64_t)v28, &qword_100BF1EA0);
  sub_10010F9B0(v73, v75, v79, v78);
  return sub_100595234(v81, &qword_100BF1EA0);
}

uint64_t sub_100594914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void (*v22)(char *);
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD v65[2];

  v64 = a4;
  v7 = sub_1000BA294(&qword_100BC3B98);
  __chkstk_darwin(v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Font.TextStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for DetailContainerView(0, a2, a3, v14);
  v16 = (uint64_t *)(a1 + v15[12]);
  v17 = v16[1];
  if (v17)
  {
    v18 = *v16;
    v58 = v15;
    v19 = v15[13];
    v60 = a1;
    v20 = *(unsigned __int8 *)(a1 + v19);
    swift_bridgeObjectRetain();
    if (v20 == 1)
    {
      v21 = Image.init(_:bundle:)(v18, v17, 0);
      v22 = *(void (**)(char *))(v11 + 104);
      v59 = enum case for Font.TextStyle.body(_:);
      v22(v13);
      v23 = type metadata accessor for Font.Design(0);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v23);
      v24 = static Font.system(_:design:weight:)(v13, v9, 0, 1);
      sub_100595234((uint64_t)v9, &qword_100BC3B98);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      KeyPath = swift_getKeyPath(&unk_1009B0AA8);
      swift_retain();
      swift_retain();
      swift_retain();
      v26 = sub_100527C9C(v21, KeyPath, v24);
    }
    else
    {
      v21 = Image.init(systemName:)(v18, v17);
      v32 = *(void (**)(char *))(v11 + 104);
      v59 = enum case for Font.TextStyle.body(_:);
      v32(v13);
      v33 = type metadata accessor for Font.Design(0);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v33);
      v24 = static Font.system(_:design:weight:)(v13, v9, 0, 1);
      sub_100595234((uint64_t)v9, &qword_100BC3B98);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      KeyPath = swift_getKeyPath(&unk_1009B0AA8);
      swift_retain();
      swift_retain();
      swift_retain();
      v26 = sub_100527DD0(v21, KeyPath, v24);
    }
    v30 = v26;
    v63 = v27;
    v34 = v29;
    v61 = v28;
    swift_release_n(v24, 2);
    swift_release_n(KeyPath, 2);
    swift_release_n(v21, 2);
    v62 = v34 & 1;
    a1 = v60;
    v31 = v59;
    v15 = v58;
  }
  else
  {
    v30 = 0;
    v63 = 0;
    v61 = 0;
    v31 = enum case for Font.TextStyle.body(_:);
    v62 = 255;
  }
  v35 = (_QWORD *)(a1 + v15[11]);
  v36 = v35[1];
  v65[0] = *v35;
  v65[1] = v36;
  v37 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v38 = Text.init<A>(_:)(v65, &type metadata for String, v37);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 104))(v13, v31, v10);
  static Font.Weight.bold.getter(v45);
  v46 = static Font.system(_:weight:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v47 = Text.font(_:)(v46, v38, v40, v44, v42);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  swift_release();
  sub_1000D31B4(v38, v40, v44);
  swift_bridgeObjectRelease();
  v55 = v63;
  v54 = v64;
  *v64 = v30;
  v54[1] = v55;
  v56 = v61;
  v54[2] = v61;
  LOBYTE(v44) = v62;
  *((_BYTE *)v54 + 24) = v62;
  v54[4] = v47;
  v54[5] = v49;
  *((_BYTE *)v54 + 48) = v51 & 1;
  v54[7] = v53;
  *((_WORD *)v54 + 32) = 257;
  sub_100595268(v30, v55, v56, v44);
  sub_1000D55D4(v47, v49, v51 & 1);
  swift_bridgeObjectRetain();
  sub_1000D31B4(v47, v49, v51 & 1);
  swift_bridgeObjectRelease();
  return sub_10059518C(v30, v55, v56, v44);
}

double sub_100594D44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  double result;
  uint64_t v32;
  uint64_t v33;

  v7 = (int *)type metadata accessor for DetailContainerView(0, a2, a3, a4);
  v8 = (uint64_t *)(a1 + v7[12]);
  v9 = v8[1];
  if (v9)
  {
    v10 = *v8;
    swift_bridgeObjectRetain();
    v9 = Image.init(systemName:)(v10, v9);
  }
  v11 = (uint64_t *)(a1 + v7[11]);
  v12 = v11[1];
  v32 = *v11;
  v33 = v12;
  v13 = sub_100114EF8();
  swift_bridgeObjectRetain();
  v14 = Text.init<A>(_:)(&v32, &type metadata for String, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = (uint64_t *)(a1 + v7[14]);
  v22 = v21[1];
  if (v22)
  {
    v32 = *v21;
    v33 = v22;
    swift_bridgeObjectRetain();
    v23 = Text.init<A>(_:)(&v32, &type metadata for String, v13);
    v25 = v24;
    v27 = v26;
    v29 = v28 & 1;
  }
  else
  {
    v23 = 0;
    v25 = 0;
    v29 = 0;
    v27 = 0;
  }
  v30 = v18 & 1;
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v14;
  *(_QWORD *)(a5 + 16) = v16;
  *(_BYTE *)(a5 + 24) = v30;
  *(_QWORD *)(a5 + 32) = v20;
  *(_QWORD *)(a5 + 40) = v23;
  *(_QWORD *)(a5 + 48) = v25;
  *(_QWORD *)(a5 + 56) = v29;
  *(_QWORD *)(a5 + 64) = v27;
  swift_retain();
  sub_1000D55D4(v14, v16, v30);
  swift_bridgeObjectRetain();
  sub_10010F980(v23, v25, v29, v27);
  sub_10010F9B0(v23, v25, v29, v27);
  sub_1000D31B4(v14, v16, v30);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100594EE4@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t *v2;

  return sub_1005936C0(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_100594EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100595120((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100594204, a2, a3, a4);
}

uint64_t sub_100594F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100595120((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100594268, a2, a3, a4);
}

unint64_t sub_100594F10()
{
  unint64_t result;

  result = qword_100BF1E28;
  if (!qword_100BF1E28)
  {
    result = swift_getWitnessTable(&unk_1009C0238, &type metadata for TrackVisibilityModifier);
    atomic_store(result, (unint64_t *)&qword_100BF1E28);
  }
  return result;
}

unint64_t sub_100594F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BF1E38;
  if (!qword_100BF1E38)
  {
    v1 = sub_100075EB0(&qword_100BF1E30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1E38);
  }
  return result;
}

uint64_t sub_100594FB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100593B1C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100594FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_100593DE8(v4[4], v4[2], v4[3], a4);
}

uint64_t sub_100594FC8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100593F58(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_100594FD4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100BF1E88;
  if (!qword_100BF1E88)
  {
    v1 = sub_100075EB0(&qword_100BF1E80);
    v2[0] = sub_100075EB0(&qword_100BE74F8);
    v2[1] = sub_100075EB0(&qword_100BCF180);
    v2[2] = sub_1005950A4();
    v2[3] = sub_10005F124(&qword_100BCF188, &qword_100BCF180, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100BF1E88);
  }
  return result;
}

unint64_t sub_1005950A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE7500;
  if (!qword_100BE7500)
  {
    v1 = sub_100075EB0(&qword_100BE74F8);
    sub_1004CDA80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE7500);
  }
  return result;
}

uint64_t sub_100595114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100595120((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100594124, a2, a3, a4);
}

uint64_t sub_100595120(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DetailContainerView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

double sub_100595180@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100594D44(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10059518C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_100427EAC(a1, a2, a3);
  return a1;
}

uint64_t sub_1005951A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF1EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005951EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BF1EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100595234(uint64_t a1, uint64_t *a2)
{
  void (*v3)(uint64_t);

  sub_1000BA294(a2);
  sub_1000C092C();
  v3(a1);
  return a1;
}

double sub_100595268(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  double result;

  if (a4 != 255)
    return sub_100427E78(a1, a2, a3);
  return result;
}

uint64_t sub_100595288(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for NavigationPath(255);
  v4 = sub_100075EB0(&qword_100BF1E08);
  v5 = type metadata accessor for ModifiedContent(255, v1, v4);
  v33 = v2;
  v34 = sub_10005F124(&qword_100BF1E10, &qword_100BF1E08, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v6 = sub_1000CCF74();
  v12 = sub_1000BC5B0(v6, v7, v8, v9, v10, v11);
  v13 = sub_100075EB0(&qword_100BF1E18);
  v29 = v5;
  v30 = v6;
  v14 = sub_10009885C((uint64_t)&v29, (uint64_t)&opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>);
  v15 = sub_10005F124(&qword_100BF1E20, &qword_100BF1E18, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v21 = sub_1000BC5B0(v15, v16, v17, v18, v19, v20);
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v22 = sub_10009885C((uint64_t)&v29, (uint64_t)&opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>);
  v23 = type metadata accessor for NavigationStack(255, v3, v21, v22);
  v24 = sub_100075EB0(&qword_100BE21D8);
  v25 = type metadata accessor for ModifiedContent(255, v23, v24);
  v26 = type metadata accessor for ModifiedContent(255, v25, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for TrackVisibilityModifier);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v23);
  sub_10005F124(&qword_100BE21D0, &qword_100BE21D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  sub_1000CCF74();
  sub_1001CDA94();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  sub_100594F10();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
}

uint64_t sub_100595484()
{
  uint64_t v0;

  sub_100021A14(v0 + OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory_lastViewModel, &qword_100BC46B8);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0
                                                           + OBJC_IVAR____TtC7Weather30LocationViewerViewModelFactory_appConfigurationManager));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005954CC()
{
  return type metadata accessor for LocationViewerViewModelFactory(0);
}

void sub_1005954D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;

  v4 = type metadata accessor for WeatherMapOverlayKind(0);
  __chkstk_darwin(v4);
  swift_bridgeObjectRetain();
  v5 = (char *)sub_100595568 + 4 * word_1009B0BB0[sub_100414254(a1, a2)];
  __asm { BR              X10 }
}

uint64_t sub_100595568()
{
  unsigned int v0;

  if (qword_100BC21F8 != -1)
    swift_once(&qword_100BC21F8, sub_100595AC0);
  v0 = byte_100CAED58;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_10059587C()
{
  uint64_t v0;

  sub_1000C4B90();
  sub_1000BA45C();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, 0x8000000100A0C0D0, "Weather/PerformanceTestDefinitions_iPhone.swift", 47, 2);
  __break(1u);
}

uint64_t type metadata accessor for PerformanceTestDefinitions_iPhone()
{
  return objc_opt_self(_TtC7Weather33PerformanceTestDefinitions_iPhone);
}

void sub_100595AAC(uint64_t a1, uint64_t a2)
{
  sub_1005954D4(a1, a2);
}

uint64_t sub_100595AC0()
{
  uint64_t result;

  result = sub_100595AE4();
  byte_100CAED58 = 0;
  qword_100CAED60 = result;
  return result;
}

uint64_t sub_100595AE4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v12);
  swift_release();
  v4 = v12;
  v5 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v5, 3);
  v2[*(int *)(v0 + 20)] = 0;
  v6 = sub_1000BA294(&qword_100BC5A28);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v7 + 56) = &type metadata for Scroll;
  *(_QWORD *)(v7 + 64) = &off_100B6B770;
  *(_QWORD *)(v7 + 32) = sub_100595CFC;
  *(_QWORD *)(v7 + 40) = 0;
  v8 = swift_allocObject(v6, 352, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v8 + 56) = &type metadata for Mica;
  *(_QWORD *)(v8 + 64) = &off_100B80EE8;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 96) = &type metadata for Delay;
  *(_QWORD *)(v8 + 104) = &off_100B674E0;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v8 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v8 + 112) = v4;
  *(_QWORD *)(v8 + 176) = &type metadata for Delay;
  *(_QWORD *)(v8 + 184) = &off_100B674E0;
  *(_QWORD *)(v8 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 216) = v0;
  *(_QWORD *)(v8 + 224) = &off_100B7C430;
  v9 = sub_10005F164((_QWORD *)(v8 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v9, type metadata accessor for Navigate);
  *(_QWORD *)(v8 + 256) = &type metadata for Delay;
  *(_QWORD *)(v8 + 264) = &off_100B674E0;
  *(_QWORD *)(v8 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 296) = &type metadata for Measure;
  *(_QWORD *)(v8 + 304) = &off_100B65218;
  *(_QWORD *)(v8 + 272) = v7;
  *(_QWORD *)(v8 + 336) = &type metadata for Mica;
  *(_QWORD *)(v8 + 344) = &off_100B80EE8;
  *(_BYTE *)(v8 + 312) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  return v8;
}

uint64_t sub_100595CFC(double a1, double a2, double a3, double a4)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGRect v14;

  v14 = CGRectInset(*(CGRect *)&a1, 10.0, 120.0);
  x = v14.origin.x;
  y = v14.origin.y;
  width = v14.size.width;
  height = v14.size.height;
  v8 = v14.size.height * 3.0;
  v9 = sub_1000BA294(&qword_100BF2058);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v10 + 56) = &type metadata for Down;
  *(_QWORD *)(v10 + 64) = &off_100B666B8;
  v11 = swift_allocObject(&unk_100B81480, 64, 7);
  *(_QWORD *)(v10 + 32) = v11;
  *(_BYTE *)(v11 + 16) = 1;
  *(CGFloat *)(v11 + 24) = x;
  *(CGFloat *)(v11 + 32) = y;
  *(CGFloat *)(v11 + 40) = width;
  *(CGFloat *)(v11 + 48) = height;
  *(CGFloat *)(v11 + 56) = v8;
  *(_QWORD *)(v10 + 96) = &type metadata for Up;
  *(_QWORD *)(v10 + 104) = &off_100B6A800;
  v12 = swift_allocObject(&unk_100B81480, 64, 7);
  *(_QWORD *)(v10 + 72) = v12;
  *(_BYTE *)(v12 + 16) = 0;
  *(CGFloat *)(v12 + 24) = x;
  *(CGFloat *)(v12 + 32) = y;
  *(CGFloat *)(v12 + 40) = width;
  *(CGFloat *)(v12 + 48) = height;
  *(CGFloat *)(v12 + 56) = v8;
  return v10;
}

uint64_t sub_100595DFC()
{
  uint64_t result;

  result = sub_100595E24();
  byte_100CAED68 = 6;
  qword_100CAED70 = result;
  return result;
}

uint64_t sub_100595E24()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v12);
  swift_release();
  v4 = v12;
  v5 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v5, 3);
  v2[*(int *)(v0 + 20)] = 0;
  v6 = sub_100596004();
  v7 = sub_1000BA294(&qword_100BC5A28);
  v8 = swift_allocObject(v7, 352, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v8 + 56) = &type metadata for Mica;
  *(_QWORD *)(v8 + 64) = &off_100B80EE8;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 96) = &type metadata for Delay;
  *(_QWORD *)(v8 + 104) = &off_100B674E0;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v8 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v8 + 112) = v4;
  *(_QWORD *)(v8 + 176) = &type metadata for Delay;
  *(_QWORD *)(v8 + 184) = &off_100B674E0;
  *(_QWORD *)(v8 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 216) = v0;
  *(_QWORD *)(v8 + 224) = &off_100B7C430;
  v9 = sub_10005F164((_QWORD *)(v8 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v9, type metadata accessor for Navigate);
  *(_QWORD *)(v8 + 256) = &type metadata for Delay;
  *(_QWORD *)(v8 + 264) = &off_100B674E0;
  *(_QWORD *)(v8 + 232) = 0x4000000000000000;
  *(_QWORD *)(v8 + 296) = &type metadata for Measure;
  *(_QWORD *)(v8 + 304) = &off_100B65218;
  *(_QWORD *)(v8 + 272) = v6;
  *(_QWORD *)(v8 + 336) = &type metadata for Mica;
  *(_QWORD *)(v8 + 344) = &off_100B80EE8;
  *(_BYTE *)(v8 + 312) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  return v8;
}

uint64_t sub_100596004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v0 = type metadata accessor for DispatchAction(0);
  v36 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - v3;
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - v6;
  v8 = type metadata accessor for Location(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Location.newYork.getter(v10);
  Location.identifier.getter(v13);
  v14 = type metadata accessor for ListViewAction(0);
  swift_storeEnumTagMultiPayload(v7, v14, 2);
  v15 = type metadata accessor for ViewAction(0);
  swift_storeEnumTagMultiPayload(v7, v15, 0);
  v16 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v7, v16, 6);
  v7[*(int *)(v0 + 20)] = 1;
  v17 = *(int *)(sub_1000BA294(&qword_100BDDB50) + 48);
  v18 = (uint64_t)&v4[*(int *)(sub_1000BA294(&qword_100BC3480) + 48)];
  v38 = v9;
  v39 = v8;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v4, v12, v8);
  v19 = type metadata accessor for SavedLocation(0);
  swift_storeEnumTagMultiPayload(v4, v19, 0);
  v20 = type metadata accessor for LocationOfInterest(0);
  _s7Weather24LocationCompositionStateOwst_0(v18, 1, 1, v20);
  v21 = enum case for LocationModel.saved(_:);
  v22 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v4, v21, v22);
  v4[v17] = 1;
  v23 = v36;
  swift_storeEnumTagMultiPayload(v4, v14, 0);
  swift_storeEnumTagMultiPayload(v4, v15, 0);
  swift_storeEnumTagMultiPayload(v4, v16, 6);
  v4[*(int *)(v23 + 20)] = 1;
  if (qword_100BC1F88 != -1)
    swift_once(&qword_100BC1F88, sub_10032E39C);
  v24 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", xmmword_100CAE690, *(double *)&qword_100CAE6A0, unk_100CAE6A8, unk_100CAE6A8);
  objc_msgSend(v24, "ts_settlingDuration");
  v26 = v25;

  v27 = (uint64_t)v37;
  Location.identifier.getter(v28);
  v29 = type metadata accessor for LocationViewerViewAction(0);
  swift_storeEnumTagMultiPayload(v27, v29, 2);
  swift_storeEnumTagMultiPayload(v27, v15, 1);
  swift_storeEnumTagMultiPayload(v27, v16, 6);
  *(_BYTE *)(v27 + *(int *)(v23 + 20)) = 0;
  v30 = sub_1000BA294(&qword_100BC5A28);
  v31 = swift_allocObject(v30, 192, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1009891D0;
  *(_QWORD *)(v31 + 56) = v23;
  *(_QWORD *)(v31 + 64) = &off_100B9B100;
  v32 = sub_10005F164((_QWORD *)(v31 + 32));
  sub_1000A6594((uint64_t)v7, (uint64_t)v32, type metadata accessor for DispatchAction);
  *(_QWORD *)(v31 + 96) = v23;
  *(_QWORD *)(v31 + 104) = &off_100B9B100;
  v33 = sub_10005F164((_QWORD *)(v31 + 72));
  sub_1000A6594((uint64_t)v4, (uint64_t)v33, type metadata accessor for DispatchAction);
  *(_QWORD *)(v31 + 136) = &type metadata for Delay;
  *(_QWORD *)(v31 + 144) = &off_100B674E0;
  *(_QWORD *)(v31 + 112) = v26;
  *(_QWORD *)(v31 + 176) = v23;
  *(_QWORD *)(v31 + 184) = &off_100B9B100;
  v34 = sub_10005F164((_QWORD *)(v31 + 152));
  sub_100596CC8(v27, (uint64_t)v34);
  sub_10006BD20((uint64_t)v4, type metadata accessor for DispatchAction);
  sub_10006BD20((uint64_t)v7, type metadata accessor for DispatchAction);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  return v31;
}

uint64_t sub_1005963F0()
{
  uint64_t result;

  result = sub_100596418();
  byte_100CAED78 = 2;
  qword_100CAED80 = result;
  return result;
}

uint64_t sub_100596418()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchAction(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Location.newYork.getter(v4);
  v7 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v6, v7, 2);
  v8 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v6, v8, 17);
  v6[*(int *)(v3 + 20)] = 0;
  v9 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v9);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v25);
  swift_release();
  v24 = v25;
  v10 = enum case for TemperatureChartKind.actual(_:);
  v11 = type metadata accessor for TemperatureChartKind(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v2, v10, v11);
  v12 = enum case for DetailCondition.conditions(_:);
  v13 = type metadata accessor for DetailCondition(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v2, v12, v13);
  v14 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v14, 0);
  v2[*(int *)(v0 + 20)] = 0;
  v15 = (_QWORD *)swift_allocObject(&unk_100B814A8, 40, 7);
  v15[2] = sub_1005967B8;
  v15[3] = 0;
  v15[4] = 0x3FF0000000000000;
  swift_retain();
  v16 = sub_1005967D8((uint64_t)sub_1005967C0, 0, 10.0);
  v17 = sub_1000BA294(&qword_100BC5A28);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v18 + 56) = &type metadata for Repeat;
  *(_QWORD *)(v18 + 64) = &off_100B8D5C0;
  *(_QWORD *)(v18 + 32) = 5;
  *(_QWORD *)(v18 + 40) = v16;
  v19 = swift_allocObject(v17, 472, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100989890;
  *(_QWORD *)(v19 + 56) = &type metadata for Mica;
  *(_QWORD *)(v19 + 64) = &off_100B80EE8;
  *(_BYTE *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 96) = v3;
  *(_QWORD *)(v19 + 104) = &off_100B9B100;
  v20 = sub_10005F164((_QWORD *)(v19 + 72));
  sub_1000A6594((uint64_t)v6, (uint64_t)v20, type metadata accessor for DispatchAction);
  *(_QWORD *)(v19 + 136) = &type metadata for Delay;
  *(_QWORD *)(v19 + 144) = &off_100B674E0;
  *(_QWORD *)(v19 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(v19 + 176) = &type metadata for UpdateWeather;
  *(_QWORD *)(v19 + 184) = &off_100B9D1D0;
  *(_BYTE *)(v19 + 152) = v24;
  *(_QWORD *)(v19 + 216) = &type metadata for Delay;
  *(_QWORD *)(v19 + 224) = &off_100B674E0;
  *(_QWORD *)(v19 + 192) = 0x3FF0000000000000;
  *(_QWORD *)(v19 + 256) = v0;
  *(_QWORD *)(v19 + 264) = &off_100B7C430;
  v21 = sub_10005F164((_QWORD *)(v19 + 232));
  sub_1000A6594((uint64_t)v2, (uint64_t)v21, type metadata accessor for Navigate);
  *(_QWORD *)(v19 + 296) = &type metadata for Delay;
  *(_QWORD *)(v19 + 304) = &off_100B674E0;
  *(_QWORD *)(v19 + 272) = 0x3FF0000000000000;
  *(_QWORD *)(v19 + 336) = &type metadata for Swipe;
  *(_QWORD *)(v19 + 344) = &off_100B77910;
  *(_QWORD *)(v19 + 312) = sub_100596D0C;
  *(_QWORD *)(v19 + 320) = v15;
  *(_QWORD *)(v19 + 376) = &type metadata for Delay;
  *(_QWORD *)(v19 + 384) = &off_100B674E0;
  *(_QWORD *)(v19 + 352) = 0x3FF0000000000000;
  *(_QWORD *)(v19 + 416) = &type metadata for Measure;
  *(_QWORD *)(v19 + 424) = &off_100B65218;
  *(_QWORD *)(v19 + 392) = v18;
  *(_QWORD *)(v19 + 456) = &type metadata for Mica;
  *(_QWORD *)(v19 + 464) = &off_100B80EE8;
  *(_BYTE *)(v19 + 432) = 1;
  swift_release();
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  sub_10006BD20((uint64_t)v6, type metadata accessor for DispatchAction);
  return v19;
}

double sub_1005967B8(double a1, double a2, double a3, double a4)
{
  return sub_1005967CC(a1, a2, a3, a4, 0.0);
}

double sub_1005967C0(double a1, double a2, double a3, double a4)
{
  return sub_1005967CC(a1, a2, a3, a4, 100.0);
}

double sub_1005967CC(double a1, double a2, double a3, double a4, CGFloat a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, a5, 100.0);
  return result;
}

uint64_t sub_1005967D8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = swift_allocObject(&unk_100B814D0, 40, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  v7 = sub_1000BA294(&qword_100BC5A28);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v8 + 56) = &type metadata for Swipe;
  *(_QWORD *)(v8 + 64) = &off_100B77910;
  *(_QWORD *)(v8 + 32) = sub_100596CA0;
  *(_QWORD *)(v8 + 40) = v6;
  *(_QWORD *)(v8 + 96) = &type metadata for Delay;
  *(_QWORD *)(v8 + 104) = &off_100B674E0;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  swift_retain();
  return v8;
}

uint64_t sub_10059689C(double (*a1)(void), double a2, double a3, double a4, double a5, double a6)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = sub_1000BA294(&qword_100BF2060);
  v15 = sub_1000D0970(v14);
  *(_OWORD *)(v15 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v15 + 56) = &type metadata for Next;
  *(_QWORD *)(v15 + 64) = &off_100B8BCB8;
  v16 = sub_1000D0970((uint64_t)&unk_100B814F8);
  *(_QWORD *)(v15 + 32) = v16;
  *(_BYTE *)(v16 + 16) = 0;
  *(double *)(v16 + 24) = v7;
  *(_QWORD *)(v16 + 32) = v9;
  *(_QWORD *)(v16 + 40) = v11;
  *(_QWORD *)(v16 + 48) = v13;
  *(_QWORD *)(v16 + 56) = 1;
  *(double *)(v16 + 64) = a6;
  return v15;
}

uint64_t sub_100596948()
{
  uint64_t result;

  result = sub_100596970();
  byte_100CAED88 = 10;
  qword_100CAED90 = result;
  return result;
}

uint64_t sub_100596970()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __n128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for DispatchAction(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SettingReader(0);
  static SettingReader.shared.getter(v3);
  if (qword_100BC2138 != -1)
    swift_once(&qword_100BC2138, sub_1004EB7A4);
  SettingReader.read<A>(_:)(&v14);
  v4 = swift_release();
  v5 = v14;
  static Location.london.getter(v4);
  v6 = type metadata accessor for PerformanceTestAction(0);
  swift_storeEnumTagMultiPayload(v2, v6, 2);
  v7 = type metadata accessor for MainAction(0);
  swift_storeEnumTagMultiPayload(v2, v7, 17);
  v2[*(int *)(v0 + 20)] = 0;
  v8 = sub_100596B70();
  v9 = sub_1000BA294(&qword_100BC5A28);
  v10 = swift_allocObject(v9, 352, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10098BCC0;
  *(_QWORD *)(v10 + 56) = &type metadata for Mica;
  *(_QWORD *)(v10 + 64) = &off_100B80EE8;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 96) = &type metadata for Delay;
  *(_QWORD *)(v10 + 104) = &off_100B674E0;
  *(_QWORD *)(v10 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 136) = &type metadata for UpdateWeather;
  *(_QWORD *)(v10 + 144) = &off_100B9D1D0;
  *(_BYTE *)(v10 + 112) = v5;
  *(_QWORD *)(v10 + 176) = &type metadata for Delay;
  *(_QWORD *)(v10 + 184) = &off_100B674E0;
  *(_QWORD *)(v10 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v10 + 216) = v0;
  *(_QWORD *)(v10 + 224) = &off_100B9B100;
  v11 = sub_10005F164((_QWORD *)(v10 + 192));
  sub_1000A6594((uint64_t)v2, (uint64_t)v11, type metadata accessor for DispatchAction);
  *(_QWORD *)(v10 + 256) = &type metadata for Delay;
  *(_QWORD *)(v10 + 264) = &off_100B674E0;
  *(_QWORD *)(v10 + 232) = 0x4000000000000000;
  *(_QWORD *)(v10 + 296) = &type metadata for Measure;
  *(_QWORD *)(v10 + 304) = &off_100B65218;
  *(_QWORD *)(v10 + 272) = v8;
  *(_QWORD *)(v10 + 336) = &type metadata for Mica;
  *(_QWORD *)(v10 + 344) = &off_100B80EE8;
  *(_BYTE *)(v10 + 312) = 1;
  sub_10006BD20((uint64_t)v2, type metadata accessor for DispatchAction);
  return v10;
}

uint64_t sub_100596B70()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v0 = type metadata accessor for Navigate(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Navigate.Destination(0);
  swift_storeEnumTagMultiPayload(v2, v3, 3);
  v2[*(int *)(v0 + 20)] = 1;
  v4 = sub_1000BA294(&qword_100BC5A28);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v5 + 56) = v0;
  *(_QWORD *)(v5 + 64) = &off_100B7C430;
  v6 = sub_10005F164((_QWORD *)(v5 + 32));
  sub_1000A6594((uint64_t)v2, (uint64_t)v6, type metadata accessor for Navigate);
  *(_QWORD *)(v5 + 96) = &type metadata for Delay;
  *(_QWORD *)(v5 + 104) = &off_100B674E0;
  *(_QWORD *)(v5 + 72) = 0x4008000000000000;
  sub_10006BD20((uint64_t)v2, type metadata accessor for Navigate);
  return v5;
}

uint64_t sub_100596C70()
{
  uint64_t v0;

  return sub_100099AB0(v0, 64);
}

uint64_t sub_100596C7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100596CA0(double a1, double a2, double a3, double a4)
{
  uint64_t v4;

  return sub_10059689C(*(double (**)(void))(v4 + 16), a1, a2, a3, a4, *(double *)(v4 + 32));
}

uint64_t sub_100596CBC()
{
  uint64_t v0;

  return sub_100099AB0(v0, 72);
}

uint64_t sub_100596CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100596D14(int a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  void (*v23)(char *, _QWORD, uint64_t);
  void (*v24)(uint64_t, char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  v3 = v2;
  v37 = a2;
  v36 = a1;
  v38 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = (_BYTE *)(v6 - v5);
  v8 = type metadata accessor for DetailType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v34[0] = (char *)v34 - v13;
  v14 = type metadata accessor for DetailViewVisibilityTrackerModel(0);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100098728();
  v18 = v17 - v16;
  v20 = v2[7];
  v19 = v2[8];
  sub_1000C4B9C();
  (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 32))(v20);
  v21 = v3[7];
  v35 = v3[8];
  v34[1] = sub_1000C4B9C();
  v22 = (unsigned int *)&enum case for DetailType.temperatureAverages(_:);
  v23 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v36 &= 1u;
  if (v36)
    v22 = (unsigned int *)&enum case for DetailType.precipitationAverages(_:);
  v23(v11, *v22, v8);
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v25 = (char *)v34[0];
  v24(v34[0], v11, v8);
  v26 = v18 + *(int *)(v14 + 20);
  v27 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v37, v27);
  v28 = v18 + *(int *)(v14 + 24);
  v29 = enum case for DetailViewOrigin.selector(_:);
  v30 = type metadata accessor for DetailViewOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v28, v29, v30);
  v24(v18, v25, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 + 8) + 24))(v18, v21);
  sub_10006BD20(v18, type metadata accessor for DetailViewVisibilityTrackerModel);
  v31 = (uint64_t (*)(uint64_t))v3[2];
  *v7 = v36;
  v32 = sub_1000DDCDC();
  swift_storeEnumTagMultiPayload(v7, v32, 0);
  sub_1000CCF80((uint64_t)v7, v38);
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  swift_retain();
  sub_1000B49C8((uint64_t)v7, (uint64_t)v39, v31);
  sub_100159C94((uint64_t)v39);
  sub_10006BD20((uint64_t)v7, type metadata accessor for MainAction);
  return sub_10009880C();
}

void sub_100596F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  _BYTE v10[48];

  v3 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v8 = *(uint64_t (**)(uint64_t))(v1 + 16);
  sub_1005970F0(a1, v6 - v5);
  v9 = sub_1000DDCDC();
  swift_storeEnumTagMultiPayload(v7, v9, 1);
  sub_1000CCF80(v7, v3);
  sub_1000BA5F4();
  sub_1000B49C8(v7, (uint64_t)v10, v8);
  sub_100159C94((uint64_t)v10);
  sub_10006BD20(v7, type metadata accessor for MainAction);
  sub_10009880C();
  sub_10004A2A0();
}

void sub_100597030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  _BYTE v8[48];

  v1 = sub_100099ACC();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = *(uint64_t (**)(uint64_t))(v0 + 16);
  v7 = sub_1000DDCDC();
  swift_storeEnumTagMultiPayload(v5, v7, 2);
  sub_1000CCF80(v5, v1);
  sub_1000BA5F4();
  sub_1000B49C8(v5, (uint64_t)v8, v6);
  sub_100159C94((uint64_t)v8);
  sub_10006BD20(v5, type metadata accessor for MainAction);
  sub_10009880C();
  sub_10004A2A0();
}

uint64_t type metadata accessor for AveragesDetailInteractor()
{
  return objc_opt_self(_TtC7Weather24AveragesDetailInteractor);
}

uint64_t sub_1005970F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailHeroChartLollipopPosition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100597134(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v28;
  int *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t active;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int EnumCaseMultiPayload;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __n128 v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t, uint64_t, __n128);
  void *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10008D47C(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 16, a2 + 16);
    v10 = *(int *)(a3 + 24);
    v155 = a1;
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = *(_QWORD *)(a2 + v10 + 8);
    *(_QWORD *)v11 = *(_QWORD *)(a2 + v10);
    *(_QWORD *)(v11 + 8) = v13;
    v14 = *(_QWORD *)(a2 + v10 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v11 + 16) = v14;
    *(_QWORD *)(v11 + 24) = v15;
    v16 = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
    *(_QWORD *)(v11 + 40) = v16;
    v17 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v11 + 56) = v17;
    v18 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v11 + 72) = v18;
    *(_QWORD *)(v11 + 80) = *(_QWORD *)(v12 + 80);
    *(_OWORD *)(v11 + 88) = *(_OWORD *)(v12 + 88);
    v19 = *(_QWORD *)(v12 + 120);
    v158 = *(void **)(v12 + 112);
    v160 = *(void **)(v12 + 104);
    v20 = *(_BYTE *)(v12 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001A41A0(v160, v158, v19, v20);
    *(_QWORD *)(v11 + 104) = v160;
    *(_QWORD *)(v11 + 112) = v158;
    *(_QWORD *)(v11 + 120) = v19;
    *(_BYTE *)(v11 + 128) = v20;
    v21 = *(_QWORD *)(v12 + 144);
    *(_QWORD *)(v11 + 136) = *(_QWORD *)(v12 + 136);
    *(_QWORD *)(v11 + 144) = v21;
    *(_QWORD *)(v11 + 152) = *(_QWORD *)(v12 + 152);
    *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
    v22 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
    v23 = v22[12];
    v24 = v11 + v23;
    v25 = v12 + v23;
    v26 = type metadata accessor for Date(0);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    v28 = swift_bridgeObjectRetain();
    v27(v24, v25, v26, v28);
    v29 = (int *)type metadata accessor for PeakUpperMarkModel(0);
    *(_QWORD *)(v24 + v29[5]) = *(_QWORD *)(v25 + v29[5]);
    v30 = v29[6];
    v31 = (_QWORD *)(v24 + v30);
    v32 = (_QWORD *)(v25 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = v29[7];
    v35 = (_QWORD *)(v24 + v34);
    v36 = (_QWORD *)(v25 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = v29[8];
    v39 = (_QWORD *)(v24 + v38);
    v40 = (_QWORD *)(v25 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v22[13];
    v43 = v11 + v42;
    v44 = v12 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = swift_bridgeObjectRetain();
    v27(v43, v44, v26, v45);
    *(_QWORD *)(v43 + v29[5]) = *(_QWORD *)(v44 + v29[5]);
    v46 = v29[6];
    v47 = (_QWORD *)(v43 + v46);
    v48 = (_QWORD *)(v44 + v46);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = v29[7];
    v51 = (_QWORD *)(v43 + v50);
    v52 = (_QWORD *)(v44 + v50);
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    v54 = v29[8];
    v55 = (_QWORD *)(v43 + v54);
    v56 = (_QWORD *)(v44 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v22[14];
    v159 = v12;
    v161 = v11;
    v59 = v11 + v58;
    v60 = v12 + v58;
    v61 = type metadata accessor for DetailHeroChartLollipopModel(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v156 = v61;
    v157 = v27;
    if (swift_getEnumCaseMultiPayload(v60) == 1)
    {
      *(_QWORD *)v59 = *(_QWORD *)v60;
      active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
      v63 = *(int *)(active + 20);
      v64 = v59 + v63;
      v65 = v60 + v63;
      ((void (*)(uint64_t, uint64_t, uint64_t))v27)(v59 + v63, v60 + v63, v26);
      v66 = (int *)type metadata accessor for LollipopMarkModel(0);
      *(_QWORD *)(v64 + v66[5]) = *(_QWORD *)(v65 + v66[5]);
      *(_QWORD *)(v64 + v66[6]) = *(_QWORD *)(v65 + v66[6]);
      *(_QWORD *)(v64 + v66[7]) = *(_QWORD *)(v65 + v66[7]);
      v67 = *(int *)(active + 24);
      v68 = v59 + v67;
      v69 = v60 + v67;
      v70 = type metadata accessor for LollipopDetailViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v69);
      v153 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        v85 = *(_QWORD *)(v69 + 8);
        *(_QWORD *)v68 = *(_QWORD *)v69;
        *(_QWORD *)(v68 + 8) = v85;
        v151 = v70;
        v86 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v87 = v86[5];
        v150 = v68 + v87;
        v88 = v69 + v87;
        v89 = type metadata accessor for AttributedString(0);
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v89 - 8) + 16);
        v91 = swift_bridgeObjectRetain();
        v90(v150, v88, v89, v91);
        v92 = v86[6];
        v93 = (_QWORD *)(v68 + v92);
        v94 = (_QWORD *)(v69 + v92);
        v95 = v94[1];
        *v93 = *v94;
        v93[1] = v95;
        v96 = v86[7];
        v97 = (_QWORD *)(v68 + v96);
        v98 = (_QWORD *)(v69 + v96);
        v99 = v98[1];
        *v97 = *v98;
        v97[1] = v99;
        v100 = v86[8];
        v101 = (_QWORD *)(v68 + v100);
        v102 = (_QWORD *)(v69 + v100);
        v103 = v102[1];
        *v101 = *v102;
        v101[1] = v103;
        v104 = v86[9];
        v105 = (_QWORD *)(v68 + v104);
        v106 = (_QWORD *)(v69 + v104);
        v107 = v106[1];
        *v105 = *v106;
        v105[1] = v107;
        v108 = v86[10];
        v109 = (_QWORD *)(v68 + v108);
        v110 = (_QWORD *)(v69 + v108);
        v111 = v110[1];
        *v109 = *v110;
        v109[1] = v111;
        v112 = v86[11];
        v70 = v151;
        *(_BYTE *)(v68 + v112) = *(_BYTE *)(v69 + v112);
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v77 = v155;
          v113 = *(_QWORD *)(v69 + 8);
          *(_QWORD *)v68 = *(_QWORD *)v69;
          *(_QWORD *)(v68 + 8) = v113;
          v114 = *(_QWORD *)(v69 + 24);
          *(_QWORD *)(v68 + 16) = *(_QWORD *)(v69 + 16);
          *(_QWORD *)(v68 + 24) = v114;
          v115 = *(_QWORD *)(v69 + 40);
          *(_QWORD *)(v68 + 32) = *(_QWORD *)(v69 + 32);
          *(_QWORD *)(v68 + 40) = v115;
          goto LABEL_13;
        }
        v72 = *(_QWORD *)(v69 + 8);
        *(_QWORD *)v68 = *(_QWORD *)v69;
        *(_QWORD *)(v68 + 8) = v72;
        v73 = *(_QWORD *)(v69 + 24);
        *(_QWORD *)(v68 + 16) = *(_QWORD *)(v69 + 16);
        *(_QWORD *)(v68 + 24) = v73;
        v74 = *(_QWORD *)(v69 + 40);
        *(_QWORD *)(v68 + 32) = *(_QWORD *)(v69 + 32);
        *(_QWORD *)(v68 + 40) = v74;
        v75 = *(_QWORD *)(v69 + 56);
        *(_QWORD *)(v68 + 48) = *(_QWORD *)(v69 + 48);
        *(_QWORD *)(v68 + 56) = v75;
        *(_BYTE *)(v68 + 64) = *(_BYTE *)(v69 + 64);
        *(_BYTE *)(v68 + 65) = *(_BYTE *)(v69 + 65);
      }
      swift_bridgeObjectRetain();
      v77 = v155;
LABEL_13:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v68, v70, v153);
      v116 = 1;
LABEL_18:
      v148 = swift_storeEnumTagMultiPayload(v59, v156, v116);
      v157(v161 + v22[15], v159 + v22[15], v26, v148);
      ((void (*)(uint64_t, uint64_t, uint64_t))v157)(v161 + v22[16], v159 + v22[16], v26);
      return v77;
    }
    v78 = type metadata accessor for LollipopDetailViewModel(0);
    v79 = swift_getEnumCaseMultiPayload(v60);
    v80 = v79;
    if ((_DWORD)v79 == 2)
    {
      v117 = *(_QWORD *)(v60 + 8);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *(_QWORD *)(v59 + 8) = v117;
      v154 = v78;
      v118 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v119 = v118[5];
      v152 = v59 + v119;
      v120 = v60 + v119;
      v121 = type metadata accessor for AttributedString(0);
      v122 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v121 - 8) + 16);
      v123 = swift_bridgeObjectRetain();
      v122(v152, v120, v121, v123);
      v124 = v118[6];
      v125 = (_QWORD *)(v59 + v124);
      v126 = (_QWORD *)(v60 + v124);
      v127 = v126[1];
      *v125 = *v126;
      v125[1] = v127;
      v128 = v118[7];
      v129 = (_QWORD *)(v59 + v128);
      v130 = (_QWORD *)(v60 + v128);
      v131 = v130[1];
      *v129 = *v130;
      v129[1] = v131;
      v132 = v118[8];
      v133 = (_QWORD *)(v59 + v132);
      v134 = (_QWORD *)(v60 + v132);
      v135 = v134[1];
      *v133 = *v134;
      v133[1] = v135;
      v136 = v118[9];
      v137 = (_QWORD *)(v59 + v136);
      v138 = (_QWORD *)(v60 + v136);
      v139 = v138[1];
      *v137 = *v138;
      v137[1] = v139;
      v140 = v118[10];
      v141 = (_QWORD *)(v59 + v140);
      v142 = (_QWORD *)(v60 + v140);
      v143 = v142[1];
      *v141 = *v142;
      v141[1] = v143;
      v144 = v118[11];
      v78 = v154;
      *(_BYTE *)(v59 + v144) = *(_BYTE *)(v60 + v144);
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((_DWORD)v79 != 1)
      {
        v77 = v155;
        v145 = *(_QWORD *)(v60 + 8);
        *(_QWORD *)v59 = *(_QWORD *)v60;
        *(_QWORD *)(v59 + 8) = v145;
        v146 = *(_QWORD *)(v60 + 24);
        *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
        *(_QWORD *)(v59 + 24) = v146;
        v147 = *(_QWORD *)(v60 + 40);
        *(_QWORD *)(v59 + 32) = *(_QWORD *)(v60 + 32);
        *(_QWORD *)(v59 + 40) = v147;
        goto LABEL_17;
      }
      v81 = *(_QWORD *)(v60 + 8);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *(_QWORD *)(v59 + 8) = v81;
      v82 = *(_QWORD *)(v60 + 24);
      *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
      *(_QWORD *)(v59 + 24) = v82;
      v83 = *(_QWORD *)(v60 + 40);
      *(_QWORD *)(v59 + 32) = *(_QWORD *)(v60 + 32);
      *(_QWORD *)(v59 + 40) = v83;
      v84 = *(_QWORD *)(v60 + 56);
      *(_QWORD *)(v59 + 48) = *(_QWORD *)(v60 + 48);
      *(_QWORD *)(v59 + 56) = v84;
      *(_BYTE *)(v59 + 64) = *(_BYTE *)(v60 + 64);
      *(_BYTE *)(v59 + 65) = *(_BYTE *)(v60 + 65);
    }
    swift_bridgeObjectRetain();
    v77 = v155;
LABEL_17:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v59, v78, v80);
    v116 = 0;
    goto LABEL_18;
  }
  v76 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v77 = v76 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v77;
}

uint64_t sub_1005977CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t active;
  int EnumCaseMultiPayload;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t);

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A44FC(*(void **)(v4 + 104), *(void **)(v4 + 112), *(_QWORD *)(v4 + 120), *(_BYTE *)(v4 + 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v6 = v4 + v5[12];
  v7 = type metadata accessor for Date(0);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v16(v6, v7);
  type metadata accessor for PeakUpperMarkModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v16)(v4 + v5[13], v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v4 + v5[14];
  type metadata accessor for DetailHeroChartLollipopModel(0);
  if (swift_getEnumCaseMultiPayload(v9) == 1)
  {
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    v16(v9 + *(int *)(active + 20), v7);
    v9 += *(int *)(active + 24);
  }
  type metadata accessor for LollipopDetailViewModel(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      v13 = v9 + *(int *)(type metadata accessor for TitleAndDetailLollipopDetailViewModel(0) + 20);
      v14 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      v12 = swift_bridgeObjectRelease();
      break;
  }
  ((void (*)(uint64_t, uint64_t, __n128))v16)(v4 + v5[15], v7, v12);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v4 + v5[16], v7);
}

uint64_t sub_100597A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t active;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t EnumCaseMultiPayload;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t, uint64_t, __n128);
  void *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 16, a2 + 16);
  v9 = *(int *)(a3 + 24);
  v156 = a1;
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a2 + v9 + 8);
  *(_QWORD *)v10 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(v10 + 8) = v12;
  v13 = *(_QWORD *)(a2 + v9 + 24);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + v9 + 16);
  *(_QWORD *)(v10 + 24) = v13;
  v14 = *(_QWORD *)(a2 + v9 + 32);
  v15 = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v10 + 32) = v14;
  *(_QWORD *)(v10 + 40) = v15;
  v16 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v10 + 48) = *(_QWORD *)(v11 + 48);
  *(_QWORD *)(v10 + 56) = v16;
  v17 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v10 + 72) = v17;
  *(_QWORD *)(v10 + 80) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(v11 + 88);
  v18 = *(_QWORD *)(v11 + 120);
  v152 = *(void **)(v11 + 112);
  v154 = *(void **)(v11 + 104);
  LOBYTE(a1) = *(_BYTE *)(v11 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A41A0(v154, v152, v18, a1);
  *(_QWORD *)(v10 + 104) = v154;
  *(_QWORD *)(v10 + 112) = v152;
  *(_QWORD *)(v10 + 120) = v18;
  *(_BYTE *)(v10 + 128) = a1;
  v19 = *(_QWORD *)(v11 + 144);
  *(_QWORD *)(v10 + 136) = *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v10 + 144) = v19;
  *(_QWORD *)(v10 + 152) = *(_QWORD *)(v11 + 152);
  *(_BYTE *)(v10 + 160) = *(_BYTE *)(v11 + 160);
  v20 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v21 = v20[12];
  v22 = v10 + v21;
  v23 = v11 + v21;
  v24 = type metadata accessor for Date(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  v26 = swift_bridgeObjectRetain();
  v25(v22, v23, v24, v26);
  v27 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v22 + v27[5]) = *(_QWORD *)(v23 + v27[5]);
  v28 = v27[6];
  v29 = (_QWORD *)(v22 + v28);
  v30 = (_QWORD *)(v23 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v27[7];
  v33 = (_QWORD *)(v22 + v32);
  v34 = (_QWORD *)(v23 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v27[8];
  v37 = (_QWORD *)(v22 + v36);
  v38 = (_QWORD *)(v23 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = v20[13];
  v41 = v10 + v40;
  v42 = v11 + v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = swift_bridgeObjectRetain();
  v25(v41, v42, v24, v43);
  *(_QWORD *)(v41 + v27[5]) = *(_QWORD *)(v42 + v27[5]);
  v44 = v27[6];
  v45 = (_QWORD *)(v41 + v44);
  v46 = (_QWORD *)(v42 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = v27[7];
  v49 = (_QWORD *)(v41 + v48);
  v50 = (_QWORD *)(v42 + v48);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = v27[8];
  v53 = (_QWORD *)(v41 + v52);
  v54 = (_QWORD *)(v42 + v52);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = v20[14];
  v153 = v11;
  v155 = v10;
  v57 = v10 + v56;
  v58 = v11 + v56;
  v59 = type metadata accessor for DetailHeroChartLollipopModel(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v150 = v59;
  v151 = v25;
  if (swift_getEnumCaseMultiPayload(v58) != 1)
  {
    v75 = type metadata accessor for LollipopDetailViewModel(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v58);
    v77 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v149 = v75;
      v114 = *(_QWORD *)(v58 + 8);
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *(_QWORD *)(v57 + 8) = v114;
      v115 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v116 = v115[5];
      v147 = v57 + v116;
      v117 = v58 + v116;
      v118 = type metadata accessor for AttributedString(0);
      v119 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v118 - 8) + 16);
      v120 = swift_bridgeObjectRetain();
      v119(v147, v117, v118, v120);
      v121 = v115[6];
      v122 = (_QWORD *)(v57 + v121);
      v123 = (_QWORD *)(v58 + v121);
      v124 = v123[1];
      *v122 = *v123;
      v122[1] = v124;
      v125 = v115[7];
      v126 = (_QWORD *)(v57 + v125);
      v127 = (_QWORD *)(v58 + v125);
      v128 = v127[1];
      *v126 = *v127;
      v126[1] = v128;
      v129 = v115[8];
      v130 = (_QWORD *)(v57 + v129);
      v131 = (_QWORD *)(v58 + v129);
      v132 = v131[1];
      *v130 = *v131;
      v130[1] = v132;
      v133 = v115[9];
      v134 = (_QWORD *)(v57 + v133);
      v135 = (_QWORD *)(v58 + v133);
      v136 = v135[1];
      *v134 = *v135;
      v134[1] = v136;
      v137 = v115[10];
      v138 = (_QWORD *)(v57 + v137);
      v139 = (_QWORD *)(v58 + v137);
      v140 = v139[1];
      *v138 = *v139;
      v138[1] = v140;
      *(_BYTE *)(v57 + v115[11]) = *(_BYTE *)(v58 + v115[11]);
      swift_bridgeObjectRetain();
      v75 = v149;
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload != 1)
      {
        v141 = *(_QWORD *)(v58 + 8);
        *(_QWORD *)v57 = *(_QWORD *)v58;
        *(_QWORD *)(v57 + 8) = v141;
        v142 = *(_QWORD *)(v58 + 24);
        *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
        *(_QWORD *)(v57 + 24) = v142;
        v143 = *(_QWORD *)(v58 + 40);
        *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 32);
        *(_QWORD *)(v57 + 40) = v143;
        goto LABEL_15;
      }
      v78 = *(_QWORD *)(v58 + 8);
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *(_QWORD *)(v57 + 8) = v78;
      v79 = *(_QWORD *)(v58 + 24);
      *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
      *(_QWORD *)(v57 + 24) = v79;
      v80 = *(_QWORD *)(v58 + 40);
      *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 32);
      *(_QWORD *)(v57 + 40) = v80;
      v81 = *(_QWORD *)(v58 + 56);
      *(_QWORD *)(v57 + 48) = *(_QWORD *)(v58 + 48);
      *(_QWORD *)(v57 + 56) = v81;
      *(_BYTE *)(v57 + 64) = *(_BYTE *)(v58 + 64);
      *(_BYTE *)(v57 + 65) = *(_BYTE *)(v58 + 65);
    }
    swift_bridgeObjectRetain();
LABEL_15:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v57, v75, v77);
    v113 = 0;
    goto LABEL_16;
  }
  *(_QWORD *)v57 = *(_QWORD *)v58;
  active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
  v61 = *(int *)(active + 20);
  v62 = v57 + v61;
  v63 = v58 + v61;
  ((void (*)(uint64_t, uint64_t, uint64_t))v25)(v57 + v61, v58 + v61, v24);
  v64 = (int *)type metadata accessor for LollipopMarkModel(0);
  *(_QWORD *)(v62 + v64[5]) = *(_QWORD *)(v63 + v64[5]);
  *(_QWORD *)(v62 + v64[6]) = *(_QWORD *)(v63 + v64[6]);
  *(_QWORD *)(v62 + v64[7]) = *(_QWORD *)(v63 + v64[7]);
  v65 = *(int *)(active + 24);
  v66 = v57 + v65;
  v67 = v58 + v65;
  v68 = type metadata accessor for LollipopDetailViewModel(0);
  v69 = swift_getEnumCaseMultiPayload(v67);
  v70 = v69;
  if ((_DWORD)v69 == 2)
  {
    v148 = v68;
    v82 = *(_QWORD *)(v67 + 8);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *(_QWORD *)(v66 + 8) = v82;
    v83 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
    v84 = v83[5];
    v146 = v66 + v84;
    v85 = v67 + v84;
    v86 = type metadata accessor for AttributedString(0);
    v87 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v86 - 8) + 16);
    v88 = swift_bridgeObjectRetain();
    v87(v146, v85, v86, v88);
    v89 = v83[6];
    v90 = (_QWORD *)(v66 + v89);
    v91 = (_QWORD *)(v67 + v89);
    v92 = v91[1];
    *v90 = *v91;
    v90[1] = v92;
    v93 = v83[7];
    v94 = (_QWORD *)(v66 + v93);
    v95 = (_QWORD *)(v67 + v93);
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    v97 = v83[8];
    v98 = (_QWORD *)(v66 + v97);
    v99 = (_QWORD *)(v67 + v97);
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    v101 = v83[9];
    v102 = (_QWORD *)(v66 + v101);
    v103 = (_QWORD *)(v67 + v101);
    v104 = v103[1];
    *v102 = *v103;
    v102[1] = v104;
    v105 = v83[10];
    v106 = (_QWORD *)(v66 + v105);
    v107 = (_QWORD *)(v67 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v83[11];
    v70 = 2;
    *(_BYTE *)(v66 + v109) = *(_BYTE *)(v67 + v109);
    swift_bridgeObjectRetain();
    v68 = v148;
  }
  else
  {
    if ((_DWORD)v69 != 1)
    {
      v110 = *(_QWORD *)(v67 + 8);
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *(_QWORD *)(v66 + 8) = v110;
      v111 = *(_QWORD *)(v67 + 24);
      *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
      *(_QWORD *)(v66 + 24) = v111;
      v112 = *(_QWORD *)(v67 + 40);
      *(_QWORD *)(v66 + 32) = *(_QWORD *)(v67 + 32);
      *(_QWORD *)(v66 + 40) = v112;
      goto LABEL_11;
    }
    v71 = *(_QWORD *)(v67 + 8);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *(_QWORD *)(v66 + 8) = v71;
    v72 = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
    *(_QWORD *)(v66 + 24) = v72;
    v73 = *(_QWORD *)(v67 + 40);
    *(_QWORD *)(v66 + 32) = *(_QWORD *)(v67 + 32);
    *(_QWORD *)(v66 + 40) = v73;
    v74 = *(_QWORD *)(v67 + 56);
    *(_QWORD *)(v66 + 48) = *(_QWORD *)(v67 + 48);
    *(_QWORD *)(v66 + 56) = v74;
    *(_BYTE *)(v66 + 64) = *(_BYTE *)(v67 + 64);
    *(_BYTE *)(v66 + 65) = *(_BYTE *)(v67 + 65);
  }
  swift_bridgeObjectRetain();
LABEL_11:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(v66, v68, v70);
  v113 = 1;
LABEL_16:
  v144 = swift_storeEnumTagMultiPayload(v57, v150, v113);
  v151(v155 + v20[15], v153 + v20[15], v24, v144);
  ((void (*)(uint64_t, uint64_t, uint64_t))v151)(v155 + v20[16], v153 + v20[16], v24);
  return v156;
}

uint64_t sub_100598100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int *v49;
  _QWORD *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t active;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int EnumCaseMultiPayload;
  unsigned int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  void (*v112)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  void (*v124)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v125;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  sub_1000B15F8(v8, v9);
  v122 = a2;
  sub_100094D04((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16));
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(v12 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 88) = *(_QWORD *)(v12 + 88);
  *(_QWORD *)(v11 + 96) = *(_QWORD *)(v12 + 96);
  v13 = *(void **)(v12 + 104);
  v14 = *(void **)(v12 + 112);
  v15 = *(_QWORD *)(v12 + 120);
  v16 = *(_BYTE *)(v12 + 128);
  sub_1001A41A0(v13, v14, v15, v16);
  v17 = *(void **)(v11 + 104);
  v18 = *(void **)(v11 + 112);
  v19 = *(_QWORD *)(v11 + 120);
  *(_QWORD *)(v11 + 104) = v13;
  *(_QWORD *)(v11 + 112) = v14;
  *(_QWORD *)(v11 + 120) = v15;
  v20 = *(_BYTE *)(v11 + 128);
  *(_BYTE *)(v11 + 128) = v16;
  sub_1001A44FC(v17, v18, v19, v20);
  *(_QWORD *)(v11 + 136) = *(_QWORD *)(v12 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 144) = *(_QWORD *)(v12 + 144);
  *(_QWORD *)(v11 + 152) = *(_QWORD *)(v12 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  v21 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v22 = v21[12];
  v23 = v11 + v22;
  v24 = v12 + v22;
  v25 = type metadata accessor for Date(0);
  v119 = *(_QWORD *)(v25 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 24);
  v26(v23, v24, v25);
  v27 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v23 + v27[5]) = *(_QWORD *)(v24 + v27[5]);
  v28 = v27[6];
  v29 = (_QWORD *)(v23 + v28);
  v30 = (_QWORD *)(v24 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = v27[7];
  v32 = (_QWORD *)(v23 + v31);
  v33 = (_QWORD *)(v24 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = v27[8];
  v35 = (_QWORD *)(v23 + v34);
  v36 = (_QWORD *)(v24 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  v37 = swift_bridgeObjectRelease();
  v38 = v21[13];
  v39 = v11 + v38;
  v40 = v12 + v38;
  v124 = (void (*)(uint64_t, uint64_t, uint64_t, __n128))v26;
  v125 = v25;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v26)(v11 + v38, v12 + v38, v25, v37);
  *(_QWORD *)(v39 + v27[5]) = *(_QWORD *)(v40 + v27[5]);
  v41 = v27[6];
  v42 = (_QWORD *)(v39 + v41);
  v43 = (_QWORD *)(v40 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = v27[7];
  v45 = (_QWORD *)(v39 + v44);
  v46 = (_QWORD *)(v40 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = v27[8];
  v48 = (_QWORD *)(v39 + v47);
  v49 = v21;
  v50 = (_QWORD *)(v40 + v47);
  *v48 = *v50;
  v48[1] = v50[1];
  swift_bridgeObjectRetain();
  v51 = a1;
  v52 = swift_bridgeObjectRelease();
  if (a1 != v122)
  {
    v123 = v21;
    v53 = v21[14];
    v54 = v11 + v53;
    v55 = v12 + v53;
    sub_1000215BC(v11 + v53, type metadata accessor for DetailHeroChartLollipopModel);
    v56 = type metadata accessor for DetailHeroChartLollipopModel(0);
    if (swift_getEnumCaseMultiPayload(v55) == 1)
    {
      v117 = a1;
      *(_QWORD *)v54 = *(_QWORD *)v55;
      active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
      v58 = *(int *)(active + 20);
      v59 = v54 + v58;
      v60 = v55 + v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v54 + v58, v55 + v58, v125);
      v61 = (int *)type metadata accessor for LollipopMarkModel(0);
      *(_QWORD *)(v59 + v61[5]) = *(_QWORD *)(v60 + v61[5]);
      *(_QWORD *)(v59 + v61[6]) = *(_QWORD *)(v60 + v61[6]);
      *(_QWORD *)(v59 + v61[7]) = *(_QWORD *)(v60 + v61[7]);
      v62 = *(int *)(active + 24);
      v63 = v54 + v62;
      v64 = v55 + v62;
      v65 = type metadata accessor for LollipopDetailViewModel(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v64);
      v120 = EnumCaseMultiPayload;
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)v63 = *(_QWORD *)v64;
        *(_QWORD *)(v63 + 8) = *(_QWORD *)(v64 + 8);
        v68 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v69 = v68[5];
        v113 = v64 + v69;
        v115 = v63 + v69;
        v70 = type metadata accessor for AttributedString(0);
        v112 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v70 - 8) + 16);
        v71 = swift_bridgeObjectRetain();
        v112(v115, v113, v70, v71);
        v72 = v68[6];
        v73 = (_QWORD *)(v63 + v72);
        v74 = (_QWORD *)(v64 + v72);
        *v73 = *v74;
        v73[1] = v74[1];
        v75 = v68[7];
        v76 = (_QWORD *)(v63 + v75);
        v77 = (_QWORD *)(v64 + v75);
        *v76 = *v77;
        v76[1] = v77[1];
        v78 = v68[8];
        v79 = (_QWORD *)(v63 + v78);
        v80 = (_QWORD *)(v64 + v78);
        *v79 = *v80;
        v79[1] = v80[1];
        v81 = v68[9];
        v82 = (_QWORD *)(v63 + v81);
        v83 = (_QWORD *)(v64 + v81);
        *v82 = *v83;
        v82[1] = v83[1];
        v84 = v68[10];
        v85 = (_QWORD *)(v63 + v84);
        v86 = (_QWORD *)(v64 + v84);
        *v85 = *v86;
        v85[1] = v86[1];
        *(_BYTE *)(v63 + v68[11]) = *(_BYTE *)(v64 + v68[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v49 = v123;
          *(_QWORD *)v63 = *(_QWORD *)v64;
          *(_QWORD *)(v63 + 8) = *(_QWORD *)(v64 + 8);
          *(_QWORD *)(v63 + 16) = *(_QWORD *)(v64 + 16);
          *(_QWORD *)(v63 + 24) = *(_QWORD *)(v64 + 24);
          *(_QWORD *)(v63 + 32) = *(_QWORD *)(v64 + 32);
          *(_QWORD *)(v63 + 40) = *(_QWORD *)(v64 + 40);
          goto LABEL_12;
        }
        *(_QWORD *)v63 = *(_QWORD *)v64;
        *(_QWORD *)(v63 + 8) = *(_QWORD *)(v64 + 8);
        *(_QWORD *)(v63 + 16) = *(_QWORD *)(v64 + 16);
        *(_QWORD *)(v63 + 24) = *(_QWORD *)(v64 + 24);
        *(_QWORD *)(v63 + 32) = *(_QWORD *)(v64 + 32);
        *(_QWORD *)(v63 + 40) = *(_QWORD *)(v64 + 40);
        *(_QWORD *)(v63 + 48) = *(_QWORD *)(v64 + 48);
        *(_QWORD *)(v63 + 56) = *(_QWORD *)(v64 + 56);
        *(_BYTE *)(v63 + 64) = *(_BYTE *)(v64 + 64);
        *(_BYTE *)(v63 + 65) = *(_BYTE *)(v64 + 65);
        swift_bridgeObjectRetain();
      }
      v49 = v123;
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload(v63, v65, v120);
      v87 = 1;
      v51 = v117;
LABEL_17:
      v52 = swift_storeEnumTagMultiPayload(v54, v56, v87);
      goto LABEL_18;
    }
    v121 = type metadata accessor for LollipopDetailViewModel(0);
    v67 = swift_getEnumCaseMultiPayload(v55);
    v118 = v67;
    if (v67 == 2)
    {
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
      v116 = v56;
      v88 = a1;
      v89 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v90 = v89[5];
      v91 = v54 + v90;
      v114 = v55 + v90;
      v92 = type metadata accessor for AttributedString(0);
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v92 - 8) + 16);
      v94 = swift_bridgeObjectRetain();
      v93(v91, v114, v92, v94);
      v95 = v89[6];
      v96 = (_QWORD *)(v54 + v95);
      v97 = (_QWORD *)(v55 + v95);
      *v96 = *v97;
      v96[1] = v97[1];
      v98 = v89[7];
      v99 = (_QWORD *)(v54 + v98);
      v100 = (_QWORD *)(v55 + v98);
      *v99 = *v100;
      v99[1] = v100[1];
      v101 = v89[8];
      v102 = (_QWORD *)(v54 + v101);
      v103 = (_QWORD *)(v55 + v101);
      *v102 = *v103;
      v102[1] = v103[1];
      v104 = v89[9];
      v105 = (_QWORD *)(v54 + v104);
      v106 = (_QWORD *)(v55 + v104);
      *v105 = *v106;
      v105[1] = v106[1];
      v107 = v89[10];
      v108 = (_QWORD *)(v54 + v107);
      v109 = (_QWORD *)(v55 + v107);
      *v108 = *v109;
      v108[1] = v109[1];
      v110 = v89[11];
      v51 = v88;
      v56 = v116;
      *(_BYTE *)(v54 + v110) = *(_BYTE *)(v55 + v110);
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v67 != 1)
      {
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
        *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
        *(_QWORD *)(v54 + 24) = *(_QWORD *)(v55 + 24);
        *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
        *(_QWORD *)(v54 + 40) = *(_QWORD *)(v55 + 40);
        goto LABEL_16;
      }
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
      *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
      *(_QWORD *)(v54 + 24) = *(_QWORD *)(v55 + 24);
      *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
      *(_QWORD *)(v54 + 40) = *(_QWORD *)(v55 + 40);
      *(_QWORD *)(v54 + 48) = *(_QWORD *)(v55 + 48);
      *(_QWORD *)(v54 + 56) = *(_QWORD *)(v55 + 56);
      *(_BYTE *)(v54 + 64) = *(_BYTE *)(v55 + 64);
      *(_BYTE *)(v54 + 65) = *(_BYTE *)(v55 + 65);
    }
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(v54, v121, v118);
    v87 = 0;
    v49 = v123;
    goto LABEL_17;
  }
LABEL_18:
  v124(v11 + v49[15], v12 + v49[15], v125, v52);
  ((void (*)(uint64_t, uint64_t, uint64_t))v124)(v11 + v49[16], v12 + v49[16], v125);
  return v51;
}

uint64_t sub_100598964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t active;
  uint64_t v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int *v61;
  int *v62;

  v3 = a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 48) = v8;
  v9 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v9;
  v10 = *(_OWORD *)(a2 + v5 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + v5 + 64);
  *(_OWORD *)(v6 + 80) = v10;
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(a2 + v5 + 96);
  v11 = *(_OWORD *)(a2 + v5 + 104);
  *(_OWORD *)(v6 + 113) = *(_OWORD *)(a2 + v5 + 113);
  *(_OWORD *)(v6 + 104) = v11;
  v12 = *(_OWORD *)(a2 + v5 + 136);
  *(_OWORD *)(v6 + 145) = *(_OWORD *)(a2 + v5 + 145);
  *(_OWORD *)(v6 + 136) = v12;
  v13 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v14 = v13[12];
  v15 = v6 + v14;
  v16 = v7 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  v19 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v15 + v19[5]) = *(_QWORD *)(v16 + v19[5]);
  *(_OWORD *)(v15 + v19[6]) = *(_OWORD *)(v16 + v19[6]);
  *(_OWORD *)(v15 + v19[7]) = *(_OWORD *)(v16 + v19[7]);
  *(_OWORD *)(v15 + v19[8]) = *(_OWORD *)(v16 + v19[8]);
  v20 = v13[13];
  v21 = v6 + v20;
  v22 = v7 + v20;
  v18(v6 + v20, v7 + v20, v17);
  *(_QWORD *)(v21 + v19[5]) = *(_QWORD *)(v22 + v19[5]);
  *(_OWORD *)(v21 + v19[6]) = *(_OWORD *)(v22 + v19[6]);
  *(_OWORD *)(v21 + v19[7]) = *(_OWORD *)(v22 + v19[7]);
  *(_OWORD *)(v21 + v19[8]) = *(_OWORD *)(v22 + v19[8]);
  v23 = v13[14];
  v24 = (_QWORD *)(v6 + v23);
  v25 = (_QWORD *)(v7 + v23);
  v26 = type metadata accessor for DetailHeroChartLollipopModel(0);
  if (swift_getEnumCaseMultiPayload(v25) == 1)
  {
    v57 = v3;
    v61 = v13;
    *v24 = *v25;
    active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
    v28 = *(int *)(active + 20);
    v29 = (char *)v24 + v28;
    v30 = (char *)v25 + v28;
    v18((uint64_t)v24 + v28, (uint64_t)v25 + v28, v17);
    v31 = (int *)type metadata accessor for LollipopMarkModel(0);
    *(_QWORD *)&v29[v31[5]] = *(_QWORD *)&v30[v31[5]];
    *(_QWORD *)&v29[v31[6]] = *(_QWORD *)&v30[v31[6]];
    *(_QWORD *)&v29[v31[7]] = *(_QWORD *)&v30[v31[7]];
    v32 = *(int *)(active + 24);
    v33 = (_OWORD *)((char *)v24 + v32);
    v34 = (_OWORD *)((char *)v25 + v32);
    v35 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v34) == 2)
    {
      *v33 = *v34;
      v36 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v37 = v36[5];
      v56 = (char *)v33 + v37;
      v59 = v18;
      v38 = v26;
      v39 = (char *)v34 + v37;
      v40 = type metadata accessor for AttributedString(0);
      v41 = v39;
      v26 = v38;
      v18 = v59;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v56, v41, v40);
      *(_OWORD *)((char *)v33 + v36[6]) = *(_OWORD *)((char *)v34 + v36[6]);
      *(_OWORD *)((char *)v33 + v36[7]) = *(_OWORD *)((char *)v34 + v36[7]);
      *(_OWORD *)((char *)v33 + v36[8]) = *(_OWORD *)((char *)v34 + v36[8]);
      *(_OWORD *)((char *)v33 + v36[9]) = *(_OWORD *)((char *)v34 + v36[9]);
      *(_OWORD *)((char *)v33 + v36[10]) = *(_OWORD *)((char *)v34 + v36[10]);
      *((_BYTE *)v33 + v36[11]) = *((_BYTE *)v34 + v36[11]);
      swift_storeEnumTagMultiPayload(v33, v35, 2);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    v53 = 1;
    v13 = v61;
    v3 = v57;
  }
  else
  {
    v58 = v17;
    v60 = v18;
    v42 = type metadata accessor for LollipopDetailViewModel(0);
    if (swift_getEnumCaseMultiPayload(v25) == 2)
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v62 = v13;
      v43 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
      v44 = v43[5];
      v45 = v3;
      v46 = (char *)v24 + v44;
      v47 = v26;
      v48 = (char *)v25 + v44;
      v49 = type metadata accessor for AttributedString(0);
      v50 = v46;
      v3 = v45;
      v51 = v48;
      v26 = v47;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v50, v51, v49);
      *(_OWORD *)((char *)v24 + v43[6]) = *(_OWORD *)((char *)v25 + v43[6]);
      *(_OWORD *)((char *)v24 + v43[7]) = *(_OWORD *)((char *)v25 + v43[7]);
      *(_OWORD *)((char *)v24 + v43[8]) = *(_OWORD *)((char *)v25 + v43[8]);
      *(_OWORD *)((char *)v24 + v43[9]) = *(_OWORD *)((char *)v25 + v43[9]);
      *(_OWORD *)((char *)v24 + v43[10]) = *(_OWORD *)((char *)v25 + v43[10]);
      v52 = v43[11];
      v13 = v62;
      *((_BYTE *)v24 + v52) = *((_BYTE *)v25 + v52);
      swift_storeEnumTagMultiPayload(v24, v42, 2);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    v53 = 0;
    v17 = v58;
    v18 = v60;
  }
  v54 = swift_storeEnumTagMultiPayload(v24, v26, v53);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v18)(v6 + v13[15], v7 + v13[15], v17, v54);
  v18(v6 + v13[16], v7 + v13[16], v17);
  return v3;
}

uint64_t sub_100598D94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  int *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t active;
  uint64_t v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  void (*v98)(uint64_t, uint64_t, uint64_t);
  int *v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000B15F8(v8, v9);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 16));
  v10 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 48) = a2[6];
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = *(uint64_t *)((char *)a2 + v11 + 8);
  *(_QWORD *)v12 = *(uint64_t *)((char *)a2 + v11);
  *(_QWORD *)(v12 + 8) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v12 + 24) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v12 + 40) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v12 + 56) = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 72) = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 80) = *(_QWORD *)(v13 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
  v18 = *(_QWORD *)(v13 + 120);
  v19 = *(_BYTE *)(v13 + 128);
  v20 = *(void **)(v12 + 104);
  v21 = *(void **)(v12 + 112);
  v22 = *(_QWORD *)(v12 + 120);
  *(_OWORD *)(v12 + 104) = *(_OWORD *)(v13 + 104);
  *(_QWORD *)(v12 + 120) = v18;
  v23 = *(_BYTE *)(v12 + 128);
  *(_BYTE *)(v12 + 128) = v19;
  sub_1001A44FC(v20, v21, v22, v23);
  *(_QWORD *)(v12 + 136) = *(_QWORD *)(v13 + 136);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v13 + 152);
  *(_QWORD *)(v12 + 144) = *(_QWORD *)(v13 + 144);
  *(_QWORD *)(v12 + 152) = v24;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v12 + 160) = *(_BYTE *)(v13 + 160);
  v25 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v26 = v25[12];
  v27 = v12 + v26;
  v28 = v13 + v26;
  v29 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v29 - 8);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 40);
  v30(v27, v28, v29);
  v31 = (int *)type metadata accessor for PeakUpperMarkModel(0);
  *(_QWORD *)(v27 + v31[5]) = *(_QWORD *)(v28 + v31[5]);
  v32 = v31[6];
  v33 = (_QWORD *)(v27 + v32);
  v34 = (uint64_t *)(v28 + v32);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = v31[7];
  v38 = (_QWORD *)(v27 + v37);
  v39 = (uint64_t *)(v28 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  v42 = v31[8];
  v43 = (_QWORD *)(v27 + v42);
  v44 = (uint64_t *)(v28 + v42);
  v46 = *v44;
  v45 = v44[1];
  *v43 = v46;
  v43[1] = v45;
  v47 = swift_bridgeObjectRelease();
  v48 = v25[13];
  v49 = v12 + v48;
  v50 = v13 + v48;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v30)(v12 + v48, v13 + v48, v29, v47);
  *(_QWORD *)(v49 + v31[5]) = *(_QWORD *)(v50 + v31[5]);
  v51 = v31[6];
  v52 = (_QWORD *)(v49 + v51);
  v53 = (uint64_t *)(v50 + v51);
  v55 = *v53;
  v54 = v53[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  v56 = v31[7];
  v57 = (_QWORD *)(v49 + v56);
  v58 = (uint64_t *)(v50 + v56);
  v60 = *v58;
  v59 = v58[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  v61 = v31[8];
  v62 = (_QWORD *)(v49 + v61);
  v63 = (uint64_t *)(v50 + v61);
  v65 = *v63;
  v64 = v63[1];
  *v62 = v65;
  v62[1] = v64;
  v66 = swift_bridgeObjectRelease();
  if ((uint64_t *)a1 != a2)
  {
    v67 = v25[14];
    v68 = (char *)(v12 + v67);
    v69 = (char *)(v13 + v67);
    sub_1000215BC(v12 + v67, type metadata accessor for DetailHeroChartLollipopModel);
    v70 = type metadata accessor for DetailHeroChartLollipopModel(0);
    if (swift_getEnumCaseMultiPayload(v69) == 1)
    {
      v97 = v30;
      v99 = v25;
      *(_QWORD *)v68 = *(_QWORD *)v69;
      active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
      v72 = *(int *)(active + 20);
      v73 = &v68[v72];
      v74 = &v69[v72];
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(&v68[v72], &v69[v72], v29);
      v75 = (int *)type metadata accessor for LollipopMarkModel(0);
      *(_QWORD *)&v73[v75[5]] = *(_QWORD *)&v74[v75[5]];
      *(_QWORD *)&v73[v75[6]] = *(_QWORD *)&v74[v75[6]];
      *(_QWORD *)&v73[v75[7]] = *(_QWORD *)&v74[v75[7]];
      v76 = *(int *)(active + 24);
      v77 = &v68[v76];
      v78 = &v69[v76];
      v79 = type metadata accessor for LollipopDetailViewModel(0);
      if (swift_getEnumCaseMultiPayload(v78) == 2)
      {
        *(_OWORD *)v77 = *(_OWORD *)v78;
        v80 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v81 = v80[5];
        v96 = &v77[v81];
        v102 = v70;
        v82 = &v78[v81];
        v83 = type metadata accessor for AttributedString(0);
        v84 = v82;
        v70 = v102;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v96, v84, v83);
        *(_OWORD *)&v77[v80[6]] = *(_OWORD *)&v78[v80[6]];
        *(_OWORD *)&v77[v80[7]] = *(_OWORD *)&v78[v80[7]];
        *(_OWORD *)&v77[v80[8]] = *(_OWORD *)&v78[v80[8]];
        *(_OWORD *)&v77[v80[9]] = *(_OWORD *)&v78[v80[9]];
        *(_OWORD *)&v77[v80[10]] = *(_OWORD *)&v78[v80[10]];
        v77[v80[11]] = v78[v80[11]];
        swift_storeEnumTagMultiPayload(v77, v79, 2);
      }
      else
      {
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      v94 = 1;
      v30 = v97;
      v25 = v99;
    }
    else
    {
      v85 = type metadata accessor for LollipopDetailViewModel(0);
      if (swift_getEnumCaseMultiPayload(v69) == 2)
      {
        *(_OWORD *)v68 = *(_OWORD *)v69;
        v98 = v30;
        v100 = v25;
        v86 = (int *)type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
        v87 = v86[5];
        v88 = &v68[v87];
        v103 = v70;
        v89 = &v69[v87];
        v90 = type metadata accessor for AttributedString(0);
        v91 = v88;
        v30 = v98;
        v92 = v89;
        v70 = v103;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v91, v92, v90);
        *(_OWORD *)&v68[v86[6]] = *(_OWORD *)&v69[v86[6]];
        *(_OWORD *)&v68[v86[7]] = *(_OWORD *)&v69[v86[7]];
        *(_OWORD *)&v68[v86[8]] = *(_OWORD *)&v69[v86[8]];
        *(_OWORD *)&v68[v86[9]] = *(_OWORD *)&v69[v86[9]];
        *(_OWORD *)&v68[v86[10]] = *(_OWORD *)&v69[v86[10]];
        v93 = v86[11];
        v25 = v100;
        v68[v93] = v69[v93];
        swift_storeEnumTagMultiPayload(v68, v85, 2);
      }
      else
      {
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      v94 = 0;
    }
    v66 = swift_storeEnumTagMultiPayload(v68, v70, v94);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v30)(v12 + v25[15], v13 + v25[15], v29, v66);
  v30(v12 + v25[16], v13 + v25[16], v29);
  return a1;
}

uint64_t sub_1005992D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005992DC);
}

uint64_t sub_1005992DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000E7200();
    return _s7Weather24LocationCompositionStateOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10059934C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100599358);
}

void sub_100599358(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 40) = (a2 - 1);
    sub_100079F70();
  }
  else
  {
    v7 = sub_1000E7200();
    _s7Weather24LocationCompositionStateOwst_0(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }
}

uint64_t type metadata accessor for PrecipitationAveragesHeroChartView(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF2168;
  if (!qword_100BF2168)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrecipitationAveragesHeroChartView);
  return result;
}

uint64_t sub_1005993F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\t";
  v4[1] = &unk_1009B0CF0;
  result = type metadata accessor for PrecipitationAveragesHeroChartViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100599478(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100AB9B68, 1);
}

double sub_100599488@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  v2 = sub_1000BA294(&qword_100BCB968);
  v3 = swift_allocObject(v2, 48, 7);
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(v3 + 16) = xmmword_10097DA20;
  *(_OWORD *)(v3 + 32) = _Q1;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v11, 1, 0, 4.0, 10.0, 0.0);
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v12;
  return result;
}

void sub_100599508(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_1000BA294(&qword_100BF21A8);
  sub_100599548(v2, (char *)(a2 + *(int *)(v4 + 44)));
  sub_10004A298();
}

uint64_t sub_100599548@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (**v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (**v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59[24];

  v58 = a2;
  v53 = type metadata accessor for ConditionDetailLegendView(0);
  __chkstk_darwin(v53);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1000BA294(&qword_100BDCA78);
  __chkstk_darwin(v56);
  v55 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v57 = (uint64_t)&v50 - v7;
  v51 = sub_1000BA294((uint64_t *)&unk_100C0A510);
  __chkstk_darwin(v51);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BF21B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100BF21B8);
  v52 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - v17;
  v54 = a1;
  sub_1005999A4(a1, (uint64_t)v12);
  v19 = enum case for DynamicTypeSize.accessibility1(_:);
  v20 = type metadata accessor for DynamicTypeSize(0);
  v21 = (void (**)(char *, char *, uint64_t))&type metadata accessor for DynamicTypeSize;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v9, v19, v20);
  sub_10007A100((uint64_t)&qword_100C0A550);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v9, v9, v20, v22) & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v23 = sub_10059FE34();
  sub_10007AB60((uint64_t)&qword_100BC4E30);
  View.dynamicTypeSize<A>(_:)(v9, v10, v51, v23, v24);
  sub_100021A14((uint64_t)v9, (uint64_t *)&unk_100C0A510);
  sub_100021A14((uint64_t)v12, &qword_100BF21B0);
  v25 = v52;
  v52[4](v18, v15, v13);
  v26 = v54 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v27 = *(_QWORD *)(v26 + 136);
  v28 = *(_QWORD *)(v26 + 144);
  v29 = *(_QWORD *)(v26 + 152);
  v30 = *(_BYTE *)(v26 + 160);
  swift_bridgeObjectRetain();
  v31 = swift_bridgeObjectRetain();
  Text.Measurements.init()(v31);
  *(_QWORD *)v4 = v27;
  *((_QWORD *)v4 + 1) = v28;
  *((_QWORD *)v4 + 2) = v29;
  v4[24] = v30;
  v21 = v25;
  if (qword_100BC20C0 != -1)
LABEL_5:
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v59, 1, 0);
  sub_10040447C();
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = static Edge.Set.all.getter(v40);
  v42 = v55;
  sub_100080C0C((uint64_t)v4, v55, type metadata accessor for ConditionDetailLegendView);
  v43 = v42 + *(int *)(v56 + 36);
  *(_BYTE *)v43 = v41;
  *(_QWORD *)(v43 + 8) = v33;
  *(_QWORD *)(v43 + 16) = v35;
  *(_QWORD *)(v43 + 24) = v37;
  *(_QWORD *)(v43 + 32) = v39;
  *(_BYTE *)(v43 + 40) = 0;
  sub_1000215BC((uint64_t)v4, type metadata accessor for ConditionDetailLegendView);
  v44 = v57;
  sub_1000787D4(v42, v57, &qword_100BDCA78);
  v45 = v21[2];
  v45(v15, v18, v13);
  sub_100037768(v44, v42, &qword_100BDCA78);
  v46 = v58;
  v45(v58, v15, v13);
  v47 = sub_1000BA294(&qword_100BF21D8);
  sub_100037768(v42, (uint64_t)&v46[*(int *)(v47 + 48)], &qword_100BDCA78);
  sub_100021A14(v44, &qword_100BDCA78);
  v48 = v21[1];
  ((void (*)(char *, uint64_t))v48)(v18, v13);
  sub_100021A14(v42, &qword_100BDCA78);
  return ((uint64_t (*)(char *, uint64_t))v48)(v15, v13);
}

void sub_1005999A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t OpaqueTypeConformance2;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  double *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  double v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  void (*v161)(char *, uint64_t);
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  double *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char v216[8];
  uint64_t v217;
  char v218[8];
  uint64_t v219;
  char v220[8];
  uint64_t v221;
  _QWORD v222[2];
  char v223[8];
  char v224[8];
  __int128 v225;
  __int128 v226;
  __int128 v227;
  _OWORD v228[2];
  uint64_t v229;

  v215 = a1;
  v212 = a2;
  v211 = type metadata accessor for AccessibilityChildBehavior(0);
  v210 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v209 = (char *)&v160 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for DynamicTypeSize(0);
  v207 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v206 = (char *)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v196);
  v205 = (double *)((char *)&v160 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for PrecipitationAveragesHeroChartView(0);
  v171 = *(_QWORD *)(v6 - 8);
  v172 = *(_QWORD *)(v171 + 64);
  __chkstk_darwin(v6);
  v213 = (uint64_t)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for AutomaticScaleDomain(0);
  v183 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v173 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BDCAB0);
  __chkstk_darwin(v9);
  v165 = (uint64_t)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for PlotDimensionScaleRange(0);
  v168 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v163 = (char *)&v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_1000BA294(&qword_100BF21E0);
  v166 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v160 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_1000BA294(&qword_100BF21E8);
  v174 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v214 = (char *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_1000BA294(&qword_100BF21F0);
  v178 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v169 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_1000BA294(&qword_100BF21F8);
  v182 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v175 = (char *)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_1000BA294(&qword_100BF2200);
  v185 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v176 = (char *)&v160 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_1000BA294(&qword_100BF2208);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v181 = (char *)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_1000BA294(&qword_100BF2210);
  __chkstk_darwin(v187);
  v190 = (char *)&v160 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_1000BA294(&qword_100BF2218);
  __chkstk_darwin(v186);
  v191 = (char *)&v160 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_1000BA294(&qword_100BF2220);
  __chkstk_darwin(v195);
  v192 = (uint64_t)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_1000BA294(&qword_100BF2228);
  v198 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v193 = (char *)&v160 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_1000BA294(&qword_100BF2230);
  v202 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v203 = (char *)&v160 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v194 = (char *)&v160 - v24;
  __chkstk_darwin(v25);
  v201 = (char *)&v160 - v26;
  v27 = type metadata accessor for DetailHeroChartHeaderView(0);
  __chkstk_darwin(v27);
  v200 = (uint64_t)&v160 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v160 - v30);
  v32 = (uint64_t *)(a1 + *(int *)(v6 + 24));
  v34 = *v32;
  v33 = v32[1];
  v35 = v32[3];
  v197 = (_QWORD *)v32[2];
  v37 = v32[4];
  v36 = v32[5];
  v38 = v32[6];
  v39 = v32[7];
  v40 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  sub_100080C0C((uint64_t)v32 + *(int *)(v40 + 56), (uint64_t)v31 + *(int *)(v27 + 20), type metadata accessor for DetailHeroChartLollipopModel);
  *v31 = v34;
  v31[1] = v33;
  v31[2] = v197;
  v31[3] = v35;
  v31[4] = v37;
  v31[5] = v36;
  v31[6] = v38;
  v31[7] = v39;
  v41 = v215;
  v197 = v31;
  *(_QWORD *)&v225 = 0x3FF0000000000000;
  v42 = sub_10010D1D0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:)(&v225, &type metadata for Double, v42);
  v221 = v41;
  v43 = sub_1000BA294(&qword_100BF2238);
  v44 = sub_10059FEB8();
  v45 = v162;
  v46 = Chart.init(content:)(sub_10059FEB0, v220, v43, v44);
  v47 = v163;
  static PositionScaleRange<>.plotDimension.getter(v46);
  v48 = type metadata accessor for ScaleType(0);
  v49 = v165;
  _s7Weather24LocationCompositionStateOwst_0(v165, 1, 1, v48);
  sub_10007AB60((uint64_t)&unk_100BF22C0);
  v51 = v50;
  v52 = v164;
  v53 = v167;
  View.chartXScale<A>(range:type:)(v47, v49, v164, v167, v50, &protocol witness table for PlotDimensionScaleRange);
  sub_100021A14(v49, &qword_100BDCAB0);
  v161 = *(void (**)(char *, uint64_t))(v168 + 8);
  v161(v47, v53);
  v54 = v45;
  v55 = v52;
  (*(void (**)(char *, uint64_t))(v166 + 8))(v54, v52);
  v56 = v213;
  sub_100080C0C(v41, v213, type metadata accessor for PrecipitationAveragesHeroChartView);
  v57 = *(unsigned __int8 *)(v171 + 80);
  v172 += (v57 + 16) & ~v57;
  v58 = (v57 + 16) & ~v57;
  v171 = v58;
  v168 = v57 | 7;
  v59 = swift_allocObject(&unk_100B81590, v172, v57 | 7);
  sub_10007802C(v56, v59 + v58, type metadata accessor for PrecipitationAveragesHeroChartView);
  v60 = v173;
  static ScaleDomain<>.automatic<A>(includesZero:reversed:dataType:modifyInferredDomain:)(1, 2, &type metadata for Double, sub_1005A0380, v59, &type metadata for Double, &protocol witness table for Double);
  swift_release();
  static PositionScaleRange<>.plotDimension(startPadding:endPadding:)(0.0, 60.0);
  _s7Weather24LocationCompositionStateOwst_0(v49, 1, 1, v48);
  *(_QWORD *)&v225 = v55;
  *((_QWORD *)&v225 + 1) = v53;
  *(_QWORD *)&v226 = v51;
  *((_QWORD *)&v226 + 1) = &protocol witness table for PlotDimensionScaleRange;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v225, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(range:type:)>>, 1);
  v62 = v169;
  v63 = v60;
  v64 = v60;
  v65 = v170;
  v66 = v179;
  v67 = v214;
  View.chartYScale<A, B>(domain:range:type:)(v63, v47, v49, v170, v179, v53, OpaqueTypeConformance2, &protocol witness table for AutomaticScaleDomain, &protocol witness table for PlotDimensionScaleRange);
  sub_100021A14(v49, &qword_100BDCAB0);
  v161(v47, v53);
  v68 = v64;
  v69 = v66;
  (*(void (**)(char *, uint64_t))(v183 + 8))(v68, v66);
  (*(void (**)(char *, uint64_t))(v174 + 8))(v67, v65);
  v70 = v215;
  v219 = v215;
  v71 = sub_1000BA294(&qword_100BF22C8);
  *(_QWORD *)&v225 = v65;
  *((_QWORD *)&v225 + 1) = v69;
  *(_QWORD *)&v226 = v53;
  *((_QWORD *)&v226 + 1) = OpaqueTypeConformance2;
  *(_QWORD *)&v227 = &protocol witness table for AutomaticScaleDomain;
  *((_QWORD *)&v227 + 1) = &protocol witness table for PlotDimensionScaleRange;
  v72 = swift_getOpaqueTypeConformance2(&v225, &opaque type descriptor for <<opaque return type of View.chartYScale<A, B>(domain:range:type:)>>, 1);
  sub_10007AB60((uint64_t)&unk_100BF22D0);
  v74 = v73;
  v75 = v175;
  v76 = v177;
  View.chartXAxis<A>(content:)(sub_1005A03B8, v218, v177, v71, v72, v73);
  v77 = v76;
  (*(void (**)(char *, uint64_t))(v178 + 8))(v62, v76);
  v217 = v70;
  v78 = v70;
  v79 = sub_1000BA294(&qword_100BF22D8);
  *(_QWORD *)&v225 = v77;
  *((_QWORD *)&v225 + 1) = v71;
  *(_QWORD *)&v226 = v72;
  *((_QWORD *)&v226 + 1) = v74;
  v80 = swift_getOpaqueTypeConformance2(&v225, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
  v81 = sub_1005A03F0();
  v82 = v176;
  v83 = v180;
  View.chartYAxis<A>(content:)(sub_1005A03D4, v216, v180, v79, v80, v81);
  (*(void (**)(char *, uint64_t))(v182 + 8))(v75, v83);
  v84 = v213;
  sub_100080C0C(v78, v213, type metadata accessor for PrecipitationAveragesHeroChartView);
  v85 = swift_allocObject(&unk_100B815B8, v172, v168);
  sub_10007802C(v84, v85 + v171, type metadata accessor for PrecipitationAveragesHeroChartView);
  v87 = static Alignment.center.getter(v86);
  v89 = v88;
  v90 = sub_1000BA294(&qword_100BDCBE8);
  *(_QWORD *)&v225 = v83;
  *((_QWORD *)&v225 + 1) = v79;
  *(_QWORD *)&v226 = v80;
  *((_QWORD *)&v226 + 1) = v81;
  v91 = v181;
  v92 = swift_getOpaqueTypeConformance2(&v225, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
  sub_10007AB60((uint64_t)&unk_100BDCBF0);
  v93 = v184;
  View.chartOverlay<A>(alignment:content:)(v87, v89, sub_1005A0470, v85, v184, v90, v92, v94);
  v95 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v185 + 8))(v82, v93, v95);
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v224, 1, 0);
  v96 = sub_1004043F8();
  static Alignment.center.getter(v97);
  _FrameLayout.init(width:height:alignment:)(0, 1, *(_QWORD *)&v96, 0);
  v98 = v188;
  v99 = (uint64_t)v190;
  v100 = v189;
  (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v190, v91, v189);
  v101 = (_OWORD *)(v99 + *(int *)(v187 + 36));
  v102 = v226;
  *v101 = v225;
  v101[1] = v102;
  v101[2] = v227;
  v103 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v91, v100);
  v104 = static Alignment.center.getter(v103);
  v106 = v105;
  v107 = (uint64_t)v191;
  v108 = (uint64_t)&v191[*(int *)(v186 + 36)];
  swift_beginAccess(&qword_100CAE968, v228, 33, 0);
  v109 = sub_1004043D0();
  v110 = v205;
  v111 = (char *)v205 + *(int *)(v196 + 20);
  v112 = enum case for RoundedCornerStyle.continuous(_:);
  v113 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 104))(v111, v112, v113);
  *v110 = v109;
  v110[1] = v109;
  sub_10040441C();
  v115 = v114;
  swift_endAccess(v228);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v228, 0, 0, 1.0, 10.0, 0.0);
  sub_100080C0C((uint64_t)v110, v108, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v116 = v108 + *(int *)(sub_1000BA294(&qword_100BDCBF8) + 36);
  v117 = v228[1];
  *(_OWORD *)v116 = v228[0];
  *(_OWORD *)(v116 + 16) = v117;
  *(_QWORD *)(v116 + 32) = v229;
  v118 = sub_1000BA294(&qword_100BDCC00);
  *(_QWORD *)(v108 + *(int *)(v118 + 52)) = v115;
  *(_WORD *)(v108 + *(int *)(v118 + 56)) = 256;
  v119 = static Alignment.center.getter(v118);
  v121 = v120;
  v122 = (uint64_t *)(v108 + *(int *)(sub_1000BA294(&qword_100BDCC08) + 36));
  *v122 = v119;
  v122[1] = v121;
  sub_1000215BC((uint64_t)v110, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v123 = (uint64_t *)(v108 + *(int *)(sub_1000BA294(&qword_100BDCC10) + 36));
  *v123 = v104;
  v123[1] = v106;
  sub_1000787D4(v99, v107, &qword_100BF2210);
  LOBYTE(v104) = static Edge.Set.horizontal.getter(v124);
  swift_beginAccess(&unk_100BE0830, v223, 1, 0);
  v125 = sub_10040908C();
  v126 = EdgeInsets.init(_all:)(v125);
  v128 = v127;
  v130 = v129;
  v132 = v131;
  v133 = v192;
  sub_100037768(v107, v192, &qword_100BF2218);
  v134 = v195;
  v135 = v133 + *(int *)(v195 + 36);
  *(_BYTE *)v135 = v104;
  *(double *)(v135 + 8) = v126;
  *(_QWORD *)(v135 + 16) = v128;
  *(_QWORD *)(v135 + 24) = v130;
  *(_QWORD *)(v135 + 32) = v132;
  *(_BYTE *)(v135 + 40) = 0;
  sub_100021A14(v107, &qword_100BF2218);
  v136 = v207;
  v137 = v206;
  v138 = v208;
  (*(void (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, enum case for DynamicTypeSize.large(_:), v208);
  sub_1003208AC((uint64_t)&unk_100BF22F8);
  v140 = v139;
  v141 = v193;
  View.dynamicTypeSize(_:)(v137, v134, v139);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v138);
  sub_100021A14(v133, &qword_100BF2220);
  v142 = *(_QWORD *)v215;
  LOBYTE(v106) = *(_BYTE *)(v215 + 8);
  sub_10008D47C(*(_QWORD *)v215, v106);
  sub_100109B54();
  LOBYTE(v138) = v143;
  v144 = sub_1000B15F8(v142, v106);
  v145 = v209;
  if ((v138 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter(v144);
  else
    static AccessibilityChildBehavior.ignore.getter(v144);
  v222[0] = v134;
  v222[1] = v140;
  v146 = swift_getOpaqueTypeConformance2(v222, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v147 = v194;
  v148 = v199;
  View.accessibilityElement(children:)(v145, v199, v146);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v145, v211);
  (*(void (**)(char *, uint64_t))(v198 + 8))(v141, v148);
  v149 = v202;
  v150 = v201;
  v151 = v147;
  v152 = v204;
  (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v201, v151, v204);
  v153 = (uint64_t)v197;
  v154 = v200;
  sub_100080C0C((uint64_t)v197, v200, type metadata accessor for DetailHeroChartHeaderView);
  v155 = *(void (**)(char *, char *, uint64_t))(v149 + 16);
  v156 = v203;
  v155(v203, v150, v152);
  v157 = v212;
  sub_100080C0C(v154, v212, type metadata accessor for DetailHeroChartHeaderView);
  v158 = sub_1000BA294(&qword_100BF2310);
  v155((char *)(v157 + *(int *)(v158 + 48)), v156, v152);
  v159 = *(void (**)(char *, uint64_t))(v149 + 8);
  v159(v150, v152);
  sub_1000215BC(v153, type metadata accessor for DetailHeroChartHeaderView);
  v159(v156, v152);
  sub_1000215BC(v154, type metadata accessor for DetailHeroChartHeaderView);
}

uint64_t sub_10059AB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t);
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  void (*v147)(uint64_t, uint64_t);
  uint64_t active;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189[8];

  v182 = a1;
  v172 = a2;
  v150 = type metadata accessor for LollipopMark(0);
  __chkstk_darwin(v150);
  v152 = (uint64_t)&active - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for DetailHeroChartActiveLollipopModel(0);
  __chkstk_darwin(active);
  v151 = (uint64_t)&active - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BF22B8);
  __chkstk_darwin(v4);
  v158 = (char *)&active - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PeakUpperMarkModel(0);
  __chkstk_darwin(v6);
  v153 = (uint64_t)&active - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for PeakUpperMark(0);
  __chkstk_darwin(v154);
  v156 = (uint64_t)&active - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v155 = (uint64_t)&active - v10;
  __chkstk_darwin(v11);
  v157 = (uint64_t)&active - v12;
  __chkstk_darwin(v13);
  v165 = (uint64_t)&active - v14;
  v164 = type metadata accessor for DetailHeroChartLollipopModel(0);
  __chkstk_darwin(v164);
  v174 = (uint64_t)&active - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000BA294(&qword_100BF22A8);
  __chkstk_darwin(v16);
  v171 = (uint64_t)&active - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v180 = (uint64_t)&active - v19;
  v20 = type metadata accessor for PrecipitationAveragesHeroChartView(0);
  v161 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v162 = v21;
  v163 = (uint64_t)&active - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_1000BA294(&qword_100BF2250);
  v167 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v169 = (char *)&active - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v168 = (char *)&active - v24;
  __chkstk_darwin(v25);
  v179 = (char *)&active - v26;
  __chkstk_darwin(v27);
  v178 = (char *)&active - v28;
  v29 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v29);
  v31 = (char *)&active - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for RectangleMark(0);
  v166 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v33 = (char *)&active - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_1000BA294(&qword_100BF23B8);
  v34 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v36 = (char *)&active - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&active - v38;
  v40 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = v182 + *(int *)(v20 + 24);
  v173 = (int *)type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v48 = v173[16];
  v181 = v47;
  v49 = v47 + v48;
  v50 = type metadata accessor for Date(0);
  v51 = v49;
  v52 = v50;
  static PlottableValue.value(_:_:)(v40, v42, v44 & 1, v46, v51, v50, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100BC20C0 != -1)
    swift_once(&qword_100BC20C0, sub_1004049E8);
  swift_beginAccess(&qword_100CAE968, v189, 1, 0);
  v53 = sub_1004043F8();
  v54 = RectangleMark.init<A>(x:yStart:yEnd:width:)(v31, 0, 0, *(_QWORD *)&v53, 0, 0x4000000000000000, 0, v52, &protocol witness table for Date);
  LODWORD(v183) = static HierarchicalShapeStyle.tertiary.getter(v54);
  v55 = v175;
  ChartContent.foregroundStyle<A>(_:)(&v183, v175, &type metadata for HierarchicalShapeStyle, &protocol witness table for RectangleMark, &protocol witness table for HierarchicalShapeStyle);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v33, v55);
  v166 = v34;
  v56 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v175 = (uint64_t)v39;
  v176 = v36;
  v56(v39, v36, v177);
  v160 = v52;
  v57 = v181;
  v188 = *(_QWORD *)(v181 + 72);
  v58 = v163;
  sub_100080C0C(v182, v163, type metadata accessor for PrecipitationAveragesHeroChartView);
  v59 = *(unsigned __int8 *)(v161 + 80);
  v60 = (v59 + 16) & ~v59;
  v161 = v60 + v162;
  v162 = v59 | 7;
  v61 = swift_allocObject(&unk_100B81680, v161, v59 | 7);
  sub_10007802C(v58, v61 + v60, type metadata accessor for PrecipitationAveragesHeroChartView);
  swift_bridgeObjectRetain();
  v62 = sub_1000BA294(&qword_100BDCD30);
  v159 = v62;
  v63 = sub_1000BA294(&qword_100BF2260);
  sub_10007AB60((uint64_t)&unk_100BDCD40);
  v65 = v64;
  v66 = sub_10059FF8C();
  sub_10007A100((uint64_t)&unk_100BF23C0);
  v68 = v67;
  v69 = v62;
  v70 = v160;
  ForEach<>.init(_:content:)(&v188, sub_1005A0D3C, v61, v69, v160, v63, v65, v66, v67);
  v187 = *(_QWORD *)(v57 + 64);
  sub_100080C0C(v182, v58, type metadata accessor for PrecipitationAveragesHeroChartView);
  v71 = swift_allocObject(&unk_100B816A8, v161, v162);
  sub_10007802C(v58, v71 + v60, type metadata accessor for PrecipitationAveragesHeroChartView);
  swift_bridgeObjectRetain();
  ForEach<>.init(_:content:)(&v187, sub_1005A0D4C, v71, v159, v70, v63, v65, v66, v68);
  v73 = v173;
  v72 = v174;
  v74 = v181;
  sub_100080C0C(v181 + v173[14], v174, type metadata accessor for DetailHeroChartLollipopModel);
  if (swift_getEnumCaseMultiPayload(v72) == 1)
  {
    v75 = v151;
    sub_10007802C(v72, v151, type metadata accessor for DetailHeroChartActiveLollipopModel);
    v76 = v152;
    sub_100080C0C(v75 + *(int *)(active + 20), v152, type metadata accessor for LollipopMarkModel);
    v77 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
    v79 = v78;
    v81 = v80;
    v83 = v82;
    v84 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
    v85 = v150;
    v86 = v76 + *(int *)(v150 + 24);
    *(_QWORD *)v86 = v84;
    *(_QWORD *)(v86 + 8) = v87;
    *(_BYTE *)(v86 + 16) = v88 & 1;
    *(_QWORD *)(v86 + 24) = v89;
    v90 = v76 + *(int *)(v85 + 20);
    *(_QWORD *)v90 = v77;
    *(_QWORD *)(v90 + 8) = v79;
    *(_BYTE *)(v90 + 16) = v81 & 1;
    *(_QWORD *)(v90 + 24) = v83;
    v91 = v180;
    sub_100080C0C(v76, v180, type metadata accessor for LollipopMark);
    v92 = sub_1000BA294(&qword_100BF23C8);
    swift_storeEnumTagMultiPayload(v91, v92, 1);
    sub_1000215BC(v76, type metadata accessor for LollipopMark);
    v93 = v75;
    v94 = type metadata accessor for DetailHeroChartActiveLollipopModel;
  }
  else
  {
    v95 = v153;
    sub_100080C0C(v74 + v73[13], v153, type metadata accessor for PeakUpperMarkModel);
    v96 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v97 = Color.init(_:)(v96);
    v98 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
    v164 = v99;
    LODWORD(v163) = v100;
    v182 = v101;
    v102 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
    v104 = v103;
    v106 = v105;
    v108 = v107;
    v109 = v157;
    sub_100080C0C(v95, v157, type metadata accessor for PeakUpperMarkModel);
    v110 = (int *)v154;
    *(_QWORD *)(v109 + *(int *)(v154 + 20)) = v97;
    sub_1000215BC(v95, type metadata accessor for PeakUpperMarkModel);
    *(_QWORD *)(v109 + v110[6]) = 0x4024000000000000;
    v111 = v109 + v110[7];
    v112 = v164;
    *(_QWORD *)v111 = v98;
    *(_QWORD *)(v111 + 8) = v112;
    *(_BYTE *)(v111 + 16) = v163 & 1;
    *(_QWORD *)(v111 + 24) = v182;
    v113 = v109 + v110[8];
    *(_QWORD *)v113 = v102;
    *(_QWORD *)(v113 + 8) = v104;
    *(_BYTE *)(v113 + 16) = v106 & 1;
    *(_QWORD *)(v113 + 24) = v108;
    sub_10007802C(v109, v165, type metadata accessor for PeakUpperMark);
    sub_100080C0C(v181 + v173[12], v95, type metadata accessor for PeakUpperMarkModel);
    v115 = static Color.white.getter(v114);
    v181 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
    v173 = v116;
    LODWORD(v164) = v117;
    v182 = v118;
    v119 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
    v121 = v120;
    LOBYTE(v108) = v122;
    v124 = v123;
    v125 = v155;
    sub_100080C0C(v95, v155, type metadata accessor for PeakUpperMarkModel);
    *(_QWORD *)(v125 + v110[5]) = v115;
    sub_1000215BC(v95, type metadata accessor for PeakUpperMarkModel);
    *(_QWORD *)(v125 + v110[6]) = 0x4018000000000000;
    v126 = v125 + v110[7];
    v127 = v173;
    *(_QWORD *)v126 = v181;
    *(_QWORD *)(v126 + 8) = v127;
    *(_BYTE *)(v126 + 16) = v164 & 1;
    *(_QWORD *)(v126 + 24) = v182;
    v128 = v125 + v110[8];
    *(_QWORD *)v128 = v119;
    *(_QWORD *)(v128 + 8) = v121;
    *(_BYTE *)(v128 + 16) = v108 & 1;
    *(_QWORD *)(v128 + 24) = v124;
    sub_10007802C(v125, v109, type metadata accessor for PeakUpperMark);
    v129 = v165;
    sub_100080C0C(v165, v125, type metadata accessor for PeakUpperMark);
    v183 = v125;
    v130 = v156;
    sub_100080C0C(v109, v156, type metadata accessor for PeakUpperMark);
    v184 = v130;
    v131 = (uint64_t)v158;
    sub_10073B770();
    sub_1000215BC(v130, type metadata accessor for PeakUpperMark);
    sub_1000215BC(v125, type metadata accessor for PeakUpperMark);
    v132 = v180;
    sub_100037768(v131, v180, &qword_100BF22B8);
    v133 = sub_1000BA294(&qword_100BF23C8);
    swift_storeEnumTagMultiPayload(v132, v133, 0);
    sub_100021A14(v131, &qword_100BF22B8);
    sub_1000215BC(v109, type metadata accessor for PeakUpperMark);
    sub_1000215BC(v129, type metadata accessor for PeakUpperMark);
    v94 = type metadata accessor for DetailHeroChartLollipopModel;
    v93 = v174;
  }
  sub_1000215BC(v93, v94);
  v134 = v166;
  v135 = v176;
  v136 = v177;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v176, v175, v177);
  v183 = (uint64_t)v135;
  v137 = v167;
  v138 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
  v139 = v168;
  v140 = v178;
  v141 = v170;
  v138(v168, v178, v170);
  v184 = (uint64_t)v139;
  v142 = v169;
  v143 = v179;
  v138(v169, v179, v141);
  v185 = v142;
  v144 = v180;
  v145 = v171;
  sub_100037768(v180, v171, &qword_100BF22A8);
  v186 = v145;
  sub_10073B808();
  sub_100021A14(v144, &qword_100BF22A8);
  v146 = *(void (**)(char *, uint64_t))(v137 + 8);
  v146(v143, v141);
  v146(v140, v141);
  v147 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
  v147(v175, v136);
  sub_100021A14(v145, &qword_100BF22A8);
  v146(v142, v141);
  v146(v139, v141);
  return ((uint64_t (*)(char *, uint64_t))v147)(v176, v136);
}

uint64_t sub_10059B844(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  double v5;
  double v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    v4 = (_QWORD *)result;
    v5 = *(double *)(*(_QWORD *)result + 8 * v2 + 24);
    result = type metadata accessor for PrecipitationAveragesHeroChartView(0);
    v6 = *(double *)(a2 + *(int *)(result + 24) + 88);
    if (v5 < v6)
    {
      swift_bridgeObjectRelease();
      v7 = sub_1000BA294(&qword_100BCB140);
      result = swift_allocObject(v7, 48, 7);
      *(_OWORD *)(result + 16) = xmmword_10097DA20;
      *(_QWORD *)(result + 32) = 0;
      *(double *)(result + 40) = v6;
      *v4 = result;
    }
  }
  return result;
}

uint64_t sub_10059B8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for AxisMarkPosition(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisMarkPreset(0, v3);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrecipitationAveragesHeroChartView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = *(_QWORD *)(v1 + *(int *)(v12 + 24) + 80);
  sub_100080C0C(v1, (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrecipitationAveragesHeroChartView);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_100B81658, v15 + v11, v14 | 7);
  sub_10007802C((uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for PrecipitationAveragesHeroChartView);
  v17 = swift_bridgeObjectRetain();
  v18 = static AxisMarkPreset.automatic.getter(v17);
  static AxisMarkPosition.automatic.getter(v18);
  v19 = sub_1000BA294(&qword_100BF2320);
  v20 = type metadata accessor for Date(0);
  v21 = sub_1005A0B0C();
  return AxisMarks.init<A>(preset:position:values:content:)(v8, v5, v13, sub_1005A0B00, v16, v19, v20, v21, &protocol witness table for Date);
}

uint64_t sub_10059BA88@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v45 = a1;
  v4 = type metadata accessor for AxisMarkValues(0, a2);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PrecipitationAveragesHeroChartView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = type metadata accessor for AxisMarkPosition(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisMarkPreset(0, v11);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000BA294(&qword_100BF22F0);
  v17 = *(_QWORD *)(v44 - 8);
  v18 = __chkstk_darwin(v44);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v3 + *(int *)(v7 + 24);
  v22 = *(double *)(v21 + 88);
  v23 = *(double *)(v21 + 96);
  v24 = static AxisMarkPreset.automatic.getter(v18);
  v25 = static AxisMarkPosition.trailing.getter(v24);
  if (v23 >= v22)
  {
    static AxisMarkValues.automatic.getter(v25);
    sub_100080C0C(v3, (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrecipitationAveragesHeroChartView);
    v34 = *(unsigned __int8 *)(v8 + 80);
    v35 = (v34 + 16) & ~v34;
    v36 = swift_allocObject(&unk_100B81608, v35 + v9, v34 | 7);
    sub_10007802C((uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v36 + v35, type metadata accessor for PrecipitationAveragesHeroChartView);
    v37 = sub_1000BA294(&qword_100BDCC60);
    v38 = sub_10039702C();
    AxisMarks.init(preset:position:values:content:)(v16, v13, v6, sub_1005A0AA8, v36, v37, v38);
    v33 = 1;
  }
  else
  {
    v26 = sub_1000BA294(&qword_100BCB140);
    v27 = swift_allocObject(v26, 48, 7);
    *(_OWORD *)(v27 + 16) = xmmword_10097DA20;
    *(_QWORD *)(v27 + 32) = 0;
    *(double *)(v27 + 40) = v22;
    sub_100080C0C(v3, (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrecipitationAveragesHeroChartView);
    v28 = *(unsigned __int8 *)(v8 + 80);
    v29 = (v28 + 16) & ~v28;
    v30 = swift_allocObject(&unk_100B81630, v29 + v9, v28 | 7);
    sub_10007802C((uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29, type metadata accessor for PrecipitationAveragesHeroChartView);
    v31 = sub_1000BA294(&qword_100BDCC60);
    v32 = sub_10039702C();
    AxisMarks.init<A>(preset:position:values:content:)(v16, v13, v27, sub_1005A0AA8, v30, v31, &type metadata for Double, v32, &protocol witness table for Double);
    v33 = 0;
  }
  v40 = v44;
  v39 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v45, v20, v44);
  v41 = sub_1000BA294(&qword_100BF2318);
  v42 = swift_storeEnumTagMultiPayload(v39, v41, v33);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v17 + 8))(v20, v40, v42);
}

uint64_t sub_10059BDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v6 = type metadata accessor for ChartProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for PrecipitationAveragesHeroChartView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  sub_100080C0C(a2, (uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = (v11 + v15 + v14) & ~v15;
  v17 = swift_allocObject(&unk_100B815E0, v16 + v8, v13 | v15 | 7);
  sub_10007802C((uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v14, type metadata accessor for PrecipitationAveragesHeroChartView);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a3 = sub_1005A0A30;
  a3[1] = (uint64_t (*)())v17;
  return result;
}

uint64_t sub_10059BF04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *a4 = static Alignment.topLeading.getter(a1);
  a4[1] = v8;
  v9 = sub_1000BA294(&qword_100BDCC40);
  return sub_10059BF60(a2, a3, a1, (uint64_t)a4 + *(int *)(v9 + 44));
}

uint64_t sub_10059BF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t KeyPath;
  int *v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t, _BYTE *, uint64_t);
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[12];
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  __int128 v43[2];

  v36 = a2;
  v37 = a3;
  v6 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v38 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v10 = &v34[-v9];
  v11 = type metadata accessor for GeometryProxy(0);
  v39 = *(_QWORD *)(v11 - 8);
  v12 = v39;
  v40 = v11;
  __chkstk_darwin(v11);
  v14 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v41 = v14;
  v15 = type metadata accessor for ChartProxy(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100043CA8(a1 + 16, (uint64_t)v43);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v18, v36, v15);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v37, v11);
  v19 = a1 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v20 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v42 + 16);
  v21(v10, v19 + *(int *)(v20 + 60), v6);
  v22 = v38;
  v21(v38, v19 + *(int *)(v20 + 64), v6);
  v23 = sub_1003E5E6C();
  v36 = v24;
  v37 = v23;
  v35 = v25;
  KeyPath = swift_getKeyPath(&unk_1009B0D58);
  v27 = (int *)type metadata accessor for LollipopChartOverlayView(0);
  v28 = (uint64_t *)(a4 + v27[10]);
  *v28 = KeyPath;
  v29 = sub_1000BA294(&qword_100BC2908);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  sub_10003C800(v43, a4);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v16 + 32))(a4 + v27[5], v18, v15);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v39 + 32))(a4 + v27[6], v41, v40);
  v30 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v42 + 32);
  v30(a4 + v27[7], v10, v6);
  result = ((uint64_t (*)(uint64_t, _BYTE *, uint64_t))v30)(a4 + v27[8], v22, v6);
  v32 = a4 + v27[9];
  v33 = v36;
  *(_QWORD *)v32 = v37;
  *(_QWORD *)(v32 + 8) = v33;
  *(_BYTE *)(v32 + 16) = v35 & 1;
  return result;
}

uint64_t sub_10059C1E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t OpaqueTypeConformance2;
  char *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  _QWORD v159[2];

  v145 = a2;
  v148 = a3;
  v124 = sub_1000BA294(&qword_100BD78C8);
  v122 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v121 = (uint64_t)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000BA294(&qword_100BD78B0);
  v126 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v127 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v125 = (char *)&v119 - v7;
  v119 = type metadata accessor for PeakKnockoutMark(0);
  __chkstk_darwin(v119);
  v123 = (uint64_t)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v120 = (char *)&v119 - v10;
  v11 = sub_1000BA294(&qword_100BF2288);
  __chkstk_darwin(v11);
  v146 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v147 = (uint64_t)&v119 - v14;
  v15 = sub_1000BA294(&qword_100BDCD58);
  __chkstk_darwin(v15);
  v135 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v17);
  v130 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for Date(0);
  v142 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v20 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v21);
  v23 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for LineMark(0);
  v133 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v25 = (char *)&v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_1000BA294(&qword_100BDCB70);
  v139 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v131 = (char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_1000BA294(&qword_100BF2278);
  v141 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v134 = (char *)&v119 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_1000BA294(&qword_100BF2268);
  v144 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v136 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000BA294(&qword_100BF23D0);
  v152 = *(_QWORD *)(v29 - 8);
  v153 = v29;
  __chkstk_darwin(v29);
  v150 = (char *)&v119 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v151 = (char *)&v119 - v32;
  v33 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v129 = a1;
  DetailChartDataElement.date.getter(v33);
  v137 = v20;
  v40 = v149;
  static PlottableValue.value(_:_:)(v33, v35, v37 & 1, v39, v20, v149, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v41 = swift_bridgeObjectRelease();
  v142 = *(_QWORD *)(v142 + 8);
  ((void (*)(char *, uint64_t, __n128))v142)(v20, v40, v41);
  v42 = LocalizedStringKey.init(stringLiteral:)(0x7469706963657250, 0xED00006E6F697461);
  v44 = v43;
  LOBYTE(v33) = v45;
  v47 = v46;
  v159[0] = DetailChartDataElement.value.getter(v42);
  v48 = v130;
  static PlottableValue.value(_:_:)(v42, v44, v33 & 1, v47, v159, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = LocalizedStringKey.init(stringLiteral:)(0x646E657254, 0xE500000000000000);
  v159[0] = 0x65676172657641;
  v159[1] = 0xE700000000000000;
  v51 = v135;
  static PlottableValue.value(_:_:)(v49, v52, v50 & 1, v53, v159, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease();
  v54 = swift_bridgeObjectRelease();
  LineMark.init<A, B, C>(x:y:series:)(v23, v48, v51, v40, &type metadata for Double, &type metadata for String, &protocol witness table for Date, &protocol witness table for Double, v54, &protocol witness table for String);
  v55 = v145;
  sub_100599488((uint64_t)v159);
  v56 = v131;
  v57 = v132;
  ChartContent.lineStyle(_:)(v159, v132, &protocol witness table for LineMark);
  sub_100158A28((uint64_t)v159);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v25, v57);
  v135 = (char *)objc_opt_self(UIColor);
  v158 = Color.init(uiColor:)(objc_msgSend(v135, "systemGray2Color"));
  v154 = v57;
  v155 = &protocol witness table for LineMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v59 = v134;
  v60 = v138;
  ChartContent.foregroundStyle<A>(_:)(&v158, v138, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  v61 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v139 + 8))(v56, v60, v61);
  v154 = v60;
  v155 = &type metadata for Color;
  v156 = (void *)OpaqueTypeConformance2;
  v157 = &protocol witness table for Color;
  v62 = v55;
  v63 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v64 = v136;
  v65 = v140;
  ChartContent.interpolationMethod(_:)(0, 3, v140, v63);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v59, v65);
  v66 = sub_1000BA294(&qword_100BF2270);
  v154 = v65;
  v155 = (void *)v63;
  v67 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  v154 = type metadata accessor for RectangleMark(255);
  v155 = &protocol witness table for RectangleMark;
  v68 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.offset(x:yStart:yEnd:)>>, 1);
  v69 = v150;
  v70 = v143;
  ChartContent.mask<A>(content:)(sub_10059CDF0, 0, v143, v66, v67, v68);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v64, v70);
  v71 = (*(uint64_t (**)(char *, char *, uint64_t))(v152 + 32))(v151, v69, v153);
  v72 = v137;
  DetailChartDataElement.date.getter(v71);
  v73 = v62 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v74 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  LOBYTE(v73) = static Date.== infix(_:_:)(v72, v73 + *(int *)(v74 + 64));
  v75 = ((uint64_t (*)(char *, uint64_t))v142)(v72, v149);
  if ((v73 & 1) != 0)
  {
    v76 = (uint64_t)v120;
    v77 = DetailChartDataElement.date.getter(v75);
    v78 = DetailChartDataElement.value.getter(v77);
    v79 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
    v81 = v80;
    v83 = v82;
    v85 = v84;
    v86 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
    v87 = (int *)v119;
    *(double *)(v76 + *(int *)(v119 + 20)) = v78;
    *(_BYTE *)(v76 + v87[6]) = 0;
    v88 = v76 + v87[8];
    *(_QWORD *)v88 = v86;
    *(_QWORD *)(v88 + 8) = v89;
    *(_BYTE *)(v88 + 16) = v90 & 1;
    *(_QWORD *)(v88 + 24) = v91;
    v92 = v76 + v87[7];
    *(_QWORD *)v92 = v79;
    *(_QWORD *)(v92 + 8) = v81;
    *(_BYTE *)(v92 + 16) = v83 & 1;
    *(_QWORD *)(v92 + 24) = v85;
    v93 = v121;
    sub_10059CDF4(v121);
    v158 = Color.init(uiColor:)(objc_msgSend(v135, "systemGray2Color"));
    v94 = sub_100075EB0(&qword_100BD78C0);
    v95 = type metadata accessor for PointMark(255);
    v96 = type metadata accessor for BasicChartSymbolShape(255);
    sub_10007A100((uint64_t)&qword_100BD78E8);
    v154 = v95;
    v155 = (void *)v96;
    v156 = &protocol witness table for PointMark;
    v157 = v97;
    v98 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
    v154 = v94;
    v155 = (void *)v98;
    v99 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    v100 = v127;
    v101 = v124;
    ChartContent.foregroundStyle<A>(_:)(&v158, v124, &type metadata for Color, v99, &protocol witness table for Color);
    v102 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v122 + 8))(v93, v101, v102);
    v103 = v126;
    v104 = v125;
    v105 = v128;
    (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v125, v100, v128);
    v106 = v123;
    sub_100080C0C(v76, v123, type metadata accessor for PeakKnockoutMark);
    v154 = v106;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v100, v104, v105);
    v155 = v100;
    v107 = (uint64_t)v146;
    sub_10073B974();
    v108 = *(void (**)(char *, uint64_t))(v103 + 8);
    v108(v104, v105);
    sub_1000215BC(v76, type metadata accessor for PeakKnockoutMark);
    v108(v100, v105);
    sub_1000215BC(v106, type metadata accessor for PeakKnockoutMark);
    v109 = sub_1000BA294(&qword_100BF2298);
    _s7Weather24LocationCompositionStateOwst_0(v107, 0, 1, v109);
    v110 = v147;
    sub_1000787D4(v107, v147, &qword_100BF2288);
    v111 = v107;
  }
  else
  {
    v112 = sub_1000BA294(&qword_100BF2298);
    v110 = v147;
    _s7Weather24LocationCompositionStateOwst_0(v147, 1, 1, v112);
    v111 = (uint64_t)v146;
  }
  v114 = v151;
  v113 = v152;
  v115 = v150;
  v116 = v153;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v150, v151, v153);
  v154 = (uint64_t)v115;
  sub_100037768(v110, v111, &qword_100BF2288);
  v155 = (void *)v111;
  sub_10073BA5C();
  sub_100021A14(v110, &qword_100BF2288);
  v117 = *(void (**)(char *, uint64_t))(v113 + 8);
  v117(v114, v116);
  sub_100021A14(v111, &qword_100BF2288);
  return ((uint64_t (*)(char *, uint64_t))v117)(v115, v116);
}

uint64_t sub_10059CDF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];

  v52 = a1;
  v1 = type metadata accessor for BasicChartSymbolShape(0);
  v2 = *(_QWORD *)(v1 - 8);
  v50 = v1;
  v51 = v2;
  __chkstk_darwin(v1);
  v49 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v4);
  v45 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PointMark(0);
  v46 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000BA294(&qword_100BD78C0);
  v16 = *(_QWORD *)(v15 - 8);
  v47 = v15;
  v48 = v16;
  __chkstk_darwin(v15);
  v44 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  DetailChartDataElement.date.getter(v18);
  static PlottableValue.value(_:_:)(v18, v20, v22 & 1, v24, v8, v6, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v25 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v8, v6, v25);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
  v28 = v27;
  LOBYTE(v18) = v29;
  v31 = v30;
  v53[0] = DetailChartDataElement.value.getter(v26);
  v32 = v45;
  static PlottableValue.value(_:_:)(v26, v28, v18 & 1, v31, v53, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  v33 = swift_bridgeObjectRelease();
  v34 = PointMark.init<A, B>(x:y:)(v11, v32, v6, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v33);
  v35 = v49;
  static ChartSymbolShape<>.circle.getter(v34);
  sub_10007A100((uint64_t)&qword_100BD78E8);
  v37 = v36;
  v38 = v44;
  v39 = v50;
  ChartContent.symbol<A>(_:)(v35, v12, v50, &protocol witness table for PointMark, v36);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v39);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v12);
  v53[0] = v12;
  v53[1] = v39;
  v53[2] = &protocol witness table for PointMark;
  v53[3] = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v53, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
  v41 = v47;
  ChartContent.symbolSize(_:)(v47, OpaqueTypeConformance2, 64.0);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v38, v41);
}

uint64_t sub_10059D184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t OpaqueTypeConformance2;
  char *v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  void *v159;
  uint64_t v160;
  _QWORD v161[2];

  v148 = a2;
  v151 = a3;
  v127 = sub_1000BA294(&qword_100BD78C8);
  v125 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v124 = (uint64_t)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_1000BA294(&qword_100BD78B0);
  v129 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v130 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v128 = (char *)&v121 - v7;
  v122 = type metadata accessor for PeakKnockoutMark(0);
  __chkstk_darwin(v122);
  v126 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v123 = (char *)&v121 - v10;
  v11 = sub_1000BA294(&qword_100BF2288);
  __chkstk_darwin(v11);
  v149 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v150 = (uint64_t)&v121 - v14;
  v15 = sub_1000BA294(&qword_100BDCD58);
  __chkstk_darwin(v15);
  v138 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000BA294(&qword_100BD78B8);
  __chkstk_darwin(v17);
  v134 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Date(0);
  v145 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v20 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BD78D8);
  __chkstk_darwin(v21);
  v132 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LineMark(0);
  v137 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_1000BA294(&qword_100BDCB70);
  v142 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v135 = (char *)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_1000BA294(&qword_100BF2278);
  v144 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v136 = (char *)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_1000BA294(&qword_100BF2268);
  v147 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v139 = (char *)&v121 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_1000BA294(&qword_100BF23D0);
  v155 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v30 = (char *)&v121 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v154 = (char *)&v121 - v32;
  v33 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v133 = a1;
  DetailChartDataElement.date.getter(v33);
  v140 = v20;
  v40 = v152;
  static PlottableValue.value(_:_:)(v33, v35, v37 & 1, v39, v20, v152, &protocol witness table for Date);
  swift_bridgeObjectRelease();
  v41 = swift_bridgeObjectRelease();
  v145 = *(_QWORD *)(v145 + 8);
  ((void (*)(char *, uint64_t, __n128))v145)(v20, v40, v41);
  v42 = LocalizedStringKey.init(stringLiteral:)(0x7469706963657250, 0xED00006E6F697461);
  v44 = v43;
  LOBYTE(v33) = v45;
  v47 = v46;
  v161[0] = DetailChartDataElement.value.getter(v42);
  v48 = v33 & 1;
  v49 = v134;
  static PlottableValue.value(_:_:)(v42, v44, v48, v47, v161, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = LocalizedStringKey.init(stringLiteral:)(0x646E657254, 0xE500000000000000);
  strcpy((char *)v161, "Precipitation");
  HIWORD(v161[1]) = -4864;
  v52 = v138;
  static PlottableValue.value(_:_:)(v50, v53, v51 & 1, v54, v161, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease();
  v55 = swift_bridgeObjectRelease();
  v56 = v52;
  v57 = v30;
  LineMark.init<A, B, C>(x:y:series:)(v132, v49, v56, v40, &type metadata for Double, &type metadata for String, &protocol witness table for Date, &protocol witness table for Double, v55, &protocol witness table for String);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v161, 0, 0, 4.0, 10.0, 0.0);
  v58 = v135;
  ChartContent.lineStyle(_:)(v161, v23, &protocol witness table for LineMark);
  sub_100158A28((uint64_t)v161);
  v59 = (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v25, v23);
  v160 = static Color.cyan.getter(v59);
  v156 = v23;
  v157 = &protocol witness table for LineMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v61 = v136;
  v62 = v141;
  ChartContent.foregroundStyle<A>(_:)(&v160, v141, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  v63 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v142 + 8))(v58, v62, v63);
  v156 = v62;
  v157 = &type metadata for Color;
  v158 = (void *)OpaqueTypeConformance2;
  v159 = &protocol witness table for Color;
  v64 = v148;
  v65 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v66 = v139;
  v67 = v143;
  ChartContent.interpolationMethod(_:)(0, 3, v143, v65);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v61, v67);
  v68 = sub_1000BA294(&qword_100BF2270);
  v156 = v67;
  v157 = (void *)v65;
  v69 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
  v156 = type metadata accessor for RectangleMark(255);
  v157 = &protocol witness table for RectangleMark;
  v70 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.offset(x:yStart:yEnd:)>>, 1);
  v71 = v146;
  ChartContent.mask<A>(content:)(sub_10059CDF0, 0, v146, v68, v69, v70);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v66, v71);
  v72 = (uint64_t)v57;
  v73 = (*(uint64_t (**)(char *, char *, uint64_t))(v155 + 32))(v154, v57, v153);
  v74 = v140;
  DetailChartDataElement.date.getter(v73);
  v75 = v64 + *(int *)(type metadata accessor for PrecipitationAveragesHeroChartView(0) + 24);
  v76 = type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
  LOBYTE(v75) = static Date.== infix(_:_:)(v74, v75 + *(int *)(v76 + 64));
  v77 = ((uint64_t (*)(char *, uint64_t))v145)(v74, v152);
  if ((v75 & 1) != 0)
  {
    v78 = (uint64_t)v123;
    v79 = DetailChartDataElement.date.getter(v77);
    v80 = DetailChartDataElement.value.getter(v79);
    v81 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
    v83 = v82;
    v85 = v84;
    v87 = v86;
    v88 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
    v89 = (int *)v122;
    *(double *)(v78 + *(int *)(v122 + 20)) = v80;
    *(_BYTE *)(v78 + v89[6]) = 0;
    v90 = v78 + v89[8];
    *(_QWORD *)v90 = v88;
    *(_QWORD *)(v90 + 8) = v91;
    *(_BYTE *)(v90 + 16) = v92 & 1;
    *(_QWORD *)(v90 + 24) = v93;
    v94 = v78 + v89[7];
    *(_QWORD *)v94 = v81;
    *(_QWORD *)(v94 + 8) = v83;
    *(_BYTE *)(v94 + 16) = v85 & 1;
    *(_QWORD *)(v94 + 24) = v87;
    v95 = v124;
    v96 = sub_10059CDF4(v124);
    v160 = static Color.white.getter(v96);
    v97 = sub_100075EB0(&qword_100BD78C0);
    v98 = type metadata accessor for PointMark(255);
    v99 = type metadata accessor for BasicChartSymbolShape(255);
    sub_10007A100((uint64_t)&qword_100BD78E8);
    v156 = v98;
    v157 = (void *)v99;
    v158 = &protocol witness table for PointMark;
    v159 = v100;
    v101 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(_:)>>, 1);
    v156 = v97;
    v157 = (void *)v101;
    v102 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of ChartContent.symbolSize(_:)>>, 1);
    v103 = v130;
    v104 = v127;
    ChartContent.foregroundStyle<A>(_:)(&v160, v127, &type metadata for Color, v102, &protocol witness table for Color);
    v105 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v125 + 8))(v95, v104, v105);
    v106 = v129;
    v107 = v128;
    v108 = v131;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v128, v103, v131);
    v109 = v126;
    sub_100080C0C(v78, v126, type metadata accessor for PeakKnockoutMark);
    v156 = v109;
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v107, v108);
    v157 = v103;
    v110 = (uint64_t)v149;
    sub_10073B974();
    v111 = *(void (**)(char *, uint64_t))(v106 + 8);
    v111(v107, v108);
    sub_1000215BC(v78, type metadata accessor for PeakKnockoutMark);
    v111(v103, v108);
    sub_1000215BC(v109, type metadata accessor for PeakKnockoutMark);
    v112 = sub_1000BA294(&qword_100BF2298);
    _s7Weather24LocationCompositionStateOwst_0(v110, 0, 1, v112);
    v113 = v150;
    sub_1000787D4(v110, v150, &qword_100BF2288);
    v114 = v110;
  }
  else
  {
    v115 = sub_1000BA294(&qword_100BF2298);
    v113 = v150;
    _s7Weather24LocationCompositionStateOwst_0(v150, 1, 1, v115);
    v114 = (uint64_t)v149;
  }
  v117 = v154;
  v116 = v155;
  v118 = v153;
  (*(void (**)(uint64_t, char *, uint64_t))(v155 + 16))(v72, v154, v153);
  v156 = v72;
  sub_100037768(v113, v114, &qword_100BF2288);
  v157 = (void *)v114;
  sub_10073BA5C();
  sub_100021A14(v113, &qword_100BF2288);
  v119 = *(void (**)(char *, uint64_t))(v116 + 8);
  v119(v117, v118);
  sub_100021A14(v114, &qword_100BF2288);
  return ((uint64_t (*)(uint64_t, uint64_t))v119)(v72, v118);
}

