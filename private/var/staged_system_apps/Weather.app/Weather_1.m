__n128 sub_100098A48(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_100098A60(uint64_t a1)
{
  return static Calendar.current.getter(a1);
}

void sub_100098A68(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10000AB54(a1, v2, v1);
}

uint64_t sub_100098A74()
{
  return type metadata accessor for PrecipitationAveragesHeroChartInput(0);
}

uint64_t sub_100098A84()
{
  return WeatherDataModel.currentWeather.getter();
}

void sub_100098A8C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

void sub_100098A94()
{
  sub_1005FEE78();
}

uint64_t sub_100098AA0()
{
  return type metadata accessor for Location.Identifier(0);
}

void sub_100098AA8()
{
  sub_1005FEE78();
}

double sub_100098AC0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 104)).n128_u64[0];
  return result;
}

void sub_100098AD4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

uint64_t sub_100098ADC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

__n128 sub_100098AE8(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_100098B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_100098B10()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

uint64_t sub_100098B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v1);
}

uint64_t sub_100098B2C()
{
  return 0;
}

uint64_t sub_100098B38()
{
  return type metadata accessor for InteractiveMapInput(0);
}

uint64_t sub_100098B40@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_100098B48(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

void sub_100098B50()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_100098B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_100098B7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100098B88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100098B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_100098BAC(uint64_t a1)
{
  uint64_t *v1;

  sub_100021A14(a1, v1);
}

uint64_t sub_100098BC4()
{
  return type metadata accessor for StartMethod(0);
}

void sub_100098BE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_1003211F0(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_100098C04()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

double sub_100098C18()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 48) + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_100098C28(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 - 240);
  result[3] = *(_QWORD *)(v2 - 232);
  result[4] = v3;
  result[5] = v1;
  return result;
}

uint64_t sub_100098C3C(uint64_t a1, uint64_t *a2)
{
  return sub_100075EB0(a2);
}

uint64_t sub_100098C44(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_100098C64()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

BOOL sub_100098C78(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100098C88()
{
  return 255;
}

uint64_t sub_100098C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v10;

  return a10(a1, v10);
}

uint64_t sub_100098CA0()
{
  uint64_t v0;
  uint64_t v1;

  return static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)(v0, v1);
}

uint64_t sub_100098CAC()
{
  return type metadata accessor for SunriseSunsetDetailInput.Input(0);
}

id sub_100098CB4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100098CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_100098CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[8] = a1;
  v4[4] = v3;
  v4[5] = v5;
  return static String.localizedStringWithFormat(_:_:)(v1, v2, v4);
}

uint64_t sub_100098CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100098CFC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100098D14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100098D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return View.accessibilityElement(children:)(v1, *(_QWORD *)(v2 - 208), a1);
}

void sub_100098D50(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 360) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100098D74()
{
  return type metadata accessor for TemperatureAveragesDetailViewModel._Storage(0);
}

uint64_t sub_100098D80(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, *(_QWORD *)(v1 - 112));
}

uint64_t sub_100098D88()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 136, 0);
}

uint64_t sub_100098D94()
{
  return 0x7469706963657270;
}

void sub_100098DB8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

uint64_t sub_100098DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

double sub_100098DC8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 112)).n128_u64[0];
  return result;
}

uint64_t sub_100098DD0()
{
  return 0x7720739980E27449;
}

void sub_100098DF0()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000979AC(v1, v0);
}

uint64_t sub_100098DFC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_100098E08()
{
  return 0x656B6F6D73;
}

uint64_t sub_100098E1C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

id sub_100098E28(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 1);
}

uint64_t sub_100098E34()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 208));
}

uint64_t sub_100098E44()
{
  return type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
}

BOOL sub_100098E50()
{
  NSObject *v0;
  os_log_type_t v1;

  return os_log_type_enabled(v0, v1);
}

uint64_t sub_100098E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100098E6C()
{
  return type metadata accessor for LocationPreviewModalViewModel(0);
}

double sub_100098E74()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200)).n128_u64[0];
  return result;
}

uint64_t sub_100098E7C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10005EAA0(v0, v1);
}

uint64_t sub_100098E88()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100082C5C(*(_QWORD *)(v1 + *(int *)(v0 + 28)), *(unsigned __int8 *)(v1 + *(int *)(v0 + 28) + 8), *(_BYTE *)(v1 + *(int *)(v0 + 28) + 9));
}

double sub_100098EB4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_100098EC8()
{
  return _s11NormalModelVMa(0);
}

uint64_t sub_100098EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100098EF4()
{
  return 0x25203A7374737547;
}

uint64_t sub_100098F14()
{
  uint64_t v0;

  return static _DictionaryStorage.allocate(capacity:)(v0);
}

uint64_t sub_100098F20()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_100098F38()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100098F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

uint64_t sub_100098F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Page(255, a2);
  return type metadata accessor for Array(255, v2);
}

uint64_t sub_100098F6C()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v0);
}

uint64_t sub_100098F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100098F8C()
{
  return PrecipitationTotalHeroString.type.getter();
}

uint64_t sub_100098F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for WeatherMapPresentationState(0);
}

uint64_t sub_100098FB4()
{
  return AirQuality.scale.getter();
}

uint64_t sub_100098FC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = v0;
  return type metadata accessor for DayWeather(0);
}

uint64_t sub_100098FCC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100098FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

void sub_100098FE0(uint64_t a1, ...)
{
  uint64_t *v1;
  uint64_t v2;
  va_list va;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v2 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_10003773C((uint64_t)va1, (uint64_t)va, v1);
}

unint64_t sub_100098FF0()
{
  return sub_100675F24();
}

id sub_100098FF8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

void sub_100099004(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_1000787D4(a1, v2, v1);
}

void *sub_100099010(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA2uLL);
}

double sub_100099018()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void sub_100099028()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000787D4(v3, v1 + *(int *)(v2 + 48), v0);
}

uint64_t sub_10009903C()
{
  return type metadata accessor for SunriseSunsetDetailViewModel(0);
}

uint64_t sub_100099044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 136));
}

uint64_t sub_100099054(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 216));
}

uint64_t sub_100099064()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getAtKeyPath(v0, v1);
}

uint64_t sub_100099074()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v0);
}

uint64_t sub_100099088()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_100099090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

void sub_1000990A4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(v2, v0, v1);
}

double sub_1000990B4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136)).n128_u64[0];
  return result;
}

double sub_1000990BC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000990D4()
{
  uint64_t v0;

  return v0;
}

void sub_100099100()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000979AC(*(_QWORD *)(v1 - 128), v0);
}

uint64_t sub_10009910C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_100099120()
{
  return type metadata accessor for MapComponentView(0);
}

uint64_t sub_100099128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t sub_100099148(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t sub_100099150()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009917C(uint64_t a1, uint64_t a2)
{
  return static Font.system(_:design:weight:)(a1, a2, 0, 1);
}

uint64_t sub_100099188()
{
  uint64_t v0;
  uint64_t v1;

  return Measurement<>.converted(to:)(v0, v1);
}

_QWORD *sub_100099198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,...)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  va_list va;

  va_start(va, a22);
  LOBYTE(a11) = v27;
  LOBYTE(a9) = v26;
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)((uint64_t *)va, a1, a2, a3, v28, a5, v29, a7, v25, v23, a9, v22, a11, v30, v24);
}

uint64_t sub_1000991C0()
{
  return type metadata accessor for NextHourPrecipitationDetailInnerView(0);
}

unint64_t sub_1000991C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000D0BF8(a1);
  sub_1000F435C((uint64_t)v1);
  sub_10007A148();
  v2 = sub_1000987A8();
  return sub_100099D94(v2, v3, v4);
}

uint64_t sub_100099224()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10009922C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_10009924C()
{
  return type metadata accessor for LocationOfInterestType(0);
}

uint64_t sub_100099254@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10009925C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100099264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_10009926C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, a4);
}

uint64_t sub_100099274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_100099284(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

void sub_100099298(uint64_t a1)
{
  uint64_t *v1;

  sub_100021A14(a1, v1);
}

double sub_1000992A0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000992A8()
{
  return 0;
}

uint64_t sub_1000992C4()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000992CC()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000992D4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_1000992DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(v2, a2);
}

uint64_t sub_1000992E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000992EC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

void sub_1000992F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

uint64_t sub_100099328()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

void sub_100099330(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

double sub_10009934C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_100099354()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100099360()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100099374(uint64_t a1)
{
  uint64_t v1;

  return asyncMain(block:)(a1, v1);
}

char *sub_10009937C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  char *result;

  v2 = *(_QWORD **)(v1 + 1224);
  result = (char *)v2 + *(int *)(a1 + 48);
  *v2 = 6;
  return result;
}

uint64_t sub_10009939C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_1000993BC(uint64_t a1@<X8>)
{
  sub_10000E75C(a1);
}

uint64_t sub_1000993C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 - 184))(*(_QWORD *)(v2 - 176), v0, v1);
}

uint64_t sub_1000993DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

void sub_1000993EC(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, *(_QWORD *)(a3 - 256), a2);
}

void sub_1000993F4()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100099400()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100099408()
{
  return 1;
}

uint64_t sub_100099418()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100099430()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_100099450()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_10009945C()
{
  double v0;

  return EdgeInsets.init(_all:)(v0);
}

uint64_t sub_100099474()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v0 + v1), *(_BYTE *)(v0 + v1 + 8));
}

uint64_t sub_100099498()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 144));
}

uint64_t sub_1000994A0()
{
  return 0x617465446E6F6F6DLL;
}

unint64_t sub_1000994B4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return sub_1003B8804();
}

uint64_t sub_1000994C0()
{
  return sub_100030ED4();
}

uint64_t sub_1000994CC()
{
  return type metadata accessor for NewsDataModel(0);
}

uint64_t sub_1000994D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000994E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 120))(v1, v0);
}

uint64_t sub_100099508()
{
  return type metadata accessor for ConditionDetailViewModel.Model(0);
}

uint64_t sub_100099510()
{
  return type metadata accessor for AutomationCellInfo(0);
}

uint64_t sub_100099518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 368));
}

void sub_10009952C()
{
  uint64_t v0;

}

void sub_100099554()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_100099574()
{
  return 0;
}

uint64_t sub_100099590()
{
  return 0x6E696E746867696CLL;
}

void sub_1000995B8(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100095B78(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000995D8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = result;
  return result;
}

uint64_t sub_1000995F0()
{
  return type metadata accessor for ChartViewModel(0);
}

uint64_t sub_1000995F8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100099604(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10009960C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_100099618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100099628(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100099644()
{
  uint64_t v0;

  return type metadata accessor for State(0, v0);
}

uint64_t sub_100099650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(a1, v1);
}

void sub_100099660(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_100099668()
{
  return type metadata accessor for UnitConfiguration.Distance(0);
}

uint64_t sub_100099670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v4 - 256, v1, v2, v3, a1);
}

uint64_t sub_10009968C(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_100099698()
{
  return type metadata accessor for WeatherData.WeatherStatisticsState(0);
}

id sub_1000996B0(id a1)
{
  return a1;
}

void sub_1000996BC()
{
  sub_10009ADAC();
}

uint64_t sub_1000996D4()
{
  return 0;
}

uint64_t sub_100099708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return AttributedString.init(_:attributes:)(v0, v2, v1);
}

uint64_t sub_100099720()
{
  return type metadata accessor for ViewState.SecondaryViewState(0);
}

void sub_10009973C(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10009974C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = result;
  return result;
}

uint64_t sub_10009975C(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 2);
}

uint64_t sub_100099768()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_100099774()
{
  return type metadata accessor for AppConfiguration(0);
}

uint64_t sub_1000997A8()
{
  return type metadata accessor for WeatherMapPerformanceTestConditions(0);
}

void sub_1000997B8(uint64_t a1)
{
  sub_10083C82C(a1);
}

uint64_t sub_1000997C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Forecast.init(_:metadata:)(a1, a2, *(_QWORD *)(v2 - 816), *(_QWORD *)(v2 - 832), *(_QWORD *)(v2 - 840), *(_QWORD *)(v2 - 848));
}

uint64_t sub_1000997E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000997F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return type metadata accessor for ModifiedContent(255, a2, v2);
}

void sub_100099804()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1008EC420(v2, *(char **)(v3 - 192), *(_QWORD *)(v3 - 168), v1, v0, *(_DWORD *)(v3 - 204) & 1);
}

uint64_t sub_100099824()
{
  uint64_t v0;
  uint64_t v1;

  return State.init(wrappedValue:)(v1 - 112, v0);
}

uint64_t sub_100099834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return a18;
}

double sub_100099850()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  double result;

  v2 = *v1;
  *v1 = v0;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t sub_10009985C()
{
  return type metadata accessor for ContentStatusBanner(0);
}

uint64_t sub_10009987C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000998A8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

double sub_1000998B4()
{
  return 0.0;
}

void sub_1000998D4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

void sub_1000998DC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

void sub_1000998E4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

uint64_t sub_1000998EC()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

void sub_100099904(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

uint64_t sub_100099928()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_10009993C()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[176] + 16))(v0[160], v0[178], v0[179]);
}

__n128 *sub_100099954(__n128 *result, __n128 a2)
{
  uint64_t v2;

  *(__n128 *)(v2 - 128) = a2;
  result[1] = a2;
  return result;
}

void sub_10009997C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DA4(v3, a2, a3);
}

uint64_t sub_100099984()
{
  return type metadata accessor for DispatchQoS(0);
}

unint64_t sub_10009998C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10026A0DC();
}

uint64_t sub_100099998()
{
  return type metadata accessor for DynamicTypeSize(0);
}

uint64_t sub_1000999A8()
{
  return Logger.logObject.getter();
}

void sub_1000999B0()
{
  sub_1000FFAB4();
}

uint64_t sub_1000999D0()
{
  return UIListContentConfiguration.TextProperties.numberOfLines.setter(1);
}

double sub_1000999DC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000999E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000999F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_100099A04(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_100099A0C(uint64_t a1)
{
  return swift_allocObject(a1, 80, 7);
}

uint64_t sub_100099A18(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_100099A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, a2, a3, v3);
}

uint64_t sub_100099A30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 256) = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_100099A3C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_100099A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeFrontToBack(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

uint64_t sub_100099A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100099A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v0);
  return static Set<>.full.getter(v2);
}

uint64_t sub_100099A8C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_100099A94()
{
  return type metadata accessor for DetailChartSelection(0);
}

uint64_t sub_100099AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_getOpaqueTypeConformance2(&a9, a2, 1);
}

uint64_t sub_100099AB0(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7);
}

uint64_t sub_100099AB8()
{
  uint64_t v0;

  return dispatch thunk of Actor.unownedExecutor.getter(v0);
}

uint64_t sub_100099AC4()
{
  return static AccessibilityChildBehavior.contain.getter();
}

uint64_t sub_100099ACC()
{
  return type metadata accessor for MainAction(0);
}

uint64_t sub_100099AD4()
{
  return type metadata accessor for NotificationsAction(0);
}

uint64_t sub_100099ADC()
{
  return 0;
}

uint64_t sub_100099AFC()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
}

uint64_t sub_100099B28(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE500000000000000);
}

uint64_t sub_100099B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_100099B38(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_100099B54(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100099B70(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 128));
}

unint64_t sub_100099B80()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_10055FF98();
}

uint64_t sub_100099B8C()
{
  return 0;
}

void sub_100099B98()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

void sub_100099BA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_100099BB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001009A4(a1, v1);
}

uint64_t sub_100099BC0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100099BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100099BDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 168))(v2 + a1, v1, v3);
}

uint64_t sub_100099BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

uint64_t sub_100099C00()
{
  uint64_t v0;

  return v0;
}

void sub_100099C0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100037768(a1, v3, a3);
}

__n128 sub_100099C14@<Q0>(__int16 a1@<W8>)
{
  __int16 v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  result = *(__n128 *)(v2 - 256);
  v4 = *(_OWORD *)(v2 - 240);
  *(__n128 *)(v2 - 304) = result;
  *(_OWORD *)(v2 - 288) = v4;
  *(_WORD *)(v2 - 272) = v1 | a1;
  return result;
}

void sub_100099C3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100084050(a1, *(_QWORD *)(v3 - 192), a3);
}

uint64_t sub_100099C48()
{
  return static SettingReader.shared.getter();
}

uint64_t sub_100099C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100099C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 136) + 104))(*(_QWORD *)(v2 - 144), a2, *(_QWORD *)(v2 - 128));
}

uint64_t sub_100099C94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_100099CA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(v1 - 144));
}

void sub_100099CB0()
{
  int v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = (v0 - 1);
}

uint64_t sub_100099CCC()
{
  return 7364973;
}

uint64_t sub_100099CDC(uint64_t a1)
{
  return type metadata accessor for Array(255, a1);
}

uint64_t sub_100099CE8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

void sub_100099CF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(*(_QWORD *)(v2 - 216), a2);
}

uint64_t sub_100099CF8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(a2 - 256), 1, 1, a1);
}

uint64_t sub_100099D0C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 84)));
}

uint64_t sub_100099D28(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_100099D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1000B2074(a1, v2, v1);
}

uint64_t sub_100099D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v2, v1);
}

double sub_100099D48()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_100099D54()
{
  return type metadata accessor for AnimatedGradient(0);
}

uint64_t sub_100099D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1);
}

unint64_t sub_100099D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100099E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  char v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, unsigned __int8 *, uint64_t, __n128);
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112[24];
  _OWORD v113[2];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;

  v98 = a2;
  type metadata accessor for TimeState(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100098728();
  v97 = v5 - v4;
  v99 = type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v7);
  v93 = (uint64_t)&v89 - v8;
  v103 = sub_100098778();
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v9);
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_1000BA30C();
  __chkstk_darwin(v11);
  v13 = (char *)&v89 - v12;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_1000986FC();
  sub_1000BA30C();
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v89 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v89 - v20;
  __chkstk_darwin(v19);
  v22 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8);
  v110 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 24);
  v94 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v111 = (uint64_t)&v89 - v24;
  sub_10009C514(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)&v89 - v24);
  v25 = qword_100BC2088;
  v109 = v22;
  swift_bridgeObjectRetain(v22);
  sub_1000DF950((uint64_t)&v119);
  v107 = v23;
  swift_bridgeObjectRetain(v23);
  if (v25 != -1)
    swift_once(&qword_100BC2088, sub_10015B3B4);
  v26 = qword_100CAE8C0;
  sub_10078D8E0();
  v27 = sub_1000DA1F0(v26);
  v100 = v13;
  Date.init(timeIntervalSince1970:)(v27, *(double *)v113);
  if (qword_100BC2090 != -1)
    swift_once(&qword_100BC2090, sub_10015B308);
  sub_1000DA1F0(qword_100CAE8C8);
  HIDWORD(v95) = LOBYTE(v113[0]);
  v28 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn);
  v91 = type metadata accessor for NotificationsOptInState(0);
  v29 = v28[*(int *)(v91 + 56)];
  sub_10009C514(v111, (uint64_t)v21);
  v30 = type metadata accessor for CurrentLocation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v30) == 1)
  {
    sub_100021A14((uint64_t)v21, (uint64_t *)&unk_100C0D170);
    v32 = 0;
  }
  else
  {
    CurrentLocation.id.getter(v31);
    v32 = v33;
    sub_1000215BC((uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  sub_1000DD39C();
  sub_10009AD1C(v34, v35, v36, v37, v38, v39, v40, v41, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99,
    (uint64_t)v100);
  v43 = v42;
  swift_bridgeObjectRelease(v32);
  sub_10009C514(v111, (uint64_t)v18);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v30) == 1)
  {
    sub_100021A14((uint64_t)v18, (uint64_t *)&unk_100C0D170);
    v45 = 0;
  }
  else
  {
    CurrentLocation.id.getter(v44);
    v45 = v46;
    sub_1000215BC((uint64_t)v18, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
  }
  sub_1000DD39C();
  sub_10066D12C(v47, v48, v49, v50, v51, v52, v53, v54, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99,
    (uint64_t)v100);
  v56 = v55;
  swift_bridgeObjectRelease(v45);
  v57 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v112, 0, 0);
  v58 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications;
  HIDWORD(v92) = sub_10009AC0C(v29, v43 & 1, v56 & 1, *(_BYTE *)(v57 + 1), *(_BYTE *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications));
  v59 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  v60 = v93;
  sub_100084050(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v93, type metadata accessor for ViewState);
  v61 = *(_QWORD *)(v60 + *(int *)(v99 + 36) + 8);
  sub_1000215BC(v60, type metadata accessor for ViewState);
  if (v61 == 1)
  {
    v63 = LocationAuthorizationState.rawValue.getter(*(_BYTE *)(v57 + 1));
    if (v63 == 0xD000000000000010 && v64 == 0x80000001009EFAB0)
    {
      swift_bridgeObjectRelease(0x80000001009EFAB0);
      goto LABEL_16;
    }
    sub_100099264(v63, v64, 0xD000000000000010, 0x80000001009EFAB0);
    v62.n128_f64[0] = sub_1000C5660();
    if ((type metadata accessor for ViewState & 1) != 0)
LABEL_16:
      __asm { BR              X10 }
  }
  LODWORD(v93) = 0;
  HIDWORD(v89) = *(unsigned __int8 *)(v57 + 2);
  LODWORD(v92) = *v28;
  v65 = v91;
  v66 = v102;
  v67 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t, __n128))(v102 + 16);
  v68 = v103;
  v67(v105, &v28[*(int *)(v91 + 40)], v103, v62);
  v69 = *(int *)(v65 + 48);
  LODWORD(v90) = v28[*(int *)(v65 + 44)];
  LODWORD(v91) = v28[v69];
  HIDWORD(v90) = *(unsigned __int8 *)(v57 + 1);
  v70 = *(_BYTE *)(a1 + v58);
  ((void (*)(uint64_t, char *, uint64_t))v67)(v106, v100, v68);
  sub_10009C514(v111, v101);
  v71 = v96;
  sub_100084050(v59, v96, type metadata accessor for ViewState);
  v72 = *(_QWORD *)(v71 + *(int *)(v99 + 36) + 8);
  sub_1000DF950((uint64_t)&v118);
  sub_1000215BC(v71, type metadata accessor for ViewState);
  v73 = (_OWORD *)(v57 + *(int *)(type metadata accessor for EnvironmentState(0) + 64));
  v74 = v73[1];
  v113[0] = *v73;
  v113[1] = v74;
  v114 = v73[2];
  v115 = v113[0];
  v116 = v74;
  v117 = v114;
  v75 = *(_QWORD *)(v94 + *(int *)(type metadata accessor for LocationsState(0) + 36));
  sub_10009AA24((id *)&v115);
  sub_10009AA24((id *)&v115 + 1);
  sub_10009AA24((id *)&v116);
  sub_10009AA24((id *)&v116 + 1);
  sub_10009AA24((id *)&v117);
  sub_10009AA24((id *)&v117 + 1);
  swift_bridgeObjectRetain(v75);
  v77 = sub_10078C6AC(v76);
  swift_bridgeObjectRelease(v75);
  v78 = v97;
  sub_100084050(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v97, type metadata accessor for TimeState);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v104, v78, v68);
  v79 = *(_BYTE *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState);
  v80 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState + 8);
  swift_bridgeObjectRetain(v80);
  if ((static Settings.Features.homeAndWorkEnabled.getter(v81) & 1) != 0)
    v82 = static Settings.HomeAndWork.homeAndWorkLabelEnabled.getter();
  else
    v82 = 0;
  v83 = HIDWORD(v89) == 4;
  (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v103);
  sub_100021A14(v111, (uint64_t *)&unk_100C0D170);
  *((_QWORD *)&v88 + 1) = v109;
  *(_QWORD *)&v88 = v110;
  v87 = v70;
  v84 = v98;
  sub_10078C7A8(v83, v92, v99, v105, v90, SBYTE4(v92), v91, SBYTE4(v90), v98, v87, v93 & 1, v106, SBYTE4(v95), v88, v108, v107, v101, v72, v113,
    (uint64_t)v77,
    v104,
    v79,
    v80,
    v82 & 1);
  v85 = sub_1000D98E8();
  return _s7Weather24LocationCompositionStateOwst_0(v84, 0, 1, v85);
}

uint64_t sub_10009A758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10078D84C);
}

double sub_10009A764(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  double result;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  }
  else if (!EnumCaseMultiPayload)
  {
    v5 = type metadata accessor for AvailableDataSets(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  return result;
}

void sub_10009A7C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  sub_10004A2B0(a1, a2, a3);
  sub_10009BC70();
  sub_1000C13A8(v3, v4);
  sub_10004A298();
}

uint64_t sub_10009A7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1007D4A98(a1, a2, a3, type metadata accessor for LocationAvailableDataSetState);
}

uint64_t sub_10009A7F8(uint64_t a1, id *a2)
{
  void *v4;
  id v5;
  char v6;
  void *v7;
  id v8;
  char v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  id v14;
  char v15;
  void *v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  char v21;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;

  v4 = *(void **)a1;
  v5 = *a2;
  v33 = *a2;
  v34 = v4;
  if (v4)
  {
    if (!v5)
      return 0;
    sub_1000B4D98();
    sub_10009AA24(&v33);
    sub_10009AA24(&v34);
    v6 = sub_1000BCA1C();
    sub_10009AA4C(&v33);
    sub_10009AA4C(&v34);
    if ((v6 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(void **)(a1 + 8);
  v8 = a2[1];
  v31 = v8;
  v32 = v7;
  if (v7)
  {
    if (!v8)
      return 0;
    sub_1000B4D98();
    sub_10009AA24(&v31);
    sub_10009AA24(&v32);
    v9 = sub_1000BCA1C();
    sub_10009AA4C(&v31);
    sub_10009AA4C(&v32);
    if ((v9 & 1) == 0)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  v10 = *(void **)(a1 + 16);
  v11 = a2[2];
  v29 = v11;
  v30 = v10;
  if (v10)
  {
    if (!v11)
      return 0;
    sub_1000B4D98();
    sub_10009AA24(&v29);
    sub_10009AA24(&v30);
    v12 = sub_1000BCA1C();
    sub_10009AA4C(&v29);
    sub_10009AA4C(&v30);
    if ((v12 & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v13 = *(void **)(a1 + 24);
  v14 = a2[3];
  v27 = v14;
  v28 = v13;
  if (v13)
  {
    if (!v14)
      return 0;
    sub_1000B4D98();
    sub_10009AA24(&v27);
    sub_10009AA24(&v28);
    v15 = sub_1000BCA1C();
    sub_10009AA4C(&v27);
    sub_10009AA4C(&v28);
    if ((v15 & 1) == 0)
      return 0;
  }
  else if (v14)
  {
    return 0;
  }
  v16 = *(void **)(a1 + 32);
  v17 = a2[4];
  v25 = v17;
  v26 = v16;
  if (v16)
  {
    if (!v17)
      return 0;
    sub_1000B4D98();
    sub_10009AA24(&v25);
    sub_10009AA24(&v26);
    v18 = sub_1000BCA1C();
    sub_10009AA4C(&v25);
    sub_10009AA4C(&v26);
    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v19 = *(void **)(a1 + 40);
  v20 = a2[5];
  v23 = v20;
  v24 = v19;
  if (v19)
  {
    if (v20)
    {
      sub_1000B4D98();
      sub_10009AA24(&v23);
      sub_10009AA24(&v24);
      v21 = static NSObject.== infix(_:_:)(v19, v20);
      sub_10009AA4C(&v23);
      sub_10009AA4C(&v24);
      if ((v21 & 1) != 0)
        return 1;
    }
  }
  else if (!v20)
  {
    return 1;
  }
  return 0;
}

id *sub_10009AA24(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id *sub_10009AA4C(id *a1)
{

  return a1;
}

unint64_t sub_10009AA74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDE870;
  if (!qword_100BDE870)
  {
    v1 = objc_opt_self(NSUnit);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BDE870);
  }
  return result;
}

void sub_10009AAB0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10009AAE4();
  *v0 = v1;
}

void sub_10009AAE4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_1000D1950();
  if ((v5 & 1) != 0)
  {
    sub_1000DD15C();
    if (v6 != v7)
    {
      sub_1000C572C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000C179C();
  if (v4)
  {
    v13 = sub_1000DBBEC(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100098740(v13, 16 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000C22C4((uint64_t)(v15 - 32) / 16);
  }
  v16 = sub_1000FC4F8();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10009925C();
  sub_10004A2A0();
}

uint64_t sub_10009AB84()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000B4628();
  if (v0 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000D9C04();
    if (!v4 && v3)
    {
      v3 = v2 >= v1;
      v4 = v2 == v1;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    if (v4 || !v3)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
  return result;
}

uint64_t sub_10009AC0C(char a1, int a2, int a3, char a4, char a5)
{
  if (a4 && (a1 & 1) != 0)
  {
    if (a5)
      return 2;
    swift_bridgeObjectRelease(0xED000064656E696DLL);
  }
  return a3 & ~a2 & 1;
}

void sub_10009AD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10066D138(a1, a2, a3, a4, a5, a6, (uint64_t)&static AvailableDataSets.forecastNextHour.getter, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t type metadata accessor for LocationAvailableDataSetState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFB400, (uint64_t)&nominal type descriptor for LocationAvailableDataSetState);
}

uint64_t sub_10009AD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10009AD84()
{
  sub_1005FEB88();
}

void sub_10009AD98()
{
  sub_1005FEB88();
}

void sub_10009ADAC()
{
  sub_1005FEB88();
}

uint64_t sub_10009ADC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  char v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unsigned __int8 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];
  _OWORD v31[3];

  if (*a1 != *a2)
    goto LABEL_28;
  v4 = a2[1];
  v5 = LocationAuthorizationState.rawValue.getter(a1[1]);
  v7 = v6;
  v8 = LocationAuthorizationState.rawValue.getter(v4);
  v10 = v5 == v8 && v7 == v9;
  if (v10)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    v13 = 0;
    if ((v12 & 1) == 0)
      return v13 & 1;
  }
  if (!sub_10009F07C(a1[2], a2[2])
    || (v14 = (int *)sub_1000D9204(), (static Locale.== infix(_:_:)(&a1[v14[7]], &a2[v14[7]]) & 1) == 0))
  {
LABEL_28:
    v13 = 0;
    return v13 & 1;
  }
  v15 = v14[8];
  v16 = *(_QWORD *)&a1[v15];
  v17 = *(_QWORD *)&a1[v15 + 8];
  v18 = &a2[v15];
  v19 = *((_QWORD *)v18 + 1);
  v20 = v16 == *(_QWORD *)v18 && v17 == v19;
  if (v20
    || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, *(_QWORD *)v18, v19, 0), v13 = 0, (v21 & 1) != 0))
  {
    sub_1000BA538();
    if (v10)
    {
      sub_1000BA538();
      if (v10)
      {
        sub_1000BA538();
        if (v10)
        {
          sub_1000BA538();
          if (v10 && *(_QWORD *)&a1[v14[13]] == *(_QWORD *)&a2[v14[13]])
          {
            sub_1000BA538();
            if (v10)
            {
              sub_1000BA538();
              if (v10)
              {
                v23 = v14[16];
                v24 = *(_OWORD *)&a1[v23 + 16];
                v30[0] = *(_OWORD *)&a1[v23];
                v30[1] = v24;
                v25 = *(_OWORD *)&a1[v23 + 32];
                v26 = &a2[v23];
                v27 = *(_OWORD *)v26;
                v28 = *((_OWORD *)v26 + 1);
                v30[2] = v25;
                v31[0] = v27;
                v29 = *((_OWORD *)v26 + 2);
                v31[1] = v28;
                v31[2] = v29;
                v13 = sub_10009A7F8((uint64_t)v30, (id *)v31);
                return v13 & 1;
              }
            }
          }
        }
      }
    }
    goto LABEL_28;
  }
  return v13 & 1;
}

uint64_t sub_10009AF74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  int *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unsigned __int8 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[3];
  _OWORD v62[3];

  type metadata accessor for CurrentLocation(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v8 = sub_1000BA294(&qword_100BDE868);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = v11 - v10;
  sub_1000BA294((uint64_t *)&unk_100C0D170);
  sub_1000B42B0();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v57 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v57 - v20;
  if (*a1 != *a2)
    goto LABEL_47;
  if (a1[1] != a2[1])
    goto LABEL_47;
  sub_10009E004(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  if ((v22 & 1) == 0)
    goto LABEL_47;
  v23 = (int *)sub_1000D98E8();
  if ((sub_1000B4438(v23[7]) & 1) == 0)
    goto LABEL_47;
  sub_1000BA538();
  if (!v29)
    goto LABEL_47;
  if ((sub_10009B654(a1[v23[9]], a2[v23[9]]) & 1) == 0)
    goto LABEL_47;
  sub_1000BA538();
  if (!v29)
    goto LABEL_47;
  v24 = v23[11];
  v25 = a1[v24];
  LODWORD(v59) = a2[v24];
  v58 = LocationAuthorizationState.rawValue.getter(v25);
  v60 = v26;
  v28 = LocationAuthorizationState.rawValue.getter(v59);
  v29 = v58 == v28 && v60 == v27;
  if (v29)
  {
    swift_bridgeObjectRelease_n(v60, 2);
  }
  else
  {
    v57 = v27;
    LODWORD(v59) = sub_100099264(v58, v60, v28, v27);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v57);
    v30 = 0;
    if ((v59 & 1) == 0)
      return v30 & 1;
  }
  if ((sub_10009B650(a1[v23[12]], a2[v23[12]]) & 1) == 0)
    goto LABEL_47;
  sub_1000BA538();
  if (!v29)
    goto LABEL_47;
  if ((sub_1000B4438(v23[14]) & 1) == 0)
    goto LABEL_47;
  sub_1000BA538();
  if (!v29)
    goto LABEL_47;
  v31 = v23[16];
  v32 = *(_QWORD *)&a1[v31];
  v33 = *(_QWORD *)&a1[v31 + 8];
  v34 = *(_QWORD *)&a1[v31 + 16];
  v35 = *(_QWORD *)&a1[v31 + 24];
  v36 = &a2[v31];
  v37 = *(_QWORD *)v36;
  v38 = *((_QWORD *)v36 + 1);
  v39 = *((_QWORD *)v36 + 2);
  v59 = *((_QWORD *)v36 + 3);
  v60 = v35;
  v40 = v32 == v37 && v33 == v38;
  if (v40
    || (v57 = v39,
        v58 = v34,
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v37, v38, 0),
        v30 = 0,
        (v41 & 1) != 0))
  {
    sub_10009E970();
    if ((v42 & 1) == 0)
      goto LABEL_47;
    sub_10009B6B0();
    if ((v43 & 1) == 0)
      goto LABEL_47;
    sub_10009C514((uint64_t)&a1[v23[17]], (uint64_t)v21);
    sub_10009C514((uint64_t)&a2[v23[17]], (uint64_t)v19);
    v44 = v12 + *(int *)(v8 + 48);
    sub_10009C514((uint64_t)v21, v12);
    sub_10009C514((uint64_t)v19, v44);
    sub_1000B4744(v12);
    if (v29)
    {
      sub_1000B3B4C((uint64_t)v19);
      sub_1000B3B4C((uint64_t)v21);
      sub_1000B4744(v44);
      if (v29)
      {
        sub_100021A14(v12, (uint64_t *)&unk_100C0D170);
LABEL_40:
        if (*(_QWORD *)&a1[v23[18]] == *(_QWORD *)&a2[v23[18]])
        {
          v47 = v23[19];
          v48 = *(_OWORD *)&a1[v47 + 16];
          v61[0] = *(_OWORD *)&a1[v47];
          v61[1] = v48;
          v49 = *(_OWORD *)&a1[v47 + 32];
          v50 = &a2[v47];
          v51 = *(_OWORD *)v50;
          v52 = *((_OWORD *)v50 + 1);
          v61[2] = v49;
          v62[0] = v51;
          v53 = *((_OWORD *)v50 + 2);
          v62[1] = v52;
          v62[2] = v53;
          if ((sub_10009A7F8((uint64_t)v61, (id *)v62) & 1) != 0)
          {
            sub_10009B4AC(*(_QWORD **)&a1[v23[20]], *(_QWORD **)&a2[v23[20]]);
            if ((v54 & 1) != 0 && (sub_1000B4438(v23[21]) & 1) != 0 && a1[v23[22]] == a2[v23[22]])
            {
              sub_10009CA08();
              if ((v55 & 1) != 0)
              {
                v30 = a1[v23[23]] ^ a2[v23[23]] ^ 1;
                return v30 & 1;
              }
            }
          }
        }
LABEL_47:
        v30 = 0;
        return v30 & 1;
      }
    }
    else
    {
      sub_10009C514(v12, (uint64_t)v16);
      sub_1000B4744(v44);
      if (!v45)
      {
        sub_10009EDE8(v44, v7);
        v46 = static CurrentLocation.== infix(_:_:)(v16, v7);
        sub_1000215BC(v7, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        sub_1000B3B4C((uint64_t)v19);
        sub_1000B3B4C((uint64_t)v21);
        sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        sub_1000B3B4C(v12);
        if ((v46 & 1) == 0)
          goto LABEL_47;
        goto LABEL_40;
      }
      sub_100021A14((uint64_t)v19, (uint64_t *)&unk_100C0D170);
      sub_100021A14((uint64_t)v21, (uint64_t *)&unk_100C0D170);
      sub_1000215BC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
    }
    sub_100021A14(v12, &qword_100BDE868);
    goto LABEL_47;
  }
  return v30 & 1;
}

uint64_t LocationAuthorizationState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009B440 + 4 * byte_10098BA40[a1]))(0x7265746544746F6ELL, 0xED000064656E696DLL);
}

unint64_t sub_10009B440()
{
  return 0xD000000000000013;
}

unint64_t sub_10009B460()
{
  return 0xD000000000000010;
}

uint64_t sub_10009B47C()
{
  return 0x6465696E6564;
}

uint64_t sub_10009B490()
{
  return 0x7463697274736572;
}

void sub_10009B4AC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v2 = a1[2];
  if (v2 == a2[2]
    && v2
    && a1 != a2
    && ((v5 = a1[4], v6 = a1[5], v7 = a2[4], v8 = a2[5], v5 == v7) ? (v9 = v6 == v8) : (v9 = 0),
        (v9 || (sub_100099264(v5, v6, v7, v8), sub_10007A150(), (v10 & 1) != 0)) && v2 != 1))
  {
    v11 = a2 + 7;
    v12 = a1 + 7;
    v13 = 1;
    while (v13 < v2)
    {
      v14 = *(v12 - 1);
      v15 = *v12;
      v16 = *(v11 - 1);
      v17 = *v11;
      v18 = v14 == v16 && v15 == v17;
      if (v18 || (sub_100099264(v14, v15, v16, v17) & 1) != 0)
      {
        ++v13;
        v11 += 2;
        v12 += 2;
        if (v2 != v13)
          continue;
      }
      goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    sub_100079F70();
  }
}

void sub_10009B564()
{
  sub_1000C1F8C();
  sub_1000D0AAC();
  __asm { BR              X10 }
}

uint64_t sub_10009B59C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10009B5E8 + 4 * byte_1009BDEBE[a2]))(0x6465776F6C6C61);
}

void sub_10009B5E8(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x6465776F6C6C61 && v1 == 0xE700000000000000)
    sub_1000D1F60();
  else
    sub_100099264(a1, v1, 0x6465776F6C6C61, 0xE700000000000000);
  sub_1000986C4();
  sub_1000986E8();
  sub_100079F70();
}

uint64_t sub_10009B654(char a1, char a2)
{
  char v2;

  if (a1 == 2)
  {
    if (a2 != 2)
      goto LABEL_8;
  }
  else
  {
    if (a1 != 3)
    {
      if ((a2 & 0xFE) != 2)
      {
        v2 = ((a1 & 1) == 0) ^ a2;
        return v2 & 1;
      }
      goto LABEL_8;
    }
    if (a2 != 3)
    {
LABEL_8:
      v2 = 0;
      return v2 & 1;
    }
  }
  v2 = 1;
  return v2 & 1;
}

void sub_10009B6B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int EnumCaseMultiPayload;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  sub_1000986AC();
  v6 = sub_1001FB8E8();
  v7 = type metadata accessor for AvailableDataSets(v6);
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_10009BE88(v9, v76);
  v89 = sub_1000BA294(&qword_100BC9ED0);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100098694();
  v11 = type metadata accessor for LocationAvailableDataSetState(0);
  v92 = *(_QWORD *)(v11 - 8);
  v93 = v11;
  sub_10009D98C();
  __chkstk_darwin(v12);
  v86 = (uint64_t *)((char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10009D2A4();
  __chkstk_darwin(v14);
  v85 = (uint64_t)&v76 - v15;
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_100099338();
  v18 = __chkstk_darwin(v17);
  sub_1001FBB60(v18, v19, v20, v21, v22, v23, v24, v25, v76);
  sub_1000BA294(&qword_100BC9ED8);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_1000C24A0();
  __chkstk_darwin(v27);
  sub_1001FBB88();
  if (v63 || (sub_1001FB3F8(), !v63))
  {
LABEL_50:
    sub_100098640();
    return;
  }
  v90 = 0;
  v87 = v0;
  v88 = v1;
  sub_100075DD8();
  sub_1001FB2B8();
  v80 = v4;
  v81 = v28;
  v77 = v28 - 1;
  v78 = v0 + 64;
  v79 = v3;
  if (!v29)
    goto LABEL_7;
LABEL_5:
  sub_1001FB58C();
  v91 = v30;
  while (2)
  {
    sub_1001FBB18();
    v33 = *v31;
    v32 = v31[1];
    v36 = v35 + *(_QWORD *)(v92 + 72) * v34;
    v37 = sub_1000BF070();
    sub_100080C0C(v36, (uint64_t)v2 + *(int *)(v37 + 48), type metadata accessor for LocationAvailableDataSetState);
    *v2 = v33;
    v2[1] = v32;
    sub_10009ED08((uint64_t)v2, 0, 1, v37);
    v1 = v88;
    while (1)
    {
      sub_1000787D4((uint64_t)v2, (uint64_t)v5, &qword_100BC9ED8);
      v47 = sub_1000BF070();
      v48 = sub_100099354();
      sub_100088FC8(v48, v49, v47);
      if (v63)
        goto LABEL_50;
      v50 = *v5;
      sub_10004A31C((uint64_t)v5 + *(int *)(v47 + 48), v94);
      v51 = sub_1000991C8(v50);
      v53 = v52;
      sub_10003BC58();
      if ((v53 & 1) == 0)
        goto LABEL_49;
      sub_1000DC370(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v92 + 72) * v51, v4);
      v54 = (uint64_t *)(v3 + *(int *)(v89 + 48));
      v55 = sub_1000878C4();
      sub_1000DC370(v55, v56);
      sub_1000DC370(v94, (uint64_t)v54);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v93);
      if (!EnumCaseMultiPayload)
      {
        v66 = v85;
        sub_1000DC370(v3, v85);
        if (!sub_1001FB778())
        {
          v68 = v82;
          v67 = v83;
          v69 = v84;
          sub_1000C5B18(v82, (uint64_t)v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 32));
          sub_10005329C((unint64_t *)&qword_100BC9EE8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AvailableDataSets, (uint64_t)&protocol conformance descriptor for AvailableDataSets);
          sub_1001FBB54();
          sub_1001FBB54();
          v70 = v95;
          v71 = v96;
          v72 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
          v3 = v79;
          v72(v66, v69);
          v73 = v68;
          v4 = v80;
          v65 = ((uint64_t (*)(uint64_t, uint64_t))v72)(v73, v69);
          v1 = v88;
          if (v71 == v70)
            goto LABEL_41;
LABEL_44:
          sub_10003BCC0(v65, type metadata accessor for LocationAvailableDataSetState);
LABEL_48:
          sub_1000998E4(v75, type metadata accessor for LocationAvailableDataSetState);
LABEL_49:
          sub_1000215BC(v94, type metadata accessor for LocationAvailableDataSetState);
          goto LABEL_50;
        }
        v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8))(v66, v84);
LABEL_47:
        sub_10004A2CC(v74, &qword_100BC9ED0);
        goto LABEL_48;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v58 = v86;
        sub_1000DC370(v3, (uint64_t)v86);
        v60 = *v58;
        v59 = v58[1];
        if (sub_1001FB778() == 1)
        {
          v61 = *v54;
          v62 = v54[1];
          v63 = v60 == v61 && v59 == v62;
          if (v63)
          {
            swift_bridgeObjectRelease_n(v59, 2);
          }
          else
          {
            v64 = sub_100099264(v60, v59, v61, v62);
            sub_1000CC8C8();
            sub_10003BC58();
            if ((v64 & 1) == 0)
              goto LABEL_44;
          }
          goto LABEL_41;
        }
        sub_10003BC58();
        goto LABEL_47;
      }
      v74 = sub_1001FB778();
      if ((_DWORD)v74 != 2)
        goto LABEL_47;
LABEL_41:
      sub_1000B3B44(v3);
      sub_1000B3B44(v4);
      sub_1000B3B44(v94);
      if (v91)
        goto LABEL_5;
LABEL_7:
      v38 = v90 + 1;
      if (__OFADD__(v90, 1))
      {
        __break(1u);
        goto LABEL_52;
      }
      if (v38 < v81)
      {
        if (*(_QWORD *)(v78 + 8 * v38))
          goto LABEL_10;
        v41 = v90 + 2;
        ++v90;
        if (v38 + 1 < v81)
        {
          if (*(_QWORD *)(v78 + 8 * v41))
            goto LABEL_10;
          v90 = v38 + 1;
          if (v38 + 2 < v81)
          {
            if (*(_QWORD *)(v78 + 8 * (v38 + 2)))
              goto LABEL_10;
            v42 = v38 + 3;
            v90 = v38 + 2;
            if (v38 + 3 < v81)
              break;
          }
        }
      }
LABEL_23:
      v44 = sub_1000BF070();
      sub_10009D34C((uint64_t)v2, v45, v46, v44);
      v91 = 0;
    }
    if (*(_QWORD *)(v78 + 8 * v42))
    {
LABEL_10:
      sub_1001FB5D0();
      v90 = v39;
      v91 = v40;
      continue;
    }
    break;
  }
  while (!__OFADD__(v42, 1))
  {
    if (v42 + 1 >= v81)
    {
      v90 = v77;
      goto LABEL_23;
    }
    sub_1000DE250();
    if (v43)
      goto LABEL_10;
  }
LABEL_52:
  __break(1u);
}

uint64_t sub_10009BBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_10009BBE8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_10009BBF4()
{
  uint64_t v0;

  return Calendar.startOfDay(for:)(v0);
}

double sub_10009BC04()
{
  return 0.0;
}

void sub_10009BC18(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

void sub_10009BC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_10009BC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 136) + 32))(v2, v0 + *(int *)(v1 + 48), *(_QWORD *)(v3 - 88));
}

void sub_10009BC80()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_10009BCA4()
{
  return type metadata accessor for DisplayMetrics(0);
}

uint64_t sub_10009BCB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10009BCCC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009BCE8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009BCF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10009BD00()
{
  return type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
}

uint64_t sub_10009BD10(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10009BD18()
{
  return type metadata accessor for OrderBy(0);
}

uint64_t sub_10009BD20(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return static os_log_type_t.default.getter();
}

uint64_t sub_10009BD28(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_10009BD30(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

uint64_t sub_10009BD44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009BD5C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10009BD6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1000787D4(a1, v3, a3);
}

uint64_t sub_10009BD74()
{
  return 0x70614D646E6977;
}

uint64_t sub_10009BD8C()
{
  return Optional<A>.write(to:)();
}

uint64_t sub_10009BD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, v3);
}

double sub_10009BDB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10009BDC4()
{
  return type metadata accessor for Calendar.Component(0);
}

uint64_t sub_10009BDCC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10009BDD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t sub_10009BDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 - 968))(a1, a2, *(_QWORD *)(v2 - 544));
}

uint64_t sub_10009BDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return State.wrappedValue.setter(va, a1);
}

uint64_t sub_10009BE08()
{
  return type metadata accessor for PressureComponent(0);
}

uint64_t sub_10009BE20()
{
  return LocationModel.locationOfInterest.getter();
}

uint64_t sub_10009BE2C()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

unint64_t sub_10009BE34()
{
  uint64_t v0;

  return sub_1000991C8(v0);
}

void sub_10009BE44()
{
  sub_1000B2E08();
}

uint64_t sub_10009BE50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return type metadata accessor for LocationComponentContainerViewModel(0);
}

void sub_10009BE88(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10009BEA4()
{
  _QWORD *v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v0[169] + 16))(v0[154], v1, v0[170]);
}

uint64_t sub_10009BEBC()
{
  return type metadata accessor for SearchLocation(0);
}

void *sub_10009BEC4(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0xE8uLL);
}

uint64_t sub_10009BED0(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(v1 + 336), 11);
}

void sub_10009BEDC()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

void sub_10009BEE8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 192), a2);
}

uint64_t sub_10009BEF0(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of Sequence.makeIterator()(v1, a1);
}

uint64_t sub_10009BF00()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void sub_10009BF14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037794(a1, a2, v2);
}

uint64_t sub_10009BF1C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10009BF30()
{
  return type metadata accessor for WeatherData.WeatherStatisticsState(0);
}

uint64_t sub_10009BF40()
{
  return dispatch thunk of Table.query.getter();
}

double sub_10009BF48()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10009BF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v0 = *(_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v0 + 8) = v2;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v1 + 32);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10009BF8C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 - 176));
}

uint64_t sub_10009BF98()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

uint64_t sub_10009BFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(a1 + v1, v3, v4);
}

void sub_10009BFB8(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

unint64_t sub_10009BFD4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 8;
  return sub_1004FBB64();
}

uint64_t sub_10009BFE0()
{
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_10009BFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Optional<A>.write(to:)(a1, a2, v2);
}

double sub_10009C004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v13;
  double result;

  v13 = *v12;
  *v12 = a12;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

uint64_t sub_10009C014()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009C020@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t sub_10009C040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return swift_release(v1);
}

uint64_t sub_10009C050()
{
  return type metadata accessor for SunriseSunsetEvent(0);
}

uint64_t sub_10009C05C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

void sub_10009C068(float a1)
{
  float *v1;

  *v1 = a1;
}

id sub_10009C07C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10009C088@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 176), *(_QWORD *)(v2 - 168));
}

double sub_10009C094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return *(double *)&a7;
}

uint64_t sub_10009C0A4()
{
  return static os_log_type_t.default.getter();
}

void sub_10009C0AC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

uint64_t sub_10009C0B4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10009C0BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2 + a1, v3);
}

_QWORD *sub_10009C0C8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

double sub_10009C0D4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10009C0DC@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_10009C0F0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10009C0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for PinningHeaderModifier(0) - 8);
  v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_1000B15F8(*(_QWORD *)v2, *(_BYTE *)(v2 + 8));
}

_QWORD *sub_10009C13C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000DB418(a1, v1);
}

uint64_t sub_10009C144()
{
  uint64_t v0;

  return v0 - 96;
}

uint64_t sub_10009C150()
{
  return type metadata accessor for LocationViewerViewModel(0);
}

uint64_t sub_10009C160()
{
  return type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
}

uint64_t sub_10009C168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a16 + 8))(v23, a23);
}

void sub_10009C17C()
{
  sub_10054A198();
}

uint64_t sub_10009C19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v4, v3);
}

uint64_t sub_10009C1B8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 88)));
}

uint64_t sub_10009C1C4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_10009C1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_10009C1DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10009C204(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000FF448(v2, a2);
}

uint64_t sub_10009C20C()
{
  return type metadata accessor for DailyForecastComponentViewModel(0);
}

uint64_t sub_10009C214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

#error "10009C464: call analysis failed (funcsize=173)"

uint64_t sub_10009C514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10009C55C()
{
  sub_100947700();
}

void sub_10009C578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10094A2B4(a1, a2, (uint64_t)&type metadata accessor for SavedLocation, (uint64_t)&static SavedLocation.== infix(_:_:), a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_10009C58C()
{
  sub_100947700();
}

void sub_10009C5A8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36[10];
  uint64_t v37;

  sub_1000986AC();
  v4 = sub_10011DE64();
  type metadata accessor for Location(v4);
  sub_1001FB210();
  __chkstk_darwin(v5);
  v36[7] = (uint64_t)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v7);
  sub_1000B2FD8();
  sub_1000BA294(&qword_100BC9F18);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100089068();
  v10 = __chkstk_darwin(v9);
  sub_10009E930(v10, v11, v12, v13, v14, v15, v16, v17, v36[0]);
  if (v33)
  {
    sub_1001FBAE4();
LABEL_40:
    sub_1001FBAA4();
    sub_100098640();
    return;
  }
  sub_1001FB3F8();
  if (!v33)
  {
LABEL_39:
    HIDWORD(v37) = 0;
    goto LABEL_40;
  }
  sub_10009D9E4();
  sub_1001FBACC();
  while (1)
  {
    if (v2)
    {
      sub_1001FAFBC();
LABEL_7:
      v18 = sub_1000B2EB8();
      sub_1001FAF88(v18);
      sub_10011E4F4();
      goto LABEL_30;
    }
    sub_1001FB854();
    if (v19)
    {
      __break(1u);
      goto LABEL_42;
    }
    sub_1001FB224();
    if (v20 != v19)
    {
      sub_1001FB83C();
      if (v22)
        goto LABEL_12;
      sub_1001FB290(v21);
      if (v20 != v19)
      {
        sub_1001FB830();
        if (v24)
          goto LABEL_16;
        sub_1001FB27C();
        if (v20 != v19)
          break;
      }
    }
LABEL_29:
    v29 = sub_100099328();
    sub_1001FB024(v29);
LABEL_30:
    v30 = sub_1001FB5E4();
    sub_1000787D4(v30, v31, &qword_100BC9F18);
    v32 = sub_100099328();
    sub_100088FC8(v0, 1, v32);
    if (v33)
      v34 = 1;
    else
      v34 = 0;
    HIDWORD(v37) = v34;
    if (v33)
      goto LABEL_40;
    sub_10009BC2C();
    sub_1001FB1B4();
    sub_10011DEAC();
    if ((v1 & 1) == 0)
    {
      sub_1000CC8B8();
      goto LABEL_39;
    }
    sub_10009E5FC();
    sub_10005329C((unint64_t *)&qword_100BC35B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Location, (uint64_t)&protocol conformance descriptor for Location);
    sub_10009ED74(v35);
    sub_1001FB054();
    sub_1000BE8BC(v3);
    sub_1001FB1FC();
    if ((v32 & 1) == 0)
      goto LABEL_40;
  }
  sub_1001FB848();
  if (v26)
  {
    v21 = v25;
    goto LABEL_12;
  }
  sub_1001FB268();
  if (v20 == v19)
    goto LABEL_29;
  sub_1001FB938();
  if (v27)
  {
LABEL_16:
    v21 = v23;
LABEL_12:
    sub_1001FAFD8(v21);
    goto LABEL_7;
  }
  while (!__OFADD__(v23, 1))
  {
    sub_1001FB224();
    if (v20 == v19)
    {
      sub_1001FBBF0();
      goto LABEL_29;
    }
    sub_1000DE250();
    if (v28)
      goto LABEL_12;
  }
LABEL_42:
  __break(1u);
}

void sub_10009C79C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(v3, a2, a3);
}

uint64_t sub_10009C7A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1096))();
}

uint64_t sub_10009C7AC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 8));
}

uint64_t sub_10009C7B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009C7C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009C7E0@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_10009C7E8()
{
  return Date.write(to:)();
}

uint64_t sub_10009C7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_10009C7FC()
{
  return sub_100155868();
}

uint64_t sub_10009C808()
{
  return swift_willThrow();
}

double sub_10009C824()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184)).n128_u64[0];
  return result;
}

uint64_t sub_10009C82C()
{
  return 0;
}

uint64_t sub_10009C848()
{
  double v0;
  double v1;

  return DetailChartGradientModel.init(gradient:startValue:endValue:)(v0, v1);
}

double sub_10009C854()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152)).n128_u64[0];
  return result;
}

uint64_t sub_10009C85C()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(*(_QWORD *)(v0 - 72));
}

uint64_t sub_10009C870()
{
  return type metadata accessor for PressureComponentPreprocessedDataModel(0);
}

void sub_10009C878(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10000AB54(a1, *(_QWORD *)(v3 + 1032), a3);
}

double sub_10009C890()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48)).n128_u64[0];
  return result;
}

uint64_t sub_10009C898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

void sub_10009C8A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t);

  sub_10005329C(a1, 255, v4, a4);
}

uint64_t sub_10009C8E0(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_10009C904()
{
  return type metadata accessor for UUID(0);
}

void sub_10009C914(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

void sub_10009C924(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(v3, a2, a3);
}

uint64_t sub_10009C92C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10009C934(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = result;
  return result;
}

uint64_t sub_10009C940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_10009C94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10009C954()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_10009C968(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000979AC(v2, a2);
}

double sub_10009C970()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 20)), *(_BYTE *)(v1 + *(int *)(v0 + 20) + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 24) + 24)).n128_u64[0];
  return result;
}

uint64_t sub_10009C9A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

id sub_10009C9AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2);
}

char *sub_10009C9B4(char *a1, int64_t a2)
{
  return sub_10060628C(a1, a2, 0);
}

uint64_t sub_10009C9BC@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(_QWORD *)(a1 - 256));
}

unint64_t sub_10009C9C8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_100670B88();
}

void sub_10009C9E0(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  sub_100077A84(v1);
}

uint64_t sub_10009C9EC(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

__n128 sub_10009C9F8(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[24];
  a1[1] = result;
  return result;
}

void sub_10009CA08()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36[10];
  uint64_t v37;

  sub_1000986AC();
  v4 = sub_10011DE64();
  type metadata accessor for WeatherCondition(v4);
  sub_1001FB210();
  __chkstk_darwin(v5);
  v36[7] = (uint64_t)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v7);
  sub_1000B2FD8();
  sub_1000BA294(&qword_100BC9EB8);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100089068();
  v10 = __chkstk_darwin(v9);
  sub_10009E930(v10, v11, v12, v13, v14, v15, v16, v17, v36[0]);
  if (v33)
  {
    sub_1001FBAE4();
LABEL_40:
    sub_1001FBAA4();
    sub_100098640();
    return;
  }
  sub_1001FB3F8();
  if (!v33)
  {
LABEL_39:
    HIDWORD(v37) = 0;
    goto LABEL_40;
  }
  sub_10009D9E4();
  sub_1001FBACC();
  while (1)
  {
    if (v2)
    {
      sub_1001FAFBC();
LABEL_7:
      v18 = sub_1000B2EB8();
      sub_1001FAF88(v18);
      sub_10011E4F4();
      goto LABEL_30;
    }
    sub_1001FB854();
    if (v19)
    {
      __break(1u);
      goto LABEL_42;
    }
    sub_1001FB224();
    if (v20 != v19)
    {
      sub_1001FB83C();
      if (v22)
        goto LABEL_12;
      sub_1001FB290(v21);
      if (v20 != v19)
      {
        sub_1001FB830();
        if (v24)
          goto LABEL_16;
        sub_1001FB27C();
        if (v20 != v19)
          break;
      }
    }
LABEL_29:
    v29 = sub_100099328();
    sub_1001FB024(v29);
LABEL_30:
    v30 = sub_1001FB5E4();
    sub_1000787D4(v30, v31, &qword_100BC9EB8);
    v32 = sub_100099328();
    sub_100088FC8(v0, 1, v32);
    if (v33)
      v34 = 1;
    else
      v34 = 0;
    HIDWORD(v37) = v34;
    if (v33)
      goto LABEL_40;
    sub_10009BC2C();
    sub_1001FB1B4();
    sub_10011DEAC();
    if ((v1 & 1) == 0)
    {
      sub_1000CC8B8();
      goto LABEL_39;
    }
    sub_10009E5FC();
    sub_10005329C((unint64_t *)&qword_100BC9EC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for WeatherCondition, (uint64_t)&protocol conformance descriptor for WeatherCondition);
    sub_10009ED74(v35);
    sub_1001FB054();
    sub_1000BE8BC(v3);
    sub_1001FB1FC();
    if ((v32 & 1) == 0)
      goto LABEL_40;
  }
  sub_1001FB848();
  if (v26)
  {
    v21 = v25;
    goto LABEL_12;
  }
  sub_1001FB268();
  if (v20 == v19)
    goto LABEL_29;
  sub_1001FB938();
  if (v27)
  {
LABEL_16:
    v21 = v23;
LABEL_12:
    sub_1001FAFD8(v21);
    goto LABEL_7;
  }
  while (!__OFADD__(v23, 1))
  {
    sub_1001FB224();
    if (v20 == v19)
    {
      sub_1001FBBF0();
      goto LABEL_29;
    }
    sub_1000DE250();
    if (v28)
      goto LABEL_12;
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_10009CBFC()
{
  return type metadata accessor for ConditionDetailPlatterViewModel(0);
}

uint64_t sub_10009CC04@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for MoonDetailViewState(0);
}

uint64_t sub_10009CC24@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for AveragesDetailViewState(0);
}

uint64_t sub_10009CC44@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

double sub_10009CC50()
{
  return 0.0;
}

uint64_t sub_10009CC5C()
{
  return type metadata accessor for LocationComponentHeaderMetrics(0);
}

void sub_10009CC64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, *(_QWORD *)(v3 - 240), a3);
}

void sub_10009CC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  sub_1000986AC();
  v3 = v2;
  v5 = v4;
  type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000986FC();
  v94 = v7;
  sub_10009D2A4();
  __chkstk_darwin(v8);
  sub_100079F7C();
  v93 = v9;
  v10 = sub_10009876C();
  type metadata accessor for ViewState(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v96 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v13);
  sub_100079F7C();
  v95 = v14;
  v15 = sub_10009876C();
  type metadata accessor for TimeState(v15);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_1000986FC();
  v98 = v17;
  sub_10009D2A4();
  __chkstk_darwin(v18);
  sub_100079F7C();
  v97 = v19;
  v20 = sub_10009876C();
  type metadata accessor for NotificationsOptInState(v20);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  v100 = (uint64_t)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_100079F7C();
  v99 = v24;
  v25 = sub_10009876C();
  type metadata accessor for LocationsState(v25);
  sub_1000B42B0();
  __chkstk_darwin(v26);
  sub_1000DA474(v27, v92);
  __chkstk_darwin(v28);
  v30 = (char *)&v92 - v29;
  type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_10003BC68();
  __chkstk_darwin(v32);
  v34 = (char *)&v92 - v33;
  type metadata accessor for AppConfigurationState(0);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_1000C0CD0();
  __chkstk_darwin(v36);
  v38 = (char *)&v92 - v37;
  sub_10003BCC8();
  sub_100095508();
  v39 = sub_1000878D0();
  sub_10009E004(v39, v40);
  v42 = v41;
  sub_10009D2E0();
  sub_1000CC8C8();
  if ((v42 & 1) == 0)
    goto LABEL_23;
  if (*(unsigned __int8 *)(v5 + 24) != *(unsigned __int8 *)(v3 + 24))
    goto LABEL_23;
  v43 = v5;
  sub_1000DC370(v5 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_appConfiguration, (uint64_t)v38);
  sub_1000DC370(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_appConfiguration, v1);
  v44 = static AppConfiguration.== infix(_:_:)(v38, v1);
  sub_10009DA28(v1);
  sub_10009DA28((uint64_t)v38);
  if ((v44 & 1) == 0)
    goto LABEL_23;
  sub_1000992EC(v5 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, (uint64_t)&v103);
  v45 = sub_1000C1A00();
  sub_1000D1C6C(v45, v46);
  sub_1000992EC(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, (uint64_t)&v102);
  v47 = sub_1001FB898();
  sub_1000D1C6C(v47, v48);
  v49 = (unsigned __int8 *)sub_1001FB7E8();
  v51 = sub_10009ADC0(v49, v50);
  sub_100079FB4(v0);
  sub_100079FB4((uint64_t)v34);
  if ((v51 & 1) == 0)
    goto LABEL_23;
  sub_1000BCF30(v5 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)v30);
  v52 = v101;
  sub_1000BCF30(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v101);
  v53 = sub_1000987A8();
  v54 = sub_10009C240(v53);
  sub_100079F9C(v52);
  sub_100079F9C((uint64_t)v30);
  if ((v54 & 1) == 0)
    goto LABEL_23;
  v55 = *(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 8);
  v56 = *(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 16);
  v57 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
  v58 = *(unsigned __int8 *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
  sub_10009EF94();
  swift_bridgeObjectRetain(v56);
  sub_100094EDC();
  sub_10003BCC8();
  if ((sub_10009B650(v58, v57) & 1) == 0 || (sub_1001FB7F4(), sub_10094A268(), (v59 & 1) == 0))
  {
    sub_1000986C4();
    v91 = v55;
LABEL_25:
    swift_bridgeObjectRelease(v91);
    goto LABEL_26;
  }
  sub_10009C7C4();
  sub_10094A268();
  v61 = v60;
  sub_1000986C4();
  sub_1000986E8();
  sub_10009D2E0();
  sub_10009934C();
  if ((v61 & 1) == 0)
    goto LABEL_23;
  v62 = v99;
  sub_1000BCF30(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn, v99);
  v63 = v100;
  sub_1000BCF30(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn, v100);
  v64 = (unsigned __int8 *)sub_1000987A8();
  sub_10009F0C0(v64, v65);
  v67 = v66;
  sub_100079F9C(v63);
  sub_100079F9C(v62);
  if ((v67 & 1) == 0)
    goto LABEL_23;
  v68 = v97;
  sub_1000BCF30(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v97);
  v69 = v98;
  sub_1000BCF30(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v98);
  v70 = sub_1000987A8();
  v72 = static Date.== infix(_:_:)(v70, v71);
  sub_100079F9C(v69);
  sub_100079F9C(v68);
  if ((v72 & 1) == 0)
    goto LABEL_23;
  v73 = v95;
  sub_1000BCF30(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v95);
  v74 = v96;
  sub_1000BCF30(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v96);
  v75 = sub_1000987A8();
  v76 = sub_1000FEE8C(v75);
  sub_100079F9C(v74);
  sub_100079F9C(v73);
  if ((v76 & 1) == 0)
    goto LABEL_23;
  v77 = v93;
  sub_1000BCF30(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v93);
  v78 = v94;
  sub_1000BCF30(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v94);
  sub_1000987A8();
  sub_1000EF360();
  v80 = v79;
  sub_100079F9C(v78);
  sub_100079F9C(v77);
  if ((v80 & 1) == 0)
    goto LABEL_23;
  v81 = *(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
  v82 = *(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 24);
  v83 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
  v84 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 24);
  v85 = v81 == v83
     && *(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8) == *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8);
  if (!v85
    && (sub_100099264(v81, *(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8), v83, *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8)) & 1) == 0)
  {
    goto LABEL_23;
  }
  sub_10009EF94();
  sub_1000878DC();
  swift_bridgeObjectRetain(v82);
  sub_100094EDC();
  sub_10003BCC8();
  swift_bridgeObjectRetain(v84);
  sub_10009E970();
  if ((v86 & 1) == 0)
  {
    swift_bridgeObjectRelease(v82);
    sub_10009895C();
    sub_1000986E8();
    v91 = v84;
    goto LABEL_25;
  }
  sub_1000F41F0();
  sub_10009B6B0();
  v88 = v87;
  swift_bridgeObjectRelease(v82);
  sub_10009895C();
  sub_1000986E8();
  sub_10003BC58();
  sub_10009D2E0();
  sub_10009934C();
  if ((v88 & 1) != 0
    && *(unsigned __int8 *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState) == *(unsigned __int8 *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v43 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState + 8));
    sub_10009EF94();
    sub_1000C1A00();
    sub_10009CA08();
    v90 = v89;
    sub_1000986C4();
    sub_1000986E8();
    if ((v90 & 1) != 0)
    {
      sub_10003BCC8();
      sub_100094EDC();
      sub_10009F248();
LABEL_26:
      sub_10009D2E0();
      sub_10009934C();
    }
  }
LABEL_23:
  sub_100098640();
}

uint64_t _s7Weather31SessionEventsAndDataCoordinatorC25lastPushedTemperatureUnit33_8ECD549B82C3B8992579EA0CB842041CLLSo06NSUnitI0CSgvpfi_0()
{
  return 0;
}

void sub_10009D290(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_10009D2B0()
{
  sub_10011ED70();
}

uint64_t sub_10009D2C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

double sub_10009D2E0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void sub_10009D2F8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

BOOL sub_10009D314(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10009D328(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10009D330()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10009D338()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10009D340()
{
  return swift_slowAlloc(2, -1);
}

uint64_t sub_10009D34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
}

uint64_t sub_10009D358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return sub_1000DEBAC(a1, a2, a3, a4, a5, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_10009D368()
{
  return static LocationSearchEntityFromStringResolver.__derived_struct_equals(_:_:)();
}

uint64_t static LocationSearchEntityFromStringResolver.__derived_struct_equals(_:_:)()
{
  return 1;
}

void sub_10009D37C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

void sub_10009D384(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10009D3A0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[165] + 16))(v0[119], v0[177], v0[167]);
}

void sub_10009D3BC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

uint64_t sub_10009D3C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return v2 + *(int *)(v1 + 20) + a1;
}

uint64_t sub_10009D3D4()
{
  return type metadata accessor for PrecipitationAveragesDetailInput(0);
}

uint64_t sub_10009D3DC(uint64_t a1)
{
  uint64_t v1;

  return sub_100102BB4(a1, v1);
}

uint64_t sub_10009D3E4()
{
  uint64_t v0;

  sub_1000DB418((_QWORD *)(v0 - 120), *(_QWORD *)(v0 - 96));
  return 0;
}

uint64_t sub_10009D408()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

uint64_t sub_10009D410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return swift_getEnumCaseMultiPayload(v0 + v2, v1);
}

double sub_10009D420@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1)).n128_u64[0];
  return result;
}

uint64_t sub_10009D428(_QWORD *a1, uint64_t (*a2)(void))
{
  sub_1000DB418(a1, a1[3]);
  return a2();
}

uint64_t sub_10009D44C(uint64_t a1)
{
  uint64_t v1;

  return Forecast.subscript.getter(a1, v1);
}

__n128 sub_10009D458(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_10009D46C(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_10009D478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

_QWORD *sub_10009D48C()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1000DB418(v1, v0);
}

void sub_10009D4A8()
{
  void *v0;

}

uint64_t sub_10009D4B8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, a1);
}

double sub_10009D4E0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_10009D4E8(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_10009D4F0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

void sub_10009D4FC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100084050(a1, *(_QWORD *)(v2 - 184), v1);
}

uint64_t sub_10009D50C()
{
  return type metadata accessor for ScenePhase(0);
}

uint64_t sub_10009D514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, a2, a3, v3);
}

uint64_t sub_10009D51C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_10009D530()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_10009D53C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_10009D548()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_10009D558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10009D568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return static Tips.OptionsBuilder.buildPartialBlock<A>(first:)(v2, v1, a1);
}

uint64_t sub_10009D580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10009D590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 136))(a1, a2, v2);
}

uint64_t sub_10009D59C()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_10009D5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v2;
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v3;
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 48) = v4;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10009D5E4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10009D5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return Section<>.init(header:content:)(v6 - 120, a2, v6 - 144, a4, v4, v5);
}

_QWORD *sub_10009D608(_QWORD *a1)
{
  return sub_100045F7C(a1);
}

uint64_t sub_10009D610(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 264))(a1, *(_QWORD *)(v1 - 272));
}

_QWORD *sub_10009D624()
{
  uint64_t v0;

  return sub_1000DB418((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10009D634()
{
  return static Locale.current.getter();
}

uint64_t sub_10009D644(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t sub_10009D64C()
{
  double v0;

  return sub_1004DB80C(v0);
}

uint64_t sub_10009D664()
{
  return 0x617361656C706E75;
}

void sub_10009D680(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10009D6A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_10009D6B0()
{
  uint64_t *v0;

  return sub_1004EF7F4(v0);
}

uint64_t sub_10009D6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10009D6C4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

uint64_t sub_10009D6D0()
{
  return type metadata accessor for ChartProxy(0);
}

uint64_t sub_10009D6D8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

uint64_t sub_10009D6E8()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, *(_QWORD *)(v1 - 128));
}

void sub_10009D6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  static Measurement<>.read(from:)(v2, v0, v1);
}

uint64_t sub_10009D710(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10009D718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 72) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_10009D730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_10009D73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 328))(v0, v2, v1);
}

void sub_10009D754(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10009D75C()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_10009D768(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 1);
}

void sub_10009D774(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_10009D77C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009D78C()
{
  return 0x6E6F697461636F6CLL;
}

void sub_10009D7A0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

void sub_10009D7B4()
{
  void *v0;

}

double sub_10009D7BC@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  return result;
}

void sub_10009D7D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, *(_QWORD *)(v2 - 296), v1);
}

uint64_t sub_10009D7EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_10009D7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_10009D808()
{
  _QWORD *v0;

  sub_100077A84(v0);
}

uint64_t sub_10009D810()
{
  return type metadata accessor for LocationViewGeometry(0);
}

void sub_10009D818()
{
  sub_1007A6490();
}

void sub_10009D834(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  sub_100037794(v3, a2, v2);
}

uint64_t sub_10009D840(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

void sub_10009D84C(uint64_t a1)
{
  uint64_t *v1;

  sub_100021A14(a1, v1);
}

uint64_t sub_10009D854()
{
  return type metadata accessor for NewsDataModel(0);
}

double sub_10009D874()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 36)));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 40) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10009D898()
{
  return type metadata accessor for MainViewSheetViewModifier(0);
}

double sub_10009D8A0()
{
  return 0.0;
}

void sub_10009D8C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000A15B4(v3, a2, a3);
}

uint64_t sub_10009D8C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 - 768))(*(_QWORD *)(v0 - 272), *(unsigned int *)(v0 - 772), *(_QWORD *)(v0 - 600));
}

void sub_10009D8F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100095B78(a1, v3, a3);
}

uint64_t sub_10009D900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000B1100(a1, a2, a3);
}

uint64_t sub_10009D908()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 72)));
}

uint64_t sub_10009D918(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7469706963657270, 0xED00006E6F697461);
}

uint64_t sub_10009D954()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_10009D968@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10009D998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

double sub_10009D9A8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 - 256)).n128_u64[0];
  return result;
}

void sub_10009D9D0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;
  NSObject *v6;

  _os_log_impl(a1, v6, v5, a4, v4, 2u);
}

void sub_10009D9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)(v2 - 104) = 0;
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = v0;
  v3 = v1 + 64;
  v4 = (unint64_t)((1 << *(_BYTE *)(v3 - 32)) + 63) >> 6;
  *(_QWORD *)(v2 - 160) = v3;
  *(_QWORD *)(v2 - 152) = v4;
  *(_QWORD *)(v2 - 168) = v4 - 1;
}

void sub_10009DA28(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

uint64_t sub_10009DA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Swift::String v8;

  v8._countAndFlagsBits = 0x74617265706D6554;
  v8._object = (void *)0xEB00000000657275;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v8, *(Swift::String *)&a8)._countAndFlagsBits;
}

void sub_10009DA50(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DA4(v3, a2, a3);
}

uint64_t sub_10009DA58(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_10009DA64()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10009DA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

void sub_10009DA80(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_10009DA9C(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100037768(*(_QWORD *)(a2 - 256), v2, a1);
}

uint64_t sub_10009DAA8@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10009DAB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _ConditionalContent<>.init(storage:)(v2, *(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 192), v1, a1);
}

uint64_t sub_10009DACC()
{
  uint64_t v0;

  return v0;
}

char *sub_10009DAE8(char *a1, int64_t a2)
{
  char *v2;

  return sub_10021A398(a1, a2, 1, v2);
}

uint64_t sub_10009DAF4(uint64_t a1)
{
  return swift_allocObject(a1, 112, 7);
}

uint64_t sub_10009DB00(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_10009DB10()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009DB1C()
{
  return type metadata accessor for ModalViewAction(0);
}

uint64_t sub_10009DB24@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, *(_QWORD *)(v3 - 440));
}

uint64_t sub_10009DB34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1004D3A8C(v2, a2);
}

uint64_t sub_10009DB3C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009DB4C(uint64_t result)
{
  *(_BYTE *)(result + 16) = 2;
  return result;
}

uint64_t sub_10009DB58()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009DB68()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009DB80()
{
  return NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter();
}

void sub_10009DB94(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000AB54(a1, a2, v2);
}

void sub_10009DBA0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C77C(v0, v2, v1);
}

uint64_t sub_10009DBB0()
{
  return type metadata accessor for ComparisonCapsuleViewModel.Row(0);
}

uint64_t sub_10009DBB8@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return v1 - 72;
}

void sub_10009DBC8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  LocationSearchEntity.init(id:name:placemark:isLocal:)(v1, v3, v4, v5, a1, 0, v2);
}

uint64_t sub_10009DBE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

__n128 sub_10009DBF0()
{
  uint64_t v0;
  char v1;
  __n128 result;
  __int128 v3;

  v1 = *(_BYTE *)(v0 - 224);
  result = *(__n128 *)(v0 - 256);
  v3 = *(_OWORD *)(v0 - 240);
  *(__n128 *)(v0 - 304) = result;
  *(_OWORD *)(v0 - 288) = v3;
  *(_BYTE *)(v0 - 272) = v1;
  return result;
}

uint64_t sub_10009DC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 96), a1);
}

uint64_t sub_10009DC30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  sub_1000DB418(v0, v2);
  return dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v2, v3);
}

uint64_t sub_10009DC74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Optional<A>.write(to:)(a1, v1, v2);
}

uint64_t sub_10009DCA0()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v0);
  return v1;
}

uint64_t sub_10009DCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

void sub_10009DCD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000787D4(v3, v4, a3);
}

uint64_t sub_10009DD08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 240))(a1, v1);
}

unint64_t sub_10009DD14()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1007EC15C();
}

uint64_t sub_10009DD20()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 208);
}

uint64_t sub_10009DD34(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

void sub_10009DD3C(uint64_t a1)
{
  sub_10006BDC8(a1);
}

void sub_10009DD64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_10009DD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

id sub_10009DD7C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_10009DD84()
{
  void *v0;

}

uint64_t sub_10009DD94()
{
  return type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
}

uint64_t sub_10009DD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10009DDA8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_10009DE08(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10009DE38()
{
  return type metadata accessor for WeatherServiceFetchOptions(0);
}

uint64_t sub_10009DE64()
{
  uint64_t v0;
  uint64_t v1;

  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 20)));
}

uint64_t sub_10009DE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.write(to:)(a1, a2, a3);
}

void sub_10009DE78()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10009DE84()
{
  return swift_task_alloc(64);
}

uint64_t sub_10009DE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_10009DEB8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 1304));
}

uint64_t sub_10009DECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

double sub_10009DED8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_10009DEE4()
{
  return type metadata accessor for DefaultMenuStyle(255);
}

void sub_10009DEF0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

double sub_10009DEFC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 68))).n128_u64[0];
  return result;
}

uint64_t sub_10009DF08()
{
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_10009DF2C()
{
  return AppDependency.wrappedValue.getter();
}

void sub_10009DF34(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_10009DF64()
{
  return 0x70616373646E616CLL;
}

void sub_10009DF78(char a1@<W0>, uint64_t a2@<X2>, void (*a3)(void)@<X8>)
{
  sub_100702D1C(a1, a3, a2);
}

unint64_t sub_10009DF84()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 6;
  return sub_100731CD8();
}

uint64_t sub_10009DF90()
{
  return type metadata accessor for WeatherEditorView(0);
}

uint64_t sub_10009DF98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009DFA4(uint64_t a1)
{
  return UVIndex.init(value:category:)(a1, 0);
}

uint64_t sub_10009DFAC(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_10009DFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Array<A>.read(from:)(v1, v2, v3, a1);
}

void sub_10009E004(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t j;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  if (a1 != a2)
  {
    sub_1001FB110();
    if (v30)
    {
      v37 = v3 + 56;
      v4 = 1 << *(_BYTE *)(v3 + 32);
      if (v4 < 64)
        v5 = ~(-1 << v4);
      else
        v5 = -1;
      v6 = v5 & *(_QWORD *)(v3 + 56);
      sub_1001FB2B8();
      v38 = v8;
      v9 = a2 + 56;
      if (!v6)
        goto LABEL_9;
LABEL_8:
      sub_1001FBC04();
      v39 = v11;
      for (i = v12 | (v11 << 6); ; i = v20 + (v19 << 6))
      {
        v21 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * i);
        v23 = *v21;
        v22 = v21[1];
        Hasher.init(_seed:)(v40);
        sub_1000878DC();
        String.hash(into:)(v40, v23, v22);
        v24 = Hasher._finalize()();
        v25 = -1 << *(_BYTE *)(a2 + 32);
        v26 = v24 & ~v25;
        if (((*(_QWORD *)(v9 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          goto LABEL_39;
        v27 = *(_QWORD *)(a2 + 48);
        v28 = (uint64_t *)(v27 + 16 * v26);
        v29 = v28[1];
        v30 = *v28 == v23 && v29 == v22;
        if (!v30 && (sub_100099264(*v28, v29, v23, v22) & 1) == 0)
        {
          v31 = ~v25;
          for (j = v26 + 1; ; j = v33 + 1)
          {
            v33 = j & v31;
            if (((*(_QWORD *)(v9 + (((j & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v31)) & 1) == 0)
              break;
            v34 = (uint64_t *)(v27 + 16 * v33);
            v35 = v34[1];
            v36 = *v34 == v23 && v35 == v22;
            if (v36 || (sub_100099264(*v34, v35, v23, v22) & 1) != 0)
              goto LABEL_28;
          }
LABEL_39:
          sub_10009895C();
          return;
        }
LABEL_28:
        sub_10009895C();
        v7 = v39;
        if (v6)
          goto LABEL_8;
LABEL_9:
        v14 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        if (v14 >= v38)
          return;
        if (!*(_QWORD *)(v37 + 8 * v14))
        {
          if (v7 + 2 >= v38)
            return;
          if (!*(_QWORD *)(v37 + 8 * (v7 + 2)))
          {
            if (v7 + 3 >= v38)
              return;
            if (!*(_QWORD *)(v37 + 8 * (v7 + 3)))
            {
              v15 = v7 + 4;
              if (v7 + 4 >= v38)
                return;
              if (!*(_QWORD *)(v37 + 8 * v15))
                break;
            }
          }
        }
LABEL_21:
        sub_1000DF470();
        v6 = v18 & v17;
        v39 = v19;
      }
      while (1)
      {
        v16 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v16 >= v38)
          return;
        ++v15;
        if (*(_QWORD *)(v37 + 8 * v16))
          goto LABEL_21;
      }
LABEL_41:
      __break(1u);
    }
  }
}

double sub_10009E258()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56)).n128_u64[0];
  return result;
}

uint64_t sub_10009E260()
{
  return type metadata accessor for PrecipitationAmountByType(0);
}

uint64_t sub_10009E288()
{
  uint64_t v0;

  return Array<A>.minSecondValue.getter(*(_QWORD *)(v0 + 1328));
}

uint64_t sub_10009E290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 256) + a1;
}

uint64_t sub_10009E2A4()
{
  return type metadata accessor for LocationComponentContainerView(0);
}

uint64_t sub_10009E2E8(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v1, v2);
}

_QWORD *sub_10009E32C(uint64_t a1)
{
  return sub_100214A3C(a1);
}

uint64_t sub_10009E334()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_10009E348()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000317B0(v1, v0);
}

uint64_t sub_10009E36C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10009E378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_10009E388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return WeatherMetadata.init(date:expirationDate:attribution:)(a1, a2, v2);
}

void sub_10009E3A4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

uint64_t sub_10009E3B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10009E3E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10009E3E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E3F0()
{
  return ConditionUnits.pressure.getter();
}

void sub_10009E3F8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = a1;
  *(_QWORD *)(v3 - 136) = a2;

}

uint64_t sub_10009E408@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_10009E428()
{
  return type metadata accessor for ContentStatusBannerPresentationMetrics(0);
}

_QWORD *sub_10009E434()
{
  uint64_t v0;

  return Hasher.init(_seed:)((_QWORD *)(v0 - 152));
}

uint64_t sub_10009E45C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for NextHourToken(0);
}

void sub_10009E47C(uint64_t a1)
{
  uint64_t *v1;

  sub_100021A14(a1, v1);
}

uint64_t sub_10009E484()
{
  uint64_t v0;

  return v0;
}

void sub_10009E498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005E5ABC(v2, a2);
}

double sub_10009E4AC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10009E4B4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_10009E518()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1144);
}

uint64_t sub_10009E558()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 272);
}

_QWORD *sub_10009E564(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

void sub_10009E56C(double a1)
{
  uint64_t v1;

  **(double **)(v1 + 1056) = a1;
}

uint64_t sub_10009E578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_10009E584()
{
  return type metadata accessor for WindComponentCompassViewModel(0);
}

uint64_t sub_10009E58C()
{
  return sub_100038DBC();
}

uint64_t sub_10009E598@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for UVIndex(0);
}

uint64_t sub_10009E5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10009E5B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

double sub_10009E5C4()
{
  uint64_t v0;

  return sub_1000FFCC8(v0);
}

uint64_t sub_10009E5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return a21;
}

uint64_t sub_10009E5E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_10009E5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 16))(*(_QWORD *)(v4 - 120), *(_QWORD *)(v1 + 56) + *(_QWORD *)(v0 + 72) * v3, v2);
}

uint64_t sub_10009E61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_10009E628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10009E638(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_10009E64C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_10009E654()
{
  return type metadata accessor for WeatherMapPresentationState(0);
}

uint64_t sub_10009E65C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10009E664(uint64_t result)
{
  *(_BYTE *)(result + 16) = 33;
  return result;
}

unint64_t sub_10009E670()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10054BB5C();
}

uint64_t sub_10009E67C(uint64_t a1)
{
  uint64_t v1;

  return static _SetStorage.resize(original:capacity:move:)(a1, v1, 1);
}

unint64_t sub_10009E68C()
{
  return sub_1006657A8();
}

unint64_t sub_10009E694()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_100670B4C();
}

uint64_t sub_10009E6AC()
{
  return Logger.logObject.getter();
}

uint64_t sub_10009E6B4()
{
  return sub_10015597C();
}

uint64_t sub_10009E6C0()
{
  return type metadata accessor for News(0);
}

__n128 sub_10009E6C8(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[34];
  a1[1] = result;
  return result;
}

void sub_10009E6D8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36[10];
  uint64_t v37;

  sub_1000986AC();
  v4 = sub_10011DE64();
  type metadata accessor for LocationModel(v4);
  sub_1001FB210();
  __chkstk_darwin(v5);
  v36[7] = (uint64_t)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v7);
  sub_1000B2FD8();
  sub_1000BA294(&qword_100BC9F28);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100089068();
  v10 = __chkstk_darwin(v9);
  sub_10009E930(v10, v11, v12, v13, v14, v15, v16, v17, v36[0]);
  if (v33)
  {
    sub_1001FBAE4();
LABEL_40:
    sub_1001FBAA4();
    sub_100098640();
    return;
  }
  sub_1001FB3F8();
  if (!v33)
  {
LABEL_39:
    HIDWORD(v37) = 0;
    goto LABEL_40;
  }
  sub_10009D9E4();
  sub_1001FBACC();
  while (1)
  {
    if (v2)
    {
      sub_1001FAFBC();
LABEL_7:
      v18 = sub_1000B2EB8();
      sub_1001FAF88(v18);
      sub_10011E4F4();
      goto LABEL_30;
    }
    sub_1001FB854();
    if (v19)
    {
      __break(1u);
      goto LABEL_42;
    }
    sub_1001FB224();
    if (v20 != v19)
    {
      sub_1001FB83C();
      if (v22)
        goto LABEL_12;
      sub_1001FB290(v21);
      if (v20 != v19)
      {
        sub_1001FB830();
        if (v24)
          goto LABEL_16;
        sub_1001FB27C();
        if (v20 != v19)
          break;
      }
    }
LABEL_29:
    v29 = sub_100099328();
    sub_1001FB024(v29);
LABEL_30:
    v30 = sub_1001FB5E4();
    sub_1000787D4(v30, v31, &qword_100BC9F28);
    v32 = sub_100099328();
    sub_100088FC8(v0, 1, v32);
    if (v33)
      v34 = 1;
    else
      v34 = 0;
    HIDWORD(v37) = v34;
    if (v33)
      goto LABEL_40;
    sub_10009BC2C();
    sub_1001FB1B4();
    sub_10011DEAC();
    if ((v1 & 1) == 0)
    {
      sub_1000CC8B8();
      goto LABEL_39;
    }
    sub_10009E5FC();
    sub_10005329C(&qword_100BC9F38, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocationModel, (uint64_t)&protocol conformance descriptor for LocationModel);
    sub_10009ED74(v35);
    sub_1001FB054();
    sub_1000BE8BC(v3);
    sub_1001FB1FC();
    if ((v32 & 1) == 0)
      goto LABEL_40;
  }
  sub_1001FB848();
  if (v26)
  {
    v21 = v25;
    goto LABEL_12;
  }
  sub_1001FB268();
  if (v20 == v19)
    goto LABEL_29;
  sub_1001FB938();
  if (v27)
  {
LABEL_16:
    v21 = v23;
LABEL_12:
    sub_1001FAFD8(v21);
    goto LABEL_7;
  }
  while (!__OFADD__(v23, 1))
  {
    sub_1001FB224();
    if (v20 == v19)
    {
      sub_1001FBBF0();
      goto LABEL_29;
    }
    sub_1000DE250();
    if (v28)
      goto LABEL_12;
  }
LABEL_42:
  __break(1u);
}

void sub_10009E8CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000BA294(a3);
  sub_1000B4328(v3);
  sub_10004A298();
}

uint64_t sub_10009E8F8()
{
  return type metadata accessor for LocationViewComponent(0);
}

uint64_t sub_10009E900()
{
  return type metadata accessor for LocationAvailableDataSetState(0);
}

uint64_t sub_10009E908()
{
  return type metadata accessor for DisplayMetrics(0);
}

void sub_10009E930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 112) = (char *)&a9 - v9;
}

uint64_t sub_10009E948(uint64_t a1)
{
  return static Calendar.current.getter(a1);
}

uint64_t sub_10009E954()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009E964()
{
  uint64_t v0;
  uint64_t v1;

  return static Optional<A>.read(from:)(v0, v1);
}

void sub_10009E970()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_1000986AC();
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for LocationWeatherDataState(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000986FC();
  v47 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  sub_1000998F4();
  sub_1000BA294(&qword_100BC9EF0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_1000C24A0();
  __chkstk_darwin(v12);
  sub_10009C838();
  if (v6 == v4 || *(_QWORD *)(v6 + 16) != *(_QWORD *)(v4 + 16))
  {
LABEL_31:
    sub_100098640();
    return;
  }
  v45 = v8;
  v46 = v4;
  v48 = 0;
  sub_1000951A8();
  v15 = v14 & v13;
  sub_1001FB2B8();
  v43 = v6 + 64;
  v44 = v16;
  v42 = v16 - 1;
  while (1)
  {
    if (v15)
    {
      sub_1001FBB38();
LABEL_6:
      sub_1001FBB18();
      v18 = *v17;
      v19 = v17[1];
      v22 = v21 + *(_QWORD *)(v8 + 72) * v20;
      v23 = sub_100079FD4();
      sub_100080C0C(v22, (uint64_t)v1 + *(int *)(v23 + 48), type metadata accessor for LocationWeatherDataState);
      *v1 = v18;
      v1[1] = v19;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v1, 0, 1, v23);
      sub_10009E3E0();
      goto LABEL_24;
    }
    v24 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v24 < v44)
    {
      if (*(_QWORD *)(v43 + 8 * v24))
        goto LABEL_10;
      v26 = v48 + 2;
      ++v48;
      if (v24 + 1 < v44)
      {
        if (*(_QWORD *)(v43 + 8 * v26))
          goto LABEL_10;
        v48 = v24 + 1;
        if (v24 + 2 < v44)
        {
          if (*(_QWORD *)(v43 + 8 * (v24 + 2)))
            goto LABEL_10;
          v27 = v24 + 3;
          v48 = v24 + 2;
          if (v24 + 3 < v44)
            break;
        }
      }
    }
LABEL_23:
    v29 = sub_100079FD4();
    sub_10009D34C((uint64_t)v1, v30, v31, v29);
    v15 = 0;
LABEL_24:
    sub_1000787D4((uint64_t)v1, (uint64_t)v2, &qword_100BC9EF0);
    v32 = sub_100079FD4();
    v33 = sub_1000BCF40();
    sub_100088FC8(v33, v34, v32);
    if (v35)
      goto LABEL_31;
    v36 = *v2;
    sub_1000B308C((uint64_t)v2 + *(int *)(v32 + 48), v0);
    v37 = sub_1000991C8(v36);
    LOBYTE(v36) = v38;
    sub_1000986E8();
    if ((v36 & 1) == 0)
    {
      sub_10003BCC0(v39, type metadata accessor for LocationWeatherDataState);
      goto LABEL_31;
    }
    v8 = v45;
    sub_1001FB17C(*(_QWORD *)(v46 + 56) + *(_QWORD *)(v45 + 72) * v37);
    sub_1001FB954();
    sub_1000F9F74();
    v41 = v40;
    sub_1000BD95C(v47);
    sub_1000BD95C(v0);
    if ((v41 & 1) == 0)
      goto LABEL_31;
  }
  if (*(_QWORD *)(v43 + 8 * v27))
  {
LABEL_10:
    sub_1001FB8F8();
    v48 = v25;
    goto LABEL_6;
  }
  while (!__OFADD__(v27, 1))
  {
    if (v27 + 1 >= v44)
    {
      v48 = v42;
      goto LABEL_23;
    }
    sub_1000DE250();
    if (v28)
      goto LABEL_10;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10009ECB4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for NewsArticle(0);
}

uint64_t sub_10009ECE0()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10009ECF4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100094184(v1, v0);
}

double sub_10009ED08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

uint64_t sub_10009ED1C()
{
  return Cache.init()();
}

uint64_t sub_10009ED24(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_10009ED30()
{
  return type metadata accessor for LocationComponentContainerContentView(0);
}

uint64_t sub_10009ED50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for Wind(0);
}

void sub_10009ED60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(v2, a2);
}

uint64_t sub_10009ED74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v3, v1, a1);
}

uint64_t sub_10009ED8C()
{
  return type metadata accessor for HourWeather(0);
}

uint64_t sub_10009ED94()
{
  return type metadata accessor for UVIndexComponentViewModel(0);
}

double sub_10009ED9C()
{
  return sub_100155CB0();
}

uint64_t sub_10009EDA8()
{
  return LocationEntity.name.getter();
}

uint64_t sub_10009EDC0()
{
  return static PrecipitationAmountByType.mock()();
}

uint64_t sub_10009EDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009EE2C()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 - 96));
}

uint64_t sub_10009EE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return swift_endAccess(va);
}

uint64_t sub_10009EE3C()
{
  uint64_t v0;

  return sub_1005D7ED8(v0);
}

void sub_10009EE48(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(a1, *(_QWORD *)(v2 - 992), v1);
}

uint64_t sub_10009EE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_deallocPartialClassInstance(v2, a2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

__n128 *sub_10009EE70(__n128 *result, __n128 a2, __n128 a3)
{
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t sub_10009EE7C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 416))();
}

uint64_t sub_10009EE88()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 104));
}

uint64_t sub_10009EE90(uint64_t (*a1)(_QWORD))
{
  return a1(0);
}

uint64_t sub_10009EE9C()
{
  return type metadata accessor for ContentSizeCategory(0);
}

void sub_10009EEA4(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_10007802C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_10009EEB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t sub_10009EED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v2);
}

unint64_t sub_10009EEE8()
{
  return 0xD000000000000010;
}

uint64_t sub_10009EEF4()
{
  uint64_t v0;

  return static FixedSizeTypeBinaryCodable.read(from:)(*(_QWORD *)(v0 - 192));
}

uint64_t sub_10009EF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003BD328(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_10009EF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = v0;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10009EF24()
{
  uint64_t v0;

  return v0;
}

void sub_10009EF34()
{
  sub_1005FF420();
}

double sub_10009EF40()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104)).n128_u64[0];
  return result;
}

void sub_10009EF48(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 112) = v1 + 1;
}

__n128 sub_10009EF60(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 160);
  a1[1] = result;
  return result;
}

uint64_t sub_10009EF94()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10009EF9C(uint64_t a1, uint64_t a2)
{
  sub_1001C43A0(a1, a2);
}

void sub_10009EFA8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

uint64_t sub_10009EFB0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1152) = result;
  return result;
}

uint64_t sub_10009EFBC()
{
  return type metadata accessor for SevereAlertComponentViewModel(0);
}

uint64_t sub_10009EFC4()
{
  return sub_1002A1E28();
}

uint64_t sub_10009F00C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 944));
}

_QWORD *sub_10009F030@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000DB418(v1, *(_QWORD *)(a1 + 80));
}

void sub_10009F04C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100078058(a1, v3, a3);
}

uint64_t sub_10009F054(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_release(v2);
}

void sub_10009F064(char *a1)
{
  sub_100155820(*a1);
}

uint64_t sub_10009F070()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10009F07C(char a1, char a2)
{
  if (a1 == 4)
    return a2 == 4;
  if (a2 == 4)
    return 0;
  return a1 == a2;
}

void sub_10009F0C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v4;
  uint64_t v5;
  char v6;

  if (*a1 == *a2)
  {
    sub_10009E004(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
    if ((v4 & 1) != 0 && a1[16] == a2[16] && a1[17] == a2[17] && a1[18] == a2[18] && a1[19] == a2[19])
    {
      v5 = sub_1000D18E8();
      if ((static Date.== infix(_:_:)(&a1[*(int *)(v5 + 40)], &a2[*(int *)(v5 + 40)]) & 1) != 0)
      {
        sub_1000BA538();
        if (v6)
        {
          sub_1000BA538();
          if (v6)
          {
            sub_1000BA538();
            if (v6)
            {
              sub_1000BA538();
              if (v6)
                sub_1000BA538();
            }
          }
        }
      }
    }
  }
  sub_100079F70();
}

uint64_t sub_10009F1C0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000B4628();
  if (v0 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000D9C04();
    if (!v4 && v3)
    {
      v3 = v2 >= v1;
      v4 = v2 == v1;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    if (v4 || !v3)
      return sub_1000C4630();
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
  return result;
}

void sub_10009F248()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  sub_1000986AC();
  v6 = sub_1000BD2A4();
  v85 = type metadata accessor for Date(v6);
  v75 = *(_QWORD *)(v85 - 8);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_10009D384(v8, v67);
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000BD964(v10, v68);
  v79 = sub_1000BA294(&qword_100BC4978);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_10004A2E8();
  v78 = type metadata accessor for ContentStatusBanner(0);
  v84 = *(_QWORD *)(v78 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_1000BBB38();
  __chkstk_darwin(v13);
  sub_1000BCEC0();
  sub_1000BA294(&qword_100BC3468);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_1000DB210();
  v16 = __chkstk_darwin(v15);
  sub_1001FBB60(v16, v17, v18, v19, v20, v21, v22, v23, v69);
  if (v1 == v0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(v0 + 16))
    goto LABEL_53;
  v77 = 0;
  sub_10009DFD4();
  v26 = v25 & v24;
  sub_1001FB2B8();
  v71 = v1 + 64;
  v72 = v27;
  v70 = v27 - 1;
  v76 = v0;
  v80 = v2;
  v81 = v3;
  v28 = v82;
  if (!v26)
    goto LABEL_6;
LABEL_4:
  sub_1001FBC04();
LABEL_5:
  sub_1001FBB18();
  v30 = *v29;
  v31 = v29[1];
  v34 = v33 + *(_QWORD *)(v84 + 72) * v32;
  v35 = sub_1001FB504();
  sub_1000D0564(v34, (uint64_t)v5 + *(int *)(v35 + 48));
  *v5 = v30;
  v5[1] = v31;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v35);
  sub_10013BB0C(v30, v31);
  while (1)
  {
    sub_1000787D4((uint64_t)v5, (uint64_t)v28, &qword_100BC3468);
    v42 = sub_1001FB504();
    sub_100088FC8((uint64_t)v28, 1, v42);
    if (v56)
      goto LABEL_53;
    v83 = v26;
    v43 = (uint64_t)v28 + *(int *)(v42 + 48);
    v44 = *v28;
    v45 = v28[1];
    v46 = (uint64_t)v81;
    sub_10007802C(v43, (uint64_t)v81, type metadata accessor for ContentStatusBanner);
    v47 = sub_1000F9020(v44, v45);
    v49 = v48;
    sub_1000F9174(v44, v45);
    if ((v49 & 1) == 0)
      goto LABEL_52;
    v51 = (uint64_t)v80;
    sub_1000D0564(*(_QWORD *)(v76 + 56) + *(_QWORD *)(v84 + 72) * v47, (uint64_t)v80);
    v28 = v82;
    if (*v80 != *v81)
      goto LABEL_51;
    v52 = *((_QWORD *)v80 + 2);
    v53 = *((_QWORD *)v81 + 2);
    if (v52)
    {
      if (v52 == 1)
      {
        if (v53 != 1)
          goto LABEL_51;
      }
      else
      {
        if (v53 < 2)
          goto LABEL_51;
        v54 = *((_QWORD *)v80 + 1);
        v55 = *((_QWORD *)v81 + 1);
        v56 = v54 == v55 && v52 == v53;
        if (!v56 && (sub_100099264(v54, v52, v55, v53) & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v53)
    {
      goto LABEL_51;
    }
    v57 = v4 + *(int *)(v79 + 48);
    sub_1001098C0((uint64_t)&v80[*(int *)(v78 + 24)], v4);
    v58 = sub_1000BCF4C();
    sub_1001098C0(v58, v59);
    sub_100088FC8(v4, 1, v85);
    if (v56)
    {
      v60 = sub_100088FC8(v57, 1, v85);
      if (!v56)
        goto LABEL_50;
      sub_1000987A0(v4);
      goto LABEL_46;
    }
    sub_1001098C0(v4, v74);
    sub_100088FC8(v57, 1, v85);
    if (v61)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v73, v57, v85);
    sub_10005329C((unint64_t *)&qword_100BC3590, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v62 = sub_1001FB7F4();
    v66 = sub_1000C6D70(v62, v63, v64, v65);
    v51 = (uint64_t)v80;
    sub_1000DD7B4(v74);
    v46 = (uint64_t)v81;
    sub_1000DD7B4(v73);
    sub_100021A14(v4, (uint64_t *)&unk_100BD35A0);
    if ((v66 & 1) == 0)
      goto LABEL_51;
LABEL_46:
    sub_10009DA28(v51);
    sub_10009DA28(v46);
    v26 = v83;
    if (v83)
      goto LABEL_4;
LABEL_6:
    v36 = v77 + 1;
    if (__OFADD__(v77, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v36 < v72)
    {
      v37 = *(_QWORD *)(v71 + 8 * v36);
      if (v37)
        goto LABEL_9;
      v38 = v77 + 2;
      ++v77;
      if (v36 + 1 < v72)
      {
        v37 = *(_QWORD *)(v71 + 8 * v38);
        if (v37)
          goto LABEL_12;
        v77 = v36 + 1;
        if (v36 + 2 < v72)
        {
          v37 = *(_QWORD *)(v71 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
            goto LABEL_9;
          }
          v38 = v36 + 3;
          v77 = v36 + 2;
          if (v36 + 3 < v72)
          {
            v37 = *(_QWORD *)(v71 + 8 * v38);
            if (!v37)
            {
              while (!__OFADD__(v38, 1))
              {
                if (v38 + 1 >= v72)
                {
                  v77 = v70;
                  goto LABEL_23;
                }
                sub_1000DE250();
                if (v37)
                  goto LABEL_9;
              }
LABEL_55:
              __break(1u);
              return;
            }
LABEL_12:
            v36 = v38;
LABEL_9:
            v26 = (v37 - 1) & v37;
            v77 = v36;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v39 = sub_1001FB504();
    sub_10009D34C((uint64_t)v5, v40, v41, v39);
    v26 = 0;
  }
  v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v74, v85);
LABEL_50:
  sub_100094EEC(v60, &qword_100BC4978);
LABEL_51:
  sub_1000215BC(v51, type metadata accessor for ContentStatusBanner);
LABEL_52:
  sub_1000998E4(v50, type metadata accessor for ContentStatusBanner);
LABEL_53:
  sub_100098640();
}

uint64_t sub_10009F7AC()
{
  uint64_t v0;

  return v0;
}

void sub_10009F7BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C75C(a1, v3, a3);
}

uint64_t sub_10009F7C4(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 4);
}

void sub_10009F7DC()
{
  void *v0;

}

uint64_t sub_10009F7EC(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

void sub_10009F7F4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

uint64_t sub_10009F7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static Namespace.ID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v2), v0);
}

uint64_t sub_10009F80C(uint64_t a1, uint64_t a2)
{
  return static Optional<A>.read(from:)(a1, a2);
}

uint64_t sub_10009F814()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_10009F81C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10009F82C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t sub_10009F84C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v2 = type metadata accessor for WeatherDataAction(0);
  __chkstk_darwin(v2);
  v26 = (uint64_t)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for MainAction(0);
  v4 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  v29 = _swiftEmptyArrayStorage;
  sub_10009AAB0();
  v24 = a1;
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v27 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain(a1);
    v25 = (unint64_t)"actions %{private}s";
    do
    {
      sub_1000A1570(v11, (uint64_t)v9);
      sub_1000A1570((uint64_t)v9, (uint64_t)v6);
      if (swift_getEnumCaseMultiPayload(v6) == 9)
      {
        v12 = v26;
        sub_1000A15B4((uint64_t)v6, v26, type metadata accessor for WeatherDataAction);
        sub_10009FB04();
        v14 = v13;
        v16 = v15;
        sub_1000215BC(v12, type metadata accessor for WeatherDataAction);
      }
      else
      {
        sub_1000215BC((uint64_t)v6, type metadata accessor for MainAction);
        v16 = v25 | 0x8000000000000000;
        v14 = 0xD000000000000016;
      }
      sub_1000215BC((uint64_t)v9, type metadata accessor for MainAction);
      v17 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      {
        sub_10009AAB0();
        v17 = v29;
      }
      v18 = v17[2];
      if (v18 >= v17[3] >> 1)
      {
        sub_10009AAB0();
        v17 = v29;
      }
      v17[2] = v18 + 1;
      v19 = &v17[2 * v18];
      v19[4] = v14;
      v19[5] = v16;
      v11 += v27;
      --v10;
    }
    while (v10);
  }
  else
  {
    v17 = v29;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  v29 = v17;
  v20 = sub_1000BA294(&qword_100BF1280);
  sub_10003D310((unint64_t *)&qword_100BD35B0, &qword_100BF1280, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v20, v21);
  swift_release(v17);
  return v22;
}

void sub_10009FB04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for WeatherDataAction(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009FECC(v0, (uint64_t)v3);
  v4 = (char *)sub_10009FB8C + 4 * byte_1009DC4D2[swift_getEnumCaseMultiPayload(v3)];
  __asm { BR              X10 }
}

uint64_t sub_10009FB8C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;

  v2 = *v0;
  v3 = (void *)v0[1];
  sub_1000BB9C4();
  _StringGuts.grow(_:)(19);
  sub_1000C3D80();
  sub_1000C50D4();
  *(_QWORD *)(v1 - 80) = v4 - 16;
  *(_QWORD *)(v1 - 72) = 0x8000000100A1B420;
  v5._countAndFlagsBits = v2;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return *(_QWORD *)(v1 - 80);
}

uint64_t sub_10009FECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeatherDataAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009FF10(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t result;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100098728();
  v8 = (_QWORD *)(v7 - v6);
  sub_10009FFE0();
  *v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
    return a2(a1);
  __break(1u);
  return result;
}

unint64_t sub_10009FFE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC29A0;
  if (!qword_100BC29A0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BC29A0);
  }
  return result;
}

void sub_1000A001C(uint64_t a1)
{
  sub_1000A003C(a1);
}

void sub_1000A003C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(_OWORD *__return_ptr, _OWORD *, __n128);
  __n128 v7;
  _OWORD v8[2];
  __int128 v9;
  char v10;
  _BYTE v11[24];
  _OWORD v12[3];
  char v13;

  sub_10003773C(a1, (uint64_t)v12, &qword_100BD3378);
  swift_beginAccess(v1 + 24, v11, 0, 0);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
    v4 = (uint64_t *)(v2 + 40);
    while (1)
    {
      v6 = (void (*)(_OWORD *__return_ptr, _OWORD *, __n128))*(v4 - 1);
      v5 = *v4;
      v7 = swift_retain();
      v6(v8, v12, v7);
      swift_release(v5);
      if (*((_QWORD *)&v9 + 1))
      {
        if (*((_QWORD *)&v9 + 1) == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        sub_100021A14((uint64_t)v12, &qword_100BD3378);
        v12[0] = v8[0];
        v12[1] = v8[1];
        v12[2] = v9;
        v13 = v10;
      }
      v4 += 2;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_1000A017C((uint64_t)v12);
LABEL_10:
  sub_100021A14((uint64_t)v12, &qword_100BD3378);
}

double sub_1000A014C(_QWORD *a1)
{
  double result;

  if (a1[3])
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[5]).n128_u64[0];
  return result;
}

void sub_1000A017C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_OWORD *__return_ptr, _OWORD *, char *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[3];
  char v56;
  _OWORD v57[3];
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = v1;
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v52 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainAction(0);
  v53 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = _dispatchPreconditionTest(_:)(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) != 0)
  {
    v48 = v5;
    v49 = v4;
    __chkstk_darwin(v16);
    *(&v46 - 4) = (uint64_t)&unk_100B61740;
    *(&v46 - 3) = v7;
    v17 = sub_1000A0758();
    *(&v46 - 2) = v17;
    KeyPath = swift_getKeyPath(&unk_1009B7AB8);
    __chkstk_darwin(KeyPath);
    *(&v46 - 4) = (uint64_t)&unk_100B61740;
    *(&v46 - 3) = v7;
    *(&v46 - 2) = v17;
    v19 = swift_getKeyPath(&unk_1009B7AF0);
    static Published.subscript.getter(&v62, v2, KeyPath, v19);
    swift_release(KeyPath);
    swift_release(v19);
    __chkstk_darwin(v20);
    *(&v46 - 4) = (uint64_t)&unk_100B61740;
    *(&v46 - 3) = v7;
    *(&v46 - 2) = v17;
    v21 = swift_getKeyPath(&unk_1009B7AB8);
    __chkstk_darwin(v21);
    *(&v46 - 4) = (uint64_t)&unk_100B61740;
    *(&v46 - 3) = v7;
    v22 = v17;
    v51 = v7;
    *(&v46 - 2) = v17;
    v23 = swift_getKeyPath(&unk_1009B7AF0);
    static Published.subscript.getter(&v61, v2, v21, v23);
    swift_release(v21);
    swift_release(v23);
    v50 = a1;
    v24 = *(_QWORD *)(a1 + 40);
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v26 = *(void (**)(_OWORD *__return_ptr, _OWORD *, char *))(v2 + 16);
      v47 = v2;
      v27 = v24 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      v28 = *(_QWORD *)(v53 + 72);
      swift_bridgeObjectRetain(v24);
      do
      {
        sub_1000DF3CC();
        *(_QWORD *)&v55[0] = v61;
        v26(v57, v55, v9);
        v29 = *(_QWORD *)&v57[0];
        sub_10006BCFC((uint64_t)v9, type metadata accessor for MainAction);
        swift_release(v61);
        v61 = v29;
        v27 += v28;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      v2 = v47;
    }
    v31 = v61;
    v30 = v62;
    if (v62 == v61)
    {
      swift_release_n(v62, 2);
    }
    else
    {
      type metadata accessor for MainState._Storage(0);
      sub_10009CC70();
      if ((v32 & 1) != 0)
      {
        swift_release(v30);
        v33 = v31;
      }
      else
      {
        __chkstk_darwin(v32);
        v34 = v51;
        *(&v46 - 4) = (uint64_t)&unk_100B61740;
        *(&v46 - 3) = v34;
        *(&v46 - 2) = v22;
        v35 = swift_getKeyPath(&unk_1009B7AB8);
        __chkstk_darwin(v35);
        *(&v46 - 4) = (uint64_t)&unk_100B61740;
        *(&v46 - 3) = v34;
        *(&v46 - 2) = v22;
        v36 = swift_getKeyPath(&unk_1009B7AF0);
        *(_QWORD *)&v57[0] = v31;
        swift_retain();
        swift_retain();
        v37 = static Published.subscript.setter(v57, v2, v35, v36);
        v38 = static os_signpost_type_t.event.getter(v37);
        v39 = *(_QWORD *)(v2 + 32);
        v40 = v52;
        static OSSignpostID.exclusive.getter();
        os_signpost(_:dso:log:name:signpostID:)(v38, &_mh_execute_header, v39, "Weather - Store updated", 23, 2, v40);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v40, v49);
        sub_10003773C(v50, (uint64_t)v55, &qword_100BD3378);
        v41 = v62;
        __chkstk_darwin(v42);
        *(&v46 - 4) = (uint64_t)&unk_100B61740;
        *(&v46 - 3) = v34;
        *(&v46 - 2) = v22;
        v43 = swift_getKeyPath(&unk_1009B7AB8);
        __chkstk_darwin(v43);
        *(&v46 - 4) = (uint64_t)&unk_100B61740;
        *(&v46 - 3) = v34;
        *(&v46 - 2) = v22;
        v44 = v2;
        v45 = swift_getKeyPath(&unk_1009B7AF0);
        swift_retain();
        static Published.subscript.getter(&v54, v44, v43, v45);
        swift_release(v43);
        swift_release(v45);
        v59 = v41;
        v60 = v54;
        v57[0] = v55[0];
        v57[1] = v55[1];
        v57[2] = v55[2];
        v58 = v56;
        sub_1000A1684((uint64_t)v57);
        sub_100021A14((uint64_t)v57, &qword_100BC43C0);
        swift_release(v61);
        v33 = v62;
      }
      swift_release(v33);
    }
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1000A0758()
{
  unint64_t result;

  result = qword_100BE1390;
  if (!qword_100BE1390)
  {
    result = swift_getWitnessTable(&unk_100982414, &unk_100B61740);
    atomic_store(result, (unint64_t *)&qword_100BE1390);
  }
  return result;
}

uint64_t sub_1000A0794(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000A07CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1000A07D4(a1, a2, (uint64_t *)(v3 + 16), a3);
}

uint64_t sub_1000A07D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = sub_1000A0800(*a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t sub_1000A0800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t *, uint64_t, __n128);
  __n128 v10;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain_n(a3, 2);
    swift_retain(v3);
    v7 = (uint64_t *)(a3 + 40);
    do
    {
      v9 = (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, __n128))*(v7 - 1);
      v8 = *v7;
      v12 = v3;
      v10 = swift_retain(v8);
      v9(&v13, &v12, a2, v10);
      swift_release(v3);
      swift_release(v8);
      v3 = v13;
      v7 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  else
  {
    swift_retain(a1);
  }
  return v3;
}

void sub_1000A08C0(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_1000A08E4(a1, a2, a3);
}

void sub_1000A08E4(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  sub_1000A0910(*a1, a2);
  *a3 = v4;
}

void sub_1000A0910(uint64_t a1, uint64_t a2)
{
  sub_1000E3484(a1, a2);
}

void sub_1000A0930(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000DD16C(a1);
  *v1 = sub_1000A0950(v2, v3);
  sub_10004A298();
}

double sub_1000A0954@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A116C(a1, a2);
}

double sub_1000A0974@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0954(a1, a2);
}

double sub_1000A097C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A099C(a1, a2);
}

double sub_1000A099C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
    do
    {
      sub_1000A1570(v10, (uint64_t)v7);
      if (swift_getEnumCaseMultiPayload(v7))
      {
        sub_1000A0AA4((uint64_t)v7);
      }
      else if (*v7 == 2)
      {
        sub_10083D6E8();
      }
      v10 += v11;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(a2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_1000A0AA4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MainAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1000A0AE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A097C(a1, a2);
}

void sub_1000A0AE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000A0B08(a1, a2);
}

void sub_1000A0B08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  _BYTE *v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[12];
  int v59;
  _BYTE *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;

  sub_1000BA294(qword_100BD7150);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = &v58[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000BA294(&qword_100BD7148);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v63 = v8;
  sub_1000BA294(&qword_100BD7140);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v64 = v10;
  sub_1000BA294(&qword_100BD7138);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v67 = v12;
  sub_1000BA294(&qword_100BD7130);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v69 = v14;
  v75 = type metadata accessor for ConfiguredUnitsAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  v73 = &v58[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v72 = &v58[-v18];
  v19 = type metadata accessor for MainAction(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = &v58[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for EnvironmentAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  v25 = &v58[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v28 = &v58[-v27];
  v29 = *(_QWORD *)(a1 + 40);
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
LABEL_28:
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return;
  }
  v60 = v6;
  v66 = a2;
  v31 = v29 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v70 = enum case for ConfiguredUnit.distance(_:);
  v68 = enum case for ConfiguredUnit.precipitation(_:);
  v61 = enum case for ConfiguredUnit.temperature(_:);
  v62 = enum case for ConfiguredUnit.pressure(_:);
  v59 = enum case for ConfiguredUnit.windSpeed(_:);
  v32 = *(_QWORD *)(v20 + 72);
  v65 = v29;
  swift_bridgeObjectRetain(v29);
  v33 = type metadata accessor for MainAction;
  v35 = v72;
  v34 = (uint64_t)v73;
  v71 = v19;
  v74 = v25;
  while (1)
  {
    sub_100078058(v31, (uint64_t)v22, type metadata accessor for MainAction);
    if (swift_getEnumCaseMultiPayload(v22) == 2)
      break;
    v39 = (uint64_t)v22;
LABEL_10:
    v40 = v33;
LABEL_11:
    sub_1000215BC(v39, v40);
LABEL_17:
    v31 += v32;
    --v30;
    v33 = type metadata accessor for MainAction;
    if (!v30)
    {
      swift_bridgeObjectRelease();
      a2 = v66;
      goto LABEL_28;
    }
  }
  v33 = type metadata accessor for EnvironmentAction;
  sub_10007C75C((uint64_t)v22, (uint64_t)v28, type metadata accessor for EnvironmentAction);
  sub_100078058((uint64_t)v28, (uint64_t)v25, type metadata accessor for EnvironmentAction);
  if (swift_getEnumCaseMultiPayload(v25) != 10)
  {
    sub_1000C5A1C();
    v39 = (uint64_t)v25;
    goto LABEL_10;
  }
  sub_10007C75C((uint64_t)v25, (uint64_t)v35, type metadata accessor for ConfiguredUnitsAction);
  sub_100078058((uint64_t)v35, v34, type metadata accessor for ConfiguredUnitsAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000215BC((uint64_t)v35, type metadata accessor for ConfiguredUnitsAction);
      sub_1000C5A1C();
      v37 = v34;
      v38 = type metadata accessor for ConfiguredUnitsAction;
    }
    else
    {
      sub_1000BCF94();
      v46 = sub_1000B314C();
      UnitManager.resetPreferredUnits()();
      v47 = v46;
      v34 = (uint64_t)v73;
      swift_release(v47);
      sub_1000215BC((uint64_t)v35, type metadata accessor for ConfiguredUnitsAction);
      v37 = (uint64_t)v28;
      v38 = type metadata accessor for EnvironmentAction;
    }
    sub_1000215BC(v37, v38);
    goto LABEL_16;
  }
  v41 = v34;
  v34 = type metadata accessor for ConfiguredUnit(0);
  v42 = *(_QWORD *)(v34 - 8);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 88))(v41, v34);
  if (v43 == v70)
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 96))(v41, v34);
    v44 = v69;
    sub_10009E8CC(v41, v69, &qword_100BD7130);
    sub_1000BCF94();
    sub_1000B314C();
    v45 = sub_1000DBFAC();
    UnitManager.setPreferredDistanceUnit(_:)(v45);
    swift_release(v34);
    sub_100021A14(v44, &qword_100BD7130);
    v35 = v72;
    sub_1000215BC((uint64_t)v72, type metadata accessor for ConfiguredUnitsAction);
    sub_1000215BC((uint64_t)v28, type metadata accessor for EnvironmentAction);
    v34 = v41;
LABEL_16:
    v25 = v74;
    goto LABEL_17;
  }
  v25 = v74;
  if (v43 == v68)
  {
    sub_1000BB910();
    v48 = v67;
    sub_10009E8CC((uint64_t)v35, v67, &qword_100BD7138);
    sub_1000BCF94();
    sub_1000B314C();
    v49 = sub_1000DBFAC();
    UnitManager.setPreferredPrecipitationUnit(_:)(v49);
    sub_1000C42EC();
    sub_100021A14(v48, &qword_100BD7138);
    v35 = v72;
    sub_1000215BC((uint64_t)v72, type metadata accessor for ConfiguredUnitsAction);
    sub_1000215BC((uint64_t)v28, type metadata accessor for EnvironmentAction);
    goto LABEL_17;
  }
  if (v43 == v62)
  {
    sub_1000BB910();
    v50 = v64;
    sub_10009E8CC((uint64_t)v35, v64, &qword_100BD7140);
    sub_1000BCF94();
    sub_1000B314C();
    v51 = sub_1000DBFAC();
    UnitManager.setPreferredPressureUnit(_:)(v51);
    sub_1000C42EC();
    v52 = v50;
    v53 = &qword_100BD7140;
LABEL_27:
    sub_100021A14(v52, v53);
    v35 = v72;
    sub_1000215BC((uint64_t)v72, type metadata accessor for ConfiguredUnitsAction);
    v39 = (uint64_t)v28;
    v40 = type metadata accessor for EnvironmentAction;
    goto LABEL_11;
  }
  if (v43 == v61)
  {
    sub_1000BB910();
    v54 = v63;
    sub_10009E8CC((uint64_t)v35, v63, &qword_100BD7148);
    sub_1000BCF94();
    sub_1000B314C();
    v55 = sub_1000DBFAC();
    UnitManager.setPreferredTemperatureUnit(_:)(v55);
    sub_1000C42EC();
    v52 = v54;
    v53 = &qword_100BD7148;
    goto LABEL_27;
  }
  if (v43 == v59)
  {
    sub_1000BB910();
    v56 = (uint64_t)v60;
    sub_10009E8CC((uint64_t)v35, (uint64_t)v60, qword_100BD7150);
    sub_1000BCF94();
    sub_1000B314C();
    v57 = sub_1000DBFAC();
    UnitManager.setPreferredWindSpeedUnit(_:)(v57);
    sub_1000C42EC();
    v52 = v56;
    v53 = qword_100BD7150;
    goto LABEL_27;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v75, v75);
  __break(1u);
}

uint64_t type metadata accessor for ConfiguredUnitsAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C045E8;
  if (!qword_100C045E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfiguredUnitsAction);
  return result;
}

void sub_1000A115C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000A0AE8(a1, a2);
}

void sub_1000A1164(uint64_t a1)
{
  sub_1000A001C(a1);
}

double sub_1000A116C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;

  v3 = v2;
  type metadata accessor for WeatherDataAction(0);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - v15;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    *(_BYTE *)(a2 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    v57 = v19;
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v49 = v9;
      v45 = v23;
      v46 = a2;
      v53 = v3 + OBJC_IVAR____TtC7Weather29WeatherDataDebounceMiddleware_signpostID;
      v54 = OBJC_IVAR____TtC7Weather29WeatherDataDebounceMiddleware_logger;
      v52 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v25 = v23 + v52;
      v26 = *(_QWORD *)(v18 + 72);
      swift_bridgeObjectRetain(v23);
      v27 = _swiftEmptyArrayStorage;
      v51 = xmmword_10097CA50;
      v47 = v16;
      v48 = (unint64_t)"actions %{private}s";
      v55 = v12;
      v56 = v3;
      v59 = v26;
      v50 = v10;
      do
      {
        sub_1000A1570(v25, (uint64_t)v21);
        sub_1000A1570((uint64_t)v21, (uint64_t)v16);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16);
        sub_1000215BC((uint64_t)v16, type metadata accessor for MainAction);
        if (EnumCaseMultiPayload == 9)
        {
          v58 = static os_signpost_type_t.event.getter(v29);
          v30 = *(_QWORD *)(v3 + v54);
          v31 = sub_1000BA294(&qword_100BC3C38);
          v32 = swift_allocObject(v31, 72, 7);
          *(_OWORD *)(v32 + 16) = v51;
          v33 = v57;
          sub_1000A1570((uint64_t)v21, v57);
          if (swift_getEnumCaseMultiPayload(v33) == 9)
          {
            v34 = v49;
            sub_1000A15B4(v33, v49, type metadata accessor for WeatherDataAction);
            sub_10009FB04();
            v36 = v35;
            v38 = v37;
            v16 = v47;
            sub_1000215BC(v34, type metadata accessor for WeatherDataAction);
          }
          else
          {
            sub_1000215BC(v33, type metadata accessor for MainAction);
            v38 = v48 | 0x8000000000000000;
            v36 = 0xD000000000000016;
          }
          *(_QWORD *)(v32 + 56) = &type metadata for String;
          *(_QWORD *)(v32 + 64) = sub_1000B2E24();
          *(_QWORD *)(v32 + 32) = v36;
          *(_QWORD *)(v32 + 40) = v38;
          LOBYTE(v44) = 2;
          os_signpost(_:dso:log:name:signpostID:_:_:)(v58, &_mh_execute_header, v30, "Weather:weatherDataActionDebounce", 33, 2, v53, "action %{private}s", 18, v44, v32);
          v41 = swift_bridgeObjectRelease();
          v3 = v56;
          PassthroughSubject.send(_:)(v21, v41);
          v12 = v55;
          v40 = v59;
        }
        else
        {
          sub_1000A1570((uint64_t)v21, (uint64_t)v12);
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
          {
            sub_1000B4944();
            v27 = v42;
          }
          v39 = v27[2];
          if (v39 >= v27[3] >> 1)
          {
            sub_1000B4944();
            v27 = v43;
          }
          v27[2] = v39 + 1;
          v40 = v59;
          sub_1000A15B4((uint64_t)v12, (uint64_t)v27 + v52 + v39 * v59, type metadata accessor for MainAction);
        }
        sub_1000215BC((uint64_t)v21, type metadata accessor for MainAction);
        v25 += v40;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      a2 = v46;
    }
    else
    {
      v27 = _swiftEmptyArrayStorage;
    }
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v27;
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

uint64_t sub_1000A1570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000A15B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_10004A298();
}

uint64_t sub_1000A15F4(_QWORD *a1, uint64_t a2)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t, __n128);

  if (a1[3])
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  v4 = swift_bridgeObjectRelease(a1[5]);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 49) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, __n128))(v6 + 8);
  v10(v8, v5, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((*(_QWORD *)(v6 + 64) + v7 + v8) & ~v7, v5);
}

void sub_1000A1684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  char v23;
  uint64_t v24;
  void (*v25)(uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  __n128 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[5];
  uint64_t v56;
  _QWORD __src[9];
  char v58[32];

  v53 = a1;
  v52 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v50 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v47 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t *)(v1 + 40);
  swift_beginAccess(v1 + 40, v58, 1, 0);
  v5 = *(_QWORD *)(v1 + 40);
  __src[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v14 = v5;
    else
      v14 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (v6)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    v13 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v5);
  if (!v6)
    goto LABEL_17;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 8 * i + 32);
      swift_retain();
    }
    Strong = swift_unknownObjectWeakLoadStrong(v8 + 32);
    if (Strong)
    {
      v10 = swift_unknownObjectRelease(Strong);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = *(_QWORD *)(__src[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
      specialized ContiguousArray._endMutation()(v12);
    }
    else
    {
      swift_release(v8);
    }
  }
  swift_bridgeObjectRelease();
  v13 = (_QWORD *)__src[0];
LABEL_18:
  *v4 = (uint64_t)v13;
  swift_bridgeObjectRelease();
  v15 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v4);
    if (v16)
      goto LABEL_20;
LABEL_29:
    swift_bridgeObjectRelease();
    return;
  }
  if (v15 < 0)
    v44 = *v4;
  else
    v44 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v16 = _CocoaArrayWrapper.endIndex.getter(v44);
  if (!v16)
    goto LABEL_29;
LABEL_20:
  v17 = sub_1000A0794(0, (unint64_t *)&qword_100BC29A0, OS_dispatch_queue_ptr);
  if (v16 >= 1)
  {
    v18 = 0;
    v19 = v15 & 0xC000000000000001;
    v46 = v15;
    v45[1] = v17;
    v45[0] = v16;
    do
    {
      if (v19)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
      }
      else
      {
        v20 = *(_QWORD *)(v15 + 8 * v18 + 32);
        swift_retain();
      }
      v21 = *(id *)(v20 + 40);
      v22 = (void *)static OS_dispatch_queue.main.getter(v21);
      v23 = static NSObject.== infix(_:_:)(v21, v22);

      if ((v23 & 1) != 0)
      {
        v25 = *(void (**)(uint64_t, __n128))(v20 + 16);
        v24 = *(_QWORD *)(v20 + 24);
        v26 = swift_retain();
        v25(v53, v26);
        swift_release(v20);
        v27 = v24;
      }
      else
      {
        v28 = *(void **)(v20 + 40);
        sub_10003773C(v53, (uint64_t)__src, &qword_100BC43C0);
        v29 = swift_allocObject(&unk_100B84698, 96, 7);
        *(_QWORD *)(v29 + 16) = v20;
        memcpy((void *)(v29 + 24), __src, 0x48uLL);
        aBlock[4] = sub_100088FA4;
        v56 = v29;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100088F7C;
        aBlock[3] = &unk_100B846B0;
        v30 = _Block_copy(aBlock);
        v31 = v28;
        v32 = swift_retain();
        v33 = v47;
        static DispatchQoS.unspecified.getter(v32);
        v54 = _swiftEmptyArrayStorage;
        sub_1000A1C54((unint64_t *)&qword_100BFFA20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v35 = v34;
        v36 = sub_1000BA294(&qword_100BD4F10);
        sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
        v37 = v50;
        v38 = v19;
        v39 = v52;
        v40 = v35;
        v15 = v46;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v36, v41, v52, v40);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v30);
        _Block_release(v30);
        swift_release(v20);

        v42 = v37;
        v16 = v45[0];
        v43 = v39;
        v19 = v38;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v43);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v49);
        v27 = v56;
      }
      swift_release(v27);
      ++v18;
    }
    while (v16 != v18);
    goto LABEL_29;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_1000A1B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 49 + a1) & ~v12;
  v14 = (v12 + 49 + a2) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain(v9);
  v15(v13, v14, v10);
  v15((*(_QWORD *)(v11 + 64) + v12 + v13) & ~v12, (*(_QWORD *)(v11 + 64) + v12 + v14) & ~v12, v10);
  return a1;
}

void sub_1000A1C54(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = a3(a2);
    atomic_store(sub_10003BC38(v4), a1);
  }
  sub_10004A298();
}

uint64_t sub_1000A1C88(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_1000A1CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_1000A1D10(uint64_t a1)
{
  return sub_1000A1C88(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E62F0);
}

uint64_t sub_1000A1D1C(uint64_t a1)
{
  return sub_1000A1C88(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A1D28);
}

void sub_1000A1D28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  _QWORD aBlock[5];
  uint64_t v64;
  _BYTE v65[72];
  _BYTE __src[72];
  char v67[8];

  v62 = a7;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v58 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v60 - 8);
  v17 = __chkstk_darwin(v60);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v54 = (char *)&v49 - v20;
  a2 += 16;
  swift_beginAccess(a2, v67, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    v52 = v14;
    v23 = COERCE_DOUBLE(a3(a1));
    v25 = v24;
    v61 = a8;
    sub_100037768(a1, (uint64_t)__src, &qword_100BC43C0);
    v26 = v61;
    sub_100037768((uint64_t)__src, (uint64_t)v65, &qword_100BC43C0);
    v27 = (_QWORD *)swift_allocObject(&unk_100B5E668, 128, 7);
    v28 = a5;
    v27[2] = a5;
    v27[3] = a6;
    v29 = a6;
    memcpy(v27 + 4, __src, 0x48uLL);
    v30 = v62;
    v27[13] = v22;
    v27[14] = v30;
    v27[15] = v26;
    if ((v25 & 1) != 0)
    {
      if (v23 == 0.0)
      {
        swift_retain_n(v26, 2);
        swift_retain();
        swift_retain();
        goto LABEL_12;
      }
      v31 = qword_100BC2820;
      swift_retain_n(v26, 2);
      swift_retain_n(v29, 2);
      swift_retain();
      if (v31 != -1)
        swift_once(&qword_100BC2820, sub_10091A684);
      sub_10017E844(v22, (uint64_t)sub_10019DC30, (uint64_t)v27);
    }
    else
    {
      if (v23 != 0.0)
      {
        sub_10009FFE0();
        swift_retain_n(v26, 2);
        v51 = a6;
        swift_retain_n(a6, 2);
        v32 = swift_retain_n(v22, 2);
        v50 = static OS_dispatch_queue.main.getter(v32);
        static DispatchTime.now()(v50);
        v33 = v54;
        + infix(_:_:)(v19);
        v62 = *(void (**)(uint64_t))(v53 + 8);
        ((void (*)(char *, uint64_t))v62)(v19, v60);
        v34 = swift_allocObject(&unk_100B5E690, 32, 7);
        *(_QWORD *)(v34 + 16) = sub_10019DC30;
        *(_QWORD *)(v34 + 24) = v27;
        aBlock[4] = sub_10019EACC;
        v64 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100121D84;
        aBlock[3] = &unk_100B5E6A8;
        v35 = _Block_copy(aBlock);
        v36 = v64;
        swift_retain();
        v37 = swift_release(v36);
        v38 = (_QWORD *)v22;
        v39 = v55;
        static DispatchQoS.unspecified.getter(v37);
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v41 = v40;
        v42 = sub_1000BA294(&qword_100BD4F10);
        sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
        v43 = v58;
        v44 = v52;
        v45 = v41;
        v26 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v46, v52, v45);
        v47 = (void *)v50;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v39, v43, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
        v48 = v39;
        v22 = (uint64_t)v38;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v57);
        ((void (*)(char *, uint64_t))v62)(v33, v60);
        swift_release(v51);
        swift_release(v27);
        v27 = v38;
        goto LABEL_12;
      }
      swift_retain_n(v26, 2);
      swift_retain_n(a6, 2);
      swift_retain();
      sub_1001958C0(v28, a6, (uint64_t)v65, v22, v30, v26);
    }
    swift_release(v29);
LABEL_12:
    swift_release(v27);
    sub_100021A14((uint64_t)v65, &qword_100BC43C0);
    swift_release(v26);
    swift_release(v22);
  }
}

uint64_t sub_1000A22B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10078D7B4);
}

uint64_t sub_1000A22C0(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1000A22E4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A22EC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000A22EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009BD28(a1, a2);
  type metadata accessor for ActiveLocationInput(0);
  v2 = sub_1000DBB4C();
  return sub_1000BE6F8(v2, v3, v4, v5);
}

void sub_1000A2314(uint64_t a1)
{
  uint64_t v1;

  sub_1000A2354(a1, (_QWORD *)(v1 + 16), (void (*)(uint64_t))sub_100099E74);
}

void sub_1000A2334(uint64_t a1)
{
  uint64_t v1;

  sub_1000A2354(a1, (_QWORD *)(v1 + 16), (void (*)(uint64_t))sub_1000F0E9C);
}

void sub_1000A2354(uint64_t a1, _QWORD *a2, void (*a3)(uint64_t))
{
  sub_1000DB418(a2, a2[3]);
  a3(a1);
  sub_100079F70();
}

uint64_t sub_1000A2398(uint64_t a1)
{
  return sub_1000A1C88(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A23A4);
}

void sub_1000A23A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, __n128), uint64_t a6, void (*a7)(uint64_t *, __n128), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t *__return_ptr, uint64_t, __n128);
  uint64_t v29;
  void (*v30)(uint64_t *, __n128);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, __n128);
  _QWORD aBlock[5];
  uint64_t v64;
  _BYTE v65[72];
  _BYTE __src[72];
  char v67[8];

  v62 = a7;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v58 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v54 = (char *)&v49 - v20;
  a2 += 16;
  swift_beginAccess(a2, v67, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    v52 = v14;
    v23 = COERCE_DOUBLE(a3(a1));
    v25 = v24;
    v61 = a8;
    sub_100037768(a1, (uint64_t)__src, &qword_100BC43C0);
    v26 = v61;
    sub_100037768((uint64_t)__src, (uint64_t)v65, &qword_100BC43C0);
    v27 = (_QWORD *)swift_allocObject(&unk_100B5EED8, 128, 7);
    v28 = a5;
    v27[2] = a5;
    v27[3] = a6;
    v29 = a6;
    memcpy(v27 + 4, __src, 0x48uLL);
    v30 = v62;
    v27[13] = v22;
    v27[14] = v30;
    v27[15] = v26;
    if ((v25 & 1) != 0)
    {
      if (v23 == 0.0)
      {
        swift_retain_n(v26, 2);
        swift_retain();
        swift_retain();
        goto LABEL_12;
      }
      v31 = qword_100BC2820;
      swift_retain_n(v26, 2);
      swift_retain_n(v29, 2);
      swift_retain();
      if (v31 != -1)
        swift_once(&qword_100BC2820, sub_10091A684);
      sub_100180178(v22, (uint64_t)sub_10019E294, (uint64_t)v27);
    }
    else
    {
      if (v23 != 0.0)
      {
        sub_10009FFE0();
        swift_retain_n(v26, 2);
        v51 = a6;
        swift_retain_n(a6, 2);
        v32 = swift_retain_n(v22, 2);
        v50 = static OS_dispatch_queue.main.getter(v32);
        static DispatchTime.now()(v50);
        v33 = v54;
        + infix(_:_:)(v18);
        v62 = *(void (**)(uint64_t *, __n128))(v53 + 8);
        ((void (*)(char *, uint64_t))v62)(v18, v60);
        v34 = swift_allocObject(&unk_100B5EF00, 32, 7);
        *(_QWORD *)(v34 + 16) = sub_10019E294;
        *(_QWORD *)(v34 + 24) = v27;
        aBlock[4] = sub_10019EACC;
        v64 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100121D84;
        aBlock[3] = &unk_100B5EF18;
        v35 = _Block_copy(aBlock);
        v36 = v64;
        swift_retain();
        v37 = swift_release(v36);
        v38 = (_QWORD *)v22;
        v39 = v55;
        static DispatchQoS.unspecified.getter(v37);
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v41 = v40;
        v42 = sub_1000BA294(&qword_100BD4F10);
        sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
        v43 = v58;
        v44 = v52;
        v45 = v41;
        v26 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v46, v52, v45);
        v47 = (void *)v50;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v39, v43, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
        v48 = v39;
        v22 = (uint64_t)v38;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v57);
        ((void (*)(char *, uint64_t))v62)(v33, v60);
        swift_release(v51);
        swift_release(v27);
        v27 = v38;
        goto LABEL_12;
      }
      swift_retain_n(v26, 2);
      swift_retain_n(a6, 2);
      swift_retain();
      sub_100198FA8(v28, a6, (uint64_t)v65, v22, v30);
    }
    swift_release(v29);
LABEL_12:
    swift_release(v27);
    sub_100021A14((uint64_t)v65, &qword_100BC43C0);
    swift_release(v26);
    swift_release(v22);
  }
}

void sub_1000A2930()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t *);
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;

  sub_1000986AC();
  v3 = v2;
  v5 = v4;
  v7 = sub_1000BA294(v6);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_10003BC68();
  __chkstk_darwin(v9);
  v11 = &v18[-v10 - 8];
  v12 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  sub_10009922C(v12, (uint64_t)&v20, 0);
  sub_1000EF944();
  v13 = sub_1000F3DDC();
  if (v13)
  {
    if (v13 == 1)
    {
      v14 = sub_10009BE2C();
      sub_10009C0AC((uint64_t)v11 + *(int *)(v14 + 48), v5);
      swift_release(*v11);
    }
    else
    {
      sub_10009C0AC((uint64_t)v11, v5);
    }
  }
  else
  {
    v17 = v3;
    v15 = (void (*)(uint64_t *))v11[2];
    sub_1000F3F30();
    v15(&v19);
    sub_10009D330();
    sub_100098834();
    v16 = (uint64_t)v1 + *(int *)(sub_10009BE2C() + 48);
    *v1 = v19;
    sub_100080C0C(v5, v16, v17);
    sub_10009525C((uint64_t)v1, v7);
    sub_10009922C(v12, (uint64_t)v18, 33);
    sub_1000AE85C();
    swift_endAccess(v18);
  }
  sub_100098640();
}

void sub_1000A2A68(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD))(v1 + 16))(*a1);
  sub_10004A298();
}

uint64_t sub_1000A2A88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A2A90(*(void (**)(void))(v1 + 16), a1);
}

uint64_t sub_1000A2A90@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;

  a1();
  v3 = type metadata accessor for MainViewModel(0);
  return _s7Weather24LocationCompositionStateOwst_0(a2, 0, 1, v3);
}

void sub_1000A2ACC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  j__swift_retain(*a1);
  *a2 = v3;
}

uint64_t sub_1000A2AF8(uint64_t a1)
{
  return sub_1000A1C88(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A2B04);
}

void sub_1000A2B04(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  _QWORD aBlock[5];
  uint64_t v64;
  _BYTE v65[72];
  _BYTE __src[72];
  char v67[8];

  v62 = a7;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v58 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v60 - 8);
  v17 = __chkstk_darwin(v60);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v54 = (char *)&v49 - v20;
  a2 += 16;
  swift_beginAccess(a2, v67, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    v52 = v14;
    v23 = COERCE_DOUBLE(a3(a1));
    v25 = v24;
    v61 = a8;
    sub_100037768(a1, (uint64_t)__src, &qword_100BC43C0);
    v26 = v61;
    sub_100037768((uint64_t)__src, (uint64_t)v65, &qword_100BC43C0);
    v27 = (_QWORD *)swift_allocObject(&unk_100B5E938, 128, 7);
    v28 = a5;
    v27[2] = a5;
    v27[3] = a6;
    v29 = a6;
    memcpy(v27 + 4, __src, 0x48uLL);
    v30 = v62;
    v27[13] = v22;
    v27[14] = v30;
    v27[15] = v26;
    if ((v25 & 1) != 0)
    {
      if (v23 == 0.0)
      {
        swift_retain_n(v26, 2);
        swift_retain();
        swift_retain();
        goto LABEL_12;
      }
      v31 = qword_100BC2820;
      swift_retain_n(v26, 2);
      swift_retain_n(v29, 2);
      swift_retain();
      if (v31 != -1)
        swift_once(&qword_100BC2820, sub_10091A684);
      sub_10017EF74(v22, (uint64_t)sub_10019DCFC, (uint64_t)v27);
    }
    else
    {
      if (v23 != 0.0)
      {
        sub_10009FFE0();
        swift_retain_n(v26, 2);
        v51 = a6;
        swift_retain_n(a6, 2);
        v32 = swift_retain_n(v22, 2);
        v50 = static OS_dispatch_queue.main.getter(v32);
        static DispatchTime.now()(v50);
        v33 = v54;
        + infix(_:_:)(v19);
        v62 = *(void (**)(uint64_t))(v53 + 8);
        ((void (*)(char *, uint64_t))v62)(v19, v60);
        v34 = swift_allocObject(&unk_100B5E960, 32, 7);
        *(_QWORD *)(v34 + 16) = sub_10019DCFC;
        *(_QWORD *)(v34 + 24) = v27;
        aBlock[4] = sub_10019EACC;
        v64 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100121D84;
        aBlock[3] = &unk_100B5E978;
        v35 = _Block_copy(aBlock);
        v36 = v64;
        swift_retain();
        v37 = swift_release(v36);
        v38 = (_QWORD *)v22;
        v39 = v55;
        static DispatchQoS.unspecified.getter(v37);
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v41 = v40;
        v42 = sub_1000BA294(&qword_100BD4F10);
        sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
        v43 = v58;
        v44 = v52;
        v45 = v41;
        v26 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v46, v52, v45);
        v47 = (void *)v50;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v39, v43, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
        v48 = v39;
        v22 = (uint64_t)v38;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v57);
        ((void (*)(char *, uint64_t))v62)(v33, v60);
        swift_release(v51);
        swift_release(v27);
        v27 = v38;
        goto LABEL_12;
      }
      swift_retain_n(v26, 2);
      swift_retain_n(a6, 2);
      swift_retain();
      sub_100196988(v28, a6, (uint64_t)v65, v22, v30, v26);
    }
    swift_release(v29);
LABEL_12:
    swift_release(v27);
    sub_100021A14((uint64_t)v65, &qword_100BC43C0);
    swift_release(v26);
    swift_release(v22);
  }
}

uint64_t sub_1000A3090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016A9A8);
}

uint64_t sub_1000A309C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100555518(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1000A30A8(uint64_t a1)
{
  return sub_1000A1C88(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A30B4);
}

void sub_1000A30B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, char *a6, void (*a7)(char *), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *);
  _QWORD aBlock[5];
  uint64_t v64;
  _BYTE v65[72];
  _BYTE __src[72];
  char v67[8];

  v62 = a7;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v58 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v60 - 8);
  v17 = __chkstk_darwin(v60);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v54 = (char *)&v49 - v20;
  a2 += 16;
  swift_beginAccess(a2, v67, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    v52 = v14;
    v23 = COERCE_DOUBLE(a3(a1));
    v25 = v24;
    v61 = a8;
    sub_100037768(a1, (uint64_t)__src, &qword_100BC43C0);
    v26 = v61;
    sub_100037768((uint64_t)__src, (uint64_t)v65, &qword_100BC43C0);
    v27 = (_QWORD *)swift_allocObject(&unk_100B5E7D0, 128, 7);
    v28 = a5;
    v27[2] = a5;
    v27[3] = a6;
    v29 = a6;
    memcpy(v27 + 4, __src, 0x48uLL);
    v30 = v62;
    v27[13] = v22;
    v27[14] = v30;
    v27[15] = v26;
    if ((v25 & 1) != 0)
    {
      if (v23 == 0.0)
      {
        swift_retain_n(v26, 2);
        swift_retain();
        swift_retain();
        goto LABEL_12;
      }
      v31 = qword_100BC2820;
      swift_retain_n(v26, 2);
      swift_retain_n(v29, 2);
      swift_retain();
      if (v31 != -1)
        swift_once(&qword_100BC2820, sub_10091A684);
      sub_10017F30C(v22, (uint64_t)sub_10019DC98, (uint64_t)v27);
    }
    else
    {
      if (v23 != 0.0)
      {
        sub_10009FFE0();
        swift_retain_n(v26, 2);
        v51 = a6;
        swift_retain_n(a6, 2);
        v32 = swift_retain_n(v22, 2);
        v50 = static OS_dispatch_queue.main.getter(v32);
        static DispatchTime.now()(v50);
        v33 = v54;
        + infix(_:_:)(v19);
        v62 = *(void (**)(char *))(v53 + 8);
        ((void (*)(char *, uint64_t))v62)(v19, v60);
        v34 = swift_allocObject(&unk_100B5E7F8, 32, 7);
        *(_QWORD *)(v34 + 16) = sub_10019DC98;
        *(_QWORD *)(v34 + 24) = v27;
        aBlock[4] = sub_10019EACC;
        v64 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100121D84;
        aBlock[3] = &unk_100B5E810;
        v35 = _Block_copy(aBlock);
        v36 = v64;
        swift_retain();
        v37 = swift_release(v36);
        v38 = (_QWORD *)v22;
        v39 = v55;
        static DispatchQoS.unspecified.getter(v37);
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v41 = v40;
        v42 = sub_1000BA294(&qword_100BD4F10);
        sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
        v43 = v58;
        v44 = v52;
        v45 = v41;
        v26 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v46, v52, v45);
        v47 = (void *)v50;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v39, v43, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
        v48 = v39;
        v22 = (uint64_t)v38;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v57);
        ((void (*)(char *, uint64_t))v62)(v33, v60);
        swift_release(v51);
        swift_release(v27);
        v27 = v38;
        goto LABEL_12;
      }
      swift_retain_n(v26, 2);
      swift_retain_n(a6, 2);
      swift_retain();
      sub_1001971EC(v28, a6, (uint64_t)v65, v22, v30, v26);
    }
    swift_release(v29);
LABEL_12:
    swift_release(v27);
    sub_100021A14((uint64_t)v65, &qword_100BC43C0);
    swift_release(v26);
    swift_release(v22);
  }
}

void sub_1000A3640(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (**v13)(void);
  uint64_t v14;
  int EnumCaseMultiPayload;
  char *v16;
  void (*v17)(void);
  void (*v18)(void);
  void (*v19)(void);
  void (*v20)(void);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  char v29[24];

  v27 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WeatherConditionBackgroundModelFactoryInput(0);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100BC4670);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (void (**)(void))((char *)&v24 - v12);
  v14 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess(v14, v29, 0, 0);
  sub_100037768(v14, (uint64_t)v13, &qword_100BC4670);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v16 = (char *)v13 + *(int *)(sub_1000BA294(&qword_100BC4690) + 48);
      (*(void (**)(uint64_t, void (**)(void), uint64_t))(v26 + 32))(a1, v13, v5);
      _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v5);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v27);
    }
    else
    {
      _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v5);
      sub_100021A14((uint64_t)v13, &qword_100BC4670);
    }
  }
  else
  {
    v17 = *v13;
    v18 = v13[1];
    v24 = a1;
    v19 = v13[2];
    v20 = v13[3];
    v17();
    ((void (*)(char *))v19)(v7);
    swift_release(v20);
    swift_release(v18);
    v21 = &v11[*(int *)(sub_1000BA294(&qword_100BC4690) + 48)];
    v22 = v26;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v11, v7, v5);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v21, v4, v27);
    swift_storeEnumTagMultiPayload(v11, v8, 1);
    swift_beginAccess(v14, v28, 33, 0);
    sub_1000A3908((uint64_t)v11, v14, &qword_100BC4670);
    swift_endAccess(v28);
    v23 = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v7, v5);
    _s7Weather24LocationCompositionStateOwst_0(v23, 0, 1, v5);
  }
}

void sub_1000A3908(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100075DC0(a1, a2, a3);
  sub_100089000(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_10004A298();
}

uint64_t sub_1000A3934(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  if ((_OWORD *)a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 24);
    v5 = *(_QWORD *)(a3 + 32);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v5 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v7 + 64) + v9;
    v11 = *(_QWORD *)(v8 + 64);
    v12 = (v10 & ~v9) + v11;
    if (v12 <= v11)
      v12 = *(_QWORD *)(v8 + 64);
    if (v12 <= 0x20)
      v13 = 32;
    else
      v13 = v12;
    v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 >= 3)
    {
      if (v13 <= 3)
        v15 = v13;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    v16 = ~v9;
    if (v14 == 2)
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v5);
    }
    else if (v14 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(a1, *(_QWORD *)(a3 + 24));
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v10 + a1) & v16, v5);
    }
    else
    {
      swift_release(*(_QWORD *)(a1 + 8));
      swift_release(*(_QWORD *)(a1 + 24));
    }
    v17 = *((unsigned __int8 *)a2 + v13);
    if (v17 >= 3)
    {
      if (v13 <= 3)
        v18 = v13;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 2)
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v5);
      v19 = 2;
    }
    else if (v17 == 1)
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 32))((v10 + a1) & v16, ((unint64_t)a2 + v10) & v16, v5);
      v19 = 1;
    }
    else
    {
      v19 = 0;
      v20 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v20;
    }
    *(_BYTE *)(a1 + v13) = v19;
  }
  return a1;
}

double sub_1000A3B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v38 = a2;
  v3 = type metadata accessor for Location(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v39 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for LocationComponentAction(0);
  __chkstk_darwin(v44);
  v45 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - v7;
  v46 = type metadata accessor for LocationViewAction(0);
  __chkstk_darwin(v46);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - v12;
  v42 = type metadata accessor for MainAction(0);
  *(_QWORD *)&result = __chkstk_darwin(v42).n128_u64[0];
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v20 = v18 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v47 = *(_QWORD *)(v14 + 72);
    v36 = v18;
    swift_bridgeObjectRetain(v18);
    v37 = v8;
    v43 = v13;
    do
    {
      sub_100080C0C(v20, (uint64_t)v17, type metadata accessor for MainAction);
      if (swift_getEnumCaseMultiPayload(v17) == 8)
      {
        sub_10007802C((uint64_t)v17, (uint64_t)v13, type metadata accessor for LocationViewAction);
        sub_100080C0C((uint64_t)v13, (uint64_t)v10, type metadata accessor for LocationViewAction);
        if (swift_getEnumCaseMultiPayload(v10) == 1)
        {
          sub_10007802C((uint64_t)v10, (uint64_t)v8, type metadata accessor for LocationComponentAction);
          v21 = v45;
          sub_100080C0C((uint64_t)v8, v45, type metadata accessor for LocationComponentAction);
          if (swift_getEnumCaseMultiPayload(v21) == 4)
          {
            v22 = sub_1000BA294(&qword_100BC5FF0);
            v24 = v39;
            v23 = v40;
            v25 = v41;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v39, v45 + *(int *)(v22 + 48), v41);
            sub_100804308(v24, 0, v26, v27, v28, v29, v30, v31, v36, (uint64_t)v37, v38, v39, v40, v41, v42, (uint64_t)v43, v44, v45, v46,
              v47);
            v32 = v24;
            v8 = v37;
            (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v32, v25);
            sub_1000C376C();
            v13 = v43;
            v33 = (uint64_t)v43;
            v34 = type metadata accessor for LocationViewAction;
          }
          else
          {
            sub_1000C376C();
            v13 = v43;
            sub_1000BA74C((uint64_t)v43);
            v33 = v45;
            v34 = type metadata accessor for LocationComponentAction;
          }
          sub_1000979AC(v33, v34);
          v35 = sub_1000BA294(&qword_100BC5FC8);
          sub_1001C8EF4((uint64_t)&v10[*(int *)(v35 + 64)]);
        }
        else
        {
          sub_1000BA74C((uint64_t)v13);
          sub_1000BA74C((uint64_t)v10);
        }
      }
      else
      {
        sub_1000BA74C((uint64_t)v17);
      }
      v20 += v47;
      --v19;
    }
    while (v19);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000A3E94(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A3ED4(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_1000EFD78);
}

uint64_t sub_1000A3EB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A3ED4(a1, (_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))sub_1000A4D70);
}

uint64_t sub_1000A3ED4(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  sub_1000DB418(a2, a2[3]);
  return a3(a1);
}

double sub_1000A3F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  __chkstk_darwin(v2);
  sub_100098728();
  v5 = v4 - v3;
  v6 = type metadata accessor for TimeState(0);
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  v10 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v10);
  sub_100098728();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = a1;
    v19 = v16 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v20 = *(_QWORD *)(v11 + 72);
    v21 = v16;
    swift_bridgeObjectRetain(v16);
    do
    {
      sub_1000A6594(v19, v15, type metadata accessor for MainAction);
      if (swift_getEnumCaseMultiPayload(v15, v10) == 19)
      {
        sub_1000A6594(*(_QWORD *)(v18 + 64) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v9, type metadata accessor for TimeState);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v5, v9, v23);
        sub_1001CDAFC(v5);
      }
      sub_1000A0AA4(v15);
      v19 += v20;
      --v17;
    }
    while (v17);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000A40B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007E5AB8);
}

uint64_t sub_1000A40BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007E5A00);
}

void sub_1000A40C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD);
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t EnumCaseMultiPayload;
  uint64_t v70;
  char *v71;
  _QWORD v72[28];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = a2;
  sub_1000BA294(&qword_100BC5F78);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v78 = v4;
  v5 = sub_10009876C();
  v72[24] = type metadata accessor for SearchViewState.ViewState(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v72[25] = v7;
  v8 = sub_10009876C();
  v72[21] = type metadata accessor for HomeAndWorkRefinementViewState(v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v72[20] = v10;
  v11 = sub_10009876C();
  v72[19] = type metadata accessor for AveragesDetailViewState(v11);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v72[18] = v13;
  v14 = sub_10009876C();
  v72[17] = type metadata accessor for MoonDetailViewState(v14);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v72[16] = v16;
  v17 = sub_10009876C();
  v72[15] = type metadata accessor for SunriseSunsetDetailViewState(v17);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v72[14] = v19;
  v20 = sub_10009876C();
  v72[13] = type metadata accessor for NextHourPrecipitationDetailViewState(v20);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v72[12] = v22;
  v23 = sub_10009876C();
  v72[11] = type metadata accessor for AirQualityDetailViewState(v23);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100088FDC();
  v72[10] = v25;
  v26 = sub_10009876C();
  v72[9] = type metadata accessor for ConditionDetailViewState(v26);
  sub_1000B42B0();
  __chkstk_darwin(v27);
  sub_100088FDC();
  v72[8] = v28;
  v29 = sub_10009876C();
  v72[22] = type metadata accessor for ModalViewState.LocationDetailModal(v29);
  sub_1000B42B0();
  __chkstk_darwin(v30);
  sub_100088FDC();
  v72[23] = v31;
  sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v74 = v33;
  v34 = sub_10009876C();
  v72[27] = type metadata accessor for ModalViewState(v34);
  sub_1000B42B0();
  __chkstk_darwin(v35);
  sub_100088FDC();
  v73 = v36;
  sub_1000BA294(&qword_100BF3FD0);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v38);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v39);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v40);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v41);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v42);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v43);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v44);
  v77 = (char *)v72 - v45;
  v46 = sub_1000BA294(&qword_100BF3FD8);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  v49 = (_QWORD *)((char *)v72 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = (int *)type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v51);
  sub_1000986FC();
  v72[26] = v52;
  __chkstk_darwin(v53);
  v55 = (char *)v72 - v54;
  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v56);
  v58 = (char *)v72 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = a1;
  v59 = (_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view);
  v60 = *v59;
  sub_100078058((uint64_t)v59 + v50[5], (uint64_t)v58, v61);
  v76 = v59;
  sub_100078058((uint64_t)v59, (uint64_t)v55, type metadata accessor for ViewState);
  v62 = (void *)objc_opt_self(UIDevice);
  v63 = objc_msgSend(v62, "currentDevice", swift_retain().n128_f64[0]);
  v64 = objc_msgSend(v63, "userInterfaceIdiom");

  if (v64 && *(_QWORD *)&v55[v50[9] + 8] == 2)
    v66 = 1;
  else
    v66 = v55[v50[7]];
  sub_10009BC18(v65, type metadata accessor for ViewState);
  v67 = (_QWORD *)((char *)v49 + *(int *)(v46 + 48));
  v68 = *(int *)(v46 + 64);
  *v49 = v60;
  sub_10007C75C((uint64_t)v58, (uint64_t)v67, type metadata accessor for ViewState.SecondaryViewState);
  swift_release(v60);
  *((_BYTE *)v49 + v68) = v66;
  if ((v66 & 1) != 0 && (EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v67), (_DWORD)EnumCaseMultiPayload != 1))
  {
    swift_release(*v67);
    if (qword_100BC22D8 != -1)
      swift_once(&qword_100BC22D8, sub_1005E696C);
  }
  else
  {
    sub_10009BC18(EnumCaseMultiPayload, type metadata accessor for ViewState.SecondaryViewState);
  }
  v70 = v73;
  sub_100078058(v75 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v73, type metadata accessor for ModalViewState);
  v71 = (char *)&loc_1000A462C + *((int *)qword_1005C6090 + swift_getEnumCaseMultiPayload(v70));
  __asm { BR              X10 }
}

uint64_t type metadata accessor for NextHourPrecipitationDetailViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C16E58;
  if (!qword_100C16E58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NextHourPrecipitationDetailViewState);
  return result;
}

uint64_t type metadata accessor for SunriseSunsetDetailViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C15920;
  if (!qword_100C15920)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SunriseSunsetDetailViewState);
  return result;
}

uint64_t type metadata accessor for AirQualityDetailViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD46B0;
  if (!qword_100BD46B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirQualityDetailViewState);
  return result;
}

uint64_t type metadata accessor for ConditionDetailViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDB638;
  if (!qword_100BDB638)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionDetailViewState);
  return result;
}

uint64_t type metadata accessor for AveragesDetailViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCF380;
  if (!qword_100BCF380)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AveragesDetailViewState);
  return result;
}

uint64_t type metadata accessor for MoonDetailViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD4838;
  if (!qword_100BD4838)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonDetailViewState);
  return result;
}

void sub_1000A4D1C(uint64_t a1)
{
  uint64_t v1;

  sub_1000A4D24(a1, (_QWORD *)(v1 + 16));
}

void sub_1000A4D24(uint64_t a1, _QWORD *a2)
{
  sub_1000DB418(a2, a2[3]);
  sub_1000892D4(a1);
}

uint64_t sub_1000A4D68(uint64_t a1)
{
  uint64_t v1;

  return sub_10060D1B4(a1, (_QWORD *)(v1 + 16));
}

void sub_1000A4D70(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  id v17;
  uint64_t v18;

  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v5);
  sub_100098728();
  v8 = v7 - v6;
  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v12 = (uint64_t *)(v11 - v10);
  v13 = (int *)type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100098694();
  sub_100080C0C((uint64_t)a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v2, v15);
  sub_100080C0C(v2 + v13[5], (uint64_t)v12, type metadata accessor for ViewState.SecondaryViewState);
  if (swift_getEnumCaseMultiPayload(v12) == 1)
  {
    sub_1000215BC((uint64_t)v12, type metadata accessor for ViewState.SecondaryViewState);
LABEL_7:
    sub_1000215BC(v2, type metadata accessor for ViewState);
    v18 = type metadata accessor for WeatherConditionBackgroundModelFactoryInput(0);
    _s7Weather24LocationCompositionStateOwst_0(a2, 1, 1, v18);
    goto LABEL_8;
  }
  v16 = *v12;
  if (*(_QWORD *)(v2 + v13[9] + 8) == 1)
  {
    v17 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v17, "userInterfaceIdiom");

    if ((*(_BYTE *)(v2 + v13[7]) & 1) == 0)
    {
      swift_release(v16);
      goto LABEL_7;
    }
  }
  sub_1000215BC(v2, type metadata accessor for ViewState);
  sub_1000A4F4C(v16, a1, v8);
  sub_1000F26CC((uint64_t)a1, v8, a2);
  swift_release(v16);
  sub_100021A14(v8, &qword_100BC35F8);
LABEL_8:
  sub_100098640();
}

uint64_t sub_1000A4F4C@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t active;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;

  v47 = a3;
  v48 = a2;
  v4 = type metadata accessor for LocationModel(0);
  v49 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationsState(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100C0B8D0);
  __chkstk_darwin(v10);
  v46 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Location.Identifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v44 - v17;
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, (uint64_t)v21, v22);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v12) == 1)
  {
    v23 = type metadata accessor for Location(0);
    v24 = v47;
    return _s7Weather24LocationCompositionStateOwst_0(v24, 1, 1, v23);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v21, v12);
  sub_100080C0C((uint64_t)v48 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)v9, type metadata accessor for LocationsState);
  static CurrentLocation.placeholderIdentifier.getter();
  v25 = static Location.Identifier.== infix(_:_:)(v18, v16);
  v48 = *(void (**)(char *, uint64_t))(v13 + 8);
  v48(v16, v12);
  if ((v25 & 1) != 0)
  {
    v26 = sub_1000BA294(&qword_100BC3488);
    v27 = (uint64_t)v46;
    v28 = (uint64_t)&v46[*(int *)(v26 + 48)];
    v29 = type metadata accessor for CurrentLocation(0);
    swift_storeEnumTagMultiPayload(v27, v29, 3);
    v30 = type metadata accessor for LocationOfInterest(0);
    _s7Weather24LocationCompositionStateOwst_0(v28, 1, 1, v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v27, enum case for LocationModel.current(_:), v4);
    _s7Weather24LocationCompositionStateOwst_0(v27, 0, 1, v4);
    v31 = v47;
  }
  else
  {
    v32 = *(_QWORD *)&v9[*(int *)(v7 + 24)];
    v33 = *(_QWORD *)(v32 + 16);
    v44 = v32;
    v45 = v9;
    if (v33)
    {
      v34 = v32 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
      v35 = *(_QWORD *)(v49 + 72);
      v36 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v49 + 16);
      v37 = swift_bridgeObjectRetain(v32);
      while (1)
      {
        v38 = v36(v6, v34, v4, v37);
        LocationModel.identifier.getter(v38);
        v39 = static Location.Identifier.== infix(_:_:)(v16, v18);
        v48(v16, v12);
        if ((v39 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v4);
        v34 += v35;
        if (!--v33)
          goto LABEL_11;
      }
      v27 = (uint64_t)v46;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v6, v4);
      v40 = v27;
      v41 = 0;
    }
    else
    {
      swift_bridgeObjectRetain(v32);
LABEL_11:
      v27 = (uint64_t)v46;
      v40 = (uint64_t)v46;
      v41 = 1;
    }
    _s7Weather24LocationCompositionStateOwst_0(v40, v41, 1, v4);
    swift_bridgeObjectRelease(v44);
    v31 = v47;
    v9 = v45;
  }
  sub_1000215BC((uint64_t)v9, type metadata accessor for LocationsState);
  v42 = _s7Weather24LocationCompositionStateOwet_0(v27, 1, v4);
  if ((_DWORD)v42 == 1)
  {
    v48(v18, v12);
    sub_100021A14(v27, &qword_100C0B8D0);
    v23 = type metadata accessor for Location(0);
    v24 = v31;
    return _s7Weather24LocationCompositionStateOwst_0(v24, 1, 1, v23);
  }
  LocationModel.location.getter(v42);
  v48(v18, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v27, v4);
}

double sub_1000A5388(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __n128 v48;
  uint64_t v49;
  __n128 v50;
  void (*v51)(char *, uint64_t, __n128);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t ObjectType;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  void (*v101)(char *, _QWORD, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD v110[4];
  uint64_t __src[9];
  uint64_t v112;
  uint64_t v113;

  v108 = type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind(0);
  v3 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  sub_10009883C();
  v91 = v4 - v5;
  v7 = __chkstk_darwin(v6);
  v90 = (uint64_t)&v88 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v88 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v88 - v13;
  v15 = __chkstk_darwin(v12);
  v104 = (char *)&v88 - v16;
  __chkstk_darwin(v15);
  v103 = (uint64_t)&v88 - v17;
  v18 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v18);
  sub_10009883C();
  v21 = v19 - v20;
  __chkstk_darwin(v22);
  v102 = (uint64_t)&v88 - v23;
  v24 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v24);
  v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = a1;
  v29 = *(_QWORD *)(a1 + 40);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v93 = v21;
    v94 = v14;
    v95 = v11;
    v96 = v3;
    v99 = OBJC_IVAR____TtC7Weather39WeatherConditionBackgroundStoreObserver_hasPrewarmDone;
    v31 = v29 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    v107 = enum case for Settings.VFX.AnimatedBackgrounds.AnimationKind.vfx(_:);
    v32 = *(_QWORD *)(v25 + 72);
    v88 = v29;
    swift_bridgeObjectRetain(v29);
    v92 = &type metadata for () + 1;
    v109 = v1;
    v33 = v108;
    v105 = v32;
    v106 = v24;
    while (1)
    {
      sub_10000AB54(v31, (uint64_t)v28, type metadata accessor for MainAction);
      if (swift_getEnumCaseMultiPayload(v28, v24))
      {
        sub_1000215BC((uint64_t)v28, type metadata accessor for MainAction);
      }
      else if (*v28)
      {
        if (*v28 == 1)
        {
          sub_10048BE7C(&OBJC_IVAR____TtC7Weather39WeatherConditionBackgroundStoreObserver____lazy_storage___locationAnimationKind, (uint64_t (*)(void))&Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter, v103);
          v34 = v96;
          v101 = *(void (**)(char *, _QWORD, uint64_t))(v96 + 104);
          v101(v104, v107, v33);
          sub_100086DA4(&qword_100BDFE98, (uint64_t (*)(uint64_t))&type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind, (uint64_t)&protocol conformance descriptor for Settings.VFX.AnimatedBackgrounds.AnimationKind);
          sub_1000BC248();
          sub_1000BC248();
          v36 = __src[1];
          v37 = v113;
          v38 = __src[0] == v112 && __src[1] == v113;
          if (v38)
          {
            v39 = 1;
            v37 = __src[1];
          }
          else
          {
            v39 = sub_10009C214(__src[0], v35, v112);
          }
          swift_bridgeObjectRelease(v36);
          v50 = swift_bridgeObjectRelease(v37);
          v51 = *(void (**)(char *, uint64_t, __n128))(v34 + 8);
          v51(v104, v33, v50);
          v100 = (void (*)(uint64_t, uint64_t))v51;
          ((void (*)(uint64_t, uint64_t))v51)(v103, v33);
          v52 = v109;
          if ((v39 & 1) != 0)
          {
            if (qword_100BC2438 != -1)
              swift_once(&qword_100BC2438, sub_100159690);
            v53 = type metadata accessor for Logger(0);
            v54 = sub_1000AECD4(v53, (uint64_t)qword_100CAF0A0);
            v55 = Logger.logObject.getter(v54);
            v56 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v55, v56))
            {
              v57 = (uint8_t *)sub_10009D340();
              *(_WORD *)v57 = 0;
              _os_log_impl((void *)&_mh_execute_header, v55, v56, "Requesting default background manager to execute pending requests because app will enter foreground", v57, 2u);
              sub_1000986F0((uint64_t)v57);
            }

            v58 = v52[3];
            ObjectType = swift_getObjectType(v52[2]);
            dispatch thunk of WeatherConditionBackgroundManagerType.executeRequests(forcePrepare:)(1, ObjectType, v58);
          }
          sub_10048BE7C(&OBJC_IVAR____TtC7Weather39WeatherConditionBackgroundStoreObserver____lazy_storage___listAnimationKind, (uint64_t (*)(void))&Settings.VFX.AnimatedBackgrounds.listAnimationKind.getter, (uint64_t)v94);
          v33 = v108;
          sub_1000C5EF4((uint64_t)v95, v107);
          sub_1000BC248();
          sub_1000BC248();
          v61 = __src[1];
          v62 = v113;
          if (__src[0] == v112 && __src[1] == v113)
          {
            swift_bridgeObjectRelease_n(__src[1], 2);
            sub_1000DDB34();
            sub_1000DBA6C();
            v24 = v106;
LABEL_31:
            v65 = v109[2];
            v66 = v109[4];
            v67 = v109[5];
            v97 = swift_getObjectType(v66);
            v38 = v65 == v66;
            v32 = v105;
            if (!v38)
              goto LABEL_34;
            v89 = v67;
            v68 = v90;
            sub_10048BE7C(&OBJC_IVAR____TtC7Weather39WeatherConditionBackgroundStoreObserver____lazy_storage___locationAnimationKind, (uint64_t (*)(void))&Settings.VFX.AnimatedBackgrounds.locationAnimationKind.getter, v90);
            v69 = v91;
            sub_1000C5EF4(v91, v107);
            sub_100086DA4(&qword_100BE4F20, (uint64_t (*)(uint64_t))&type metadata accessor for Settings.VFX.AnimatedBackgrounds.AnimationKind, (uint64_t)&protocol conformance descriptor for Settings.VFX.AnimatedBackgrounds.AnimationKind);
            LODWORD(v101) = dispatch thunk of static Equatable.== infix(_:_:)(v68, v69, v33, v70);
            v71 = v100;
            v100(v69, v33);
            v72 = v68;
            v67 = v89;
            v71(v72, v33);
            if ((v101 & 1) == 0)
            {
LABEL_34:
              if (qword_100BC2438 != -1)
                swift_once(&qword_100BC2438, sub_100159690);
              v73 = type metadata accessor for Logger(0);
              v74 = sub_1000AECD4(v73, (uint64_t)qword_100CAF0A0);
              v75 = Logger.logObject.getter(v74);
              v76 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v75, v76))
              {
                v77 = (uint8_t *)sub_10009D340();
                *(_WORD *)v77 = 0;
                _os_log_impl((void *)&_mh_execute_header, v75, v76, "Requesting list background manager to execute pending requests because app will enter foreground", v77, 2u);
                v78 = (uint64_t)v77;
                v24 = v106;
                sub_1000986F0(v78);
              }

              dispatch thunk of WeatherConditionBackgroundManagerType.executeRequests(forcePrepare:)(1, v97, v67);
            }
            goto LABEL_5;
          }
          v64 = sub_10009C214(__src[0], v60, v112);
          swift_bridgeObjectRelease(v61);
          swift_bridgeObjectRelease(v62);
          sub_1000DDB34();
          sub_1000DBA6C();
          v32 = v105;
          v24 = v106;
          if ((v64 & 1) != 0)
            goto LABEL_31;
        }
      }
      else
      {
        if ((*((_BYTE *)v109 + v99) & 1) != 0)
        {
LABEL_47:
          *(_QWORD *)&result = swift_bridgeObjectRelease(v88).n128_u64[0];
          return result;
        }
        v40 = v109;
        *((_BYTE *)v109 + v99) = 1;
        v41 = v102;
        static TaskPriority.userInitiated.getter();
        v42 = type metadata accessor for TaskPriority(0);
        _s7Weather24LocationCompositionStateOwst_0(v41, 0, 1, v42);
        sub_10003773C(v98, (uint64_t)__src, &qword_100BC43C0);
        v43 = (_QWORD *)swift_allocObject(&unk_100B757B0, 112, 7);
        v43[2] = 0;
        v44 = v43 + 2;
        v43[3] = 0;
        v43[4] = v40;
        memcpy(v43 + 5, __src, 0x48uLL);
        v45 = v41;
        v46 = v93;
        sub_10003773C(v45, v93, &qword_100BC30C8);
        v47 = _s7Weather24LocationCompositionStateOwet_0(v46, 1, v42);
        v48 = swift_retain();
        if (v47 == 1)
        {
          sub_100021A14(v46, &qword_100BC30C8);
          v49 = 0;
        }
        else
        {
          v79 = TaskPriority.rawValue.getter(v48);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v46, v42);
          v49 = v79;
        }
        v80 = *v44;
        v33 = v108;
        if (*v44)
        {
          v81 = swift_getObjectType(*v44);
          swift_unknownObjectRetain(v80);
          v82 = dispatch thunk of Actor.unownedExecutor.getter(v81);
          v84 = v83;
          swift_unknownObjectRelease(v80);
        }
        else
        {
          v82 = 0;
          v84 = 0;
        }
        v24 = v106;
        v85 = swift_allocObject(&unk_100B757D8, 32, 7);
        *(_QWORD *)(v85 + 16) = &unk_100BE4F30;
        *(_QWORD *)(v85 + 24) = v43;
        if (v84 | v82)
        {
          v110[0] = 0;
          v110[1] = 0;
          v86 = v110;
          v110[2] = v82;
          v110[3] = v84;
        }
        else
        {
          v86 = 0;
        }
        v87 = swift_task_create(v49 | 0x1000, v86, v92, &unk_100BFFAA0, v85);
        swift_release(v87);
        sub_100021A14(v102, &qword_100BC30C8);
        v32 = v105;
      }
LABEL_5:
      v31 += v32;
      if (!--v30)
        goto LABEL_47;
    }
  }
  return result;
}

uint64_t sub_1000A5C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100299190);
}

uint64_t sub_1000A5C2C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t updated;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;

  v37 = a6;
  v38 = a7;
  v39 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v39);
  v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  updated = type metadata accessor for WeatherDataUpdateRequestLog.Event(0);
  __chkstk_darwin(updated);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v14 = a2;
  swift_storeEnumTagMultiPayload(v14, v15, 11);
  sub_1000C7114((uint64_t)v14);
  sub_1000215BC((uint64_t)v14, type metadata accessor for WeatherDataUpdateRequestLog.Event);
  v16 = *(_QWORD *)(a3 + 56);
  v36 = *(uint64_t (**)(uint64_t))(a3 + 48);
  v17 = (int *)sub_1000BA294(&qword_100BCB630);
  v18 = (_QWORD *)((char *)v11 + v17[12]);
  v19 = (uint64_t)v11 + v17[16];
  v35 = (uint64_t)v11 + v17[20];
  swift_retain();
  *v11 = Location.id.getter(v20);
  v11[1] = v21;
  v23 = *a5;
  v22 = a5[1];
  v24 = (int *)type metadata accessor for WeatherData(0);
  v25 = v24[6];
  v26 = (char *)a5 + v25;
  v27 = (char *)v18 + v25;
  v28 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v27, v26, v28);
  sub_100080C0C((uint64_t)a5 + v24[8], (uint64_t)v18 + v24[8], type metadata accessor for WeatherData.WeatherStatisticsState);
  sub_100080C0C((uint64_t)a5 + v24[7], (uint64_t)v18 + v24[7], type metadata accessor for WeatherData.CachingState);
  sub_100037768((uint64_t)a5 + v24[9], (uint64_t)v18 + v24[9], &qword_100BC3350);
  v29 = (uint64_t)v18 + v24[5];
  swift_bridgeObjectRetain(v22);
  static Locale.current.getter(v30);
  v31 = type metadata accessor for Locale(0);
  _s7Weather24LocationCompositionStateOwst_0(v29, 0, 1, v31);
  *v18 = v23;
  v18[1] = v22;
  sub_100080C0C(v37, v19, type metadata accessor for PreprocessedWeatherData);
  sub_100080C0C(v38, v35, type metadata accessor for NewsDataModel);
  v32 = type metadata accessor for WeatherDataAction(0);
  swift_storeEnumTagMultiPayload(v11, v32, 4);
  swift_storeEnumTagMultiPayload(v11, v39, 9);
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  sub_1000A5EBC((uint64_t)v11, (uint64_t)v40, v36);
  sub_100021A14((uint64_t)v40, (uint64_t *)&unk_100BFFA10);
  sub_1000215BC((uint64_t)v11, type metadata accessor for MainAction);
  return swift_release(v16);
}

uint64_t sub_1000A5EBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[40];
  uint64_t v14;
  char v15;

  v6 = sub_1000BA294(&qword_100BD3370);
  v7 = *(_QWORD *)(sub_100099ACC() - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v6, v10 + v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10097CA50;
  sub_1000A1570(a1, v11 + v10);
  sub_1000A5F84(a2, (uint64_t)v13);
  v14 = v11;
  v15 = 0;
  sub_10009FF10((uint64_t)v13, a3);
  return sub_100021A68((uint64_t)v13, &qword_100BD3378);
}

uint64_t sub_1000A5F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294((uint64_t *)&unk_100BFFA10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_1000A5FCC(_QWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 0xCu:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1[1]).n128_u64[0];
      break;
    case 2u:
    case 3u:
    case 4u:
    case 0xAu:
    case 0xEu:
      v4 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 5u:
      v6 = a1[1];
      if (v6 != 1)
        goto LABEL_7;
      break;
    case 6u:
    case 7u:
      swift_errorRelease(*a1);
      break;
    case 0xFu:
    case 0x10u:
      v5 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = *(_QWORD *)((char *)a1 + *(int *)(sub_1000BA294(&qword_100BEA2D0) + 48) + 8);
LABEL_7:
      *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000A609C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100075EB0(a2);
    result = sub_10003BC38(v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A60D4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100075EB0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A6114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t active;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  __chkstk_darwin(active);
  v40 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Location.Identifier(0);
  v38 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ViewState.SecondaryViewState(0);
  __chkstk_darwin(v41);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v42);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100BC35F8);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Location(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ModalViewState(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocationPreviewViewState(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, (uint64_t)v19, type metadata accessor for ModalViewState);
  if (swift_getEnumCaseMultiPayload(v19, v17))
  {
    sub_1000215BC((uint64_t)v19, type metadata accessor for ModalViewState);
  }
  else
  {
    sub_10007802C((uint64_t)v19, (uint64_t)v22, type metadata accessor for LocationPreviewViewState);
    sub_10062F730((uint64_t)v12);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13) != 1)
    {
      v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
      v32 = v44;
      Location.identifier.getter(v31);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      sub_1000215BC((uint64_t)v22, type metadata accessor for LocationPreviewViewState);
      v33 = 0;
      v23 = v43;
      return _s7Weather24LocationCompositionStateOwst_0(v32, v33, 1, v23);
    }
    sub_1000215BC((uint64_t)v22, type metadata accessor for LocationPreviewViewState);
    sub_100021A14((uint64_t)v12, &qword_100BC35F8);
  }
  v24 = (int *)v42;
  v23 = v43;
  v25 = v41;
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)v9, type metadata accessor for ViewState);
  sub_100080C0C((uint64_t)&v9[v24[5]], (uint64_t)v7, type metadata accessor for ViewState.SecondaryViewState);
  if (swift_getEnumCaseMultiPayload(v7, v25) == 1)
  {
    sub_1000215BC((uint64_t)v7, type metadata accessor for ViewState.SecondaryViewState);
LABEL_14:
    v29 = type metadata accessor for ViewState;
    v30 = (uint64_t)v9;
    goto LABEL_15;
  }
  v26 = *v7;
  if (*(_QWORD *)&v9[v24[9] + 8] == 1)
  {
    v27 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v27, "userInterfaceIdiom");

    if ((v9[v24[7]] & 1) == 0)
    {
      swift_release(v26);
      goto LABEL_14;
    }
  }
  sub_1000215BC((uint64_t)v9, type metadata accessor for ViewState);
  v28 = v40;
  sub_100080C0C(v26 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, v40, type metadata accessor for LocationViewerActiveLocationState);
  swift_release(v26);
  if (_s7Weather24LocationCompositionStateOwet_0(v28, 1, v23) == 1)
  {
    v29 = type metadata accessor for LocationViewerActiveLocationState;
    v30 = v28;
LABEL_15:
    sub_1000215BC(v30, v29);
    v33 = 1;
    v32 = v44;
    return _s7Weather24LocationCompositionStateOwst_0(v32, v33, 1, v23);
  }
  v34 = v39;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
  v35(v39, v28, v23);
  v32 = v44;
  v35((char *)v44, (uint64_t)v34, v23);
  v33 = 0;
  return _s7Weather24LocationCompositionStateOwst_0(v32, v33, 1, v23);
}

uint64_t sub_1000A6594(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t *sub_1000A65D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = type metadata accessor for News(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t sub_1000A6668(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t, __n128);
  __n128 v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v102;
  int *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  uint64_t v133;
  void *v134;
  const void *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const void *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  uint64_t v168;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v166 = a3;
  v167 = a1;
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v168 = a2;
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = v11[3];
  v10[2] = v11[2];
  v10[3] = v13;
  v14 = v11[5];
  v10[4] = v11[4];
  v10[5] = v14;
  v15 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v16 = *(int *)(v15 + 28);
  v17 = (_QWORD *)((char *)v10 + v16);
  v18 = (_QWORD *)((char *)v11 + v16);
  v19 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = sub_1000BA294(&qword_100BC3360);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v18[1];
    *v17 = *v18;
    v17[1] = v21;
    v22 = *(int *)(v19 + 20);
    v23 = (char *)v17 + v22;
    v24 = (char *)v18 + v22;
    v25 = type metadata accessor for TemperatureScaleConfiguration(0);
    v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v25 - 8) + 16);
    v27 = swift_bridgeObjectRetain(v21);
    v26(v23, v24, v25, v27);
    v28 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    *(_QWORD *)&v23[v28[5]] = *(_QWORD *)&v24[v28[5]];
    *(_QWORD *)&v23[v28[6]] = *(_QWORD *)&v24[v28[6]];
    *(_QWORD *)&v23[v28[7]] = *(_QWORD *)&v24[v28[7]];
    v29 = v28[8];
    v30 = &v23[v29];
    v31 = &v24[v29];
    v33 = *(_QWORD *)v31;
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = v33;
    *((_QWORD *)v30 + 1) = v32;
    v23[v28[9]] = v24[v28[9]];
    swift_bridgeObjectRetain(v32);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v34 = *(int *)(v15 + 32);
  v35 = (_QWORD *)((char *)v10 + v34);
  v36 = (_QWORD *)((char *)v11 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = v166[7];
  v39 = v167 + v38;
  v40 = v168 + v38;
  v41 = *(_QWORD *)(v168 + v38);
  *(_QWORD *)(v167 + v38) = v41;
  v42 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v43 = (void *)(v39 + v42);
  v44 = (const void *)(v40 + v42);
  v45 = type metadata accessor for WeatherDescription(0);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v41);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = v45;
    v47 = sub_1000BA294(&qword_100BC3368);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    v46 = v45;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
  }
  v48 = v166[8];
  v49 = (_QWORD *)(v167 + v48);
  v50 = v168 + v48;
  v51 = *(_QWORD *)(v168 + v48 + 8);
  *v49 = *(_QWORD *)(v168 + v48);
  v49[1] = v51;
  v52 = *(_QWORD *)(v168 + v48 + 24);
  v49[2] = *(_QWORD *)(v168 + v48 + 16);
  v49[3] = v52;
  v53 = *(_QWORD *)(v168 + v48 + 40);
  v49[4] = *(_QWORD *)(v168 + v48 + 32);
  v49[5] = v53;
  v54 = *(_QWORD *)(v168 + v48 + 56);
  v49[6] = *(_QWORD *)(v168 + v48 + 48);
  v49[7] = v54;
  v55 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v56 = (char *)v49 + v55;
  v57 = v50 + v55;
  v58 = type metadata accessor for Date(0);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v58 - 8) + 16);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v53);
  v60 = swift_bridgeObjectRetain(v54);
  v163 = v59;
  v164 = v58;
  v59((uint64_t)v56, v57, v58, v60);
  v61 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v62 = *(int *)(v61 + 20);
  v63 = &v56[v62];
  v64 = (const void *)(v57 + v62);
  v65 = type metadata accessor for Elevation(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 1, v65))
  {
    v66 = sub_1000BA294(&qword_100BC3370);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v63, 0, 1, v65);
  }
  v67 = *(int *)(v61 + 24);
  v68 = &v56[v67];
  v69 = (const void *)(v57 + v67);
  v70 = type metadata accessor for BackgroundMoonData(0);
  v165 = v61;
  v161 = v70;
  v162 = v65;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
  {
    v71 = sub_1000BA294(&qword_100BC3378);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
  }
  v72 = v166[9];
  v73 = v166[10];
  v74 = (_QWORD *)(v167 + v72);
  v75 = (_QWORD *)(v168 + v72);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = v75[3];
  v74[2] = v75[2];
  v74[3] = v77;
  v78 = v75[5];
  v74[4] = v75[4];
  v74[5] = v78;
  v79 = v75[7];
  v74[6] = v75[6];
  v74[7] = v79;
  v80 = v75[9];
  v74[8] = v75[8];
  v74[9] = v80;
  v81 = v75[11];
  v74[10] = v75[10];
  v74[11] = v81;
  v82 = v75[13];
  v74[12] = v75[12];
  v74[13] = v82;
  v83 = v167 + v73;
  v84 = v168 + v73;
  v85 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v81);
  v86 = swift_bridgeObjectRetain(v82);
  v85(v83, v84, v46, v86);
  v87 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
  v88 = (_QWORD *)(v83 + v87);
  v89 = (_QWORD *)(v84 + v87);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  v91 = v166[11];
  v92 = v166[12];
  v93 = (_QWORD *)(v167 + v91);
  v94 = (_QWORD *)(v168 + v91);
  v95 = v94[1];
  *v93 = *v94;
  v93[1] = v95;
  v96 = v94[3];
  v93[2] = v94[2];
  v93[3] = v96;
  v97 = v94[5];
  v93[4] = v94[4];
  v93[5] = v97;
  v98 = v167 + v92;
  v99 = v168 + v92;
  v100 = type metadata accessor for PressureTrend(0);
  v101 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v100 - 8) + 16);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v96);
  v102 = swift_bridgeObjectRetain(v97);
  v101(v98, v99, v100, v102);
  v103 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v104 = v103[5];
  v105 = (_QWORD *)(v98 + v104);
  v106 = (_QWORD *)(v99 + v104);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = v103[6];
  v109 = (_QWORD *)(v98 + v108);
  v110 = (_QWORD *)(v99 + v108);
  v160 = v110[1];
  *v109 = *v110;
  v109[1] = v160;
  v111 = v103[7];
  v112 = (_QWORD *)(v98 + v111);
  v113 = (_QWORD *)(v99 + v111);
  v159 = v113[1];
  *v112 = *v113;
  v112[1] = v159;
  *(_QWORD *)(v98 + v103[8]) = *(_QWORD *)(v99 + v103[8]);
  v114 = v103[9];
  v115 = (_QWORD *)(v98 + v114);
  v116 = (_QWORD *)(v99 + v114);
  v158 = v116[1];
  *v115 = *v116;
  v115[1] = v158;
  v117 = v166[13];
  v118 = v166[14];
  v119 = v167 + v117;
  v120 = v168 + v117;
  v121 = *(_QWORD *)(v120 + 8);
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *(_QWORD *)(v119 + 8) = v121;
  v153 = *(_QWORD *)(v120 + 24);
  *(_QWORD *)(v119 + 16) = *(_QWORD *)(v120 + 16);
  *(_QWORD *)(v119 + 24) = v153;
  v122 = *(_QWORD *)(v120 + 40);
  *(_QWORD *)(v119 + 32) = *(_QWORD *)(v120 + 32);
  *(_QWORD *)(v119 + 40) = v122;
  v123 = *(_QWORD *)(v120 + 56);
  *(_QWORD *)(v119 + 48) = *(_QWORD *)(v120 + 48);
  *(_QWORD *)(v119 + 56) = v123;
  v124 = *(_QWORD *)(v120 + 72);
  *(_QWORD *)(v119 + 64) = *(_QWORD *)(v120 + 64);
  *(_QWORD *)(v119 + 72) = v124;
  v125 = *(_QWORD *)(v120 + 88);
  *(_QWORD *)(v119 + 80) = *(_QWORD *)(v120 + 80);
  *(_QWORD *)(v119 + 88) = v125;
  v126 = *(_QWORD *)(v120 + 104);
  *(_QWORD *)(v119 + 96) = *(_QWORD *)(v120 + 96);
  *(_QWORD *)(v119 + 104) = v126;
  v127 = *(_QWORD *)(v120 + 120);
  *(_QWORD *)(v119 + 112) = *(_QWORD *)(v120 + 112);
  *(_QWORD *)(v119 + 120) = v127;
  v128 = *(_QWORD *)(v120 + 136);
  *(_QWORD *)(v119 + 128) = *(_QWORD *)(v120 + 128);
  *(_QWORD *)(v119 + 136) = v128;
  v129 = *(_QWORD *)(v120 + 152);
  *(_QWORD *)(v119 + 144) = *(_QWORD *)(v120 + 144);
  *(_QWORD *)(v119 + 152) = v129;
  v154 = *(_QWORD *)(v120 + 168);
  *(_QWORD *)(v119 + 160) = *(_QWORD *)(v120 + 160);
  *(_QWORD *)(v119 + 168) = v154;
  v155 = *(_QWORD *)(v120 + 184);
  *(_QWORD *)(v119 + 176) = *(_QWORD *)(v120 + 176);
  *(_QWORD *)(v119 + 184) = v155;
  v130 = *(_QWORD *)(v120 + 200);
  *(_QWORD *)(v119 + 192) = *(_QWORD *)(v120 + 192);
  *(_QWORD *)(v119 + 200) = v130;
  *(_OWORD *)(v119 + 208) = *(_OWORD *)(v120 + 208);
  v156 = v130;
  v157 = *(_QWORD *)(v120 + 224);
  *(_QWORD *)(v119 + 224) = v157;
  v152 = v167 + v118;
  v131 = v168 + v118;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRetain(v159);
  swift_bridgeObjectRetain(v158);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRetain(v154);
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRetain(v156);
  v132 = swift_bridgeObjectRetain(v157);
  v163(v152, v131, v164, v132);
  v133 = *(int *)(v165 + 20);
  v134 = (void *)(v152 + v133);
  v135 = (const void *)(v131 + v133);
  if (_s7Weather24LocationCompositionStateOwet_0(v131 + v133, 1, v162))
  {
    v136 = sub_1000BA294(&qword_100BC3370);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v134, v135, v162);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v134, 0, 1, v162);
  }
  v137 = *(int *)(v165 + 24);
  v138 = (void *)(v152 + v137);
  v139 = (const void *)(v131 + v137);
  if (_s7Weather24LocationCompositionStateOwet_0(v131 + v137, 1, v161))
  {
    v140 = sub_1000BA294(&qword_100BC3378);
    memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v138, v139, v161);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v138, 0, 1, v161);
  }
  v141 = v166[15];
  v142 = (_QWORD *)(v167 + v141);
  v143 = (_QWORD *)(v168 + v141);
  v144 = v143[1];
  *v142 = *v143;
  v142[1] = v144;
  v145 = v143[3];
  v142[2] = v143[2];
  v142[3] = v145;
  v146 = v143[5];
  v142[4] = v143[4];
  v142[5] = v146;
  v147 = v143[7];
  v142[6] = v143[6];
  v142[7] = v147;
  v148 = v143[9];
  v142[8] = v143[8];
  v142[9] = v148;
  v149 = v143[11];
  v142[10] = v143[10];
  v142[11] = v149;
  v150 = v143[13];
  v142[12] = v143[12];
  v142[13] = v150;
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v148);
  swift_bridgeObjectRetain(v149);
  swift_bridgeObjectRetain(v150);
  return v167;
}

_QWORD *sub_1000A6F04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain(v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t sub_1000A6FB0(uint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  char *v41;
  uint64_t (*v42)(_QWORD *);

  v4 = v3;
  v42 = a2;
  v7 = sub_1000BA294(&qword_100BC30C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000BA294(&qword_100C0B380);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10009E6C0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v39 - v18;
  sub_1000AEF04(a1, (uint64_t)v12);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13) == 1)
  {
    sub_100021AA4((uint64_t)v12, &qword_100C0B380);
  }
  else
  {
    v20 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
    v21 = v20(v19, v12, v13);
    v22 = News.placements.getter(v21);
    v23 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRelease(v22);
    if (v23)
    {
      v24 = type metadata accessor for TaskPriority(0);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 1, 1, v24);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
      v25 = *(unsigned __int8 *)(v14 + 80);
      v26 = (v25 + 32) & ~v25;
      v40 = (void (*)(uint64_t, char *, uint64_t))v20;
      v41 = v9;
      v27 = a3;
      v28 = (v15 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
      v29 = v4;
      v30 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      v31 = swift_allocObject(&unk_100B983A8, v30 + 16, v25 | 7);
      *(_QWORD *)(v31 + 16) = 0;
      *(_QWORD *)(v31 + 24) = 0;
      v40(v31 + v26, v17, v13);
      *(_QWORD *)(v31 + v28) = v29;
      v32 = (_QWORD *)(v31 + v30);
      *v32 = v42;
      v32[1] = v27;
      swift_retain();
      swift_retain();
      v33 = sub_100966894((uint64_t)v41, (uint64_t)&unk_100C10430, v31);
      swift_release(v33);
      return sub_1000E7594();
    }
    sub_1000E7594();
  }
  if (qword_100BC24D0 != -1)
    swift_once(&qword_100BC24D0, sub_100159668);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_1000AECD4(v35, (uint64_t)qword_100CAF258);
  Logger.logObject.getter(v36);
  v37 = sub_10009C0A4();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)sub_100098710(2);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "No articles to fetch", v38, 2u);
    sub_1000986F0((uint64_t)v38);
  }

  return v42(_swiftEmptyArrayStorage);
}

uint64_t sub_1000A729C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t v14;

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (void (*)(uint64_t, uint64_t))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000A7364(v11);
  v12 = objc_autoreleasePoolPush();
  sub_1000A73B4(v4, a1, a2, v11, a3);
  objc_autoreleasePoolPop(v12);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000A7364@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  sub_10009922C(v1 + 16, (uint64_t)v6, 0);
  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  Atomic.wrappedValue.getter(a1, v4);
  return swift_release(v3);
}

void *sub_1000A73B4@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39[14];
  Swift::String v40[3];
  uint64_t v41[29];
  uint64_t v42[15];
  uint64_t v43;

  v38 = a5;
  v34 = a4;
  v8 = type metadata accessor for UUID(0);
  __chkstk_darwin(v8);
  v37 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel(0);
  __chkstk_darwin(v10);
  v36 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PressureComponentPreprocessedDataModel(0);
  __chkstk_darwin(v12);
  v43 = (uint64_t)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ListPreprocessedDataModel(0);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = v19;
  v20 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = v22;
  v23 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000DB418(a1 + 4, a1[7]);
  v35 = sub_1000A8B3C((uint64_t)a2, a3);
  sub_1000DB418(a1 + 9, a1[12]);
  sub_1000A9368((uint64_t)a2, v25);
  sub_1000DB418(a1 + 14, a1[17]);
  sub_1000F4C6C((uint64_t)a2, a3, v22);
  sub_1000DB418(a1 + 19, a1[22]);
  v26 = v19;
  v27 = v34;
  sub_1000AD1B0((uint64_t)a2, a3, v34, v26);
  sub_1000DB418(a1 + 24, a1[27]);
  sub_1000A7750((uint64_t)a2, a3, v39);
  sub_1000DB418(a1 + 29, a1[32]);
  sub_1000AA4A4(a3, (uint64_t)v16);
  sub_1000DB418(a1 + 34, a1[37]);
  sub_1000A8EC0((uint64_t)a2, v40);
  sub_1000DB418(a1 + 39, a1[42]);
  sub_1000A9AB8(v43);
  sub_1000DB418(a1 + 44, a1[47]);
  sub_1000AA788(a2, v41);
  sub_1000DB418(a1 + 49, a1[52]);
  v28 = v36;
  sub_1000AE008((uint64_t)a2, v27, v36);
  sub_1000DB418(a1 + 54, a1[57]);
  sub_1000AC5C0((uint64_t)a2, a3, v42);
  v29 = (uint64_t)v37;
  UUID.init()(v30);
  return sub_1000AED78(v29, v35, (uint64_t)v25, (uint64_t)v33, (uint64_t)v32, v39, (uint64_t)v16, v40, v38, v43, v41, v28, v42);
}

uint64_t sub_1000A7750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  uint64_t (*v64)(void);
  uint64_t (*v65)(void);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  void (*v124)(_QWORD, _QWORD);
  uint64_t (*v125)(uint64_t, _QWORD);
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, _QWORD);
  uint64_t (*v148)(uint64_t, _QWORD);
  uint64_t result;
  uint64_t *v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, char *, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t (*v167)(uint64_t, _QWORD);
  void (*v168)(_QWORD, _QWORD);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char v195[8];
  char v196[8];
  char *v197;
  char v198[8];
  char v199[8];
  char *v200;
  char v201[8];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  Swift::String v205;

  v193 = a2;
  v177 = a3;
  v4 = type metadata accessor for PrecipitationTotalStringAmount(0);
  sub_1000B43A4(v4, (uint64_t)v201);
  sub_1000BBFEC(v5);
  __chkstk_darwin(v6);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v7);
  sub_10009511C((uint64_t)&v155 - v8);
  sub_1000BA294(&qword_100BF9B20);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v11 = sub_1000987B4(v10);
  v186 = type metadata accessor for PrecipitationComponentDescriptionContext(v11);
  sub_1000BBFEC(*(_QWORD *)(v186 - 8));
  __chkstk_darwin(v12);
  sub_100088FDC();
  sub_10009511C(v13);
  v14 = sub_1000BA294(&qword_100BCB0A8);
  sub_1000B43A4(v14, (uint64_t)&v204);
  sub_1000BBFEC(v15);
  __chkstk_darwin(v16);
  sub_100088FDC();
  v18 = sub_1000987B4(v17);
  v19 = type metadata accessor for PrecipitationTotalHeroString(v18);
  sub_1000B43A4(v19, (uint64_t)v199);
  sub_1000BBFEC(v20);
  __chkstk_darwin(v21);
  sub_100088FDC();
  sub_10009511C(v22);
  sub_1000BA294(&qword_100BCB138);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v25 = sub_1000987B4(v24);
  v26 = type metadata accessor for DayWeather(v25);
  sub_1000B43A4(v26, (uint64_t)&v202);
  sub_1000BBFEC(v27);
  __chkstk_darwin(v28);
  sub_100088FDC();
  v192 = v29;
  v188 = sub_1000BA294(&qword_100BCB130);
  sub_1000BBFEC(*(_QWORD *)(v188 - 8));
  __chkstk_darwin(v30);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v31);
  sub_1000BA30C();
  v33 = __chkstk_darwin(v32);
  v187 = (char *)&v155 - v34;
  __chkstk_darwin(v33);
  v189 = (uint64_t)&v155 - v35;
  type metadata accessor for WeatherMetadata(0);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100088FDC();
  sub_10009511C(v37);
  v191 = sub_1000BA294(&qword_100BCB9F8);
  sub_1000BBFEC(*(_QWORD *)(v191 - 8));
  __chkstk_darwin(v38);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v39);
  sub_1000BA30C();
  __chkstk_darwin(v40);
  v190 = (char *)&v155 - v41;
  v42 = type metadata accessor for TimeZone(0);
  sub_1000B43A4(v42, (uint64_t)&v203);
  sub_1000BBFEC(v43);
  __chkstk_darwin(v44);
  sub_100098728();
  v47 = v46 - v45;
  v48 = type metadata accessor for CurrentWeather(0);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  sub_100098728();
  v52 = v51 - v50;
  v53 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = __chkstk_darwin(v53);
  __chkstk_darwin(v55);
  v57 = (char *)&v155 - v56;
  v58 = type metadata accessor for WeatherData(0);
  v59 = *(int *)(v58 + 24);
  v164 = a1;
  v60 = (char *)(a1 + v59);
  v61 = WeatherDataModel.currentWeather.getter(v58);
  CurrentWeather.date.getter(v61);
  v62 = *(uint64_t (**)(void))(v49 + 8);
  v162 = v52;
  countAndFlagsBits = v48;
  v63 = sub_1000C1368(v62);
  Location.timeZone.getter(v63);
  Date.startOfDay(timeZone:)(v47);
  sub_1000988C4();
  v163 = v47;
  sub_1000C1368(v64);
  v65 = *(uint64_t (**)(void))(v54 + 8);
  v165 = v53;
  v66 = sub_1000C1368(v65);
  WeatherDataModel.hourlyForecast.getter(v66);
  v200 = v57;
  v67 = v57;
  v185 = v57;
  sub_1000C0644((uint64_t)sub_1000C701C, (uint64_t)v198);
  v69 = v68;
  WeatherDataModel.hourlyForecast.getter(v68);
  v70 = v155;
  Forecast.metadata.getter(v191);
  sub_1000988C4();
  sub_1000C1368(v71);
  v72 = type metadata accessor for HourWeather(0);
  v74 = sub_1000CD90C(&qword_100BD0C50, v73, (uint64_t)&protocol conformance descriptor for HourWeather);
  v76 = sub_1000CD90C(&qword_100BD0C58, v75, (uint64_t)&protocol conformance descriptor for HourWeather);
  v78 = sub_1000CD90C(&qword_100BD0C60, v77, (uint64_t)&protocol conformance descriptor for HourWeather);
  v79 = Forecast.init(_:metadata:)(v69, v70, v72, v74, v76, v78);
  WeatherDataModel.dailyForecast.getter(v79);
  v197 = v67;
  sub_1000A855C((uint64_t)sub_1000A87D4, (uint64_t)v196);
  v81 = v80;
  v82 = v183;
  v187 = v60;
  WeatherDataModel.dailyForecast.getter(v80);
  v83 = v188;
  Forecast.metadata.getter(v188);
  v84 = v179;
  v85 = *(void (**)(uint64_t, uint64_t))(v179 + 8);
  v86 = v83;
  v85(v82, v83);
  v88 = sub_1000D91A4(&qword_100BD0C78, v87, (uint64_t)&protocol conformance descriptor for DayWeather);
  v90 = sub_1000D91A4(&qword_100BD0C80, v89, (uint64_t)&protocol conformance descriptor for DayWeather);
  v92 = sub_1000D91A4(&qword_100BD0C88, v91, (uint64_t)&protocol conformance descriptor for DayWeather);
  v93 = v189;
  v94 = v81;
  v95 = v180;
  v96 = v86;
  v97 = v90;
  v98 = (uint64_t)object;
  Forecast.init(_:metadata:)(v94, v70, v180, v88, v97, v92);
  v194 = v185;
  v99 = v160;
  sub_1000D8C28();
  v179 = *(_QWORD *)(v84 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v179)(v98, v93, v96);
  v100 = _s7Weather24LocationCompositionStateOwet_0(v99, 1, v95);
  v161 = v85;
  if (v100 == 1)
  {
    v101 = v188;
    v102 = Forecast.startIndex.getter(v188);
    v103 = sub_10063D9D4(v102);
    Forecast.subscript.getter(v103, v101);
    v85(v98, v101);
    sub_1000A851C(v99);
  }
  else
  {
    v85(v98, v188);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 32))(v192, v99, v95);
  }
  v104 = v166;
  v105 = v166[11];
  v106 = v166[12];
  sub_1000DB418(v166 + 8, v105);
  v107 = v162;
  sub_1000CD070();
  v108 = v163;
  sub_1000DDD94();
  v109 = v169;
  v110 = v190;
  dispatch thunk of PrecipitationTotalHeroStringBuilderType.buildTodayString(currentWeather:hourlyForecast:dayWeather:timeZone:)(v107, v190, v192, v108, v105, v106);
  sub_100095288((uint64_t)&v184);
  sub_100095288((uint64_t)&v185);
  v111 = v189;
  v164 = sub_1000A88EC(v104, v164, v189);
  v160 = v112;
  v113 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v205._countAndFlagsBits = 0xD00000000000002FLL;
  v205._object = (void *)0x8000000100A0E890;
  v114._object = (void *)0x8000000100A0E860;
  v114._countAndFlagsBits = 0xD000000000000024;
  v115._countAndFlagsBits = 0x7469706963657250;
  v115._object = (void *)0xED00006E6F697461;
  v116 = NSLocalizedString(_:tableName:bundle:value:comment:)(v114, (Swift::String_optional)0, (NSBundle)v113, v115, v205);
  countAndFlagsBits = v116._countAndFlagsBits;
  object = v116._object;

  v181 = v104[2];
  v117 = v170;
  ((void (*)(void))DayWeather.precipitationAmount.getter)();
  sub_1000CD070();
  v118 = v183;
  sub_1000DF838(v183, v111);
  v157 = *(void (**)(uint64_t, char *, uint64_t))(v182 + 16);
  v119 = v184;
  v157(v184, v110, v191);
  sub_1000DDD94();
  v120 = v172;
  sub_100098F8C();
  v156 = type metadata accessor for DominantPrecipitation(0);
  v121 = _s7Weather24LocationCompositionStateOwst_0(v120, 0, 1, v156);
  PrecipitationTotalHeroString.isDescriptionAllowedToShowNext24HourTotal.getter(v121);
  v122 = v171;
  sub_1000C3E14();
  v182 = sub_1000D1988();
  v166 = v123;
  sub_1000988C4();
  v168 = v124;
  v124(v122, v186);
  sub_1000988C4();
  v167 = v125;
  v126 = sub_100094F10(v117, v125);
  DayWeather.precipitationAmount.getter(v126);
  sub_1000CD070();
  sub_1000DF838(v118, v189);
  v157(v119, v190, v191);
  sub_1000DDD94();
  sub_100098F8C();
  v127 = _s7Weather24LocationCompositionStateOwst_0(v120, 0, 1, v156);
  PrecipitationTotalHeroString.isDescriptionAllowedToShowNext24HourTotal.getter(v127);
  sub_1000C3E14();
  v193 = sub_1000D1988();
  v187 = v128;
  sub_100095288((uint64_t)v195);
  v129 = sub_100095288((uint64_t)&v194);
  v130 = v173;
  v131 = PrecipitationTotalHeroString.amount.getter(v129);
  v132 = PrecipitationTotalStringAmount.formattedString.getter(v131);
  v134 = v133;
  v135 = *(uint64_t (**)(uint64_t, uint64_t))(v174 + 8);
  v136 = v176;
  v137 = v135(v130, v176);
  v138 = v175;
  v139 = PrecipitationTotalHeroString.amount.getter(v137);
  v140 = PrecipitationTotalStringAmount.formattedAccessibleString.getter(v139);
  v142 = v141;
  v143 = v135(v138, v136);
  v144 = PrecipitationTotalHeroString.shortSubtitle.getter(v143);
  v146 = v145;
  sub_1000988C4();
  sub_100094F10(v109, v147);
  sub_1000988C4();
  sub_100094F10(v192, v148);
  sub_100095288((uint64_t)&v188);
  sub_100095288((uint64_t)&v189);
  result = sub_100095288((uint64_t)&v191);
  v150 = v177;
  *v177 = v132;
  v150[1] = v134;
  v150[2] = v140;
  v150[3] = v142;
  v150[4] = v144;
  v150[5] = v146;
  v151 = v166;
  v150[6] = v182;
  v150[7] = (uint64_t)v151;
  v152 = v187;
  v150[8] = v193;
  v150[9] = (uint64_t)v152;
  v153 = (uint64_t)object;
  v150[10] = countAndFlagsBits;
  v150[11] = v153;
  v154 = v160;
  v150[12] = v164;
  v150[13] = v154;
  return result;
}

uint64_t sub_1000A8278(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = type metadata accessor for Calendar.Component(0);
  v34 = *(_QWORD *)(v2 - 8);
  sub_10009D98C();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v29 - v7;
  if (!*(_QWORD *)(a1 + 16))
  {
    v10 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_1000BA294(&qword_100BCCB70);
  result = sub_1000BA608();
  v10 = (_QWORD *)result;
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v10;
  }
  v11 = 0;
  v33 = result + 56;
  v12 = *(unsigned __int8 *)(v34 + 80);
  v29 = a1;
  v30 = a1 + ((v12 + 32) & ~v12);
  while (v11 < *(_QWORD *)(a1 + 16))
  {
    v13 = *(_QWORD *)(v34 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
    v14(v8, v30 + v13 * v11, v2);
    v15 = v10[5];
    v16 = sub_100051B90(&qword_100BCCB78, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
    v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v2, v16) & ~(-1 << *((_BYTE *)v10 + 32));
    sub_1000C4520();
    if ((v20 & v19) != 0)
    {
      v32 = v11;
      v22 = ~v21;
      while (1)
      {
        v14(v6, v10[6] + v17 * v13, v2);
        v23 = sub_100051B90(&qword_100BCCB80, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
        v24 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v23);
        v25 = *(void (**)(char *, uint64_t))(v34 + 8);
        v25(v6, v2);
        if ((v24 & 1) != 0)
          break;
        v17 = (v17 + 1) & v22;
        sub_1000C4520();
        if ((v19 & v20) == 0)
        {
          a1 = v29;
          v11 = v32;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v25)(v8, v2);
      a1 = v29;
      v11 = v32;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v33 + 8 * v18) = v20 | v19;
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v10[6] + v17 * v13, v8, v2);
      v26 = v10[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_18;
      v10[2] = v28;
    }
    if (++v11 == v31)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_1000A84E0(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for Date(255);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }
  sub_10004A298();
}

uint64_t sub_1000A851C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BCB138);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000A855C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v34 = a1;
  v35 = a2;
  v33 = *(_QWORD *)(sub_1000BA294(&qword_100BCB130) - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  v32 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10009876C();
  v28 = type metadata accessor for DayWeather(v7);
  v36 = *(_QWORD *)(v28 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  v30 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v31 = (char *)&v27 - v11;
  sub_10009D2A4();
  v13 = __chkstk_darwin(v12);
  sub_1000BEC88(v13, v14, v15, v16, v17, v18, v19, v20, v27);
  sub_1000BA294(&qword_100BCE7B0);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100099234();
  v37 = _swiftEmptyArrayStorage;
  sub_1000D1D38((unint64_t *)&qword_100BCE7B8);
  sub_10009BEF0(v22);
  sub_1000D1D38((unint64_t *)&qword_100BCE7C0);
  sub_1000BD368();
  sub_10011ABA8();
  if (v23)
  {
LABEL_15:
    sub_100021A14(v4, &qword_100BCE7B0);
  }
  else
  {
    sub_100079FF8();
    while (1)
    {
      v24 = sub_100110204();
      sub_1000DAC28(v24, v25);
      sub_10011E7AC();
      sub_1000C6A0C();
      sub_1000EAF60();
      sub_1000C440C();
      sub_1000C099C();
      v26 = sub_1000EF994();
      if (v3)
        break;
      if ((v26 & 1) != 0)
      {
        sub_1000DC150();
        if ((sub_1000BE77C() & 1) == 0)
        {
          sub_1000BEA3C();
          sub_1000A87A0();
          v2 = v37;
        }
        if (v2[2] >= v2[3] >> 1)
        {
          sub_1000A87A0();
          v2 = v37;
        }
        sub_1000D8EA0();
        v37 = v2;
      }
      else
      {
        sub_100098B18();
      }
      v4 = v29;
      sub_1000BD368();
      sub_10011ABA8();
      if (v23)
        goto LABEL_15;
    }
    sub_100098B18();
    sub_100021A14(v29, &qword_100BCE7B0);
    swift_release(v37);
  }
  sub_1000B44B0();
}

void sub_1000A87A0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

BOOL sub_1000A87D4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C7040(a1, *(_QWORD *)(v1 + 16), (void (*)(void))&DayWeather.date.getter);
}

BOOL sub_1000A87F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A8814(a1, *(_QWORD *)(v1 + 16));
}

BOOL sub_1000A8814(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v5);
  v8 = sub_100051B90((unint64_t *)&qword_100BCB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v9 = dispatch thunk of static Comparable.< infix(_:_:)(v7, a2, v3, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return (v9 & 1) == 0;
}

uint64_t sub_1000A88EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a3;
  v23 = type metadata accessor for CurrentWeather(0);
  v4 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DominantPrecipitation(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  v14 = a1 + 3;
  v15 = a1[6];
  v16 = a1[7];
  sub_1000DB418(v14, v15);
  v17 = type metadata accessor for WeatherData(0);
  WeatherDataModel.currentWeather.getter(v17);
  dispatch thunk of PrecipitationCalculatorType.findUniquePrecipitation(currentWeather:dailyForecast:)(v6, v24, v15, v16);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v18 == enum case for DominantPrecipitation.none(_:))
    goto LABEL_2;
  if (v18 == enum case for DominantPrecipitation.wintryMix(_:))
  {
    v19 = 0x61682E64756F6C63;
    goto LABEL_7;
  }
  if (v18 == enum case for DominantPrecipitation.snowfall(_:))
  {
    v19 = 0x6B616C66776F6E73;
    goto LABEL_7;
  }
  v21 = v18 == enum case for DominantPrecipitation.rainfall(_:) || v18 == enum case for DominantPrecipitation.sleet(_:);
  if (v21 || v18 == enum case for DominantPrecipitation.generic(_:))
  {
LABEL_2:
    v19 = 0x6C69662E706F7264;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return v19;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
  __break(1u);
  return result;
}

uint64_t sub_1000A8B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char v68[16];
  char *v69;

  v52 = a2;
  v51 = a1;
  type metadata accessor for TemperatureScaleConfiguration.Gradient(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v60 = v3;
  v61 = type metadata accessor for TemperatureScaleConfiguration(0);
  v59 = *(_QWORD *)(v61 - 8);
  sub_10009D98C();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v56 = v5;
  v57 = type metadata accessor for AppConfiguration(0);
  v54 = *(_QWORD *)(v57 - 8);
  sub_10009D98C();
  __chkstk_darwin(v6);
  sub_100098728();
  v9 = v8 - v7;
  sub_1000BA294(&qword_100BCB130);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v11 = sub_1000BA8E0();
  v50 = type metadata accessor for TimeZone(v11);
  v49 = *(_QWORD *)(v50 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  v16 = type metadata accessor for CurrentWeather(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100098728();
  v20 = v19 - v18;
  v55 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v55 - 8);
  sub_10009D98C();
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v48 - v25;
  v27 = type metadata accessor for WeatherData(0);
  v28 = WeatherDataModel.currentWeather.getter(v27);
  CurrentWeather.date.getter(v28);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
  v30 = v52;
  Location.timeZone.getter(v29);
  Date.startOfDay(timeZone:)(v15);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v15, v50);
  WeatherDataModel.dailyForecast.getter(v31);
  v69 = v24;
  sub_1000A855C((uint64_t)sub_1000A87F8, (uint64_t)v68);
  v33 = v32;
  v34 = v58[5];
  v35 = v58[6];
  v36 = v58;
  sub_1000DB418(v58 + 2, v34);
  v37 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v34, v35);
  v38 = v56;
  AppConfiguration.temperatureScale.getter(v37);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v9, v57);
  v40 = v60;
  TemperatureScaleConfiguration.gradient.getter(v39);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v38, v61);
  v41 = sub_1000ADC80(v40);
  v42 = sub_1000A8EAC(10, v33);
  v62 = v24;
  v63 = v51;
  v64 = v36;
  v65 = v30;
  v66 = v26;
  v67 = v41;
  sub_10084A650();
  v44 = v43;
  swift_bridgeObjectRelease(v41);
  swift_unknownObjectRelease(v42);
  v45 = *(void (**)(char *, uint64_t))(v53 + 8);
  v46 = v55;
  v45(v24, v55);
  v45(v26, v46);
  return v44;
}

uint64_t sub_1000A8EAC(uint64_t a1, uint64_t a2)
{
  return sub_1000F55C4(a1, a2, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t))sub_1000F59FC, (void (*)(_QWORD))&type metadata accessor for DayWeather);
}

void sub_1000A8EC0(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  id v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String *v89;
  uint64_t v90;
  Swift::String v91;

  v89 = a2;
  v4 = type metadata accessor for WeatherFormatPlaceholder(0);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100098728();
  v85 = v7 - v6;
  v8 = type metadata accessor for WeatherFormatScaling(0);
  v9 = *(_QWORD *)(v8 - 8);
  v79 = v8;
  v80 = v9;
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_100098728();
  v13 = v12 - v11;
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v14);
  v15 = sub_10008909C();
  v74 = type metadata accessor for NSUnitLength.WeatherFormatUsage(v15);
  v16 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  sub_100098728();
  v19 = v18 - v17;
  v20 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(0);
  v77 = *(_QWORD *)(v20 - 8);
  v78 = v20;
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_1000986FC();
  v76 = v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v74 - v24;
  v90 = sub_1000BA294(&qword_100BCB0A8);
  v81 = *(_QWORD *)(v90 - 8);
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_100098728();
  v75 = v28 - v27;
  v29 = type metadata accessor for CurrentWeather(0);
  v30 = *(_QWORD *)(v29 - 8);
  v83 = v29;
  __chkstk_darwin(v29);
  sub_1000986FC();
  v88 = v31;
  __chkstk_darwin(v32);
  v34 = (char *)&v74 - v33;
  v35 = type metadata accessor for WeatherData(0);
  v84 = a1 + *(int *)(v35 + 24);
  WeatherDataModel.currentWeather.getter(v35);
  sub_1000DD1B0();
  v82 = *(void (**)(char *, uint64_t))(v30 + 8);
  v82(v34, v29);
  v36 = v74;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v19, enum case for NSUnitLength.WeatherFormatUsage.visibility(_:), v74);
  v37 = type metadata accessor for Locale(0);
  v38 = _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, v37);
  v39 = static Set<>.full.getter(v38);
  v41 = v79;
  v40 = v80;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v80 + 104))(v13, enum case for WeatherFormatScaling.automatic(_:), v79);
  static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v39, v19, v13, 2, v2);
  v42 = swift_bridgeObjectRelease(v39);
  (*(void (**)(uint64_t, uint64_t, __n128))(v40 + 8))(v13, v41, v42);
  sub_1000AA25C(v2);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v19, v36);
  v44 = v76;
  NSUnitLength.BaseWeatherFormatStyle.accessible.getter(v43);
  v45 = v78;
  v46 = *(void (**)(char *, uint64_t))(v77 + 8);
  v46(v25, v78);
  v48 = v85;
  v47 = v86;
  v49 = v87;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104))(v85, enum case for WeatherFormatPlaceholder.none(_:), v87);
  v50 = type metadata accessor for UnitManager(0);
  v51 = static UnitManager.standard.getter(v50);
  v52 = sub_1000A9328();
  v53 = v90;
  v54 = v75;
  v55 = Measurement.formatted<A>(_:placeholder:unitManager:)(v44, v48, v51, &protocol witness table for UnitManager, v90, v45, v52);
  v79 = v56;
  v80 = v55;
  swift_release(v51);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
  v46(v44, v45);
  v57 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
  v58 = v54;
  v57(v54, v53);
  v59 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v91._object = (void *)0x8000000100A0EED0;
  v60._countAndFlagsBits = 0x696C696269736956;
  v60._object = (void *)0xEA00000000007974;
  v61._countAndFlagsBits = 0;
  v61._object = (void *)0xE000000000000000;
  v91._countAndFlagsBits = 0xD00000000000003CLL;
  v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, (Swift::String_optional)0, (NSBundle)v59, v61, v91);

  WeatherDataModel.currentWeather.getter(v63);
  sub_1000DD1B0();
  v64 = v34;
  v66 = (void (*)(uint64_t, uint64_t))v82;
  v65 = v83;
  v67 = ((uint64_t (*)(char *, uint64_t))v82)(v64, v83);
  v68 = v88;
  WeatherDataModel.currentWeather.getter(v67);
  v69 = StringBuilder.makeString(for:data:formattedForAccessibility:)(v58, v68, 0);
  v71 = v70;
  v66(v68, v65);
  v57(v58, v90);
  v72 = v89;
  *v89 = v62;
  v72[1]._countAndFlagsBits = v69;
  v72[1]._object = v71;
  v73 = (void *)v79;
  v72[2]._countAndFlagsBits = v80;
  v72[2]._object = v73;
  sub_100098640();
}

unint64_t sub_1000A9328()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB0B8;
  if (!qword_100BCB0B8)
  {
    v1 = type metadata accessor for NSUnitLength.BaseWeatherFormatStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUnitLength.BaseWeatherFormatStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB0B8);
  }
  return result;
}

void sub_1000A9368(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t countAndFlagsBits;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t);
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::String v112;

  v110 = a1;
  v105 = a2;
  sub_1000BA294(&qword_100BC3360);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_1000986FC();
  v104 = v3;
  __chkstk_darwin(v4);
  v103 = (uint64_t)&v83 - v5;
  countAndFlagsBits = type metadata accessor for WeatherFormatPlaceholder(0);
  v106 = *(_QWORD *)(countAndFlagsBits - 8);
  __chkstk_darwin(countAndFlagsBits);
  sub_100088FDC();
  v99 = v6;
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v91 = v8;
  v108 = (void (*)(uint64_t, uint64_t))type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v96 = *((_QWORD *)v108 - 1);
  __chkstk_darwin(v108);
  sub_100088FDC();
  v98 = v9;
  v111 = sub_1000BA294(&qword_100BC4E68);
  v95 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  sub_100098728();
  v12 = v11 - v10;
  v13 = type metadata accessor for CurrentWeather(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000986FC();
  v101 = v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v83 - v17;
  v19 = type metadata accessor for Locale.Language(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_100098728();
  v21 = type metadata accessor for Locale(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_100098728();
  v25 = v24 - v23;
  v27 = static Locale.current.getter(v26);
  Locale.language.getter(v27);
  v28 = sub_100098B40(v25, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  LOBYTE(v22) = Locale.Language.prefersFullTemperatureScale.getter(v28);
  sub_1000BEA30(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  v97 = type metadata accessor for WeatherData(0);
  v29 = v110 + *(int *)(v97 + 24);
  WeatherDataModel.currentWeather.getter(v97);
  v109 = v12;
  sub_1000B4E70();
  v30 = v13;
  v107 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v31 = v107(v18, v13);
  if ((v22 & 1) != 0)
  {
    v32 = static Set<>.value.getter(v31);
    v33 = v91;
    _s7Weather24LocationCompositionStateOwst_0(v91, 1, 1, v21);
    v34 = v98;
    sub_1000CD30C();
    swift_bridgeObjectRelease(v32);
    sub_100021AA4(v33, &qword_100BC3340);
    v90 = enum case for WeatherFormatPlaceholder.none(_:);
    v83 = v29;
    v89 = *(void (**)(uint64_t))(v106 + 104);
    v35 = v99;
    v86 = v21;
    v36 = countAndFlagsBits;
    v89(v99);
    v88 = type metadata accessor for UnitManager(0);
    v37 = static UnitManager.standard.getter(v88);
    sub_10005329C((unint64_t *)&qword_100BCB9D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v87 = v38;
    v92 = v13;
    v39 = v111;
    v40 = v109;
    v41 = Measurement.formatted<A>(_:placeholder:unitManager:)(v34, v35, v37, &protocol witness table for UnitManager, v111, v108, v38);
    sub_1000DBE30(v41, v42);
    v85 = *(uint64_t (**)(uint64_t, uint64_t))(v106 + 8);
    sub_100098B40(v35, v85);
    v84 = *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8);
    sub_1000BEA30(v84);
    v43 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
    v44 = v43(v40, v39);
    WeatherDataModel.currentWeather.getter(v44);
    sub_1000B4E70();
    v45 = v107(v18, v92);
    v46 = static Set<>.unit.getter(v45);
    _s7Weather24LocationCompositionStateOwst_0(v33, 1, 1, v86);
    sub_1000CD30C();
    swift_bridgeObjectRelease(v46);
    sub_100021AA4(v33, &qword_100BC3340);
    v47 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v89)(v35, v90, v36);
    v48 = static UnitManager.standard.getter(v47);
    v49 = v34;
    v50 = v34;
    v51 = v111;
    v52 = (uint64_t)v108;
    v106 = Measurement.formatted<A>(_:placeholder:unitManager:)(v49, v35, v48, &protocol witness table for UnitManager, v111, v108, v87);
    v96 = v53;
    swift_release(v48);
    v85(v35, v36);
    v84(v50, v52);
    v54 = v40;
    v30 = v92;
    v108 = (void (*)(uint64_t, uint64_t))v43;
    v43(v54, v51);
  }
  else
  {
    v55 = v98;
    static WeatherFormatStyle<>.weather.getter(v31);
    v56 = v106;
    v58 = v99;
    v57 = countAndFlagsBits;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v106 + 104))(v99, enum case for WeatherFormatPlaceholder.none(_:), countAndFlagsBits);
    v59 = type metadata accessor for UnitManager(0);
    v60 = static UnitManager.standard.getter(v59);
    sub_10005329C((unint64_t *)&qword_100BCB9D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v61 = v111;
    v62 = v109;
    v64 = Measurement.formatted<A>(_:placeholder:unitManager:)(v55, v58, v60, &protocol witness table for UnitManager, v111, v108, v63);
    sub_1000DBE30(v64, v65);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v57);
    sub_100098B40(v55, *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
    v108 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v108(v62, v61);
    v106 = 0;
    v96 = 0;
  }
  v66 = v103;
  sub_10082B688(v102, v110, v103);
  v67 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v112._object = (void *)0x8000000100A16910;
  v68._countAndFlagsBits = 0x694C20736C656546;
  v68._object = (void *)0xEA0000000000656BLL;
  v69._countAndFlagsBits = 0;
  v69._object = (void *)0xE000000000000000;
  v112._countAndFlagsBits = 0xD00000000000003CLL;
  v70 = NSLocalizedString(_:tableName:bundle:value:comment:)(v68, (Swift::String_optional)0, (NSBundle)v67, v69, v112);
  countAndFlagsBits = v70._countAndFlagsBits;

  v71 = v104;
  sub_1002E8B2C(v66, v104);
  sub_1000C62F8();
  v72 = v109;
  sub_1000B4E70();
  v73 = (void (*)(uint64_t, uint64_t))v107;
  v107(v18, v30);
  v74 = v101;
  sub_1000C62F8();
  v75 = StringBuilder.makeString(for:data:formattedForAccessibility:)(v72, v74, 0);
  v77 = v76;
  v73(v74, v30);
  v108(v72, v111);
  sub_100021AA4(v66, &qword_100BC3360);
  v78 = v105;
  *v105 = countAndFlagsBits;
  v78[1] = (uint64_t)v70._object;
  v79 = v93;
  v78[2] = v94;
  v78[3] = v79;
  v80 = v96;
  v78[4] = v106;
  v78[5] = v80;
  v81 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  sub_100683968(v71, (uint64_t)v78 + *(int *)(v81 + 28));
  v82 = (uint64_t *)((char *)v78 + *(int *)(v81 + 32));
  *v82 = v75;
  v82[1] = v77;
  sub_100098640();
}

unint64_t sub_1000A9A78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB9D8;
  if (!qword_100BCB9D8)
  {
    v1 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB9D8);
  }
  return result;
}

uint64_t sub_1000A9AB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, char *, uint64_t, __n128);
  int v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, char *, uint64_t, __n128);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t (*v78)(uint64_t, char *, uint64_t, __n128);
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, char *, uint64_t, __n128);
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t (**v116)(uint64_t, char *, uint64_t, __n128);
  uint64_t (*v117)(uint64_t, char *, uint64_t, __n128);
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned int v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, char *, uint64_t, __n128);
  uint64_t v125;
  uint64_t (*v126)(uint64_t, char *, uint64_t, __n128);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  void (*v136)(uint64_t);
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  Swift::String v147;

  v133 = a1;
  v128 = type metadata accessor for WeatherFormatPlaceholder(0);
  v137 = *(_QWORD *)(v128 - 8);
  sub_10009D98C();
  __chkstk_darwin(v1);
  sub_100088FDC();
  v132 = v2;
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v130 = v4;
  v131 = type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle(0);
  v138 = *(_QWORD *)(v131 - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_1000986FC();
  v127 = v6;
  __chkstk_darwin(v7);
  v141 = (char *)&v147._object - v8;
  v9 = type metadata accessor for PressureTrend(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000986FC();
  v140 = v11;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v147._object - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v147._object - v16;
  v18 = type metadata accessor for CurrentWeather(0);
  __chkstk_darwin(v18);
  sub_10009E540();
  v146 = sub_1000BA294(&qword_100BCB948);
  v129 = *(_QWORD *)(v146 - 8);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100098728();
  v22 = v21 - v20;
  type metadata accessor for WeatherData(0);
  v23 = sub_1000D9ABC();
  v145 = v22;
  CurrentWeather.pressure.getter(v23);
  sub_1000D0CFC();
  v24 = sub_1000D9ABC();
  CurrentWeather.pressureTrend.getter(v24);
  sub_1000D0CFC();
  v25 = *(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v10 + 16);
  v142 = v17;
  v126 = v25;
  ((void (*)(char *, char *, uint64_t))v25)(v15, v17, v9);
  v134 = v10;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v15, v9);
  v143 = v9;
  if (v26 == enum case for PressureTrend.rising(_:))
  {
    v27 = (void *)sub_1000C42E4();
    v28 = sub_1000C643C(v27);
    sub_1000989C4();
    v29 = 0x676E69736972;
LABEL_7:
    v41 = 0xE600000000000000;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v147._countAndFlagsBits = 0xD00000000000002FLL;
    v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v29, (Swift::String_optional)0, (NSBundle)v28, v42, v147);
    sub_1000B4F60(v43._countAndFlagsBits, (uint64_t)v43._object);
    goto LABEL_8;
  }
  if (v26 != enum case for PressureTrend.falling(_:))
  {
    if (v26 != enum case for PressureTrend.steady(_:))
    {
      (*(void (**)(char *, uint64_t))(v134 + 8))(v15, v9);
      v139 = 0;
      v144 = 0xE000000000000000;
      goto LABEL_8;
    }
    v40 = (void *)sub_1000C42E4();
    v28 = sub_1000C643C(v40);
    sub_1000989C4();
    v29 = 0x796461657473;
    goto LABEL_7;
  }
  v30 = (void *)sub_1000C42E4();
  v31 = sub_1000C643C(v30);
  sub_1000989C4();
  v38 = sub_1000BC298(0x676E696C6C6166, 0xE700000000000000, v32, v33, v34, v35, v36, v37);
  sub_1000B4F60(v38, v39);
LABEL_8:
  v44 = (void *)sub_1000C42E4();
  v45 = sub_1000C643C(v44);
  sub_1000989C4();
  v125 = sub_1000BC298(0x3225202C40243125, 0xEA00000000004024, v46, v47, v48, v49, v50, v51);
  v124 = v52;

  v53 = sub_1000BA294(&qword_100BC3C38);
  v54 = swift_allocObject(v53, 112, 7);
  *(_OWORD *)(v54 + 16) = xmmword_10097DA20;
  v123 = type metadata accessor for Locale(0);
  v55 = v130;
  v56 = sub_1000C6BA0();
  v60 = _s7Weather24LocationCompositionStateOwst_0(v56, v57, v58, v59);
  v61 = static Set<>.full.getter(v60);
  v62 = v141;
  static WeatherFormatStyle<>.weather(_:locale:)(v61, v55);
  swift_bridgeObjectRelease(v61);
  v63 = sub_1000DA380();
  v64 = v127;
  NSUnitPressure.BaseWeatherFormatStyle.accessible.getter(v63);
  v135 = *(void (**)(char *, uint64_t))(v138 + 8);
  v65 = v131;
  v135(v62, v131);
  v122 = enum case for WeatherFormatPlaceholder.none(_:);
  v66 = v137;
  v136 = *(void (**)(uint64_t))(v137 + 104);
  v67 = v132;
  v68 = v128;
  v136(v132);
  v147._object = (void *)type metadata accessor for UnitManager(0);
  v69 = static UnitManager.standard.getter(v147._object);
  v138 = sub_1000AA29C();
  v70 = Measurement.formatted<A>(_:placeholder:unitManager:)(v64, v67, v69, &protocol witness table for UnitManager, v146, v65, v138);
  v72 = v71;
  swift_release(v69);
  v137 = *(_QWORD *)(v66 + 8);
  ((void (*)(uint64_t, uint64_t))v137)(v67, v68);
  v73 = v64;
  v74 = v65;
  v135((char *)v73, v65);
  *(_QWORD *)(v54 + 56) = &type metadata for String;
  v75 = sub_1000B2E24();
  *(_QWORD *)(v54 + 32) = v70;
  *(_QWORD *)(v54 + 40) = v72;
  *(_QWORD *)(v54 + 96) = &type metadata for String;
  *(_QWORD *)(v54 + 104) = v75;
  v76 = v139;
  *(_QWORD *)(v54 + 64) = v75;
  *(_QWORD *)(v54 + 72) = v76;
  v77 = v144;
  *(_QWORD *)(v54 + 80) = v144;
  swift_bridgeObjectRetain(v77);
  v78 = v124;
  v127 = String.init(format:_:)(v125, v124, v54);
  v125 = v79;
  v80 = swift_bridgeObjectRelease(v78);
  v81 = v126(v140, v142, v143, v80);
  v82 = static Set<>.value.getter(v81);
  v83 = sub_1000C6BA0();
  v84 = v123;
  _s7Weather24LocationCompositionStateOwst_0(v83, v85, v86, v123);
  v87 = (uint64_t)v141;
  sub_1000DE1B0();
  swift_bridgeObjectRelease(v82);
  sub_1000DA380();
  v88 = v122;
  v89 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v136)(v67, v122, v68);
  v90 = static UnitManager.standard.getter(v89);
  v126 = (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_1000E7600(v87, v67, v90, (uint64_t)&protocol witness table for UnitManager, v146);
  v124 = v91;
  swift_release(v90);
  v92 = v68;
  ((void (*)(uint64_t, uint64_t))v137)(v67, v68);
  v93 = (void (*)(uint64_t, uint64_t))v135;
  v94 = ((uint64_t (*)(uint64_t, uint64_t))v135)(v87, v74);
  v95 = static Set<>.unit.getter(v94);
  v96 = sub_1000C6BA0();
  _s7Weather24LocationCompositionStateOwst_0(v96, v97, v98, v84);
  sub_1000DE1B0();
  swift_bridgeObjectRelease(v95);
  sub_1000DA380();
  v99 = v88;
  v100 = v92;
  v101 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v136)(v67, v99, v92);
  v102 = static UnitManager.standard.getter(v101);
  v103 = v145;
  v104 = v146;
  v105 = sub_1000E7600(v87, v67, v102, (uint64_t)&protocol witness table for UnitManager, v146);
  v107 = v106;
  swift_release(v102);
  ((void (*)(uint64_t, uint64_t))v137)(v67, v100);
  v93(v87, v74);
  sub_1000AA2DC();
  v109 = v108;
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v103, v104);
  v110 = v133;
  v111 = v134;
  v112 = v143;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 32))(v133, v140, v143);
  v113 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  v114 = (_QWORD *)(v110 + v113[5]);
  v115 = v144;
  *v114 = v139;
  v114[1] = v115;
  v116 = (uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v110 + v113[6]);
  v117 = v124;
  *v116 = v126;
  v116[1] = v117;
  v118 = (uint64_t *)(v110 + v113[7]);
  *v118 = v105;
  v118[1] = v107;
  *(_QWORD *)(v110 + v113[8]) = v109;
  v119 = (uint64_t *)(v110 + v113[9]);
  v120 = v125;
  *v119 = v127;
  v119[1] = v120;
  return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v142, v112);
}

uint64_t sub_1000AA25C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000BA294(&qword_100BC3340);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000AA29C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BCB9D0;
  if (!qword_100BCB9D0)
  {
    v1 = type metadata accessor for NSUnitPressure.BaseWeatherFormatStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUnitPressure.BaseWeatherFormatStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100BCB9D0);
  }
  return result;
}

void sub_1000AA2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;

  v0 = sub_1000BA294(&qword_100BCB948);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v16 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v16 - v8;
  type metadata accessor for PressureFormatter(0);
  v10 = static PressureFormatter.minPressure.getter();
  static PressureFormatter.maxPressure.getter(v10);
  v11 = (void *)Measurement.unit.getter(v0);
  Measurement<>.converted(to:)(v11, v0);

  v12 = Measurement.value.getter(v0);
  v13 = Measurement.value.getter(v0);
  v14 = Measurement.value.getter(v0);
  if (v13 > v14)
  {
    __break(1u);
  }
  else
  {
    Double.clamped(to:)(v13, v14, v12);
    Measurement.value.getter(v0);
    Measurement.value.getter(v0);
    Measurement.value.getter(v0);
    v15 = *(void (**)(char *, uint64_t))(v1 + 8);
    v15(v4, v0);
    v15(v7, v0);
    v15(v9, v0);
  }
}

void sub_1000AA4A4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = a1;
  v61 = a2;
  type metadata accessor for TimeZone(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v59 = v5;
  sub_1000BA294(&qword_100BCB9F8);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v56 = v7;
  sub_1000BA294(&qword_100BCB130);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  v12 = type metadata accessor for UVIndexComponentDescriptionContext(0);
  v57 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  __chkstk_darwin(v12);
  v13 = sub_1000C4668();
  v14 = type metadata accessor for UVIndex(v13);
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  v18 = type metadata accessor for CurrentWeather(0);
  v19 = *(_QWORD *)(v18 - 8);
  v50 = v18;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v46 - v23;
  v25 = sub_1000B4D00();
  v52 = *(_QWORD *)(v25 - 8);
  v53 = v25;
  v26 = __chkstk_darwin(v25);
  v51 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v46 - v28;
  v48 = *(_QWORD *)(v2 + 16);
  type metadata accessor for WeatherData(0);
  sub_1000DDE98();
  sub_1000DD2BC();
  v49 = *(void (**)(char *, uint64_t))(v19 + 8);
  v49(v24, v18);
  v30 = sub_1000DDE98();
  v31 = WeatherDataModel.dailyForecast.getter(v30);
  v32 = v56;
  v33 = WeatherDataModel.hourlyForecast.getter(v31);
  v34 = v59;
  Location.timeZone.getter(v33);
  UVIndexComponentDescriptionContext.init(currentWeather:dailyForecast:hourlyForecast:timeZone:)(v22, v11, v32, v34);
  v35 = v29;
  v47 = v29;
  StringBuilder.makeWeatherDescription(for:data:)(v17, v3);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v3, v58);
  sub_1000CD178();
  v37 = v51;
  v36 = v52;
  v38 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v35, v53);
  sub_1000DDE98();
  sub_1000DD2BC();
  v39 = ((uint64_t (*)(char *, uint64_t))v49)(v24, v50);
  v40 = UVIndex.category.getter(v39);
  sub_1000CD178();
  v41 = UVIndex.ExposureCategory.localizedString.getter(v40);
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v47, v38);
  v44 = v61;
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v61, v37, v38);
  v45 = (uint64_t *)(v44 + *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20));
  *v45 = v41;
  v45[1] = v43;
  sub_100098640();
}

void sub_1000AA788(char *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD);
  void (*v54)(_QWORD);
  double v55;
  void (*v56)(_QWORD, void (*)(_QWORD));
  uint64_t v57;
  uint64_t v58;
  _UNKNOWN **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _UNKNOWN **v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  void (*v100)(_QWORD, _QWORD);
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(_QWORD);
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(_QWORD);
  uint64_t (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  __n128 v178;
  void (*v179)(uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(uint64_t, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  id v253;
  Swift::String v254;
  Swift::String v255;
  Swift::String v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void (*v281)(uint64_t, uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  id v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __n128 v299;
  void (*v300)(uint64_t, uint64_t, __n128);
  uint64_t v301;
  uint64_t v302;
  void (*v303)(char *, uint64_t);
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  uint64_t v317;
  _QWORD v318[2];
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t countAndFlagsBits;
  void (*v339)(_QWORD, void (*)(_QWORD));
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  id object;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  uint64_t v356;
  void (*v357)(uint64_t, uint64_t);
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  void (*v362)(_QWORD);
  __int128 v363;
  void (*v364)(_QWORD, _QWORD);
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void (*v368)(_QWORD);
  uint64_t v369;
  uint64_t v370;
  _BYTE v371[8];
  Swift::String v372;
  Swift::String v373;

  v355 = a1;
  v337 = a2;
  *(_QWORD *)&v363 = *v2;
  v3 = type metadata accessor for WeatherFormatPlaceholder(0);
  v4 = *(_QWORD **)(v3 - 8);
  v360 = v3;
  v361 = v4;
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  sub_10009511C(v6);
  sub_1000BA294(&qword_100BC3340);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v367 = v8;
  v365 = type metadata accessor for NSUnitSpeed.WeatherFormatUsage(0);
  v359 = *(_QWORD *)(v365 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  sub_10009511C(v10);
  v366 = type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle(0);
  v353 = *(_QWORD *)(v366 - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_1000986FC();
  v343 = v12;
  __chkstk_darwin(v13);
  sub_10009511C((uint64_t)v318 - v14);
  sub_1000BA294(&qword_100BF4838);
  sub_10009D98C();
  __chkstk_darwin(v15);
  sub_100088FDC();
  v362 = v16;
  v369 = type metadata accessor for Locale(0);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_100088FDC();
  v358 = v18;
  sub_1000BA294(&qword_100BF4840);
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  sub_10009511C(v20);
  sub_1000BA294(&qword_100BF4848);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  sub_10009511C(v22);
  v357 = (void (*)(uint64_t, uint64_t))sub_1000BA294(&qword_100BF4850);
  v350 = *((_QWORD *)v357 - 1);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  sub_10009511C(v24);
  v368 = (void (*)(_QWORD))sub_1000BA294(&qword_100BCB9B0);
  v352 = *((_QWORD *)v368 - 1);
  sub_10009D98C();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v364 = v26;
  sub_1000BA294(&qword_100BCE728);
  sub_10009D98C();
  __chkstk_darwin(v27);
  v29 = (char *)v318 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v370 = sub_1000BA294(&qword_100BCB938);
  v342 = *(_QWORD *)(v370 - 8);
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_1000986FC();
  v356 = v31;
  __chkstk_darwin(v32);
  v34 = (char *)v318 - v33;
  v35 = type metadata accessor for CurrentWeather(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v37 = type metadata accessor for Wind(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v41 = (char *)v318 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v43 = (char *)v318 - v42;
  v44 = type metadata accessor for WeatherData(0);
  v45 = WeatherDataModel.currentWeather.getter(v44);
  CurrentWeather.wind.getter(v45);
  v46 = sub_1000D0DB0(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
  v355 = v34;
  v47 = Wind.speed.getter(v46);
  Wind.gust.getter(v47);
  v48 = v370;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v41, v43, v37);
  v49 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v48);
  v336 = v37;
  if ((_DWORD)v49 == 1)
  {
    Wind.speed.getter(v49);
    sub_100099618();
    v50 = sub_100021A68((uint64_t)v29, &qword_100BCE728);
  }
  else
  {
    sub_100099618();
    v50 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v342 + 32))(v356, v29, v48);
  }
  v51 = Wind.compassDirection.getter(v50);
  v348 = Wind.CompassDirection.abbreviation.getter(v51);
  v347 = v52;
  v53 = v364;
  Wind.direction.getter();
  v54 = v368;
  v55 = Measurement.value.getter(v368);
  sub_1000988C4();
  v339 = v56;
  v56(v53, v54);
  if (qword_100BC26B0 != -1)
    swift_once(&qword_100BC26B0, sub_10015A5E8);
  v58 = qword_100CAF518;
  sub_1000ABD74(&qword_100BF4858, v57, (uint64_t (*)(uint64_t))type metadata accessor for WindComponentViewModelFactory, (uint64_t)&unk_1009B4F90);
  sub_1000D9FE0(v58);
  v59 = &_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyXl_Ts5_ptr;
  if ((v371[7] & 1) != 0)
  {
    v333 = 0xD00000000000004ALL;
    sub_1000C0AA4();
    v332 = v60;
  }
  else
  {
    v61 = type metadata accessor for UnitManager(0);
    v62 = static UnitManager.standard.getter(v61);
    v63 = (void *)UnitManager.windSpeed.getter();
    v64 = swift_release(v62);
    v65 = NSUnitSpeed.isBeaufort.getter(v64);

    v59 = &_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyXl_Ts5_ptr;
    v66 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_1000989C4();
    if ((v65 & 1) != 0)
    {
      v73 = 0x726F4620646E6957;
      v74 = 0xEA00000000006563;
    }
    else
    {
      v73 = 1684957527;
      v74 = 0xE400000000000000;
    }
    v333 = sub_1000BBFBC(v73, v74, v67, v68, v69, v70, v71, v72);
    sub_1000D0220(v75, (uint64_t)&v363 + 8);
  }
  sub_1000D9FE0(qword_100CAF518);
  if ((v371[6] & 1) != 0)
  {
    v331 = 0xD00000000000004BLL;
    sub_1000C0AA4();
    v330 = v76;
  }
  else
  {
    v77 = objc_msgSend((id)objc_opt_self(v59[202]), "mainBundle");
    v318[0] = 0x8000000100A0CE00;
    v331 = sub_1000BBFBC(0x7374737547, 0xE500000000000000, v78, v79, v80, v81, v82, 0xD000000000000038);
    sub_1000D0220(v83, (uint64_t)&v362);
  }
  sub_1000D9FE0(qword_100CAF518);
  v335 = v38;
  if ((v371[5] & 1) != 0)
  {
    v329 = 0xD00000000000004FLL;
    sub_1000C0AA4();
    v328 = v84;
    v85 = &_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyXl_Ts5_ptr;
  }
  else
  {
    v85 = &_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyXl_Ts5_ptr;
    v86 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    sub_1000989C4();
    v329 = sub_1000BBFBC(0x6F69746365726944, v87, v88, v89, v90, v91, v92, v93);
    sub_1000D0220(v94, (uint64_t)&v360);
  }
  object = (id)objc_opt_self(v85[202]);
  v95 = objc_msgSend(object, "mainBundle");
  sub_1000989C4();
  v96._object = (void *)0x8000000100A0CE90;
  v96._countAndFlagsBits = 0xD000000000000022;
  v97._countAndFlagsBits = 0x4025204025;
  v97._object = (void *)0xE500000000000000;
  v98 = NSLocalizedString(_:tableName:bundle:value:comment:)(v96, (Swift::String_optional)0, (NSBundle)v95, v97, v372);
  countAndFlagsBits = v98._countAndFlagsBits;

  v352 = sub_1000BA294(&qword_100BC3C38);
  v99 = sub_100098740(v352, 112);
  v363 = xmmword_10097DA20;
  *(_OWORD *)(v99 + 16) = xmmword_10097DA20;
  v100 = v364;
  v334 = v43;
  Wind.direction.getter();
  v101 = sub_1005D9F30();
  v102 = v340;
  static Measurement<>.FormatStyle.UnitWidth.narrow.getter();
  v103 = sub_1000BA294(&qword_100BCE798);
  v104 = v354;
  v105 = _s7Weather24LocationCompositionStateOwst_0(v354, 1, 1, v103);
  v106 = v358;
  static Locale.autoupdatingCurrent.getter(v105);
  v107 = v362;
  static MeasurementFormatUnitUsage.general.getter(v101);
  v108 = v341;
  Measurement<>.FormatStyle.init(width:locale:usage:numberFormatStyle:)(v102, v106, v107, v104, v101);
  *(_QWORD *)(v99 + 56) = &type metadata for String;
  v109 = sub_1000B2E24();
  *(_QWORD *)(v99 + 64) = v109;
  v110 = v109;
  v354 = v109;
  v111 = sub_1005D9F6C();
  v112 = v368;
  Measurement<>.formatted<A>(_:)(v108, v368, v357, v111);
  sub_1000988C4();
  sub_1000D0DB0(v113);
  v339(v100, v112);
  *(_QWORD *)(v99 + 96) = &type metadata for String;
  *(_QWORD *)(v99 + 104) = v110;
  v114 = v347;
  *(_QWORD *)(v99 + 72) = v348;
  *(_QWORD *)(v99 + 80) = v114;
  swift_bridgeObjectRetain(v114);
  v339 = (void (*)(_QWORD, void (*)(_QWORD)))static String.localizedStringWithFormat(_:_:)(countAndFlagsBits, v98._object, v99);
  countAndFlagsBits = v115;
  swift_bridgeObjectRelease(v98._object);
  swift_bridgeObjectRelease(v99);
  v117 = sub_1000D137C(v116, "mainBundle");
  v118 = sub_100098EF4();
  v341 = sub_1000BBFBC(v118, 0xEC00000040252040, v119, v120, v121, v122, v123, v124);
  sub_1000D0220(v125, (uint64_t)&v370);
  v126 = sub_100098740(v352, 112);
  *(_OWORD *)(v126 + 16) = v363;
  LODWORD(v350) = enum case for NSUnitSpeed.WeatherFormatUsage.windGust(_:);
  v127 = v359;
  v362 = *(void (**)(_QWORD))(v359 + 104);
  v128 = v345;
  v129 = v365;
  v362(v345);
  v130 = v367;
  v131 = sub_1000DBBB0(v367);
  v132 = v344;
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v131, v128, v130);
  swift_bridgeObjectRelease(v131);
  sub_100021A68(v130, &qword_100BC3340);
  v364 = *(void (**)(_QWORD, _QWORD))(v127 + 8);
  v364(v128, v129);
  LODWORD(v359) = enum case for WeatherFormatPlaceholder.none(_:);
  v134 = v360;
  v133 = v361;
  v368 = (void (*)(_QWORD))v361[13];
  v135 = v349;
  v368(v349);
  v358 = type metadata accessor for UnitManager(0);
  v136 = static UnitManager.standard.getter(v358);
  *(_QWORD *)&v363 = sub_1000ABD74(&qword_100BCE748, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitSpeed.BaseWeatherFormatStyle);
  sub_1000C671C();
  v144 = sub_1000DA670(v137, v138, v139, v140, v141, v142, v143);
  v146 = v145;
  swift_release(v136);
  v357 = (void (*)(uint64_t, uint64_t))v133[1];
  v357(v135, v134);
  sub_1000988C4();
  v361 = v147;
  ((void (*)(uint64_t, void (*)(_QWORD)))v147)(v132, v107);
  v148 = v354;
  *(_QWORD *)(v126 + 56) = &type metadata for String;
  *(_QWORD *)(v126 + 64) = v148;
  *(_QWORD *)(v126 + 32) = v144;
  *(_QWORD *)(v126 + 40) = v146;
  *(_QWORD *)(v126 + 96) = &type metadata for String;
  *(_QWORD *)(v126 + 104) = v148;
  v149 = v347;
  *(_QWORD *)(v126 + 72) = v348;
  *(_QWORD *)(v126 + 80) = v149;
  swift_bridgeObjectRetain(v149);
  v327 = sub_1000C0F6C(v341, (uint64_t)&v370);
  v326 = v150;
  sub_1000986E8();
  swift_bridgeObjectRelease(v126);
  v152 = sub_1000D137C(v151, "mainBundle");
  v153 = sub_100098EF4();
  v353 = sub_1000BBFBC(v153, 0xE900000000000040, v154, v155, v156, v157, v158, v159);
  sub_1000D0220(v160, (uint64_t)v371);
  v161 = sub_100098740(v352, 72);
  *(_OWORD *)(v161 + 16) = xmmword_10097CA50;
  sub_1000DF7A0();
  v162 = v367;
  v163 = sub_1000DBBB0(v367);
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v163, v128, v162);
  swift_bridgeObjectRelease(v163);
  sub_100021A68(v162, &qword_100BC3340);
  sub_1000E7248();
  sub_1000C4C38();
  v164 = sub_1000D913C();
  sub_1000DAFD4();
  v172 = sub_1000DA670(v165, v166, v167, v168, v169, v170, v171);
  v174 = v173;
  swift_release(v164);
  sub_1000C1778();
  sub_1000CD8A8();
  sub_1000E7808();
  *(_QWORD *)(v161 + 56) = v176;
  *(_QWORD *)(v161 + 64) = v175;
  *(_QWORD *)(v161 + 32) = v172;
  *(_QWORD *)(v161 + 40) = v174;
  v340 = sub_1000C0F6C(v353, (uint64_t)v371);
  v373._object = v177;
  sub_1000986E8();
  v178 = swift_bridgeObjectRelease(v161);
  LODWORD(v353) = enum case for NSUnitSpeed.WeatherFormatUsage.windSpeed(_:);
  v179 = v362;
  ((void (*)(uint64_t, __n128))v362)(v128, v178);
  v180 = v367;
  v181 = v369;
  v182 = _s7Weather24LocationCompositionStateOwst_0(v367, 1, 1, v369);
  v183 = static Set<>.full.getter(v182);
  sub_1000D1924(v183);
  sub_1000986E8();
  sub_100021A68(v180, &qword_100BC3340);
  sub_1000E7248();
  v184 = v349;
  v185 = v360;
  sub_1000C4C38();
  sub_1000D913C();
  v186 = sub_1000DD0D0();
  v187 = v370;
  v325 = sub_1000C56C4(v186, v188, v189, (uint64_t)&protocol witness table for UnitManager, v370, v366);
  sub_100094FDC(v190, (uint64_t)v371);
  v191 = v185;
  v192 = v357;
  v357(v184, v191);
  v193 = sub_1000CD8A8();
  static Set<>.value.getter(v193);
  v194 = sub_1000C1F34();
  v195 = v365;
  v179(v194);
  v196 = v367;
  _s7Weather24LocationCompositionStateOwst_0(v367, 1, 1, v181);
  v197 = v132;
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v183, v128, v196);
  sub_1000986E8();
  sub_100021A68(v196, &qword_100BC3340);
  sub_1000E7248();
  v198 = v360;
  v199 = sub_1000C4C38();
  static UnitManager.standard.getter(v199);
  v200 = sub_100099BC0();
  v201 = v187;
  v202 = v366;
  v324 = sub_1000C56C4(v200, v203, v204, (uint64_t)&protocol witness table for UnitManager, v201, v366);
  sub_100094FDC(v205, (uint64_t)&v354);
  v192(v184, v198);
  v206 = (void (*)(uint64_t, uint64_t))v361;
  v207 = ((uint64_t (*)(uint64_t, uint64_t))v361)(v132, v202);
  static Set<>.unit.getter(v207);
  sub_1000C1F34();
  v208 = v195;
  sub_1000DF7A0();
  v209 = v367;
  _s7Weather24LocationCompositionStateOwst_0(v367, 1, 1, v369);
  sub_1000D1924(v183);
  sub_1000986E8();
  sub_100021A68(v209, &qword_100BC3340);
  v210 = v364;
  v364(v128, v208);
  v211 = sub_1000C4C38();
  static UnitManager.standard.getter(v211);
  v212 = sub_100099BC0();
  v213 = v366;
  v322 = sub_1000C56C4(v212, v214, v215, (uint64_t)&protocol witness table for UnitManager, v370, v366);
  sub_100094FDC(v216, (uint64_t)&v352);
  sub_1000C1778();
  v206(v197, v213);
  v217 = v365;
  sub_1000DF7A0();
  v218 = v367;
  v219 = sub_1000DBBB0(v367);
  v220 = v197;
  static WeatherFormatStyle<>.weather(_:usage:locale:)(v219, v128, v218);
  sub_1000986E8();
  sub_100021A68(v218, &qword_100BC3340);
  v210(v128, v217);
  v221 = v360;
  v222 = sub_1000C4C38();
  v223 = v358;
  static UnitManager.standard.getter(v222);
  v224 = sub_1000DD0D0();
  v225 = v363;
  v372._object = (void *)sub_1000DA670(v224, v226, v227, (uint64_t)&protocol witness table for UnitManager, v370, v366, v363);
  sub_100094FDC(v228, (uint64_t)&v350);
  v229 = v221;
  sub_1000C1778();
  v230 = sub_1000CD8A8();
  static Set<>.value.getter(v230);
  sub_1000DF7A0();
  v231 = v367;
  sub_1000B4BB0();
  sub_1000986E8();
  sub_100021A68(v231, &qword_100BC3340);
  sub_1000E7248();
  v232 = sub_1000C4C38();
  static UnitManager.standard.getter(v232);
  sub_1000DD0D0();
  sub_1000C671C();
  v319 = sub_1000DA670(v233, v234, v235, v236, v237, v238, v225);
  sub_100094FDC(v239, (uint64_t)&v348);
  v240 = v357;
  v357(v184, v229);
  v241 = sub_1000CD8A8();
  static Set<>.unit.getter(v241);
  sub_1000DF7A0();
  sub_1000B4BB0();
  sub_1000986E8();
  sub_100021A68(v231, &qword_100BC3340);
  sub_1000E7248();
  sub_1000C4C38();
  sub_1000D913C();
  sub_1000DD0D0();
  sub_1000DAFD4();
  v350 = Measurement.formatted<A>(_:placeholder:unitManager:)(v242, v243, v244, v245, v246, v247, v248);
  v250 = v249;
  sub_10009925C();
  v240(v184, v229);
  v251 = (void (*)(uint64_t, uint64_t))v361;
  v252 = ((uint64_t (*)(uint64_t, uint64_t))v361)(v220, v223);
  v253 = sub_1000D137C(v252, "mainBundle");
  sub_1000989C4();
  v254._object = (void *)0x8000000100A0D0B0;
  v254._countAndFlagsBits = 0x1000000000000030;
  v255._countAndFlagsBits = 0;
  v255._object = (void *)0xE000000000000000;
  v256 = NSLocalizedString(_:tableName:bundle:value:comment:)(v254, (Swift::String_optional)0, (NSBundle)v253, v255, v373);

  v257 = sub_100098740(v352, 192);
  *(_OWORD *)(v257 + 16) = xmmword_1009891D0;
  if ((~*(_QWORD *)&v55 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v55 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v55 < 9.22337204e18)
  {
    v258 = (_QWORD *)v257;
    *(_QWORD *)(v257 + 56) = &type metadata for Int;
    *(_QWORD *)(v257 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v257 + 32) = (uint64_t)v55;
    sub_1000ABDB4(v55);
    sub_1000E7808();
    v258[12] = v260;
    v258[13] = v259;
    v258[9] = v261;
    v258[10] = v262;
    static Set<>.full.getter(v261);
    v352 = v250;
    sub_1000DF7A0();
    v263 = v367;
    sub_10009D6E8();
    object = v256._object;
    v264 = v344;
    sub_1000CFE50();
    sub_1000986E8();
    sub_100021A68(v263, &qword_100BC3340);
    v265 = sub_1000E7248();
    v346 = v256._countAndFlagsBits;
    v266 = v343;
    NSUnitSpeed.BaseWeatherFormatStyle.accessible.getter(v265);
    v251(v264, v366);
    sub_1000C4C38();
    sub_1000D913C();
    sub_1000C671C();
    v273 = sub_1000C56C4(v267, v268, v269, v270, v271, v272);
    v275 = v274;
    sub_10009925C();
    sub_1000C1778();
    v276 = v343;
    sub_1000CD8A8();
    sub_1000E7808();
    v258[17] = v278;
    v258[18] = v277;
    v258[14] = v273;
    v258[15] = v275;
    static Set<>.full.getter(v279);
    sub_1000DF7A0();
    sub_10009D6E8();
    sub_1000CFE50();
    sub_1000986E8();
    sub_100021A68(v263, &qword_100BC3340);
    v280 = sub_1000E7248();
    NSUnitSpeed.BaseWeatherFormatStyle.accessible.getter(v280);
    v281 = (void (*)(uint64_t, uint64_t))v361;
    ((void (*)(uint64_t, uint64_t))v361)(v264, v266);
    sub_1000C4C38();
    sub_1000D913C();
    sub_1000DAFD4();
    v282 = v356;
    v290 = Measurement.formatted<A>(_:placeholder:unitManager:)(v283, v284, v285, v286, v287, v288, v289);
    v292 = v291;
    sub_10009925C();
    sub_1000C1778();
    v281(v276, v266);
    sub_1000E7808();
    v258[22] = v294;
    v258[23] = v293;
    v258[19] = v290;
    v258[20] = v292;
    v295 = object;
    v296 = static String.localizedStringWithFormat(_:_:)(v346, object, v258);
    v298 = v297;
    swift_bridgeObjectRelease(v295);
    v299 = swift_bridgeObjectRelease(v258);
    v300 = *(void (**)(uint64_t, uint64_t, __n128))(v342 + 8);
    v301 = v282;
    v302 = v370;
    v300(v301, v370, v299);
    ((void (*)(char *, uint64_t))v300)(v355, v302);
    sub_1000988C4();
    v303(v334, v336);
    v304 = v337;
    v305 = v341;
    *v337 = v325;
    v304[1] = v305;
    v306 = v323;
    v304[2] = v324;
    v304[3] = v306;
    v307 = v321;
    v304[4] = v322;
    v304[5] = v307;
    v308 = v332;
    v304[6] = v333;
    v304[7] = v308;
    v309 = v320;
    v304[8] = (uint64_t)v372._object;
    v304[9] = v309;
    v310 = v318[1];
    v304[10] = v319;
    v304[11] = v310;
    v311 = v352;
    v304[12] = v350;
    v304[13] = v311;
    v312 = v330;
    v304[14] = v331;
    v304[15] = v312;
    v313 = countAndFlagsBits;
    v304[16] = (uint64_t)v339;
    v304[17] = v313;
    v314 = v328;
    v304[18] = v329;
    v304[19] = v314;
    v315 = v326;
    v304[20] = v327;
    v304[21] = v315;
    v316 = v373._object;
    v304[22] = v340;
    v304[23] = (uint64_t)v316;
    v317 = v347;
    v304[24] = v348;
    v304[25] = v317;
    *((double *)v304 + 26) = v55 + 180.0;
    v304[27] = v296;
    v304[28] = v298;
    sub_10009990C();
    return;
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_1000ABD74(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ABDB4(long double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  objc_class *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSBundle v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t countAndFlagsBits;
  unsigned int v18;
  unsigned int v19;
  const char *v20;
  unsigned int v21;
  const char *v22;
  id v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = sub_1000BA294(&qword_100BCB9B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0.0)
    a1 = remainder(a1, 360.0) + 360.0;
  v6 = floor(fmod(floor(a1 / 11.25) + 1.0, 32.0) * 0.5);
  if (v6 == 0.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000036;
    v27 = 0x8000000100A0D7D0;
    v9 = 1953656654;
LABEL_5:
    v10 = v9 & 0xFFFF0000FFFFFFFFLL | 0x6800000000;
    v11 = 0xE500000000000000;
LABEL_9:
    v13.super.isa = v7;
    v14 = 0;
    v15 = 0xE000000000000000;
LABEL_10:
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v10, (Swift::String_optional)0, v13, *(Swift::String *)&v14, *(Swift::String *)&v8)._countAndFlagsBits;

    return countAndFlagsBits;
  }
  if (v6 == 1.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000043;
    v27 = 0x8000000100A0D780;
    v10 = 0x6F4E206874726F4ELL;
    v12 = 0x736165687472;
LABEL_8:
    v11 = v12 & 0xFFFFFFFFFFFFLL | 0xEF74000000000000;
    goto LABEL_9;
  }
  if (v6 == 2.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v27 = 0x8000000100A0D740;
    v18 = 1953656654;
LABEL_13:
    v10 = v18 | 0x7361656800000000;
LABEL_14:
    v11 = 0xE900000000000074;
    v13.super.isa = v7;
    v14 = 0;
    v15 = 0xE000000000000000;
    v8 = 0xD00000000000003ALL;
    goto LABEL_10;
  }
  if (v6 == 3.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000042;
    v27 = 0x8000000100A0D6F0;
    v10 = 0x726F4E2074736145;
LABEL_17:
    v19 = 1634035828;
LABEL_18:
    v11 = v19 | 0xEE00747300000000;
    goto LABEL_9;
  }
  if (v6 == 4.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000035;
    v27 = 0x8000000100A0D6B0;
    v10 = 1953718597;
LABEL_21:
    v11 = 0xE400000000000000;
    goto LABEL_9;
  }
  if (v6 == 5.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000042;
    v27 = 0x8000000100A0D660;
    v10 = 0x756F532074736145;
    goto LABEL_17;
  }
  if (v6 == 6.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v27 = 0x8000000100A0D620;
    v18 = 1953853267;
    goto LABEL_13;
  }
  if (v6 == 7.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000043;
    v11 = 0xEF74736165687475;
    v20 = "Accessibility description for south by southeast cardinal direction";
LABEL_28:
    v27 = (unint64_t)(v20 - 32) | 0x8000000000000000;
    v10 = 0x6F53206874756F53;
    goto LABEL_9;
  }
  if (v6 == 8.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000036;
    v27 = 0x8000000100A0D590;
    v9 = 1953853267;
    goto LABEL_5;
  }
  if (v6 == 9.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000043;
    v11 = 0xEF74736577687475;
    v20 = "Accessibility description for south by southwest cardinal direction";
    goto LABEL_28;
  }
  if (v6 == 10.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v27 = 0x8000000100A0D500;
    v21 = 1953853267;
LABEL_35:
    v10 = v21 | 0x7365776800000000;
    goto LABEL_14;
  }
  if (v6 == 11.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v10 = 0x756F532074736557;
    v8 = 0xD000000000000042;
    v22 = "Accessibility description for west by southwest cardinal direction";
LABEL_38:
    v27 = (unint64_t)(v22 - 32) | 0x8000000000000000;
    v19 = 1702324340;
    goto LABEL_18;
  }
  if (v6 == 12.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v10 = 1953719639;
    v8 = 0xD000000000000035;
    v27 = 0x8000000100A0D470;
    goto LABEL_21;
  }
  if (v6 == 13.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v10 = 0x726F4E2074736557;
    v8 = 0xD000000000000042;
    v22 = "Accessibility description for west by northwest cardinal direction";
    goto LABEL_38;
  }
  if (v6 == 14.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v27 = 0x8000000100A0D3E0;
    v21 = 1953656654;
    goto LABEL_35;
  }
  if (v6 == 15.0)
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD000000000000043;
    v27 = 0x8000000100A0D390;
    v10 = 0x6F4E206874726F4ELL;
    v12 = 0x736577687472;
    goto LABEL_8;
  }
  v23 = objc_msgSend(objc_allocWithZone((Class)NSMeasurementFormatter), "init");
  objc_msgSend(v23, "setUnitStyle:", 3);
  objc_msgSend(v23, "setUnitOptions:", 1);
  v24 = objc_msgSend((id)objc_opt_self(NSUnitAngle), "degrees");
  v25 = sub_1005D9F30();
  Measurement.init(value:unit:)(v24, v25);
  v26 = NSMeasurementFormatter.string<A>(from:)(v5, v25);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v26;
}

void sub_1000AC5C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_QWORD);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t *v182;
  void (*v183)(_QWORD, _QWORD);
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(_QWORD);
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v197 = (char *)a1;
  v182 = a3;
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v163 = v7;
  v8 = sub_10009876C();
  v169 = type metadata accessor for Locale.Language(v8);
  v168 = *(_QWORD *)(v169 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v167 = v10;
  v11 = sub_10009876C();
  v185 = type metadata accessor for Locale(v11);
  v166 = *(_QWORD *)(v185 - 8);
  sub_10009D98C();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v165 = v13;
  v14 = sub_10009876C();
  v199 = type metadata accessor for WeatherFormatPlaceholder(v14);
  v189 = *(_QWORD *)(v199 - 8);
  sub_10009D98C();
  __chkstk_darwin(v15);
  v16 = sub_1000992A8();
  v196 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v16);
  v191 = *(_QWORD *)(v196 - 8);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000986FC();
  v179 = v18;
  sub_10009D2A4();
  __chkstk_darwin(v19);
  sub_100079F7C();
  v187 = v20;
  v198 = sub_1000BA294(&qword_100BC4E68);
  v164 = *(uint64_t (**)(uint64_t, uint64_t))(v198 - 8);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v195 = v22;
  v190 = sub_1000DB3BC();
  v194 = *(void (**)(_QWORD))(v190 - 8);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_10009E540();
  v193 = sub_1000BA294(&qword_100BCB130);
  v24 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  sub_100098728();
  v27 = v26 - v25;
  sub_1000BA294(&qword_100BCB138);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_1000986FC();
  v175 = v29;
  sub_10009D2A4();
  __chkstk_darwin(v30);
  sub_1000860D0();
  v170 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  v34 = (char *)&v162 - v33;
  v35 = type metadata accessor for TimeZone(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100098728();
  v39 = v38 - v37;
  v178 = type metadata accessor for Calendar(0);
  v177 = *(_QWORD *)(v178 - 8);
  sub_10009D98C();
  __chkstk_darwin(v40);
  sub_100098728();
  v43 = v42 - v41;
  v181 = a2;
  Location.timeZone.getter(v44);
  static Calendar.currentCalendar(with:)(v39);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v35);
  v45 = type metadata accessor for WeatherData(0);
  v46 = (uint64_t)&v197[*(int *)(v45 + 24)];
  WeatherDataModel.dailyForecast.getter(v45);
  v176 = v43;
  v200 = v43;
  v47 = v187;
  v197 = v34;
  sub_1000D8C28();
  v48 = v198;
  v49 = v195;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v27, v193);
  v184 = v46;
  v50 = sub_1000D0B8C();
  v173 = CurrentWeather.conditionDescription.getter(v50);
  v174 = v51;
  v52 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v194 + 1);
  v53 = v199;
  v54 = v190;
  v52(v4, v190);
  v183 = v52;
  v55 = sub_1000D0B8C();
  CurrentWeather.apparentTemperature.getter(v55);
  v56 = ((uint64_t (*)(uint64_t, uint64_t))v52)(v4, v54);
  static WeatherFormatStyle<>.weather.getter(v56);
  v57 = v189;
  v58 = *(void (**)(_QWORD))(v189 + 104);
  v188 = enum case for WeatherFormatPlaceholder.none(_:);
  v194 = v58;
  v58(v3);
  v193 = type metadata accessor for UnitManager(0);
  v59 = static UnitManager.standard.getter(v193);
  sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
  v60 = v3;
  v61 = v3;
  v62 = v196;
  v192 = v63;
  v172 = Measurement.formatted<A>(_:placeholder:unitManager:)(v47, v60, v59, &protocol witness table for UnitManager, v48, v196, v63);
  v171 = v64;
  swift_release(v59);
  v65 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v189 = v61;
  v66 = v53;
  v67 = v65;
  v65(v61, v66);
  v68 = v62;
  v69 = v4;
  v191 = *(_QWORD *)(v191 + 8);
  ((void (*)(uint64_t, uint64_t))v191)(v47, v68);
  sub_1000988C4();
  v164 = v70;
  v71 = v70(v49, v48);
  v72 = v165;
  v73 = static Locale.current.getter(v71);
  v74 = v167;
  Locale.language.getter(v73);
  sub_1000988C4();
  v75 = v72;
  v76 = v185;
  v78 = v77(v75);
  LOBYTE(v59) = Locale.Language.prefersFullTemperatureScale.getter(v78);
  sub_1000988C4();
  v80 = v79(v74, v169);
  v81 = WeatherDataModel.currentWeather.getter(v80);
  CurrentWeather.temperature.getter(v81);
  v82 = sub_1000C1118(v4);
  v186 = v67;
  if ((v59 & 1) != 0)
  {
    static Set<>.value.getter(v82);
    v83 = v163;
    _s7Weather24LocationCompositionStateOwst_0(v163, 1, 1, v76);
    sub_1000C6FA4();
    sub_1000986C4();
    sub_100021A14(v83, &qword_100BC3340);
    v84 = v189;
    sub_1000DA7F8();
    v85 = sub_100099088();
    v86 = v195;
    v87 = v196;
    v88 = v164;
    v89 = Measurement.formatted<A>(_:placeholder:unitManager:)(v47, v84, v85, &protocol witness table for UnitManager, v198, v196, v192);
    sub_1000D994C(v89, v90);
    v91 = v199;
    v67(v84, v199);
    ((void (*)(uint64_t, uint64_t))v191)(v47, v87);
    v92 = v198;
    v93 = v88(v86, v198);
    v94 = WeatherDataModel.currentWeather.getter(v93);
    CurrentWeather.temperature.getter(v94);
    v95 = sub_1000C1118(v69);
    static Set<>.unit.getter(v95);
    _s7Weather24LocationCompositionStateOwst_0(v83, 1, 1, v185);
    sub_1000C6FA4();
    sub_1000986C4();
    sub_100021A14(v83, &qword_100BC3340);
    v96 = v91;
    sub_1000DA7F8();
    v97 = sub_100099088();
    v190 = sub_1000DB15C(v47, v84, v97, (uint64_t)&protocol witness table for UnitManager, v92, v87);
    v185 = v98;
    swift_release(v97);
    v186(v84, v96);
    ((void (*)(uint64_t, uint64_t))v191)(v47, v87);
    v99 = v88;
    v88(v86, v92);
  }
  else
  {
    static WeatherFormatStyle<>.weather.getter(v82);
    v101 = v189;
    v102 = v199;
    sub_1000DA7F8();
    v103 = sub_100099088();
    v104 = v198;
    v105 = v195;
    v106 = v196;
    v107 = Measurement.formatted<A>(_:placeholder:unitManager:)(v47, v101, v103, &protocol witness table for UnitManager, v198, v196, v192);
    sub_1000D994C(v107, v108);
    v67(v101, v102);
    ((void (*)(uint64_t, uint64_t))v191)(v47, v106);
    v109 = v104;
    v99 = v164;
    v164(v105, v109);
    v190 = 0;
    v185 = 0;
  }
  v110 = v170;
  sub_100099C0C((uint64_t)v197, v100, &qword_100BCB138);
  v111 = type metadata accessor for DayWeather(0);
  v112 = sub_100088FC8(v110, 1, v111);
  if (v113)
  {
    sub_10009518C(v112, &qword_100BCB138);
    v184 = 0;
    v183 = (void (*)(_QWORD, _QWORD))0xE000000000000000;
  }
  else
  {
    v114 = v195;
    DayWeather.highTemperature.getter(v112);
    v115 = sub_1000D203C();
    v116 = static WeatherFormatStyle<>.weather.getter(v115);
    v117 = v198;
    v118 = v179;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v116);
    v119 = v196;
    sub_1000C1AA0(v47);
    v120 = v189;
    sub_1000DA7F8();
    v121 = v99;
    v122 = sub_100099088();
    v184 = sub_1000DB15C(v118, v120, v122, (uint64_t)&protocol witness table for UnitManager, v117, v119);
    v183 = (void (*)(_QWORD, _QWORD))v123;
    v124 = v122;
    v99 = v121;
    swift_release(v124);
    sub_10009DD08(v120);
    sub_1000C1AA0(v118);
    v121(v114, v117);
  }
  v126 = v175;
  sub_100099C0C((uint64_t)v197, v125, &qword_100BCB138);
  v127 = sub_100088FC8(v126, 1, v111);
  if (v113)
  {
    sub_10009518C(v127, &qword_100BCB138);
    v138 = 0;
    v140 = 0xE000000000000000;
  }
  else
  {
    v128 = v195;
    DayWeather.lowTemperature.getter(v127);
    v129 = sub_1000D203C();
    v130 = v187;
    v131 = static WeatherFormatStyle<>.weather.getter(v129);
    v132 = v179;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v131);
    v133 = v196;
    sub_1000C1AA0(v130);
    v134 = v189;
    sub_1000DA7F8();
    v135 = (void (*)(uint64_t, uint64_t))v99;
    v136 = sub_100099088();
    v137 = v198;
    v138 = sub_1000DB15C(v132, v134, v136, (uint64_t)&protocol witness table for UnitManager, v198, v133);
    v140 = v139;
    swift_release(v136);
    sub_10009DD08(v134);
    ((void (*)(uint64_t, uint64_t))v191)(v132, v133);
    v135(v128, v137);
  }
  v198 = v140;
  v199 = v138;
  v160 = v138;
  v161 = v140;
  v141 = v169;
  v142 = v168;
  v143 = v172;
  v144 = v171;
  v145 = v174;
  v146 = v184;
  v147 = (uint64_t)v183;
  v148 = sub_1000B211C(v169, v168, v172, v171, v173, v174, v184, (uint64_t)v183, v160, v161);
  v195 = v149;
  v196 = v148;
  swift_bridgeObjectRelease(v145);
  v150 = v180[25];
  v151 = v180[26];
  sub_1000DB418(v180 + 22, v150);
  v152 = dispatch thunk of LocationMetadataManagerType.availableAddress(for:)(v181, v150, v151);
  v154 = v153;
  sub_100021A14((uint64_t)v197, &qword_100BCB138);
  sub_1000988C4();
  v155(v176, v178);
  v156 = v182;
  *v182 = v141;
  v156[1] = v142;
  v157 = v185;
  v156[2] = v190;
  v156[3] = v157;
  v156[4] = v143;
  v156[5] = v144;
  v156[6] = v146;
  v156[7] = v147;
  v158 = v198;
  v156[8] = v199;
  v156[9] = v158;
  v159 = v195;
  v156[10] = v196;
  v156[11] = v159;
  v156[12] = v152;
  v156[13] = v154;
  sub_100098640();
}

uint64_t sub_1000AD04C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_1000BA294(a3);
  v5 = sub_1000D18D4();
  v6(v5, a1);
  return a2;
}

void sub_1000AD084()
{
  uint64_t v0;
  void (*v1)(char *, size_t, char *);
  char v2;
  size_t v3;
  _QWORD *v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  char *v16;
  char *v17;

  sub_1000F44F0();
  if ((v5 & 1) != 0)
  {
    sub_1000DD15C();
    if (v6 != v7)
    {
      sub_1000C572C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_100607134();
  if (v4)
  {
    v13 = sub_1000DBBEC(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100098740(v13, (uint64_t)(v4 + 4));
    v15 = sub_10011E0AC(v14);
    v4[2] = v3;
    v4[3] = 2 * v15 - 64;
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
  }
  v16 = (char *)(v4 + 4);
  v17 = (char *)(v0 + 32);
  if ((v2 & 1) != 0)
  {
    sub_100600454(v17, v3, v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v17, v3, v16);
  }
  sub_10009925C();
  sub_10004A2A0();
}

void *sub_1000AD120()
{
  char *v0;
  size_t v1;
  char *v2;
  uint64_t v3;
  void *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000B4628();
  if (v3 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    if (&v2[v1] <= v0 || &v0[v1] <= v2)
      return sub_1000DCC24(v2, v0, v1);
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = (void *)sub_1000BBE5C(v6, v7, v8, v9, v10, v11, v12);
  __break(1u);
  return result;
}

uint64_t sub_1000AD1B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, _QWORD);
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t (*v75)(void (*)(_QWORD), void (*)(uint64_t));
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t);
  void (*v105)(_QWORD);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t);
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD v143[4];
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(void (*)(_QWORD), void (*)(uint64_t));
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t);
  void (*v161)(_QWORD);
  void (*v162)(uint64_t, uint64_t);
  uint64_t (*v163)(uint64_t);
  void (*v164)(uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v162 = a3;
  v144 = a1;
  v158 = a4;
  v165 = type metadata accessor for WeatherFormatPlaceholder(0);
  v160 = *(uint64_t (**)(uint64_t, uint64_t))(v165 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_100088FDC();
  sub_10009511C(v9);
  sub_1000BA294(&qword_100BC3340);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  v12 = sub_1000987B4((uint64_t)v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v152 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(v12);
  v151 = *(_QWORD *)(v152 - 8);
  sub_10009D98C();
  __chkstk_darwin(v13);
  sub_1000986FC();
  v157 = v14;
  __chkstk_darwin(v15);
  sub_100079F7C();
  v166 = v16;
  v17 = sub_1000BA294(&qword_100BC4E68);
  sub_1000B43A4(v17, (uint64_t)&v176);
  v150 = v18;
  sub_10009D98C();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v169 = v20;
  v164 = (void (*)(uint64_t))type metadata accessor for CurrentWeather(0);
  v161 = (void (*)(_QWORD))*((_QWORD *)v164 - 1);
  sub_10009D98C();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v163 = v22;
  v148 = type metadata accessor for Locale.Language(0);
  v147 = *(_QWORD *)(v148 - 8);
  sub_10009D98C();
  __chkstk_darwin(v23);
  sub_100088FDC();
  v25 = sub_1000987B4(v24);
  v159 = type metadata accessor for Locale(v25);
  v145 = *(_QWORD *)(v159 - 8);
  sub_10009D98C();
  __chkstk_darwin(v26);
  sub_10009511C((uint64_t)v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100094EC4();
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100098728();
  v32 = v31 - v30;
  type metadata accessor for WeatherConditionBackgroundTimeData(0);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  sub_100088FDC();
  v167 = v34;
  v168 = sub_1000BA294(&qword_100BCB130);
  v143[2] = *(_QWORD *)(v168 - 8);
  sub_10009D98C();
  __chkstk_darwin(v35);
  sub_10007A130();
  sub_1000BA294(&qword_100BCB138);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v37);
  sub_1000860D0();
  sub_1000BA30C();
  __chkstk_darwin(v38);
  v40 = (char *)v143 - v39;
  v41 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v41);
  v42 = sub_1000C1E78();
  v43 = type metadata accessor for Calendar(v42);
  v155 = *(_QWORD *)(v43 - 8);
  v156 = v43;
  sub_10009D98C();
  __chkstk_darwin(v44);
  sub_100098728();
  v47 = v46 - v45;
  Location.timeZone.getter(v48);
  static Calendar.currentCalendar(with:)(v4);
  v49 = sub_1000F41F0();
  v50(v49);
  v51 = type metadata accessor for WeatherData(0);
  v52 = v144;
  v53 = v144 + *(int *)(v51 + 24);
  WeatherDataModel.dailyForecast.getter(v51);
  v154 = v47;
  v171 = v47;
  v172 = v52;
  v54 = v52;
  v170 = v40;
  sub_1000D8C28();
  sub_1000988C4();
  v55(v6, v168);
  v168 = type metadata accessor for UnitManager(0);
  v56 = static UnitManager.standard.getter(v168);
  v57 = UnitManager.temperature.getter();
  swift_release(v56);
  v58 = v149;
  v59 = *(void **)(v149 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_temperatureUnitUsedToPreprocess);
  *(_QWORD *)(v149 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_temperatureUnitUsedToPreprocess) = v57;
  v60 = v58;

  sub_1000DB418((_QWORD *)(v60 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_weatherConditionBackgroundTimeDataFactory), *(_QWORD *)(v60 + OBJC_IVAR____TtC7Weather20ListViewModelFactory_weatherConditionBackgroundTimeDataFactory + 24));
  v61 = type metadata accessor for Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v32, a2, v61);
  sub_10009C7F0(v32, 0);
  sub_100080C0C(v54, v5, type metadata accessor for WeatherData);
  _s7Weather24LocationCompositionStateOwst_0(v5, 0, 1, v51);
  v62 = sub_1000DACB4();
  sub_1003B4364(v62, v63, v162, v64);
  sub_100021A14(v5, &qword_100BC3460);
  sub_100021A14(v32, &qword_100BC35F8);
  v65 = v143[3];
  static Locale.current.getter(v66);
  sub_1000BEC54();
  Locale.language.getter(v67);
  v68 = v65;
  v69 = v159;
  v70 = (*(uint64_t (**)(uint64_t))(v145 + 8))(v68);
  LOBYTE(v60) = Locale.Language.prefersFullTemperatureScale.getter(v70);
  sub_1000DAF58();
  v72 = sub_100094F10(a2, v71);
  v73 = v163;
  v147 = v53;
  v74 = WeatherDataModel.currentWeather.getter(v72);
  CurrentWeather.temperature.getter(v74);
  v75 = (uint64_t (*)(void (*)(_QWORD), void (*)(uint64_t)))*((_QWORD *)v161 + 1);
  v76 = v75((void (*)(_QWORD))v73, v164);
  if ((v60 & 1) != 0)
  {
    v77 = static Set<>.value.getter(v76);
    v146 = v75;
    v78 = v143[1];
    sub_1000C135C();
    _s7Weather24LocationCompositionStateOwst_0(v79, v80, v81, v69);
    v82 = v166;
    static WeatherFormatStyle<>.weather(_:locale:)(v77, v78);
    sub_1000986E8();
    sub_100021A14(v78, &qword_100BC3340);
    LODWORD(v162) = enum case for WeatherFormatPlaceholder.none(_:);
    v83 = v160;
    v161 = (void (*)(_QWORD))*((_QWORD *)v160 + 13);
    v84 = v153;
    v85 = ((uint64_t (*)(unint64_t))v161)(v153);
    v86 = static UnitManager.standard.getter(v85);
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v145 = v87;
    sub_100109998();
    v149 = sub_1000BEE84();
    v148 = v88;
    swift_release(v86);
    v160 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v83 + 1);
    sub_1000B3274(v84, v160);
    v89 = *(void (**)(uint64_t))(v151 + 8);
    v90 = sub_1000DACB4();
    v89(v90);
    v91 = *(uint64_t (**)(uint64_t))(v150 + 8);
    v92 = sub_1000F41F0();
    v93 = v91(v92);
    v94 = v163;
    v95 = WeatherDataModel.currentWeather.getter(v93);
    CurrentWeather.temperature.getter(v95);
    v96 = v146((void (*)(_QWORD))v94, v164);
    v97 = static Set<>.unit.getter(v96);
    sub_1000C135C();
    _s7Weather24LocationCompositionStateOwst_0(v98, v99, v100, v159);
    static WeatherFormatStyle<>.weather(_:locale:)(v97, v78);
    sub_1000986C4();
    sub_100021A14(v78, &qword_100BC3340);
    ((void (*)(uint64_t, _QWORD, uint64_t))v161)(v84, v162, v165);
    sub_1000FDB94();
    sub_1000DC918();
    v159 = sub_1000BEE84();
    sub_100094FDC(v101, (uint64_t)&v174);
    sub_10011DCA0();
    v102 = sub_1000DACB4();
    v164 = v89;
    v89(v102);
    v103 = sub_1000F41F0();
    v163 = v91;
    v91(v103);
  }
  else
  {
    v82 = v166;
    static WeatherFormatStyle<>.weather.getter(v76);
    v104 = v160;
    v105 = (void (*)(_QWORD))*((_QWORD *)v160 + 13);
    v106 = v153;
    LODWORD(v162) = enum case for WeatherFormatPlaceholder.none(_:);
    v107 = v165;
    v161 = v105;
    v105(v153);
    sub_1000FDB94();
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    sub_1000DC918();
    sub_100109998();
    v97 = v169;
    v149 = Measurement.formatted<A>(_:placeholder:unitManager:)(v108, v109, v110, v111, v112, v113, v114);
    sub_100094FDC(v115, (uint64_t)&v173);
    v160 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v104 + 1);
    v160(v106, v107);
    sub_1000988C4();
    v116 = sub_1000DACB4();
    v164 = v117;
    v117(v116);
    v163 = *(uint64_t (**)(uint64_t))(v150 + 8);
    ((void (*)(uint64_t, uint64_t))v163)(v97, v69);
    v159 = 0;
    v151 = 0;
  }
  sub_1000DA4E0((uint64_t)v170, &qword_100BCB138, (uint64_t)&v175);
  v118 = type metadata accessor for DayWeather(0);
  v119 = sub_100088FC8(v97, 1, v118);
  if (v120)
  {
    sub_10009518C(v119, &qword_100BCB138);
    v153 = 0xE200000000000000;
    v152 = 11565;
  }
  else
  {
    DayWeather.highTemperature.getter(v119);
    v121 = sub_1000EAFDC();
    v122 = static WeatherFormatStyle<>.weather.getter(v121);
    v97 = v82;
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v122);
    v123 = sub_1000DACB4();
    v164(v123);
    sub_1000C6E7C();
    v124 = sub_1000FDB94();
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v152 = sub_1000BEE84();
    v153 = v125;
    swift_release(v124);
    sub_10011DCA0();
    sub_10011DB60();
    v126 = sub_1000F41F0();
    v163(v126);
  }
  sub_1000DA4E0((uint64_t)v170, &qword_100BCB138, (uint64_t)&v177);
  v127 = sub_100088FC8(v97, 1, v118);
  if (v120)
  {
    sub_10009518C(v127, &qword_100BCB138);
    v136 = 0xE200000000000000;
    v134 = 11565;
  }
  else
  {
    v128 = v169;
    DayWeather.lowTemperature.getter(v127);
    v129 = sub_1000EAFDC();
    v130 = v166;
    v131 = static WeatherFormatStyle<>.weather.getter(v129);
    NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter(v131);
    ((void (*)(uint64_t, uint64_t))v164)(v130, v5);
    sub_1000C6E7C();
    v132 = sub_1000FDB94();
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v133 = v69;
    v134 = sub_1000BEE84();
    v136 = v135;
    swift_release(v132);
    sub_10011DCA0();
    sub_10011DB60();
    ((void (*)(uint64_t, uint64_t))v163)(v128, v133);
  }
  sub_100021A14((uint64_t)v170, &qword_100BCB138);
  v137 = type metadata accessor for ListPreprocessedDataModel(0);
  v138 = v158;
  sub_10007802C(v167, (uint64_t)v158 + *(int *)(v137 + 32), type metadata accessor for WeatherConditionBackgroundTimeData);
  v139 = v148;
  *v138 = v149;
  v138[1] = v139;
  v140 = v151;
  v138[2] = v159;
  v138[3] = v140;
  v141 = v153;
  v138[4] = v152;
  v138[5] = v141;
  v138[6] = v134;
  v138[7] = v136;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v155 + 8))(v154, v156);
}

_QWORD *sub_1000ADC80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, unint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Class isa;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v3 = type metadata accessor for TemperatureScaleConfiguration.ColorStop(0);
  sub_100099300();
  __chkstk_darwin(v4);
  sub_100098728();
  v7 = v6 - v5;
  v8 = TemperatureScaleConfiguration.Gradient.stops.getter();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v30 = a1;
    sub_1000ADE74();
    sub_1000ADFCC();
    v29 = v8;
    v10 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v11 = *(_QWORD *)(v1 + 72);
    v12 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 16);
    v13 = v1;
    do
    {
      v14 = v12(v7, v10, v3);
      v15._countAndFlagsBits = TemperatureScaleConfiguration.ColorStop.color.getter(v14);
      isa = UIColor.init(hex:)(v15).super.isa;
      v17 = UIColor.rgbaComponents.getter();
      v19 = v18;
      v21 = v20;
      v23 = v22;

      v24 = TemperatureScaleConfiguration.ColorStop.location.getter();
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v7, v3);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1000ADE74();
      v25 = _swiftEmptyArrayStorage[2];
      if (v25 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000ADE74();
      _swiftEmptyArrayStorage[2] = v25 + 1;
      v26 = (double *)&_swiftEmptyArrayStorage[5 * v25];
      v26[4] = v17;
      *((_QWORD *)v26 + 5) = v19;
      *((_QWORD *)v26 + 6) = v21;
      *((_QWORD *)v26 + 7) = v23;
      v26[8] = v24;
      v10 += v11;
      --v9;
      v1 = v13;
    }
    while (v9);
    v8 = v29;
    a1 = v30;
  }
  v27 = type metadata accessor for TemperatureScaleConfiguration.Gradient(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
  swift_bridgeObjectRelease(v8);
  return _swiftEmptyArrayStorage;
}

void sub_1000ADE74()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000ADEA8();
  *v0 = v1;
}

void sub_1000ADEA8()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_1000D1950();
  if ((v5 & 1) != 0)
  {
    sub_1000DD15C();
    if (v6 != v7)
    {
      sub_1000C572C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000C179C();
  if (v4)
  {
    v13 = sub_1000DBBEC(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_100098740(v13, 40 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000C22C4((uint64_t)(v15 - 32) / 40);
  }
  v16 = sub_1000FC4F8();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10009925C();
  sub_10009D300();
}

void *sub_1000ADF4C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_1000BA698();
    sub_1000C36A8();
  }
  else
  {
    sub_1000CD614();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)sub_1000D1668();
      return sub_1000DCC24(v6, v7, v8);
    }
    sub_1000BA698();
    sub_1000C25D8();
  }
  result = (void *)sub_1000BBE5C(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

unint64_t sub_1000ADFCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BDADD0;
  if (!qword_100BDADD0)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BDADD0);
  }
  return result;
}

void sub_1000AE008(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);

  v36 = a2;
  v38 = a3;
  v6 = type metadata accessor for Location(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100098694();
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  sub_1000BA294(&qword_100BC35F8);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  type metadata accessor for WeatherConditionBackgroundTimeData(0);
  sub_1000B42B0();
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v35 - v20;
  sub_1000DB418((_QWORD *)(v3+ OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_weatherConditionBackgroundTimeDataFactory), *(_QWORD *)(v3+ OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_weatherConditionBackgroundTimeDataFactory+ 24));
  v37 = v7;
  sub_1000E7508(v15);
  _s7Weather24LocationCompositionStateOwst_0(v15, 0, 1, v6);
  sub_100080C0C(a1, v11, type metadata accessor for WeatherData);
  v22 = type metadata accessor for WeatherData(0);
  _s7Weather24LocationCompositionStateOwst_0(v11, 0, 1, v22);
  sub_1003B4364(v15, v11, v36, (uint64_t)v21);
  sub_100021A14(v11, &qword_100BC3460);
  sub_100021A14(v15, &qword_100BC35F8);
  if (qword_100BC2438 != -1)
    swift_once(&qword_100BC2438, sub_100159690);
  v23 = type metadata accessor for Logger(0);
  sub_1000AECD4(v23, (uint64_t)qword_100CAF0A0);
  sub_1000E7508(v4);
  sub_100080C0C((uint64_t)v21, (uint64_t)v19, type metadata accessor for WeatherConditionBackgroundTimeData);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(32, -1);
    v28 = (void (*)(uint64_t, uint64_t))swift_slowAlloc(64, -1);
    v36 = v28;
    *(_DWORD *)v27 = 141558531;
    v39 = 1752392040;
    v40 = v28;
    v29 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    *(_WORD *)(v27 + 12) = 2081;
    v30 = Location.name.getter(v29);
    v39 = sub_1000C0E20(v30, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    swift_bridgeObjectRelease(v4);
    sub_1000DDFD4();
    *(_WORD *)(v27 + 22) = 2082;
    v32 = sub_1004AE160();
    v39 = sub_1000C0E20(v32, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    swift_bridgeObjectRelease(v19);
    sub_1000215BC((uint64_t)v19, type metadata accessor for WeatherConditionBackgroundTimeData);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Preprocessed data for LocationViewer; location=%{private,mask.hash}s, data=%{public}s",
      (uint8_t *)v27,
      0x20u);
    v34 = v36;
    swift_arrayDestroy(v36, 2);
    sub_1000986F0((uint64_t)v34);
    sub_1000986F0(v27);
  }
  else
  {
    sub_1000DDFD4();
    sub_1000215BC((uint64_t)v19, type metadata accessor for WeatherConditionBackgroundTimeData);
  }

  sub_10007802C((uint64_t)v21, v38, type metadata accessor for WeatherConditionBackgroundTimeData);
  sub_100098640();
}

uint64_t sub_1000AE37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F3290);
}

uint64_t sub_1000AE388(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  void (*v56)(uint64_t, uint64_t, __n128);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  int v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;

  v8 = v7;
  v76 = a1;
  v77 = a3;
  v11 = type metadata accessor for Location.Identifier(0);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  __chkstk_darwin(v11);
  sub_100088FDC();
  v71 = v12;
  v13 = sub_1000992C4();
  v75 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100088FDC();
  v74 = v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease(a7);
  sub_10003BC58();
  sub_1000986C4();
  v20 = UUID.init()(v19);
  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(_QWORD *)(v8 + 16) = v21;
  *(_QWORD *)(v8 + 24) = v23;
  v24 = v8 + OBJC_IVAR____TtC7Weather27WeatherDataUpdateRequestLog_logger;
  if (qword_100BC2480 != -1)
    swift_once(&qword_100BC2480, sub_1001597E8);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_1000AECD4(v25, (uint64_t)qword_100CAF168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v26, v25);
  v27 = OBJC_IVAR____TtC7Weather27WeatherDataUpdateRequestLog__finished;
  LOBYTE(v79) = 0;
  v28 = sub_1000BA294(&qword_100BEA2F8);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)(v8 + v27) = Atomic.init(wrappedValue:)(&v79);
  v29 = v76;
  *(_BYTE *)(v8 + OBJC_IVAR____TtC7Weather27WeatherDataUpdateRequestLog_kind) = v76;
  v30 = v75;
  sub_1000BECD8(v8 + OBJC_IVAR____TtC7Weather27WeatherDataUpdateRequestLog_location);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC7Weather27WeatherDataUpdateRequestLog_forced) = v77 & 1;
  v31 = v74;
  sub_1000BECD8(v74);
  v32 = swift_retain_n(v8, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, (os_log_type_t)v34))
  {
    v68 = v33;
    v35 = sub_100098710(48);
    v66 = sub_100098710(96);
    v79 = v66;
    *(_DWORD *)v35 = 136447235;
    v69 = v13;
    v70 = a2;
    v67 = v34;
    if (v29)
    {
      v36 = sub_1000D06A0(v29);
      if (v39)
        v40 = v37;
      else
        v40 = v38;
    }
    else
    {
      v40 = 0xE700000000000000;
      v36 = 0x72656874616577;
    }
    v78 = sub_1000CE1C8(v36, v40, &v79);
    v42 = sub_10009C144();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v43);
    sub_1000986C4();
    *(_WORD *)(v35 + 12) = 2160;
    v78 = 1752392040;
    v44 = sub_10009C144();
    v46 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v45);
    *(_WORD *)(v35 + 22) = 2081;
    v47 = v71;
    Location.identifier.getter(v46);
    sub_1000AED38();
    v48 = v73;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v73);
    v50 = v31;
    v52 = v51;
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v47, v48);
    v78 = sub_1000CE1C8(v49, v52, &v79);
    v53 = sub_10009C144();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54);
    v55 = swift_bridgeObjectRelease(v52);
    v56 = *(void (**)(uint64_t, uint64_t, __n128))(v30 + 8);
    v57 = v69;
    v56(v50, v69, v55);
    *(_WORD *)(v35 + 32) = 1026;
    LODWORD(v78) = v77 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4);
    *(_WORD *)(v35 + 38) = 2082;
    v58 = *(_QWORD *)(v8 + 16);
    v59 = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain(v59);
    v78 = sub_1000CE1C8(v58, v59, &v79);
    v60 = sub_10009C144();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v61);
    sub_1000C6650();
    swift_bridgeObjectRelease(v59);
    v62 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v67, "New WeatherData Update Request. kind=%{public}s, location=%{private,mask.hash}s, forced=%{BOOL,public}d, uuid=%{public}s", (uint8_t *)v35, 0x30u);
    v63 = v66;
    swift_arrayDestroy(v66, 3);
    sub_1000986F0(v63);
    sub_1000986F0(v35);

    ((void (*)(uint64_t, uint64_t))v56)(v70, v57);
  }
  else
  {
    v41 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v41(v31, v13);

    sub_1000C6650();
    v41(a2, v13);
  }
  return v8;
}

uint64_t sub_1000AE824()
{
  return type metadata accessor for LocationOfInterest(0);
}

uint64_t sub_1000AE82C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000AE838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(v4 - 144, v4 - 128, a3, a4, 6);
}

void sub_1000AE85C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000A3908(v1, v2, v0);
}

uint64_t sub_1000AE86C(uint64_t a1)
{
  return type metadata accessor for TupleView(255, a1);
}

uint64_t sub_1000AE878(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

void sub_1000AE888(uint64_t a1)
{
  sub_1001DA36C(a1, 1701869940);
}

void sub_1000AE8A8(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000AE8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, v3);
}

uint64_t sub_1000AE8CC()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 112, 0);
}

uint64_t sub_1000AE8E8(uint64_t a1, uint64_t *a2)
{
  return sub_100075EB0(a2);
}

uint64_t sub_1000AE8F8()
{
  return type metadata accessor for Locale(0);
}

uint64_t sub_1000AE908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000AE910()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 280);
}

uint64_t sub_1000AE930()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000AE944()
{
  return dispatch thunk of Column.value.getter();
}

uint64_t sub_1000AE950(uint64_t result)
{
  _WORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = result;
  *(_QWORD *)(v2 - 120) = 0;
  *(_QWORD *)(v2 - 232) = v1;
  *v1 = 771;
  *(_QWORD *)(v2 - 112) = v1 + 1;
  return result;
}

void sub_1000AE96C(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(_QWORD *)(a2 + 16));
}

uint64_t sub_1000AE980()
{
  uint64_t v0;

  return v0;
}

BOOL sub_1000AE9A0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000AE9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(a1, a2, v2);
}

void sub_1000AE9C0()
{
  sub_10009AD84();
}

uint64_t sub_1000AE9CC()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t sub_1000AE9D4()
{
  uint64_t *v0;

  return sub_100075EB0(v0);
}

uint64_t sub_1000AE9DC()
{
  return type metadata accessor for NewsDataModel(0);
}

NSNumber sub_1000AE9E4()
{
  return Double._bridgeToObjectiveC()();
}

unint64_t sub_1000AE9EC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_1007EC198();
}

uint64_t sub_1000AE9F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_1000AEA04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 456);
}

void sub_1000AEA20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(*(_QWORD *)(v2 - 224), a2);
}

uint64_t sub_1000AEA28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BF398(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

void sub_1000AEA38(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v4 = sub_1000C1158();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000BA294(&qword_100C0C090);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098694();
  v10 = sub_1000BA294((uint64_t *)&unk_100C09DB0);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v27 - v16;
  a2(v15);
  if (qword_100BC2708 != -1)
    swift_once(&qword_100BC2708, sub_100124C54);
  v18 = sub_1000AECD4(v10, (uint64_t)qword_100CAF580);
  v19 = v2 + *(int *)(v8 + 48);
  sub_100037794((uint64_t)v17, v2, (uint64_t *)&unk_100C09DB0);
  sub_100037794(v18, v19, (uint64_t *)&unk_100C09DB0);
  sub_1000BA594(v2);
  if (!v21)
  {
    sub_100037794(v2, (uint64_t)v14, (uint64_t *)&unk_100C09DB0);
    sub_1000BA594(v19);
    if (!v21)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v19, v4);
      sub_10000F1C8(&qword_100C0C098, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v22);
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v7, v4);
      v25 = ((uint64_t (*)(char *, uint64_t))v24)(v14, v4);
      sub_10004A2CC(v25, (uint64_t *)&unk_100C09DB0);
      if ((v23 & 1) != 0)
        goto LABEL_13;
LABEL_14:
      v26 = v28;
      sub_100099298(v28);
      sub_1000F111C((uint64_t)v17, v26, (uint64_t *)&unk_100C09DB0);
      goto LABEL_15;
    }
    v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_11:
    sub_10004A2CC(v20, &qword_100C0C090);
    goto LABEL_14;
  }
  v20 = sub_1000BA594(v19);
  if (!v21)
    goto LABEL_11;
  sub_10004A2CC(v20, (uint64_t *)&unk_100C09DB0);
LABEL_13:
  sub_100021A14((uint64_t)v17, (uint64_t *)&unk_100C09DB0);
LABEL_15:
  sub_100098640();
}

void sub_1000AECA4(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_1000AECEC();
  sub_100037794(v2, a1, (uint64_t *)&unk_100C09DB0);
}

uint64_t sub_1000AECD4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000AECEC()
{
  uint64_t v0;

  if (qword_100BC2708 != -1)
    swift_once(&qword_100BC2708, sub_100124C54);
  v0 = sub_1000BA294((uint64_t *)&unk_100C09DB0);
  return sub_1000AECD4(v0, (uint64_t)qword_100CAF580);
}

unint64_t sub_1000AED38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC3490;
  if (!qword_100BC3490)
  {
    v1 = type metadata accessor for Location.Identifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Location.Identifier, v1);
    atomic_store(result, (unint64_t *)&qword_100BC3490);
  }
  return result;
}

void *sub_1000AED78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, const void *a11, uint64_t a12, const void *a13)
{
  uint64_t v22;
  int *v23;
  _OWORD *v24;
  __int128 v25;

  v22 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a9, a1, v22);
  v23 = (int *)type metadata accessor for PreprocessedWeatherData(0);
  *(_QWORD *)(a9 + v23[5]) = a2;
  sub_1000A15B4(a3, a9 + v23[6], type metadata accessor for FeelsLikeComponentPreprocessedDataModel);
  sub_1000A15B4(a4, a9 + v23[7], type metadata accessor for HourlyForecastComponentPreprocessedDataModel);
  sub_1000A15B4(a5, a9 + v23[8], type metadata accessor for ListPreprocessedDataModel);
  sub_1000CDA88((void *)(a9 + v23[9]), a6);
  sub_1000A15B4(a7, a9 + v23[10], type metadata accessor for UVIndexComponentPreprocessedDataModel);
  v24 = (_OWORD *)(a9 + v23[11]);
  v25 = a8[1];
  *v24 = *a8;
  v24[1] = v25;
  v24[2] = a8[2];
  sub_1000A15B4(a10, a9 + v23[12], type metadata accessor for PressureComponentPreprocessedDataModel);
  sub_1000BF170((void *)(a9 + v23[13]), a11);
  sub_1000A15B4(a12, a9 + v23[14], type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel);
  return memcpy((void *)(a9 + v23[15]), a13, 0x70uLL);
}

uint64_t sub_1000AEF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100C0B380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AEF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (**v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  char *v52;
  int *v53;
  void (*v54)(void (**)(char *, uint64_t), char *, uint64_t);
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  double *v65;
  double *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  double v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t KeyPath;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, void (**)(char *, uint64_t), uint64_t);
  uint64_t v88;
  void (**v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (**v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[5];

  v115 = a2;
  v116 = a5;
  v117 = a4;
  v113 = a3;
  v120 = a1;
  v106 = a6;
  v114 = type metadata accessor for DailyComponentView(0);
  __chkstk_darwin(v114);
  v112 = (uint64_t)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DailyComponentRowView(0);
  __chkstk_darwin(v111);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000BA294(&qword_100BDE188);
  __chkstk_darwin(v99);
  v102 = (uint64_t)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000BA294(&qword_100BDE190);
  __chkstk_darwin(v20);
  v103 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000BA294(&qword_100BDE198);
  v22 = __chkstk_darwin(v101);
  v105 = (uint64_t)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v100 = (uint64_t)&v98 - v25;
  __chkstk_darwin(v24);
  v104 = (uint64_t)&v98 - v26;
  v27 = type metadata accessor for PrimaryDividerStyle(0);
  v108 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v29 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Divider(0);
  v107 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v32 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_1000BA294(&qword_100BC6998);
  v110 = *(void (***)(char *, uint64_t))(v109 - 8);
  __chkstk_darwin(v109);
  v34 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000BA294(&qword_100BDE1A0);
  v36 = *(_QWORD *)(v35 - 8);
  v118 = v35;
  v119 = v36;
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v98 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v37);
  v42 = (void (**)(char *, uint64_t))((char *)&v98 - v41);
  v43 = Divider.init()(v40);
  static DividerStyle<>.primary.getter(v43);
  sub_10000F1C8(&qword_100BC69B0, (uint64_t (*)(uint64_t))&type metadata accessor for Divider);
  v45 = v44;
  sub_10000F1C8(&qword_100BC69B8, (uint64_t (*)(uint64_t))&type metadata accessor for PrimaryDividerStyle);
  v47 = v46;
  View.dividerStyle<A>(_:)(v29, v30, v27, v45, v46);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v29, v27);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v32, v30);
  v48 = v113;
  sub_1000FB760(v120);
  LOBYTE(v32) = v49;
  v121[0] = v30;
  v121[1] = v27;
  v121[2] = v45;
  v121[3] = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v121, &opaque type descriptor for <<opaque return type of View.dividerStyle<A>(_:)>>, 1);
  v51 = v109;
  View.isHidden(_:defaultAccessibilityHidden:)(v32 & 1, 1, v109, OpaqueTypeConformance2);
  v52 = v34;
  v53 = (int *)v114;
  v110[1](v52, v51);
  v54 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v119 + 32);
  v110 = v42;
  v109 = (uint64_t)v39;
  v54(v42, v39, v118);
  sub_100080C0C(v48, (uint64_t)v18, type metadata accessor for DailyForecastComponentViewModel);
  v55 = (uint64_t *)(v48 + v53[6]);
  v57 = *v55;
  v56 = v55[1];
  v58 = *(_QWORD *)(v48 + v53[7]);
  v59 = v48;
  v60 = (int *)v111;
  sub_100080C0C(v115, (uint64_t)&v18[*(int *)(v111 + 28)], type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel);
  swift_retain();
  v61 = sub_1000BA294(&qword_100BDE090);
  v62 = v116;
  State.projectedValue.getter(v61);
  v63 = &v18[v60[5]];
  *(_QWORD *)v63 = v57;
  *((_QWORD *)v63 + 1) = v56;
  v64 = v120;
  *(_QWORD *)&v18[v60[6]] = v58;
  *(_QWORD *)&v18[v60[8]] = v64;
  v65 = (double *)&v18[v60[9]];
  *v65 = a7;
  v65[1] = a8;
  v66 = (double *)&v18[v60[10]];
  *v66 = a9;
  v66[1] = a10;
  *(double *)&v18[v60[11]] = a11;
  v18[v60[12]] = v117;
  v67 = v112;
  sub_100080C0C(v59, v112, type metadata accessor for DailyComponentView);
  if (v64 == v62)
  {
    v68 = (uint64_t *)(v67 + v53[13]);
    v69 = *v68;
    if (*v68)
    {
      v70 = type metadata accessor for TipCoordinator(0);
      swift_retain();
      ObservableResolver.resolve<A>(_:)(v70, v70);
      swift_release(v69);
      v71 = v121[0];
      if (v121[0])
      {
        sub_10001C170();
        v73 = v72;
        swift_release(v71);
        sub_1000215BC(v67, type metadata accessor for DailyComponentView);
        v74 = 10.0;
        if ((v73 & 1) != 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      __break(1u);
    }
    v95 = v68[1];
    v96 = type metadata accessor for ObservableResolver(0);
    sub_10000F1C8((unint64_t *)&qword_100BD0930, (uint64_t (*)(uint64_t))&type metadata accessor for ObservableResolver);
    result = EnvironmentObject.error()(0, v95, v96, v97);
    __break(1u);
    return result;
  }
  sub_1000215BC(v67, type metadata accessor for DailyComponentView);
LABEL_7:
  v74 = 0.0;
LABEL_8:
  v75 = v102;
  sub_100080C0C((uint64_t)v18, v102, type metadata accessor for DailyComponentRowView);
  *(double *)(v75 + *(int *)(v99 + 36)) = v74;
  sub_1000215BC((uint64_t)v18, type metadata accessor for DailyComponentRowView);
  if (v64 == v62)
    v76 = 0;
  else
    v76 = 6;
  v77 = (uint64_t)v103;
  sub_1000FE908(v76);
  sub_100021A14(v75, &qword_100BDE188);
  KeyPath = swift_getKeyPath(&unk_10099B540);
  v79 = static Alignment.bottom.getter();
  v81 = v80;
  v82 = v100;
  sub_100037768(v77, v100, &qword_100BDE190);
  v83 = (uint64_t *)(v82 + *(int *)(v101 + 36));
  *v83 = KeyPath;
  v83[1] = v79;
  v83[2] = v81;
  sub_100021A14(v77, &qword_100BDE190);
  v84 = v104;
  sub_1000787D4(v82, v104, &qword_100BDE198);
  v86 = v118;
  v85 = v119;
  v87 = *(void (**)(uint64_t, void (**)(char *, uint64_t), uint64_t))(v119 + 16);
  v88 = v109;
  v89 = v110;
  v87(v109, v110, v118);
  v90 = v105;
  sub_100037768(v84, v105, &qword_100BDE198);
  v91 = v106;
  v87(v106, (void (**)(char *, uint64_t))v88, v86);
  v92 = sub_1000BA294(&qword_100BDE1A8);
  sub_100037768(v90, v91 + *(int *)(v92 + 48), &qword_100BDE198);
  sub_100021A14(v84, &qword_100BDE198);
  v93 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8);
  v93((uint64_t)v89, v86);
  sub_100021A14(v90, &qword_100BDE198);
  return v93(v88, v86);
}

_QWORD *sub_1000AF6E8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  __n128 v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __n128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v131)(char *, char *, uint64_t, __n128);
  uint64_t v132;
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  int *v138;
  _QWORD *v139;
  void (*v140)(char *, char *, uint64_t);

  v6 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  swift_bridgeObjectRetain(v6);
  v11 = sub_1000BA294(&qword_100BC4E68);
  v140 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v140(v9, v10, v11);
  v140(&a1[v7[6]], &a2[v7[6]], v11);
  v140(&a1[v7[7]], &a2[v7[7]], v11);
  v12 = v7[8];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  v16 = v7[9];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  v20 = a3[5];
  v21 = a3[6];
  v22 = &a1[v20];
  v23 = (uint64_t *)&a2[v20];
  v24 = *v23;
  v25 = v23[1];
  v26 = *(_QWORD *)&a2[v21];
  *(_QWORD *)v22 = v24;
  *((_QWORD *)v22 + 1) = v25;
  *(_QWORD *)&a1[v21] = v26;
  v138 = a3;
  v139 = a1;
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for Date(0);
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  v32 = swift_retain();
  v133 = v31;
  v134 = v30;
  ((void (*)(char *, char *, uint64_t, __n128))v31)(v28, v29, v30, v32);
  v33 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v34 = v33[5];
  v35 = &v28[v34];
  v36 = &v29[v34];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = v33[6];
  v39 = &v28[v38];
  v40 = &v29[v38];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = v33[7];
  v43 = &v28[v42];
  v136 = &v29[v42];
  v44 = type metadata accessor for TimeZone(0);
  v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
  swift_bridgeObjectRetain(v37);
  v46 = swift_bridgeObjectRetain(v41);
  v131 = v45;
  v132 = v44;
  v45(v43, v136, v44, v46);
  v140(&v28[v33[8]], &v29[v33[8]], v11);
  v137 = v11;
  v140(&v28[v33[9]], &v29[v33[9]], v11);
  v47 = v33[10];
  v48 = &v28[v47];
  v49 = &v29[v47];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = v33[11];
  v52 = &v28[v51];
  v53 = &v29[v51];
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = v54;
  *(_QWORD *)&v28[v33[12]] = *(_QWORD *)&v29[v33[12]];
  v28[v33[13]] = v29[v33[13]];
  v55 = v33[14];
  v56 = &v28[v55];
  v57 = &v29[v55];
  v58 = *((_QWORD *)v57 + 1);
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = v58;
  v59 = v33[15];
  v60 = &v28[v59];
  v61 = &v29[v59];
  v62 = type metadata accessor for Precipitation(0);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v58);
  v135 = v62;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
  {
    v63 = sub_1000BA294(&qword_100BCB338);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
  }
  v28[v33[16]] = v29[v33[16]];
  v64 = v33[17];
  v65 = &v28[v64];
  v66 = &v29[v64];
  v67 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *((_QWORD *)v65 + 1) = v67;
  v68 = v33[18];
  v69 = &v28[v68];
  v70 = &v29[v68];
  v71 = *((_QWORD *)v70 + 1);
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *((_QWORD *)v69 + 1) = v71;
  v72 = v33[19];
  v73 = &v28[v72];
  v74 = &v29[v72];
  v75 = *((_QWORD *)v74 + 1);
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *((_QWORD *)v73 + 1) = v75;
  v76 = v33[20];
  v77 = *(_QWORD *)&v29[v76];
  *(_QWORD *)&v28[v76] = v77;
  v78 = v138[9];
  *(_QWORD *)((char *)v139 + v138[8]) = *(_QWORD *)&a2[v138[8]];
  *(_OWORD *)((char *)v139 + v78) = *(_OWORD *)&a2[v78];
  v79 = v138[11];
  *(_OWORD *)((char *)v139 + v138[10]) = *(_OWORD *)&a2[v138[10]];
  *(_QWORD *)((char *)v139 + v79) = *(_QWORD *)&a2[v79];
  v80 = v138[13];
  *((_BYTE *)v139 + v138[12]) = a2[v138[12]];
  v81 = (_QWORD *)((char *)v139 + v80);
  v82 = &a2[v80];
  v83 = *(_QWORD *)&a2[v80 + 8];
  *v81 = *(_QWORD *)&a2[v80];
  v81[1] = v83;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v77);
  swift_retain();
  swift_retain();
  v84 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v85 = (char *)v81 + v84;
  v86 = &v82[v84];
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v82[v84], 1, (uint64_t)v33))
  {
    v87 = sub_1000BA294(&qword_100BCB340);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    v133(v85, v86, v134);
    v88 = v33[5];
    v89 = &v85[v88];
    v90 = &v86[v88];
    v91 = *((_QWORD *)v90 + 1);
    *(_QWORD *)v89 = *(_QWORD *)v90;
    *((_QWORD *)v89 + 1) = v91;
    v92 = v33[6];
    v93 = &v85[v92];
    v94 = &v86[v92];
    v95 = *((_QWORD *)v94 + 1);
    *(_QWORD *)v93 = *(_QWORD *)v94;
    *((_QWORD *)v93 + 1) = v95;
    v96 = v33[7];
    v97 = &v85[v96];
    v98 = &v86[v96];
    swift_bridgeObjectRetain(v91);
    v99 = swift_bridgeObjectRetain(v95);
    v131(v97, v98, v132, v99);
    v140(&v85[v33[8]], &v86[v33[8]], v137);
    v140(&v85[v33[9]], &v86[v33[9]], v137);
    v100 = v33[10];
    v101 = &v85[v100];
    v102 = &v86[v100];
    v103 = *((_QWORD *)v102 + 1);
    *(_QWORD *)v101 = *(_QWORD *)v102;
    *((_QWORD *)v101 + 1) = v103;
    v104 = v33[11];
    v105 = &v85[v104];
    v106 = &v86[v104];
    v107 = *((_QWORD *)v106 + 1);
    *(_QWORD *)v105 = *(_QWORD *)v106;
    *((_QWORD *)v105 + 1) = v107;
    *(_QWORD *)&v85[v33[12]] = *(_QWORD *)&v86[v33[12]];
    v85[v33[13]] = v86[v33[13]];
    v108 = v33[14];
    v109 = &v85[v108];
    v110 = &v86[v108];
    v111 = *((_QWORD *)v110 + 1);
    *(_QWORD *)v109 = *(_QWORD *)v110;
    *((_QWORD *)v109 + 1) = v111;
    v112 = v33[15];
    v113 = &v85[v112];
    v114 = &v86[v112];
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v111);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v135))
    {
      v115 = sub_1000BA294(&qword_100BCB338);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v113, v114, v135);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v135);
    }
    v85[v33[16]] = v86[v33[16]];
    v116 = v33[17];
    v117 = &v85[v116];
    v118 = &v86[v116];
    v119 = *((_QWORD *)v118 + 1);
    *(_QWORD *)v117 = *(_QWORD *)v118;
    *((_QWORD *)v117 + 1) = v119;
    v120 = v33[18];
    v121 = &v85[v120];
    v122 = &v86[v120];
    v123 = *((_QWORD *)v122 + 1);
    *(_QWORD *)v121 = *(_QWORD *)v122;
    *((_QWORD *)v121 + 1) = v123;
    v124 = v33[19];
    v125 = &v85[v124];
    v126 = &v86[v124];
    v127 = *((_QWORD *)v126 + 1);
    *(_QWORD *)v125 = *(_QWORD *)v126;
    *((_QWORD *)v125 + 1) = v127;
    v128 = v33[20];
    v129 = *(_QWORD *)&v86[v128];
    *(_QWORD *)&v85[v128] = v129;
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v127);
    swift_bridgeObjectRetain(v129);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, (uint64_t)v33);
  }
  return v139;
}

uint64_t type metadata accessor for DailyComponentView(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BDE0F0, (uint64_t)&nominal type descriptor for DailyComponentView);
}

uint64_t sub_1000AFCFC(char *a1, int *a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
  v5 = &a1[v4[5]];
  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(&a1[v4[6]], v6);
  v7(&a1[v4[7]], v6);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[v4[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[v4[9] + 8]);
  swift_unknownObjectRelease(*(_QWORD *)&a1[a2[5]]);
  swift_release(*(_QWORD *)&a1[a2[6] + 8]);
  v8 = &a1[a2[8]];
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*(_QWORD *)v8);
  }
  sub_1000B15F8(*(_QWORD *)&a1[a2[9]], a1[a2[9] + 8]);
  sub_1000B15F8(*(_QWORD *)&a1[a2[10]], a1[a2[10] + 8]);
  v11 = &a1[a2[11]];
  v12 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (uint64_t)&a1[a2[12]];
  v14 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, (uint64_t)v14))
  {
    v15 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[5] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
    v16 = v13 + v14[7];
    v17 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    v7((char *)(v13 + v14[8]), v6);
    v7((char *)(v13 + v14[9]), v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[14] + 8));
    v18 = v13 + v14[15];
    v19 = type metadata accessor for Precipitation(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[17] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[18] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[19] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[20]));
  }
  v20 = sub_1000BA294(&qword_100BDE090);
  swift_release(*(_QWORD *)(v13 + *(int *)(v20 + 28)));
  return swift_release(*(_QWORD *)&a1[a2[13]]);
}

char *sub_1000AFFDC(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v99)(char *, char *, uint64_t, __n128);
  char *v100;
  char *v101;
  char *v102;
  void *__dsta[2];
  void (*__dstb)(char *, char *, uint64_t);
  char *__dst;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  swift_bridgeObjectRetain(v6);
  v11 = sub_1000BA294(&qword_100BC4E68);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12(&a1[v7[6]], (char *)a2 + v7[6], v11);
  v12(&a1[v7[7]], (char *)a2 + v7[7], v11);
  v13 = v7[8];
  v14 = &a1[v13];
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v15[1];
  *(_QWORD *)v14 = *v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = v7[9];
  v18 = &a1[v17];
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = v19[1];
  *(_QWORD *)v18 = *v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = a3[5];
  v22 = a3[6];
  *(_OWORD *)__dsta = *(_OWORD *)((char *)a2 + v21);
  *(_OWORD *)&a1[v21] = *(_OWORD *)__dsta;
  v23 = &a1[v22];
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = v24[1];
  *(_QWORD *)v23 = *v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
  v27 = &a1[v26];
  v28 = (uint64_t *)((char *)a2 + v26);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  swift_unknownObjectRetain(__dsta[0]);
  swift_retain();
  v29 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    *(_QWORD *)v27 = *v28;
    swift_retain();
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  v32 = a3[9];
  v33 = &a1[v32];
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = v34[8];
  sub_10008D47C(*(_QWORD *)v34, v36);
  *(_QWORD *)v33 = v35;
  v33[8] = v36;
  v37 = a3[10];
  v38 = &a1[v37];
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)v39;
  v41 = v39[8];
  sub_10008D47C(*(_QWORD *)v39, v41);
  *(_QWORD *)v38 = v40;
  v38[8] = v41;
  v42 = a3[11];
  v43 = &a1[v42];
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  v46 = a3[12];
  v47 = &a1[v46];
  v48 = (char *)a2 + v46;
  v49 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v48, 1, (uint64_t)v49))
  {
    v50 = sub_1000BA294(&qword_100BCB340);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v47, v48, v51);
    v52 = v49[5];
    v53 = &v47[v52];
    v54 = &v48[v52];
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v56 = v49[6];
    v57 = &v47[v56];
    v58 = &v48[v56];
    __dstb = v12;
    v59 = *((_QWORD *)v58 + 1);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    v60 = v49[7];
    v100 = &v48[v60];
    v101 = &v47[v60];
    v61 = type metadata accessor for TimeZone(0);
    v99 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v61 - 8) + 16);
    swift_bridgeObjectRetain(v55);
    v62 = swift_bridgeObjectRetain(v59);
    v99(v101, v100, v61, v62);
    __dstb(&v47[v49[8]], &v48[v49[8]], v11);
    __dstb(&v47[v49[9]], &v48[v49[9]], v11);
    v63 = v49[10];
    v64 = &v47[v63];
    v65 = &v48[v63];
    v66 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v49[11];
    v68 = &v47[v67];
    v69 = &v48[v67];
    v70 = *((_QWORD *)v69 + 1);
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *((_QWORD *)v68 + 1) = v70;
    *(_QWORD *)&v47[v49[12]] = *(_QWORD *)&v48[v49[12]];
    v47[v49[13]] = v48[v49[13]];
    v71 = v49[14];
    v72 = &v47[v71];
    v73 = &v48[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v49[15];
    v102 = &v48[v75];
    __dst = &v47[v75];
    v76 = type metadata accessor for Precipitation(0);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v74);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v102, 1, v76))
    {
      v77 = sub_1000BA294(&qword_100BCB338);
      memcpy(__dst, v102, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(__dst, v102, v76);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v76);
    }
    v47[v49[16]] = v48[v49[16]];
    v78 = v49[17];
    v79 = &v47[v78];
    v80 = &v48[v78];
    v81 = *((_QWORD *)v80 + 1);
    *(_QWORD *)v79 = *(_QWORD *)v80;
    *((_QWORD *)v79 + 1) = v81;
    v82 = v49[18];
    v83 = &v47[v82];
    v84 = &v48[v82];
    v85 = *((_QWORD *)v84 + 1);
    *(_QWORD *)v83 = *(_QWORD *)v84;
    *((_QWORD *)v83 + 1) = v85;
    v86 = v49[19];
    v87 = &v47[v86];
    v88 = &v48[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v49[20];
    v91 = *(_QWORD *)&v48[v90];
    *(_QWORD *)&v47[v90] = v91;
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v91);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v47, 0, 1, (uint64_t)v49);
  }
  v92 = sub_1000BA294(&qword_100BDE090);
  *(_QWORD *)&v47[*(int *)(v92 + 28)] = *(_QWORD *)&v48[*(int *)(v92 + 28)];
  v93 = a3[13];
  v94 = &a1[v93];
  v95 = (uint64_t *)((char *)a2 + v93);
  v97 = *v95;
  v96 = v95[1];
  *(_QWORD *)v94 = v97;
  *((_QWORD *)v94 + 1) = v96;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for DailyComponentRowView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BDE238, (uint64_t)&nominal type descriptor for DailyComponentRowView);
}

uint64_t sub_1000B04D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1000B0544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v42;
  void (*v43)(unint64_t, unint64_t, uint64_t);
  void (*v44)(void);
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  v44 = *(void (**)(void))(v7 + 16);
  v44();
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + *(_DWORD *)(v9 + 80);
  v45 = ~(unint64_t)*(_DWORD *)(v9 + 80);
  v43 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
  v43((v11 + a1) & v45, (v11 + a2) & v45, v8);
  v12 = (v11 & v45) + *(_QWORD *)(v9 + 64);
  v13 = v12 + 7;
  v49 = a1;
  v14 = (_QWORD *)((v12 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v12 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v14[1] = v15[1];
  v16 = *(unsigned __int8 *)(v7 + 80) | v10;
  v17 = v16 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v14 + v16 + 16) & v17;
  v19 = ((unint64_t)v15 + v16 + 16) & v17;
  v20 = *(unsigned int *)(v7 + 84);
  v21 = *(unsigned int *)(v9 + 84);
  v42 = v12 + v16;
  v48 = (v12 + 7 + ((v12 + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8;
  v22 = v48 + 8;
  v23 = swift_retain();
  v47 = v21 | v20;
  if (v21 | v20)
  {
    if (v20 >= v21)
    {
      v24 = v19;
      v25 = v20;
      v26 = v46;
    }
    else
    {
      v24 = (v11 + v19) & v45;
      v25 = v21;
      v26 = v8;
    }
    if (_s7Weather24LocationCompositionStateOwet_0(v24, v25, v26))
    {
LABEL_12:
      v33 = v48;
      v34 = v21 | v20;
      if (v47)
        v35 = v48 + 8;
      else
        v35 = v48 + 9;
      memcpy((void *)v18, (const void *)v19, v35);
      v31 = v48 + 8;
      v32 = v49;
      goto LABEL_16;
    }
  }
  else if (*(_BYTE *)(v19 + v22))
  {
    v27 = *(unsigned __int8 *)(v19 + v22) - 1;
    v28 = v22 & 0xFFFFFFF8;
    if ((v22 & 0xFFFFFFF8) != 0)
    {
      v27 = 0;
      v28 = *(_DWORD *)v19;
    }
    if ((v28 | v27) != 0xFFFFFFFF)
      goto LABEL_12;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v44)(v18, v19, v46, v23);
  v43((v11 + v18) & v45, (v11 + v19) & v45, v8);
  v29 = (v42 + v18) & ~v16;
  v30 = (v42 + v19) & ~v16;
  ((void (*)(uint64_t, uint64_t, uint64_t))v44)(v29, v30, v46);
  v43((v11 + v29) & v45, (v11 + v30) & v45, v8);
  *(_QWORD *)((v13 + v29) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v30) & 0xFFFFFFFFFFFFF8);
  v31 = v48 + 8;
  v33 = v48;
  v32 = v49;
  v34 = v47;
  if (!v47)
    *(_BYTE *)(v18 + v48 + 8) = 0;
LABEL_16:
  v36 = v33 + 9;
  if (v34)
    v36 = v31;
  v37 = ((v18 | 7) + v36) & 0xFFFFFFFFFFFFFFF8;
  v38 = ((v19 | 7) + v36) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v37 = *(_BYTE *)v38;
  *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 8);
  v39 = (_QWORD *)((v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)((v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_retain();
  swift_retain();
  swift_retain();
  return v32;
}

_QWORD *sub_1000B0820(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, unint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  __n128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, unint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(unint64_t, unint64_t, uint64_t, __n128);
  uint64_t v70;
  int v71;
  void *__dst;
  _QWORD *v73;
  int v74;
  unint64_t v75;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v74 = *(_DWORD *)(v9 + 80);
  v10 = v74 + 8;
  v68 = ~(unint64_t)v74;
  v11 = ((unint64_t)v6 + v10) & v68;
  v12 = ((unint64_t)v7 + v10) & v68;
  v13 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v9 + 16);
  swift_retain();
  v14 = swift_retain();
  v13(v11, v12, v8, v14);
  v15 = *(_QWORD *)(v9 + 64);
  v16 = ((v74 + 16) & v68) + v15 + (v74 | 7);
  v73 = a1;
  v17 = ((unint64_t)a1 + v16) & ~(v74 | 7);
  v18 = ((unint64_t)a2 + v16) & ~(v74 | 7);
  v65 = (void (*)(unint64_t, unint64_t, uint64_t))v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v17, v18, v8);
  *(_QWORD *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFF8);
  v19 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v20 = (uint64_t *)(v17 + v19);
  v21 = (uint64_t *)(v18 + v19);
  v70 = *v21;
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v22[1] = v23[1];
  v24 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  v28 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  v67 = *(_QWORD *)(a3 + 16);
  v30 = *(_QWORD *)(v67 - 8);
  v31 = *(unsigned __int8 *)(v30 + 80) | v74;
  v32 = (*(_BYTE *)(v30 + 80) | v74) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)((v31 + 16 + v28) & v32);
  v33 = (_DWORD *)((v31 + 16 + v29) & v32);
  v34 = *(unsigned int *)(v30 + 84);
  v35 = *(unsigned int *)(v9 + 84);
  v66 = *(_QWORD *)(v30 + 64) + v74;
  v36 = (v66 & v68) + v15;
  v37 = v36 + v31;
  v63 = v30;
  v64 = v36 + 7;
  v38 = (v36 + 7 + ((v36 + v31) & ~v31)) & 0xFFFFFFFFFFFFFFF8;
  v75 = v38 + 8;
  v39 = v35 | v34;
  swift_retain();
  swift_bridgeObjectRetain(v70);
  swift_retain();
  swift_retain();
  swift_retain();
  v40 = swift_retain();
  if (v35 | v34)
  {
    if (v34 >= v35)
    {
      v43 = (uint64_t)v33;
      v44 = v34;
      v41 = (unint64_t)v33;
      v42 = v67;
    }
    else
    {
      v41 = (unint64_t)v33;
      v42 = v8;
      v43 = ((unint64_t)v33 + v66) & v68;
      v44 = v35;
    }
    v46 = (unint64_t)__dst;
    v45 = v73;
    if (_s7Weather24LocationCompositionStateOwet_0(v43, v44, v42))
    {
LABEL_12:
      if (v39)
        v53 = v38 + 8;
      else
        v53 = v38 + 9;
      memcpy((void *)v46, (const void *)v41, v53);
      goto LABEL_16;
    }
  }
  else
  {
    v45 = v73;
    v46 = (unint64_t)__dst;
    v41 = (unint64_t)v33;
    if (*((_BYTE *)v33 + v75))
    {
      v47 = *((unsigned __int8 *)v33 + v75) - 1;
      v48 = v75 & 0xFFFFFFF8;
      if ((v75 & 0xFFFFFFF8) != 0)
      {
        v47 = 0;
        v48 = *v33;
      }
      if ((v48 | v47) != 0xFFFFFFFF)
        goto LABEL_12;
    }
  }
  v49 = ~v31;
  v69 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v63 + 16);
  v69(v46, v41, v67, v40);
  v65((v66 + v46) & v68, (v66 + v41) & v68, v8);
  v71 = v39;
  v50 = (v37 + v46) & v49;
  v51 = (v37 + v41) & v49;
  ((void (*)(unint64_t, unint64_t, uint64_t))v69)(v50, v51, v67);
  v65((v66 + v50) & v68, (v66 + v51) & v68, v8);
  v45 = v73;
  v52 = v64 + v50;
  v39 = v71;
  *(_QWORD *)(v52 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v64 + v51) & 0xFFFFFFFFFFFFF8);
  if (!v71)
    *(_BYTE *)(v46 + v75) = 0;
LABEL_16:
  v54 = v38 + 9;
  if (v39)
    v54 = v38 + 8;
  *(_QWORD *)(((v46 | 7) + v54) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v41 | 7) + v54) & 0xFFFFFFFFFFFFF8);
  v55 = ((v54 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v56 = (char *)(v55 + v46);
  v57 = (char *)(v55 + v41);
  *(_QWORD *)v56 = *(_QWORD *)(v55 + v41);
  *((_QWORD *)v56 + 1) = *(_QWORD *)(v55 + v41 + 8);
  v56[16] = *(_BYTE *)(v55 + v41 + 16);
  v58 = *(_QWORD *)(v55 + v41 + 24);
  v59 = *(_BYTE *)(v55 + v41 + 32);
  swift_retain();
  swift_retain();
  sub_10008D47C(v58, v59);
  *((_QWORD *)v56 + 3) = v58;
  v56[32] = v59;
  v60 = *((_QWORD *)v57 + 5);
  LOBYTE(v58) = v57[48];
  sub_10008D47C(v60, v58);
  *((_QWORD *)v56 + 5) = v60;
  v56[48] = v58;
  v61 = *((_QWORD *)v57 + 7);
  LOBYTE(v58) = v57[64];
  sub_10008D47C(v61, v58);
  *((_QWORD *)v56 + 7) = v61;
  v56[64] = v58;
  return v45;
}

uint64_t sub_1000B0C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void (*v32)(uint64_t, uint64_t);
  unint64_t v33;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v32 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v32(a1, v4);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + *(_DWORD *)(v7 + 80);
  v33 = ~(unint64_t)*(_DWORD *)(v7 + 80);
  v10 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
  v10((v9 + a1) & v33, v6);
  v11 = (v9 & v33) + *(_QWORD *)(v7 + 64);
  v12 = v11 + 7;
  v13 = (_QWORD *)((v11 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v13);
  v14 = *(unsigned __int8 *)(v5 + 80) | v8;
  v15 = ((unint64_t)v13 + (v14 | 7) + 16) & ~(v14 | 7);
  v16 = *(unsigned int *)(v5 + 84);
  v17 = *(unsigned int *)(v7 + 84);
  v18 = v11 + v14;
  v19 = (v12 + (v18 & ~v14)) & 0xFFFFFFFFFFFFFFF8;
  v20 = v19 + 8;
  v21 = v17 | v16;
  if (v17 | v16)
  {
    if (v16 >= v17)
    {
      v22 = v15;
      v17 = v16;
      v23 = v4;
    }
    else
    {
      v22 = (v9 + v15) & v33;
      v23 = v6;
    }
    if (_s7Weather24LocationCompositionStateOwet_0(v22, v17, v23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(v15 + v20))
    goto LABEL_11;
  v24 = *(unsigned __int8 *)(v15 + v20) - 1;
  v25 = v20 & 0xFFFFFFF8;
  if ((v20 & 0xFFFFFFF8) != 0)
  {
    v24 = 0;
    v25 = *(_DWORD *)v15;
  }
  if ((v25 | v24) == 0xFFFFFFFF)
  {
LABEL_11:
    v32(v15, v4);
    v10((v9 + v15) & v33, v6);
    v26 = (v18 + v15) & ~v14;
    v32(v26, v4);
    v27 = v9 + v26;
    v20 = v19 + 8;
    v10(v27 & v33, v6);
  }
LABEL_12:
  v28 = v19 + 9;
  if (v21)
    v28 = v20;
  v29 = ((v15 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v29 + 8));
  v30 = (_QWORD *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v30);
  return swift_release(v30[1]);
}

uint64_t sub_1000B0E74(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  int v40;
  void (*v41)(unint64_t, uint64_t);
  unint64_t v42;

  v4 = (unint64_t)a1 + 15;
  swift_release(*a1);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8));
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v42 = ~(unint64_t)v8;
  v9 = (v5 + v8 + 8) & v42;
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v9, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = ((unint64_t)a1 + v11 + (v8 | 7) + ((v8 + 16) & v42)) & ~(v8 | 7);
  v41 = (void (*)(unint64_t, uint64_t))v10;
  v10(v12, v6);
  swift_release(*(_QWORD *)((v11 + 7 + v12) & 0xFFFFFFFFFFFFF8));
  v13 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + v12;
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8));
  v14 = (_QWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release(*v14);
  v15 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release(*v15);
  v16 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v16 + 8));
  v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v17 + 8));
  v18 = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80) | v8;
  v21 = (v17 + (v20 | 7) + 16) & ~(v20 | 7);
  v22 = *(_DWORD *)(v19 + 84);
  v23 = *(unsigned int *)(v7 + 84);
  v24 = *(_QWORD *)(v19 + 64) + v8;
  v25 = (v24 & v42) + v11;
  v26 = v25 + v20;
  v27 = (v25 + ((v25 + v20) & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 + 8;
  v29 = v23 | v22;
  if (v23 | v22)
  {
    if (v22 >= v23)
    {
      v30 = v21;
      v23 = *(unsigned int *)(v19 + 84);
      v31 = v18;
    }
    else
    {
      v30 = (v24 + v21) & v42;
      v31 = v6;
    }
    if (!_s7Weather24LocationCompositionStateOwet_0(v30, v23, v31))
    {
LABEL_11:
      v40 = v29;
      v34 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v34(v21, v18);
      v41((v24 + v21) & v42, v6);
      v35 = (v26 + v21) & ~v20;
      v34(v35, v18);
      v29 = v40;
      v41((v24 + v35) & v42, v6);
    }
  }
  else
  {
    if (!*(_BYTE *)(v21 + v28))
      goto LABEL_11;
    v32 = *(unsigned __int8 *)(v21 + v28) - 1;
    v33 = v28 & 0xFFFFFFF8;
    if ((v28 & 0xFFFFFFF8) != 0)
    {
      v32 = 0;
      v33 = *(_DWORD *)v21;
    }
    if ((v33 | v32) == 0xFFFFFFFF)
      goto LABEL_11;
  }
  v36 = (_QWORD *)(v28 + v21);
  if (v29)
  {
    v37 = v27 + 8;
  }
  else
  {
    v36 = (_QWORD *)((v21 | 7) + v27 + 9);
    v37 = v27 + 9;
  }
  swift_release(*v36);
  v38 = v21 + ((v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*(_QWORD *)(v38 + 16));
  sub_1000B15F8(*(_QWORD *)(v38 + 32), *(_BYTE *)(v38 + 40));
  sub_1000B15F8(*(_QWORD *)(v38 + 48), *(_BYTE *)(v38 + 56));
  return sub_1000B15F8(*(_QWORD *)(v38 + 64), *(_BYTE *)(v38 + 72));
}

uint64_t sub_1000B1100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1000B1118(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  v8 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  v11 = sub_1000BA294(&qword_100C062D0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for TargetWindowSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  v13 = (char *)a1 + a2[10];
  v14 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  swift_unknownObjectRelease(*(_QWORD *)((char *)a1 + a2[11]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)a1 + a2[12]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13] + 16));
  swift_release(*(_QWORD *)((char *)a1 + a2[14]));
  v16 = (char *)a1 + a2[17];
  v17 = type metadata accessor for AnimatedGradient(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = sub_1000BA294(&qword_100C13D28);
  swift_release(*(_QWORD *)&v16[*(int *)(v18 + 28)]);
  v19 = (uint64_t)a1 + a2[18];
  if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v14))
    v15((char *)v19, v14);
  v20 = sub_1000BA294(&qword_100C13D38);
  swift_release(*(_QWORD *)(v19 + *(int *)(v20 + 28)));
  v21 = (uint64_t)a1 + a2[19];
  v22 = type metadata accessor for TargetWindowSizeClass(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = sub_1000BA294(&qword_100C13D40);
  swift_release(*(_QWORD *)(v21 + *(int *)(v23 + 28)));
  v24 = (uint64_t)a1 + a2[20];
  v25 = type metadata accessor for CollisionViewMetrics(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = sub_1000BA294(&qword_100C13D48);
  swift_release(*(_QWORD *)(v24 + *(int *)(v26 + 28)));
  v27 = (_QWORD *)((char *)a1 + a2[21]);
  swift_release(*v27);
  swift_release(v27[1]);
  swift_release(*(_QWORD *)((char *)a1 + a2[22] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[23] + 8));
  sub_1000BF398(*(_QWORD *)((char *)a1 + a2[24]), *(_QWORD *)((char *)a1 + a2[24] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[25]), *((_BYTE *)a1 + a2[25] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[26] + 8));
  sub_1000BF398(*(_QWORD *)((char *)a1 + a2[27]), *(_QWORD *)((char *)a1 + a2[27] + 8));
  v28 = (_QWORD *)((char *)a1 + a2[28]);
  swift_release(*v28);
  return swift_release(v28[1]);
}

void sub_1000B14B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v2 = a1 + *(int *)(type metadata accessor for AutomationInfoProperty(0) + 24);
  v3 = type metadata accessor for AutomationInfo(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_10006BD8C(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
      break;
    case 1:
      v6 = type metadata accessor for AutomationCellInfo(0);
      switch(swift_getEnumCaseMultiPayload(v2, v6))
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 0xAu:
LABEL_7:
          v7 = *(_QWORD *)(v2 + 8);
          goto LABEL_8;
        case 6u:
LABEL_10:
          v8 = type metadata accessor for WeatherMapOverlayKind(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v2, v8);
          return;
        case 8u:
          swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
          swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
          v7 = *(_QWORD *)(v2 + 40);
          goto LABEL_8;
        case 9u:
        case 0xBu:
          swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
          v7 = *(_QWORD *)(v2 + 24);
LABEL_8:
          swift_bridgeObjectRelease(v7);
          break;
        default:
          return;
      }
      break;
    case 0:
      v5 = type metadata accessor for AutomationViewInfo(0);
      switch(swift_getEnumCaseMultiPayload(v2, v5))
      {
        case 0u:
        case 1u:
        case 3u:
          goto LABEL_7;
        case 2u:
          goto LABEL_10;
        default:
          return;
      }
  }
}

uint64_t sub_1000B15F8(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t type metadata accessor for AutomationInfo(uint64_t a1)
{
  return sub_100098190(a1, qword_100C073E8, (uint64_t)&nominal type descriptor for AutomationInfo);
}

uint64_t type metadata accessor for AutomationInfoProperty(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE8668;
  if (!qword_100BE8668)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AutomationInfoProperty);
  return result;
}

uint64_t sub_1000B1650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  sub_10008D47C(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(int *)(type metadata accessor for AutomationInfoProperty(0) + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for AutomationInfo(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  v12 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v15 = *v9;
    v16 = v9[1];
    v17 = *((_BYTE *)v9 + 16);
    sub_1000B2044(v15, v16, v17);
    *v8 = v15;
    v8[1] = v16;
    *((_BYTE *)v8 + 16) = v17;
  }
  else
  {
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for AutomationCellInfo(0);
      switch(swift_getEnumCaseMultiPayload(v9, v13))
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          goto LABEL_9;
        case 2u:
          v14 = v9[1];
          *v8 = *v9;
          v8[1] = v14;
          swift_bridgeObjectRetain(v14);
          goto LABEL_12;
        case 3u:
          goto LABEL_10;
        case 4u:
          v25 = v9[1];
          *v8 = *v9;
          v8[1] = v25;
          swift_bridgeObjectRetain(v25);
          v19 = v8;
          v20 = v13;
          v21 = 4;
          goto LABEL_21;
        case 5u:
          v26 = v9[1];
          *v8 = *v9;
          v8[1] = v26;
          swift_bridgeObjectRetain(v26);
          v19 = v8;
          v20 = v13;
          v21 = 5;
          goto LABEL_21;
        case 6u:
          v27 = type metadata accessor for WeatherMapOverlayKind(0);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v8, v9, v27);
          v19 = v8;
          v20 = v13;
          v21 = 6;
          goto LABEL_21;
        case 7u:
          v28 = v9[1];
          *v8 = *v9;
          v8[1] = v28;
          swift_bridgeObjectRetain(v28);
          v19 = v8;
          v20 = v13;
          v21 = 7;
          goto LABEL_21;
        case 8u:
          v29 = v9[1];
          *v8 = *v9;
          v8[1] = v29;
          v30 = v9[3];
          v8[2] = v9[2];
          v8[3] = v30;
          v31 = v9[4];
          v32 = v9[5];
          v8[4] = v31;
          v8[5] = v32;
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRetain(v32);
          v19 = v8;
          v20 = v13;
          v21 = 8;
          goto LABEL_21;
        case 9u:
          v33 = v9[1];
          *v8 = *v9;
          v8[1] = v33;
          v34 = v9[2];
          v35 = v9[3];
          v8[2] = v34;
          v8[3] = v35;
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v35);
          v19 = v8;
          v20 = v13;
          v21 = 9;
          goto LABEL_21;
        case 0xAu:
          v36 = v9[1];
          *v8 = *v9;
          v8[1] = v36;
          swift_bridgeObjectRetain(v36);
          v19 = v8;
          v20 = v13;
          v21 = 10;
          goto LABEL_21;
        case 0xBu:
          v37 = v9[1];
          *v8 = *v9;
          v8[1] = v37;
          v38 = v9[2];
          v39 = v9[3];
          v8[2] = v38;
          v8[3] = v39;
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v39);
          v19 = v8;
          v20 = v13;
          v21 = 11;
          goto LABEL_21;
        default:
          goto LABEL_8;
      }
    }
    v13 = type metadata accessor for AutomationViewInfo(0);
    switch(swift_getEnumCaseMultiPayload(v9, v13))
    {
      case 0u:
LABEL_7:
        v18 = v9[1];
        *v8 = *v9;
        v8[1] = v18;
        swift_bridgeObjectRetain(v18);
        v19 = v8;
        v20 = v13;
        v21 = 0;
        goto LABEL_21;
      case 1u:
LABEL_9:
        v22 = v9[1];
        *v8 = *v9;
        v8[1] = v22;
        swift_bridgeObjectRetain(v22);
        v19 = v8;
        v20 = v13;
        v21 = 1;
        goto LABEL_21;
      case 2u:
        v24 = type metadata accessor for WeatherMapOverlayKind(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v8, v9, v24);
LABEL_12:
        v19 = v8;
        v20 = v13;
        v21 = 2;
        goto LABEL_21;
      case 3u:
LABEL_10:
        v23 = v9[1];
        *v8 = *v9;
        v8[1] = v23;
        swift_bridgeObjectRetain(v23);
        v19 = v8;
        v20 = v13;
        v21 = 3;
LABEL_21:
        swift_storeEnumTagMultiPayload(v19, v20, v21);
        break;
      default:
LABEL_8:
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        break;
    }
  }
  swift_storeEnumTagMultiPayload(v8, v10, v12);
  return a1;
}

uint64_t type metadata accessor for AutomationCellInfo(uint64_t a1)
{
  return sub_100098190(a1, qword_100C07538, (uint64_t)&nominal type descriptor for AutomationCellInfo);
}

_QWORD *sub_1000B1994(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t, __n128);
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  int *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void (*v114)(char *, char *, uint64_t);
  char v115;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  swift_retain();
  v10 = sub_1000BA294(&qword_100BC2990);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = 1;
  }
  else
  {
    *v8 = *v9;
    swift_retain();
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v12);
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v17))
    {
      v18 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v19 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v17);
    }
  }
  else
  {
    *v14 = *v15;
    swift_retain();
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v19);
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = sub_1000BA294(&qword_100C062D0);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for TargetWindowSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v24))
    {
      v25 = sub_1000BA294(&qword_100C0A0A0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      v26 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v26 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v24);
    }
  }
  else
  {
    *v21 = *v22;
    swift_retain();
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v23, v26);
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = v29[8];
  sub_10008D47C(*(_QWORD *)v29, v31);
  *(_QWORD *)v28 = v30;
  v28[8] = v31;
  v32 = a3[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = v34[8];
  sub_10008D47C(*(_QWORD *)v34, v36);
  *(_QWORD *)v33 = v35;
  v33[8] = v36;
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for WeatherConditionBackgroundModel(0);
  v114 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
  v114(v38, v39, v40);
  v41 = a3[11];
  v42 = a3[12];
  v43 = *(_OWORD *)((char *)a2 + v41);
  *(_OWORD *)((char *)a1 + v41) = v43;
  v44 = (char *)a1 + v42;
  v45 = (char *)a2 + v42;
  v46 = *(_OWORD *)((char *)a2 + v42 + 24);
  *(_OWORD *)((char *)a1 + v42 + 24) = v46;
  v47 = v46;
  v48 = **(void (***)(char *, char *, uint64_t))(v46 - 8);
  swift_unknownObjectRetain(v43);
  v48(v44, v45, v47);
  v49 = a3[13];
  v50 = a3[14];
  v51 = (char *)a1 + v49;
  v52 = (char *)a2 + v49;
  *(_OWORD *)v51 = *(_OWORD *)v52;
  v53 = *((_QWORD *)v52 + 2);
  *((_QWORD *)v51 + 2) = v53;
  *(_QWORD *)((char *)a1 + v50) = *(_QWORD *)((char *)a2 + v50);
  v54 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *((_BYTE *)a1 + v54) = *((_BYTE *)a2 + v54);
  v55 = a3[17];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = type metadata accessor for AnimatedGradient(0);
  v59 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v58 - 8) + 16);
  swift_bridgeObjectRetain(v53);
  v60 = swift_retain();
  v59(v56, v57, v58, v60);
  v61 = sub_1000BA294(&qword_100C13D28);
  *(_QWORD *)&v56[*(int *)(v61 + 28)] = *(_QWORD *)&v57[*(int *)(v61 + 28)];
  v62 = a3[18];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v64, 1, v40))
  {
    v65 = sub_1000BA294(&qword_100BC4678);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v114(v63, v64, v40);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v63, 0, 1, v40);
  }
  v66 = sub_1000BA294(&qword_100C13D38);
  *(_QWORD *)&v63[*(int *)(v66 + 28)] = *(_QWORD *)&v64[*(int *)(v66 + 28)];
  v67 = a3[19];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = type metadata accessor for TargetWindowSizeClass(0);
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
  {
    v71 = sub_1000BA294(&qword_100C0A0A0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
  }
  v72 = sub_1000BA294(&qword_100C13D40);
  *(_QWORD *)&v68[*(int *)(v72 + 28)] = *(_QWORD *)&v69[*(int *)(v72 + 28)];
  v73 = a3[20];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = type metadata accessor for CollisionViewMetrics(0);
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v76))
  {
    v77 = sub_1000BA294(&qword_100C13D20);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, v76);
  }
  v78 = sub_1000BA294(&qword_100C13D48);
  *(_QWORD *)&v74[*(int *)(v78 + 28)] = *(_QWORD *)&v75[*(int *)(v78 + 28)];
  v79 = a3[21];
  v80 = a3[22];
  v81 = (_QWORD *)((char *)a1 + v79);
  v82 = (_QWORD *)((char *)a2 + v79);
  v83 = v82[1];
  *v81 = *v82;
  v81[1] = v83;
  v84 = (_QWORD *)((char *)a1 + v80);
  v85 = (_QWORD *)((char *)a2 + v80);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = a3[23];
  v88 = a3[24];
  v89 = (_QWORD *)((char *)a1 + v87);
  v90 = (_QWORD *)((char *)a2 + v87);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  v92 = a3;
  v93 = (char *)a1 + v88;
  v94 = *(_QWORD *)((char *)a2 + v88);
  v95 = *(_QWORD *)((char *)a2 + v88 + 8);
  v115 = *((_BYTE *)a2 + v88 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100037094(v94, v95);
  *(_QWORD *)v93 = v94;
  *((_QWORD *)v93 + 1) = v95;
  v93[16] = v115;
  v96 = v92[25];
  v97 = (char *)a1 + v96;
  v98 = (char *)a2 + v96;
  v99 = *(_QWORD *)v98;
  LOBYTE(v83) = v98[8];
  sub_10008D47C(*(_QWORD *)v98, v83);
  *(_QWORD *)v97 = v99;
  v97[8] = v83;
  v100 = v92[26];
  v101 = v92[27];
  v102 = (_QWORD *)((char *)a1 + v100);
  v103 = (_QWORD *)((char *)a2 + v100);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  v105 = (char *)a1 + v101;
  v106 = *(_QWORD *)((char *)a2 + v101);
  v107 = *(_QWORD *)((char *)a2 + v101 + 8);
  LOBYTE(v86) = *((_BYTE *)a2 + v101 + 16);
  swift_retain();
  sub_100037094(v106, v107);
  *(_QWORD *)v105 = v106;
  *((_QWORD *)v105 + 1) = v107;
  v105[16] = v86;
  v108 = v92[28];
  v109 = v92[29];
  v110 = (_QWORD *)((char *)a1 + v108);
  v111 = (_QWORD *)((char *)a2 + v108);
  v112 = v111[1];
  *v110 = *v111;
  v110[1] = v112;
  *(_DWORD *)((char *)a1 + v109) = *(_DWORD *)((char *)a2 + v109);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for AutomationViewInfo(uint64_t a1)
{
  return sub_100098190(a1, qword_100C07490, (uint64_t)&nominal type descriptor for AutomationViewInfo);
}

uint64_t sub_1000B2044(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t type metadata accessor for PageContainer(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageContainer);
}

uint64_t type metadata accessor for Page(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Page);
}

uint64_t sub_1000B2078(char a1)
{
  _BYTE v2[9];

  v2[0] = a1;
  State.init(wrappedValue:)(v2, &type metadata for Bool);
  return v2[1];
}

void sub_1000B20B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  sub_10008900C();
  a17 = v21;
  a18 = v22;
  sub_1000C6C6C();
  sub_10009BD9C();
  __chkstk_darwin(v23);
  v25 = (char *)&a9 - v24;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))((char *)&a9 - v24, v19, v18);
  swift_storeEnumTagMultiPayload(v25, v20, 1);
  sub_1000C22F0();
  sub_10009D300();
}

uint64_t sub_1000B211C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v56;
  Swift::String v57;

  v16 = sub_1000BA294(&qword_100BC6A10);
  v17 = swift_allocObject(v16, 48, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10097CA50;
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  v18 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v18 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v18
    || (a3 == a1 ? (v19 = a4 == a2) : (v19 = 0),
        v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a1, a2, 0) & 1) != 0))
  {
    swift_bridgeObjectRetain(a2);
  }
  else
  {
    v39 = (void *)objc_opt_self(NSBundle);
    v40 = objc_msgSend(v39, "mainBundle", swift_bridgeObjectRetain(a2).n128_f64[0]);
    v57._object = (void *)0x8000000100A150E0;
    v41._countAndFlagsBits = 0x696C20736C656546;
    v41._object = (void *)0xED0000402520656BLL;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v57._countAndFlagsBits = 0xD000000000000055;
    v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v57);

    v44 = sub_1000BA294(&qword_100BC3C38);
    v45 = swift_allocObject(v44, 72, 7);
    *(_OWORD *)(v45 + 16) = xmmword_10097CA50;
    *(_QWORD *)(v45 + 56) = &type metadata for String;
    *(_QWORD *)(v45 + 64) = sub_1000B2E24();
    *(_QWORD *)(v45 + 32) = a3;
    *(_QWORD *)(v45 + 40) = a4;
    swift_bridgeObjectRetain(a4);
    v46 = String.init(format:_:)(v43._countAndFlagsBits, v43._object, v45);
    v48 = v47;
    swift_bridgeObjectRelease(v43._object);
    v49 = *(_QWORD *)(v17 + 16);
    if (v49 >= *(_QWORD *)(v17 + 24) >> 1)
    {
      sub_1000B2E08();
      v17 = v53;
    }
    *(_QWORD *)(v17 + 16) = v49 + 1;
    v50 = v17 + 16 * v49;
    *(_QWORD *)(v50 + 32) = v46;
    *(_QWORD *)(v50 + 40) = v48;
  }
  v20 = *(_QWORD *)(v17 + 16);
  v21 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(a6);
  if (v20 >= v21 >> 1)
  {
    sub_1000B2E08();
    v17 = v51;
  }
  *(_QWORD *)(v17 + 16) = v20 + 1;
  v22 = v17 + 16 * v20;
  *(_QWORD *)(v22 + 32) = a5;
  *(_QWORD *)(v22 + 40) = a6;
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v56._countAndFlagsBits = 0xD00000000000005ALL;
  v56._object = (void *)0x8000000100A15140;
  v24._countAndFlagsBits = 0x2C40252068676948;
  v24._object = (void *)0xEF402520776F4C20;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v56);

  v27 = sub_1000BA294(&qword_100BC3C38);
  v28 = swift_allocObject(v27, 112, 7);
  *(_OWORD *)(v28 + 16) = xmmword_10097DA20;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v29 = sub_1000B2E24();
  *(_QWORD *)(v28 + 32) = a7;
  *(_QWORD *)(v28 + 40) = a8;
  *(_QWORD *)(v28 + 96) = &type metadata for String;
  *(_QWORD *)(v28 + 104) = v29;
  *(_QWORD *)(v28 + 64) = v29;
  *(_QWORD *)(v28 + 72) = a9;
  *(_QWORD *)(v28 + 80) = a10;
  swift_bridgeObjectRetain(a8);
  swift_bridgeObjectRetain(a10);
  v30 = String.init(format:_:)(v26._countAndFlagsBits, v26._object, v28);
  v32 = v31;
  swift_bridgeObjectRelease(v26._object);
  v33 = *(_QWORD *)(v17 + 16);
  if (v33 >= *(_QWORD *)(v17 + 24) >> 1)
  {
    sub_1000B2E08();
    v17 = v52;
  }
  *(_QWORD *)(v17 + 16) = v33 + 1;
  v34 = v17 + 16 * v33;
  *(_QWORD *)(v34 + 32) = v30;
  *(_QWORD *)(v34 + 40) = v32;
  v35 = sub_1000BA294(&qword_100BF1280);
  v36 = sub_1000B2E60();
  v37 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v35, v36);
  swift_bridgeObjectRelease(v17);
  return v37;
}

uint64_t sub_1000B2500()
{
  uint64_t v0;
  uint64_t v1;

  return Tips.Parameter.wrappedValue.setter(v1 - 120, v0);
}

uint64_t sub_1000B250C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, a3);
}

double sub_1000B2518()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

void sub_1000B2520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *v9 = v10;
  v9[1] = v12;
  v9[2] = v11;
  v9[3] = a5;
  v9[4] = a6;
  v9[5] = a7;
  v9[6] = a8;
  v9[7] = v8;
  v9[8] = v13;
  v9[9] = v14;
}

uint64_t sub_1000B2568(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000B257C(uint64_t a1)
{
  return String.hash(into:)(a1, 1701869940, 0xE400000000000000);
}

id sub_1000B258C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000B2594()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B25B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v2, v1);
}

void sub_1000B25C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

double sub_1000B25D0()
{
  return 0.0;
}

uint64_t sub_1000B25E8()
{
  return type metadata accessor for ListLocationRowView(0);
}

uint64_t sub_1000B2604(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, *(_QWORD *)(v1 - 352));
}

void sub_1000B2628()
{
  uint64_t v0;
  uint64_t *v1;

  sub_100021AA4(v0, v1);
}

uint64_t sub_1000B2670()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000B267C()
{
  return type metadata accessor for Date(0);
}

_QWORD *sub_1000B269C()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, v1);
}

_QWORD *sub_1000B26C8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000B26D8()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000B26E0()
{
  return static os_log_type_t.error.getter();
}

void sub_1000B26F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(a1, *(_QWORD *)(v3 - 96), a3);
}

void sub_1000B2704()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 296) = 0;
}

uint64_t sub_1000B2718()
{
  return UUID.init()();
}

double sub_1000B2724()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(int *)(v1 + 52) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000B2734@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000B2758(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t sub_1000B2758@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  char v33;
  uint64_t (*v34)(int *, uint64_t);
  _BYTE *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  Swift::Double v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_BYTE *, void (*)(char *, uint64_t), uint64_t);
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  void (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  void (*v77)(_BYTE *, uint64_t);
  _BYTE v79[12];
  int v80;
  uint64_t (*v81)(int *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t);
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  void (*v108)(char *, uint64_t);
  void (*v109)(char *, uint64_t);
  _BYTE *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;

  v101 = a6;
  v92 = a5;
  v94 = a4;
  v113 = a3;
  v106 = a2;
  v102 = a7;
  v8 = sub_1000BA294(&qword_100BCB338);
  __chkstk_darwin(v8);
  v100 = &v79[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (void (*)(uint64_t))type metadata accessor for WeatherConditionIcon(0);
  v96 = *((_QWORD *)v10 - 1);
  v97 = v10;
  __chkstk_darwin(v10);
  v91 = &v79[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v88 = type metadata accessor for TimeZone(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v112 = &v79[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = sub_1000BA294(&qword_100BC4E68);
  v111 = *(_QWORD *)(v99 - 8);
  v13 = __chkstk_darwin(v99);
  v98 = &v79[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v110 = &v79[-v16];
  v17 = __chkstk_darwin(v15);
  v109 = (void (*)(char *, uint64_t))&v79[-v18];
  __chkstk_darwin(v17);
  v108 = &v79[-v19];
  v20 = type metadata accessor for CurrentWeather(0);
  v104 = *(_QWORD *)(v20 - 8);
  v105 = v20;
  __chkstk_darwin(v20);
  v103 = &v79[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v95 = type metadata accessor for Precipitation(0);
  v93 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v23 = &v79[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v90 = type metadata accessor for WeatherCondition(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v25 = &v79[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v107 = &v79[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = __chkstk_darwin(v28);
  v32 = (int *)&v79[-v31];
  DayWeather.date.getter(v30);
  v33 = static Date.== infix(_:_:)(v32, a1);
  v85 = v27;
  v34 = *(uint64_t (**)(int *, uint64_t))(v27 + 8);
  v86 = v26;
  v81 = v34;
  v34(v32, v26);
  v35 = v25;
  DayWeather.conditionOfRelevance(isToday:)(v33 & 1);
  v114 = v23;
  LODWORD(v83) = v33 & 1;
  v37 = DayWeather.precipitationOfRelevance(isToday:)(v23, v33 & 1);
  if ((v33 & 1) != 0)
  {
    v38 = type metadata accessor for WeatherData(0);
    v39 = v103;
    v40 = WeatherDataModel.currentWeather.getter(v38);
    v80 = CurrentWeather.isDaylight.getter(v40);
    v36 = (*(uint64_t (**)(_BYTE *, uint64_t))(v104 + 8))(v39, v105);
  }
  else
  {
    v80 = 1;
  }
  v41 = Double.roundedPrecipitationPercent.getter(v36, v37);
  v42 = (void (*)(char *, uint64_t))v108;
  v43 = DayWeather.lowTemperature.getter();
  v44 = v109;
  v45 = DayWeather.highTemperature.getter(v43);
  v46 = DayWeather.date.getter(v45);
  v47 = v32;
  v48 = v112;
  Location.timeZone.getter(v46);
  v49 = v35;
  v50 = (uint64_t)v35;
  v51 = (uint64_t)v42;
  v52 = v42;
  v53 = v44;
  v83 = sub_10030CD70(v41, (uint64_t)v47, v50, (uint64_t)v114, v51, v44, v83, (uint64_t)v48);
  v82 = v54;
  (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v48, v88);
  v84 = v47;
  v55 = v86;
  v56 = v81(v47, v86);
  DayWeather.date.getter(v56);
  v57 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v85 + 16))(v107, v92, v55);
  Location.timeZone.getter(v57);
  v58 = *(void (**)(_BYTE *, void (*)(char *, uint64_t), uint64_t))(v111 + 16);
  v59 = v99;
  v58(v110, v52, v99);
  v60 = (uint64_t)v98;
  v58(v98, v53, v59);
  v61 = v91;
  v62 = WeatherCondition.conditionIcon(isDaylight:isFilled:forLightBackground:)(v80 & 1, 1, 0);
  v94 = WeatherConditionIcon.name.getter(v62);
  v92 = v63;
  v64.n128_f64[0] = (*(double (**)(_BYTE *, void (*)(uint64_t)))(v96 + 8))(v61, v97);
  v65 = (uint64_t)v49;
  v66 = (void (*)(uint64_t))WeatherCondition.description.getter(v64);
  v97 = v67;
  v68 = v65;
  LODWORD(v96) = WeatherCondition.isPrecipitation.getter(v66);
  v69 = v93;
  v70 = (uint64_t)v100;
  v71 = v95;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16))(v100, v114, v95);
  _s7Weather24LocationCompositionStateOwst_0(v70, 0, 1, v71);
  v72 = type metadata accessor for WeatherData(0);
  v73 = v103;
  v74 = WeatherDataModel.currentWeather.getter(v72);
  LOBYTE(v65) = CurrentWeather.isDaylight.getter(v74);
  (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v73, v105);
  v75 = *(_BYTE *)(v113 + 56);
  swift_bridgeObjectRetain(v101);
  sub_1000CEEA8(v84, (uint64_t)v107, (uint64_t)v112, (uint64_t)v110, v60, v94, v92, v66, v102, v41, v97, v96 & 1, v70, v65 & 1, v83, v82, v76, v75);
  v77 = *(void (**)(_BYTE *, uint64_t))(v111 + 8);
  v77(v109, v59);
  v77(v108, v59);
  (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v114, v71);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v68, v90);
}

void sub_1000B2E08()
{
  sub_1000D0444();
}

unint64_t sub_1000B2E24()
{
  unint64_t result;

  result = qword_100BCEF50;
  if (!qword_100BCEF50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100BCEF50);
  }
  return result;
}

unint64_t sub_1000B2E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BD35B0;
  if (!qword_100BD35B0)
  {
    v1 = sub_100075EB0(&qword_100BF1280);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100BD35B0);
  }
  return result;
}

void sub_1000B2EA4(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_100080C0C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000B2EB0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 224));
}

uint64_t sub_1000B2EB8()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

uint64_t sub_1000B2ED8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 1432));
}

id sub_1000B2EE0(void *a1)
{
  return objc_msgSend(a1, "mainBundle");
}

uint64_t sub_1000B2EF0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000B2EF8()
{
  return type metadata accessor for WeatherDataOverrides(0);
}

uint64_t sub_1000B2F08()
{
  return type metadata accessor for WeatherDataModel(0);
}

uint64_t sub_1000B2F24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 16) = v1;
  return result;
}

uint64_t sub_1000B2F30(uint64_t a1)
{
  uint64_t v1;

  return Environment.init<A>(_:)(v1, v1, a1);
}

void sub_1000B2F40(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

uint64_t sub_1000B2F48(uint64_t a1)
{
  uint64_t v1;

  return static _SetStorage.resize(original:capacity:move:)(a1, v1, 0);
}

unint64_t sub_1000B2F58()
{
  return sub_100665568();
}

unint64_t sub_1000B2F60()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return sub_100670A5C();
}

double sub_1000B2F6C@<D0>(uint64_t a1@<X8>)
{
  return sub_100685998(a1);
}

uint64_t sub_1000B2F74(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1000B2F80(uint64_t a1)
{
  _QWORD *v1;

  return String.write(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1000B2F8C()
{
  return sub_1001B8CA4();
}

uint64_t sub_1000B2F98()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v0);
}

uint64_t sub_1000B2FA4()
{
  return sub_10006BE54();
}

uint64_t sub_1000B2FAC@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000B2FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000B2FFC()
{
  return type metadata accessor for WeatherDataOverrides(0);
}

uint64_t sub_1000B3004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000B3010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 24);
}

uint64_t sub_1000B301C()
{
  return static String.read(from:)();
}

uint64_t sub_1000B3024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v0, v2);
}

uint64_t sub_1000B3034(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 4);
}

void sub_1000B3040()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100021A14(v1, v0);
}

void sub_1000B304C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

uint64_t sub_1000B3080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of WeatherLocationCoalescenceManagerType.coalesceLocations(currentLocation:locationList:locationsOfInterest:displayContextByLocation:)(a1, a2, a3, a4, v4, v5);
}

void sub_1000B308C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

double sub_1000B3094@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  result = *(double *)(v2 + a1);
  *(double *)(v1 + a1) = result;
  return result;
}

uint64_t sub_1000B30A0()
{
  uint64_t v0;

  return swift_endAccess(v0 - 128);
}

uint64_t sub_1000B30A8()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000B30B0()
{
  return type metadata accessor for TaskPriority(0);
}

void sub_1000B30B8(uint64_t (*a1)(_QWORD)@<X1>, uint64_t a2@<X8>)
{
  sub_1000215BC(*(_QWORD *)(a2 - 256), a1);
}

double sub_1000B30C0()
{
  double v0;

  return v0;
}

uint64_t sub_1000B30FC()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000B3108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000B3110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 33, 0);
}

double sub_1000B3120()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 72) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000B314C()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000B3154()
{
  uint64_t v0;

  return v0;
}

double sub_1000B3160()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000B3174(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000B317C()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

void sub_1000B318C()
{
  sub_10054A1B4();
}

uint64_t sub_1000B3194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 224) + 8))(v1, v0);
}

uint64_t sub_1000B31A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return String.write(to:)(v3, a2, a3);
}

uint64_t sub_1000B31B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000B31B8(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 9);
}

void sub_1000B31C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v7;
  v0[7] = v8;
  v0[8] = v9;
}

uint64_t sub_1000B31E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

void sub_1000B31EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, v2, v1);
}

uint64_t sub_1000B31F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A68(v2, a2);
}

uint64_t sub_1000B3224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B3234()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000B3248()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 64)));
}

uint64_t sub_1000B3258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 128) + a1;
}

void sub_1000B326C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

uint64_t sub_1000B3274@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000B327C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1144);
}

uint64_t sub_1000B3288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void sub_1000B3290()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 1;
}

double sub_1000B329C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_1000B32B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void sub_1000B32B8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (a1 / v3);
}

uint64_t sub_1000B32C8()
{
  return UUID.uuidString.getter();
}

uint64_t sub_1000B32D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.write(to:)(v2, a1, a2);
}

uint64_t sub_1000B32EC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = v0;
  return v1 - 128;
}

uint64_t sub_1000B32F8()
{
  return WeatherDataModel.currentWeather.getter();
}

void sub_1000B3300(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000B3324(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

void sub_1000B3324(uint64_t a1@<X2>, void *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  Swift::String_optional v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *object;
  uint64_t countAndFlagsBits;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v79 = a5;
  v78 = a4;
  object = a2;
  countAndFlagsBits = a3;
  v71 = a1;
  v5 = sub_1000BA294(&qword_100BC4E68);
  v6 = __chkstk_darwin(v5);
  v77 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v76 = (char *)&v65 - v8;
  v9 = type metadata accessor for Precipitation(0);
  __chkstk_darwin(v9);
  v75 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WeatherCondition(0);
  v69 = *(_QWORD *)(v11 - 8);
  v70 = v11;
  v12 = __chkstk_darwin(v11);
  v74 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v65 - v14;
  v16 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v17 = __chkstk_darwin(v16);
  v80 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v66 = (uint64_t)&v65 - v19;
  v68 = (void (*)(char *, uint64_t))type metadata accessor for TimeZone(0);
  v20 = *((_QWORD *)v68 - 1);
  __chkstk_darwin(v68);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v81 - 8);
  v24 = __chkstk_darwin(v81);
  v26 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v65 - v28;
  v30 = HourWeather.date.getter(v27);
  v65 = v22;
  Location.timeZone.getter(v30);
  Date.zeroMinutes(timeZone:)(v22);
  (*(void (**)(char *, _QWORD *))(v20 + 8))(v22, v68);
  v31 = *(void (**)(char *, uint64_t))(v23 + 8);
  v67 = v26;
  v68 = v31;
  v32 = v26;
  v33 = v81;
  v31(v26, v81);
  v34 = v66;
  v35 = v80;
  sub_1000B3798(v66, v80, v71, (uint64_t)v29, (uint64_t)object, countAndFlagsBits);
  v36 = v32;
  v37 = v29;
  v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v36, v29, v33);
  v39 = (uint64_t)v65;
  v40 = Location.timeZone.getter(v38);
  HourWeather.condition.getter(v40);
  v41 = v34;
  v42 = Date.isDaytime(sunrise:sunset:)(v34, v35);
  v43 = WeatherCondition.conditionIconName(isDaytime:)(v42 & 1);
  object = v43.value._object;
  countAndFlagsBits = v43.value._countAndFlagsBits;
  v44 = v70;
  v45 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
  v46 = v45(v15, v70);
  v47.n128_f64[0] = HourWeather.condition.getter(v46);
  v71 = WeatherCondition.description.getter(v47);
  v69 = v48;
  v49 = v45(v15, v44);
  v50 = HourWeather.precipitationChance.getter(v49);
  v52 = Double.roundedPrecipitationPercent.getter(v50, v51);
  v53 = v74;
  HourWeather.condition.getter(v54);
  LOBYTE(v15) = WeatherCondition.isPrecipitation.getter(v55);
  v56 = v45(v53, v44);
  v57 = (uint64_t)v75;
  v58 = HourWeather.precipitation.getter(v56);
  v59 = (uint64_t)v76;
  v60 = HourWeather.temperature.getter(v58);
  v61 = (uint64_t)v77;
  CurrentWeather.temperature.getter(v60);
  sub_1000B375C();
  v62 = static NSDateFormatter.prevailingPeriodSymbols.getter();
  v63 = v79;
  sub_1000E690C((uint64_t)v67, v39, countAndFlagsBits, (uint64_t)object, v71, v69, v15 & 1, v57, v79, v52, v59, v61, v62, 0);
  sub_100021A14(v80, (uint64_t *)&unk_100BD35A0);
  sub_100021A14(v41, (uint64_t *)&unk_100BD35A0);
  v68(v37, v81);
  v64 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  swift_storeEnumTagMultiPayload(v63, v64, 2);
}

unint64_t sub_1000B375C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BC4E58;
  if (!qword_100BC4E58)
  {
    v1 = objc_opt_self(NSDateFormatter);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100BC4E58);
  }
  return result;
}

uint64_t sub_1000B3798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v42 = a5;
  v43 = a6;
  v46 = a1;
  v47 = a2;
  v7 = type metadata accessor for SunEvents(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v13 = sub_1000BA294(&qword_100BCB138);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v42 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v42 - v20;
  v22 = type metadata accessor for DayWeather(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Calendar.isDateInToday(_:)(a4) & 1) != 0)
  {
    sub_10003773C(v42, (uint64_t)v21, &qword_100BCB138);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v21, 1, v22) != 1)
    {
      v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
      v33 = DayWeather.sun.getter(v32);
      SunEvents.sunrise.getter(v33);
      v34 = v45;
      v35 = *(uint64_t (**)(char *, uint64_t))(v44 + 8);
      v36 = v35(v12, v45);
      v37 = DayWeather.sun.getter(v36);
      SunEvents.sunset.getter(v37);
      v35(v10, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    }
    sub_100021A14((uint64_t)v21, &qword_100BCB138);
    v26 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0(v46, 1, 1, v26);
    v27 = v47;
    v28 = v26;
    return _s7Weather24LocationCompositionStateOwst_0(v27, 1, 1, v28);
  }
  v29 = v43;
  sub_10003773C(v43, (uint64_t)v19, &qword_100BCB138);
  v30 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v19, 1, v22);
  if ((_DWORD)v30 == 1)
  {
    sub_100021A14((uint64_t)v19, &qword_100BCB138);
    v31 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0(v46, 1, 1, v31);
  }
  else
  {
    DayWeather.sun.getter(v30);
    v39 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v19, v22);
    SunEvents.sunrise.getter(v39);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
  }
  sub_10003773C(v29, (uint64_t)v16, &qword_100BCB138);
  v40 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v16, 1, v22);
  if ((_DWORD)v40 == 1)
  {
    sub_100021A14((uint64_t)v16, &qword_100BCB138);
    v28 = type metadata accessor for Date(0);
    v27 = v47;
    return _s7Weather24LocationCompositionStateOwst_0(v27, 1, 1, v28);
  }
  DayWeather.sun.getter(v40);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v22);
  SunEvents.sunset.getter(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v12, v45);
}

void sub_1000B3AF8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 216), a2);
}

void sub_1000B3B00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(v2, a2);
}

uint64_t sub_1000B3B08(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t sub_1000B3B14()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

void sub_1000B3B20()
{
  sub_100112494();
}

void sub_1000B3B44(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

void sub_1000B3B4C(uint64_t a1)
{
  uint64_t *v1;

  sub_100021A14(a1, v1);
}

uint64_t sub_1000B3B54()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[165] + 8))(v0[177], v0[167]);
}

uint64_t sub_1000B3B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

uint64_t sub_1000B3B70()
{
  return type metadata accessor for ConditionDetailPlatterViewModel(0);
}

void sub_1000B3B78()
{
  sub_1000FFAB4();
}

uint64_t sub_1000B3B80()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_1000B3B8C()
{
  uint64_t (*v0)(void);

  return v0();
}

double sub_1000B3B94()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000B3B9C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B3BAC()
{
  uint64_t v0;

  return sub_1000986F0(v0);
}

void sub_1000B3BB4()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

__n128 sub_1000B3BD0()
{
  uint64_t v0;
  __n128 result;
  __int128 v2;

  result = *(__n128 *)(v0 - 176);
  v2 = *(_OWORD *)(v0 - 160);
  *(__n128 *)(v0 - 256) = result;
  *(_OWORD *)(v0 - 240) = v2;
  return result;
}

uint64_t sub_1000B3BDC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000B3C04()
{
  return type metadata accessor for LocationPreviewViewState(0);
}

uint64_t sub_1000B3C0C(double *a1)
{
  return sub_10043A0A0(*a1);
}

uint64_t sub_1000B3C24()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 32)));
}

uint64_t sub_1000B3C30()
{
  return 1684957559;
}

uint64_t sub_1000B3C3C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

void sub_1000B3C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v61 = a4;
  v50 = a1;
  v52 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  __chkstk_darwin(v52);
  v51 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  __chkstk_darwin(v7);
  v57 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v58 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (char *)&v48 - v12;
  v13 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  v14 = __chkstk_darwin(v13);
  v59 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v64 = (uint64_t)&v48 - v17;
  v18 = __chkstk_darwin(v16);
  v63 = (uint64_t)&v48 - v19;
  v20 = __chkstk_darwin(v18);
  v69 = (uint64_t)&v48 - v21;
  __chkstk_darwin(v20);
  v62 = (uint64_t)&v48 - v23;
  v56 = a3;
  v49 = a2;
  if (a3 == a2)
    return;
  v55 = *(_QWORD *)(v22 + 72);
  v67 = v55 * v56;
  v68 = v55 * (v56 - 1);
  v53 = v9;
  v54 = v13;
  while (2)
  {
    v24 = 0;
    v25 = v50;
    do
    {
      v26 = v62;
      v27 = *v61;
      v60 = v67 + v24;
      sub_100095B78(v67 + v24 + v27, v62, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      sub_100095B78(v68 + v24 + v27, v69, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v28 = v63;
      sub_100095B78(v26, v63, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      if (swift_getEnumCaseMultiPayload(v28, v13) > 1)
      {
        v29 = v51;
        v30 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
        sub_10007C77C(v63, v51, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
        v31 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
        v31(v65, v29 + *(int *)(v52 + 52), v9);
      }
      else
      {
        v29 = v57;
        v30 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
        sub_10007C77C(v63, v57, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
        v31 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
        v31(v65, v29, v9);
      }
      sub_1000215BC(v29, v30);
      v32 = v58;
      v33 = v64;
      sub_100095B78(v69, v64, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33, v13);
      if (EnumCaseMultiPayload)
      {
        v9 = v53;
        if (EnumCaseMultiPayload != 1)
        {
          v40 = v51;
          v36 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
          sub_10007C77C(v64, v51, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
          v31(v58, v40 + *(int *)(v52 + 52), v9);
          v39 = v40;
          v32 = v58;
          goto LABEL_13;
        }
        v35 = v57;
        v36 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
        sub_10007C77C(v64, v57, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
        v37 = v32;
        v38 = v35;
      }
      else
      {
        v35 = v57;
        v36 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
        sub_10007C77C(v64, v57, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
        v37 = v32;
        v38 = v35;
        v9 = v53;
      }
      v31(v37, v38, v9);
      v39 = v35;
LABEL_13:
      sub_1000215BC(v39, v36);
      v41 = v65;
      v42 = static Date.< infix(_:_:)(v65, v32);
      v43 = v32;
      v44 = *(void (**)(char *, uint64_t))(v66 + 8);
      v44(v43, v9);
      v44(v41, v9);
      sub_1000215BC(v69, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      sub_1000215BC(v62, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v13 = v54;
      if ((v42 & 1) == 0)
        break;
      v45 = *v61;
      if (!*v61)
      {
        __break(1u);
        return;
      }
      v46 = v45 + v67 + v24;
      v47 = v45 + v68 + v24;
      sub_10007C77C(v46, v59, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      swift_arrayInitWithTakeFrontToBack(v46, v47, 1, v13);
      sub_10007C77C(v59, v47, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v24 -= v55;
      ++v25;
    }
    while (v56 != v25);
    v68 += v55;
    v67 += v55;
    if (++v56 != v49)
      continue;
    break;
  }
}

double sub_1000B4128(uint64_t a1, uint64_t a2)
{
  unsigned int EnumCaseMultiPayload;
  double result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
    v10 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
    v11 = a1 + v10[9];
    v12 = type metadata accessor for Precipitation(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v10[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v10[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v10[12] + 8));
    v13 = a1 + v10[13];
    v14 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = a1 + v10[14];
    v16 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v9 = (_QWORD *)(a1 + v10[16]);
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
      return result;
    v5 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    v6 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    v7 = a1 + v6[5];
    v8 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[6]));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[7] + 8));
    v9 = (_QWORD *)(a1 + v6[8] + 8);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(*v9).n128_u64[0];
  return result;
}

uint64_t sub_1000B42C0()
{
  return type metadata accessor for String.LocalizationValue(0);
}

uint64_t sub_1000B42DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(a1, a2, a3, a4, a5, a6, a7, 2);
}

double sub_1000B42E4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

BOOL sub_1000B42F4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B4304@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 120) = a2;
  return swift_beginAccess(a1, v2 - 112, 33, 0);
}

uint64_t sub_1000B4328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t sub_1000B4340(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a1);
  *v5 = a2;
  v5[1] = a3;
  return 0;
}

uint64_t sub_1000B4380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000B4394()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_1000B439C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000B43A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t sub_1000B43B0(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1000B43C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

uint64_t sub_1000B43C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 264))();
}

void sub_1000B43D4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000B43E4(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 144), 1, 1, a1);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 136), 1, 1, *(_QWORD *)(v1 - 88));
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000B4424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10007C714(*(_QWORD *)(v2 - 168), v1 + a1);
}

uint64_t sub_1000B4430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1007D4B3C(a1, a2, v2);
}

uint64_t sub_1000B4438@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Date.== infix(_:_:)(v2 + a1, v1 + a1);
}

uint64_t sub_1000B4444(uint64_t a1, uint64_t *a2)
{
  return sub_100075EB0(a2);
}

uint64_t sub_1000B4450()
{
  return _s13CalendarStateVMa(0);
}

uint64_t sub_1000B4458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000B4474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000B4490()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_1000B44A4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1001D7CD0();
}

_QWORD *sub_1000B44C8()
{
  _QWORD *v0;

  return sub_1000DB418(v0, v0[3]);
}

uint64_t sub_1000B44E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void *sub_1000B44F8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xC2uLL);
}

void sub_1000B4500(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_1000B4514()
{
  uint64_t v0;

  return sub_10020C200(v0);
}

uint64_t sub_1000B4524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  NSBundle v3;
  unint64_t v4;
  Swift::String v5;

  v4 = (a3 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v3, v5, *(Swift::String *)&a2)._countAndFlagsBits;
}

uint64_t sub_1000B4544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

NSString sub_1000B4550()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000B4560(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000B456C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000B4580()
{
  uint64_t v0;

  return sub_100080C44(v0);
}

uint64_t sub_1000B4588()
{
  uint64_t v0;

  return sub_100080C44(v0);
}

void sub_1000B4590(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

uint64_t sub_1000B4598(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_1000CE1C8(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000B45A4()
{
  return type metadata accessor for ConditionDetailViewAction(0);
}

uint64_t sub_1000B45AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000B45B4()
{
  uint64_t v0;

  return sub_10023269C(v0 + 288, v0 + 144);
}

uint64_t sub_1000B45C0()
{
  return type metadata accessor for ConditionDetailLegend(0);
}

uint64_t sub_1000B45D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10007CFB8(v2, a2);
}

void sub_1000B45D8(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 96) = 1752392040;
}

void sub_1000B45F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  sub_100248174(a1, a2, v4, a4, 0);
}

uint64_t sub_1000B4608()
{
  return type metadata accessor for WeatherMapOverlayKind(0);
}

uint64_t sub_1000B461C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t sub_1000B4634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000B4640()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.startIndex.getter(v1, v0);
}

uint64_t sub_1000B4650()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v0 + 104))(v1);
}

uint64_t sub_1000B465C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return Setting.init(_:defaultValue:domain:access:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3, v4, v3);
}

uint64_t sub_1000B466C()
{
  return type metadata accessor for Access(0);
}

uint64_t sub_1000B4674()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, v0);
}

uint64_t sub_1000B4684()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000B4698(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 96), 1, 1, a1);
}

uint64_t sub_1000B46B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

__n128 sub_1000B46B8(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000B46D0()
{
  return type metadata accessor for LocalPresetsViewController(0);
}

uint64_t sub_1000B46D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 88), a1);
}

void sub_1000B46F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100033A34(a1, a2, v2);
}

uint64_t sub_1000B46F8()
{
  return type metadata accessor for UIListContentConfiguration(0);
}

uint64_t sub_1000B4700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return ShortDescription.init(name:_:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, v4, a4);
}

double sub_1000B4720()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void *sub_1000B472C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_1000B4734(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000B4744(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000B4760()
{
  return type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
}

uint64_t sub_1000B4768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  return sub_1000DEBAC(a1, a2, a3, a4, v20, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_1000B477C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000B4784()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B4798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(a2 - 256), 1);
}

uint64_t sub_1000B47A4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000B47AC()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_1000B47B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005FF1B0(a1, a2, 1, v2);
}

uint64_t sub_1000B47C0(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_1000B47D0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 168));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000B47F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 232) + 32))(a1, v1, *(_QWORD *)(v2 - 256));
}

uint64_t sub_1000B4804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return _ConditionalContent<>.init(storage:)(v5, v8, v6, v7, a5);
}

uint64_t sub_1000B4818()
{
  return type metadata accessor for LocationComponentHeaderViewModel(0);
}

uint64_t sub_1000B4828()
{
  return type metadata accessor for LocationComponentContainerViewModel(0);
}

uint64_t sub_1000B4838()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

uint64_t sub_1000B4840()
{
  return type metadata accessor for DetailComponentContainerViewModel(0);
}

__n128 sub_1000B4848@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 result;

  v2 = (*a1)->n128_u8[8];
  v3 = (*a1)[1].n128_u64[0];
  v4 = (*a1)[1].n128_u8[8];
  v5 = (*a1)[2].n128_u64[0];
  v6 = (*a1)[2].n128_u8[8];
  result = (*a1)[3];
  a2->n128_u64[0] = (*a1)->n128_u64[0];
  a2->n128_u8[8] = v2;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u8[8] = v4;
  a2[2].n128_u64[0] = v5;
  a2[2].n128_u8[8] = v6;
  a2[3] = result;
  return result;
}

uint64_t sub_1000B4890(__n128 a1)
{
  uint64_t v1;

  *(__n128 *)(v1 - 128) = a1;
  return sub_100121AA8(v1 - 128);
}

uint64_t sub_1000B489C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000B48B8()
{
  return type metadata accessor for ComparisonBarChartView(0);
}

uint64_t sub_1000B48C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000B48D0()
{
  return type metadata accessor for PrecipitationAmountsEditorView(0);
}

uint64_t sub_1000B48D8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000B48E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000B48E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v1, v0);
}

uint64_t sub_1000B48FC()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

uint64_t sub_1000B4904()
{
  return sub_1003DC674(1);
}

uint64_t sub_1000B4910()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B4928()
{
  return type metadata accessor for AttributedString(0);
}

void sub_1000B4944()
{
  sub_1000F5568();
}

uint64_t sub_1000B4950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000B4958@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10005EAA0(*(_QWORD *)(v2 - 88) + a1, v1);
}

uint64_t sub_1000B4968@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v3 + a1, v2);
}

uint64_t sub_1000B4974()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000B4988(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000B499C()
{
  return 8;
}

uint64_t sub_1000B49A8()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = 0;
  *(_OWORD *)(v2 - 160) = 0u;
  *(_OWORD *)(v2 - 144) = 0u;
  return sub_1000A5EBC(v1, v2 - 160, v0);
}

uint64_t sub_1000B49C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return sub_1000A5EBC(a1, a2, a3);
}

uint64_t sub_1000B49D0()
{
  return type metadata accessor for AveragesDetailViewModel(0);
}

uint64_t sub_1000B49D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000B49F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

void sub_1000B4A04()
{
  sub_1000B2E08();
}

id sub_1000B4A40(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

double sub_1000B4A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  return sub_10010F9B0(v0, v1, v3, v2);
}

uint64_t sub_1000B4A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000B4A6C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000B4A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_1000B4AA0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000B4AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v3, v2);
}

uint64_t sub_1000B4AC0()
{
  return 25971;
}

double sub_1000B4AD4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000B4ADC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  return sub_100080BA8(a1, v3, a3);
}

double sub_1000B4AE4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160)).n128_u64[0];
  return result;
}

double sub_1000B4AEC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192)).n128_u64[0];
  return result;
}

uint64_t sub_1000B4AF4()
{
  uint64_t v0;

  return v0 - 120;
}

void sub_1000B4B0C(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100095B78(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000B4B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v3, v2);
}

uint64_t sub_1000B4B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_1000B4B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000B4B5C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000B4B64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_1000B4B70()
{
  return type metadata accessor for SearchViewAction(0);
}

uint64_t sub_1000B4B78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000B4B88(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 0);
}

uint64_t sub_1000B4B94()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000B4BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_1000B4BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, *(_QWORD *)(v3 - 128));
  return static WeatherFormatStyle<>.weather(_:usage:locale:)(v0, v1, v2);
}

uint64_t sub_1000B4BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:)(a1, a2, a3, a4, a5, v5, 0, 0);
}

uint64_t sub_1000B4BF0()
{
  return type metadata accessor for MoonScrubberView(0);
}

uint64_t sub_1000B4BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000B4C00()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000B4C0C()
{
  return type metadata accessor for GeometryProxy(0);
}

double sub_1000B4C14@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(v3 - 288) = a1;
  *(_QWORD *)(v3 - 280) = v1;
  *(_BYTE *)(v3 - 272) = 0;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000B4C34(uint64_t a1)
{
  uint64_t v1;

  return ShortDescription.init(name:_:)(1635017060, 0xE400000000000000, a1, v1);
}

unint64_t sub_1000B4C50()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_100677274();
}

void sub_1000B4C5C(char *a1)
{
  sub_1001556EC(*a1);
}

uint64_t sub_1000B4C68(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for DisplayMetrics(0);
}

uint64_t sub_1000B4C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 - 144))(a1, a2, 1, v2);
}

void sub_1000B4CD4()
{
  void *v0;

}

uint64_t sub_1000B4CDC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104);
}

uint64_t sub_1000B4CF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100040308(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xED00000000000000);
}

uint64_t sub_1000B4D00()
{
  return type metadata accessor for WeatherDescription(0);
}

uint64_t sub_1000B4D0C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000B4D18(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000B4D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000B4D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000B4D5C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10006A788(v0, v1);
}

uint64_t sub_1000B4D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 168));
}

uint64_t sub_1000B4D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

unint64_t sub_1000B4D98()
{
  return sub_10009AA74();
}

uint64_t sub_1000B4DA0()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000B4DA8()
{
  char v0;
  uint64_t v1;

  return sub_1000B15F8(v1, v0);
}

uint64_t sub_1000B4DB4()
{
  return ProxyContainer.public.getter();
}

uint64_t sub_1000B4DBC()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000B4DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return RegistrationContainer.register<A>(_:name:factory:)(v5, 0, 0, a4, v4, v5);
}

uint64_t sub_1000B4DE4()
{
  return type metadata accessor for LearnMoreAttributorViewModel(0);
}

uint64_t sub_1000B4E00()
{
  return type metadata accessor for MainViewModel.ModalModule.LocationDetailModule(0);
}

uint64_t sub_1000B4E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000B4E30()
{
  uint64_t v0;

  return swift_endAccess(v0 - 120);
}

id sub_1000B4E38(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000B4E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

_QWORD *sub_1000B4E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  uint64_t v12;

  return Tips.Parameter.wrappedValue.getter(&a12, v12);
}

uint64_t sub_1000B4E60(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 0);
}

uint64_t sub_1000B4E70()
{
  return CurrentWeather.apparentTemperature.getter();
}

void sub_1000B4E78(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100033A34(a1, a2, v2);
}

uint64_t sub_1000B4E80()
{
  return type metadata accessor for LegacySearchResultsView(0);
}

uint64_t sub_1000B4E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(v10 + 12) = 2082;
  return swift_getErrorValue(v9, v11, a9);
}

uint64_t sub_1000B4EA4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v0, v1);
}

uint64_t sub_1000B4EBC()
{
  return 0x6F6F4D207478654ELL;
}

uint64_t sub_1000B4EFC()
{
  return type metadata accessor for ScrubberView(0);
}

uint64_t sub_1000B4F20()
{
  return 0x6572757373657270;
}

uint64_t sub_1000B4F38()
{
  return type metadata accessor for Navigate.Destination(0);
}

double sub_1000B4F40()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

double sub_1000B4F4C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

void sub_1000B4F58(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

void sub_1000B4F60(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 168) = a1;
  *(_QWORD *)(v3 - 128) = a2;

}

uint64_t sub_1000B4F70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_1000B4F7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 16) = v1;
  return swift_bridgeObjectRetain(v2);
}

double sub_1000B4F88(uint64_t a1)
{
  return *(double *)&a1;
}

uint64_t sub_1000B4FA4()
{
  return type metadata accessor for LollipopDetailViewModel(0);
}

uint64_t sub_1000B4FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return os_signpost(_:dso:log:name:signpostID:)(a1, v4, v2, v3, 31, 2, v1);
}

NSString sub_1000B4FD0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEEB00, (uint64_t)&nominal type descriptor for HourlyForecastComponentViewModel.HourlyItem);
}

void sub_1000B4FF0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int *v50;
  char *v51;
  __n128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v4 = v2[1];
      goto LABEL_34;
    case 1:
      swift_bridgeObjectRelease(v2[1]);
      v5 = (int *)type metadata accessor for WeatherData(0);
      v6 = (uint64_t)v2 + v5[5];
      v7 = type metadata accessor for Locale(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      v8 = (char *)v2 + v5[6];
      v9 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      v10 = (uint64_t)v2 + v5[7];
      v11 = sub_1000BA294(&qword_100BC3348);
      if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
      {
        v12 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
      }
      v13 = (char *)v2 + v5[8];
      v14 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v15 = swift_getEnumCaseMultiPayload(v13, v14);
      if (v15 == 1)
      {
        v16 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
      }
      else if (!v15)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));
      }
      v17 = (uint64_t)v2 + v5[9];
      v18 = type metadata accessor for WeatherDataOverrides(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
      {
        v19 = type metadata accessor for Date(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v19))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
        v20 = v17 + *(int *)(v18 + 20);
        if (!_s7Weather24LocationCompositionStateOwet_0(v20, 1, v19))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v20, v19);
      }
      v59 = sub_1000BA294(&qword_100BC3358);
      v21 = (char *)v2 + *(int *)(v59 + 48);
      v22 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
      v23 = (int *)type metadata accessor for PreprocessedWeatherData(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v21[v23[5]]);
      v24 = &v21[v23[6]];
      swift_bridgeObjectRelease(*((_QWORD *)v24 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v24 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v24 + 5));
      v25 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v26 = (uint64_t)&v24[*(int *)(v25 + 28)];
      v27 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v26, 1, v27))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v26 + 8));
        v28 = v26 + *(int *)(v27 + 20);
        v29 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
        v30 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        swift_bridgeObjectRelease(*(_QWORD *)(v28 + *(int *)(v30 + 32) + 8));
      }
      swift_bridgeObjectRelease(*(_QWORD *)&v24[*(int *)(v25 + 32) + 8]);
      v31 = &v21[v23[7]];
      swift_bridgeObjectRelease(*(_QWORD *)v31);
      v32 = (uint64_t)&v31[*(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20)];
      v33 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
      v34 = &v21[v23[8]];
      swift_bridgeObjectRelease(*((_QWORD *)v34 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v34 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v34 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v34 + 7));
      v35 = &v34[*(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32)];
      v36 = type metadata accessor for Date(0);
      v37 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8);
      v37(v35, v36);
      v38 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v39 = (uint64_t)&v35[*(int *)(v38 + 20)];
      v40 = type metadata accessor for Elevation(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v39, 1, v40))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
      v41 = (uint64_t)&v35[*(int *)(v38 + 24)];
      v42 = type metadata accessor for BackgroundMoonData(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v42))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
      v43 = &v21[v23[9]];
      swift_bridgeObjectRelease(*((_QWORD *)v43 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v43 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v43 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v43 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v43 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v43 + 11));
      v44 = swift_bridgeObjectRelease(*((_QWORD *)v43 + 13));
      v45 = &v21[v23[10]];
      (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v33 - 8) + 8))(v45, v33, v44);
      v46 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v45[*(int *)(v46 + 20) + 8]);
      v47 = &v21[v23[11]];
      swift_bridgeObjectRelease(*((_QWORD *)v47 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v47 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v47 + 5));
      v48 = &v21[v23[12]];
      v49 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
      v50 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v48[v50[5] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v48[v50[6] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v48[v50[7] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v48[v50[9] + 8]);
      v51 = &v21[v23[13]];
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 23));
      swift_bridgeObjectRelease(*((_QWORD *)v51 + 25));
      v52 = swift_bridgeObjectRelease(*((_QWORD *)v51 + 28));
      v53 = &v21[v23[14]];
      ((void (*)(char *, uint64_t, __n128))v37)(v53, v36, v52);
      v54 = (uint64_t)&v53[*(int *)(v38 + 20)];
      if (!_s7Weather24LocationCompositionStateOwet_0(v54, 1, v40))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v54, v40);
      v55 = (uint64_t)&v53[*(int *)(v38 + 24)];
      if (!_s7Weather24LocationCompositionStateOwet_0(v55, 1, v42))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v55, v42);
      v56 = &v21[v23[15]];
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v56 + 13));
      v2 = (uint64_t *)((char *)v2 + *(int *)(v59 + 64));
      goto LABEL_32;
    case 0:
LABEL_32:
      v57 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v2, v57) != 1)
      {
        v58 = type metadata accessor for News(0);
        (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v2, v58);
        return;
      }
      v4 = *v2;
LABEL_34:
      swift_bridgeObjectRelease(v4);
      break;
  }
}

uint64_t sub_1000B56C0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  sub_10003BC44(v3);
  return a1;
}

void sub_1000B56EC(uint64_t a1, void (*a2)(_QWORD))
{
  void (*v3)(uint64_t);

  a2(0);
  sub_1000C092C();
  v3(a1);
  sub_10004A298();
}

double sub_1000B571C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __n128 v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int *v105;
  char *v106;
  __n128 v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 1u:
      v4 = type metadata accessor for AppConfiguration(0);
      goto LABEL_83;
    case 2u:
      v5 = type metadata accessor for EnvironmentAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v5))
      {
        case 2u:
          v4 = type metadata accessor for Locale(0);
          goto LABEL_83;
        case 3u:
          v42 = type metadata accessor for ActivityAction(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v42);
          if (EnumCaseMultiPayload == 1)
          {
            v67 = type metadata accessor for PreviewLocation(0);
            switch(swift_getEnumCaseMultiPayload(v2, v67))
            {
              case 0u:
                goto LABEL_82;
              case 1u:
                goto LABEL_53;
              case 2u:
                goto LABEL_98;
              case 3u:
                goto LABEL_30;
              default:
                return result;
            }
            return result;
          }
          if (EnumCaseMultiPayload)
            return result;
          v44 = type metadata accessor for SavedLocation(0);
          if (swift_getEnumCaseMultiPayload(v2, v44) == 1)
          {
            v4 = type metadata accessor for SavedLocation.Placeholder(0);
            goto LABEL_83;
          }
          goto LABEL_82;
        case 4u:
          goto LABEL_70;
        case 8u:
          v22 = v2[1];
          if (v22 >= 2)
            goto LABEL_129;
          return result;
        case 0xAu:
          v45 = type metadata accessor for ConfiguredUnitsAction(0);
          v46 = swift_getEnumCaseMultiPayload(v2, v45);
          if (v46 == 1)
          {
            v11 = type metadata accessor for UnitConfiguration.Temperature(0);
            goto LABEL_105;
          }
          if (v46)
            return result;
          v4 = type metadata accessor for ConfiguredUnit(0);
          break;
        default:
          return result;
      }
      goto LABEL_83;
    case 3u:
      v6 = type metadata accessor for LocationsAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v6))
      {
        case 0u:
          v7 = type metadata accessor for CurrentLocation(0);
          v8 = swift_getEnumCaseMultiPayload(v2, v7);
          if (v8 == 2 || v8 == 1)
            goto LABEL_82;
          goto LABEL_26;
        case 1u:
          goto LABEL_82;
        case 2u:
          swift_bridgeObjectRelease(*v2);
          goto LABEL_70;
        case 5u:
          goto LABEL_128;
        case 6u:
          result = sub_1001639C8(*v2, v2[1], *((_BYTE *)v2 + 16));
          break;
        default:
          return result;
      }
      return result;
    case 4u:
      v9 = type metadata accessor for NotificationsAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v9))
      {
        case 1u:
          v10 = type metadata accessor for LocationModel(0);
          if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v10))
            (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v2, v10);
          v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294((uint64_t *)&unk_100C0B810) + 48));
          v11 = type metadata accessor for URL(0);
          goto LABEL_105;
        case 2u:
          v47 = type metadata accessor for NotificationSubscription.Location(0);
          (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v2, v47);
          v48 = &qword_100BD2378;
          goto LABEL_74;
        case 3u:
        case 4u:
          goto LABEL_128;
        case 5u:
          v49 = type metadata accessor for Location(0);
          (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v2, v49);
          v48 = &qword_100BD2370;
LABEL_74:
          v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294(v48) + 48));
          v4 = type metadata accessor for NotificationSubscription.Kind(0);
          goto LABEL_83;
        default:
          return result;
      }
    case 5u:
      v12 = type metadata accessor for NotificationsOptInAction(0);
      v13 = swift_getEnumCaseMultiPayload(v2, v12);
      switch(v13)
      {
        case 4:
          goto LABEL_47;
        case 3:
LABEL_128:
          v22 = *v2;
LABEL_129:
          *(_QWORD *)&result = swift_bridgeObjectRelease(v22).n128_u64[0];
          break;
        case 2:
          goto LABEL_82;
      }
      return result;
    case 6u:
      v14 = type metadata accessor for ViewAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v14))
      {
        case 0u:
          v15 = type metadata accessor for ListViewAction(0);
          v16 = swift_getEnumCaseMultiPayload(v2, v15);
          if (v16 == 2)
            goto LABEL_86;
          goto LABEL_77;
        case 1u:
          v50 = type metadata accessor for LocationViewerViewAction(0);
          v16 = swift_getEnumCaseMultiPayload(v2, v50);
          if (v16 == 2)
          {
LABEL_86:
            v4 = type metadata accessor for Location.Identifier(0);
            goto LABEL_83;
          }
          if (v16 == 1)
            goto LABEL_58;
LABEL_77:
          if (!v16)
          {
            v4 = type metadata accessor for LocationModel(0);
            goto LABEL_83;
          }
          break;
        case 3u:
          v51 = type metadata accessor for SearchViewAction(0);
          switch(swift_getEnumCaseMultiPayload(v2, v51))
          {
            case 0u:
              v4 = type metadata accessor for CodableError(0);
              goto LABEL_83;
            case 1u:
              goto LABEL_128;
            case 2u:
              goto LABEL_70;
            case 3u:
            case 6u:
              goto LABEL_82;
            case 4u:
              goto LABEL_53;
            case 5u:
LABEL_98:

              swift_bridgeObjectRelease(v2[2]);
              swift_bridgeObjectRelease(v2[4]);
              swift_bridgeObjectRelease(v2[6]);
              v2 = (_QWORD *)((char *)v2 + *(int *)(type metadata accessor for SearchLocation(0) + 32));
              v11 = type metadata accessor for Location(0);
              goto LABEL_105;
            default:
              return result;
          }
          return result;
        case 4u:
          v52 = type metadata accessor for InteractiveMapViewAction(0);
          switch(swift_getEnumCaseMultiPayload(v2, v52))
          {
            case 0u:
            case 1u:
            case 2u:
            case 4u:
              goto LABEL_82;
            case 3u:
              goto LABEL_58;
            default:
              return result;
          }
          return result;
        case 5u:
          v2 = (_QWORD *)((char *)v2 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36));
          v4 = type metadata accessor for DynamicTypeSize(0);
          goto LABEL_83;
        default:
          return result;
      }
      return result;
    case 7u:
      v17 = type metadata accessor for ModalViewAction(0);
      v18 = swift_getEnumCaseMultiPayload(v2, v17);
      if (v18 == 3)
      {
        if ((~*v2 & 0xF000000000000006) != 0)
          return sub_10019D2B8(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11]);
      }
      else if (!v18)
      {
        v19 = type metadata accessor for LocationPreviewViewAction(0);
        if (swift_getEnumCaseMultiPayload(v2, v19) == 1)
          goto LABEL_82;
      }
      return result;
    case 8u:
      v20 = type metadata accessor for LocationViewAction(0);
      v8 = swift_getEnumCaseMultiPayload(v2, v20);
      if (v8 == 2)
      {
        v33 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v2, v33);
        v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48));
LABEL_53:
        v4 = type metadata accessor for LocationOfInterest(0);
        goto LABEL_83;
      }
      if (v8 != 1)
      {
LABEL_26:
        if (v8)
          return result;
LABEL_82:
        v4 = type metadata accessor for Location(0);
        goto LABEL_83;
      }
      v34 = type metadata accessor for LocationComponentAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v34))
      {
        case 0u:
          v35 = type metadata accessor for URL(0);
          goto LABEL_102;
        case 1u:
          v35 = type metadata accessor for WeatherMapOverlayKind(0);
          goto LABEL_102;
        case 2u:
          v35 = type metadata accessor for DetailCondition(0);
LABEL_102:
          (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v2, v35);
          break;
        case 4u:
          v68 = (char *)v2 + *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
          v69 = type metadata accessor for Location(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
          break;
        default:
          break;
      }
      v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294(&qword_100BC5FC8) + 64));
      v11 = type metadata accessor for Date(0);
LABEL_105:
      v70 = v11;
      if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v11))
      {
        v41 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v70 - 8) + 8);
        v39 = (char *)v2;
        v40 = v70;
        goto LABEL_84;
      }
      return result;
    case 9u:
      v21 = type metadata accessor for WeatherDataAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v21))
      {
        case 0u:
        case 1u:
        case 7u:
          goto LABEL_70;
        case 2u:
        case 3u:
        case 9u:
          swift_bridgeObjectRelease(v2[1]);
LABEL_30:
          v22 = v2[3];
          goto LABEL_129;
        case 4u:
          swift_bridgeObjectRelease(v2[1]);
          v53 = sub_1000BA294(&qword_100BCB630);
          v54 = (char *)v2 + *(int *)(v53 + 48);
          swift_bridgeObjectRelease(*((_QWORD *)v54 + 1));
          v55 = (int *)type metadata accessor for WeatherData(0);
          v56 = (uint64_t)&v54[v55[5]];
          v57 = type metadata accessor for Locale(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v56, 1, v57))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
          v58 = &v54[v55[6]];
          v59 = type metadata accessor for WeatherDataModel(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
          v60 = (uint64_t)&v54[v55[7]];
          v61 = sub_1000BA294(&qword_100BC3348);
          if (!_s7Weather24LocationCompositionStateOwet_0(v60, 1, v61))
          {
            v62 = type metadata accessor for Date(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v60, v62);
          }
          v63 = &v54[v55[8]];
          v64 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
          v65 = swift_getEnumCaseMultiPayload(v63, v64);
          if (v65 == 1)
          {
            v71 = type metadata accessor for WeatherStatisticsModel(0);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v63, v71);
          }
          else if (!v65)
          {
            swift_bridgeObjectRelease(*((_QWORD *)v63 + 1));
          }
          v72 = (uint64_t)&v54[v55[9]];
          v73 = type metadata accessor for WeatherDataOverrides(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v72, 1, v73))
          {
            v74 = type metadata accessor for Date(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v72, 1, v74))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v72, v74);
            v75 = v72 + *(int *)(v73 + 20);
            if (!_s7Weather24LocationCompositionStateOwet_0(v75, 1, v74))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v75, v74);
          }
          v114 = v53;
          v76 = (char *)v2 + *(int *)(v53 + 64);
          v77 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v76, v77);
          v78 = (int *)type metadata accessor for PreprocessedWeatherData(0);
          swift_bridgeObjectRelease(*(_QWORD *)&v76[v78[5]]);
          v79 = &v76[v78[6]];
          swift_bridgeObjectRelease(*((_QWORD *)v79 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v79 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v79 + 5));
          v80 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
          v81 = (uint64_t)&v79[*(int *)(v80 + 28)];
          v82 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v81, 1, v82))
          {
            swift_bridgeObjectRelease(*(_QWORD *)(v81 + 8));
            v83 = v81 + *(int *)(v82 + 20);
            v84 = type metadata accessor for TemperatureScaleConfiguration(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v83, v84);
            v85 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
            swift_bridgeObjectRelease(*(_QWORD *)(v83 + *(int *)(v85 + 32) + 8));
          }
          swift_bridgeObjectRelease(*(_QWORD *)&v79[*(int *)(v80 + 32) + 8]);
          v86 = &v76[v78[7]];
          swift_bridgeObjectRelease(*(_QWORD *)v86);
          v87 = (uint64_t)&v86[*(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20)];
          v88 = type metadata accessor for WeatherDescription(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v87, 1, v88))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v87, v88);
          v89 = &v76[v78[8]];
          swift_bridgeObjectRelease(*((_QWORD *)v89 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v89 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v89 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v89 + 7));
          v90 = &v89[*(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32)];
          v91 = type metadata accessor for Date(0);
          v92 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 8);
          v92(v90, v91);
          v93 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
          v94 = (uint64_t)&v90[*(int *)(v93 + 20)];
          v95 = type metadata accessor for Elevation(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v94, 1, v95))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v94, v95);
          v96 = (uint64_t)&v90[*(int *)(v93 + 24)];
          v97 = type metadata accessor for BackgroundMoonData(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v96, 1, v97))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v96, v97);
          v98 = &v76[v78[9]];
          swift_bridgeObjectRelease(*((_QWORD *)v98 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v98 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v98 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v98 + 7));
          swift_bridgeObjectRelease(*((_QWORD *)v98 + 9));
          swift_bridgeObjectRelease(*((_QWORD *)v98 + 11));
          v99 = swift_bridgeObjectRelease(*((_QWORD *)v98 + 13));
          v100 = &v76[v78[10]];
          (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v88 - 8) + 8))(v100, v88, v99);
          v101 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
          swift_bridgeObjectRelease(*(_QWORD *)&v100[*(int *)(v101 + 20) + 8]);
          v102 = &v76[v78[11]];
          swift_bridgeObjectRelease(*((_QWORD *)v102 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v102 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v102 + 5));
          v103 = &v76[v78[12]];
          v104 = type metadata accessor for PressureTrend(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v104 - 8) + 8))(v103, v104);
          v105 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
          swift_bridgeObjectRelease(*(_QWORD *)&v103[v105[5] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v103[v105[6] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v103[v105[7] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v103[v105[9] + 8]);
          v106 = &v76[v78[13]];
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 7));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 9));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 11));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 13));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 15));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 17));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 19));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 21));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 23));
          swift_bridgeObjectRelease(*((_QWORD *)v106 + 25));
          v107 = swift_bridgeObjectRelease(*((_QWORD *)v106 + 28));
          v108 = &v76[v78[14]];
          ((void (*)(char *, uint64_t, __n128))v92)(v108, v91, v107);
          v109 = (uint64_t)&v108[*(int *)(v93 + 20)];
          if (!_s7Weather24LocationCompositionStateOwet_0(v109, 1, v95))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v109, v95);
          v110 = (uint64_t)&v108[*(int *)(v93 + 24)];
          if (!_s7Weather24LocationCompositionStateOwet_0(v110, 1, v97))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v110, v97);
          v111 = &v76[v78[15]];
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 7));
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 9));
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 11));
          swift_bridgeObjectRelease(*((_QWORD *)v111 + 13));
          v66 = *(int *)(v114 + 80);
          goto LABEL_127;
        case 5u:
          swift_bridgeObjectRelease(v2[1]);
          v66 = *(int *)(sub_1000BA294(&qword_100BCB620) + 48);
LABEL_127:
          v2 = (_QWORD *)((char *)v2 + v66);
          v112 = type metadata accessor for NewsDataModel(0);
          if (swift_getEnumCaseMultiPayload(v2, v112) == 1)
            goto LABEL_128;
          v4 = type metadata accessor for News(0);
          break;
        case 6u:
          swift_bridgeObjectRelease(v2[1]);
          v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294(&qword_100BCB628) + 48));
          v4 = type metadata accessor for AvailableDataSets(0);
          goto LABEL_83;
        case 8u:
          swift_bridgeObjectRelease(v2[1]);
          v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294(&qword_100BCB618) + 48));
          v4 = type metadata accessor for WeatherStatisticsModel(0);
          goto LABEL_83;
        default:
          return result;
      }
      goto LABEL_83;
    case 0xAu:
      v23 = type metadata accessor for DebugAction(0);
      v24 = swift_getEnumCaseMultiPayload(v2, v23);
      if (v24 == 1)
        goto LABEL_82;
      if (v24)
        return result;
      v25 = type metadata accessor for WeatherCondition(0);
      if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v25))
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v2, v25);
      v22 = *(_QWORD *)((char *)v2 + *(int *)(sub_1000BA294(&qword_100BD0A98) + 48) + 8);
      goto LABEL_129;
    case 0xBu:
      v26 = type metadata accessor for ConditionDetailViewAction(0);
      v27 = swift_getEnumCaseMultiPayload(v2, v26);
      if (v27 == 2)
      {
        swift_bridgeObjectRelease(v2[1]);
        v36 = (int *)type metadata accessor for DetailChartSelection(0);
        v37 = (char *)v2 + v36[5];
        v38 = type metadata accessor for Date(0);
        v113 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8);
        v113(v37, v38);
        v113((char *)v2 + v36[6], v38);
        v39 = (char *)v2 + v36[7];
        v40 = v38;
        v41 = v113;
      }
      else
      {
        if (v27 == 1)
        {
LABEL_49:
          v4 = type metadata accessor for DetailCondition(0);
        }
        else
        {
LABEL_43:
          if (v27)
            return result;
LABEL_47:
          v4 = type metadata accessor for Date(0);
        }
LABEL_83:
        v40 = v4;
        v41 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v39 = (char *)v2;
      }
LABEL_84:
      v41(v39, v40);
      return result;
    case 0xDu:
      v28 = type metadata accessor for MoonDetailViewAction(0);
      v29 = swift_getEnumCaseMultiPayload(v2, v28);
      if (v29 == 1)
        goto LABEL_47;
      if (v29)
        return result;
      v30 = type metadata accessor for MoonDetailSelectedDate(0);
      v27 = swift_getEnumCaseMultiPayload(v2, v30);
      if (v27 != 2 && v27 != 1)
        goto LABEL_43;
      goto LABEL_47;
    case 0xEu:
      v31 = type metadata accessor for AveragesDetailViewAction(0);
      if (swift_getEnumCaseMultiPayload(v2, v31) != 1)
        return result;
      v2 = (_QWORD *)((char *)v2 + *(int *)(type metadata accessor for DetailHeroChartLollipopPosition(0) + 20));
      goto LABEL_47;
    case 0x10u:
LABEL_70:
      v22 = v2[1];
      goto LABEL_129;
    case 0x11u:
      v32 = type metadata accessor for PerformanceTestAction(0);
      switch(swift_getEnumCaseMultiPayload(v2, v32))
      {
        case 0u:
          goto LABEL_49;
        case 2u:
          goto LABEL_82;
        case 3u:
          v2 = (_QWORD *)((char *)v2 + *(int *)(sub_1000BA294((uint64_t *)&unk_100BFFA70) + 48));
LABEL_58:
          v4 = type metadata accessor for WeatherMapOverlayKind(0);
          goto LABEL_83;
        case 4u:
          v4 = type metadata accessor for WeatherCondition(0);
          goto LABEL_83;
        default:
          return result;
      }
      return result;
    default:
      return result;
  }
}

_QWORD *sub_1000B66C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t, __n128);
  __n128 v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t, __n128);
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  void (*v137)(char *, char *, uint64_t, __n128);
  __n128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t, __n128);
  __n128 v154;
  int *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  __n128 v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(char *, char *, uint64_t, __n128);
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  int *v228;
  char *v229;
  char *v230;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      v13 = a1;
      v14 = a3;
      v15 = 2;
LABEL_53:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      return a1;
    case 1:
      v226 = a3;
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      v17 = (int *)type metadata accessor for WeatherData(0);
      v18 = v17[5];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v16);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v21))
      {
        v22 = sub_1000BA294(&qword_100BC3340);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v19, 0, 1, v21);
      }
      v24 = v17[6];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      v28 = v17[7];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v31 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 1, v31))
      {
        v32 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v33 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v29, v30, v33);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 1, v31);
      }
      v34 = v17[8];
      v35 = (_QWORD *)((char *)a1 + v34);
      v36 = (_QWORD *)((char *)a2 + v34);
      v37 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      v38 = swift_getEnumCaseMultiPayload(v36, v37);
      if (v38 == 1)
      {
        v43 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v35, v36, v43);
        v40 = v35;
        v41 = v37;
        v42 = 1;
      }
      else
      {
        if (v38)
        {
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
          goto LABEL_22;
        }
        v39 = v36[1];
        *v35 = *v36;
        v35[1] = v39;
        swift_bridgeObjectRetain(v39);
        v40 = v35;
        v41 = v37;
        v42 = 0;
      }
      swift_storeEnumTagMultiPayload(v40, v41, v42);
LABEL_22:
      v44 = v17[9];
      v45 = (char *)a1 + v44;
      v46 = (char *)a2 + v44;
      v47 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v47))
      {
        v48 = sub_1000BA294(&qword_100BC3350);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v49 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v46, 1, v49))
        {
          v50 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v45, v46, v49);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v49);
        }
        v51 = *(int *)(v47 + 20);
        v52 = &v45[v51];
        v53 = &v46[v51];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v46[v51], 1, v49))
        {
          v54 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v52, v53, v49);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v49);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v45, 0, 1, v47);
      }
      v224 = sub_1000BA294(&qword_100BC3358);
      v55 = *(int *)(v224 + 48);
      v227 = a1;
      v56 = (char *)a1 + v55;
      v225 = a2;
      v57 = (char *)a2 + v55;
      v58 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
      v59 = type metadata accessor for PreprocessedWeatherData(0);
      v60 = *(int *)(v59 + 20);
      v61 = *(_QWORD *)&v57[v60];
      *(_QWORD *)&v56[v60] = v61;
      v228 = (int *)v59;
      v229 = v56;
      v62 = *(int *)(v59 + 24);
      v63 = &v56[v62];
      v230 = v57;
      v64 = &v57[v62];
      v65 = *(_QWORD *)&v57[v62 + 8];
      *(_QWORD *)v63 = *(_QWORD *)&v57[v62];
      *((_QWORD *)v63 + 1) = v65;
      v66 = *(_QWORD *)&v57[v62 + 24];
      *((_QWORD *)v63 + 2) = *(_QWORD *)&v57[v62 + 16];
      *((_QWORD *)v63 + 3) = v66;
      v67 = *(_QWORD *)&v57[v62 + 40];
      *((_QWORD *)v63 + 4) = *(_QWORD *)&v57[v62 + 32];
      *((_QWORD *)v63 + 5) = v67;
      v68 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v69 = *(int *)(v68 + 28);
      v70 = &v63[v69];
      v71 = &v64[v69];
      v72 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRetain(v67);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_1000BA294(&qword_100BC3360);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v74 = *((_QWORD *)v71 + 1);
        *(_QWORD *)v70 = *(_QWORD *)v71;
        *((_QWORD *)v70 + 1) = v74;
        v75 = *(int *)(v72 + 20);
        v76 = &v70[v75];
        v77 = &v71[v75];
        v78 = type metadata accessor for TemperatureScaleConfiguration(0);
        v79 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v78 - 8) + 16);
        v80 = swift_bridgeObjectRetain(v74);
        v79(v76, v77, v78, v80);
        v81 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v76[v81[5]] = *(_QWORD *)&v77[v81[5]];
        *(_QWORD *)&v76[v81[6]] = *(_QWORD *)&v77[v81[6]];
        *(_QWORD *)&v76[v81[7]] = *(_QWORD *)&v77[v81[7]];
        v82 = v81[8];
        v83 = &v76[v82];
        v84 = &v77[v82];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        *(_QWORD *)v83 = v86;
        *((_QWORD *)v83 + 1) = v85;
        v76[v81[9]] = v77[v81[9]];
        swift_bridgeObjectRetain(v85);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v70, 0, 1, v72);
      }
      v87 = *(int *)(v68 + 32);
      v88 = &v63[v87];
      v89 = &v64[v87];
      v90 = *((_QWORD *)v89 + 1);
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *((_QWORD *)v88 + 1) = v90;
      v91 = v228[7];
      v92 = &v229[v91];
      v93 = &v230[v91];
      v94 = *(_QWORD *)&v230[v91];
      *(_QWORD *)&v229[v91] = v94;
      v95 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v96 = &v92[v95];
      v97 = &v93[v95];
      v98 = type metadata accessor for WeatherDescription(0);
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRetain(v94);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v97, 1, v98))
      {
        v99 = sub_1000BA294(&qword_100BC3368);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v96, 0, 1, v98);
      }
      v100 = v228[8];
      v101 = &v229[v100];
      v102 = &v230[v100];
      v103 = *(_QWORD *)&v230[v100 + 8];
      *(_QWORD *)v101 = *(_QWORD *)&v230[v100];
      *((_QWORD *)v101 + 1) = v103;
      v104 = *(_QWORD *)&v230[v100 + 24];
      *((_QWORD *)v101 + 2) = *(_QWORD *)&v230[v100 + 16];
      *((_QWORD *)v101 + 3) = v104;
      v105 = *(_QWORD *)&v230[v100 + 40];
      *((_QWORD *)v101 + 4) = *(_QWORD *)&v230[v100 + 32];
      *((_QWORD *)v101 + 5) = v105;
      v106 = *(_QWORD *)&v230[v100 + 56];
      *((_QWORD *)v101 + 6) = *(_QWORD *)&v230[v100 + 48];
      *((_QWORD *)v101 + 7) = v106;
      v107 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v108 = &v101[v107];
      v109 = &v102[v107];
      v110 = type metadata accessor for Date(0);
      v111 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v110 - 8) + 16);
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRetain(v105);
      v112 = swift_bridgeObjectRetain(v106);
      v221 = v111;
      v222 = v110;
      v111(v108, v109, v110, v112);
      v113 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v114 = *(int *)(v113 + 20);
      v115 = &v108[v114];
      v116 = &v109[v114];
      v117 = type metadata accessor for Elevation(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v116, 1, v117))
      {
        v118 = sub_1000BA294(&qword_100BC3370);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v115, 0, 1, v117);
      }
      v119 = *(int *)(v113 + 24);
      v120 = &v108[v119];
      v121 = &v109[v119];
      v122 = type metadata accessor for BackgroundMoonData(0);
      v223 = v113;
      v219 = v122;
      v220 = v117;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v121, 1, v122))
      {
        v123 = sub_1000BA294(&qword_100BC3378);
        memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v120, 0, 1, v122);
      }
      v124 = v228[9];
      v125 = &v229[v124];
      v126 = &v230[v124];
      v127 = *((_QWORD *)v126 + 1);
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v127;
      v128 = *((_QWORD *)v126 + 3);
      *((_QWORD *)v125 + 2) = *((_QWORD *)v126 + 2);
      *((_QWORD *)v125 + 3) = v128;
      v129 = *((_QWORD *)v126 + 5);
      *((_QWORD *)v125 + 4) = *((_QWORD *)v126 + 4);
      *((_QWORD *)v125 + 5) = v129;
      v130 = *((_QWORD *)v126 + 7);
      *((_QWORD *)v125 + 6) = *((_QWORD *)v126 + 6);
      *((_QWORD *)v125 + 7) = v130;
      v131 = *((_QWORD *)v126 + 9);
      *((_QWORD *)v125 + 8) = *((_QWORD *)v126 + 8);
      *((_QWORD *)v125 + 9) = v131;
      v132 = *((_QWORD *)v126 + 11);
      *((_QWORD *)v125 + 10) = *((_QWORD *)v126 + 10);
      *((_QWORD *)v125 + 11) = v132;
      v133 = *((_QWORD *)v126 + 13);
      *((_QWORD *)v125 + 12) = *((_QWORD *)v126 + 12);
      *((_QWORD *)v125 + 13) = v133;
      v134 = v228[10];
      v135 = &v229[v134];
      v136 = &v230[v134];
      v137 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v98 - 8) + 16);
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRetain(v128);
      swift_bridgeObjectRetain(v129);
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRetain(v132);
      v138 = swift_bridgeObjectRetain(v133);
      v137(v135, v136, v98, v138);
      v139 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
      v140 = &v135[v139];
      v141 = &v136[v139];
      v142 = *((_QWORD *)v141 + 1);
      *(_QWORD *)v140 = *(_QWORD *)v141;
      *((_QWORD *)v140 + 1) = v142;
      v143 = v228[11];
      v144 = &v229[v143];
      v145 = &v230[v143];
      v146 = *((_QWORD *)v145 + 1);
      *(_QWORD *)v144 = *(_QWORD *)v145;
      *((_QWORD *)v144 + 1) = v146;
      v147 = *((_QWORD *)v145 + 3);
      *((_QWORD *)v144 + 2) = *((_QWORD *)v145 + 2);
      *((_QWORD *)v144 + 3) = v147;
      v148 = *((_QWORD *)v145 + 5);
      *((_QWORD *)v144 + 4) = *((_QWORD *)v145 + 4);
      *((_QWORD *)v144 + 5) = v148;
      v149 = v228[12];
      v150 = &v229[v149];
      v151 = &v230[v149];
      v152 = type metadata accessor for PressureTrend(0);
      v153 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v152 - 8) + 16);
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v146);
      swift_bridgeObjectRetain(v147);
      v154 = swift_bridgeObjectRetain(v148);
      v153(v150, v151, v152, v154);
      v155 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      v156 = v155[5];
      v157 = &v150[v156];
      v158 = &v151[v156];
      v159 = *((_QWORD *)v158 + 1);
      *(_QWORD *)v157 = *(_QWORD *)v158;
      *((_QWORD *)v157 + 1) = v159;
      v160 = v155[6];
      v161 = &v150[v160];
      v162 = &v151[v160];
      v218 = *((_QWORD *)v162 + 1);
      *(_QWORD *)v161 = *(_QWORD *)v162;
      *((_QWORD *)v161 + 1) = v218;
      v163 = v155[7];
      v164 = &v150[v163];
      v165 = &v151[v163];
      v217 = *((_QWORD *)v165 + 1);
      *(_QWORD *)v164 = *(_QWORD *)v165;
      *((_QWORD *)v164 + 1) = v217;
      *(_QWORD *)&v150[v155[8]] = *(_QWORD *)&v151[v155[8]];
      v166 = v155[9];
      v167 = &v150[v166];
      v168 = &v151[v166];
      v216 = *((_QWORD *)v168 + 1);
      *(_QWORD *)v167 = *(_QWORD *)v168;
      *((_QWORD *)v167 + 1) = v216;
      v169 = v228[13];
      v170 = &v229[v169];
      v171 = &v230[v169];
      v172 = *((_QWORD *)v171 + 1);
      *(_QWORD *)v170 = *(_QWORD *)v171;
      *((_QWORD *)v170 + 1) = v172;
      v214 = *((_QWORD *)v171 + 3);
      *((_QWORD *)v170 + 2) = *((_QWORD *)v171 + 2);
      *((_QWORD *)v170 + 3) = v214;
      v213 = *((_QWORD *)v171 + 5);
      *((_QWORD *)v170 + 4) = *((_QWORD *)v171 + 4);
      *((_QWORD *)v170 + 5) = v213;
      v173 = *((_QWORD *)v171 + 7);
      *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
      *((_QWORD *)v170 + 7) = v173;
      v174 = *((_QWORD *)v171 + 9);
      *((_QWORD *)v170 + 8) = *((_QWORD *)v171 + 8);
      *((_QWORD *)v170 + 9) = v174;
      v175 = *((_QWORD *)v171 + 11);
      *((_QWORD *)v170 + 10) = *((_QWORD *)v171 + 10);
      *((_QWORD *)v170 + 11) = v175;
      v176 = *((_QWORD *)v171 + 13);
      *((_QWORD *)v170 + 12) = *((_QWORD *)v171 + 12);
      *((_QWORD *)v170 + 13) = v176;
      v177 = *((_QWORD *)v171 + 15);
      *((_QWORD *)v170 + 14) = *((_QWORD *)v171 + 14);
      *((_QWORD *)v170 + 15) = v177;
      v178 = *((_QWORD *)v171 + 17);
      *((_QWORD *)v170 + 16) = *((_QWORD *)v171 + 16);
      *((_QWORD *)v170 + 17) = v178;
      v179 = *((_QWORD *)v171 + 19);
      *((_QWORD *)v170 + 18) = *((_QWORD *)v171 + 18);
      *((_QWORD *)v170 + 19) = v179;
      v212 = *((_QWORD *)v171 + 21);
      *((_QWORD *)v170 + 20) = *((_QWORD *)v171 + 20);
      *((_QWORD *)v170 + 21) = v212;
      v211 = *((_QWORD *)v171 + 23);
      *((_QWORD *)v170 + 22) = *((_QWORD *)v171 + 22);
      *((_QWORD *)v170 + 23) = v211;
      v210 = *((_QWORD *)v171 + 25);
      *((_QWORD *)v170 + 24) = *((_QWORD *)v171 + 24);
      *((_QWORD *)v170 + 25) = v210;
      *((_OWORD *)v170 + 13) = *((_OWORD *)v171 + 13);
      v215 = *((_QWORD *)v171 + 28);
      *((_QWORD *)v170 + 28) = v215;
      v180 = v228[14];
      v181 = &v229[v180];
      v182 = &v230[v180];
      swift_bridgeObjectRetain(v159);
      swift_bridgeObjectRetain(v218);
      swift_bridgeObjectRetain(v217);
      swift_bridgeObjectRetain(v216);
      swift_bridgeObjectRetain(v172);
      swift_bridgeObjectRetain(v214);
      swift_bridgeObjectRetain(v213);
      swift_bridgeObjectRetain(v173);
      swift_bridgeObjectRetain(v174);
      swift_bridgeObjectRetain(v175);
      swift_bridgeObjectRetain(v176);
      swift_bridgeObjectRetain(v177);
      swift_bridgeObjectRetain(v178);
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRetain(v212);
      swift_bridgeObjectRetain(v211);
      swift_bridgeObjectRetain(v210);
      v183 = swift_bridgeObjectRetain(v215);
      v221(v181, v182, v222, v183);
      v184 = *(int *)(v223 + 20);
      v185 = &v181[v184];
      v186 = &v182[v184];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v182[v184], 1, v220))
      {
        v187 = sub_1000BA294(&qword_100BC3370);
        memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v185, v186, v220);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v185, 0, 1, v220);
      }
      v188 = *(int *)(v223 + 24);
      v189 = &v181[v188];
      v190 = &v182[v188];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v182[v188], 1, v219))
      {
        v191 = sub_1000BA294(&qword_100BC3378);
        memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v189, v190, v219);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v189, 0, 1, v219);
      }
      v192 = v228[15];
      v193 = &v229[v192];
      v194 = &v230[v192];
      v195 = *((_QWORD *)v194 + 1);
      *(_QWORD *)v193 = *(_QWORD *)v194;
      *((_QWORD *)v193 + 1) = v195;
      v196 = *((_QWORD *)v194 + 3);
      *((_QWORD *)v193 + 2) = *((_QWORD *)v194 + 2);
      *((_QWORD *)v193 + 3) = v196;
      v197 = *((_QWORD *)v194 + 5);
      *((_QWORD *)v193 + 4) = *((_QWORD *)v194 + 4);
      *((_QWORD *)v193 + 5) = v197;
      v198 = *((_QWORD *)v194 + 7);
      *((_QWORD *)v193 + 6) = *((_QWORD *)v194 + 6);
      *((_QWORD *)v193 + 7) = v198;
      v199 = *((_QWORD *)v194 + 9);
      *((_QWORD *)v193 + 8) = *((_QWORD *)v194 + 8);
      *((_QWORD *)v193 + 9) = v199;
      v200 = *((_QWORD *)v194 + 11);
      *((_QWORD *)v193 + 10) = *((_QWORD *)v194 + 10);
      *((_QWORD *)v193 + 11) = v200;
      v201 = *((_QWORD *)v194 + 13);
      *((_QWORD *)v193 + 12) = *((_QWORD *)v194 + 12);
      *((_QWORD *)v193 + 13) = v201;
      v202 = *(int *)(v224 + 64);
      v203 = (_QWORD *)((char *)v227 + v202);
      v204 = (_QWORD *)((char *)v225 + v202);
      v205 = type metadata accessor for NewsDataModel(0);
      swift_bridgeObjectRetain(v195);
      swift_bridgeObjectRetain(v196);
      swift_bridgeObjectRetain(v197);
      swift_bridgeObjectRetain(v198);
      swift_bridgeObjectRetain(v199);
      swift_bridgeObjectRetain(v200);
      swift_bridgeObjectRetain(v201);
      if (swift_getEnumCaseMultiPayload(v204, v205) == 1)
      {
        v206 = *v204;
        *v203 = *v204;
        swift_bridgeObjectRetain(v206);
        v207 = 1;
      }
      else
      {
        v208 = type metadata accessor for News(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v203, v204, v208);
        v207 = 0;
      }
      swift_storeEnumTagMultiPayload(v203, v205, v207);
      a1 = v227;
      v13 = v227;
      v14 = v226;
      v15 = 1;
      goto LABEL_53;
    case 0:
      v7 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
      {
        v8 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v8);
        v9 = a1;
        v10 = v7;
        v11 = 1;
      }
      else
      {
        v23 = type metadata accessor for News(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v9 = a1;
        v10 = v7;
        v11 = 0;
      }
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      v13 = a1;
      v14 = a3;
      v15 = 0;
      goto LABEL_53;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t _s7Weather24LocationCompositionStateOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t _s7Weather24LocationCompositionStateOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t type metadata accessor for WeatherData(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C09700, (uint64_t)&nominal type descriptor for WeatherData);
}

uint64_t type metadata accessor for WeatherData.WeatherStatisticsState(uint64_t a1)
{
  return sub_100098190(a1, qword_100C095F0, (uint64_t)&nominal type descriptor for WeatherData.WeatherStatisticsState);
}

uint64_t type metadata accessor for PreprocessedWeatherData(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0DC10;
  if (!qword_100C0DC10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PreprocessedWeatherData);
  return result;
}

uint64_t sub_1000B749C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F3258);
}

uint64_t type metadata accessor for WeatherDataOverrides(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDF940;
  if (!qword_100BDF940)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherDataOverrides);
  return result;
}

uint64_t type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEE8F8;
  if (!qword_100BEE8F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherConditionBackgroundPreprocessedDataModel);
  return result;
}

uint64_t type metadata accessor for HourlyForecastComponentPreprocessedDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD8E78;
  if (!qword_100BD8E78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HourlyForecastComponentPreprocessedDataModel);
  return result;
}

uint64_t type metadata accessor for PressureComponentPreprocessedDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD40C8;
  if (!qword_100BD40C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PressureComponentPreprocessedDataModel);
  return result;
}

uint64_t type metadata accessor for UVIndexComponentPreprocessedDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCDE68;
  if (!qword_100BCDE68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UVIndexComponentPreprocessedDataModel);
  return result;
}

uint64_t type metadata accessor for ListPreprocessedDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BEC008;
  if (!qword_100BEC008)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListPreprocessedDataModel);
  return result;
}

uint64_t *sub_1000B75F8(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  char *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  void (*v94)(char *, unsigned __int8 *, uint64_t, __n128);
  __n128 v95;
  uint64_t v96;
  char *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unsigned __int8 *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int EnumCaseMultiPayload;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  unsigned __int8 *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  unsigned __int8 *v219;
  __int128 v220;
  uint64_t v221;
  char *v222;
  unsigned __int8 *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  unsigned __int8 *v253;
  uint64_t *result;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned __int8 *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      v6 = type metadata accessor for AppConfiguration(0);
      (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_190;
    case 2u:
      v46 = type metadata accessor for EnvironmentAction(0);
      switch(swift_getEnumCaseMultiPayload(a2, v46))
      {
        case 2u:
          v47 = type metadata accessor for Locale(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(a1, a2, v47);
          v48 = a1;
          v49 = v46;
          v50 = 2;
          goto LABEL_188;
        case 3u:
          v159 = type metadata accessor for ActivityAction(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v159);
          if (EnumCaseMultiPayload == 1)
          {
            v205 = type metadata accessor for PreviewLocation(0);
            v206 = (char *)&loc_1000B8A18 + 4 * word_10099C62C[swift_getEnumCaseMultiPayload(a2, v205)];
            __asm { BR              X10 }
          }
          if (EnumCaseMultiPayload)
          {
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
          }
          else
          {
            v161 = type metadata accessor for SavedLocation(0);
            if (swift_getEnumCaseMultiPayload(a2, v161) == 1)
            {
              v162 = type metadata accessor for SavedLocation.Placeholder(0);
              v163 = 1;
            }
            else
            {
              v162 = type metadata accessor for Location(0);
              v163 = 0;
            }
            (*(void (**)(uint64_t *, unsigned __int8 *))(*(_QWORD *)(v162 - 8) + 16))(a1, a2);
            swift_storeEnumTagMultiPayload(a1, v161, v163);
            swift_storeEnumTagMultiPayload(a1, v159, 0);
          }
          v48 = a1;
          v49 = v46;
          v50 = 3;
          goto LABEL_188;
        case 4u:
          v142 = *((_QWORD *)a2 + 1);
          *a1 = *(_QWORD *)a2;
          a1[1] = v142;
          swift_bridgeObjectRetain(v142);
          v48 = a1;
          v49 = v46;
          v50 = 4;
          goto LABEL_188;
        case 8u:
          v164 = *((_QWORD *)a2 + 1);
          if (v164 >= 2)
          {
            *a1 = *(_QWORD *)a2;
            a1[1] = v164;
            swift_bridgeObjectRetain(v164);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
          v48 = a1;
          v49 = v46;
          v50 = 8;
          goto LABEL_188;
        case 0xAu:
          v165 = type metadata accessor for ConfiguredUnitsAction(0);
          v166 = swift_getEnumCaseMultiPayload(a2, v165);
          if (v166 == 1)
          {
            v207 = type metadata accessor for UnitConfiguration.Temperature(0);
            if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v207))
            {
              v208 = sub_1000BA294(&qword_100BD7148);
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
            }
            else
            {
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v207 - 8) + 16))(a1, a2, v207);
              _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v207);
            }
            v168 = a1;
            v169 = v165;
            v170 = 1;
          }
          else
          {
            if (v166)
            {
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
              goto LABEL_180;
            }
            v167 = type metadata accessor for ConfiguredUnit(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(a1, a2, v167);
            v168 = a1;
            v169 = v165;
            v170 = 0;
          }
          swift_storeEnumTagMultiPayload(v168, v169, v170);
LABEL_180:
          v48 = a1;
          v49 = v46;
          v50 = 10;
LABEL_188:
          swift_storeEnumTagMultiPayload(v48, v49, v50);
LABEL_189:
          v7 = a1;
          v8 = a3;
          v9 = 2;
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
          goto LABEL_189;
      }
      goto LABEL_190;
    case 3u:
      v10 = type metadata accessor for LocationsAction(0);
      switch(swift_getEnumCaseMultiPayload(a2, v10))
      {
        case 0u:
          v11 = type metadata accessor for CurrentLocation(0);
          v12 = swift_getEnumCaseMultiPayload(a2, v11);
          if (v12 == 2)
          {
            v226 = type metadata accessor for Location(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v226 - 8) + 16))(a1, a2, v226);
            v14 = a1;
            v15 = v11;
            v16 = 2;
          }
          else if (v12 == 1)
          {
            v227 = type metadata accessor for Location(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v227 - 8) + 16))(a1, a2, v227);
            v14 = a1;
            v15 = v11;
            v16 = 1;
          }
          else
          {
            if (v12)
            {
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
              goto LABEL_152;
            }
            v13 = type metadata accessor for Location(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
            v14 = a1;
            v15 = v11;
            v16 = 0;
          }
          swift_storeEnumTagMultiPayload(v14, v15, v16);
LABEL_152:
          v126 = a1;
          v127 = v10;
          v128 = 0;
          goto LABEL_153;
        case 1u:
          v124 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(a1, a2, v124);
          v125 = sub_1000BA294(&qword_100BDEBF8);
          *((_BYTE *)a1 + *(int *)(v125 + 48)) = a2[*(int *)(v125 + 48)];
          v126 = a1;
          v127 = v10;
          v128 = 1;
          goto LABEL_153;
        case 2u:
          v129 = *(_QWORD *)a2;
          v130 = *((_QWORD *)a2 + 1);
          *a1 = v129;
          a1[1] = v130;
          swift_bridgeObjectRetain(v129);
          swift_bridgeObjectRetain(v130);
          v126 = a1;
          v127 = v10;
          v128 = 2;
          goto LABEL_153;
        case 5u:
          v143 = *(_QWORD *)a2;
          *a1 = *(_QWORD *)a2;
          swift_bridgeObjectRetain(v143);
          v126 = a1;
          v127 = v10;
          v128 = 5;
          goto LABEL_153;
        case 6u:
          v144 = *(_QWORD *)a2;
          v145 = *((_QWORD *)a2 + 1);
          v146 = a2[16];
          sub_100163980(v144, v145, v146);
          *a1 = v144;
          a1[1] = v145;
          *((_BYTE *)a1 + 16) = v146;
          v126 = a1;
          v127 = v10;
          v128 = 6;
LABEL_153:
          swift_storeEnumTagMultiPayload(v126, v127, v128);
          goto LABEL_154;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_154:
          v7 = a1;
          v8 = a3;
          v9 = 3;
          goto LABEL_190;
      }
    case 4u:
      v51 = type metadata accessor for NotificationsAction(0);
      switch(swift_getEnumCaseMultiPayload(a2, v51))
      {
        case 1u:
          v52 = type metadata accessor for LocationModel(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v52))
          {
            v53 = type metadata accessor for NotificationLocation(0);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(a1, a2, v52);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v52);
          }
          v199 = *(int *)(sub_1000BA294((uint64_t *)&unk_100C0B810) + 48);
          v200 = (char *)a1 + v199;
          v201 = &a2[v199];
          v202 = type metadata accessor for URL(0);
          if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v201, 1, v202))
          {
            v203 = sub_1000BA294(&qword_100BD4280);
            memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v202 - 8) + 16))(v200, v201, v202);
            _s7Weather24LocationCompositionStateOwst_0((uint64_t)v200, 0, 1, v202);
          }
          v176 = a1;
          v177 = v51;
          v178 = 1;
          goto LABEL_126;
        case 2u:
          v171 = type metadata accessor for NotificationSubscription.Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(a1, a2, v171);
          v172 = *(int *)(sub_1000BA294(&qword_100BD2378) + 48);
          v173 = (char *)a1 + v172;
          v174 = &a2[v172];
          v175 = type metadata accessor for NotificationSubscription.Kind(0);
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v173, v174, v175);
          v176 = a1;
          v177 = v51;
          v178 = 2;
          goto LABEL_126;
        case 3u:
          v179 = *(_QWORD *)a2;
          *a1 = *(_QWORD *)a2;
          swift_bridgeObjectRetain(v179);
          v176 = a1;
          v177 = v51;
          v178 = 3;
          goto LABEL_126;
        case 4u:
          v180 = *(_QWORD *)a2;
          *a1 = *(_QWORD *)a2;
          swift_bridgeObjectRetain(v180);
          v176 = a1;
          v177 = v51;
          v178 = 4;
          goto LABEL_126;
        case 5u:
          v181 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(a1, a2, v181);
          v182 = *(int *)(sub_1000BA294(&qword_100BD2370) + 48);
          v183 = (char *)a1 + v182;
          v184 = &a2[v182];
          v185 = type metadata accessor for NotificationSubscription.Kind(0);
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
          v176 = a1;
          v177 = v51;
          v178 = 5;
LABEL_126:
          swift_storeEnumTagMultiPayload(v176, v177, v178);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
          break;
      }
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_190;
    case 5u:
      v54 = type metadata accessor for NotificationsOptInAction(0);
      v55 = swift_getEnumCaseMultiPayload(a2, v54);
      switch(v55)
      {
        case 4:
          v100 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(a1, a2, v100);
          v58 = a1;
          v59 = v54;
          v60 = 4;
          goto LABEL_65;
        case 3:
          v101 = *(_QWORD *)a2;
          *a1 = *(_QWORD *)a2;
          *((_BYTE *)a1 + 8) = a2[8];
          swift_bridgeObjectRetain(v101);
          v58 = a1;
          v59 = v54;
          v60 = 3;
          goto LABEL_65;
        case 2:
          v56 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(a1, a2, v56);
          v57 = sub_1000BA294(&qword_100BCB648);
          *((_BYTE *)a1 + *(int *)(v57 + 48)) = a2[*(int *)(v57 + 48)];
          v58 = a1;
          v59 = v54;
          v60 = 2;
LABEL_65:
          swift_storeEnumTagMultiPayload(v58, v59, v60);
          goto LABEL_67;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
LABEL_67:
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_190;
    case 6u:
      v17 = type metadata accessor for ViewAction(0);
      switch(swift_getEnumCaseMultiPayload(a2, v17))
      {
        case 0u:
          v18 = type metadata accessor for ListViewAction(0);
          v19 = swift_getEnumCaseMultiPayload(a2, v18);
          if (v19 == 2)
          {
            v204 = type metadata accessor for Location.Identifier(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v204 - 8) + 16))(a1, a2, v204);
            v22 = a1;
            v23 = v18;
            v24 = 2;
          }
          else
          {
            if (v19)
            {
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
              goto LABEL_131;
            }
            v20 = type metadata accessor for LocationModel(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
            v21 = sub_1000BA294(&qword_100BDDB50);
            *((_BYTE *)a1 + *(int *)(v21 + 48)) = a2[*(int *)(v21 + 48)];
            v22 = a1;
            v23 = v18;
            v24 = 0;
          }
          swift_storeEnumTagMultiPayload(v22, v23, v24);
LABEL_131:
          v156 = a1;
          v157 = v17;
          v158 = 0;
          goto LABEL_185;
        case 1u:
          v131 = type metadata accessor for LocationViewerViewAction(0);
          v132 = swift_getEnumCaseMultiPayload(a2, v131);
          switch(v132)
          {
            case 2:
              v228 = type metadata accessor for Location.Identifier(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v228 - 8) + 16))(a1, a2, v228);
              v134 = a1;
              v135 = v131;
              v136 = 2;
              goto LABEL_157;
            case 1:
              v229 = type metadata accessor for WeatherMapOverlayKind(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v229 - 8) + 16))(a1, a2, v229);
              v134 = a1;
              v135 = v131;
              v136 = 1;
              goto LABEL_157;
            case 0:
              v133 = type metadata accessor for LocationModel(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(a1, a2, v133);
              v134 = a1;
              v135 = v131;
              v136 = 0;
LABEL_157:
              swift_storeEnumTagMultiPayload(v134, v135, v136);
              goto LABEL_159;
          }
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
LABEL_159:
          v156 = a1;
          v157 = v17;
          v158 = 1;
LABEL_185:
          swift_storeEnumTagMultiPayload(v156, v157, v158);
LABEL_186:
          v7 = a1;
          v8 = a3;
          v9 = 6;
          break;
        case 3u:
          v137 = type metadata accessor for SearchViewAction(0);
          switch(swift_getEnumCaseMultiPayload(a2, v137))
          {
            case 0u:
              v138 = type metadata accessor for CodableError(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v138 - 8) + 16))(a1, a2, v138);
              v139 = a1;
              v140 = v137;
              v141 = 0;
              goto LABEL_183;
            case 1u:
              v234 = *(_QWORD *)a2;
              *a1 = *(_QWORD *)a2;
              swift_bridgeObjectRetain(v234);
              v139 = a1;
              v140 = v137;
              v141 = 1;
              goto LABEL_183;
            case 2u:
              v235 = *((_QWORD *)a2 + 1);
              *a1 = *(_QWORD *)a2;
              a1[1] = v235;
              swift_bridgeObjectRetain(v235);
              v139 = a1;
              v140 = v137;
              v141 = 2;
              goto LABEL_183;
            case 3u:
              v236 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v236 - 8) + 16))(a1, a2, v236);
              v139 = a1;
              v140 = v137;
              v141 = 3;
              goto LABEL_183;
            case 4u:
              v237 = type metadata accessor for LocationOfInterest(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v237 - 8) + 16))(a1, a2, v237);
              v139 = a1;
              v140 = v137;
              v141 = 4;
              goto LABEL_183;
            case 5u:
              v239 = *(void **)a2;
              v238 = *((_QWORD *)a2 + 1);
              *a1 = *(_QWORD *)a2;
              a1[1] = v238;
              v241 = *((_QWORD *)a2 + 2);
              v240 = *((_QWORD *)a2 + 3);
              a1[2] = v241;
              a1[3] = v240;
              v243 = *((_QWORD *)a2 + 4);
              v242 = *((_QWORD *)a2 + 5);
              a1[4] = v243;
              a1[5] = v242;
              v244 = *((_QWORD *)a2 + 6);
              a1[6] = v244;
              v245 = type metadata accessor for SearchLocation(0);
              v246 = *(int *)(v245 + 32);
              v260 = (char *)a1 + v246;
              v262 = v245;
              v258 = &a2[v246];
              v247 = type metadata accessor for Location(0);
              v248 = v239;
              swift_bridgeObjectRetain(v241);
              swift_bridgeObjectRetain(v243);
              swift_bridgeObjectRetain(v244);
              if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v258, 1, v247))
              {
                v249 = sub_1000BA294(&qword_100BC35F8);
                memcpy(v260, v258, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v260, v258, v247);
                _s7Weather24LocationCompositionStateOwst_0((uint64_t)v260, 0, 1, v247);
              }
              v251 = *(int *)(v262 + 36);
              v252 = (char *)a1 + v251;
              v253 = &a2[v251];
              *(_OWORD *)v252 = *(_OWORD *)v253;
              v252[16] = v253[16];
              v139 = a1;
              v140 = v137;
              v141 = 5;
              goto LABEL_183;
            case 6u:
              v250 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v250 - 8) + 16))(a1, a2, v250);
              v139 = a1;
              v140 = v137;
              v141 = 6;
LABEL_183:
              swift_storeEnumTagMultiPayload(v139, v140, v141);
              break;
            default:
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
              break;
          }
          v156 = a1;
          v157 = v17;
          v158 = 3;
          goto LABEL_185;
        case 4u:
          v147 = type metadata accessor for InteractiveMapViewAction(0);
          switch(swift_getEnumCaseMultiPayload(a2, v147))
          {
            case 0u:
              v148 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(a1, a2, v148);
              v149 = a1;
              v150 = v147;
              v151 = 0;
              goto LABEL_165;
            case 1u:
              v230 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v230 - 8) + 16))(a1, a2, v230);
              v149 = a1;
              v150 = v147;
              v151 = 1;
              goto LABEL_165;
            case 2u:
              v231 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v231 - 8) + 16))(a1, a2, v231);
              v149 = a1;
              v150 = v147;
              v151 = 2;
              goto LABEL_165;
            case 3u:
              v232 = type metadata accessor for WeatherMapOverlayKind(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(a1, a2, v232);
              v149 = a1;
              v150 = v147;
              v151 = 3;
              goto LABEL_165;
            case 4u:
              v233 = type metadata accessor for Location(0);
              (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(a1, a2, v233);
              v149 = a1;
              v150 = v147;
              v151 = 4;
LABEL_165:
              swift_storeEnumTagMultiPayload(v149, v150, v151);
              break;
            default:
              memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
              break;
          }
          v156 = a1;
          v157 = v17;
          v158 = 4;
          goto LABEL_185;
        case 5u:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_BYTE *)a1 + 16) = a2[16];
          *((_BYTE *)a1 + 17) = a2[17];
          *((_BYTE *)a1 + 18) = a2[18];
          v152 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
          v153 = (char *)a1 + v152;
          v154 = &a2[v152];
          v155 = type metadata accessor for DynamicTypeSize(0);
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v153, v154, v155);
          v156 = a1;
          v157 = v17;
          v158 = 5;
          goto LABEL_185;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          goto LABEL_186;
      }
      goto LABEL_190;
    case 7u:
      v61 = type metadata accessor for ModalViewAction(0);
      v62 = swift_getEnumCaseMultiPayload(a2, v61);
      if (v62 == 3)
      {
        v83 = *(_QWORD *)a2;
        if ((~*(_QWORD *)a2 & 0xF000000000000006) != 0)
        {
          v189 = *((_QWORD *)a2 + 1);
          v190 = *((_QWORD *)a2 + 2);
          v191 = *((_QWORD *)a2 + 3);
          v192 = *((_QWORD *)a2 + 4);
          v193 = *((_QWORD *)a2 + 7);
          v255 = *((_QWORD *)a2 + 5);
          v256 = *((_QWORD *)a2 + 8);
          v257 = *((_QWORD *)a2 + 9);
          v259 = *((_QWORD *)a2 + 10);
          v261 = *((_QWORD *)a2 + 11);
          v194 = *((_QWORD *)a2 + 6);
          sub_10019D33C(v83, v189, v190, v191, v192, v255, v194, v193, v256, v257, v259, v261);
          *a1 = v83;
          a1[1] = v189;
          a1[2] = v190;
          a1[3] = v191;
          a1[4] = v192;
          a1[5] = v255;
          a1[6] = v194;
          a1[7] = v193;
          a1[8] = v256;
          a1[9] = v257;
          a1[10] = v259;
          a1[11] = v261;
        }
        else
        {
          memcpy(a1, a2, 0x60uLL);
        }
        v186 = a1;
        v187 = v61;
        v188 = 3;
      }
      else
      {
        if (v62)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
          goto LABEL_114;
        }
        v63 = type metadata accessor for LocationPreviewViewAction(0);
        if (swift_getEnumCaseMultiPayload(a2, v63) == 1)
        {
          v64 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(a1, a2, v64);
          swift_storeEnumTagMultiPayload(a1, v63, 1);
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        v186 = a1;
        v187 = v61;
        v188 = 0;
      }
      swift_storeEnumTagMultiPayload(v186, v187, v188);
LABEL_114:
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_190;
    case 8u:
      v65 = type metadata accessor for LocationViewAction(0);
      v66 = swift_getEnumCaseMultiPayload(a2, v65);
      if (v66 == 2)
      {
        v102 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(a1, a2, v102);
        v103 = *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48);
        v104 = (char *)a1 + v103;
        v105 = &a2[v103];
        v106 = type metadata accessor for LocationOfInterest(0);
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
        v107 = *(int *)(sub_1000BA294(&qword_100BC5FB8) + 48);
        v108 = (char *)a1 + v107;
        v109 = &a2[v107];
        v110 = *((_OWORD *)v109 + 1);
        *(_OWORD *)v108 = *(_OWORD *)v109;
        *((_OWORD *)v108 + 1) = v110;
        v108[32] = v109[32];
        v68 = a1;
        v69 = v65;
        v70 = 2;
      }
      else if (v66 == 1)
      {
        v111 = type metadata accessor for LocationComponentAction(0);
        switch(swift_getEnumCaseMultiPayload(a2, v111))
        {
          case 0u:
            v112 = type metadata accessor for URL(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(a1, a2, v112);
            v113 = sub_1000BA294(&qword_100BC5FE8);
            *((_BYTE *)a1 + *(int *)(v113 + 48)) = a2[*(int *)(v113 + 48)];
            v114 = a1;
            v115 = v111;
            v116 = 0;
            goto LABEL_141;
          case 1u:
            v209 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v209 - 8) + 16))(a1, a2, v209);
            v114 = a1;
            v115 = v111;
            v116 = 1;
            goto LABEL_141;
          case 2u:
            v210 = type metadata accessor for DetailCondition(0);
            (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v210 - 8) + 16))(a1, a2, v210);
            v211 = sub_1000BA294(&qword_100BC5FF8);
            *((_BYTE *)a1 + *(int *)(v211 + 48)) = a2[*(int *)(v211 + 48)];
            v114 = a1;
            v115 = v111;
            v116 = 2;
            goto LABEL_141;
          case 4u:
            *(_BYTE *)a1 = *a2;
            v212 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
            v213 = (char *)a1 + v212;
            v214 = &a2[v212];
            v215 = type metadata accessor for Location(0);
            (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v215 - 8) + 16))(v213, v214, v215);
            v114 = a1;
            v115 = v111;
            v116 = 4;
LABEL_141:
            swift_storeEnumTagMultiPayload(v114, v115, v116);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
            break;
        }
        v216 = sub_1000BA294(&qword_100BC5FC8);
        v217 = *(int *)(v216 + 48);
        v218 = (char *)a1 + v217;
        v219 = &a2[v217];
        v220 = *((_OWORD *)v219 + 1);
        *(_OWORD *)v218 = *(_OWORD *)v219;
        *((_OWORD *)v218 + 1) = v220;
        v218[32] = v219[32];
        v221 = *(int *)(v216 + 64);
        v222 = (char *)a1 + v221;
        v223 = &a2[v221];
        v224 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v223, 1, v224))
        {
          v225 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v224 - 8) + 16))(v222, v223, v224);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v222, 0, 1, v224);
        }
        v68 = a1;
        v69 = v65;
        v70 = 1;
      }
      else
      {
        if (v66)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          goto LABEL_147;
        }
        v67 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(a1, a2, v67);
        v68 = a1;
        v69 = v65;
        v70 = 0;
      }
      swift_storeEnumTagMultiPayload(v68, v69, v70);
LABEL_147:
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_190;
    case 9u:
      v71 = type metadata accessor for WeatherDataAction(0);
      v72 = (char *)&loc_1000B7BB4 + 4 * word_10099C5C0[swift_getEnumCaseMultiPayload(a2, v71)];
      __asm { BR              X10 }
      return result;
    case 0xAu:
      v73 = type metadata accessor for DebugAction(0);
      v74 = swift_getEnumCaseMultiPayload(a2, v73);
      if (v74 == 1)
      {
        v84 = type metadata accessor for Location(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(a1, a2, v84);
        v85 = a1;
        v86 = v73;
        v87 = 1;
      }
      else
      {
        if (v74)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
          goto LABEL_118;
        }
        v75 = type metadata accessor for WeatherCondition(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v75))
        {
          v76 = sub_1000BA294(&qword_100BC3660);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(a1, a2, v75);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v75);
        }
        v195 = *(int *)(sub_1000BA294(&qword_100BD0A98) + 48);
        v196 = (uint64_t *)((char *)a1 + v195);
        v197 = &a2[v195];
        v198 = *((_QWORD *)v197 + 1);
        *v196 = *(_QWORD *)v197;
        v196[1] = v198;
        swift_bridgeObjectRetain(v198);
        v85 = a1;
        v86 = v73;
        v87 = 0;
      }
      swift_storeEnumTagMultiPayload(v85, v86, v87);
LABEL_118:
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_190;
    case 0xBu:
      v25 = type metadata accessor for ConditionDetailViewAction(0);
      v26 = swift_getEnumCaseMultiPayload(a2, v25);
      switch(v26)
      {
        case 2:
          v88 = *((_QWORD *)a2 + 1);
          *a1 = *(_QWORD *)a2;
          a1[1] = v88;
          v89 = (int *)type metadata accessor for DetailChartSelection(0);
          v90 = v89[5];
          v91 = (char *)a1 + v90;
          v92 = &a2[v90];
          v93 = type metadata accessor for Date(0);
          v94 = *(void (**)(char *, unsigned __int8 *, uint64_t, __n128))(*(_QWORD *)(v93 - 8) + 16);
          v95 = swift_bridgeObjectRetain(v88);
          v94(v91, v92, v93, v95);
          ((void (*)(char *, unsigned __int8 *, uint64_t))v94)((char *)a1 + v89[6], &a2[v89[6]], v93);
          ((void (*)(char *, unsigned __int8 *, uint64_t))v94)((char *)a1 + v89[7], &a2[v89[7]], v93);
          *(uint64_t *)((char *)a1 + v89[8]) = *(_QWORD *)&a2[v89[8]];
          v96 = v89[9];
          v97 = (char *)a1 + v96;
          v98 = &a2[v96];
          v97[8] = v98[8];
          *(_QWORD *)v97 = *(_QWORD *)v98;
          v28 = a1;
          v29 = v25;
          v30 = 2;
          goto LABEL_60;
        case 1:
          v99 = type metadata accessor for DetailCondition(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(a1, a2, v99);
          v28 = a1;
          v29 = v25;
          v30 = 1;
          goto LABEL_60;
        case 0:
          v27 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
          v28 = a1;
          v29 = v25;
          v30 = 0;
LABEL_60:
          swift_storeEnumTagMultiPayload(v28, v29, v30);
          goto LABEL_62;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_62:
      v7 = a1;
      v8 = a3;
      v9 = 11;
      goto LABEL_190;
    case 0xDu:
      v31 = type metadata accessor for MoonDetailViewAction(0);
      v32 = swift_getEnumCaseMultiPayload(a2, v31);
      if (v32 == 1)
      {
        v82 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(a1, a2, v82);
        v36 = a1;
        v37 = v31;
        v38 = 1;
        goto LABEL_50;
      }
      if (!v32)
      {
        v33 = type metadata accessor for MoonDetailSelectedDate(0);
        v34 = swift_getEnumCaseMultiPayload(a2, v33);
        v35 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a1, a2, v35);
        swift_storeEnumTagMultiPayload(a1, v33, v34);
        v36 = a1;
        v37 = v31;
        v38 = 0;
LABEL_50:
        swift_storeEnumTagMultiPayload(v36, v37, v38);
        goto LABEL_52;
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
LABEL_52:
      v7 = a1;
      v8 = a3;
      v9 = 13;
LABEL_190:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      return a1;
    case 0xEu:
      v39 = type metadata accessor for AveragesDetailViewAction(0);
      if (swift_getEnumCaseMultiPayload(a2, v39) == 1)
      {
        *a1 = *(_QWORD *)a2;
        v40 = (int *)type metadata accessor for DetailHeroChartLollipopPosition(0);
        v41 = v40[5];
        v42 = (char *)a1 + v41;
        v43 = &a2[v41];
        v44 = type metadata accessor for Date(0);
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        *(uint64_t *)((char *)a1 + v40[6]) = *(_QWORD *)&a2[v40[6]];
        *(uint64_t *)((char *)a1 + v40[7]) = *(_QWORD *)&a2[v40[7]];
        swift_storeEnumTagMultiPayload(a1, v39, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      v7 = a1;
      v8 = a3;
      v9 = 14;
      goto LABEL_190;
    case 0x10u:
      v45 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v45;
      swift_bridgeObjectRetain(v45);
      v7 = a1;
      v8 = a3;
      v9 = 16;
      goto LABEL_190;
    case 0x11u:
      v77 = type metadata accessor for PerformanceTestAction(0);
      switch(swift_getEnumCaseMultiPayload(a2, v77))
      {
        case 0u:
          v78 = type metadata accessor for DetailCondition(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(a1, a2, v78);
          v79 = a1;
          v80 = v77;
          v81 = 0;
          goto LABEL_76;
        case 2u:
          v117 = type metadata accessor for Location(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(a1, a2, v117);
          v79 = a1;
          v80 = v77;
          v81 = 2;
          goto LABEL_76;
        case 3u:
          *a1 = *(_QWORD *)a2;
          v118 = sub_1000BA294((uint64_t *)&unk_100BFFA70);
          v119 = *(int *)(v118 + 48);
          v120 = (char *)a1 + v119;
          v121 = &a2[v119];
          v122 = type metadata accessor for WeatherMapOverlayKind(0);
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
          *((_BYTE *)a1 + *(int *)(v118 + 64)) = a2[*(int *)(v118 + 64)];
          v79 = a1;
          v80 = v77;
          v81 = 3;
          goto LABEL_76;
        case 4u:
          v123 = type metadata accessor for WeatherCondition(0);
          (*(void (**)(uint64_t *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(a1, a2, v123);
          v79 = a1;
          v80 = v77;
          v81 = 4;
LABEL_76:
          swift_storeEnumTagMultiPayload(v79, v80, v81);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
          break;
      }
      v7 = a1;
      v8 = a3;
      v9 = 17;
      goto LABEL_190;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

uint64_t type metadata accessor for WeatherDataAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C16558;
  if (!qword_100C16558)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherDataAction);
  return result;
}

uint64_t type metadata accessor for NewsDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C162E8;
  if (!qword_100C162E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsDataModel);
  return result;
}

uint64_t sub_1000B9F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v78;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v27 = *(_QWORD *)(a2 + 16);
    v26 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v26;
    v29 = *(_QWORD *)(a2 + 32);
    v28 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v29;
    *(_QWORD *)(a1 + 40) = v28;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v30 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
    v31 = v30[9];
    v32 = a1 + v31;
    v33 = a2 + v31;
    v34 = type metadata accessor for Precipitation(0);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain(v27);
    v36 = swift_bridgeObjectRetain(v29);
    v35(v32, v33, v34, v36);
    v37 = v30[10];
    v38 = (_QWORD *)(a1 + v37);
    v39 = (_QWORD *)(a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = v30[11];
    v42 = (_QWORD *)(a1 + v41);
    v43 = (_QWORD *)(a2 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = v30[12];
    v46 = (_QWORD *)(a1 + v45);
    v47 = (_QWORD *)(a2 + v45);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v49 = v30[13];
    v50 = a1 + v49;
    v51 = a2 + v49;
    v52 = type metadata accessor for Date(0);
    v78 = a3;
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v44);
    v54 = swift_bridgeObjectRetain(v48);
    v53(v50, v51, v52, v54);
    v55 = v30[14];
    v56 = a1 + v55;
    v57 = a2 + v55;
    v58 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
    *(_BYTE *)(a1 + v30[15]) = *(_BYTE *)(a2 + v30[15]);
    v59 = v30[16];
    v60 = *(_QWORD *)(a2 + v59);
    *(_QWORD *)(a1 + v59) = v60;
    swift_bridgeObjectRetain(v60);
    v23 = a1;
    v24 = v78;
    v25 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    v9 = v8[5];
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[6];
    v14 = *(_QWORD *)(a2 + v13);
    *(_QWORD *)(a1 + v13) = v14;
    v15 = v8[7];
    v16 = (_QWORD *)(a1 + v15);
    v17 = (_QWORD *)(a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v8[8];
    v20 = (_QWORD *)(a1 + v19);
    v21 = (_QWORD *)(a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    v23 = a1;
    v24 = a3;
    v25 = 1;
  }
  else
  {
    v61 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(a1, a2, v61);
    v62 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    v63 = v62[5];
    v64 = a1 + v63;
    v65 = a2 + v63;
    v66 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    v67 = v62[6];
    v68 = *(_QWORD *)(a2 + v67);
    *(_QWORD *)(a1 + v67) = v68;
    v69 = v62[7];
    v70 = (_QWORD *)(a1 + v69);
    v71 = (_QWORD *)(a2 + v69);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    v73 = v62[8];
    v74 = (_QWORD *)(a1 + v73);
    v75 = (_QWORD *)(a2 + v73);
    v76 = v75[1];
    *v74 = *v75;
    v74[1] = v76;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v76);
    v23 = a1;
    v24 = a3;
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
  return a1;
}

uint64_t sub_1000BA294(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000BA2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return 0;
}

uint64_t sub_1000BA304()
{
  return type metadata accessor for LollipopDetailViewModel(0);
}

void sub_1000BA30C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

double sub_1000BA31C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000BA340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Swift::String v8;

  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v8, *(Swift::String *)&a8)._countAndFlagsBits;
}

uint64_t sub_1000BA34C()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  char *v5;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = *(int *)(type metadata accessor for LocationHeaderViewMeasurements(0) + 32);
  v5 = (char *)v0 + v4;
  *(_OWORD *)v5 = *(_OWORD *)((char *)v1 + v4);
  v5[16] = *((_BYTE *)v1 + v4 + 16);
  v5[17] = *((_BYTE *)v1 + v4 + 17);
  v5[18] = *((_BYTE *)v1 + v4 + 18);
  return type metadata accessor for DisplayMetrics(0);
}

double sub_1000BA3A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  a1[2] = v17;
  a1[3] = a12;
  a1[4] = a15;
  a1[5] = a11;
  a1[6] = v15;
  a1[7] = a10;
  a1[8] = v16;
  *(_QWORD *)&result = swift_retain(v15).n128_u64[0];
  return result;
}

uint64_t sub_1000BA3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, 0, 0, a4, 0, a1);
}

uint64_t sub_1000BA3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getTupleTypeMetadata(255, 8, a3, 0, 0);
}

uint64_t sub_1000BA3F4()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000BA400@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000BA410()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_1000BA418(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_1000BA424()
{
  return type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
}

uint64_t sub_1000BA434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  return State.init(wrappedValue:)(&a13, v13);
}

uint64_t sub_1000BA444()
{
  return type metadata accessor for DetailChartGradientModel(0);
}

void *sub_1000BA454(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_1000BA468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BA47C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v2);
}

uint64_t sub_1000BA4A4(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 112), 1, 1, a1);
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000BA4CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v2 + a1, v1);
}

uint64_t sub_1000BA4D8(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000BA4FC(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 6);
}

uint64_t sub_1000BA504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000BA528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

double sub_1000BA548@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000BA564()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000DB418(*(_QWORD **)(v1 - 328), v0);
  return v0;
}

uint64_t sub_1000BA58C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000BA594(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000BA5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000BA5C0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000BA5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v0, v2, v1);
}

uint64_t sub_1000BA5E8()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

double sub_1000BA5F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 - 64) = 0;
  *(_OWORD *)(v1 - 96) = 0u;
  *(_OWORD *)(v1 - 80) = 0u;
  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000BA608()
{
  uint64_t v0;

  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_1000BA618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return BidirectionalCollection<>.starts<A>(with:)(v3 - 112, v2, v2, v1, v0);
}

uint64_t sub_1000BA64C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

id sub_1000BA658(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return objc_msgSend(a1, *(SEL *)(v6 + 2552), v5, a4, a5, 0);
}

uint64_t sub_1000BA678()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000BA684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  return withAnimation<A>(_:_:)(a1, v3, &a3, a2 + 8);
}

uint64_t sub_1000BA6AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v2, v1);
}

uint64_t sub_1000BA6B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v2, v1);
}

uint64_t sub_1000BA6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Collection.distance(from:to:)(v2 - 136, v2 - 144, v1, v0);
}

uint64_t sub_1000BA6D8()
{
  return type metadata accessor for Domain(0);
}

void sub_1000BA6F4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1000BA708()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000BA718(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 2);
}

double sub_1000BA720()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 - 48) = 0;
  *(_OWORD *)(v1 - 80) = 0u;
  *(_OWORD *)(v1 - 64) = 0u;
  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000BA734()
{
  return UIListContentConfiguration.text.setter();
}

uint64_t sub_1000BA73C()
{
  uint64_t v0;

  return v0;
}

void sub_1000BA74C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000979AC(a1, v1);
}

_QWORD *sub_1000BA754(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  return static Published.subscript.getter(v1, v2, v3, a1);
}

uint64_t sub_1000BA76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for WireframeScrollInterestView(a1, a2, a3, a4);
}

uint64_t sub_1000BA78C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FullscreenMapView(0) - 8) + 80);
  return v0 + ((v1 + 16) & ~v1);
}

uint64_t sub_1000BA7B4(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1 + 32, va, 0, 0);
}

void sub_1000BA7C8(uint64_t a1@<X3>, unint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1005FF148(a2 > 1, v2, 1, a1);
}

uint64_t sub_1000BA7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000BA7EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000BA804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000BA814()
{
  NSBundle v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v4;

  v1._countAndFlagsBits = 0x72656874616577;
  v1._object = (void *)0xE700000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000036;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, v0, v2, v4)._countAndFlagsBits;
}

uint64_t sub_1000BA848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 144));
}

uint64_t sub_1000BA858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

uint64_t sub_1000BA874(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A3C(a1, v1);
}

uint64_t sub_1000BA87C@<X0>(uint64_t a1@<X8>)
{
  return LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_1000BA890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 104), v0);
}

uint64_t sub_1000BA8A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BA8B0()
{
  return type metadata accessor for MoonScrubberHeaderView(0);
}

uint64_t sub_1000BA8B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 - 8) + 8))();
}

uint64_t sub_1000BA8C4()
{
  return type metadata accessor for SevereAlertComponentViewModel(0);
}

void sub_1000BA8CC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000BA8E0()
{
  return 0;
}

__n128 *sub_1000BA8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;

  return sub_10011B8B8(&a9, (__n128 *)(v9 - 32));
}

uint64_t sub_1000BA908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LocalizedStringKey.init(stringLiteral:)(a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_1000BA914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000BA934(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 0);
}

uint64_t sub_1000BA944()
{
  return type metadata accessor for LollipopDetailViewModel(0);
}

uint64_t sub_1000BA94C(__n128 a1, double a2, __n128 a3)
{
  return static Animation.timingCurve(_:_:_:_:duration:)(a1, 0.0, a3, 1.0);
}

uint64_t sub_1000BA958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(a1, v4 - 128, a1, a4, 6);
}

uint64_t sub_1000BA968()
{
  return type metadata accessor for WeatherMapStatusBarColorSceneModifier(0);
}

uint64_t sub_1000BA970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_10035D57C(v0, v2, v1, v3);
}

__n128 sub_1000BA984@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  __n128 result;
  unsigned __int8 v8;

  v2 = v1->n128_u64[0];
  v3 = v1->n128_u8[8];
  v4 = v1[1].n128_u64[0];
  v5 = v1[1].n128_u8[8];
  v6 = v1[2].n128_u64[0];
  result = v1[3];
  v8 = v1[2].n128_u8[8];
  a1->n128_u64[0] = v2;
  a1->n128_u8[8] = v3;
  a1[1].n128_u64[0] = v4;
  a1[1].n128_u8[8] = v5;
  a1[2].n128_u64[0] = v6;
  a1[2].n128_u8[8] = v8;
  a1[3] = result;
  return result;
}

uint64_t sub_1000BA9C0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000BA9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_1000BA9E0(uint64_t a1, uint64_t a2)
{
  return sub_10008D47C(*(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

__n128 sub_1000BA9FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000BAA08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return URLHandlerPattern.init(scheme:host:path:fragment:params:conditions:)(a1, a2, 0xD000000000000011, v6, v5, v3, v4, v2);
}

uint64_t sub_1000BAA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 176) + 8))(v0, v1);
}

uint64_t sub_1000BAA3C(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 88) = 1752392040;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 88, v2 - 80);
}

uint64_t sub_1000BAA68(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11)
{
  __int128 v11;

  v11 = a1[1];
  a9 = *a1;
  a10 = v11;
  a11 = a1[2];
  return sub_100155B80(&a9);
}

double sub_1000BAA84@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000BAA90()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 312) = 0;
  *(_QWORD *)(v0 - 304) = 0xE000000000000000;
  *(_QWORD *)(v0 - 296) = 0;
  *(_QWORD *)(v0 - 288) = 0;
  *(_QWORD *)(v0 - 280) = 0;
  *(_QWORD *)(v0 - 272) = 0xE000000000000000;
  *(_QWORD *)(v0 - 264) = 0;
  *(_QWORD *)(v0 - 256) = 0xE000000000000000;
  *(_QWORD *)(v0 - 248) = 0;
  *(_QWORD *)(v0 - 240) = 0xE000000000000000;
  *(_QWORD *)(v0 - 232) = 0;
  *(_QWORD *)(v0 - 224) = 0xE000000000000000;
  *(_QWORD *)(v0 - 216) = 0;
  *(_QWORD *)(v0 - 208) = 0;
  *(_QWORD *)(v0 - 200) = 0;
  *(_QWORD *)(v0 - 192) = 0xE000000000000000;
  *(_QWORD *)(v0 - 184) = 0;
  *(_QWORD *)(v0 - 176) = 0xE000000000000000;
  *(_QWORD *)(v0 - 168) = 0;
  *(_QWORD *)(v0 - 160) = 0xE000000000000000;
  *(_QWORD *)(v0 - 152) = 0;
  *(_QWORD *)(v0 - 144) = 0;
  *(_QWORD *)(v0 - 136) = 0;
  *(_QWORD *)(v0 - 128) = 0xE000000000000000;
  *(_QWORD *)(v0 - 120) = 0;
  *(_QWORD *)(v0 - 112) = 0xE000000000000000;
  return v0 - 312;
}

void sub_1000BAB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10014461C(a1, a2, a3, 0x6C61766E4973692BLL, 0xEE00646574616469);
}

uint64_t sub_1000BAB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_1000AECD4(a1, a2);
  return swift_beginAccess(v3, v2, 33, 0);
}

__n128 *sub_1000BAB60(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  __n128 *result;

  a1[1] = a2;
  result = a1 + 3;
  *(_QWORD *)(v2 + 32) = 0x6E6F69746361;
  *(_QWORD *)(v2 + 40) = 0xE600000000000000;
  return result;
}

__n128 *sub_1000BAB80(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E6F69746361;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

void sub_1000BAB9C()
{
  void (*v0)(_QWORD);
  uint64_t v1;

  sub_1000B56EC(*(_QWORD *)(v1 - 88), v0);
}

uint64_t sub_1000BABA8(void *a1, uint64_t a2)
{
  return sub_1003E1924(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000);
}

uint64_t sub_1000BABB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000BABC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return os_signpost(_:dso:log:name:signpostID:)(a1, v3, v2, v4, 33, 2, v1);
}

uint64_t sub_1000BABDC()
{
  return type metadata accessor for Location.Identifier(0);
}

double sub_1000BABEC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0 & 0xFFFFFFFFFFFFFFBLL).n128_u64[0];
  return result;
}

uint64_t sub_1000BABFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

uint64_t sub_1000BAC14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t sub_1000BAC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BAC3C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000A8D4(v0, v1);
}

_QWORD *sub_1000BAC48(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)((uint64_t *)va, 0, 0, 1.0, 10.0, 0.0);
}

uint64_t sub_1000BAC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return type metadata accessor for ModifiedContent(255, v3, a3);
}

uint64_t sub_1000BAC70(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000BAC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BACF0()
{
  return type metadata accessor for AutomationInfoProperty(0);
}

uint64_t sub_1000BAD00()
{
  void *v0;

  return sub_1000274EC(v0);
}

uint64_t sub_1000BAD10()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000DB418((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return v1;
}

double sub_1000BAD38(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000BAD44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_1000BAD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_1000BAD5C()
{
  uint64_t v0;

  return sub_10010000C(v0);
}

uint64_t sub_1000BAD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void *sub_1000BAD74(uint64_t a1)
{
  uint64_t v1;

  return memcpy((void *)(a1 + 32), (const void *)(v1 - 184), 0x68uLL);
}

uint64_t sub_1000BAD84()
{
  return type metadata accessor for AppConfiguration(0);
}

uint64_t sub_1000BAD8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000BAD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BADA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v0, v1, 0, 0, 0, 1, v2, v2);
}

uint64_t sub_1000BADE0(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_1000BADEC(uint64_t a1)
{
  return Dictionary.init(dictionaryLiteral:)(a1);
}

uint64_t sub_1000BADF4()
{
  return type metadata accessor for MainAction(0);
}

uint64_t sub_1000BAE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return StateObject.wrappedValue.getter(a1, a2, a3, a4, v4);
}

uint64_t sub_1000BAE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 88, v3 - 65, v0, v1, v2);
}

uint64_t sub_1000BAE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BAE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_1000BAE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v0, v1);
}

uint64_t sub_1000BAE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v0, v1);
}

uint64_t sub_1000BAE80()
{
  return type metadata accessor for AutomationInfo(0);
}

uint64_t sub_1000BAE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  NSBundle v3;
  unint64_t v4;
  Swift::String v5;

  v4 = (a3 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v3, v5, *(Swift::String *)&a2)._countAndFlagsBits;
}

_QWORD *sub_1000BAEA8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return Hasher.init(_seed:)((uint64_t *)va);
}

void sub_1000BAEB4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(v0 + 953);
  *(_DWORD *)(v0 + 168) = *(unsigned __int8 *)(v0 + 952);
  *(_DWORD *)(v0 + 172) = v1;
  v2 = *(_QWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 944);
  *(_QWORD *)(v0 + 160) = v2;
  v3 = *(_QWORD *)(v0 + 920);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 144) = v3;
  LODWORD(v3) = *(unsigned __int8 *)(v0 + 913);
  *(_DWORD *)(v0 + 128) = *(unsigned __int8 *)(v0 + 912);
  *(_DWORD *)(v0 + 132) = v3;
  v4 = *(_QWORD *)(v0 + 896);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 904);
  *(_QWORD *)(v0 + 120) = v4;
  v5 = *(_QWORD *)(v0 + 880);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 888);
  *(_QWORD *)(v0 + 104) = v5;
  LODWORD(v5) = *(unsigned __int8 *)(v0 + 873);
  *(_DWORD *)(v0 + 88) = *(unsigned __int8 *)(v0 + 872);
  *(_DWORD *)(v0 + 92) = v5;
  v6 = *(_QWORD *)(v0 + 856);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 864);
  *(_QWORD *)(v0 + 80) = v6;
  v7 = *(_QWORD *)(v0 + 840);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 848);
  *(_QWORD *)(v0 + 64) = v7;
  LODWORD(v7) = *(unsigned __int8 *)(v0 + 833);
  *(_DWORD *)(v0 + 48) = *(unsigned __int8 *)(v0 + 832);
  *(_DWORD *)(v0 + 52) = v7;
  v8 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 824);
  *(_QWORD *)(v0 + 40) = v8;
  v9 = *(_QWORD *)(v0 + 800);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 808);
  *(_QWORD *)(v0 + 24) = v9;
  *(_DWORD *)(v0 + 204) = *(unsigned __int8 *)(v0 + 792);
  *(_QWORD *)(v0 + 8) = *(_QWORD *)(v0 + 776);
  v10 = *(_QWORD *)(v0 + 784);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 760);
  *(_QWORD *)(v0 + 192) = v10;
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 768);
}

uint64_t sub_1000BAF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_1000BAF84(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_100014364(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

uint64_t sub_1000BAF8C(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000BAFA0()
{
  return type metadata accessor for NotificationsOptInComponentView(0);
}

uint64_t sub_1000BAFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_1000BAFC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1001009A4(v1 + a1, v2);
}

uint64_t sub_1000BAFCC@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 72) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 72, v2);
}

uint64_t sub_1000BAFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  NSBundle v3;
  unint64_t v4;
  Swift::String v5;

  v4 = (a3 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v3, v5, *(Swift::String *)&a2)._countAndFlagsBits;
}

uint64_t sub_1000BB004()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000B15F8(*(_QWORD *)(v1 + v0[10]), *(_BYTE *)(v1 + v0[10] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[11]), *(_BYTE *)(v1 + v0[11] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[12]), *(_BYTE *)(v1 + v0[12] + 8));
  v2 = v1 + v0[13];
  sub_1000D31C4(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[14]), *(_BYTE *)(v1 + v0[14] + 8));
  return swift_release(*(_QWORD *)(v1 + v0[15] + 8));
}

uint64_t sub_1000BB084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 120) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 120, v3);
}

uint64_t sub_1000BB09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 72) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_1000BB0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10011A398(v1, a1 + v2);
}

unint64_t sub_1000BB0C0()
{
  return sub_10009FFE0();
}

uint64_t sub_1000BB0DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v0, v1, v2, v3, 0);
}

uint64_t sub_1000BB0F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DB418(a1, v1);
  return swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v2 + 8) + 4));
}

uint64_t sub_1000BB120()
{
  uint64_t v0;

  return sub_1008E380C(2, v0, 1, 4.0, 10.0);
}

uint64_t sub_1000BB144(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 3);
}

uint64_t sub_1000BB154(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void sub_1000BB168()
{
  sub_10011EDA4();
}

uint64_t sub_1000BB178()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 13);
}

uint64_t sub_1000BB188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t sub_1000BB1A0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 312) + 8))(v0, *(_QWORD *)(v1 - 264));
}

void sub_1000BB1BC()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000BB1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_10004AB04(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a3, a4);
}

uint64_t sub_1000BB1E0()
{
  return type metadata accessor for ScrubberDay(0);
}

uint64_t sub_1000BB1E8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1005E6A1C(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

id sub_1000BB1F0(id a1)
{
  return a1;
}

uint64_t sub_1000BB1F8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 144) + 8))(v0, *(_QWORD *)(v1 - 88));
}

uint64_t sub_1000BB21C()
{
  return type metadata accessor for DetailType(0);
}

uint64_t sub_1000BB22C(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000BB234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for TransitionContext(0, a2);
  return _s7Weather24LocationCompositionStateOwet_0(v2, 1, v3);
}

uint64_t sub_1000BB258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_100624EE4();
  return _ConditionalContent<>.init(storage:)(v1, *(_QWORD *)(v2 - 320), *(_QWORD *)(v2 - 304), a1, v4);
}

uint64_t sub_1000BB290(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(v2, a1, v3, v4);
}

uint64_t sub_1000BB2A8()
{
  return type metadata accessor for PressureComponentViewModel(0);
}

void *sub_1000BB2B8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

void *sub_1000BB2C0()
{
  uint64_t v0;
  uint64_t v1;

  return memcpy((void *)(v1 - 176), (const void *)(v0 + *(int *)(*(_QWORD *)(v1 - 320) + 60)), 0x49uLL);
}

uint64_t sub_1000BB2E4()
{
  uint64_t v0;

  return v0;
}

void sub_1000BB2F4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t sub_1000BB308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Updatable.save<A>(setting:value:)(a1, a2, v2, v3);
}

uint64_t sub_1000BB318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000BB328()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BB348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

void sub_1000BB358(unsigned __int8 a1@<W0>, _BYTE *a2@<X8>, char a3, char a4, uint64_t a5, char a6, char a7, char a8, uint64_t a9)
{
  uint64_t v9;

  sub_1007686D0(a1, 5, 5, v9, 0, 0, 2, 2, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000BB37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, (a3 - 32) | 0x8000000000000000, a2, v3);
}

void sub_1000BB390()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

__n128 sub_1000BB3A0(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_1000BB3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000BB3D8()
{
  uint64_t v0;

  return sub_1006CE70C(v0);
}

uint64_t sub_1000BB408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000BB434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

int8x8_t sub_1000BB444(int8x16_t a1, int8x16_t a2, int8x16_t a3, int8x16_t a4)
{
  int8x16_t v4;

  v4 = vorrq_s8(vorrq_s8(a3, a1), vorrq_s8(a4, a2));
  return vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
}

uint64_t sub_1000BB460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 65, v1, v0);
}

uint64_t sub_1000BB484(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000BB48C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100040308(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4);
}

uint64_t sub_1000BB494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 112), v0);
}

uint64_t sub_1000BB4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  return sub_1000DEBAC(0, 3, v26, v25, v24, 0, 0, 0, v23, v22, v21, v20, 0, 0, 0, 0, 0, 0, a19, a20);
}

uint64_t sub_1000BB4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_1000BB504(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000BB514()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  return sub_1000A5EBC(v0, v2 - 96, v1);
}

uint64_t sub_1000BB528@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 128) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 128, v2);
}

uint64_t sub_1000BB540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_1000BB558()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 - 168))(v0, *(unsigned int *)(v1 - 176), *(_QWORD *)(v1 - 112));
}

uint64_t sub_1000BB56C()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000BB580()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000BB594()
{
  return type metadata accessor for DetailCondition(0);
}

uint64_t sub_1000BB5A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000BB5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000BB5C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a1);
  *v1 = v3;
  v1[1] = v2;
  return result;
}

double sub_1000BB5FC@<D0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  return 4.0;
}

uint64_t sub_1000BB608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 192, v6 - 65, *(_QWORD *)(v5 + 56), a4, a5);
}

NSString sub_1000BB620()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000BB638()
{
  uint64_t v0;

  return sub_100147AE4(v0);
}

uint64_t sub_1000BB640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000BB650()
{
  return type metadata accessor for MainAction(0);
}

uint64_t sub_1000BB65C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

double sub_1000BB66C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v2;

  return v2 / *(double *)(v1 + 8 * a1);
}

uint64_t sub_1000BB680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

uint64_t sub_1000BB694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000BB6A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BB6BC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000BB6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000BB6D8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  sub_10004B134(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

uint64_t sub_1000BB6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BOOL4 a10)
{
  char v10;
  uint64_t v11;

  a10 = (v10 & 1) == 0;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, v11 + 4);
}

uint64_t sub_1000BB700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

double sub_1000BB710()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000BB728(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000BB738@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1);
}

uint64_t sub_1000BB748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000BB758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v4 - 312, v1, v3, a1);
}

uint64_t sub_1000BB778(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 73, v1, v2, a1);
}

uint64_t sub_1000BB798@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

void sub_1000BB7AC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 320) = 0;
  *(_BYTE *)(v0 - 328) = 0;
}

uint64_t sub_1000BB7CC()
{
  uint64_t v0;

  return sub_100600A44(v0 - 89, 0);
}

uint64_t sub_1000BB7DC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96));
}

uint64_t sub_1000BB7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v0);
}

unint64_t sub_1000BB7F8()
{
  return 0xD000000000000010;
}

uint64_t sub_1000BB810()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v0, 1, v1);
}

uint64_t sub_1000BB830@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

double sub_1000BB83C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

id sub_1000BB854()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 1960), v0);
}

uint64_t sub_1000BB864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 81, v1, a1);
}

uint64_t sub_1000BB87C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 - 296) + 32))(*(_QWORD *)(v0 - 272), *(_QWORD *)(v0 - 288), *(_QWORD *)(v0 - 280));
}

void sub_1000BB8A8()
{
  sub_1000B2E08();
}

uint64_t sub_1000BB8C0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 240) + 8))(v0, *(_QWORD *)(v1 - 232));
}

uint64_t sub_1000BB8D4()
{
  return AirQuality.scale.getter();
}

uint64_t sub_1000BB8DC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

_QWORD *sub_1000BB8EC()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1000DB418(v1, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1000BB8F8()
{
  return 0;
}

uint64_t sub_1000BB910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 96))(*(_QWORD *)(v2 - 112), v0);
}

uint64_t sub_1000BB924()
{
  return type metadata accessor for TemperatureChartKind(0);
}

uint64_t sub_1000BB934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000BB944@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v1, v2);
}

uint64_t sub_1000BB958(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Text.init(_:tableName:bundle:comment:)(a1, a2, a3 & 1, a4, 0, 0, 0, 0);
}

uint64_t sub_1000BB980()
{
  uint64_t v0;

  return sub_10010000C(v0);
}

uint64_t sub_1000BB988@<X0>(uint64_t a1@<X8>)
{
  return LocalizedStringKey.init(stringLiteral:)(0xD000000000000030, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_1000BB99C(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_1000BB9A4(uint64_t a1)
{
  uint64_t v1;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6465776F6C6C61, 0xE700000000000000, 0);
}

void sub_1000BB9C4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 80) = 0;
  *(_QWORD *)(v0 - 72) = 0xE000000000000000;
}

uint64_t sub_1000BB9D4()
{
  return type metadata accessor for WeatherActivity(0);
}

uint64_t sub_1000BB9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 144));
}

void sub_1000BB9F4()
{
  sub_100030C6C();
}

uint64_t sub_1000BBA0C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return sub_1009457A8(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3, a4);
}

double sub_1000BBA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  return sub_10094625C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t sub_1000BBA58()
{
  return type metadata accessor for LocationPreviewViewAction(0);
}

__n128 sub_1000BBA78()
{
  uint64_t v0;
  __n128 result;

  *(_OWORD *)(v0 - 240) = *(_OWORD *)(v0 - 128);
  result = *(__n128 *)(v0 - 112);
  *(__n128 *)(v0 - 272) = result;
  return result;
}

uint64_t sub_1000BBAA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  sub_1000DB418(v1, v2);
  return v2;
}

void sub_1000BBAD0()
{
  void *v0;

}

uint64_t sub_1000BBAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, 0, 0xE000000000000000, a6, 29, 2);
}

uint64_t sub_1000BBAF4()
{
  return type metadata accessor for DetailChartDataPoint(0);
}

id sub_1000BBAFC()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000BBB54(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

uint64_t sub_1000BBB5C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

uint64_t sub_1000BBB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getTupleTypeMetadata(a1, a2, a3, 0, 0);
}

uint64_t sub_1000BBB70()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, v0);
}

uint64_t sub_1000BBB90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BBBAC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 240) + 8))(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 224));
}

uint64_t sub_1000BBBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000BBBD8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  return sub_10006BD20(a1, v1);
}

uint64_t sub_1000BBBE0()
{
  uint64_t v0;

  return sub_1008E380C(2, v0, 0, 4.0, 10.0);
}

uint64_t sub_1000BBBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000BBC08()
{
  return ((uint64_t (*)(void))EnvironmentValues.subscript.getter)();
}

uint64_t sub_1000BBC10()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BBC28(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 368), 1, 1, a1);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000BBC6C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_1000BBC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000BBC98(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

uint64_t sub_1000BBCA0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000BBCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, a2, v3, v2);
}

uint64_t sub_1000BBCE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_1000BBCFC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000BBD10()
{
  return 0;
}

uint64_t sub_1000BBD38(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v1, v2);
}

uint64_t sub_1000BBD48(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BBD64()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  return sub_1000A5EBC(v0, v2 - 96, v1);
}

uint64_t sub_1000BBD78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_1000BBD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000BBD98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BBDB0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000BBDC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

void sub_1000BBDD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  sub_100248174(v2, v1, v0, v3 & 1, 0);
}

void sub_1000BBE18()
{
  sub_10011ECD4();
}

uint64_t sub_1000BBE30(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000BBE4C()
{
  return type metadata accessor for WeatherData(0);
}

uint64_t sub_1000BBE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25);
}

uint64_t sub_1000BBE68()
{
  return swift_task_switch();
}

uint64_t sub_1000BBE70()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t sub_1000BBE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Collection.distance(from:to:)(v2 - 120, v2 - 128, v1, v0);
}

uint64_t sub_1000BBE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t sub_1000BBE9C()
{
  return type metadata accessor for LocationPreviewView(0);
}

uint64_t sub_1000BBEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for EnvironmentState(0);
}

_QWORD *sub_1000BBEC4(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  return sub_10005F164(v1);
}

uint64_t sub_1000BBED0()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1000BBEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return StateObject.wrappedValue.getter(v3, v4, v1, v0, v2);
}

uint64_t sub_1000BBEF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  NSBundle v3;
  unint64_t v4;
  Swift::String v5;

  v4 = (a3 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v3, v5, *(Swift::String *)&a2)._countAndFlagsBits;
}

uint64_t sub_1000BBF18()
{
  return type metadata accessor for ModalViewAction(0);
}

uint64_t sub_1000BBF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, uint64_t a19)
{
  a19 = 0;
  a17 = 0u;
  a18 = 0u;
  return sub_1000A5F84((uint64_t)&a17, (uint64_t)&a10);
}

uint64_t sub_1000BBF38()
{
  return static UIListContentConfiguration.valueCell()();
}

void sub_1000BBF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005FF148(a1, a2, 1, v2);
}

void sub_1000BBF74(uint64_t a1, void *a2)
{
  sub_100010688(a1, a2, 0x656D614E79746963);
}

uint64_t sub_1000BBF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BBFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v5 + 8, v7 - 65, v6, a4, a5);
}

uint64_t sub_1000BBFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

uint64_t sub_1000BBFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return RandomAccessCollection<>.averageHumidity(from:timeZone:)(a1, v1, v2, v3);
}

uint64_t sub_1000BBFE4()
{
  return type metadata accessor for WeatherAlert.Prominence(0);
}

void sub_1000BBFEC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000BBFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v2, a2, v3);
}

uint64_t sub_1000BC008(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000BC024(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 112), 1, 1, a1);
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000BC04C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000BC060(__n128 a1, __n128 a2, __n128 a3)
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(a1, a2, a3, 0.0);
}

_OWORD *sub_1000BC068(_QWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 328) = a1;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  return sub_10011E834((_OWORD *)(v1 + 328), v2);
}

uint64_t sub_1000BC080()
{
  return type metadata accessor for WeatherNetworkActivity.Label(0);
}

void sub_1000BC08C(uint64_t a1)
{
  uint64_t *v1;

  sub_100021AA4(a1, v1);
}

uint64_t sub_1000BC094()
{
  return 16;
}

uint64_t sub_1000BC0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v5 - 65, v5 - 66, *(_QWORD *)(v5 - 104), a4, a5);
}

uint64_t sub_1000BC0B8()
{
  return type metadata accessor for AirQuality(0);
}

uint64_t sub_1000BC0C8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000BC0D4@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t sub_1000BC0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_1000BC0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100032068(a1, a2, a3, 0x657261657070612BLL, 0xE900000000000064);
}

uint64_t sub_1000BC114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_DWORD *)(v5 - 100) = a5 & 1;
  return type metadata accessor for Location.Identifier(0);
}

uint64_t sub_1000BC124()
{
  return 0;
}

uint64_t sub_1000BC13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v6, v3, a3, 0, v6, v4, v5);
}

uint64_t sub_1000BC174()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

uint64_t sub_1000BC184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000BC194(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000BC1B8()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 112, v0);
}

uint64_t sub_1000BC1D4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000BC1E8()
{
  return type metadata accessor for WeatherCondition(0);
}

uint64_t sub_1000BC1F8()
{
  return type metadata accessor for AccessibilityChildBehavior(0);
}

uint64_t sub_1000BC214()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000BC248()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000BC254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000BC264(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

void sub_1000BC274(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  sub_10007EBC8(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

uint64_t sub_1000BC298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

double sub_1000BC2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  double result;

  v9 = v4 & 1;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = v2;
  *(_BYTE *)(v3 + 16) = v9;
  *(_QWORD *)(v3 + 24) = v0;
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v8;
  *(_QWORD *)(v3 + 56) = v7;
  sub_1000D55D4(v1, v2, v9);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000BC2E8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000BC2F4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  return sub_10006BD20(a1, v1);
}

uint64_t sub_1000BC2FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 96), *(_QWORD *)(v1 - 104));
}

uint64_t sub_1000BC308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 104), a1);
}

unint64_t sub_1000BC31C@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000;
}

uint64_t sub_1000BC32C()
{
  uint64_t v0;

  return sub_1004B81D4(v0);
}

uint64_t sub_1000BC334(uint64_t a1)
{
  type metadata accessor for MoonDetailRootContentView(0);
  return a1;
}

uint64_t sub_1000BC36C()
{
  return type metadata accessor for SunriseSunsetDetailViewDataCache.ElevationCacheKey(0);
}

void sub_1000BC374()
{
  sub_1005FED88();
}

uint64_t sub_1000BC3B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BC3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000010, a4, 0);
}

uint64_t sub_1000BC3D0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x616365726F467361, 0xEA00000000007473, 0);
}

uint64_t sub_1000BC3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000BC400@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000BC40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Option.init(label:value:description:)(a1, a2, a3, 0, 0, v3);
}

uint64_t sub_1000BC41C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BC430()
{
  uint64_t v0;

  return sub_1000CE110((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 144), v0 - 112, v0 - 120, v0 - 128);
}

uint64_t sub_1000BC444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000BC458()
{
  return type metadata accessor for NotificationsOptInComponentViewModel(0);
}

uint64_t sub_1000BC460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return swift_arrayDestroy(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000BC480()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000BC48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BC49C()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_1000BC4A4@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 72, v1);
}

uint64_t sub_1000BC4BC()
{
  return type metadata accessor for LocationModel(0);
}

uint64_t sub_1000BC4CC()
{
  return type metadata accessor for WeatherConditionBackgroundTimeData(0);
}

uint64_t sub_1000BC4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000BC4EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000BC4FC(uint64_t a1)
{
  type metadata accessor for LocationViewCollisionOptionsUpdatingView(0);
  return a1;
}

void sub_1000BC534(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000AB54(a1, a2, v2);
}

uint64_t sub_1000BC53C(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  sub_1000DB418(a2, a2[3]);
  return a3(a1);
}

uint64_t sub_1000BC570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1000BC584()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000BC590(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BC5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1000E3404(v2, v0, v1);
}

uint64_t sub_1000BC5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return swift_getOpaqueTypeMetadata2(255, va, v6, 0);
}

uint64_t sub_1000BC5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BC5D8()
{
  return type metadata accessor for PrecipitationAveragesHeroChartView(0);
}

void sub_1000BC604(_BYTE *a1@<X8>)
{
  char v1;

  *a1 = v1;
}

uint64_t sub_1000BC60C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1000BC618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, a2, v3, v2);
}

uint64_t sub_1000BC634()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(*(_QWORD *)(v0 + 336), v1);
}

uint64_t sub_1000BC644(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000BC64C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000BC660()
{
  return type metadata accessor for CurrentWeather(0);
}

uint64_t sub_1000BC670(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

uint64_t sub_1000BC684()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000BC690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BC6A0()
{
  return 0x64692D656D6F73;
}

uint64_t sub_1000BC6E0()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000BC6EC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ShortDescription.init(name:_:)(0xD000000000000015, (a2 - 32) | 0x8000000000000000, a1, v2);
}

void sub_1000BC708()
{
  sub_1000B2E08();
}

uint64_t sub_1000BC714()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(*(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 144));
}

uint64_t sub_1000BC728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25);
}

uint64_t sub_1000BC740()
{
  _QWORD *v0;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 2);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 7);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0 + 12);
}

uint64_t sub_1000BC760()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000B15F8(*(_QWORD *)(v4 + v0[22]), *(_BYTE *)(v4 + v0[22] + 8));
  sub_1000B15F8(*(_QWORD *)(v4 + v0[23]), *(_BYTE *)(v4 + v0[23] + 8));
  sub_1000B15F8(*(_QWORD *)(v4 + v0[24]), *(_BYTE *)(v4 + v0[24] + 8));
  return swift_deallocObject(v1, v3, v2);
}

uint64_t sub_1000BC7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getOpaqueTypeMetadata2(a1, a2, a3, 0);
}

unint64_t sub_1000BC7BC()
{
  uint64_t v0;

  sub_1000DB418((_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  return sub_100126554();
}

uint64_t sub_1000BC7E0()
{
  return type metadata accessor for TrackExposureModifier(0);
}

uint64_t sub_1000BC7E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v4 - 304, v1, v2, v3, a1);
}

uint64_t sub_1000BC804()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1000BC814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000BC82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  return sub_1000DEBAC(0, 3, *(_QWORD *)(v20 - 432), *(_QWORD *)(v20 - 112), *(_QWORD *)(v20 - 120), 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1000BC894(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 288), 1, 1, a1);
  return type metadata accessor for ViewState(0);
}

void sub_1000BC8C0()
{
  void *v0;

}

uint64_t sub_1000BC8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000BC8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_1006D06A8(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a3, a4);
}

uint64_t sub_1000BC920(uint64_t (*a1)(void))
{
  return a1();
}

__n128 sub_1000BC93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32)
{
  return (__n128)a32;
}

uint64_t sub_1000BC950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 96, v3 - 65, v1, v2, a1);
}

uint64_t sub_1000BC970(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100040308(a1, a2, a3, 0xE400000000000000);
}

uint64_t sub_1000BC978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000BC988()
{
  return type metadata accessor for WindComponentViewModel(0);
}

uint64_t sub_1000BC990(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 120), 1, 1, a1);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000BC9B4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A3C(a1, v1);
}

uint64_t sub_1000BC9BC()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = 0;
  *(_OWORD *)(v2 - 160) = 0u;
  *(_OWORD *)(v2 - 144) = 0u;
  return sub_1000A5EBC(v1, v2 - 160, v0);
}

uint64_t sub_1000BC9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000BC9E4(uint64_t a1)
{
  uint64_t v1;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, v1);
}

uint64_t sub_1000BC9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000BCA04@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 128) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 128, v1);
}

uint64_t sub_1000BCA1C()
{
  uint64_t v0;
  uint64_t v1;

  return static NSObject.== infix(_:_:)(v1, v0);
}

uint64_t sub_1000BCA2C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  *v1 = *(_BYTE *)(v2 + *(int *)(a1 + 20));
  return type metadata accessor for Location(0);
}

uint64_t sub_1000BCA60()
{
  return type metadata accessor for AppConfiguration(0);
}

uint64_t sub_1000BCA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v2 + *(int *)(v0 + 20), v1 + *(int *)(v0 + 20), v3);
}

uint64_t sub_1000BCA84()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v0, v3);
}

uint64_t sub_1000BCA94(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000BCAA0()
{
  return ConditionDetailChartHeaderInput.condition.getter();
}

uint64_t sub_1000BCAAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t sub_1000BCAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

double sub_1000BCAC8()
{
  return 16.0;
}

uint64_t sub_1000BCAD0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 104) = 2;
  return KeyedEncodingContainer.encode(_:forKey:)(0x6974616D6F747561, 0xEA00000000006E6FLL, v1 - 104, v0);
}

uint64_t sub_1000BCB04()
{
  return type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
}

void sub_1000BCB14()
{
  sub_1007D4C44();
}

uint64_t sub_1000BCB24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BCB38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 72, v2);
}

uint64_t sub_1000BCB4C(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t sub_1000BCB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000BCB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000BCB94()
{
  uint64_t v0;

  return Gradient.Stop.init(color:location:)(v0);
}

uint64_t sub_1000BCBA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000BCBB8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = 1752392040;
  *(_QWORD *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 112, v1 - 104);
}

uint64_t sub_1000BCBD8@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 120), *(_QWORD *)(v1 - 160));
}

uint64_t sub_1000BCBE4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return swift_beginAccess(a1, va, 32, 0);
}

uint64_t sub_1000BCBF4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000BCC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(a1, *(_QWORD *)(v6 - 368), *(_QWORD *)(v6 - 352), v5, a5);
}

uint64_t sub_1000BCC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BCC28(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000BCC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

double sub_1000BCC48()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMinY(v5);
}

uint64_t sub_1000BCC5C()
{
  uint64_t v0;

  return sub_100600A44(v0 - 89, 1);
}

uint64_t sub_1000BCC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000BCC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BCC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000BCC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;

  return sub_1002C7E00(&a9, v9 - 104);
}

uint64_t sub_1000BCCA4(uint64_t a1)
{
  type metadata accessor for ScrubberView(0);
  return a1;
}

uint64_t sub_1000BCCD4()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

__n128 *sub_1000BCCE4(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  __n128 *result;

  a1[1] = a2;
  result = a1 + 3;
  *(_QWORD *)(v2 + 32) = 1702125924;
  *(_QWORD *)(v2 + 40) = 0xE400000000000000;
  return result;
}

uint64_t sub_1000BCD00()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10021D04C(v1, v0);
}

uint64_t sub_1000BCD0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of ResolverType.resolve<A>(_:)(a1, a1, v1, v2);
}

uint64_t sub_1000BCD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000BCD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

uint64_t sub_1000BCD38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v0, v1);
}

uint64_t sub_1000BCD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v3, a2, v2, v3);
}

uint64_t sub_1000BCD6C()
{
  return type metadata accessor for HomeAndWorkRefinementViewModel(0);
}

void sub_1000BCD88()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x292E2E2E202CLL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000BCD9C()
{
  return type metadata accessor for ActivityModifier(0);
}

uint64_t sub_1000BCDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

double sub_1000BCDCC()
{
  return 0.0;
}

void sub_1000BCDF8()
{
  sub_1000F5568();
}

id sub_1000BCE10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;

  return objc_msgSendSuper2(&a9, a2, v9);
}

id sub_1000BCE1C(id a1)
{
  return a1;
}

uint64_t type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEEC30, (uint64_t)&nominal type descriptor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
}

uint64_t type metadata accessor for LearnMoreAttributorViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF5B70;
  if (!qword_100BF5B70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LearnMoreAttributorViewModel);
  return result;
}

uint64_t type metadata accessor for LocationFooterViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDBED8;
  if (!qword_100BDBED8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationFooterViewModel);
  return result;
}

uint64_t type metadata accessor for WeatherData.CachingState(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C09698, (uint64_t)&nominal type descriptor for WeatherData.CachingState);
}

unint64_t sub_1000BCED0()
{
  return sub_10015C43C();
}

uint64_t sub_1000BCEF0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000BCF00()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

double sub_1000BCF08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000D31B4(a1, a2, *(_DWORD *)(a3 - 256));
}

uint64_t sub_1000BCF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_getEnumCaseMultiPayload(a1, *(_QWORD *)(a2 - 256));
}

void sub_1000BCF30(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

void sub_1000BCF38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1000BCF40()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BCF4C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BCF58()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BCF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return _ConditionalContent<>.init(storage:)(a1, a2, a3, v5, a5);
}

void sub_1000BCF74(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, char a9, char a10, char a11, char a12, char a13)
{
  sub_100520DF8(a1, a2, a3, a4, a5, a6, a7, 2, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1000BCF7C()
{
  return type metadata accessor for Text.Measurements(0);
}

uint64_t sub_1000BCF84()
{
  return type metadata accessor for LocationDetailEntity(0);
}

uint64_t sub_1000BCF94()
{
  return type metadata accessor for UnitManager(0);
}

uint64_t sub_1000BCF9C()
{
  return type metadata accessor for VFXTestViewState(0);
}

uint64_t sub_1000BCFA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10010AAC4(v2, a2);
}

uint64_t sub_1000BCFAC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v0, *(_QWORD *)(v1 - 160));
}

uint64_t sub_1000BCFBC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 208));
}

void sub_1000BCFC4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000BCFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwet_0(v1 + *(int *)(a1 + 20), 1, v2);
}

double sub_1000BD014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  double result;

  _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, a1);
  v4 = (_OWORD *)(v3 + *(int *)(v1 + 28));
  result = 0.0;
  *v4 = 0u;
  v4[1] = 0u;
  return result;
}

void sub_1000BD044(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1000BD04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, a2, a3, v3);
}

BOOL sub_1000BD064(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000BD07C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000C214(a1, a2, *(_BYTE **)(v2 + 928));
}

double sub_1000BD0AC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000BD0B8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v0, v1);
}

uint64_t sub_1000BD0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return WeatherMetadata.init(date:expirationDate:attribution:)(a1, a2, v2);
}

#error "1000BD154: call analysis failed (funcsize=63)"

uint64_t sub_1000BD1D8()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1000BD1E4()
{
  return 0;
}

double sub_1000BD200(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000BD208@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000BD214()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1000BD21C()
{
  return type metadata accessor for Calendar(0);
}

uint64_t sub_1000BD238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 648), 1, 1, *(_QWORD *)(v4 - 672));
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 656), 1, 1, *(_QWORD *)(v4 - 664));
}

void sub_1000BD28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 - 120) = v2;
  *(_QWORD *)(v0 - 112) = v1;
  type metadata accessor for CLLocationCoordinate2D(0);
}

uint64_t sub_1000BD298()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_1000BD2A4()
{
  return 0;
}

uint64_t sub_1000BD2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 83) = 2;
  *(_QWORD *)(v3 - 160) = v2;
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v1, v3 - 83, v0, v1);
}

void sub_1000BD2E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  LocationSearchEntity.init(id:name:placemark:isLocal:)(a1, a2, a3, a4, a5, 0, a6);
}

_QWORD *sub_1000BD2F0()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, *(_QWORD *)(v1 + 40));
}

void sub_1000BD2FC()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 568) = *(_QWORD *)(*(_QWORD *)(v0 - 176) + 104);
}

__n128 sub_1000BD314(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000BD32C()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_1000BD334()
{
  return type metadata accessor for NewsDataModel(0);
}

uint64_t sub_1000BD33C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 320));
}

uint64_t sub_1000BD348(uint64_t a1)
{
  uint64_t v1;

  return sub_100038D20(a1, v1);
}

uint64_t sub_1000BD350()
{
  return type metadata accessor for StartupTaskManager(0);
}

uint64_t sub_1000BD368()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v0, v1);
}

uint64_t sub_1000BD378()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1000BD388()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 3, v0);
}

id sub_1000BD398(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1);
}

id sub_1000BD3A0(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_1000BD3AC()
{
  void *v0;

}

uint64_t sub_1000BD3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return type metadata accessor for ModifiedContent(255, v3, a3);
}

uint64_t sub_1000BD3C8()
{
  uint64_t v0;

  return v0;
}

double sub_1000BD3D8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40)).n128_u64[0];
  return result;
}

double sub_1000BD3E8()
{
  return sub_100862700();
}

double sub_1000BD3F0(uint64_t a1, uint64_t a2, char a3)
{
  double result;

  sub_1000D55D4(a1, a2, a3);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_1000BD404()
{
  return State.wrappedValue.getter();
}

uint64_t sub_1000BD410()
{
  return 0;
}

void sub_1000BD41C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000BD438@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000BD444()
{
  uint64_t v0;

  return swift_release(v0);
}

double sub_1000BD450()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 32))).n128_u64[0];
  return result;
}

uint64_t sub_1000BD468(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000BD480(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000BD48C(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_1000BD498()
{
  return type metadata accessor for ReportWeatherContentView(0);
}

void sub_1000BD4A0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000BD4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_1000BD4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  return type metadata accessor for WeatherMapTrackingState(0);
}

uint64_t sub_1000BD4F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BD504()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v0, 1, v1);
}

unint64_t sub_1000BD514()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1004B1F88();
}

uint64_t sub_1000BD520()
{
  return type metadata accessor for DetailChartDataElement(0);
}

uint64_t sub_1000BD528()
{
  return 6778726;
}

uint64_t sub_1000BD538()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 + 208));
}

uint64_t sub_1000BD540()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000BD548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_1000BD558(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000BD568()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

double sub_1000BD578@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1)).n128_u64[0];
  return result;
}

uint64_t sub_1000BD580(uint64_t a1, uint64_t *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_100021A68((uint64_t)va, a2);
}

void sub_1000BD588()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(v0, v2, v1);
}

uint64_t sub_1000BD598()
{
  uint64_t v0;

  return swift_getObjCClassFromMetadata(v0);
}

void sub_1000BD5B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t sub_1000BD5F0()
{
  return 0;
}

uint64_t sub_1000BD604()
{
  uint64_t v0;

  return v0;
}

void sub_1000BD614(uint64_t a1)
{
  sub_10034AEE4(a1);
}

uint64_t sub_1000BD61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

void sub_1000BD624(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = a1;
}

uint64_t sub_1000BD630(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 5);
}

void sub_1000BD64C()
{
  sub_100112494();
}

uint64_t sub_1000BD65C()
{
  return type metadata accessor for ModalViewState(0);
}

void sub_1000BD664(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1000BD66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  return sub_1006D1690((uint64_t)&a27);
}

uint64_t sub_1000BD674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 66) = 1;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000BD684()
{
  return static Logger.automation.getter();
}

void sub_1000BD6A0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = *(_QWORD *)(v1 + a1);
}

void sub_1000BD6AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10003773C(a1, a2, v2);
}

uint64_t sub_1000BD6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v1, v3);
}

void sub_1000BD6C8()
{
  void *v0;

}

uint64_t sub_1000BD6D4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10006A788(v0, v1);
}

double sub_1000BD6E0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

__n128 *sub_1000BD6EC(__n128 *result, __n128 a2)
{
  unint64_t v2;
  unint64_t v3;

  result[1] = a2;
  result[2].n128_u64[0] = 0x656C746974;
  result[2].n128_u64[1] = 0xE500000000000000;
  result[3].n128_u64[0] = v3;
  result[3].n128_u64[1] = v2;
  return result;
}

uint64_t sub_1000BD70C()
{
  return Location.timeZone.getter();
}

void sub_1000BD718(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(a1, v3, a3);
}

void sub_1000BD720()
{
  uint64_t v0;

  sub_1007CFA28(v0);
}

uint64_t sub_1000BD730()
{
  uint64_t v0;

  return Promise.init(value:)(v0);
}

uint64_t sub_1000BD73C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

_QWORD *sub_1000BD754(_QWORD *a1)
{
  return sub_1000DB418(a1, a1[3]);
}

uint64_t sub_1000BD764@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000BD770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

double sub_1000BD78C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void sub_1000BD798()
{
  sub_1000ED624();
}

uint64_t sub_1000BD7A0()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000BD7B0()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000BD7C0(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t v3;
  va_list va;

  va_start(va, a2);
  return sub_1000CE1C8(v2, v3, (uint64_t *)va);
}

uint64_t sub_1000BD7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a2 - 256) = a1;
  return static NSDateFormatter.longMonthNameFormatter(with:)(v2);
}

uint64_t sub_1000BD7DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BD7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006BE60(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_1000BD800()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 280);
}

void sub_1000BD80C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = v0;
}

uint64_t sub_1000BD820()
{
  uint64_t v0;

  return v0;
}

double sub_1000BD82C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v4 = a1 + a2[9];
  v5 = type metadata accessor for Precipitation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v6 = a1 + a2[13];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[14];
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16])).n128_u64[0];
  return result;
}

uint64_t sub_1000BD908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000BD918(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)v1 = result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_1000BD924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, a5, a6, 22, 2);
}

uint64_t sub_1000BD938(uint64_t a1)
{
  return Dictionary.init(dictionaryLiteral:)(a1);
}

uint64_t sub_1000BD940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, *(_QWORD *)(v3 - 280));
  return type metadata accessor for PreviewLocation(0);
}

void sub_1000BD95C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

void sub_1000BD964(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000BD990@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000BD9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000BD9A8(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 17);
}

uint64_t sub_1000BD9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BD9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_1000BD9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1000BD9E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

uint64_t sub_1000BDA18()
{
  return 0;
}

uint64_t sub_1000BDA48(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000BDA58()
{
  uint64_t v0;

  return Date.midnight(timeZone:)(v0);
}

void sub_1000BDA64()
{
  void *v0;

}

BOOL sub_1000BDA70(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000BDA80(uint64_t result)
{
  *(_BYTE *)(result + 16) = 4;
  return result;
}

unint64_t sub_1000BDA90()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 11;
  return sub_1004FBAB0();
}

uint64_t sub_1000BDA9C(uint64_t a1)
{
  type metadata accessor for MeasuredLocationViewerView(0);
  return a1;
}

uint64_t sub_1000BDAD0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_1000BDADC()
{
  uint64_t v0;

  return v0 + 56;
}

uint64_t sub_1000BDB14(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000BDB2C(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 5);
}

uint64_t sub_1000BDB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return String.write(to:)(v3, a2, a3);
}

uint64_t sub_1000BDB4C()
{
  return 0;
}

uint64_t sub_1000BDB64()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 176) + 8))(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 168));
}

uint64_t sub_1000BDB74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 136));
}

void sub_1000BDB80(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_10007802C(v3, v4, a3);
}

uint64_t sub_1000BDB8C()
{
  return static NSNumberFormatter.percent.getter();
}

uint64_t sub_1000BDB94()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BDBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

uint64_t sub_1000BDBB0()
{
  uint64_t v0;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 160), 1, 1, *(_QWORD *)(v0 - 912));
}

uint64_t sub_1000BDBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return swift_getOpaqueTypeConformance2(&a9, v9, 1);
}

uint64_t sub_1000BDBD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BDBEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v1, v2);
}

uint64_t sub_1000BDC00()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(v0);
}

uint64_t sub_1000BDC2C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000BDC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ChartLineStyle.init(strokeStyle:lineThickness:lineColor:lineDash:opacity:opacityIncreasedContrast:areaStyle:)(a1, a2, a3, 0, 1, v3);
}

uint64_t sub_1000BDC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, *(_QWORD *)(v2 + 216));
}

uint64_t sub_1000BDC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = _s7Weather24LocationCompositionStateOwst_0(v1 + *(int *)(v2 + 32), 1, 1, v0);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 2;
  return result;
}

uint64_t sub_1000BDC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000BDC98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_1000BDCC4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_10007802C(v2, v1, v0);
}

uint64_t sub_1000BDCD4()
{
  return type metadata accessor for DetailComponentAction(0);
}

unint64_t sub_1000BDCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 56) = a2;
  return sub_1000B2E24();
}

uint64_t sub_1000BDCEC()
{
  return 1;
}

void sub_1000BDD00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100037768(v4, v3, a3);
}

uint64_t sub_1000BDD1C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

unint64_t sub_1000BDD24()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 5;
  return sub_1004FBC18();
}

uint64_t sub_1000BDD30()
{
  return 0;
}

void sub_1000BDD3C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000D2174(v0, v1);
}

uint64_t sub_1000BDD48()
{
  return type metadata accessor for ChartDateStep(0);
}

void sub_1000BDD50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10003773C(a1, a2, v2);
}

uint64_t sub_1000BDD58(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

char *sub_1000BDD74(char *a1, int64_t a2)
{
  return sub_10060628C(a1, a2, 1);
}

uint64_t sub_1000BDD7C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000BDD88(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 168), 1, 1, a1);
}

void sub_1000BDDA0(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1000BDDA8()
{
  uint64_t v0;

  return ObservableResolver.resolve<A>(_:)(v0, v0);
}

uint64_t sub_1000BDDB8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 176) + 8))(v0, *(_QWORD *)(v1 - 168));
}

uint64_t sub_1000BDDD4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 904))(a1, *(_QWORD *)(v1 + 776));
}

uint64_t sub_1000BDDF8()
{
  uint64_t v0;

  return v0;
}

double sub_1000BDE18()
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(0xED00006E6F697461).n128_u64[0];
  return result;
}

void sub_1000BDE2C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 208), a2);
}

uint64_t type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEEB90, (uint64_t)&nominal type descriptor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
}

uint64_t type metadata accessor for ConditionPickerMenuViewModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BD8A60, (uint64_t)&nominal type descriptor for ConditionPickerMenuViewModel);
}

uint64_t type metadata accessor for EnvironmentAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE91A8;
  if (!qword_100BE91A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EnvironmentAction);
  return result;
}

void sub_1000BDEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _QWORD *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
    case 7u:
      v3 = *(_QWORD *)(a1 + 8);
      goto LABEL_35;
    case 2u:
    case 3u:
    case 9u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v3 = *(_QWORD *)(a1 + 24);
      goto LABEL_35;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v4 = sub_1000BA294(&qword_100BCB630);
      v5 = a1 + *(int *)(v4 + 48);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      v6 = (int *)type metadata accessor for WeatherData(0);
      v7 = v5 + v6[5];
      v8 = type metadata accessor for Locale(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      v9 = v5 + v6[6];
      v10 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      v11 = v5 + v6[7];
      v12 = sub_1000BA294(&qword_100BC3348);
      if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
      {
        v13 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
      }
      v14 = v5 + v6[8];
      v15 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
      if (EnumCaseMultiPayload == 1)
      {
        v20 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v14, v20);
      }
      else if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
      }
      v21 = v5 + v6[9];
      v22 = type metadata accessor for WeatherDataOverrides(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v22))
      {
        v23 = type metadata accessor for Date(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v23))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
        v24 = v21 + *(int *)(v22 + 20);
        if (!_s7Weather24LocationCompositionStateOwet_0(v24, 1, v23))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v24, v23);
      }
      v62 = v4;
      v25 = a1 + *(int *)(v4 + 64);
      v26 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      v27 = (int *)type metadata accessor for PreprocessedWeatherData(0);
      swift_bridgeObjectRelease(*(_QWORD *)(v25 + v27[5]));
      v28 = (_QWORD *)(v25 + v27[6]);
      swift_bridgeObjectRelease(v28[1]);
      swift_bridgeObjectRelease(v28[3]);
      swift_bridgeObjectRelease(v28[5]);
      v29 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v30 = (uint64_t)v28 + *(int *)(v29 + 28);
      v31 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v30, 1, v31))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v30 + 8));
        v32 = v30 + *(int *)(v31 + 20);
        v33 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
        v34 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        swift_bridgeObjectRelease(*(_QWORD *)(v32 + *(int *)(v34 + 32) + 8));
      }
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v28 + *(int *)(v29 + 32) + 8));
      v35 = (_QWORD *)(v25 + v27[7]);
      swift_bridgeObjectRelease(*v35);
      v36 = (uint64_t)v35 + *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v37 = type metadata accessor for WeatherDescription(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v36, 1, v37))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v36, v37);
      v38 = (_QWORD *)(v25 + v27[8]);
      swift_bridgeObjectRelease(v38[1]);
      swift_bridgeObjectRelease(v38[3]);
      swift_bridgeObjectRelease(v38[5]);
      swift_bridgeObjectRelease(v38[7]);
      v39 = (char *)v38 + *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v40 = type metadata accessor for Date(0);
      v41 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
      v41(v39, v40);
      v42 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v43 = (uint64_t)&v39[*(int *)(v42 + 20)];
      v44 = type metadata accessor for Elevation(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v43, 1, v44))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
      v45 = (uint64_t)&v39[*(int *)(v42 + 24)];
      v46 = type metadata accessor for BackgroundMoonData(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v45, 1, v46))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
      v47 = (_QWORD *)(v25 + v27[9]);
      swift_bridgeObjectRelease(v47[1]);
      swift_bridgeObjectRelease(v47[3]);
      swift_bridgeObjectRelease(v47[5]);
      swift_bridgeObjectRelease(v47[7]);
      swift_bridgeObjectRelease(v47[9]);
      swift_bridgeObjectRelease(v47[11]);
      v48 = swift_bridgeObjectRelease(v47[13]);
      v49 = v25 + v27[10];
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v37 - 8) + 8))(v49, v37, v48);
      v50 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)(v49 + *(int *)(v50 + 20) + 8));
      v51 = (_QWORD *)(v25 + v27[11]);
      swift_bridgeObjectRelease(v51[1]);
      swift_bridgeObjectRelease(v51[3]);
      swift_bridgeObjectRelease(v51[5]);
      v52 = v25 + v27[12];
      v53 = type metadata accessor for PressureTrend(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
      v54 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + v54[5] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + v54[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + v54[7] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + v54[9] + 8));
      v55 = (_QWORD *)(v25 + v27[13]);
      swift_bridgeObjectRelease(v55[1]);
      swift_bridgeObjectRelease(v55[3]);
      swift_bridgeObjectRelease(v55[5]);
      swift_bridgeObjectRelease(v55[7]);
      swift_bridgeObjectRelease(v55[9]);
      swift_bridgeObjectRelease(v55[11]);
      swift_bridgeObjectRelease(v55[13]);
      swift_bridgeObjectRelease(v55[15]);
      swift_bridgeObjectRelease(v55[17]);
      swift_bridgeObjectRelease(v55[19]);
      swift_bridgeObjectRelease(v55[21]);
      swift_bridgeObjectRelease(v55[23]);
      swift_bridgeObjectRelease(v55[25]);
      v56 = swift_bridgeObjectRelease(v55[28]);
      v57 = v25 + v27[14];
      ((void (*)(uint64_t, uint64_t, __n128))v41)(v57, v40, v56);
      v58 = v57 + *(int *)(v42 + 20);
      if (!_s7Weather24LocationCompositionStateOwet_0(v58, 1, v44))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v58, v44);
      v59 = v57 + *(int *)(v42 + 24);
      if (!_s7Weather24LocationCompositionStateOwet_0(v59, 1, v46))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v59, v46);
      v60 = (_QWORD *)(v25 + v27[15]);
      swift_bridgeObjectRelease(v60[1]);
      swift_bridgeObjectRelease(v60[3]);
      swift_bridgeObjectRelease(v60[5]);
      swift_bridgeObjectRelease(v60[7]);
      swift_bridgeObjectRelease(v60[9]);
      swift_bridgeObjectRelease(v60[11]);
      swift_bridgeObjectRelease(v60[13]);
      v17 = *(int *)(v62 + 80);
      goto LABEL_33;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v17 = *(int *)(sub_1000BA294(&qword_100BCB620) + 48);
LABEL_33:
      v18 = (uint64_t *)(a1 + v17);
      v61 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v18, v61) == 1)
      {
        v3 = *v18;
LABEL_35:
        swift_bridgeObjectRelease(v3);
      }
      else
      {
        v19 = type metadata accessor for News(0);
LABEL_37:
        (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
      }
      return;
    case 6u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v18 = (uint64_t *)(a1 + *(int *)(sub_1000BA294(&qword_100BCB628) + 48));
      v19 = type metadata accessor for AvailableDataSets(0);
      goto LABEL_37;
    case 8u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v18 = (uint64_t *)(a1 + *(int *)(sub_1000BA294(&qword_100BCB618) + 48));
      v19 = type metadata accessor for WeatherStatisticsModel(0);
      goto LABEL_37;
    default:
      return;
  }
}

uint64_t type metadata accessor for LocationsAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF12F8;
  if (!qword_100BF12F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationsAction);
  return result;
}

uint64_t type metadata accessor for NotificationsOptInAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C09A20;
  if (!qword_100C09A20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsOptInAction);
  return result;
}

uint64_t sub_1000BE684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10077E804);
}

uint64_t type metadata accessor for PreviewLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF8770;
  if (!qword_100BF8770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PreviewLocation);
  return result;
}

uint64_t sub_1000BE6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10076FC60);
}

uint64_t sub_1000BE6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100520D90);
}

uint64_t sub_1000BE6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100768658);
}

uint64_t sub_1000BE6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E8E54);
}

uint64_t sub_1000BE6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
}

double sub_1000BE700()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *v0;
  *v0 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

void sub_1000BE70C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

uint64_t sub_1000BE718()
{
  return type metadata accessor for SunriseSunsetDetailDataProcessor.ProcessingKey(0);
}

uint64_t sub_1000BE724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v3 - 392) = v4;
  return v4(v1, v0);
}

_QWORD *sub_1000BE73C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000DB418(a1, v1);
}

void sub_1000BE754()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 - 72);
  *(_BYTE *)(v1 - 82) = 1;
}

uint64_t sub_1000BE768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);

  return v3(a1, a2, *(_QWORD *)(v2 + 1392));
}

uint64_t sub_1000BE774@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000BE77C()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 72));
}

uint64_t sub_1000BE788()
{
  return 30035;
}

uint64_t sub_1000BE79C()
{
  return type metadata accessor for UnitsConfigurationViewModel.Representation.Temperature(0);
}

uint64_t sub_1000BE7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_bridgeObjectRetain(a11);
}

uint64_t sub_1000BE7AC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_1000BE7B4(uint64_t a1@<X8>)
{
  uint64_t v1;

}

uint64_t sub_1000BE7C8()
{
  return type metadata accessor for LocationOfInterest(0);
}

uint64_t sub_1000BE7D8()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000BE7E8()
{
  return 1701869940;
}

uint64_t sub_1000BE7F4(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  return sub_100163980(a1, v1, v2);
}

uint64_t sub_1000BE800()
{
  return type metadata accessor for PreprocessedWeatherData(0);
}

uint64_t sub_1000BE808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1007A8EA4(a1, a2, a3, a4, v4);
}

void sub_1000BE810()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000BE830()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE84C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE858()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE878()
{
  return type metadata accessor for LocationModel(0);
}

uint64_t sub_1000BE880()
{
  return type metadata accessor for WeatherConditionBackgroundModel(0);
}

uint64_t sub_1000BE888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000BE894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 3, a4);
}

uint64_t sub_1000BE8A0(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v1 - 81, *(_QWORD *)(v1 - 120), a1);
}

uint64_t sub_1000BE8BC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000BE8C4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 152));
}

uint64_t sub_1000BE8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000BE900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000BE91C()
{
  uint64_t v0;

  return sub_1000986F0(v0);
}

void sub_1000BE924(uint64_t a1)
{
  sub_10007AB60(a1);
}

uint64_t sub_1000BE92C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 112));
}

void sub_1000BE938(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, v3, a3);
}

uint64_t sub_1000BE954()
{
  return Array<A>.write(to:)();
}

uint64_t sub_1000BE95C(char *a1)
{
  return sub_1001553D4(*a1);
}

uint64_t sub_1000BE968()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE978()
{
  return WeatherConditionBackgroundModel.gradient.getter();
}

void sub_1000BE984(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000BE990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 216) = (char *)&a9 - v9;
  return 0;
}

uint64_t sub_1000BE9A8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

void sub_1000BE9B0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

void sub_1000BE9B8(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v8;

  sub_100520DF8(a1, a2, 2, 2, 2, 2, v8, 2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000BE9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000BE9F0()
{
  return 0;
}

uint64_t sub_1000BEA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100102BB4(a1, *(_QWORD *)(a2 - 256));
}

void sub_1000BEA18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(*(_QWORD *)(v2 - 128), a2);
}

uint64_t sub_1000BEA20(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1000BEA30@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000BEA3C()
{
  return 0;
}

uint64_t sub_1000BEA54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_1000BEA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

uint64_t sub_1000BEA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_1000BEA84(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 224) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

unint64_t sub_1000BEAA0()
{
  return sub_100121014();
}

uint64_t sub_1000BEAA8()
{
  return 0;
}

uint64_t sub_1000BEABC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 112))();
}

void sub_1000BEAC8()
{
  void *v0;

}

uint64_t sub_1000BEAD4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = a1;
  return static os_log_type_t.default.getter();
}

unint64_t sub_1000BEADC()
{
  return 0xD000000000000011;
}

uint64_t sub_1000BEAF0()
{
  return DetailChartDataElement.accessibilityDateString.getter();
}

uint64_t sub_1000BEB18()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BEB38(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000BEB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, a3, v3, 0);
}

uint64_t sub_1000BEB64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000BEB7C()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_1000BEB84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void sub_1000BEB90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1000BEB98()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, *(_QWORD *)(v1 - 128));
}

double sub_1000BEBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  double result;

  v11 = *v10;
  *v10 = a10;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

uint64_t sub_1000BEBC8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 72));
}

void sub_1000BEBD0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100086DA4(a1, v3, a3);
}

void sub_1000BEBD8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  sub_10007802C(v2, a1 + v3, v1);
}

void sub_1000BEBE8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1008EC420(v2, *(char **)(v3 - 192), *(_QWORD *)(v3 - 168), v0, v1, *(_DWORD *)(v3 - 204) & 1);
}

void sub_1000BEC20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8, unint64_t a9)
{
  sub_10019CC48(a1, a2, a3, a4, a5, a6, a7, a8 | 0x7765695600000000, a9);
}

uint64_t sub_1000BEC40(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 280));
}

void sub_1000BEC60(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

uint64_t sub_1000BEC68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_1000BEC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1192) + 8))(v1, v2);
}

void sub_1000BEC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 176) = (char *)&a9 - v9;
}

uint64_t sub_1000BEC9C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000BECB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwet_0(v0 + *(int *)(v2 + 32), 1, v1);
}

uint64_t sub_1000BECD8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_1000BECE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  return swift_isUniquelyReferenced_nonNull_native(*a10);
}

void sub_1000BECF0()
{
  uint64_t v0;
  uint64_t v1;

}

uint64_t sub_1000BED08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C6CE4(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_1000BED20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.write(to:)(a1, a2, a3);
}

void sub_1000BED28(double *a1)
{
  sub_100155428(*a1);
}

void sub_1000BED34(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(a1, v3, a3);
}

uint64_t sub_1000BED50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BED60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, v2);
}

uint64_t sub_1000BED68()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v0, v3);
}

uint64_t sub_1000BED78()
{
  uint64_t v0;

  sub_10011E834((_OWORD *)(v0 - 128), (_OWORD *)(v0 - 96));
  return sub_1000CE46C(v0 - 96, v0 - 128);
}

uint64_t sub_1000BED98(uint64_t a1)
{
  uint64_t v1;

  return static Font.system(size:weight:design:)(a1, 0, v1);
}

uint64_t sub_1000BEDC0(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(v1 - 288), 0);
}

uint64_t sub_1000BEDD4()
{
  return type metadata accessor for PresentationMode(0);
}

void sub_1000BEDE4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  sub_100037768(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

uint64_t sub_1000BEE3C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 416))();
}

uint64_t sub_1000BEE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002D49B0(a1, a2, a3, a4);
}

uint64_t sub_1000BEE54(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000BEE60()
{
  return dispatch thunk of Column.value.getter();
}

void sub_1000BEE68()
{
  uint64_t v0;
  uint64_t v1;

}

uint64_t sub_1000BEE74()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 8));
}

uint64_t sub_1000BEE7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A68(*(_QWORD *)(v2 - 240), a2);
}

uint64_t sub_1000BEE84()
{
  return Measurement.formatted<A>(_:placeholder:unitManager:)();
}

uint64_t sub_1000BEE8C()
{
  return 30035;
}

uint64_t sub_1000BEEA0()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

BOOL sub_1000BEEA8()
{
  int v0;
  NSObject *v1;
  uint64_t v2;

  *(_DWORD *)(v2 - 160) = v0;
  return os_log_type_enabled(v1, (os_log_type_t)v0);
}

unint64_t sub_1000BEEB8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 15;
  return sub_1004FB9C0();
}

uint64_t sub_1000BEEC4()
{
  return type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
}

uint64_t sub_1000BEEDC()
{
  return type metadata accessor for ChartViewModelInterpolationMode(0);
}

uint64_t sub_1000BEEE4@<X0>(uint64_t a1@<X8>)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a1 + 16));
}

void sub_1000BEEF0()
{
  sub_1000EF360();
}

id sub_1000BEEFC(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000BEF04@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000BEF10()
{
  uint64_t v0;

  return v0;
}

void sub_1000BEF1C()
{
  void *v0;

}

uint64_t sub_1000BEF24(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 52);
}

uint64_t sub_1000BEF38()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BEF44()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, *(_QWORD *)(v1 - 272));
  return 0;
}

unint64_t sub_1000BEF78()
{
  return 0xD000000000000012;
}

__n128 sub_1000BEF8C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 - 128) = *(_OWORD *)a1;
  *(_OWORD *)(v1 - 112) = v4;
  *(_BYTE *)(v1 - 96) = v2;
  return result;
}

uint64_t sub_1000BEFA0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 136));
}

uint64_t sub_1000BEFD4()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 120, v0);
}

void sub_1000BEFE4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 296) = 0;
}

uint64_t sub_1000BEFF4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BF008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 784))(a1, a2, *(_QWORD *)(v2 + 792));
}

uint64_t sub_1000BF014()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000BF01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

id sub_1000BF028()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2080));
}

uint64_t sub_1000BF034()
{
  return type metadata accessor for URL(0);
}

_QWORD *sub_1000BF048()
{
  uint64_t v0;

  return Hasher.init(_seed:)((_QWORD *)(v0 - 160));
}

uint64_t sub_1000BF058(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v2, v3, *(_QWORD *)(v4 - 88), v1, a1);
}

uint64_t sub_1000BF070()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

void sub_1000BF090()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x746174536E69614DLL;
  v0._object = (void *)0xE900000000000065;
  String.append(_:)(v0);
}

uint64_t sub_1000BF0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, a5, 2, v5);
}

void sub_1000BF0B8(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_100080C0C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000BF0C4@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000BF0D8()
{
  uint64_t v0;

  return v0;
}

void sub_1000BF100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 160) = (char *)&a9 - v9;
}

uint64_t sub_1000BF114()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 28)), *(_BYTE *)(v1 + *(int *)(v0 + 28) + 8));
}

uint64_t sub_1000BF13C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000BF154@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char a4, __int128 a5, uint64_t a6)
{
  uint64_t v6;

  a5 = *(_OWORD *)(v6 + 40);
  a6 = a1;
  return type metadata accessor for PickerSection(0, (uint64_t)&a4);
}

void *sub_1000BF170(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE8uLL);
}

uint64_t sub_1000BF178()
{
  return static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)(0);
}

void sub_1000BF180()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(v2 + 24) + 24) = (v0 - 1);
}

uint64_t sub_1000BF194(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000BF1A0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000BF1AC()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t sub_1000BF1B8()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000BF1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_1000BF1F0()
{
  return type metadata accessor for ColorSchemeContrast(0);
}

uint64_t sub_1000BF1F8@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 200));
}

void sub_1000BF204()
{
  sub_100119A2C();
}

uint64_t sub_1000BF210@<X0>(_QWORD *a1@<X8>)
{
  return String.count.getter(*a1, a1[1]);
}

char *sub_1000BF218@<X0>(uint64_t a1@<X8>)
{
  return sub_10060628C(0, a1 + 1, 1);
}

void sub_1000BF22C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000787D4(a1, a2, v2);
}

uint64_t sub_1000BF234()
{
  return type metadata accessor for LocationGridView(0);
}

uint64_t sub_1000BF23C()
{
  uint64_t v0;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 - 104, v0 - 100);
}

void sub_1000BF24C(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1000BF254@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1000BF274()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BF284()
{
  return 0;
}

uint64_t sub_1000BF298()
{
  uint64_t v0;

  return swift_getKeyPath(v0);
}

void sub_1000BF2A0(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_1000BF2B4(uint64_t a1)
{
  return WeatherCondition.conditionIcon(isDaylight:isFilled:forLightBackground:)(a1, 1, 0);
}

uint64_t sub_1000BF2C4()
{
  return type metadata accessor for CurrentWeather(0);
}

uint64_t sub_1000BF2CC()
{
  return type metadata accessor for AutomationViewInfo(0);
}

uint64_t sub_1000BF2D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BF2EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BF328()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 272) + *(int *)(*(_QWORD *)(v0 - 264) + 80);
}

uint64_t sub_1000BF344()
{
  return 0;
}

uint64_t sub_1000BF358()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 280);
}

void sub_1000BF37C(uint64_t a1)
{
  sub_10006BDC8(a1);
}

uint64_t type metadata accessor for MeasuredLocationViewerView(uint64_t a1)
{
  return sub_100098190(a1, qword_100BED7C0, (uint64_t)&nominal type descriptor for MeasuredLocationViewerView);
}

uint64_t sub_1000BF398(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t type metadata accessor for ContentStatusBannerPresentationMetrics(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEDED8, (uint64_t)&nominal type descriptor for ContentStatusBannerPresentationMetrics);
}

void sub_1000BF3B4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = sub_1000BDD30();
  v2 = v1(v0);
  sub_10003BC44(v2);
  sub_10004A298();
}

double sub_1000BF3D8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  v4 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v5 = a1 + a2[6];
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  v6 = type metadata accessor for ConditionPickerMenuViewModel(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = type metadata accessor for WeatherCondition(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v6 + 24)));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
  v9 = (_QWORD *)(a1 + a2[14]);
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[3]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9[5]).n128_u64[0];
  return result;
}

_OWORD *sub_1000BF4BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (_QWORD *)((char *)a2 + v4);
  v7 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v7))
  {
    v8 = sub_1000BA294(&qword_100BC3620);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *(_BYTE *)v5 = *(_BYTE *)v6;
    v9 = v6 + 1;
    v10 = v6[2];
    if (v10 >= 2)
    {
      v5[1] = *v9;
      v5[2] = v10;
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      *(_OWORD *)(v5 + 1) = *(_OWORD *)v9;
    }
    v11 = *(int *)(v7 + 24);
    v12 = (char *)v5 + v11;
    v13 = (char *)v6 + v11;
    v14 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v12, 0, 1, v14);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1000BF608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10062B9A4);
}

uint64_t type metadata accessor for ContentStatusBanner(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF8490;
  if (!qword_100BF8490)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContentStatusBanner);
  return result;
}

void sub_1000BF64C()
{
  sub_10017B048();
}

uint64_t type metadata accessor for MeasuredLocationViewerView.LocationTabPageModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEDD20, (uint64_t)&nominal type descriptor for MeasuredLocationViewerView.LocationTabPageModel);
}

double sub_1000BF684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double result;
  uint64_t v8;

  v1 = sub_1000BA294(&qword_100BC3620);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContentStatusBannerPresentationMetrics(0);
  sub_100037768(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_100BC3620);
  v5 = type metadata accessor for ContentStatusBanner(0);
  v6 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v3, 1, v5);
  sub_100021A14((uint64_t)v3, &qword_100BC3620);
  if (v6 == 1)
  {
    if (qword_100BC1FB0 != -1)
      swift_once(&qword_100BC1FB0, sub_100154274);
  }
  else if (qword_100BC1FA8 != -1)
  {
    swift_once(&qword_100BC1FA8, sub_10032E470);
  }
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

void sub_1000BF79C(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[24];

  v11 = sub_1000BA294(a4);
  *(_QWORD *)(a6 + 80) = a5;
  *(_QWORD *)(a6 + 88) = 0;
  *(_BYTE *)(a6 + 96) = 0;
  *(_QWORD *)a6 = v11;
  if (qword_100BC1F00 != -1)
    swift_once(&qword_100BC1F00, sub_10014C654);
  swift_beginAccess(&xmmword_100CAE588, v17, 0, 0);
  sub_100037768((uint64_t)&xmmword_100CAE588, (uint64_t)&v15, &qword_100BCED50);
  if (v16)
  {
    sub_10003C800(&v15, a6 + 24);
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = a3;
    swift_retain();
    v12 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
    *(_QWORD *)&v15 = _swiftEmptyArrayStorage;
    *((_QWORD *)&v15 + 1) = v12;
    if (a1)
    {
      sub_100094EE4();
      a1(&v15);
      swift_release(a3);
      sub_10011E14C();
      sub_10011E14C();
      v14 = *((_QWORD *)&v15 + 1);
      v13 = (_QWORD *)v15;
    }
    else
    {
      v14 = v12;
      swift_release(a3);
      v13 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(a6 + 64) = v13;
    *(_QWORD *)(a6 + 72) = v14;
    sub_1000C013C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000BF8D0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_1000BF8E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[4];

  sub_1000986AC();
  v3 = v2;
  v23 = v4;
  v24 = v5;
  v6 = sub_1000BE878();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v27 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  sub_10009C838();
  v10 = *(void (**)(void))(v7 + 16);
  sub_10009DB74();
  v10();
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 16) & ~v11;
  v25 = v11 | 7;
  v26 = v12 + v8;
  v13 = (v12 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_100B7E780, v13 + 16, v11 | 7);
  v15 = *(void (**)(void))(v7 + 32);
  sub_10011E0A0(v14 + v12);
  v16 = (_QWORD *)(v14 + v13);
  *v16 = v24;
  v16[1] = v3;
  swift_bridgeObjectRetain(v3);
  sub_1000BFAB4();
  v17 = *(_QWORD *)(*v0 + 16);
  sub_1000BFAA8(v17);
  v18 = *v0;
  *(_QWORD *)(v18 + 16) = v17 + 1;
  v19 = v18 + 16 * v17;
  *(_QWORD *)(v19 + 32) = sub_100148A7C;
  *(_QWORD *)(v19 + 40) = v14;
  *v0 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v1, v23, v6);
  *((_QWORD *)&v29 + 1) = v6;
  v20 = sub_10005F164(&v28);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v20, v1, v6);
  sub_10011E0A0(v27);
  v21 = swift_allocObject(&unk_100B7E7A8, v26, v25);
  sub_10009DB74();
  v15();
  *(_QWORD *)&v30 = sub_10014B2B4;
  *((_QWORD *)&v30 + 1) = v21;
  v31[0] = v28;
  v31[1] = v29;
  v31[2] = v30;
  sub_1000BFAC0((uint64_t)v31, v6);
  sub_100098640();
}

void sub_1000BFA9C()
{
  sub_1005FEEC4();
}

uint64_t sub_1000BFAA8(uint64_t a1)
{
  return sub_1001ADDDC(a1, (uint64_t (*)(BOOL))sub_1000BFA9C);
}

void sub_1000BFAB4()
{
  sub_10048BDF0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000BFA9C);
}

void sub_1000BFAC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_OWORD *)(a1 + 16);
    v22 = *(_OWORD *)a1;
    v23 = v4;
    v24 = *(_OWORD *)(a1 + 32);
    sub_1000BFBCC(&v22, a2);
  }
  else
  {
    sub_100021A14(a1, &qword_100BC36A0);
    v5 = sub_1000BFD34(a2);
    if ((v6 & 1) != 0)
    {
      v7 = v5;
      sub_10011DC54();
      sub_1000C1270();
      v8 = sub_1000BA294(&qword_100BC36A8);
      sub_1000CFB3C(v8, v9, v10, v11, v12, v13, v14, v15, v19, v20);
      v16 = (__int128 *)(*(_QWORD *)(v21 + 56) + 48 * v7);
      v18 = v16[1];
      v17 = v16[2];
      v22 = *v16;
      v23 = v18;
      v24 = v17;
      _NativeDictionary._delete(at:)(v7, v21, &type metadata for UInt, &type metadata for AnyEquatable, &protocol witness table for UInt);
      *v2 = v21;
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
    }
    sub_100021A14((uint64_t)&v22, &qword_100BC36A0);
  }
}

double sub_1000BFBCC(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_1000BFC38(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

unint64_t sub_1000BFC38(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1000BFD34(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000BA294(&qword_100BC36A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_1000BFD34(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
    return sub_10016EF90(a1, v18[7] + 48 * v14);
  else
    return sub_1000BFE08(v14, a2, a1, v18);
}

unint64_t sub_1000BFD34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000BFD6C(a1, v3);
}

unint64_t sub_1000BFD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000BFE08(unint64_t result, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 48 * result);
  v5 = a3[1];
  *v4 = *a3;
  v4[1] = v5;
  v4[2] = a3[2];
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_1000BFE60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BEE440;
  if (!qword_100BEE440)
  {
    v1 = sub_100075EB0(&qword_100BEE438);
    sub_100156FA8();
    sub_10007AB60((uint64_t)&unk_100BEE460);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100BEE440);
  }
  return result;
}

void sub_1000BFEE4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t (*v5)(_QWORD);
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_1000986AC();
  v2 = v1;
  v34 = v3;
  v5 = v4;
  v7 = v6;
  v8 = v0;
  v10 = v9;
  v11 = sub_1000D9280();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100099864();
  v13 = sub_1000BA294(v7);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100098728();
  v17 = v16 - v15;
  sub_100037768(v8, v16 - v15, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v13);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v26 = v5(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v10, v17, v26);
  }
  else
  {
    v27 = static os_log_type_t.fault.getter(EnumCaseMultiPayload, v19, v20, v21, v22, v23, v24, v25);
    v28 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v28, v27))
    {
      v29 = (uint8_t *)sub_100098710(12);
      v30 = sub_100098710(32);
      v35 = v30;
      *(_DWORD *)v29 = 136315138;
      v31 = sub_1000CE1C8(v34, v2, &v35);
      v32 = sub_100099A3C(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33);
      sub_10009D7A0((void *)&_mh_execute_header, v28, v27, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v29);
      sub_1000988D8(v30);
      sub_1000986F0(v30);
      sub_1000986F0((uint64_t)v29);
    }

    sub_1000C10E0();
    sub_1000D2024();
    sub_1000B439C();
    sub_1000E78F0(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  sub_100098640();
}

uint64_t sub_1000C0098(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_1000C00A0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  sub_10007802C(v3, a2, v2);
}

uint64_t sub_1000C00AC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C00C0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000C00E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C00F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C0108()
{
  uint64_t v0;

  return v0;
}

void sub_1000C0114(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100021A14(*(_QWORD *)(a1 - 256), v1);
}

id sub_1000C0130(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2, 1);
}

uint64_t sub_1000C0150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return type metadata accessor for UnitsConfigurationViewModel.Configuration(0, v4, v5, a4);
}

uint64_t sub_1000C0160(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000C016C@<X0>(unint64_t a1@<X8>)
{
  int v1;

  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  v1 = a1 - 1;
  if (v1 < 0)
    v1 = -1;
  return (v1 + 1);
}

void sub_1000C018C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

void sub_1000C0194(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

void sub_1000C019C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000C01CC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000C01DC()
{
  return 0;
}

uint64_t sub_1000C01E8()
{
  return static Logger.automation.getter();
}

__n128 sub_1000C01FC(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 240);
  a1[1] = result;
  return result;
}

void sub_1000C0208(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

uint64_t sub_1000C0210()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000C0224@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

void sub_1000C022C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(a1, v3, a3);
}

uint64_t sub_1000C0234(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(a1 + 28)));
}

uint64_t sub_1000C024C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000C0268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for LocationViewModel(0);
  v7 = a1 + v6[5];
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v4))
    v5(v7, v4);
  v8 = a1 + v6[6];
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
  sub_100176DD4(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_BYTE *)(v8 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[7]));
  swift_release(*(_QWORD *)(a1 + v6[8]) & 0xFFFFFFFFFFFFFFBLL);
  v9 = a1 + v6[9];
  v10 = (int *)type metadata accessor for LocationFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v9, 1, (uint64_t)v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 16));
    v11 = v9 + v10[8];
    v12 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v13 = v9 + v10[9];
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8));
    v14 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v15 = v13 + v14[6];
    if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v15, v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[7] + 8));
    swift_release(*(_QWORD *)(v13 + v14[8]));
    v16 = v9 + v10[11];
    v17 = type metadata accessor for LocationOfInterest(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    v18 = v9 + v10[14];
    v19 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19))
    {
      v20 = v18 + *(int *)(v19 + 20);
      v21 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v18 + *(int *)(v19 + 24), v17);
    }
  }

  v22 = a1 + v6[19];
  v23 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = a1 + v6[20];
  v25 = type metadata accessor for ForegroundEffect(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[22]));
  v26 = a1 + v6[24];
  v27 = type metadata accessor for LocationEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000C0588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for ContentStatusBanner(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 16);
    if (v5 >= 2)
      swift_bridgeObjectRelease(v5);
    v6 = v2 + *(int *)(v3 + 24);
    v7 = type metadata accessor for Date(0);
    result = _s7Weather24LocationCompositionStateOwet_0(v6, 1, v7);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  return result;
}

uint64_t type metadata accessor for ContentStatusBannerPresentationViewModifier(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BEE648, (uint64_t)&nominal type descriptor for ContentStatusBannerPresentationViewModifier);
}

uint64_t type metadata accessor for LocationViewBannerContainer(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BEE1E0, (uint64_t)&nominal type descriptor for LocationViewBannerContainer);
}

void sub_1000C0644(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v34 = a1;
  v35 = a2;
  v33 = *(_QWORD *)(sub_1000BA294(&qword_100BCB9F8) - 8);
  sub_10009D98C();
  __chkstk_darwin(v5);
  v32 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10009876C();
  v28 = type metadata accessor for HourWeather(v7);
  v36 = *(_QWORD *)(v28 - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  v30 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v31 = (char *)&v27 - v11;
  sub_10009D2A4();
  v13 = __chkstk_darwin(v12);
  sub_1000BEC88(v13, v14, v15, v16, v17, v18, v19, v20, v27);
  sub_1000BA294(&qword_100BCE7F8);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100099234();
  v37 = _swiftEmptyArrayStorage;
  sub_1000D1D38(&qword_100BCE800);
  sub_10009BEF0(v22);
  sub_1000D1D38((unint64_t *)&qword_100BCBA00);
  sub_1000BD368();
  sub_10011ABA8();
  if (v23)
  {
LABEL_15:
    sub_100021A14(v4, &qword_100BCE7F8);
  }
  else
  {
    sub_100079FF8();
    while (1)
    {
      v24 = sub_100110204();
      sub_1000DAC28(v24, v25);
      sub_10011E7AC();
      sub_1000C6A0C();
      sub_1000EAF60();
      sub_1000C440C();
      sub_1000C099C();
      v26 = sub_1000EF994();
      if (v3)
        break;
      if ((v26 & 1) != 0)
      {
        sub_1000DC150();
        if ((sub_1000BE77C() & 1) == 0)
        {
          sub_1000BEA3C();
          sub_1000CEA14();
          v2 = v37;
        }
        if (v2[2] >= v2[3] >> 1)
        {
          sub_1000CEA14();
          v2 = v37;
        }
        sub_1000D8EA0();
        v37 = v2;
      }
      else
      {
        sub_100098B18();
      }
      v4 = v29;
      sub_1000BD368();
      sub_10011ABA8();
      if (v23)
        goto LABEL_15;
    }
    sub_100098B18();
    sub_100021A14(v29, &qword_100BCE7F8);
    swift_release(v37);
  }
  sub_1000B44B0();
}

uint64_t sub_1000C0888()
{
  uint64_t v0;

  return String.init<A>(describing:)(v0 - 144);
}

uint64_t sub_1000C0894()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_1000C089C()
{
  char v0;
  uint64_t v1;

  return sub_1000B15F8(v1, v0);
}

uint64_t sub_1000C08AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Date.== infix(_:_:)(v2 + a1, v1 + a1);
}

uint64_t sub_1000C08B8()
{
  return WeatherDescription.init(stringLiteral:)(0, 0xE000000000000000);
}

uint64_t sub_1000C08D0@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000C08E4()
{
  return type metadata accessor for AppConfigurationState(0);
}

uint64_t sub_1000C08EC@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000C0900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 112) = v4;
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v5);
}

void sub_1000C091C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1000C0924()
{
  return type metadata accessor for TemperatureAveragesDetailInput(0);
}

uint64_t sub_1000C093C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 1432));
}

uint64_t sub_1000C0944()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C0970(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 392) = a1;
  return v1 + 392;
}

unint64_t sub_1000C0984()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 0;
  return sub_100269F9C();
}

uint64_t sub_1000C098C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BF398(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000C099C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 32))(*(_QWORD *)(v3 - 176), v2, v1);
}

uint64_t sub_1000C09B4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000C09C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000C09D0()
{
  return type metadata accessor for DecodingError(0);
}

uint64_t sub_1000C09D8()
{
  uint64_t v0;

  return UIListContentConfiguration.textProperties.modify(v0 - 136);
}

uint64_t sub_1000C09E4()
{
  uint64_t v0;

  return v0;
}

void sub_1000C09F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100321224(a1, a2, v2);
}

double sub_1000C0A00()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  sub_1000CE2FC((_QWORD *)(v1 + *(int *)(v0 + 28)));
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1000C0A24()
{
  return type metadata accessor for DetailChartCondition(0);
}

unint64_t sub_1000C0A40()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 4;
  return sub_1003B87C8();
}

uint64_t sub_1000C0A4C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000AECD4(v1, v0);
}

uint64_t sub_1000C0A58()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(v0);
}

uint64_t sub_1000C0A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000C0A78(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C0A80(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C0A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1004D3A8C(v2, a2);
}

double sub_1000C0A9C()
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(0xE400000000000000).n128_u64[0];
  return result;
}

void sub_1000C0AB0()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000C0AC0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000C0AD0()
{
  return type metadata accessor for ChartKind(0);
}

uint64_t sub_1000C0AD8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001009A4(a1, v1);
}

void sub_1000C0AE0()
{
  void *v0;

}

uint64_t sub_1000C0AE8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

unint64_t sub_1000C0B08()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 4;
  return sub_10062DF2C();
}

uint64_t sub_1000C0B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v4 - 304, v2, v3, v1, a1);
}

uint64_t sub_1000C0B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 168) + a1;
}

uint64_t sub_1000C0B3C@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v1 - 256), *(_QWORD *)(v2 - 296));
}

uint64_t sub_1000C0B4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 32) + a1;
}

uint64_t sub_1000C0B60()
{
  return 0;
}

uint64_t sub_1000C0B74@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000C0B80()
{
  return AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
}

uint64_t sub_1000C0B8C()
{
  return _s14ChartViewModelVMa(0);
}

uint64_t sub_1000C0B94(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

unint64_t sub_1000C0B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 128) = a2;
  *(_QWORD *)(v2 - 152) = 0;
  *(_QWORD *)(v2 - 144) = 0xE000000000000000;
  return sub_100114EF8();
}

uint64_t sub_1000C0BB0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void sub_1000C0BBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, v2, v1);
}

uint64_t sub_1000C0BC8()
{
  return type metadata accessor for NewsDataModel(0);
}

uint64_t sub_1000C0BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 36, 2, a7, 17);
}

uint64_t sub_1000C0BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 240));
}

uint64_t sub_1000C0C04()
{
  return Date.init()();
}

uint64_t sub_1000C0C0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

void sub_1000C0C18(uint64_t a1@<X8>)
{
  sub_10000E75C(*(_QWORD *)(a1 - 256));
}

uint64_t sub_1000C0C34()
{
  return 0;
}

void sub_1000C0C40()
{
  sub_100605B90();
}

uint64_t sub_1000C0C58()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

double sub_1000C0C80()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C0C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_1000C0C98()
{
  return 0;
}

uint64_t sub_1000C0CBC(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

void sub_1000C0CC8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  sub_10005329C(a1, 255, a3, a4);
}

void sub_1000C0CEC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

id sub_1000C0D08()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2032));
}

uint64_t sub_1000C0D14()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000C0D20()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1328));
}

__n128 sub_1000C0D34(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000C0D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Collection.formIndex(after:)(v0, v2, v1);
}

uint64_t sub_1000C0D60()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

uint64_t sub_1000C0D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BF398(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000C0D7C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C0D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_1000C0D98(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000C0DA4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 248);
}

void sub_1000C0DB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100321224(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000C0DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return State.init(wrappedValue:)(&a9, a2);
}

uint64_t sub_1000C0DE4(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

double sub_1000C0DF8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

unint64_t sub_1000C0E00()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 5;
  return sub_1003B878C();
}

double sub_1000C0E0C()
{
  double v0;

  return v0;
}

uint64_t sub_1000C0E20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000C0E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, *(_QWORD *)(v1 - 192));
  return static Set<>.full.getter(v2);
}

uint64_t sub_1000C0E60(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t sub_1000C0E6C()
{
  return type metadata accessor for Font.Leading(0);
}

uint64_t sub_1000C0E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return View.accessibilityElement(children:)(v1, v2, a1);
}

void sub_1000C0E88(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, *(_QWORD *)(v3 - 288), a3);
}

uint64_t sub_1000C0E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C0EBC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000C0EC4()
{
  return type metadata accessor for MoonViewModel(0);
}

uint64_t sub_1000C0EE8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C0EF4()
{
  return sub_100098710(12);
}

uint64_t sub_1000C0EFC()
{
  return 0x646570706174;
}

void sub_1000C0F18(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100095B78(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

AXDataPoint sub_1000C0F38(uint64_t a1, uint64_t a2, char a3, Swift::OpaquePointer a4, unint64_t a5, double a6)
{
  return AXDataPoint.init(x:y:additionalValues:label:)(*(Swift::String *)&a1, *(Swift::Double_optional *)(&a3 - 8), a4, (Swift::String_optional)a5);
}

void sub_1000C0F48()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000C0F58(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C0F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return static String.localizedStringWithFormat(_:_:)(a1, *(_QWORD *)(a2 - 256), v2);
}

void sub_1000C0F7C()
{
  void *v0;

}

uint64_t sub_1000C0F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C0FAC()
{
  return 255;
}

_QWORD *sub_1000C0FB8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000DB418(v1, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000C0FC4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C0FDC()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000B15F8(*(_QWORD *)(v1 + v0[13]), *(_BYTE *)(v1 + v0[13] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[14]), *(_BYTE *)(v1 + v0[14] + 8));
  v2 = v1 + v0[15];
  return sub_1000CEE98(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72));
}

uint64_t sub_1000C1038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v1, v2, a1);
}

double sub_1000C1058()
{
  return 0.0;
}

void sub_1000C1070()
{
  sub_10009ADAC();
}

uint64_t sub_1000C1088@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CEE98(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

void sub_1000C10AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2 - 160, a2);
}

uint64_t sub_1000C10B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[7] = a2;
  a1[8] = v2;
  a1[4] = v3;
  return static String.localizedStringWithFormat(_:_:)(v5, v6, v4);
}

uint64_t sub_1000C10CC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C10E0()
{
  return EnvironmentValues.init()();
}

void sub_1000C10E8(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 - 256) = a1;
}

uint64_t sub_1000C10FC(uint64_t a1)
{
  return Dictionary.init(dictionaryLiteral:)(a1);
}

uint64_t sub_1000C1104()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C1118(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 264))(a1, *(_QWORD *)(v1 - 208));
}

void sub_1000C1128()
{
  Hasher._combine(_:)(0);
}

unint64_t sub_1000C1130()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return sub_1007FF494();
}

uint64_t sub_1000C113C()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000C1158()
{
  return type metadata accessor for ColorScheme(0);
}

uint64_t sub_1000C1160(uint64_t a1)
{
  uint64_t v1;

  return EnvironmentObject.init()(v1, a1);
}

uint64_t sub_1000C116C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Forecast.init(_:metadata:)(a1, a2, *(_QWORD *)(v2 - 856), *(_QWORD *)(v2 - 864), *(_QWORD *)(v2 - 872), *(_QWORD *)(v2 - 880));
}

uint64_t sub_1000C1190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata accessor for ModifiedContent(255, a2, a3);
}

uint64_t sub_1000C1198()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, v0);
}

uint64_t sub_1000C11A8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x696C617551726961, 0xEA00000000007974, 0);
}

uint64_t sub_1000C11C8(uint64_t a1)
{
  type metadata accessor for WeatherConditionBackgroundModifier(0);
  return a1;
}

uint64_t sub_1000C1208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100946924(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000C1220()
{
  uint64_t v0;

  return v0;
}

void sub_1000C123C(unint64_t *a1)
{
  uint64_t *v1;

  sub_10003D2DC(a1, v1);
}

BOOL sub_1000C1244(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000C1264(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100078058(a1, v2, v1);
}

void sub_1000C1270()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000C128C(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1
                                 + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))));
}

double sub_1000C12B0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C12E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 240) = a1;
  return swift_release(v1);
}

uint64_t sub_1000C12F0()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000C1300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return ToolbarItem<>.init(placement:content:)(v4, a2, a3, v3);
}

uint64_t sub_1000C130C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C132C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000C1340()
{
  return type metadata accessor for LocationDetailEntity(0);
}

uint64_t sub_1000C1354()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000C1368@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return a1();
}

uint64_t sub_1000C1370()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(v0);
}

uint64_t sub_1000C1380()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C138C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_1000C1398()
{
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000C13A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A68(v2, a2);
}

uint64_t sub_1000C13A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000C13B0()
{
  uint64_t v0;

  return v0;
}

id sub_1000C13C8()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 1936));
}

uint64_t sub_1000C13D4()
{
  return type metadata accessor for ActiveLocationInput(0);
}

uint64_t sub_1000C13DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 176) = v1;
  return dispatch thunk of Sequence.makeIterator()(v2, a1);
}

uint64_t sub_1000C1400(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable.hash(into:)(a1, v1, v2);
}

_QWORD *sub_1000C140C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_1000DB418(&a10, a13);
}

uint64_t sub_1000C1438()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000C1448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, a1);
  return v1;
}

uint64_t sub_1000C1478()
{
  return type metadata accessor for Calendar(0);
}

uint64_t sub_1000C1494()
{
  return type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
}

uint64_t sub_1000C149C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000C14A8(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_1000C14B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *v3 = v1;
  v3[1] = v2;
  *v4 = 0;
  v4[1] = 0;
  return v0;
}

uint64_t sub_1000C14D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_storeEnumTagMultiPayload(v2, a2, 1);
}

uint64_t sub_1000C14DC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000C14E8(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000C14FC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000C150C()
{
  return 0x697472417377656ELL;
}

uint64_t sub_1000C152C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C153C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(_QWORD *)(v2 - 256), v3);
}

uint64_t sub_1000C1554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

void sub_1000C157C(unint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v3;

  sub_1003E2C10(a1, a2, a3, *(_QWORD *)(v3 - 232), *(_QWORD *)(v3 - 216), *(void (**)(unint64_t, int64_t, unint64_t))(v3 - 224), *(void (**)(_QWORD))(v3 - 152), *(uint64_t (**)(_QWORD *, uint64_t (*)(char *, uint64_t, uint64_t)))(v3 - 160));
}

uint64_t sub_1000C1590()
{
  return type metadata accessor for DetailHeroChartActiveLollipopModel(0);
}

double sub_1000C1598()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C15A4()
{
  int *v0;
  uint64_t v1;

  sub_1000B15F8(*(_QWORD *)(v1 + v0[22]), *(_BYTE *)(v1 + v0[22] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[23]), *(_BYTE *)(v1 + v0[23] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[24]), *(_BYTE *)(v1 + v0[24] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[25]), *(_BYTE *)(v1 + v0[25] + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[26]), *(_BYTE *)(v1 + v0[26] + 8));
  return sub_1000B15F8(*(_QWORD *)(v1 + v0[27]), *(_BYTE *)(v1 + v0[27] + 8));
}

uint64_t sub_1000C1630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

void sub_1000C1640()
{
  void *v0;

}

uint64_t sub_1000C1650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return Section<>.init(header:content:)(v6 - 112, a2, v6 - 144, a4, v4, v5);
}

uint64_t sub_1000C1668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  *(_QWORD *)(v1 - 240) = v0;
  v2 = *(uint64_t (**)(void))(v0 + 16);
  *(_QWORD *)(v1 - 272) = v2;
  return v2();
}

Swift::Int sub_1000C1680(Swift::OpaquePointer a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  return _findStringSwitchCase(cases:string:)(a1, *(Swift::String *)&a2);
}

uint64_t sub_1000C16A0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);

  return sub_1000A5EBC(a1, a2, v2);
}

uint64_t sub_1000C16AC()
{
  uint64_t v0;

  return sub_100159C94(v0 - 112);
}

void sub_1000C16B4()
{
  void *v0;

}

uint64_t sub_1000C16C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8);
  *(_QWORD *)(v2 - 160) = v3;
  return v3(v1, v0);
}

uint64_t sub_1000C16DC()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_1000C16E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a1 + *(_QWORD *)(v2 + 72) * v1);
}

uint64_t sub_1000C1704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000C1710()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10005EAA0(v0, v1);
}

uint64_t sub_1000C171C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v1, v0);
}

uint64_t sub_1000C1730()
{
  return WeatherMapSessionStatistics.responseCounters.getter();
}

uint64_t sub_1000C173C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000C1750()
{
  return TimeZone.init(identifier:)(5524807, 0xE300000000000000);
}

uint64_t sub_1000C1764()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C1778()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 240))();
}

uint64_t sub_1000C1780(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

uint64_t sub_1000C1788()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v0);
}

uint64_t sub_1000C17AC(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000C17BC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1005BA1E0(v0, v1);
}

id sub_1000C17C8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

void sub_1000C17D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(v2 - 96, a2);
}

uint64_t sub_1000C17DC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000C17EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a16 + 8))(a20, a17);
}

uint64_t sub_1000C17FC()
{
  return type metadata accessor for ConfiguredUnitsAction(0);
}

uint64_t sub_1000C1804()
{
  return Location.Identifier.id.getter();
}

uint64_t sub_1000C180C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10006A788(v1, v0);
}

uint64_t sub_1000C1818(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000C1834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000C1844()
{
  uint64_t v0;

  return v0;
}

void sub_1000C1854()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000C1860()
{
  return type metadata accessor for PresentationMode(0);
}

uint64_t sub_1000C187C(uint64_t a1, uint64_t a2)
{
  return sub_10007695C(a1, a2);
}

double sub_1000C1890()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208)).n128_u64[0];
  return result;
}

void sub_1000C1898()
{
  void *v0;

}

uint64_t sub_1000C18A0()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_1000C18B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  uint64_t v12;

  return Tips.Parameter.wrappedValue.getter(&a12, v12);
}

uint64_t sub_1000C18C0(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;

  return sub_1000A0794(0, a2, v2);
}

unint64_t sub_1000C18CC()
{
  uint64_t v0;

  return sub_1000991C8(v0);
}

uint64_t sub_1000C18DC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000C18EC(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 8);
}

uint64_t sub_1000C18FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C1910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000C1928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000C1934()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000C1940()
{
  uint64_t v0;

  return v0;
}

void sub_1000C1960(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100086DA4(a1, v3, a3);
}

uint64_t sub_1000C1968(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

void sub_1000C1980(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_10019CC48(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a7, a8, a9);
}

uint64_t sub_1000C1988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

BOOL sub_1000C1990(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C19A0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 336));
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 584), 1, 1, *(_QWORD *)(v1 - 280));
}

uint64_t sub_1000C19E4()
{
  return 0;
}

uint64_t sub_1000C1A00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C1A0C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000C1A18()
{
  return type metadata accessor for WeatherData(0);
}

uint64_t sub_1000C1A24()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 96));
}

double sub_1000C1A2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(int *)(v1 + 36) + 8)).n128_u64[0];
  return result;
}

void sub_1000C1A3C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(a1, v2, v1);
}

uint64_t sub_1000C1A48(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 7);
}

uint64_t sub_1000C1A5C()
{
  return type metadata accessor for ListLocationRowPrimaryText(0);
}

double sub_1000C1A64(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  double result;

  sub_1000D55D4(a1, a2, a3);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v3).n128_u64[0];
  return result;
}

void sub_1000C1A78(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C77C(a1, v3, a3);
}

unint64_t sub_1000C1A80()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 9;
  return sub_1003B869C();
}

uint64_t sub_1000C1A8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1000C1A98(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, v3, a3);
}

uint64_t sub_1000C1AA0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C1AA8()
{
  uint64_t v0;

  return UITableViewCell.contentConfiguration.setter(v0 - 104);
}

double sub_1000C1AB4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_1000C1ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 184));
}

uint64_t sub_1000C1AD8()
{
  return static SettingReader.shared.getter();
}

uint64_t sub_1000C1AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 256));
}

uint64_t sub_1000C1AEC()
{
  return type metadata accessor for DetailComponentContainerViewModel(0);
}

uint64_t sub_1000C1AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_1000C1B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_1000A3908(v0, v1, v2);
}

unint64_t sub_1000C1B14()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 4;
  return sub_1004FBC54();
}

uint64_t sub_1000C1B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

uint64_t sub_1000C1B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C1B4C()
{
  return WeatherDescription.init(stringLiteral:)(0, 0xE000000000000000);
}

uint64_t sub_1000C1B58()
{
  return SavedLocation.location.getter();
}

unint64_t sub_1000C1B74()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_10062E0D0();
}

uint64_t sub_1000C1B80()
{
  return type metadata accessor for UnitConfiguration.Pressure(0);
}

__n128 sub_1000C1B88@<Q0>(__int16 a1@<W8>)
{
  int v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  result = *(__n128 *)(v2 - 256);
  v4 = *(_OWORD *)(v2 - 240);
  *(__n128 *)(v2 - 304) = result;
  *(_OWORD *)(v2 - 288) = v4;
  *(_BYTE *)(v2 - 270) = BYTE2(v1);
  *(_WORD *)(v2 - 272) = a1;
  return result;
}

void sub_1000C1BB8()
{
  sub_100112494();
}

uint64_t sub_1000C1BC8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1000C1BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C1BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000C1BEC()
{
  return Measurement.formatted<A>(_:placeholder:unitManager:)();
}

uint64_t sub_1000C1BF4()
{
  uint64_t v0;

  return v0 - 152;
}

void sub_1000C1C04()
{
  sub_10017BA10();
}

uint64_t sub_1000C1C0C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 216));
}

uint64_t sub_1000C1C1C()
{
  _QWORD *v0;

  return objc_opt_self(*v0);
}

double sub_1000C1C24()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  result = *(double *)(v1 - 144);
  v3 = *(_QWORD *)(v1 - 136);
  *(double *)v0 = result;
  *(_QWORD *)(v0 + 8) = v3;
  return result;
}

uint64_t sub_1000C1C38()
{
  return 0x74617265706D6574;
}

uint64_t sub_1000C1C58()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 56)));
}

uint64_t sub_1000C1C64()
{
  return type metadata accessor for LocalizedStringResource(0);
}

uint64_t sub_1000C1C6C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = 1752392040;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

uint64_t sub_1000C1C84()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1000C1CA8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 256);
}

double sub_1000C1CC8()
{
  return 0.0;
}

uint64_t sub_1000C1CE8@<X0>(uint64_t (*a1)(_QWORD, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v2 - 112), v1);
}

void sub_1000C1CF4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(a1, v1);
}

void sub_1000C1CFC()
{
  Hasher._combine(_:)(0);
}

void sub_1000C1D08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10009E8CC(a1, a2, v2);
}

void sub_1000C1D10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10003773C(a1, a2, v2);
}

uint64_t sub_1000C1D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 280));
}

uint64_t sub_1000C1D24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_1000C1D30()
{
  uint64_t v0;

  sub_10006BDC8(v0);
}

uint64_t sub_1000C1D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, ((*(unsigned __int8 *)(a2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a2 + 80))+ 2 * *(_QWORD *)(a2 + 72), *(unsigned __int8 *)(a2 + 80) | 7);
}

uint64_t sub_1000C1D58(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000C1D6C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000C1D78()
{
  return type metadata accessor for DynamicTypeSize(0);
}

uint64_t sub_1000C1D88(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 192));
}

uint64_t sub_1000C1D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 152) = v0;
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 136) = v2;
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 88) = v4;
  return KeyedDecodingContainer.allKeys.getter(v4);
}

uint64_t sub_1000C1DB4()
{
  return UIListContentConfiguration.TextProperties.adjustsFontSizeToFitWidth.setter(1);
}

uint64_t sub_1000C1DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 232))(a1, *(_QWORD *)(v2 - 168), v1);
}

uint64_t sub_1000C1DE4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000C1DF8()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_1000C1E08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_1000C1E14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

uint64_t sub_1000C1E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return static Tips.OptionsBuilder.buildFinalResult<A>(_:)(v2, v1, a1);
}

uint64_t sub_1000C1E48()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000C1E50()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 176), v1);
}

uint64_t sub_1000C1E5C()
{
  return 1684957559;
}

uint64_t sub_1000C1E6C()
{
  return static MainActor.shared.getter();
}

uint64_t sub_1000C1E78()
{
  return 0;
}

uint64_t sub_1000C1E94()
{
  return 24904;
}

uint64_t sub_1000C1EA8()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t sub_1000C1EB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 16) & ~v2);
}

uint64_t sub_1000C1ECC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 240);
  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, *(_QWORD *)(v0 - 232));
  return v1;
}

void sub_1000C1EF4(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100095B78(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000C1F14()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 80) = 0;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 96) = 0u;
  return v0 - 112;
}

uint64_t sub_1000C1F28()
{
  return 0;
}

uint64_t sub_1000C1F34()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C1F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_1000C1F68()
{
  return 255;
}

uint64_t sub_1000C1F74()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C1F80()
{
  uint64_t v0;

  return v0;
}

void sub_1000C1FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

}

uint64_t sub_1000C1FC8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = result;
  return result;
}

double sub_1000C1FD4()
{
  uint64_t v0;
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 56));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 96));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000C1FF4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 168) + 8))(*(_QWORD *)(v1 - 176), v0);
}

void sub_1000C2008()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100021A14(v1, v0);
}

uint64_t sub_1000C2014()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000C2034()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C203C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 144))(a1, a2, 1);
}

uint64_t sub_1000C2048()
{
  return 0x43776F4E5F415045;
}

uint64_t sub_1000C2070()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C207C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B1100(a1, v2, a2);
}

uint64_t sub_1000C209C()
{
  return type metadata accessor for CollisionViewMetrics(0);
}

uint64_t sub_1000C20AC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

BOOL sub_1000C20CC(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

void sub_1000C20F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_10003773C(a1, v3, a3);
}

uint64_t sub_1000C20FC(uint64_t a1, float a2)
{
  float *v2;
  uint64_t v3;

  *v2 = a2;
  *(_QWORD *)(v3 - 232) = 1752392040;
  *(_QWORD *)(v3 - 224) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 232, v3 - 224);
}

uint64_t sub_1000C213C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C2148()
{
  return type metadata accessor for WeatherData(0);
}

uint64_t sub_1000C2150()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000C216C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C2184(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

uint64_t sub_1000C2190()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_1000C21A4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  sub_10007802C(v3, v2 + *(int *)(a1 + 24), v1);
}

unint64_t sub_1000C21B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 7;
  return sub_1003B8714();
}

uint64_t sub_1000C21C4()
{
  uint64_t v0;

  return sub_1000AA25C(v0);
}

double sub_1000C21CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 28) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000C21DC()
{
  return type metadata accessor for LocationComponentHeaderViewModel(0);
}

uint64_t sub_1000C21E4()
{
  return type metadata accessor for NewsArticleComponentViewModel(0);
}

uint64_t sub_1000C21EC()
{
  return Binding.wrappedValue.getter();
}

uint64_t sub_1000C21F8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of LocationManagerType.requestAlwaysAuthorization()(v0, v1);
}

uint64_t sub_1000C2208()
{
  return 0;
}

uint64_t sub_1000C2224()
{
  return dispatch thunk of SettingGroup.isEnabled.getter();
}

void sub_1000C222C()
{
  void *v0;

}

uint64_t sub_1000C2234()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 200));
}

unint64_t sub_1000C223C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 2;
  return sub_1004FBCCC();
}

uint64_t sub_1000C2248()
{
  uint64_t v0;

  return v0;
}

void sub_1000C225C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(a1, v2, v1);
}

uint64_t sub_1000C2268()
{
  return 0;
}

void sub_1000C227C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100078058(a1, a2, v2);
}

uint64_t sub_1000C2284()
{
  return type metadata accessor for ChartViewModel.Background(0);
}

uint64_t sub_1000C2294()
{
  return swift_willThrow();
}

uint64_t sub_1000C229C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v2, v1, a1);
}

uint64_t sub_1000C22B4()
{
  return type metadata accessor for SunriseSunsetMonthlyViewModel(0);
}

unint64_t sub_1000C22BC()
{
  return sub_100113B0C();
}

void sub_1000C22C4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

uint64_t sub_1000C22D0()
{
  return type metadata accessor for NewsDataModel(0);
}

double sub_1000C22D8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1000C22E0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1000C22E8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000C22F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v4, v3, v2, v1, v0);
}

void sub_1000C230C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2, a2);
}

uint64_t sub_1000C2324()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000C2334(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = result;
  return result;
}

uint64_t sub_1000C2350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 544));
}

uint64_t sub_1000C235C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

uint64_t sub_1000C2368()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 208);
}

uint64_t sub_1000C237C()
{
  return type metadata accessor for NewsComponentPosition(0);
}

uint64_t sub_1000C2384()
{
  return type metadata accessor for CollisionViewMetrics(0);
}

uint64_t sub_1000C238C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static Date.== infix(_:_:)(*(_QWORD *)(v1 - 128) + a1, *(_QWORD *)(v1 - 136) + a1);
}

uint64_t sub_1000C23A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)(v2 - 128) = 0u;
  *(_OWORD *)(v2 - 112) = 0u;
  *(_BYTE *)(v2 - 96) = 0;
  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v2 - 160), 1, 1, a1);
}

BOOL sub_1000C23F4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

unint64_t sub_1000C2420()
{
  return sub_10009FFE0();
}

void sub_1000C2428(uint64_t a1)
{
  uint64_t *v1;

  sub_100021AA4(a1, v1);
}

uint64_t sub_1000C2430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000C2440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000C2448(uint64_t a1)
{
  return EnvironmentValues.subscript.getter(a1, a1);
}

void sub_1000C2450()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_100084050(v1, *(_QWORD *)(v2 - 184), v0);
}

double sub_1000C2464()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C2470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

void sub_1000C247C(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1000215BC(v2 + a1, v1);
}

uint64_t sub_1000C2488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1000C24BC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 152), *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000C24C8(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 96) = 1752392040;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v2 - 88);
}

uint64_t sub_1000C24F4(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000C2508()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10021D04C(v1, v0);
}

uint64_t sub_1000C2514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, v2);
}

uint64_t sub_1000C251C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000C2538(uint64_t a1)
{
  uint64_t v1;

  return Regex.Match.subscript.getter(a1, v1);
}

void sub_1000C2540(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log)
{
  os_log_type_t v10;
  uint8_t *v11;

  _os_log_impl(a1, log, v10, a4, v11, 2u);
}

uint64_t sub_1000C2554(uint64_t a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);

  return sub_100238774(a1, v1);
}

uint64_t sub_1000C255C()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

uint64_t sub_1000C2564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(*(_QWORD *)(v2 - 128), v1, a1);
}

uint64_t sub_1000C2580(uint64_t a1)
{
  uint64_t v1;

  return swift_allocObject(a1, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
}

void sub_1000C259C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = v0;
}

uint64_t sub_1000C25BC()
{
  uint64_t v0;

  return sub_100037674(v0 - 120);
}

uint64_t sub_1000C25C8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000C25E8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 152), *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000C2618()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000C2638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, a8);
}

uint64_t sub_1000C2648(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000C266C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for LocationsState(0);
}

void sub_1000C268C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

uint64_t sub_1000C2698()
{
  return type metadata accessor for WeatherMapOverlayKind(0);
}

uint64_t sub_1000C26A8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

void sub_1000C26B0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

id sub_1000C26C0()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 1936));
}

uint64_t sub_1000C26CC()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000C26D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000C26E0()
{
  uint64_t v0;
  char v1;

  return sub_10008D47C(v0, v1);
}

uint64_t sub_1000C26EC()
{
  return type metadata accessor for MainAction(0);
}

uint64_t sub_1000C26F4()
{
  return type metadata accessor for NextHourPrecipitationComponentViewModel(0);
}

uint64_t sub_1000C2704()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C2718(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

id sub_1000C273C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2);
}

uint64_t sub_1000C2750()
{
  return type metadata accessor for ConditionPickerMenuViewModel(0);
}

uint64_t sub_1000C2760()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

uint64_t sub_1000C2768@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t v5;

  return a5(*(_QWORD *)(v5 + a1), *(unsigned __int8 *)(v5 + a1 + 8));
}

void sub_1000C2788()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = v0 + v1[10];
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  v3 = (_QWORD *)(v0 + v1[12]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v0 + v1[13]);
  *v4 = 0;
  v4[1] = 0;
}

uint64_t sub_1000C27C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DB418(a1, a2);
  return *(_QWORD *)(v2 - 232);
}

uint64_t sub_1000C27E0(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(v1, a1);
}

uint64_t sub_1000C27F8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 120), 1, 1, a1);
}

uint64_t sub_1000C2810@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  a2.n128_u64[0] = *(_QWORD *)a1;
  a3.n128_u64[0] = *(_QWORD *)(a1 + 8);
  a4.n128_u64[0] = *(_QWORD *)(a1 + 16);
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(a2, a3, a4, *(double *)(a1 + 24));
}

void sub_1000C281C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = 0x6552656372756F73;
  *(_QWORD *)(v0 + 88) = 0xEA00000000007463;
}

uint64_t sub_1000C283C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

double sub_1000C2848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_10035D5AC(v0, v2, v1, v3);
}

__n128 sub_1000C285C@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 result;

  v2 = v1->n128_u8[8];
  v3 = v1[1].n128_u64[0];
  v4 = v1[1].n128_u8[8];
  v5 = v1[2].n128_u64[0];
  v6 = v1[2].n128_u8[8];
  result = v1[3];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u8[8] = v2;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u8[8] = v4;
  a1[2].n128_u64[0] = v5;
  a1[2].n128_u8[8] = v6;
  a1[3] = result;
  return result;
}

void sub_1000C28AC(uint64_t a1)
{
  uint64_t *v1;

  sub_100021AA4(a1, v1);
}

uint64_t sub_1000C28B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000C28C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000C28D0(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for GeometryReader(255, v1, a1);
}

uint64_t sub_1000C28E0()
{
  return type metadata accessor for PrecipitationAmount(0);
}

uint64_t sub_1000C28E8()
{
  return type metadata accessor for DailyForecastComponentViewModel(0);
}

uint64_t sub_1000C28F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Tips.Rule.init<A>(_:_:)(v2, a2, 0);
}

void sub_1000C291C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(v2, a1, v1);
}

uint64_t sub_1000C292C()
{
  uint64_t (*v0)(void);

  return v0();
}

NSString sub_1000C2938()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000C294C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000A8D4(v0, v1);
}

uint64_t sub_1000C2960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, 0, 0, a4, 0, a1);
}

uint64_t sub_1000C2974()
{
  return ProxyContainer.public.getter();
}

uint64_t sub_1000C2998()
{
  return type metadata accessor for CalendarDayViewModel(0);
}

uint64_t sub_1000C29A8(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000C29B0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for ViewState(0);
}

void sub_1000C29D4()
{
  void *v0;

}

uint64_t sub_1000C2A0C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000C2A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C2A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v2, v1, v3);
}

uint64_t sub_1000C2A48(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

void sub_1000C2A58()
{
  sub_1004A77FC(1701869940, 0xE400000000000000);
}

void sub_1000C2A68()
{
  sub_1000F5568();
}

NSDictionary sub_1000C2A74()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000C2A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v2 + *(int *)(a1 + 48), v3);
}

uint64_t sub_1000C2A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C2AAC()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000C2AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000C2AD4()
{
  sub_1005FED88();
}

_QWORD *sub_1000C2AEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000DB418((_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 24));
}

uint64_t sub_1000C2AFC()
{
  return 0x746E617361656C70;
}

uint64_t sub_1000C2B10()
{
  return 0x7265746544746F6ELL;
}

double sub_1000C2B24()
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(0xEA00000000007473).n128_u64[0];
  return result;
}

uint64_t sub_1000C2B30()
{
  return type metadata accessor for ArticleModel(0);
}

uint64_t sub_1000C2B5C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

void sub_1000C2B80(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  sub_100095B78(v1 + a1, v3, v2);
}

uint64_t sub_1000C2B90()
{
  return type metadata accessor for UnitsConfigurationViewModel.Temperature(0);
}

uint64_t sub_1000C2BAC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1000C2BB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

void sub_1000C2BC4(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100080C0C(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000C2BE4@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 65) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 65, v2);
}

uint64_t sub_1000C2BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000C2C0C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

uint64_t sub_1000C2C18()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 104, v0);
}

void sub_1000C2C2C(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100095B78(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000C2C4C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10011A3DC(v0, v1);
}

uint64_t sub_1000C2C58@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 144), *(_QWORD *)(v1 - 152));
}

void sub_1000C2C60(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 296), 1, 1, a1);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 304), 1, 1, *(_QWORD *)(v1 - 328));
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 312), 1, 1, *(_QWORD *)(v1 - 280));
  sub_100112494();
}

uint64_t sub_1000C2CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000C2D04()
{
  return 255;
}

uint64_t sub_1000C2D10()
{
  return type metadata accessor for ScrubberDayView(0);
}

uint64_t sub_1000C2D28()
{
  uint64_t v0;
  uint64_t v1;

  return v1 + *(int *)(v0 + 36);
}

uint64_t sub_1000C2D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
}

uint64_t sub_1000C2D48(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_1000C2D54()
{
  return TimeZone.init(abbreviation:)(5524807, 0xE300000000000000);
}

uint64_t sub_1000C2D7C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 208) + 8))(v0, *(_QWORD *)(v1 - 200));
}

void *sub_1000C2D8C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

double sub_1000C2D9C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

int8x8_t sub_1000C2DA8(int8x16_t a1, int8x16_t a2)
{
  int8x16_t v2;

  v2 = vorrq_s8(a1, a2);
  return vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
}

void *sub_1000C2DB8()
{
  uint64_t v0;
  uint64_t v1;

  return memcpy((void *)(v1 - 176), (const void *)(v0 + *(int *)(*(_QWORD *)(v1 - 320) + 60)), 0x49uLL);
}

uint64_t sub_1000C2DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

uint64_t sub_1000C2DE8(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 104), 1, 1, a1);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000C2E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000C2E1C()
{
  return 0x7361206E776F6853;
}

void sub_1000C2E50(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 224), 1, 1, a1);
  sub_100112494();
}

uint64_t sub_1000C2EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

double sub_1000C2EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_100238738(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1000C2EC4(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 296), 1, 1, a1);
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000C2F08()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

uint64_t sub_1000C2F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000C2F30()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_1000C2F58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100040308(a1, a2, a3, 0xE300000000000000);
}

uint64_t sub_1000C2F60()
{
  uint64_t v0;
  uint64_t v1;

  return AnyTransition.animation(_:)(v1, v0);
}

uint64_t sub_1000C2F6C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

double sub_1000C2F7C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = v1 + v0[16];
  sub_1000D31C4(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
  sub_1000B15F8(*(_QWORD *)(v1 + v0[17]), *(_BYTE *)(v1 + v0[17] + 8));
  v3 = v1 + v0[18];
  sub_1000D31D0(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48));
  sub_1000BF398(*(_QWORD *)(v1 + v0[19]), *(_QWORD *)(v1 + v0[19] + 8));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000C2FEC()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000C3000()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 112, v0);
}

uint64_t sub_1000C3014()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C3034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v4 - 72, v1, v3, a1);
}

uint64_t sub_1000C3054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, a4);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 144), 1, 1, *(_QWORD *)(v4 - 224));
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 152), 1, 1, *(_QWORD *)(v4 - 216));
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 160), 1, 1, *(_QWORD *)(v4 - 200));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000C30B4()
{
  return type metadata accessor for AveragesDetailInput(0);
}

uint64_t sub_1000C30BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 128))(a1, a2, v2);
}

uint64_t sub_1000C30C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return type metadata accessor for ModifiedContent(255, v3, a3);
}

uint64_t sub_1000C30D4()
{
  return type metadata accessor for WindComponentViewModel(0);
}

uint64_t sub_1000C30E4()
{
  return type metadata accessor for DetailChartConditionInfo(0);
}

uint64_t sub_1000C30EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
}

uint64_t sub_1000C3110()
{
  return 255;
}

void sub_1000C3124(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  sub_100037768(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

uint64_t sub_1000C3148()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 216), *(_QWORD *)(v0 - 256));
}

unint64_t sub_1000C3190@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 192) = a1;
  *(_BYTE *)(v1 - 65) = 0;
  return sub_1007B3D20();
}

uint64_t sub_1000C319C()
{
  return type metadata accessor for DebugLocationManager.DebugLocation(0);
}

uint64_t sub_1000C31A4()
{
  return type metadata accessor for ConditionDetailChartFooterViewModel(0);
}

uint64_t sub_1000C31AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1007C3590(v0, v1);
}

uint64_t sub_1000C31B8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(*(_QWORD *)(v0 + 264), v1);
}

uint64_t sub_1000C31C8(uint64_t a1)
{
  return type metadata accessor for Optional(0, a1);
}

uint64_t sub_1000C31D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(v4 - 176, v4 - 120, a3, a4, 6);
}

uint64_t sub_1000C31E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v3 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, a1);
}

uint64_t sub_1000C3204()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 72, v0);
}

__n128 *sub_1000C3218(__n128 *result, __n128 a2)
{
  result[1] = a2;
  strcpy((char *)&result[2], "overThreshold");
  result[2].n128_u16[7] = -4864;
  return result;
}

uint64_t sub_1000C3244()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 488, v1);
}

uint64_t sub_1000C3254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return static MonthlyWeatherStatistics.== infix(_:_:)(v1, v2, v3, v4, v5, a1);
}

uint64_t sub_1000C3270()
{
  return type metadata accessor for LocationViewComponent(0);
}

uint64_t sub_1000C3278(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_1000C3284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

BOOL sub_1000C3290(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C32A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000C32B8()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000C32C4()
{
  return URLHandlerMatch.values.getter();
}

uint64_t sub_1000C32CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  return sub_1000DEBAC(0, 3, v20, v21, v22, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1000C330C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 81, v1, v0);
}

uint64_t sub_1000C332C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C3334(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

void sub_1000C333C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 328);
  *(_QWORD *)(v2 - 136) = v0;
  *(_QWORD *)(v2 - 128) = v3;
  v4 = *(_QWORD *)(v2 - 336);
  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = v4;
}

uint64_t sub_1000C3358()
{
  return type metadata accessor for TypeDisplayRepresentation(0);
}

uint64_t sub_1000C3360()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_1000C336C()
{
  return dispatch thunk of Column.value.getter();
}

uint64_t sub_1000C3378()
{
  return type metadata accessor for SettingReader(0);
}

uint64_t sub_1000C3394()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 - 296) + 32))(*(_QWORD *)(v0 - 272), *(_QWORD *)(v0 - 288), *(_QWORD *)(v0 - 280));
}

uint64_t sub_1000C33C0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1000C33CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000C33E4()
{
  return type metadata accessor for MonthlyAveragesChartModel(0);
}

uint64_t sub_1000C33EC()
{
  return type metadata accessor for TemperatureChartKind(0);
}

uint64_t sub_1000C33F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 144), v1);
}

void sub_1000C3420()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v1;
}

void sub_1000C3444(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;

  *(_QWORD *)(v4 - 80) = a1;
  *(_QWORD *)(v4 - 72) = (v1 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = v2;
  v5._object = v3;
  String.append(_:)(v5);
}

double sub_1000C345C@<D0>(double a1@<X8>, double a2@<D0>)
{
  return a2 + a1 + 40.0;
}

uint64_t sub_1000C348C()
{
  return DateComponents.second.setter(0, 0);
}

void sub_1000C3498()
{
  sub_1000F5568();
}

id sub_1000C34B0()
{
  objc_class *v0;

  return objc_allocWithZone(v0);
}

uint64_t sub_1000C34B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C34CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000C34E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1000AECD4(a1, a2);
  return Logger.logObject.getter(v2);
}

double sub_1000C34F8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

_QWORD *sub_1000C3510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *(*a8)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  return a8((uint64_t *)va, v9, a2, v10);
}

double sub_1000C3528()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C3530(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_1000C3538(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1001A7210(a1, a2, v2);
}

uint64_t sub_1000C3540()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C3550(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000C3570(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return sub_10006BD20(v2, a2);
}

uint64_t sub_1000C3584(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.subscript.setter(a1, a2, a2);
}

uint64_t sub_1000C358C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(a1, a2, v4, a4, 6);
}

uint64_t sub_1000C3598(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000C35BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C35D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0, 0, 0, 1, v2, v2);
}

uint64_t sub_1000C35EC()
{
  return type metadata accessor for DailyForecastRowViewButtonStyle(0);
}

void sub_1000C35F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_1000C3600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, v2);
}

void sub_1000C3608(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

void sub_1000C362C()
{
  void *v0;

}

uint64_t sub_1000C3638()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 152) + 8))(*(_QWORD *)(v0 - 160), *(_QWORD *)(v0 - 144));
}

uint64_t sub_1000C3648(uint64_t a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);

  return sub_100238774(a1, v1);
}

uint64_t sub_1000C3650()
{
  return type metadata accessor for LocationViewObserverView(0);
}

uint64_t sub_1000C3658()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  sub_1000DB418(v1, v2);
  return dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v2, v3);
}

uint64_t sub_1000C3680@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return sub_1002566C4(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_1000C36A0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((uint64_t *)va);
}

uint64_t sub_1000C36B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, a2, *(_QWORD *)(v3 - 144), v2);
}

uint64_t sub_1000C36CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  *(_BYTE *)(result + 48) = v2;
  *(_QWORD *)(result + 72) = a2;
  *(_QWORD *)(result + 80) = 0x4F79616C70736964;
  *(_QWORD *)(result + 88) = 0xE90000000000006ELL;
  return result;
}

uint64_t sub_1000C36F4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v1, v0);
}

uint64_t sub_1000C3718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000C3728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000C3748()
{
  return == infix(_:_:)(0x6564497472656C61, 0xEF7265696669746ELL);
}

void sub_1000C376C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000979AC(v1, v0);
}

uint64_t sub_1000C3788()
{
  return type metadata accessor for ViewData(0);
}

uint64_t sub_1000C3790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return sub_1002D4DDC(v5, v2, v3, 0, v1, v4, *(_QWORD *)(a1 - 256));
}

uint64_t sub_1000C37B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

double sub_1000C37C8()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_QWORD *)(v0 - 96) = 0;
  return result;
}

double sub_1000C3800()
{
  double v0;

  return v0;
}

uint64_t sub_1000C381C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_getTupleTypeMetadata3(255, v1, v2, a1, 0, 0);
}

uint64_t sub_1000C3838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000C3850@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  NSBundle v2;
  Swift::String v3;
  Swift::String v4;

  v3._object = (void *)((a2 - 32) | 0x8000000000000000);
  v3._countAndFlagsBits = 0xD000000000000018;
  v4._countAndFlagsBits = 1953066581;
  v4._object = (void *)0xE400000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, v2, v4, *(Swift::String *)&a1)._countAndFlagsBits;
}

uint64_t sub_1000C387C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DB418(a1, a2);
  return *(_QWORD *)(v2 - 232);
}

uint64_t sub_1000C38B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TipView.init(_:arrowEdge:action:)(a1, 4, a3, 0, a5, a1);
}

uint64_t sub_1000C38C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000C38D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v2);
}

uint64_t sub_1000C38EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_10035D57C(v3, v0, v2, v1);
}

uint64_t sub_1000C3900()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000C390C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

void sub_1000C3918(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10007EBC8(a1, a2, v2);
}

double sub_1000C3920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return sub_100238738(a1, a2, a3, v3, v4, v5);
}

void sub_1000C3948(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C77C(a1, *(_QWORD *)(v3 - 272), a3);
}

void sub_1000C3958(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1001A7210(a1, a2, v2);
}

uint64_t sub_1000C3960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C396C(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for ModifiedContent(255, v1, a1);
}

uint64_t sub_1000C397C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 112), a1);
}

uint64_t sub_1000C3990(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 320) = 1752392040;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 320, v2 - 312);
}

uint64_t sub_1000C39C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Text.init(_:tableName:bundle:comment:)(a1, a2, a3 & 1, a4, 0, 0, 0, 0);
}

uint64_t sub_1000C39E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return URLHandlerPattern.init(scheme:host:path:fragment:params:conditions:)(a1, a2, 0xD000000000000011, v5, v3, v4, v2, v6);
}

void sub_1000C3A04(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000979AC(a1, v1);
}

uint64_t sub_1000C3A0C()
{
  return dispatch thunk of Column.value.getter();
}

uint64_t sub_1000C3A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, a2, a3, v3);
}

uint64_t sub_1000C3A30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C3A44()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000A8D4(v0, v1);
}

_QWORD *sub_1000C3A54()
{
  uint64_t v0;

  return sub_1000DB418((_QWORD *)(v0 - 120), *(_QWORD *)(v0 - 96));
}

void sub_1000C3A74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)v0 = v6;
  *(_DWORD *)(v0 + 8) = v2;
  *(_DWORD *)(v0 + 12) = v3;
  *(_QWORD *)(v0 + 16) = v4;
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 32) = v5;
}

uint64_t sub_1000C3A8C(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1000C3A98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C3AB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000C3AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v3 - 160, v1, a1, *(_QWORD *)(v3 - 296), v2);
}

uint64_t sub_1000C3B00()
{
  uint64_t v0;
  uint64_t v1;

  return static Location.== infix(_:_:)(v0, v1);
}

uint64_t sub_1000C3B0C(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 136), 1, 1, a1);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000C3B44()
{
  return swift_task_switch();
}

uint64_t sub_1000C3B6C()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

NSString sub_1000C3B74()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000C3B80(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 1684957547;
  a1[2].n128_u64[1] = 0xE400000000000000;
  return NotificationSubscription.Kind.description.getter();
}

uint64_t sub_1000C3B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C3BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000C3BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;

  return a15(v15, v16);
}

uint64_t sub_1000C3BC0()
{
  uint64_t v0;

  return Cache.init(_:)(v0);
}

id sub_1000C3BD0()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2736));
}

uint64_t sub_1000C3BDC()
{
  return 0x796C6C696863;
}

double sub_1000C3BF0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease((a1 - 32) | 0x8000000000000000).n128_u64[0];
  return result;
}

uint64_t sub_1000C3C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v0, v2, v1);
}

uint64_t sub_1000C3C28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000C3C44()
{
  return type metadata accessor for UnitsConfigurationViewModel.Representation(0);
}

uint64_t sub_1000C3C4C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100021A68(a1, v1);
}

uint64_t sub_1000C3C54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ShortDescription.init(name:_:)(v1, (a1 - 32) | 0x8000000000000000, v2, v3);
}

uint64_t sub_1000C3C70()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 424, v1);
}

double sub_1000C3C80()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 - 80) = 0;
  *(_OWORD *)(v1 - 112) = 0u;
  *(_OWORD *)(v1 - 96) = 0u;
  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C3C94(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 1);
}

id sub_1000C3CA4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2, 0);
}

id sub_1000C3CB4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000C3CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, a2, a3, a4, 0, a1);
}

void sub_1000C3CC8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  sub_10077BDAC(v2 + a1, v1 + a1);
}

uint64_t sub_1000C3CD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 56);
}

uint64_t sub_1000C3CF4()
{
  return _s11NormalModelVMa(0);
}

uint64_t sub_1000C3D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000C3D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000C3D38()
{
  return type metadata accessor for PrecipitationAveragesHeroChartView(0);
}

uint64_t sub_1000C3D40(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_1000C3D4C@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double *v5;

  v5 = *(double **)(a1 - 256);
  *v5 = a4;
  v5[1] = a5;
  v5[2] = a2;
  v5[3] = a3;
  return type metadata accessor for MainViewModel.ModalModule.LocationDetailModule(0);
}

uint64_t sub_1000C3D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

uint64_t sub_1000C3D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(a1, a2, v2);
}

double sub_1000C3D80()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 72)).n128_u64[0];
  return result;
}

uint64_t sub_1000C3DA8()
{
  uint64_t v0;

  return v0 - 120;
}

uint64_t sub_1000C3DBC()
{
  return ProxyContainer.public.getter();
}

uint64_t sub_1000C3DC4(uint64_t a1)
{
  return type metadata accessor for State(0, a1);
}

uint64_t sub_1000C3DD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 176) + 8))(*(_QWORD *)(v0 - 256), *(_QWORD *)(v0 - 288));
}

uint64_t sub_1000C3DE8()
{
  return type metadata accessor for SearchLocation(0);
}

uint64_t sub_1000C3E04()
{
  return type metadata accessor for CalendarHeaderView(0);
}

uint64_t sub_1000C3E0C()
{
  return type metadata accessor for PressureComponentViewModel(0);
}

uint64_t sub_1000C3E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return PrecipitationComponentDescriptionContext.init(currentWeather:dailyForecast:hourlyForecast:timeZone:heroStringPrecipitationType:isAllowedToShowNext24HourTotal:)(v3, v0, v1, v2, v4);
}

uint64_t sub_1000C3E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v4 - 304, v2, v3, v1, a1);
}

uint64_t sub_1000C3E4C()
{
  return _FrameLayout.init(width:height:alignment:)(0, 1, 0x4026000000000000, 0);
}

uint64_t sub_1000C3E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_1000C3E74()
{
  return type metadata accessor for WeatherApp(0);
}

double sub_1000C3E7C()
{
  return 0.0;
}

uint64_t sub_1000C3E98(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C3EA0(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

uint64_t sub_1000C3EAC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  *(_OWORD *)(v1 - 128) = 0u;
  *(_OWORD *)(v1 - 112) = 0u;
  *(_QWORD *)(v1 - 96) = 0;
  return 2;
}

uint64_t sub_1000C3F0C(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 8);
}

id sub_1000C3F14()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 1960), v0);
}

NSDictionary sub_1000C3F24()
{
  return Dictionary._bridgeToObjectiveC()();
}

_QWORD *sub_1000C3F38(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1000C3F4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100040308(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000);
}

double sub_1000C3F64()
{
  _QWORD *v0;
  double result;

  *(_QWORD *)&result = swift_retain(*v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C3F70(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000C3F84()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v1 - 304), 2);
}

uint64_t sub_1000C3F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C3FB0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(*(_QWORD *)(v1 - 184), a1);
}

uint64_t sub_1000C3FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 280) + 16))(*(_QWORD *)(v2 - 288), a2, *(_QWORD *)(v2 - 272));
}

void sub_1000C3FEC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

uint64_t sub_1000C3FF8()
{
  return 2;
}

uint64_t sub_1000C4020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 96, v2);
}

void sub_1000C4034(uint64_t a1)
{
  uint64_t *v1;

  sub_100021AA4(a1, v1);
}

uint64_t sub_1000C403C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 128, v6 - 65, v5, a4, a5);
}

uint64_t sub_1000C4054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_storeEnumTagMultiPayload(v2, a2, 6);
}

uint64_t sub_1000C4060()
{
  return type metadata accessor for AveragesDetailViewModel(0);
}

uint64_t sub_1000C4068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 - 136));
}

uint64_t sub_1000C4074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void sub_1000C407C()
{
  char v0;
  uint64_t v1;

  sub_10008D47C(v1, v0);
  sub_100109B54();
}

uint64_t sub_1000C409C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

id sub_1000C40A8()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 184));
}

double sub_1000C40B4@<D0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  return 10.0;
}

uint64_t sub_1000C40C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

uint64_t sub_1000C40D0(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

double sub_1000C40D8()
{
  return 0.0;
}

uint64_t sub_1000C40F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 208) + 8))(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 200));
}

uint64_t sub_1000C4104@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 72) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000C4114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, a2, a3, a4, 0, a1);
}

double sub_1000C4120()
{
  return 20.0;
}

uint64_t sub_1000C4130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v1 + a1, v2);
}

uint64_t sub_1000C413C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000C4144@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 488) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000C4150()
{
  return static Locale.current.getter();
}

void sub_1000C4158(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1008190D8(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a3, a4);
}

uint64_t sub_1000C4160(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_100051B90(a1, v3, a3);
}

uint64_t sub_1000C417C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

void sub_1000C4198(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 8u);
}

uint64_t sub_1000C41A8()
{
  return type metadata accessor for InteractiveMapView(0);
}

void sub_1000C41B0()
{
  sub_1000B2E08();
}

uint64_t sub_1000C41BC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 8) + 8))(*(_QWORD *)(v0 + 120), v1);
}

uint64_t sub_1000C41D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C41E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Configurable.setting<A>(_:)(a1, v2, v1);
}

uint64_t sub_1000C41F4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000C4200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

void sub_1000C4220()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 368);
  *(_QWORD *)(v0 - 136) = *(_QWORD *)(v0 - 360);
  *(_QWORD *)(v0 - 128) = v1;
}

uint64_t sub_1000C4238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for ScrubberView(0) - 8);
  v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v2 + 8));
  return swift_release(*(_QWORD *)(v2 + 48));
}

uint64_t sub_1000C4280()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 136, 0);
}

BOOL sub_1000C428C@<W0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return *(double *)(v2 + 8 * a2) < *(double *)(v2 + 8 * a1);
}

uint64_t sub_1000C42A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 32)), *(_BYTE *)(v1 + *(int *)(v0 + 32) + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 36)), *(_BYTE *)(v1 + *(int *)(v0 + 36) + 8));
  return type metadata accessor for WeatherConditionBackgroundModel(0);
}

uint64_t sub_1000C42E4()
{
  uint64_t v0;

  return objc_opt_self(*(_QWORD *)(v0 + 1616));
}

uint64_t sub_1000C42EC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000C4310()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  return sub_1000A6594(v0, v2, v1);
}

uint64_t sub_1000C4320()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000C4338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100945C00(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000C4350()
{
  uint64_t v0;

  return sub_10056DCD0(v0);
}

uint64_t sub_1000C4358()
{
  return DateComponents.hour.setter(0, 0);
}

double sub_1000C4364()
{
  return 0.0;
}

uint64_t sub_1000C4388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t sub_1000C4398()
{
  return type metadata accessor for DynamicTypeSize(0);
}

uint64_t sub_1000C43AC(uint64_t a1)
{
  return type metadata accessor for Group(255, a1);
}

uint64_t sub_1000C43B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000C43C4()
{
  return type metadata accessor for ConditionDetailLegendForeground(0);
}

uint64_t sub_1000C43CC(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 576));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000C43F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000C440C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C441C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 96), 1, 1, a1);
}

void sub_1000C4434()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0;
  *(_QWORD *)(v0 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
}

uint64_t sub_1000C4448@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Date.== infix(_:_:)(v2 + a1, v1 + a1);
}

double sub_1000C4454()
{
  return 0.0;
}

uint64_t sub_1000C4470(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

_QWORD *sub_1000C4480(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000C448C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 - 616))(*(_QWORD *)(v0 - 392), *(unsigned int *)(v0 - 620), *(_QWORD *)(v0 - 384));
}

uint64_t sub_1000C44B8()
{
  return type metadata accessor for PresetAppState(0);
}

uint64_t sub_1000C44C0()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  return sub_1000A5EBC(v1, v2 - 128, v0);
}

void sub_1000C44D4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  sub_100095B78(v1 + a1, v3, v2);
}

uint64_t sub_1000C44E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000DB418(a1, v1);
  return swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v2 + 8) + 4));
}

uint64_t sub_1000C4510(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000C4538()
{
  return type metadata accessor for FeelsLikeComponentViewModel(0);
}

uint64_t sub_1000C4548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for WeatherAsyncImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

BOOL sub_1000C455C(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t sub_1000C456C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C4580()
{
  uint64_t v0;

  return sub_100094BF8(v0);
}

uint64_t sub_1000C4588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000C45A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 - 168) = v1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  *(_QWORD *)(v4 - 184) = v5;
  return v5(v2, v0, v3);
}

id sub_1000C45D0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000C45D8()
{
  return type metadata accessor for NewsArticleComponentViewModel(0);
}

id sub_1000C45F4()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1968));
}

uint64_t sub_1000C4600()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 176) = v2;
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v1 + 48);
  return v0 + 32;
}

uint64_t sub_1000C4624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7)
{
  Swift::String v8;

  v8._countAndFlagsBits = 0xD000000000000036;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, *(Swift::String *)&a6, v8)._countAndFlagsBits;
}

uint64_t sub_1000C4630()
{
  return ((uint64_t (*)(void))swift_arrayInitWithCopy)();
}

uint64_t sub_1000C4638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_1000C4644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, 23, 2, v4);
}

uint64_t sub_1000C4668()
{
  return 0;
}

uint64_t sub_1000C4684(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

uint64_t sub_1000C468C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 280) + 8))(*(_QWORD *)(v0 - 240), *(_QWORD *)(v0 - 272));
}

void sub_1000C46A8()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(85);
}

uint64_t sub_1000C46C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000C46D0()
{
  return static UIListContentConfiguration.subtitleCell()();
}

void sub_1000C46EC(uint64_t a1, void *a2)
{
  sub_100010688(a1, a2, 0x6E6F697461636F6CLL);
}

uint64_t sub_1000C470C()
{
  return type metadata accessor for TemperatureScaleData(0);
}

uint64_t sub_1000C4714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 8))(v2, v1);
}

uint64_t sub_1000C4728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v2, v4 - 112, v1, v3, a1);
}

uint64_t sub_1000C4748()
{
  return type metadata accessor for MoonScrubberHeaderViewModel(0);
}

uint64_t sub_1000C4750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
}

uint64_t sub_1000C4760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000C4770(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000C4778(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  return sub_100080BA8(a1, v2, v1);
}

uint64_t sub_1000C4784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Sequence.first<A>(map:)(a1, a2, v2, v3);
}

uint64_t sub_1000C4794@<X0>(uint64_t a1@<X8>)
{
  return LocalizedStringKey.init(stringLiteral:)(0xD00000000000002DLL, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_1000C47A8()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 24)), *(_BYTE *)(v1 + *(int *)(v0 + 24) + 8));
  return sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 28)), *(_BYTE *)(v1 + *(int *)(v0 + 28) + 8));
}

__n128 *sub_1000C47E4(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  __n128 *result;

  a1[1] = a2;
  result = a1 + 3;
  *(_QWORD *)(v2 + 32) = 0x6E6F69746361;
  *(_QWORD *)(v2 + 40) = 0xE600000000000000;
  return result;
}

uint64_t sub_1000C4804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = _s7Weather24LocationCompositionStateOwst_0(a1, v4, 1, a4);
  return TipGroup.currentTip.getter(v5);
}

uint64_t sub_1000C4820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, a3);
}

uint64_t sub_1000C4828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 1, 0);
}

uint64_t sub_1000C4838(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_1000C4844@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000C4854@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_1000C4860()
{
  uint64_t v0;

  return v0;
}

double sub_1000C4874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  return sub_10001913C(&a9);
}

uint64_t sub_1000C4884()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000C4890()
{
  return type metadata accessor for ScrollViewProxy(0);
}

uint64_t sub_1000C4898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000C48A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v0, v1);
}

uint64_t sub_1000C48B4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 440) + 32))(*(_QWORD *)(v1 - 448), v0, *(_QWORD *)(v1 - 432));
}

double sub_1000C48E0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000C48E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a9 = v10;
  return ScaledValue.init(wrappedValue:step:)(&a10, &a9, v12, v11);
}

uint64_t sub_1000C4900()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000C490C()
{
  return type metadata accessor for LollipopMarkModel(0);
}

uint64_t sub_1000C4914()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C4924()
{
  return type metadata accessor for PressureComponentGaugeView(0);
}

uint64_t sub_1000C492C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C4938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v3 - 120, v2, a1, *(_QWORD *)(v3 - 168), v1);
}

uint64_t sub_1000C4960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

uint64_t sub_1000C4974()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000C4980()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 320) + 8))(*(_QWORD *)(v0 - 160), *(_QWORD *)(v0 - 312));
}

uint64_t sub_1000C499C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 296));
}

uint64_t sub_1000C49A8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 32))(*(_QWORD *)(v1 - 144), v0, *(_QWORD *)(v1 - 128));
}

uint64_t sub_1000C49C4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return String.hash(into:)(va, a1, a2);
}

uint64_t sub_1000C49DC()
{
  NSBundle v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v4;

  v1._countAndFlagsBits = 0x7372756F68203432;
  v1._object = (void *)0xE800000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000021;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, v0, v2, v4)._countAndFlagsBits;
}

uint64_t sub_1000C4A10()
{
  return type metadata accessor for ViewData(0);
}

uint64_t sub_1000C4A18()
{
  return type metadata accessor for DayWeatherEditorView(0);
}

uint64_t sub_1000C4A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return Text.init<A>(_:)(&a9, a2, v9);
}

uint64_t sub_1000C4A2C()
{
  return 0x636120736D656553;
}

uint64_t sub_1000C4A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of SetAlgebra.isSuperset(of:)(v1, v0, v2);
}

uint64_t sub_1000C4A70(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000C4A80()
{
  return 0x617361656C706E75;
}

uint64_t sub_1000C4A9C()
{
  return 0x7463697274736572;
}

double sub_1000C4AB0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C4ABC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000C4AD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  *(_QWORD *)(result + 72) = a2;
  *(_BYTE *)(result + 48) = v2;
  return result;
}

uint64_t sub_1000C4AE4(uint64_t a1)
{
  uint64_t v1;
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = a1;
  *(_QWORD *)(v4 - 120) = 0;
  *v2 = 258;
  *(_QWORD *)(v4 - 112) = v2 + 1;
  *(_QWORD *)(v4 - 144) = v3;
  *(_QWORD *)(v4 - 136) = v1;
  return sub_1000CE110((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 144), v4 - 112, v4 - 120, v4 - 128);
}

void sub_1000C4B18(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  sub_100077A84(v1);
}

id sub_1000C4B24()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 4072));
}

uint64_t sub_1000C4B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000C4B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v2 - 104) + 72) * v0;
}

uint64_t sub_1000C4B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C4B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, v3, v2);
}

_QWORD *sub_1000C4B9C()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, v1);
}

uint64_t sub_1000C4BA8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 6);
}

uint64_t sub_1000C4BB8()
{
  return type metadata accessor for ViewAction(0);
}

void sub_1000C4BC0()
{
  sub_1000B2E08();
}

uint64_t sub_1000C4BD8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100043CA8(v0, v1 - 240);
}

uint64_t sub_1000C4BE4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1000C4BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 168) = a2;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 16))(*(_QWORD *)(v5 - 160), v3, v2);
}

double sub_1000C4C14()
{
  double v0;

  return v0;
}

uint64_t sub_1000C4C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

uint64_t sub_1000C4C38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 136))();
}

void sub_1000C4C40()
{
  uint64_t *v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, char *, __n128);
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;

  sub_1005DB7A4(v6, v5, v4, v3, v2, v1, v0);
}

uint64_t sub_1000C4C64(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_1000C4C6C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000C4C7C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C4C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  return type metadata accessor for LocationCompositionState(0);
}

uint64_t sub_1000C4C98()
{
  uint64_t v0;

  return Promise.init(value:)(v0);
}

uint64_t sub_1000C4CA8(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

void sub_1000C4CC0()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000C4CCC(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(a1 + 28)));
}

uint64_t sub_1000C4CD8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 472));
}

void sub_1000C4CE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037768(v1, *(_QWORD *)(v2 - 312), v0);
}

uint64_t sub_1000C4CFC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10021D04C(v0, v1);
}

uint64_t sub_1000C4D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_1000C4D1C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000C4D3C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 336) = v1;
  *(_QWORD *)(v2 - 304) = v1;
  *(_QWORD *)(v2 - 296) = a1;
}

id sub_1000C4D58(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000C4D60@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000C4D6C()
{
  return type metadata accessor for ContentStatusBannerView(0);
}

uint64_t sub_1000C4D74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 256));
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000C4D90()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
  return type metadata accessor for SearchViewState(0);
}

uint64_t sub_1000C4DD0(uint64_t a1)
{
  uint64_t v1;

  return Measurement<>.converted(to:)(a1, v1);
}

void sub_1000C4DE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, v2, v1);
}

uint64_t sub_1000C4DEC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100040308(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xE900000000000000);
}

uint64_t sub_1000C4E08(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for ViewState(0);
}

__n128 *sub_1000C4E2C(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  __n128 *result;

  a1[1] = a2;
  result = a1 + 3;
  *(_QWORD *)(v2 + 32) = 0x6574617473;
  *(_QWORD *)(v2 + 40) = 0xE500000000000000;
  return result;
}

uint64_t sub_1000C4E4C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 6);
}

uint64_t sub_1000C4E5C()
{
  uint64_t v0;

  return NSObject.hash(into:)(v0);
}

uint64_t sub_1000C4E68()
{
  return static WeatherFormatStyle<>.weather.getter();
}

uint64_t sub_1000C4E70(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

uint64_t sub_1000C4E8C()
{
  return type metadata accessor for CurrentWeatherEditorView(0);
}

uint64_t sub_1000C4E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

id sub_1000C4E9C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000C4EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 72, v6 - 73, v4, a4, v5);
}

void sub_1000C4EC4(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100080C0C(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000C4EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6, a2, v5, v7, a5);
}

uint64_t sub_1000C4F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, 0xD00000000000002DLL, a5, a6, 26, 2);
}

uint64_t sub_1000C4F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_1000C4F38()
{
  return type metadata accessor for OSSignpostID(0);
}

uint64_t sub_1000C4F40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_1000CE1C8(v0, v1, (uint64_t *)(v2 - 144));
}

void sub_1000C4F50()
{
  sub_1000ED624();
}

uint64_t sub_1000C4F6C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C4F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 216));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000C4F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C4FAC()
{
  return type metadata accessor for SunriseSunsetMonthlyViewModel(0);
}

double sub_1000C4FB4()
{
  double v0;

  return v0;
}

uint64_t sub_1000C4FC8()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
}

uint64_t sub_1000C4FDC@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 344), *(_QWORD *)(v1 - 352));
}

uint64_t sub_1000C4FF0()
{
  return type metadata accessor for DailyForecastEditorView(0);
}

uint64_t sub_1000C4FF8()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v2, v1);
}

uint64_t sub_1000C500C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v1, v3, v2, a1);
}

void sub_1000C5024(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_100095B78(v2 + a2, a1, v3);
}

uint64_t sub_1000C5030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.init(stringLiteral:)(a1, (a2 - 32) | 0x8000000000000000);
}

double sub_1000C504C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  sub_1000BF398(*(_QWORD *)(v1 + *(int *)(v0 + 96)), *(_QWORD *)(v1 + *(int *)(v0 + 96) + 8));
  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 100)), *(_BYTE *)(v1 + *(int *)(v0 + 100) + 8));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000C508C()
{
  sub_100027554(0);
}

uint64_t sub_1000C5094@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000C50A4()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 376));
}

unint64_t sub_1000C50B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return v1
       + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 120) + 80))
       + *(_QWORD *)(*(_QWORD *)(v2 - 120) + 72) * a1;
}

uint64_t sub_1000C50E0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1000C50EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return WeatherInterpolator.reduce(_:from:to:clampRange:useMonotone:)(a1, a2, v2, 0, 0, 1, 0);
}

uint64_t sub_1000C5104()
{
  return type metadata accessor for Date(0);
}

double sub_1000C5118()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return sub_100121E04(v0, v1, v2);
}

uint64_t sub_1000C5128()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  return sub_1000A5EBC(v0, v2 - 96, v1);
}

unint64_t sub_1000C513C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_10095F948();
}

uint64_t sub_1000C5148(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 5);
}

uint64_t sub_1000C5154()
{
  return static Locale.current.getter();
}

unint64_t sub_1000C515C(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1000C5174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_1000C5184@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static Date.== infix(_:_:)(*(_QWORD *)(v1 - 136) + a1, *(_QWORD *)(v1 - 128) + a1);
}

uint64_t sub_1000C5198(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000C51A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  return type metadata accessor for TimeState(0);
}

void sub_1000C51B4(char a1)
{
  char v1;
  uint64_t v2;

  sub_10026563C(v2, v1 & 1, a1 & 1);
}

uint64_t sub_1000C51C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

BOOL sub_1000C51D4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C51E4()
{
  return type metadata accessor for Precipitation(0);
}

uint64_t sub_1000C51EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t *v33;

  return sub_10055874C(a1, a2, a3, v33[157], v33[166], v33[154], v33[174], v33[153], a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33);
}

double sub_1000C5204()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 - 96) = 0;
  *(_OWORD *)(v1 - 128) = 0u;
  *(_OWORD *)(v1 - 112) = 0u;
  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

void sub_1000C5218()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

void sub_1000C5224(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000C5230(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 11);
}

uint64_t sub_1000C5238(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000C525C(uint64_t a1)
{
  uint64_t v1;

  return v1
       + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
}

uint64_t sub_1000C5288()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C529C()
{
  return type metadata accessor for HorizontalABWithB1x1RatioLayout(0);
}

uint64_t sub_1000C52A4()
{
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000C52AC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C52C0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 240);
}

__n128 sub_1000C52D8(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000C52EC()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

void sub_1000C52F4()
{
  void *v0;

}

uint64_t sub_1000C5304(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 11);
}

uint64_t sub_1000C5314@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1000C5320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000C5340(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t *a4)
{
  uint64_t v4;

  return sub_10014819C(a1, a2, a3, a4, v4 - 120);
}

void sub_1000C534C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1001207F8(v1, v2, v0);
}

uint64_t sub_1000C535C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 360))(a1, a2, v2);
}

uint64_t sub_1000C536C(uint64_t a1)
{
  uint64_t v1;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, v1);
}

uint64_t sub_1000C537C()
{
  return type metadata accessor for CoordinateSpace(0);
}

uint64_t sub_1000C5384()
{
  _QWORD *v0;
  unint64_t *v1;

  return sub_1000A0794(0, v1, v0);
}

uint64_t sub_1000C5398()
{
  return static ChartSymbolShape<>.circle.getter();
}

_QWORD *sub_1000C53A4()
{
  return sub_10003F8CC();
}

uint64_t sub_1000C53BC()
{
  return 2;
}

uint64_t sub_1000C53E8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(v0, *(_QWORD *)(v2 - 280));
}

uint64_t sub_1000C53F8()
{
  return type metadata accessor for ListLocationViewModel(0);
}

double sub_1000C5400@<D0>(uint64_t a1@<X8>)
{
  return sub_100176DD4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void sub_1000C5410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1 + *(int *)(v2 + 80);
  v4 = *(uint64_t **)(v0 + 24);
  v5 = *(uint64_t **)(v0 + 32);
  v6 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)v3 = v6;
  *(_BYTE *)(v3 + 8) = (_BYTE)v4;
  v7 = v1 + *(int *)(v2 + 96);
  v8 = *v5;
  LOBYTE(v5) = *((_BYTE *)v5 + 8);
  *(_QWORD *)v7 = v8;
  *(_BYTE *)(v7 + 8) = (_BYTE)v5;
}

uint64_t sub_1000C544C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 112, a2, 1);
}

uint64_t sub_1000C5458()
{
  return type metadata accessor for TemperatureAveragesHeroChartView(0);
}

uint64_t sub_1000C5460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000C5468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C5470()
{
  uint64_t v0;

  return URLHandlerContext.match.getter(v0);
}

__n128 *sub_1000C547C(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  __n128 *result;

  a1[1] = a2;
  result = a1 + 3;
  *(_QWORD *)(v2 + 32) = 0x6E6F69746361;
  *(_QWORD *)(v2 + 40) = 0xE600000000000000;
  return result;
}

uint64_t sub_1000C549C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeBackToFront(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

uint64_t sub_1000C54A8(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return swift_beginAccess(a1, va, 0, 0);
}

double sub_1000C54B8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C54C8()
{
  return type metadata accessor for CalendarDayCellViewModel(0);
}

uint64_t sub_1000C54D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000C54D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C54EC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 176) + 8))(v0, *(_QWORD *)(v1 - 168));
}

uint64_t sub_1000C54FC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_1000C551C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_1000C5540(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 112) = 1752392040;
}

uint64_t sub_1000C5560@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000C5570(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

void sub_1000C5578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 176) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000C5594()
{
  return type metadata accessor for NotificationSubscription.Kind(0);
}

uint64_t sub_1000C55A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000C55A8()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 20)), *(_BYTE *)(v1 + *(int *)(v0 + 20) + 8));
  return sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 24)), *(_BYTE *)(v1 + *(int *)(v0 + 24) + 8));
}

uint64_t sub_1000C55E0()
{
  return type metadata accessor for OverviewTableValueString(0);
}

uint64_t sub_1000C55F4()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 - 128));
}

unint64_t sub_1000C561C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_1004E4ED0();
}

uint64_t sub_1000C5628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 112), a1);
}

uint64_t sub_1000C563C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1);
}

double sub_1000C5650()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168)).n128_u64[0];
  return result;
}

double sub_1000C5658()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144)).n128_u64[0];
  return result;
}

double sub_1000C5660()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C566C(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 0);
}

void sub_1000C5690(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000AB54(a1, a2, v2);
}

void sub_1000C569C()
{
  void *v0;

}

uint64_t sub_1000C56AC()
{
  return type metadata accessor for ListViewAction(0);
}

uint64_t sub_1000C56C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 - 192));
}

uint64_t sub_1000C56D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000C56E0()
{
  return type metadata accessor for BinaryDecoder.Error(0);
}

uint64_t sub_1000C56E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 168) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 136);
}

uint64_t sub_1000C5708(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 104));
}

uint64_t sub_1000C5718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_1000C5738(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000C5740(uint64_t a1, uint64_t a2)
{
  return type metadata accessor for AnimatableTabView(0, a2);
}

double sub_1000C5764()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100614B2C(v0, v1);
}

uint64_t sub_1000C5770(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  uint64_t v2;

  return sub_10008CED0(v2 - 176, a2);
}

uint64_t sub_1000C5778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v6, v5, a5);
}

uint64_t sub_1000C578C()
{
  return 0x676E6964616F6CLL;
}

void sub_1000C57AC()
{
  uint64_t v0;

  sub_100133204(v0, 0, 0, 2, 0, 0);
}

uint64_t sub_1000C57E0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v2);
}

uint64_t sub_1000C5808()
{
  return EnvironmentValues.effectiveForegroundStyle.getter();
}

double sub_1000C5814()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_QWORD *)(v0 - 96) = 0;
  return result;
}

uint64_t sub_1000C5850@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 496));
}

uint64_t sub_1000C587C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 112), *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000C588C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 160));
}

void sub_1000C5894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_1000787D4(v1, v0, v2);
}

uint64_t sub_1000C58A4()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000C58B0()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1, v2, v3);
}

uint64_t sub_1000C58C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

uint64_t sub_1000C58D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

uint64_t sub_1000C58FC()
{
  uint64_t v0;

  return sub_1002CAAB4(v0 - 120);
}

uint64_t sub_1000C5904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD);

  return sub_1007D4D84(v2, v1, v0, v3);
}

uint64_t sub_1000C591C()
{
  return type metadata accessor for WeatherNetworkActivity.Label(0);
}

uint64_t sub_1000C5924(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_1000C592C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Configurable.setting<A>(_:)(a1, v1, v2);
}

uint64_t sub_1000C5938()
{
  return swift_slowAlloc(8, -1);
}

uint64_t sub_1000C5944()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

void sub_1000C5950(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_10003773C(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000C5960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 240));
  return type metadata accessor for ModalViewState(0);
}

void sub_1000C597C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_1000C5990()
{
  return type metadata accessor for MapComponentViewModel(0);
}

uint64_t sub_1000C5998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000C59A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 16));
}

void sub_1000C59B4()
{
  void *v0;

}

uint64_t sub_1000C59C0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10021D04C(v1, v0);
}

uint64_t sub_1000C59CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

double sub_1000C59F0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  sub_1000BF398(*(_QWORD *)(v1 + *(int *)(v0 + 108)), *(_QWORD *)(v1 + *(int *)(v0 + 108) + 8));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000C5A1C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000C5A28()
{
  return type metadata accessor for InteractiveMapViewAction(0);
}

void sub_1000C5A30(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(a1, v2, v1);
}

uint64_t sub_1000C5A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000C5A68()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  return sub_1000B56C0(v1, v0);
}

uint64_t sub_1000C5A74(uint64_t a1, uint64_t a2)
{
  return sub_100960F78(a1, a2);
}

uint64_t sub_1000C5A80()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v0, 1, v1);
}

double sub_1000C5A90()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

double sub_1000C5A9C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

unint64_t sub_1000C5AB8()
{
  return sub_1001196E4();
}

uint64_t sub_1000C5AC8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000C5AE8()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_1000C5AF0()
{
  uint64_t v0;

}

uint64_t sub_1000C5AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable.hash(into:)(v1, v2, a1);
}

uint64_t sub_1000C5B0C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100043CA8(v0, v1 - 216);
}

uint64_t sub_1000C5B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_1000C5B20(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100084050(a1, *(_QWORD *)(v2 - 168), v1);
}

double sub_1000C5B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

uint64_t sub_1000C5B48()
{
  void *v0;

  return sub_1001C8E84(v0);
}

uint64_t sub_1000C5B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C5B60()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, *(_QWORD *)(v1 - 640));
}

uint64_t sub_1000C5B78()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_1000C5B88()
{
  return type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
}

uint64_t sub_1000C5B90()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[169] + 16))(v0[154], v0[168], v0[170]);
}

_QWORD *sub_1000C5BA8()
{
  _QWORD *v0;

  return sub_100223C5C(v0);
}

uint64_t sub_1000C5BB0()
{
  uint64_t v0;

  return Date.startOfDay(timeZone:)(v0);
}

uint64_t sub_1000C5BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C5BCC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if ((unint64_t)*v0 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000C5BE4()
{
  return type metadata accessor for LocationComponentHeaderViewModel.Description(0);
}

void sub_1000C5C00(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100021A14(*(_QWORD *)(a1 - 256), v1);
}

void sub_1000C5C0C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 256) = v1;
}

uint64_t sub_1000C5C18(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000C5C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000C5C6C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

__n128 sub_1000C5C78(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, __n128 a12)
{
  __n128 result;

  a1[1] = a10;
  a1[2] = a11;
  result = a12;
  a1[3] = a12;
  return result;
}

uint64_t sub_1000C5C94()
{
  return type metadata accessor for LocationWeatherDataState(0);
}

uint64_t sub_1000C5C9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000C5CBC()
{
  return 0;
}

uint64_t sub_1000C5CE4()
{
  return type metadata accessor for EmptyVisualEffect(0);
}

uint64_t sub_1000C5CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of SetAlgebra.isSuperset(of:)(v1, v0, v2);
}

void sub_1000C5D04(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10000F1C8(a1, v1);
}

uint64_t sub_1000C5D0C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_1000C5D24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, *(_QWORD *)(a2 - 256), v2);
}

void sub_1000C5D34(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  sub_100095B78(v1 + a1, v3, v2);
}

uint64_t sub_1000C5D44()
{
  uint64_t v0;

  return v0;
}

double sub_1000C5D58(uint64_t a1)
{
  uint64_t v1;
  double result;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 256));
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v1 - 136)).n128_u64[0];
  return result;
}

uint64_t sub_1000C5D7C()
{
  return 0x646570706174;
}

void sub_1000C5D94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10007EBC8(a1, a2, v2);
}

uint64_t sub_1000C5D9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 88, v1);
}

uint64_t sub_1000C5DB4(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, *(_QWORD *)(v1 - 88));
}

uint64_t sub_1000C5DD0()
{
  return type metadata accessor for TemperatureAveragesHeroChartView(0);
}

void sub_1000C5DE0()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000C5DF0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v0, v1 - 104, 1, 0);
}

uint64_t sub_1000C5E04()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 264) + 8))(*(_QWORD *)(v1 - 176), v0);
}

uint64_t sub_1000C5E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t sub_1000C5E30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 96, a2, 1);
}

uint64_t sub_1000C5E3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v2, v1);
}

uint64_t sub_1000C5E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, *(_QWORD *)(v5 - 96), v4, *(_QWORD *)(v5 - 120));
}

uint64_t sub_1000C5E60()
{
  return type metadata accessor for DisplayMetrics(0);
}

uint64_t sub_1000C5E6C(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000C5E90()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

uint64_t sub_1000C5EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000C5EBC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 32) + 8));
}

uint64_t sub_1000C5ECC()
{
  return type metadata accessor for DailyComponentForecastRowViewLargeText(0);
}

uint64_t sub_1000C5ED4()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = 0;
  *(_OWORD *)(v2 - 160) = 0u;
  *(_OWORD *)(v2 - 144) = 0u;
  return sub_1000A5EBC(v1, v2 - 160, v0);
}

uint64_t sub_1000C5EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 280))(a1, a2, v2);
}

double sub_1000C5F04()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 96)).n128_u64[0];
  return result;
}

uint64_t sub_1000C5F0C()
{
  return 0x74617265706D6574;
}

uint64_t sub_1000C5F2C()
{
  return type metadata accessor for LocationData(0);
}

uint64_t sub_1000C5F34()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

void sub_1000C5F40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10007EBC8(a1, a2, v2);
}

double sub_1000C5F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  return sub_10010F980(v0, v1, v3, v2);
}

void sub_1000C5F5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037794(a1, a2, v2);
}

uint64_t sub_1000C5F8C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  return sub_1000A5EBC(v0, v2 - 128, v1);
}

id sub_1000C5FA0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000C5FB0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1000C5FEC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_1000C5FF8(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 32, 0);
}

uint64_t sub_1000C6004()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_1000C6010()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000C6018()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

double sub_1000C6024()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152)).n128_u64[0];
  return result;
}

uint64_t sub_1000C602C()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 16));
}

uint64_t sub_1000C6034()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 80)));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 84)));
  return type metadata accessor for Text.Measurements(0);
}

uint64_t sub_1000C6064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000C6074()
{
  return type metadata accessor for DebugIncomingWeatherAlertViewController(0);
}

uint64_t sub_1000C607C()
{
  return 0x544847494ELL;
}

uint64_t sub_1000C60B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000C60C0()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_1000C60DC()
{
  return type metadata accessor for MainViewModel.ModalModule(0);
}

uint64_t sub_1000C60E4(uint64_t a1)
{
  uint64_t v1;

  return swift_dynamicCastUnknownClassUnconditional(a1, v1, 0, 0, 0);
}

double sub_1000C613C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

void sub_1000C6148(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100033A34(a1, a2, v2);
}

uint64_t sub_1000C6150()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000C6170()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 - 224))(*(_QWORD *)(v0 - 168), *(_QWORD *)(v0 - 160));
}

uint64_t sub_1000C617C()
{
  return type metadata accessor for LollipopChartOverlayView(0);
}

void sub_1000C6184()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_100080C0C(v1, v2, v0);
}

_WORD *sub_1000C6194(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000C61A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C61B0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 152), 1, 1, a1);
}

uint64_t sub_1000C61C8()
{
  return sub_100155738();
}

uint64_t sub_1000C61D4(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

double sub_1000C61DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a9).n128_u64[0];
  return result;
}

char *sub_1000C61E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t sub_1000C61F8()
{
  return type metadata accessor for ConditionDetailChartHeaderViewModel(0);
}

uint64_t sub_1000C620C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v3, v2);
}

void sub_1000C6220(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_100037768(a1, v1, v2);
}

uint64_t sub_1000C622C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000C6238()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_1000C6244(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

BOOL sub_1000C624C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

double sub_1000C625C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C6268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 176), 1, 1, *(_QWORD *)(v4 - 144));
}

void sub_1000C6294()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1000FF448(v1, v0);
}

uint64_t sub_1000C62A0()
{
  return 0;
}

uint64_t sub_1000C62B0()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_1000C62BC(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000C62CC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 416));
}

uint64_t sub_1000C62D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_1000C62E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return Setting.init(_:defaultValue:domain:access:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3, v3, v4);
}

uint64_t sub_1000C62F8()
{
  return WeatherDataModel.currentWeather.getter();
}

double sub_1000C6304()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C631C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, _QWORD);
  uint64_t v3;

  return v2(a1, a2, *(_QWORD *)(v3 - 96));
}

uint64_t sub_1000C6324()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 664) + 8))(*(_QWORD *)(v0 - 512), *(_QWORD *)(v0 - 504));
}

void sub_1000C6344()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 128) = 1;
}

uint64_t sub_1000C6370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v2);
}

uint64_t sub_1000C638C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

uint64_t sub_1000C63A4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000C63AC(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 160), 1, 1, a1);
  return type metadata accessor for PreviewLocation(0);
}

uint64_t sub_1000C63D4()
{
  return 0x79746964696D7568;
}

uint64_t sub_1000C63EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000C63F4()
{
  return type metadata accessor for Navigate(0);
}

uint64_t sub_1000C63FC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(*(_QWORD *)(v2 - 376), a1, *(_QWORD *)(v2 - 368));
}

void sub_1000C6430()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

id sub_1000C643C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000C6444()
{
  return type metadata accessor for TemperatureChartPickerView(0);
}

uint64_t sub_1000C6468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v3, v2);
}

uint64_t sub_1000C647C()
{
  uint64_t v0;

  return v0;
}

id sub_1000C6494()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

void sub_1000C64A0()
{
  sub_1005FEB74();
}

uint64_t sub_1000C64B4(uint64_t a1, uint64_t a2)
{
  return static Date.== infix(_:_:)(a1, a2);
}

uint64_t sub_1000C64C0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)v1 = result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_1000C64CC()
{
  return type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
}

uint64_t sub_1000C64DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_1004AB310(v1, v3 + v2 + v0 * v4);
}

id sub_1000C64EC(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000C64F4()
{
  uint64_t v0;

  return swift_getObjCClassFromMetadata(v0);
}

uint64_t sub_1000C6500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 56, v3, a1, v1, v2);
}

double sub_1000C6544()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000C654C()
{
  return type metadata accessor for SunriseSunsetDetailPreprocessedDataModel(0);
}

uint64_t sub_1000C6560()
{
  return type metadata accessor for MoonDetailInput.Input(0);
}

uint64_t sub_1000C6568(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

uint64_t sub_1000C6570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C6578()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 112), *(_QWORD *)(v1 - 120));
}

void sub_1000C6584()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000C6590()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000C659C(uint64_t a1, uint64_t a2)
{
  return sub_1000AECD4(a1, a2);
}

uint64_t sub_1000C65B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C65E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 176) + 8))(*(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 168));
}

_QWORD *sub_1000C65F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 168) = a1;
  return sub_10005F164(v2);
}

uint64_t sub_1000C65FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 584) + 8))(*(_QWORD *)(v0 - 368), *(_QWORD *)(v0 - 576));
}

uint64_t sub_1000C661C()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_1000C6630()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_1000C6638()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000C6644()
{
  return UserIdentityChange.change.getter();
}

uint64_t sub_1000C6650()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

void sub_1000C665C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_1003211F0(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000C666C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, a3);
}

uint64_t sub_1000C6674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 120, a2, 1);
}

void sub_1000C6680(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

uint64_t sub_1000C668C()
{
  uint64_t v0;

  return sub_1000AA25C(v0);
}

uint64_t sub_1000C6694(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

uint64_t sub_1000C669C(uint64_t a1)
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1);
}

uint64_t sub_1000C66AC()
{
  return type metadata accessor for AQIAvailabilityData(0);
}

unint64_t sub_1000C66C4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 4;
  return sub_1004B1E20();
}

void sub_1000C66D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 144) = (char *)&a9 - v9;
}

void sub_1000C66E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_100080C0C(v3, *(_QWORD *)(v4 - 320), a3);
}

unint64_t sub_1000C66F8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_100591070();
}

uint64_t sub_1000C6710@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return swift_allocObject(v2, a1, a2 | 7);
}

void sub_1000C672C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100086DA4(a1, v3, a3);
}

uint64_t sub_1000C6734()
{
  uint64_t v0;

  return Date.formattedTime(timeZone:)(v0);
}

uint64_t sub_1000C6740()
{
  return type metadata accessor for IDView(255);
}

_QWORD *sub_1000C6748@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000DB418(v1, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000C6754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

unint64_t sub_1000C6770()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return sub_10066A478();
}

void sub_1000C677C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_10007802C(v2, v1, v0);
}

void sub_1000C67A8(uint64_t a1)
{
  sub_10007A100(a1);
}

id sub_1000C67B0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000C67BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

BOOL sub_1000C67D4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000C67E8()
{
  uint64_t v0;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 272), 1, 1, *(_QWORD *)(v0 - 208));
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 280), 1, 1, *(_QWORD *)(v0 - 256));
}

uint64_t sub_1000C6828()
{
  uint64_t v0;

  return swift_endAccess(v0 - 160);
}

uint64_t sub_1000C6830()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C6850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for GridGeometryRoot(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_1000C6874()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000C6880(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;

  return sub_1000A0794(0, a2, v2);
}

void sub_1000C688C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000C6898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 184) + 8))(v1, v0);
}

id sub_1000C68E8@<X0>(const char *a1@<X1>, uint64_t a2@<X8>)
{
  return objc_msgSend(*(id *)(a2 - 256), a1);
}

uint64_t sub_1000C68F0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1000C68FC()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_1000C690C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C6924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 0, 0);
}

uint64_t sub_1000C6934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10010E534(v2, a1 + v1);
}

uint64_t sub_1000C6940()
{
  return type metadata accessor for InputConnectionBehavior(0);
}

uint64_t sub_1000C6948(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 136));
}

uint64_t sub_1000C6960()
{
  uint64_t v0;
  uint64_t v1;

  return v1 + *(int *)(v0 + 20);
}

uint64_t sub_1000C6978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, *(_QWORD *)(v2 - 88), a1);
}

uint64_t sub_1000C6990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, *(_QWORD *)(a4 - 256));
}

uint64_t sub_1000C6998()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1112))();
}

__n128 sub_1000C69A0(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[15];
  a1[1] = result;
  return result;
}

uint64_t sub_1000C69B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 440))();
}

uint64_t sub_1000C69E8(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of ShortDescriptionType.describe(withIndentation:)(a1, *(_QWORD *)(v1 + 88));
}

uint64_t sub_1000C69F4()
{
  return type metadata accessor for SearchViewState(0);
}

uint64_t sub_1000C69FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

uint64_t sub_1000C6A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 16))(*(_QWORD *)(v2 - 160), v1, v0);
}

uint64_t sub_1000C6A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

id sub_1000C6A30(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

BOOL sub_1000C6A3C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000C6A54()
{
  return type metadata accessor for Location(0);
}

unint64_t sub_1000C6A74()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 13;
  return sub_1003B85AC();
}

uint64_t sub_1000C6A80(uint64_t a1)
{
  uint64_t v1;

  return Tip.id.getter(v1, a1);
}

uint64_t sub_1000C6A8C()
{
  return dispatch thunk of Query.all()();
}

uint64_t sub_1000C6A94(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + a1[5]) = *(_QWORD *)(v2 + a1[5]);
  *(_QWORD *)(v1 + a1[6]) = *(_QWORD *)(v2 + a1[6]);
  v4 = a1[7];
  v5 = v1 + v4;
  v6 = v2 + v4;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  *(_BYTE *)(v1 + a1[8]) = *(_BYTE *)(v2 + a1[8]);
  return swift_storeEnumTagMultiPayload(v1, v3, 1);
}

uint64_t sub_1000C6AE4@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 288));
}

uint64_t sub_1000C6AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_1000C6B04(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_1000C6B10()
{
  sub_1005FED88();
}

double sub_1000C6B20()
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(0xE300000000000000).n128_u64[0];
  return result;
}

void sub_1000C6B28()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000C6B48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + a1;
  return sub_1000CEE98(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72));
}

uint64_t sub_1000C6B70()
{
  return type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
}

uint64_t sub_1000C6B8C()
{
  return type metadata accessor for ChartPastDataTreatment(0);
}

uint64_t sub_1000C6B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C6BA0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C6BB0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000C6BBC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C6BD0()
{
  uint64_t v0;

  return static URL.read(from:)(v0);
}

uint64_t sub_1000C6BDC()
{
  return 255;
}

unint64_t sub_1000C6BEC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 3;
  return sub_10062DF68();
}

uint64_t sub_1000C6BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable.hash(into:)(v1, v2, a1);
}

uint64_t sub_1000C6C2C()
{
  uint64_t v0;

  return v0 - 128;
}

void sub_1000C6C3C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
}

uint64_t sub_1000C6C58()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, *(_QWORD *)(v1 - 128));
}

uint64_t sub_1000C6C6C()
{
  return type metadata accessor for _ConditionalContent.Storage(0);
}

uint64_t sub_1000C6C8C(__n128 *a1, __n128 a2)
{
  double v2;

  a1[1] = a2;
  return sub_10073827C(v2);
}

uint64_t sub_1000C6CA4()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_1000C6CAC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1000C6CB8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 0;
  return 0x686372616573;
}

uint64_t sub_1000C6CD0()
{
  return Location.Identifier.Kind.rawValue.getter(1);
}

uint64_t sub_1000C6CD8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 48)));
}

void sub_1000C6CE4(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_100080C0C(a1, *(_QWORD *)(a3 - 256), a2);
}

void sub_1000C6CF0()
{
  uint64_t v0;

  sub_10027248C(v0);
}

uint64_t sub_1000C6CFC()
{
  return 0;
}

void sub_1000C6D0C(uint64_t a1, __int16 a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  sub_10055E36C(a1, a2, a3, a4, 0, 0, 0, 1, a9, a10, a11, a12, a13, a14);
}

void sub_1000C6D20(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10007C75C(*(_QWORD *)(a2 - 256), *(_QWORD *)(v2 - 352), a1);
}

void *sub_1000C6D34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char __src)
{
  return memcpy(a1, &__src, 0x70uLL);
}

uint64_t sub_1000C6D40()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000C6D5C()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_1000C6D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_1000C6D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 1048));
}

uint64_t sub_1000C6D84(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1000C6D94()
{
  return type metadata accessor for ContentSizeCategory(0);
}

unint64_t sub_1000C6DAC()
{
  return 0xD000000000000010;
}

id sub_1000C6DC0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000C6DCC(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000C6DD4()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_1000C6DDC()
{
  return type metadata accessor for AirQualityDetailViewState(0);
}

unint64_t sub_1000C6DE8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 11;
  return sub_1003B8624();
}

uint64_t sub_1000C6DF4()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_1000C6E00(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + a1[5]) = *(_QWORD *)(v2 + a1[5]);
  *(_QWORD *)(v1 + a1[6]) = *(_QWORD *)(v2 + a1[6]);
  v3 = a1[7];
  v4 = v1 + v3;
  v5 = v2 + v3;
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_BYTE *)(v1 + a1[8]) = *(_BYTE *)(v2 + a1[8]);
  return v1;
}

double sub_1000C6E50()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_1000C6E58(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 2);
}

uint64_t sub_1000C6E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000596D8(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_1000C6E74(void *a1)
{
  return sub_100491BC0(a1);
}

uint64_t sub_1000C6E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 208))(v0, *(unsigned int *)(v2 - 200), v1);
}

uint64_t sub_1000C6E90()
{
  return dispatch thunk of Column.value.getter();
}

unint64_t sub_1000C6EA0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 14;
  return sub_1004FB9FC();
}

uint64_t sub_1000C6EAC()
{
  uint64_t v0;

  return v0;
}

void sub_1000C6EC0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(v2, a2);
}

uint64_t sub_1000C6ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a13, a12);
}

uint64_t sub_1000C6EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, *(_QWORD *)(v3 - 120));
}

uint64_t sub_1000C6EEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

double sub_1000C6F00@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1)).n128_u64[0];
  return result;
}

uint64_t sub_1000C6F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C6F24()
{
  return type metadata accessor for ViewState.SecondaryViewState(0);
}

uint64_t sub_1000C6F2C()
{
  return 1684957559;
}

uint64_t sub_1000C6F3C()
{
  uint64_t v0;

  return v0;
}

BOOL sub_1000C6F4C()
{
  Swift::Bool v0;
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

void sub_1000C6F60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, *(_QWORD *)(v3 - 232), a3);
}

uint64_t sub_1000C6F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v2, v0);
}

uint64_t sub_1000C6F7C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

BOOL sub_1000C6F94(Swift::String a1)
{
  return String.hasSuffix(_:)(a1);
}

uint64_t sub_1000C6FA4()
{
  uint64_t v0;
  uint64_t v1;

  return static WeatherFormatStyle<>.weather(_:locale:)(v0, v1);
}

uint64_t sub_1000C6FB0(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for Environment.Content(v1, a1);
}

uint64_t sub_1000C6FBC()
{
  return type metadata accessor for PreprocessedWeatherData(0);
}

uint64_t sub_1000C6FE0()
{
  uint64_t v0;

  return ApparentPrecipitationIntensity.init(value:category:)(v0, 0.0);
}

double sub_1000C6FF0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(double *)(v1 + a1);
}

BOOL sub_1000C701C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C7040(a1, *(_QWORD *)(v1 + 16), (void (*)(void))&HourWeather.date.getter);
}

BOOL sub_1000C7040(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100098728();
  v9 = v8 - v7;
  a3();
  v10 = sub_100051B90((unint64_t *)&qword_100BCB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(a3) = dispatch thunk of static Comparable.< infix(_:_:)(v9, a2, v5, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  return (a3 & 1) == 0;
}

void sub_1000C7114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t updated;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[19];
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1000992C4();
  v18 = *(_QWORD *)(v2 - 8);
  v19 = v2;
  v3 = *(_QWORD *)(v18 + 64);
  v4 = __chkstk_darwin(v2);
  v17[16] = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v17[18] = (char *)v17 - v9;
  v10 = __chkstk_darwin(v8);
  v17[17] = (char *)v17 - v11;
  v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  updated = type metadata accessor for WeatherDataUpdateRequestLog.Event(0);
  __chkstk_darwin(updated);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CE690(a1, (uint64_t)v15);
  v16 = (char *)sub_1000C72B0 + 4 * word_1009A8210[swift_getEnumCaseMultiPayload(v15, updated)];
  __asm { BR              X10 }
}

void sub_1000C72B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;

  v3 = *v0;
  v4 = v0[1];
  sub_1000FC648();
  v5 = sub_100098740((uint64_t)&unk_100B7C088, 32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = sub_100079FA4();
  v7 = Logger.logObject.getter(v6);
  *(_DWORD *)(v2 - 168) = sub_10009BD20(v7);
  v8 = sub_100098740((uint64_t)&unk_100B7C0B0, 17);
  *(_BYTE *)(v8 + 16) = 34;
  v9 = sub_100098740((uint64_t)&unk_100B7C0D8, 17);
  *(_BYTE *)(v9 + 16) = 8;
  v10 = sub_100098740((uint64_t)&unk_100B7C100, 32);
  *(_QWORD *)(v10 + 16) = sub_1004F1BA0;
  *(_QWORD *)(v10 + 24) = v5;
  v11 = sub_100098740((uint64_t)&unk_100B7C128, 32);
  *(_QWORD *)(v11 + 16) = sub_1004F26E4;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = sub_100098740((uint64_t)&unk_100B7C150, 17);
  *(_BYTE *)(v12 + 16) = 34;
  v13 = sub_100098740((uint64_t)&unk_100B7C178, 17);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = sub_100098740((uint64_t)&unk_100B7C1A0, 32);
  *(_QWORD *)(v14 + 16) = sub_1000EDF14;
  *(_QWORD *)(v14 + 24) = v1;
  v15 = sub_100098740((uint64_t)&unk_100B7C1C8, 32);
  *(_QWORD *)(v15 + 16) = sub_1004F26E4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = sub_1000BA294(&qword_100BEA2D8);
  v17 = sub_100098740(v16, 128);
  *(_OWORD *)(v17 + 16) = xmmword_10098C1A0;
  *(_QWORD *)(v17 + 32) = sub_1004F2700;
  *(_QWORD *)(v17 + 40) = v8;
  *(_QWORD *)(v17 + 48) = sub_1004F2700;
  *(_QWORD *)(v17 + 56) = v9;
  *(_QWORD *)(v17 + 64) = sub_1004F26F0;
  *(_QWORD *)(v17 + 72) = v11;
  *(_QWORD *)(v17 + 80) = sub_1004F2700;
  *(_QWORD *)(v17 + 88) = v12;
  *(_QWORD *)(v17 + 96) = sub_1004F2700;
  *(_QWORD *)(v17 + 104) = v13;
  *(_QWORD *)(v17 + 112) = sub_1004F26F0;
  *(_QWORD *)(v17 + 120) = v15;
  sub_1000C0C80();
  sub_1000C6544();
  sub_1000992A0();
  sub_1000C12B0();
  sub_1000C3528();
  sub_1000B4AD4();
  sub_1000CF894();
  if (sub_1000F3E48())
  {
    v18 = (uint8_t *)sub_1000CDCD4();
    v19 = sub_100098710(64);
    *(_QWORD *)(v2 - 128) = v19;
    *(_QWORD *)(v2 - 120) = 0;
    *(_WORD *)v18 = 514;
    *(_QWORD *)(v2 - 112) = v18 + 2;
    *(_QWORD *)(v2 - 144) = sub_1004F2700;
    *(_QWORD *)(v2 - 136) = v8;
    sub_1000DD034();
    if (sub_1004F2700)
    {
      swift_errorRelease(sub_1004F2700);
      __break(1u);
    }
    else
    {
      sub_10009D330();
      *(_QWORD *)(v2 - 144) = sub_1004F2700;
      *(_QWORD *)(v2 - 136) = v9;
      sub_1000BC430();
      sub_1000D1C1C();
      *(_QWORD *)(v2 - 144) = sub_1004F26F0;
      *(_QWORD *)(v2 - 136) = v11;
      sub_1000BC430();
      sub_10009D338();
      *(_QWORD *)(v2 - 144) = sub_1004F2700;
      *(_QWORD *)(v2 - 136) = v12;
      sub_1000BC430();
      sub_1000C5AE8();
      *(_QWORD *)(v2 - 144) = sub_1004F2700;
      *(_QWORD *)(v2 - 136) = v13;
      sub_1000BC430();
      sub_1000B439C();
      *(_QWORD *)(v2 - 144) = sub_1004F26F0;
      *(_QWORD *)(v2 - 136) = v15;
      sub_1000BC430();
      sub_1000C1354();
      sub_1000B3168();
      v20 = *(NSObject **)(v2 - 160);
      sub_1000C0194((void *)&_mh_execute_header, v20, v21, "Found no data or available data sets for location in app state because of previous error. We will update. error=%{public}s, uuid=%{public}s", v18);
      swift_arrayDestroy(v19, 2);
      sub_1000986F0(v19);
      sub_1000986F0((uint64_t)v18);

    }
  }
  else
  {
    sub_1000C1354();
    sub_1000B439C();
    sub_1000C5AE8();
    sub_10009D338();
    sub_1000D1C1C();
    sub_10009D330();

  }
}

uint64_t sub_1000CC77C()
{
  return type metadata accessor for Locale(0);
}

void sub_1000CC798(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C75C(a1, a2, v2);
}

uint64_t sub_1000CC7B4()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 - 88));
}

uint64_t sub_1000CC7BC(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

_QWORD *sub_1000CC7CC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[2] = v6;
  result[3] = v2;
  result[4] = v1;
  result[5] = v3;
  result[6] = v4;
  result[7] = v5;
  return result;
}

double sub_1000CC7EC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(double *)(*(_QWORD *)(v1 - 136) + a1);
}

uint64_t sub_1000CC80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

uint64_t sub_1000CC81C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000CC828()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v1 - 280), 0);
}

uint64_t sub_1000CC83C(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 144), 1, 1, a1);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 136), 1, 1, *(_QWORD *)(v1 - 88));
  **(_WORD **)(v1 - 128) = 0;
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000CC884()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000DB418((_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_1000CC8A8()
{
  return type metadata accessor for ReportWeatherView(0);
}

uint64_t sub_1000CC8B0()
{
  return type metadata accessor for CalendarView(0);
}

uint64_t sub_1000CC8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

double sub_1000CC8C8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000CC8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v2 - 648))(*(_QWORD *)(v2 - 376), a2, *(_QWORD *)(v2 - 368));
}

uint64_t sub_1000CC8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1);
}

id sub_1000CC90C(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000CC914()
{
  return type metadata accessor for MainAction(0);
}

uint64_t sub_1000CC91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t sub_1000CC928(uint64_t a1)
{
  uint64_t v1;

  return Date.wc_addDays(_:calendar:)(a1, v1);
}

double sub_1000CC934()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

NSString sub_1000CC944()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000CC958()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000CC960(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000CC97C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = a1 + v3;
  v6 = *(_QWORD *)(v4 - 368);
  _s7Weather24LocationCompositionStateOwst_0(a1 + v3 + *(int *)(v6 + 24), 1, 1, *(_QWORD *)(v4 - 376));
  v7 = (_QWORD *)(v5 + *(int *)(v6 + 28));
  *v7 = v1;
  v7[1] = v2;
  return type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
}

void sub_1000CC9C0()
{
  sub_10011ECD4();
}

uint64_t sub_1000CC9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000CC9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for ViewState(0);
}

uint64_t sub_1000CCA00()
{
  return WeatherDataModel.hourlyForecast.getter();
}

uint64_t sub_1000CCA08()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000CCA1C()
{
  return 0;
}

uint64_t sub_1000CCA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
}

uint64_t sub_1000CCA6C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for NotificationsOptInAction(0);
}

uint64_t sub_1000CCA7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

uint64_t sub_1000CCA94()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CCAAC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 4;
  return v0 - 69;
}

void *sub_1000CCAE0(uint64_t a1, void *a2)
{
  const void *v2;

  return sub_1001C4B3C(v2, a2);
}

uint64_t sub_1000CCAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_1002D4DDC(a1, a2, a3, a4, v5, v6, a5);
}

uint64_t sub_1000CCAF8(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return 0;
}

__n128 sub_1000CCB3C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 - 168);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 - 184);
  *(_OWORD *)(a1 + 32) = v2;
  result = *(__n128 *)(v1 - 152);
  v4 = *(_OWORD *)(v1 - 136);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v4;
  return result;
}

uint64_t sub_1000CCB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(a2 - 256), 0);
}

void sub_1000CCB64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_100095B78(v3, *(_QWORD *)(v4 - 304), a3);
}

uint64_t sub_1000CCB78()
{
  return type metadata accessor for LocationNetworkActivityFlow(0);
}

uint64_t sub_1000CCB80(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 152), 1, 1, a1);
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000CCBA8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v0, v1 - 168, 33, 0);
}

uint64_t sub_1000CCBBC()
{
  return type metadata accessor for WeatherCondition(0);
}

uint64_t sub_1000CCBC4()
{
  return type metadata accessor for MonitorAppLaunchStateViewModifier(0);
}

uint64_t sub_1000CCBCC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000CCBD8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000CCBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v1 + 24);
  result = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 32) = result;
  return result;
}

uint64_t sub_1000CCC08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v3, a2, v2, v3);
}

void sub_1000CCC20(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C77C(a1, v3, a3);
}

uint64_t sub_1000CCC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a1);
}

__n128 sub_1000CCC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __n128 a11)
{
  _OWORD *v11;
  __n128 result;

  *v11 = a9;
  v11[1] = a10;
  result = a11;
  v11[2] = a11;
  return result;
}

uint64_t sub_1000CCC4C()
{
  return type metadata accessor for DayPickerViewModel.CalendarDayViewModel(0);
}

uint64_t sub_1000CCC54()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CCC64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v2, v3, v1, v4, a1);
}

uint64_t sub_1000CCC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000CCC8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000CCC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v6, 0, 0, v8, v7, a6, 85, 2);
}

void sub_1000CCCBC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, SEL *a5)
{
  sub_1003E1A14(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0x6574000000000000, 0xE800000000000000, a5);
}

double sub_1000CCCC8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(double *)(v1 + a1);
}

uint64_t sub_1000CCCD8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000CCCE4()
{
  return 0x206D6F7266204025;
}

uint64_t sub_1000CCD14()
{
  return 0;
}

uint64_t sub_1000CCD2C()
{
  uint64_t v0;

  return sub_100147AE4(v0);
}

uint64_t sub_1000CCD34()
{
  return ProxyContainer.callback.getter();
}

uint64_t sub_1000CCD40()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, *(_QWORD *)(v1 - 256));
}

uint64_t sub_1000CCD54(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000CCD68()
{
  uint64_t v0;

  return static Font.system(_:weight:)(v0);
}

uint64_t sub_1000CCD70@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for NotificationsOptInState(0);
}

_QWORD *sub_1000CCDA4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000CCDB8()
{
  _QWORD *v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v0);
}

uint64_t sub_1000CCDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t sub_1000CCDD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + a1));
}

uint64_t sub_1000CCDDC()
{
  return 0;
}

uint64_t sub_1000CCDFC()
{
  return type metadata accessor for DayWeather(0);
}

uint64_t sub_1000CCE04()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

uint64_t sub_1000CCE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSBundle v8;
  Swift::String v9;

  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v8, v9, *(Swift::String *)&a8)._countAndFlagsBits;
}

id sub_1000CCE28(id a1, SEL a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return objc_msgSend(a1, a2, v4, a4, 64);
}

unint64_t sub_1000CCE34()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1004D97D4();
}

Swift::Int sub_1000CCE40()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CCE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

double sub_1000CCE58()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000CCE6C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 128) + 8))(*(_QWORD *)(v1 - 96), v0);
}

uint64_t sub_1000CCE80()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

double sub_1000CCE8C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184)).n128_u64[0];
  return result;
}

double sub_1000CCE94()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176)).n128_u64[0];
  return result;
}

uint64_t sub_1000CCE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *(int *)(v0 + 96);
  sub_1000D31D0(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48));
  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 100) + 8));
}

uint64_t sub_1000CCED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v4 - 72, v1, v3, a1);
}

uint64_t sub_1000CCEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  return sub_1000DEBAC(0, 3, *(_QWORD *)(v20 - 152), *(_QWORD *)(v20 - 160), *(_QWORD *)(v20 - 168), 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1000CCF40()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000CCF4C()
{
  return type metadata accessor for SunriseSunsetDetailViewModel(0);
}

uint64_t sub_1000CCF68()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000CCF74()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

uint64_t sub_1000CCF80(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 14);
}

void sub_1000CCF88()
{
  sub_1000F5568();
}

uint64_t sub_1000CCFA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 176))(v2 + a1, v1, v3);
}

uint64_t sub_1000CCFB4(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000CCFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

uint64_t sub_1000CCFE4@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 72, *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000CCFFC()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000CD008()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_1000CD04C()
{
  return 0x6F4C686372616573;
}

uint64_t sub_1000CD070()
{
  return WeatherDataModel.currentWeather.getter();
}

__n128 sub_1000CD07C()
{
  uint64_t v0;
  char v1;
  __n128 result;
  __int128 v3;

  v1 = *(_BYTE *)(v0 - 224);
  result = *(__n128 *)(v0 - 256);
  v3 = *(_OWORD *)(v0 - 240);
  *(__n128 *)(v0 - 304) = result;
  *(_OWORD *)(v0 - 288) = v3;
  *(_BYTE *)(v0 - 272) = v1;
  *(_BYTE *)(v0 - 271) = 0;
  return result;
}

double sub_1000CD0A8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 20) + 8)).n128_u64[0];
  return result;
}

id sub_1000CD0B8()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000CD0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 - 144))(a1, a2, 1, v2);
}

uint64_t sub_1000CD0E0()
{
  return SettingReader.read<A>(_:)();
}

uint64_t sub_1000CD0E8()
{
  return type metadata accessor for ListLocationViewModel(0);
}

uint64_t sub_1000CD0F8(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 280), 1, 1, a1);
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000CD124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(_QWORD *)(v3 - 384) = v4;
  return v4(v0, v2);
}

uint64_t sub_1000CD13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t)@<X8>, __n128 a10@<Q0>)
{
  return a9(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_u64[0], a10.n128_u64[1]);
}

uint64_t sub_1000CD14C()
{
  return type metadata accessor for OverviewTableRowViewModel(0);
}

uint64_t sub_1000CD154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a9(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1000CD160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  type metadata accessor for TraitKey(0);
}

uint64_t sub_1000CD170(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100040308(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000);
}

uint64_t sub_1000CD178()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

void sub_1000CD184(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10000F1C8(a1, v1);
}

double sub_1000CD18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return sub_1000D4FF4(a1, v10, v11, v12, v13, v14, v15, v16, a9, a10);
}

uint64_t sub_1000CD1AC(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 10);
}

uint64_t sub_1000CD1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000CD1CC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000CD1DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v1, v3);
}

id sub_1000CD1EC(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 64) + 40);
}

double sub_1000CD204()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 - 128) = v0;
  result = 0.0;
  *(_OWORD *)(v1 - 120) = 0u;
  *(_OWORD *)(v1 - 104) = 0u;
  *(_QWORD *)(v1 - 88) = 0;
  return result;
}

uint64_t sub_1000CD220(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DB418(a1, a2);
  return *(_QWORD *)(v2 - 120);
}

uint64_t sub_1000CD23C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 104))();
}

uint64_t sub_1000CD244(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v4, a2, v3);
}

uint64_t sub_1000CD250()
{
  return type metadata accessor for HourlyForecastComponentView(0);
}

uint64_t sub_1000CD258(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for ModifiedContent(255, v1, a1);
}

uint64_t sub_1000CD268(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = result;
  *(_BYTE *)(v1 - 65) = 1;
  return result;
}

uint64_t sub_1000CD27C()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

uint64_t sub_1000CD290()
{
  uint64_t v0;

  return AnyHashable.init<A>(_:)(v0 - 176);
}

uint64_t sub_1000CD2B4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000CD2C4()
{
  return type metadata accessor for LocationViewerActiveLocationState(0);
}

uint64_t sub_1000CD2E0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000CD2EC()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000CD2F8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 104) + 8))(*(_QWORD *)(v1 - 120), v0);
}

uint64_t sub_1000CD30C()
{
  uint64_t v0;
  uint64_t v1;

  return static WeatherFormatStyle<>.weather(_:locale:)(v0, v1);
}

void sub_1000CD31C()
{
  sub_10066D5BC();
}

double sub_1000CD350(uint64_t a1)
{
  uint64_t v1;
  double result;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 264), 1, 1, a1);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 272), 1, 1, *(_QWORD *)(v1 - 232));
  *(_QWORD *)&result = swift_storeEnumTagMultiPayload(*(_QWORD *)(v1 - 280), *(_QWORD *)(v1 - 208), 6).n128_u64[0];
  return result;
}

uint64_t sub_1000CD3AC()
{
  return type metadata accessor for MainViewModel(0);
}

double sub_1000CD3C8()
{
  return 0.0;
}

uint64_t sub_1000CD3E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v2, v1, a1);
}

uint64_t sub_1000CD3F8(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(a1 + 28)));
}

uint64_t sub_1000CD404(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72);
}

double sub_1000CD420()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 36))).n128_u64[0];
  return result;
}

uint64_t sub_1000CD430()
{
  return 0x657369726E6F6F4DLL;
}

double sub_1000CD450()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

id sub_1000CD460(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000CD468()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 312);
}

void sub_1000CD498(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  sub_10007802C(v2, a1 + v3, v1);
}

uint64_t sub_1000CD4A8()
{
  uint64_t v0;

  return swift_release(v0);
}

unint64_t sub_1000CD4C0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000CD4D8()
{
  return type metadata accessor for OverviewTableValueString(0);
}

uint64_t sub_1000CD4E0()
{
  uint64_t v0;

  return v0;
}

void sub_1000CD4F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100960D6C(a1, a2, a3);
}

unint64_t sub_1000CD504()
{
  return sub_10096DED8();
}

uint64_t sub_1000CD50C()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
  return type metadata accessor for IntentDialog(0);
}

uint64_t sub_1000CD530()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 96));
}

void sub_1000CD53C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_100078058(a1, *(_QWORD *)(a2 - 256), v2);
}

double sub_1000CD54C()
{
  return 0.0;
}

uint64_t sub_1000CD568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 104) + a1;
}

uint64_t sub_1000CD574()
{
  return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
}

uint64_t sub_1000CD584(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

void sub_1000CD58C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10003773C(a1, a2, v2);
}

_QWORD *sub_1000CD594()
{
  _QWORD *v0;

  return sub_1000DB418(v0, v0[3]);
}

uint64_t sub_1000CD5B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000CD5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 440))(a1, a2, v2);
}

uint64_t sub_1000CD5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000CD5E0()
{
  return type metadata accessor for LocationViewModel(0);
}

uint64_t sub_1000CD5E8(uint64_t a1)
{
  uint64_t v1;

  return sub_100102BB4(a1, v1);
}

uint64_t sub_1000CD5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 120));
}

uint64_t sub_1000CD608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v5, v4, a4);
}

uint64_t sub_1000CD630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return v1 + *(int *)(v2 + 20) + a1;
}

uint64_t sub_1000CD640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 33, 0);
}

uint64_t sub_1000CD650()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t sub_1000CD670()
{
  return type metadata accessor for TemperatureAveragesHeroChartInput(0);
}

uint64_t sub_1000CD678()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 336))(v0, *(_QWORD *)(v1 - 352));
}

uint64_t sub_1000CD690()
{
  uint64_t v0;

  return UIListContentConfiguration.TextProperties.color.setter(v0);
}

uint64_t sub_1000CD6A0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);

  return sub_1000A5EBC(a1, a2, v2);
}

void sub_1000CD6AC()
{
  sub_1005FF16C();
}

uint64_t sub_1000CD6B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Double.write<A>(to:)(a1, v1, v2);
}

uint64_t sub_1000CD6C4()
{
  return 0x6C6163697475614ELL;
}

uint64_t sub_1000CD6E8()
{
  return type metadata accessor for UnfairLock(0);
}

void sub_1000CD6F0(uint64_t a1)
{
  sub_10030C45C(a1);
}

uint64_t sub_1000CD700()
{
  return type metadata accessor for Text.Measurements(0);
}

uint64_t sub_1000CD710()
{
  uint64_t v0;
  uint64_t v1;

  return AttributedString.init(stringLiteral:)(v1, v0);
}

void sub_1000CD71C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 280), a2);
}

uint64_t sub_1000CD728@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

uint64_t sub_1000CD748(uint64_t a1)
{
  uint64_t v1;

  return static WeatherFormatStyle<>.weather(_:locale:)(a1, v1);
}

void sub_1000CD750()
{
  sub_1005FED1C();
}

uint64_t sub_1000CD75C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000CD770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = a1;
  return type metadata accessor for AutomationInfo(0);
}

double sub_1000CD77C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000CD788(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, *(_QWORD *)(v2 - 320));
}

uint64_t sub_1000CD7A8()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1000CD7B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CD7C4()
{
  return 1702519144;
}

uint64_t sub_1000CD7D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 160))(a1, v1);
}

double sub_1000CD7F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_1000CD7FC()
{
  return type metadata accessor for LocationPreviewViewContentModel(0);
}

uint64_t sub_1000CD804()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 424, v1);
}

__n128 sub_1000CD818(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000CD82C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10005EAA0(v0, v1);
}

uint64_t sub_1000CD838()
{
  uint64_t v0;

  return v0;
}

void sub_1000CD848(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 352) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000CD868()
{
  return _s10PolarModelVMa(0);
}

uint64_t sub_1000CD870()
{
  return type metadata accessor for MapOverlay(0);
}

uint64_t sub_1000CD878(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000CD88C()
{
  return type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
}

uint64_t sub_1000CD894(uint64_t a1)
{
  uint64_t v1;

  return sub_1001009A4(a1, v1);
}

uint64_t sub_1000CD89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)(a1, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t sub_1000CD8A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 208))();
}

id sub_1000CD8B0(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 1960), a1);
}

uint64_t sub_1000CD8E0()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

uint64_t sub_1000CD8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(a1 + v1 + 16));
}

uint64_t sub_1000CD90C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_100051B90(a1, v3, a3);
}

uint64_t sub_1000CD914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

double sub_1000CD924()
{
  uint64_t v0;

  return sub_100683F38(v0 + 976);
}

uint64_t sub_1000CD930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for DisplayMetrics(0);
}

uint64_t sub_1000CD94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000CD960(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000CD978(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

id sub_1000CD984()
{
  return sub_1006E4E70();
}

uint64_t sub_1000CD98C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000CD99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
}

double sub_1000CD9AC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000CD9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwet_0(a1, a2, v2);
}

uint64_t sub_1000CD9D0()
{
  uint64_t v0;

  return v0;
}

void sub_1000CD9F8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  sub_1003804CC(v1, v2, a1);
}

uint64_t sub_1000CDA08()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, v0);
}

uint64_t sub_1000CDA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getTupleTypeMetadata2(a1, a2, a3, a4, 0);
}

uint64_t sub_1000CDA24()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_1000CDA34()
{
  uint64_t (*v0)(void);

  return v0();
}

double sub_1000CDA3C()
{
  double v0;

  return v0;
}

void sub_1000CDA50(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  sub_10009B4AC(*(_QWORD **)(v2 + a1), *(_QWORD **)(v1 + a1));
}

uint64_t sub_1000CDA5C()
{
  return type metadata accessor for WeatherMapDisplayMode(0);
}

uint64_t sub_1000CDA64()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CDA7C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void *sub_1000CDA88(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_1000CDAB0()
{
  return sub_100108BB0(192);
}

BOOL sub_1000CDAB8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000CDAC8()
{
  void *v0;

}

uint64_t sub_1000CDAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return State.init(wrappedValue:)(v2 - 160, a2);
}

void sub_1000CDAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_10002D56C(a1, a2, a3, a4, a5, a6, v6);
}

double sub_1000CDAF0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 48)));
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1000CDB14()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CDB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:_:_:)(a1, a2, a3, a4, 42, 2);
}

uint64_t sub_1000CDB50()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v0, v3);
}

double sub_1000CDB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 16 * v10 + 8)).n128_u64[0];
  return result;
}

void sub_1000CDB8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_10019CC48(a1, a2, a3, a4, a5, a6, a7, a8 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a9);
}

unint64_t sub_1000CDBB0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
  *(_BYTE *)(v1 - 81) = 0;
  return sub_1001F6050();
}

uint64_t sub_1000CDBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 1000));
}

uint64_t sub_1000CDBD0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CDBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _s7Weather24LocationCompositionStateOwst_0(v2, a2, 1, v3);
}

uint64_t sub_1000CDBFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ConditionDetailInput(0);
  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v1);
}

void sub_1000CDC2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1000CDC34()
{
  return type metadata accessor for AirQualityDetailInnerView(0);
}

uint64_t sub_1000CDC3C(uint64_t a1)
{
  uint64_t v1;

  return static Location.== infix(_:_:)(a1, v1);
}

unint64_t sub_1000CDC44()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 6;
  return sub_1003B8750();
}

uint64_t sub_1000CDC50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 160))(a1, v1);
}

uint64_t sub_1000CDC5C()
{
  return type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy(0);
}

double sub_1000CDC68()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8)).n128_u64[0];
  return result;
}

__n128 sub_1000CDC70()
{
  uint64_t v0;
  uint64_t v1;
  __n128 result;

  *(_QWORD *)(v1 - 120) = *(_QWORD *)v0;
  result = *(__n128 *)(v0 + 8);
  *(__n128 *)(v1 - 112) = result;
  return result;
}

uint64_t sub_1000CDC84(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 5);
}

void sub_1000CDC94(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10026563C(v2, a2, a1 & 1);
}

uint64_t sub_1000CDCBC()
{
  return SunEvents.sunset.getter();
}

uint64_t sub_1000CDCC4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of Query.where(_:orderBy:limit:)(a1, a2, 0, 1);
}

uint64_t sub_1000CDCD4()
{
  return sub_100098710(22);
}

uint64_t sub_1000CDCDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for MeasuredLocationViewerView(0) - 8);
  return swift_release(*(_QWORD *)(v0
                                 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                 + 8));
}

uint64_t sub_1000CDD10@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t sub_1000CDD24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CDD38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v1 + a1, v2);
}

uint64_t sub_1000CDD44(uint64_t a1, uint64_t a2)
{
  return static Optional<A>.read(from:)(a1, a2);
}

id sub_1000CDD4C(void *a1)
{
  SEL *v1;

  return objc_msgSend(a1, *v1);
}

void sub_1000CDD54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_10003773C(a1, v3, a3);
}

uint64_t sub_1000CDD70@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

__n128 sub_1000CDD7C()
{
  char v0;
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 - 224);
  result = *(__n128 *)(v1 - 256);
  v4 = *(_OWORD *)(v1 - 240);
  *(__n128 *)(v1 - 304) = result;
  *(_OWORD *)(v1 - 288) = v4;
  *(_BYTE *)(v1 - 272) = v2;
  *(_BYTE *)(v1 - 271) = v0;
  return result;
}

uint64_t sub_1000CDDC8()
{
  return type metadata accessor for LocationModel(0);
}

void sub_1000CDDD4()
{
  sub_100112494();
}

void sub_1000CDDE4(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_100021AA4(*(_QWORD *)(a2 - 256), a1);
}

uint64_t sub_1000CDDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000CDDF4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_1000CDDFC(uint64_t a1)
{
  sub_1005A0BC0(a1);
}

uint64_t sub_1000CDE04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000CDE14()
{
  return type metadata accessor for WeatherMapOverlayKind(0);
}

uint64_t sub_1000CDE20()
{
  return EnvironmentValues.accentColor.getter();
}

uint64_t sub_1000CDE2C(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(a1 + 28)));
}

uint64_t sub_1000CDE38()
{
  uint64_t v0;
  uint64_t v1;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + v1));
}

uint64_t sub_1000CDE44@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(a2 - 256), 1, 1, a1);
  return 0;
}

uint64_t sub_1000CDE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000CDE74()
{
  return type metadata accessor for ListViewModel(0);
}

uint64_t sub_1000CDE7C()
{
  return type metadata accessor for ConditionDetailChartHeaderInput(0);
}

uint64_t sub_1000CDE8C()
{
  uint64_t v0;

  return swift_endAccess(v0 - 112);
}

void sub_1000CDEAC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_1000CDEC0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 240) = result;
  return result;
}

_QWORD *sub_1000CDECC(_QWORD *a1, uint64_t a2)
{
  return sub_1000DB418(a1, a2);
}

uint64_t sub_1000CDEE0()
{
  return sub_10006BE54();
}

uint64_t sub_1000CDEE8()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)(v0 - 400));
}

double sub_1000CDEF4()
{
  return 0.0;
}

uint64_t sub_1000CDF04()
{
  return type metadata accessor for AutomationInfoViewModifier(0);
}

void sub_1000CDF18(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
}

uint64_t sub_1000CDF44()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CDF4C()
{
  uint64_t v0;
  uint64_t v1;

  return static RainExpectation.== infix(_:_:)(v1, v0);
}

uint64_t sub_1000CDF58()
{
  return DayWeather.date.getter();
}

unint64_t sub_1000CDF60()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 7;
  return sub_1004FBBA0();
}

void sub_1000CDF6C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000AB54(a1, a2, v2);
}

void sub_1000CDF74(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C75C(a1, v2, v1);
}

uint64_t sub_1000CDF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

void sub_1000CDF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

}

uint64_t sub_1000CDF94(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000CDFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return dispatch thunk of Hashable.hash(into:)(a1, v3, a3);
}

uint64_t sub_1000CDFD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CDFF8()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1000CE008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 144));
}

uint64_t sub_1000CE02C()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

uint64_t sub_1000CE034(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 296) = result;
  *(_QWORD *)(v2 - 368) = a2;
  return result;
}

double sub_1000CE04C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void sub_1000CE058(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000A3908(v4, v3, a3);
}

uint64_t sub_1000CE090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 688) = a2;
  return v2;
}

uint64_t sub_1000CE0AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 232);
}

uint64_t sub_1000CE0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return WeatherMetadata.init(date:expirationDate:attribution:)(v2, v1, v0);
}

uint64_t sub_1000CE0D0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void sub_1000CE0E4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  sub_1008EC420(a1, a2, *(_QWORD *)(v8 - 168), v6, v7, a6);
}

uint64_t sub_1000CE0F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000CE104()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000CE110(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **sub_1000CE144(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000CE14C(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

_BYTE **sub_1000CE14C(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_1000CE15C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1000CE164(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void sub_1000CE164(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v8 = v7;
  v9 = sub_1000CE1C8(v6, v7, a3);
  v10 = *a1 + 8;
  v11 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
  swift_bridgeObjectRelease(v8);
  *a1 = v10;
  sub_100099960();
}

uint64_t sub_1000CE1C8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_1000CE318(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000CE46C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000CE46C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v12);
  return v7;
}

uint64_t sub_1000CE298(_QWORD *a1)
{
  swift_release(a1[2]);
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1 + 3);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  return sub_1000BF398(a1[10], a1[11]);
}

uint64_t _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000CE2FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return destroy for TabViewTransition(a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_1000CE318(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100323ED0((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1000E6088(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000CE46C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000CE4A8()
{
  uint64_t v0;

  return sub_1000CE4B0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000CE4B0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000CE4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000CE4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return State.init(wrappedValue:)(v2 - 360, a2);
}

uint64_t sub_1000CE4EC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v3);
}

uint64_t sub_1000CE4FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 136) = a1;
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v1, v3 - 82, v2, v1);
}

double sub_1000CE524(uint64_t a1)
{
  return sub_1000FFCC8(a1);
}

uint64_t sub_1000CE52C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for DetailCondition(0);
}

void sub_1000CE53C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

double sub_1000CE558()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_1000CE560()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 - 512));
}

void sub_1000CE570(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

void sub_1000CE584(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1003211F0(a1, a2, v2);
}

uint64_t sub_1000CE58C()
{
  return type metadata accessor for DetailComponentContainerViewModel(0);
}

double sub_1000CE59C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88)).n128_u64[0];
  return result;
}

double sub_1000CE5A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  _s7Weather24LocationCompositionStateOwet_0(a1, 1, *(_QWORD *)(v2 - 240));
  *(_QWORD *)&result = swift_bridgeObjectRetain(v1).n128_u64[0];
  return result;
}

void sub_1000CE5C4()
{
  sub_1004E21DC();
}

void sub_1000CE5D0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000CE5E4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 400);
}

uint64_t sub_1000CE5F8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000CE604(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 3);
}

uint64_t sub_1000CE60C()
{
  return type metadata accessor for DynamicTypeSize(0);
}

uint64_t sub_1000CE620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 120), a1);
}

uint64_t sub_1000CE644(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000CE64C()
{
  return type metadata accessor for SearchViewState(0);
}

uint64_t sub_1000CE654()
{
  return static NSNumberFormatter.percent.getter();
}

uint64_t sub_1000CE65C()
{
  return type metadata accessor for WeatherData.CachingState(0);
}

uint64_t sub_1000CE664()
{
  return type metadata accessor for PreprocessedWeatherData(0);
}

uint64_t sub_1000CE680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000CE690(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for WeatherDataUpdateRequestLog.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t type metadata accessor for WeatherDataUpdateRequestLog.Event(uint64_t a1)
{
  return sub_100098190(a1, qword_100BEA370, (uint64_t)&nominal type descriptor for WeatherDataUpdateRequestLog.Event);
}

_QWORD *sub_1000CE6E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_18;
    case 2u:
      v10 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_18;
    case 3u:
      v11 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = sub_1000BA294(&qword_100BEA2E8);
      *(_QWORD *)((char *)a1 + *(int *)(v12 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v12 + 48));
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_18;
    case 4u:
      v13 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v14 = sub_1000BA294(&qword_100BEA2E0);
      *(_QWORD *)((char *)a1 + *(int *)(v14 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v14 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 64));
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_18;
    case 5u:
      v28 = a2[1];
      if (v28 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        *a1 = *a2;
        a1[1] = v28;
        swift_bridgeObjectRetain(v28);
      }
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_18;
    case 6u:
      v15 = *a2;
      swift_errorRetain(v15);
      *a1 = v15;
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_18;
    case 7u:
      v16 = *a2;
      swift_errorRetain(v16);
      *a1 = v16;
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_18;
    case 0xAu:
      v17 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_18;
    case 0xCu:
      v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain(v29);
      v7 = a1;
      v8 = a3;
      v9 = 12;
      goto LABEL_18;
    case 0xEu:
      v30 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
      v7 = a1;
      v8 = a3;
      v9 = 14;
      goto LABEL_18;
    case 0xFu:
      v18 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
      v19 = *(int *)(sub_1000BA294(&qword_100BEA2D0) + 48);
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      swift_bridgeObjectRetain(v22);
      v7 = a1;
      v8 = a3;
      v9 = 15;
      goto LABEL_18;
    case 0x10u:
      v23 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
      v24 = *(int *)(sub_1000BA294(&qword_100BEA2D0) + 48);
      v25 = (_QWORD *)((char *)a1 + v24);
      v26 = (_QWORD *)((char *)a2 + v24);
      v27 = v26[1];
      *v25 = *v26;
      v25[1] = v27;
      swift_bridgeObjectRetain(v27);
      v7 = a1;
      v8 = a3;
      v9 = 16;
LABEL_18:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_1000CE9E8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
  return v1;
}

void sub_1000CEA14()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

uint64_t sub_1000CEA48(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  sub_100082C5C(*(_QWORD *)(a1 + a2[7]), *(unsigned __int8 *)(a1 + a2[7] + 8), *(_BYTE *)(a1 + a2[7] + 9));
  v8 = (_QWORD *)(a1 + a2[8]);
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + a2[9]);
  v12 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for UserInterfaceSizeClass(0);
    if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v13))
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[10]), *(_BYTE *)(a1 + a2[10] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[12]), *(_BYTE *)(a1 + a2[12] + 8));
  v14 = a1 + a2[13];
  sub_1000D31C4(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_BYTE *)(v14 + 32));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[14]), *(_BYTE *)(a1 + a2[14] + 8));
  swift_release(*(_QWORD *)(a1 + a2[15] + 8));
  swift_release(*(_QWORD *)(a1 + a2[16]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[17]));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[19]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[20]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[21]));
  v15 = a1 + a2[22];
  v16 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_release(*(_QWORD *)(a1 + a2[23]));
  v17 = a1 + a2[24];
  sub_1000D31D0(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40), *(_BYTE *)(v17 + 48));
  swift_release(*(_QWORD *)(a1 + a2[25] + 8));
  sub_1000BF398(*(_QWORD *)(a1 + a2[26]), *(_QWORD *)(a1 + a2[26] + 8));

  return swift_release(*(_QWORD *)(a1 + a2[28]));
}

uint64_t sub_1000CECE0(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 48));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 56));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 136));
  sub_1000B15F8(*(_QWORD *)(a1 + 144), *(_BYTE *)(a1 + 152));
  v4 = (_QWORD *)(a1 + a2[13]);
  v5 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[14]), *(_BYTE *)(a1 + a2[14] + 8));
  v8 = (_QWORD *)(a1 + a2[15]);
  v9 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = a1 + a2[16];
  sub_1000D31C4(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_BYTE *)(v11 + 32));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[17]), *(_BYTE *)(a1 + a2[17] + 8));
  v12 = a1 + a2[18];
  sub_1000D31D0(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_BYTE *)(v12 + 48));
  sub_1000BF398(*(_QWORD *)(a1 + a2[19]), *(_QWORD *)(a1 + a2[19] + 8));
  swift_release(*(_QWORD *)(a1 + a2[20]));
  v13 = a1 + a2[21];
  v14 = type metadata accessor for Text.Measurements(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t sub_1000CEE98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) == 0)
    return swift_release(result);
  return result;
}

void sub_1000CEEA8(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, double a10@<D0>, void (*a11)(uint64_t), unsigned __int8 a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  id v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String *v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  char *v82;
  char *v83;
  uint64_t v84;
  void (**v85)(uint64_t);
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, char *);
  void (*v109)(uint64_t, uint64_t);
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  void (*v122)(uint64_t);
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t);
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  Swift::String v153;

  v128 = a8;
  v126 = a7;
  v125 = a6;
  v147 = a5;
  v152 = a4;
  v149 = a2;
  v141 = a16;
  v139 = a17;
  v140 = a15;
  LODWORD(v130) = a14;
  v150 = a13;
  v123 = a12;
  v122 = a11;
  v148 = type metadata accessor for WeatherFormatPlaceholder(0);
  v134 = *(_QWORD *)(v148 - 8);
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v138 = v23;
  v137 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v124 = *(_QWORD *)(v137 - 8);
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_1000986FC();
  v136 = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_100079F7C();
  v28 = sub_1000987B4(v27);
  v29 = type metadata accessor for Date(v28);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_1000986FC();
  v118 = v31;
  sub_10009D2A4();
  __chkstk_darwin(v32);
  sub_1000860D0();
  v119 = v33;
  sub_10009D2A4();
  __chkstk_darwin(v34);
  sub_1000860D0();
  v120 = v35;
  sub_10009D2A4();
  __chkstk_darwin(v36);
  v38 = (char *)&v116 - v37;
  v39 = type metadata accessor for Calendar(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_1000986FC();
  v117 = v41;
  sub_10009D2A4();
  v43 = __chkstk_darwin(v42);
  v45 = (char *)&v116 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v116 - v46;
  v146 = v30;
  v48 = *(char **)(v30 + 16);
  sub_100098CF4(a9, (uint64_t)a1);
  v132 = type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v49 = *(int *)(v132 + 28);
  v145 = (void (*)(uint64_t, uint64_t))a9;
  v50 = a9 + v49;
  v51 = sub_100099928();
  v127 = *(_QWORD *)(v51 - 8);
  v52 = *(void (**)(uint64_t, uint64_t))(v127 + 16);
  v129 = v51;
  v52(v50, a3);
  v142 = a3;
  static Calendar.currentCalendar(with:)(a3);
  LOBYTE(a3) = Calendar.isDateInToday(_:)(a1);
  v53 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v121 = v45;
  v131 = v47;
  v151 = v39;
  v53(v45, v47, v39);
  v54 = (uint64_t)v38;
  v55 = (uint64_t)v38;
  v56 = v120;
  v143 = a1;
  sub_100098CF4(v55, (uint64_t)a1);
  sub_100098CF4(v56, v149);
  v135 = v29;
  v144 = v40;
  if ((a3 & 1) == 0)
  {
    v57 = v117;
    v58 = v121;
    v53(v117, v121, v151);
    v59 = v119;
    a1 = (int *)v54;
    sub_100098CF4(v119, v54);
    v60 = v118;
    sub_100098CF4(v118, v56);
    if ((a18 & 1) != 0)
    {
      v61 = v60;
      v62 = Calendar.isDate(_:inSameDayAs:)(v59, v60);
      v48 = v57;
      sub_10009554C(v61);
      sub_10009554C(v59);
      v63 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
      v64 = v151;
      v63((uint64_t)v57, v151);
      sub_10009554C(v56);
      sub_10009554C((uint64_t)a1);
      v63((uint64_t)v58, v64);
      if ((v62 & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      sub_10009554C(v60);
      sub_10009554C(v59);
      v70 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
      v71 = v151;
      v70((uint64_t)v57, v151);
      sub_10009554C(v56);
      sub_10009554C((uint64_t)a1);
      v70((uint64_t)v58, v71);
    }
    v72 = v142;
    Date.shortDayOfWeek(timeZone:isStandalone:)(v142, 1);
    sub_1000D0760();
    *v75 = v73;
    v75[1] = v74;
    v76 = Date.dayOfWeek(timeZone:context:)(v72, 2);
    v77 = (uint64_t *)&v48[a1[6]];
    *v77 = v76;
    v77[1] = v78;
    goto LABEL_8;
  }
  sub_10009554C(v56);
  sub_10009554C(v54);
  sub_1000DC758(*(uint64_t (**)(_QWORD, _QWORD))(v40 + 8));
LABEL_5:
  v65 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v153._countAndFlagsBits = 0xD000000000000044;
  v153._object = (void *)0x8000000100A0DF30;
  v66._object = (void *)0x8000000100A0DF10;
  v66._countAndFlagsBits = 0xD000000000000015;
  v67._countAndFlagsBits = 0x7961646F54;
  v67._object = (void *)0xE500000000000000;
  v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, (NSBundle)v65, v67, v153);

  sub_1000D0760();
  *v69 = v68;
  *(Swift::String *)&v48[a1[6]] = v68;
  swift_bridgeObjectRetain(v68._object);
LABEL_8:
  v79 = &v48[a1[8]];
  v80 = sub_1000BA294(&qword_100BC4E68);
  v132 = *(_QWORD *)(v80 - 8);
  v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 16);
  v81((uint64_t)v79, v152, v80);
  v82 = &v48[a1[9]];
  v121 = (char *)v80;
  v81((uint64_t)v82, v147, v80);
  v83 = &v48[a1[10]];
  v84 = v126;
  *(_QWORD *)v83 = v125;
  *((_QWORD *)v83 + 1) = v84;
  v85 = (void (**)(uint64_t))&v48[a1[11]];
  v86 = v122;
  *v85 = v128;
  v85[1] = v86;
  v48[a1[13]] = v123 & 1;
  *(double *)&v48[a1[12]] = a10;
  *(Swift::String *)&v48[a1[14]] = Double.formattedPercent(roundToNearestPercent:)(1);
  v87 = sub_1000CFAE0(v150, (uint64_t)&v48[a1[15]]);
  v48[a1[16]] = v130 & 1;
  v88 = v133;
  static WeatherFormatStyle<>.weather.getter(v87);
  v89 = v136;
  sub_1000F44E4();
  sub_1000988C4();
  v145 = v90;
  v91 = v137;
  v90(v88, v137);
  LODWORD(v130) = enum case for WeatherFormatPlaceholder.none(_:);
  v92 = v134;
  v128 = *(void (**)(uint64_t))(v134 + 104);
  v93 = v138;
  v128(v138);
  v126 = sub_1000BCF94();
  v94 = sub_1000B314C();
  sub_10000F1C8((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v125 = v95;
  v96 = Measurement.formatted<A>(_:placeholder:unitManager:)(v89, v93, v94, &protocol witness table for UnitManager, v80, v91, v95);
  v98 = v97;
  swift_release(v94);
  v134 = *(_QWORD *)(v92 + 8);
  v99 = v148;
  ((void (*)(uint64_t, uint64_t))v134)(v93, v148);
  v100 = v145;
  v101 = ((uint64_t (*)(uint64_t, uint64_t))v145)(v89, v91);
  v102 = (uint64_t *)&v48[a1[17]];
  *v102 = v96;
  v102[1] = v98;
  static WeatherFormatStyle<>.weather.getter(v101);
  sub_1000F44E4();
  v100(v88, v91);
  v103 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v128)(v93, v130, v99);
  v104 = static UnitManager.standard.getter(v103);
  v105 = v121;
  v106 = v147;
  v133 = Measurement.formatted<A>(_:placeholder:unitManager:)(v89, v93, v104, &protocol witness table for UnitManager, v121, v91, v125);
  v130 = v107;
  swift_release(v104);
  v108 = *(void (**)(uint64_t, char *))(v132 + 8);
  v108(v106, v105);
  v108(v152, v105);
  sub_1000988C4();
  v109(v142, v129);
  v110 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
  v111 = v135;
  v110(v149, v135);
  v110((uint64_t)v143, v111);
  ((void (*)(uint64_t, uint64_t))v134)(v93, v99);
  v145(v89, v91);
  sub_1000DC758(*(uint64_t (**)(_QWORD, _QWORD))(v144 + 8));
  v112 = (uint64_t *)&v48[a1[18]];
  v113 = v130;
  *v112 = v133;
  v112[1] = v113;
  *(_QWORD *)&v48[a1[20]] = v139;
  sub_100021A14(v150, &qword_100BCB338);
  v114 = &v48[a1[19]];
  v115 = v141;
  *(_QWORD *)v114 = v140;
  *((_QWORD *)v114 + 1) = v115;
}

uint64_t sub_1000CF708(uint64_t a1, uint64_t a2)
{
  return String.LocalizationValue.init(stringLiteral:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

_WORD *sub_1000CF710(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000CF71C()
{
  uint64_t v0;

  return v0;
}

double sub_1000CF72C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  double *v5;
  double result;

  v3 = *(int *)(v2 + 40);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (double *)(v1 + v3);
  result = *v5;
  *v4 = *(_QWORD *)v5;
  return result;
}

_QWORD *sub_1000CF744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *(*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  return a7((uint64_t *)va, v9, a2, v10);
}

uint64_t sub_1000CF75C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000CF764(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000CF770()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000CF77C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 1224);
  v4 = (uint64_t)v3 + *(int *)(a1 + 48);
  *v3 = 6;
  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, v2);
  return *(_QWORD *)(v1 + 1280);
}

uint64_t sub_1000CF7C4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 - 152))(v0);
}

uint64_t sub_1000CF7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v5, v6, a3, a4, a5);
}

void sub_1000CF804(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100037768(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000CF814()
{
  return type metadata accessor for ConditionDetailViewState(0);
}

unint64_t sub_1000CF81C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 12;
  return sub_1003B85E8();
}

NSIndexPath sub_1000CF83C()
{
  return IndexPath._bridgeToObjectiveC()();
}

uint64_t sub_1000CF844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(v0, v1);
}

uint64_t sub_1000CF854()
{
  return type metadata accessor for LocationDetailEntity(0);
}

void sub_1000CF864(uint64_t a1)
{
  sub_1004843AC(a1);
}

uint64_t sub_1000CF86C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 272))();
}

uint64_t sub_1000CF87C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000CF888()
{
  return variable initialization expression of SessionEventsAndDataCoordinator.loadedViaReferral();
}

double sub_1000CF894()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000CF8A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CF8B0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000CF8BC()
{
  return type metadata accessor for ChartDarkeningScrim(0);
}

uint64_t sub_1000CF8C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 368);
}

unint64_t sub_1000CF8D8()
{
  return 0xD000000000000015;
}

uint64_t sub_1000CF8F8()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_1000CF904()
{
  uint64_t v0;

  return Date.formattedTime(timeZone:)(v0);
}

unint64_t sub_1000CF934()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 2;
  return sub_10062DFA4();
}

uint64_t sub_1000CF940()
{
  return type metadata accessor for UnitConfiguration.Precipitation(0);
}

uint64_t sub_1000CF948()
{
  return type metadata accessor for LocationWeatherDataState(0);
}

uint64_t sub_1000CF964(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 0);
}

uint64_t sub_1000CF970()
{
  return SavedLocation.identifier.getter();
}

uint64_t sub_1000CF980()
{
  return 0x7469706963657270;
}

uint64_t sub_1000CF9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return String.write(to:)(v3, a2, a3);
}

uint64_t sub_1000CF9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000CF9BC()
{
  uint64_t v0;

  return swift_continuation_init(v0, 1);
}

uint64_t sub_1000CF9C8()
{
  return 0;
}

double sub_1000CF9E0()
{
  uint64_t v0;
  double result;

  sub_1000D31B4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1000CF9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_1000CFA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

uint64_t sub_1000CFA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_1000CFA28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_1000CFA3C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000CFA6C()
{
  uint64_t v0;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 256), 1, 1, *(_QWORD *)(v0 - 240));
}

uint64_t sub_1000CFA94(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 576));
}

uint64_t sub_1000CFACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v1);
}

uint64_t sub_1000CFAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BCB338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_1000CFB3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1000CFB74()
{
  uint64_t v0;

  return v0;
}

void sub_1000CFB88()
{
  uint64_t v0;
  uint64_t *v1;

  sub_1000FF448(v0, v1);
}

void sub_1000CFB94(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_100080C0C(v2 + a1, v1, v3);
}

uint64_t sub_1000CFBA4(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of UnitManagerType.precipitationRainfall.getter(a1, v1);
}

uint64_t sub_1000CFBAC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 1344), *(_QWORD *)(v2 + 1360));
}

uint64_t sub_1000CFBB8()
{
  return type metadata accessor for PressureComponent(0);
}

void sub_1000CFBD0()
{
  sub_1005FEE78();
}

uint64_t sub_1000CFBE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_1000CFBF4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  return sub_1000CE1C8(v1, v2, (uint64_t *)(v0 + 344));
}

uint64_t sub_1000CFC04()
{
  uint64_t v0;

  return sub_100284B28(v0);
}

uint64_t sub_1000CFC0C(uint64_t a1)
{
  return UITableViewCell.contentConfiguration.setter(a1);
}

NSDictionary sub_1000CFC14()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000CFC1C()
{
  return type metadata accessor for MoonDetailViewState(0);
}

uint64_t sub_1000CFC24()
{
  return 0x206C69766943;
}

uint64_t sub_1000CFC40()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 424));
}

_QWORD *sub_1000CFC4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Published.subscript.getter(a1, v2, v1, v3);
}

uint64_t sub_1000CFC5C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

void sub_1000CFC7C()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_100095B78(v1, v2, v0);
}

uint64_t sub_1000CFCA0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

_QWORD *sub_1000CFCB0@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100019C08(a1, a2, a3, a4);
}

uint64_t sub_1000CFCBC()
{
  uint64_t v0;

  return static Tips.RuleBuilder.buildPartialBlock(first:)(v0);
}

uint64_t sub_1000CFCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 104))(a1, a2, v2);
}

uint64_t sub_1000CFCD0()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 20);
}

uint64_t sub_1000CFCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

void sub_1000CFCF0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000CFD10(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, v3, a3);
}

uint64_t sub_1000CFD18()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000CFD24()
{
  uint64_t v0;

  return swift_beginAccess(*(_QWORD *)(v0 - 600), v0 - 192, 33, 0);
}

uint64_t sub_1000CFD4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

unint64_t sub_1000CFD5C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 1;
  return sub_1004B1ED4();
}

uint64_t sub_1000CFD68()
{
  double v0;

  return sub_1004DB80C(v0);
}

uint64_t sub_1000CFD80()
{
  return 0x6E696E746867696CLL;
}

uint64_t sub_1000CFD94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return swift_beginAccess(v1 + a1, v2 - 88, 0, 0);
}

uint64_t sub_1000CFDB8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 256);
}

uint64_t sub_1000CFDC8()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 68)));
  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 76)));
}

uint64_t sub_1000CFDE8()
{
  uint64_t v0;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 288), 1, 1, *(_QWORD *)(v0 - 216));
  return type metadata accessor for SearchViewState(0);
}

uint64_t sub_1000CFE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_1000CFE2C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000CFE40(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_100021A68((uint64_t)va, a2);
}

void sub_1000CFE48(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000979AC(v2, a2);
}

uint64_t sub_1000CFE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static WeatherFormatStyle<>.weather(_:usage:locale:)(v0, v1, v2);
}

void sub_1000CFE74(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

uint64_t sub_1000CFE7C()
{
  return ((uint64_t (*)(void))dispatch thunk of LocationEntityManagerType.savedLocations.getter)();
}

uint64_t sub_1000CFE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  return a11(v12 + *(int *)(v13 + 52), v11);
}

double sub_1000CFEC8()
{
  void *v0;
  double result;

  return result;
}

uint64_t sub_1000CFED0()
{
  return type metadata accessor for LocationViewModel(0);
}

void sub_1000CFED8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, *(_QWORD *)(v2 - 296), v1);
}

uint64_t sub_1000CFEEC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000CFEFC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 256));
}

uint64_t sub_1000CFF14(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000CFF1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 + a2) = result & 1;
  return result;
}

void sub_1000CFF28()
{
  Hasher._combine(_:)(1u);
}

uint64_t sub_1000CFF30()
{
  return type metadata accessor for GridGeometryComputerModifier(0);
}

void sub_1000CFF38()
{
  sub_1000BFEE4();
}

uint64_t sub_1000CFF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000CFF54()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_1000CFF60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10082AEB8(v2, a2);
}

void sub_1000CFF68(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000979AC(a1, v1);
}

uint64_t sub_1000CFF70()
{
  return Date.init()();
}

uint64_t sub_1000CFF78()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000CFF84()
{
  return type metadata accessor for ScrubberDateSelection(0);
}

void sub_1000CFF94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(v2 - 112, a2);
}

unint64_t sub_1000CFF9C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 2;
  return sub_100925044();
}

uint64_t sub_1000CFFA8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000CFFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return static RegexComponentBuilder.buildExpression<A>(_:)(a1, v2, v1);
}

uint64_t sub_1000CFFC0()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_1000CFFF0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000CFFF8@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v1 - 256), *(_QWORD *)(v2 - 416));
}

_QWORD *sub_1000D0008()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, *(_QWORD *)(v1 + 176));
}

uint64_t sub_1000D0014()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v0;
  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 96) = v3;
  return type metadata accessor for LocationViewComponent(0);
}

void sub_1000D0034(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100037794(*(_QWORD *)(v3 + 1376), *(_QWORD *)(v3 + 1216), a3);
}

uint64_t sub_1000D0040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return os_log(_:dso:log:type:_:)(a1, a2, 2, a4, v4);
}

uint64_t sub_1000D0058()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

_QWORD *sub_1000D0068()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000D0074()
{
  return 0x7463656C65736544;
}

uint64_t sub_1000D0088()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D0094(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1000D00A4()
{
  return sub_1001B8C54();
}

void sub_1000D00B0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_1000D00B8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return AnyHashable.init<A>(_:)(va);
}

uint64_t sub_1000D00C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000D00CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000D00DC(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = *((_BYTE *)v1 + 9);
  v5 = *((_BYTE *)v1 + 10);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  *(_BYTE *)(a1 + 10) = v5;
}

uint64_t sub_1000D0100()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D010C()
{
  return type metadata accessor for AttributedString(0);
}

uint64_t sub_1000D0118()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(v0);
}

uint64_t sub_1000D0124@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return static Date.== infix(_:_:)(v1 + a1, *(_QWORD *)(v2 - 192) + a1);
}

uint64_t sub_1000D0148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v1;
  return static String.localizedStringWithFormat(_:_:)(v4, v2, v3);
}

uint64_t sub_1000D015C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_1000D0174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_1000D0180()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 4);
}

uint64_t sub_1000D0190()
{
  return 0;
}

void sub_1000D01A4(uint64_t a1)
{
  sub_1004A77FC(a1, 0xE800000000000000);
}

uint64_t sub_1000D01AC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000D01B8()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000D01C0()
{
  return 1818845544;
}

void sub_1000D01D0()
{
  sub_1004E23A0();
}

uint64_t sub_1000D01D8(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_1000D01E4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 176), *(_QWORD *)(v1 - 168));
}

void sub_1000D01F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(*(_QWORD *)(v2 - 352), a2);
}

uint64_t sub_1000D0210()
{
  return 0;
}

void sub_1000D0220(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v2;

  *(_QWORD *)(a2 - 256) = a1;

}

uint64_t sub_1000D0228()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 104));
}

void sub_1000D0234()
{
  uint64_t v0;

  sub_1006133D8(v0);
}

uint64_t sub_1000D0240()
{
  return 0;
}

void sub_1000D0254(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

uint64_t sub_1000D0264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return dispatch thunk of Hashable.hash(into:)(a1, v3, a3);
}

unint64_t sub_1000D026C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10066A43C();
}

void sub_1000D0278(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000D0294()
{
  sub_100112494();
}

void sub_1000D02A0(uint64_t a1)
{
  sub_10007A100(a1);
}

uint64_t sub_1000D02A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

id sub_1000D02B0()
{
  void *v0;

  return v0;
}

uint64_t sub_1000D02D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000D02E0()
{
  return type metadata accessor for LocationEntity(0);
}

uint64_t sub_1000D02E8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 56)), *(_BYTE *)(v1 + *(int *)(v0 + 56) + 8));
}

uint64_t sub_1000D0310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v3, v2, v1);
}

uint64_t sub_1000D0324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return static AttributedString.makeLowercaseSmallCapsStyledString(localized:bundle:_:)(v3, 0, v2);
}

void sub_1000D0340()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_1000D0348(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000D0350()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

_QWORD *sub_1000D035C(_QWORD *a1)
{
  return sub_1000DB418(a1, a1[3]);
}

double sub_1000D0364()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 28) + 8)).n128_u64[0];
  return result;
}

unint64_t sub_1000D0374(uint64_t a1)
{
  return sub_1000BFD34(a1);
}

uint64_t sub_1000D037C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *(int *)(v0 + 60);
  return sub_1000D31C4(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
}

uint64_t sub_1000D03A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000EED10(a1, a2, *(_QWORD *)(v2 - 104));
}

uint64_t sub_1000D03B4(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000D03C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 256);
}

uint64_t sub_1000D03D4()
{
  return type metadata accessor for MoonRiseSetEvent(0);
}

uint64_t sub_1000D03E0()
{
  return type metadata accessor for ScrubberViewModel(0);
}

uint64_t sub_1000D03E8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x7469706963657270, 0xED00006E6F697461, 0);
}

uint64_t sub_1000D0410()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 288);
}

uint64_t sub_1000D041C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t sub_1000D0428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return static os_log_type_t.fault.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_1000D0444()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;

  sub_1000C1B60();
  if ((v3 & 1) != 0)
  {
    sub_1000DD15C();
    if (v4 != v5)
    {
      sub_1000C572C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_1000C4CB0();
    }
  }
  sub_1000C179C();
  if (v2)
  {
    v11 = sub_1000DBBEC(v6, v7, v8, v9, v10);
    v12 = (_QWORD *)sub_100098740(v11, 16 * v2 + 32);
    v13 = j__malloc_size(v12);
    sub_1000C22C4((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_1000EFA14();
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000986E8();
  }
  else
  {
    sub_100099BF0(v6, v7, (uint64_t)(v12 + 4));
  }
  sub_10004A2A0();
}

uint64_t sub_1000D04E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 104) + 104))(*(_QWORD *)(v2 - 112), a2, *(_QWORD *)(v2 - 96));
}

uint64_t sub_1000D04F8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000D0504()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1000D0524()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 1);
}

uint64_t sub_1000D0534()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000D0544()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000D054C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v2, v0);
}

void sub_1000D0564(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

void sub_1000D0580(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037768(a1, a2, v2);
}

uint64_t sub_1000D0588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 912) + 104))(v3, a2, *(_QWORD *)(v2 + 944));
}

uint64_t sub_1000D059C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, v1, 6);
}

uint64_t sub_1000D05AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 160) + 8))(*(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 152));
}

uint64_t sub_1000D05BC()
{
  return type metadata accessor for LocationPreviewModalViewState(0);
}

void sub_1000D05C4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  sub_1000D55D4(a1, v1, v2);
}

void sub_1000D05D0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

unint64_t sub_1000D05DC()
{
  return 0xD000000000000020;
}

uint64_t *sub_1000D05F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10004037C(a1, v1);
}

uint64_t sub_1000D05FC()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000D060C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v2;
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v3;
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 40) = v4;
  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 56) = v5;
  v6 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v0 + 72) = v6;
  v7 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v0 + 88) = v7;
  *(_BYTE *)(v0 + 96) = *(_BYTE *)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v0 + 112) = v8;
  *(_BYTE *)(v0 + 120) = *(_BYTE *)(v1 + 120);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000D0658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_1000D0668()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000D0678@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

void sub_1000D0684(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000D0690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1004D3A44(v2, v1 + *(int *)(v0 + 24));
}

uint64_t sub_1000D06A0@<X0>(int a1@<W8>)
{
  if (a1 == 1)
    return 0xD000000000000011;
  else
    return 0x6974736974617473;
}

uint64_t sub_1000D06E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 192) + 104))(*(_QWORD *)(v2 - 256), a2, *(_QWORD *)(v2 - 248));
}

uint64_t sub_1000D0700()
{
  return type metadata accessor for ChartPeakMarkStyle(0);
}

uint64_t sub_1000D0708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, *(_QWORD *)(v3 - 280));
}

unint64_t sub_1000D0714()
{
  return 0xD000000000000011;
}

void sub_1000D0734(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C75C(a1, a2, v2);
}

void sub_1000D073C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000AB54(a1, a2, v2);
}

uint64_t sub_1000D0744()
{
  _QWORD *v0;

  return objc_opt_self(*v0);
}

uint64_t sub_1000D074C()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1000D0778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  *(_QWORD *)(v1 + 16) = v2;
  v4 = v1 + 40 * v0;
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(v3 + 32);
  *(__n128 *)(v4 + 32) = result;
  *(_OWORD *)(v4 + 48) = v6;
  return result;
}

unint64_t sub_1000D07A4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10062E094();
}

uint64_t sub_1000D07B0()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_1000D07C4()
{
  return type metadata accessor for UnitConfiguration.WindSpeed(0);
}

uint64_t sub_1000D07CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

void sub_1000D07D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100084050(a1, v3, a3);
}

uint64_t sub_1000D0804@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(a1 - 256), 1, 1, *(_QWORD *)(v2 - 168));
  return v1;
}

void sub_1000D0834(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100086DA4(a1, v3, a3);
}

uint64_t sub_1000D083C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

double sub_1000D0850@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1)).n128_u64[0];
  return result;
}

uint64_t sub_1000D0858()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

__n128 *sub_1000D086C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1701667182;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t sub_1000D0884(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

double sub_1000D0890(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t *v10;
  uint64_t v11;

  return sub_1007EE5B0(a1, a2, a3, a4, a5, a6, a7, a8, v11, v10, v9, v8);
}

uint64_t sub_1000D089C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000D08A8()
{
  return 0;
}

uint64_t sub_1000D08B8()
{
  return Date.init()();
}

uint64_t sub_1000D08C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000D08C8(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

void sub_1000D08D4()
{
  sub_100605B90();
}

_QWORD *sub_1000D08F8(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[2] = v6;
  result[3] = v2;
  result[4] = v1;
  result[5] = v3;
  result[6] = v4;
  result[7] = v5;
  return result;
}

uint64_t sub_1000D0910(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 376), 1, 1, a1);
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 384), 1, 1, *(_QWORD *)(v1 - 528));
}

uint64_t sub_1000D0954@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 1416), *(_QWORD *)(v2 + 1336));
}

uint64_t sub_1000D0960()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_1000D0968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_allocObject(a1, a2, a3 | 7);
}

uint64_t sub_1000D0970(uint64_t a1)
{
  return swift_allocObject(a1, 72, 7);
}

uint64_t sub_1000D097C()
{
  return type metadata accessor for LocationPreviewModalViewModel(0);
}

uint64_t sub_1000D098C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(*(_QWORD *)(a2 - 256), v3, v2, a1);
}

uint64_t sub_1000D09A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

void sub_1000D09BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100095B78(a1, v3, a3);
}

unint64_t sub_1000D09C4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 8;
  return sub_1003B86D8();
}

uint64_t sub_1000D09D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = 0xD000000000000010;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, *(Swift::String *)(&a7 - 1), *(Swift::String *)&a8)._countAndFlagsBits;
}

double sub_1000D09DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000D09EC()
{
  return type metadata accessor for LocationComponentHeaderViewModel.Description(0);
}

double sub_1000D09F4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = swift_retain(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000D0A00()
{
  return static Settings.Maps.Overrides.defaultOverlayKind.getter();
}

double sub_1000D0A08()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 56)).n128_u64[0];
  return result;
}

uint64_t sub_1000D0A10()
{
  return type metadata accessor for DetailComponentAction(0);
}

uint64_t sub_1000D0A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000D0A20(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE300000000000000);
}

__n128 *sub_1000D0A28(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return a1 + 3;
}

uint64_t sub_1000D0A34()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 400);
}

void sub_1000D0A44(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C75C(a1, v2, v1);
}

uint64_t sub_1000D0A50(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000D0A5C()
{
  return type metadata accessor for WeatherMetadata(0);
}

unint64_t sub_1000D0A7C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 1;
  return sub_10062DFE0();
}

void sub_1000D0A88(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, v3, a3);
}

uint64_t sub_1000D0A90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D0AAC()
{
  return 0x7265746544746F6ELL;
}

uint64_t sub_1000D0AD0()
{
  uint64_t v0;

  return v0;
}

double sub_1000D0ADC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 168)).n128_u64[0];
  return result;
}

void *sub_1000D0AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _Block_copy(&a9);
}

uint64_t sub_1000D0AEC()
{
  return 0;
}

uint64_t sub_1000D0B10()
{
  return type metadata accessor for LocationContentView(0);
}

void sub_1000D0B44(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2, a2);
}

unint64_t sub_1000D0B4C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 0;
  return sub_100732020();
}

uint64_t sub_1000D0B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000D0B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1000D0B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000D0B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return static os_log_type_t.fault.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_1000D0B8C()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_1000D0B94()
{
  uint64_t v0;

  return swift_endAccess(v0 - 104);
}

void sub_1000D0BB8(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + *(int *)(v2 + 24)) = a1;
  *(_BYTE *)(v3 + *(int *)(v2 + 28)) = v1;
}

uint64_t sub_1000D0BD0()
{
  return Date.init()();
}

uint64_t sub_1000D0BD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D0BEC()
{
  return type metadata accessor for AnimatedGradient(0);
}

_QWORD *sub_1000D0BF8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000D0C04(_QWORD *a1)
{
  uint64_t v1;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(a1);
  return v1;
}

uint64_t sub_1000D0C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_1000D0C20()
{
  return type metadata accessor for TemperatureAveragesHeroChartInput(0);
}

uint64_t sub_1000D0C30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000D0C3C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_1000D0C44(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DA4(v3, a2, a3);
}

uint64_t sub_1000D0C4C()
{
  return type metadata accessor for ConditionDetailPlatterViewModel.Body(0);
}

uint64_t sub_1000D0C54()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_1000D0C5C()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, v0);
}

uint64_t sub_1000D0C6C()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 136, 0);
}

uint64_t sub_1000D0C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000D0C88@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void sub_1000D0C94()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100021A14(v1, v0);
}

uint64_t sub_1000D0CA0()
{
  return type metadata accessor for ListLocationRowPrimaryText(0);
}

uint64_t sub_1000D0CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

unint64_t sub_1000D0CD8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_1003B887C();
}

uint64_t sub_1000D0CE4()
{
  return swift_slowAlloc(22, -1);
}

uint64_t sub_1000D0CF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D0CFC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000D0D08()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 44)));
}

double sub_1000D0D18()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72)).n128_u64[0];
  return result;
}

uint64_t sub_1000D0D20()
{
  uint64_t v0;

  return + infix(_:_:)(v0);
}

void sub_1000D0D34(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(a1, *(_QWORD *)(v2 - 360), v1);
}

double sub_1000D0D48()
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(0xE500000000000000).n128_u64[0];
  return result;
}

BOOL sub_1000D0D50()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 - 176), (os_log_type_t)*(_DWORD *)(v0 - 184));
}

uint64_t sub_1000D0D60()
{
  uint64_t v0;

  return sub_1000A0AA4(v0);
}

void sub_1000D0D68(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

unint64_t sub_1000D0D70()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_10055F148();
}

uint64_t sub_1000D0D7C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000D0D88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static Measurement.== infix<A, B>(_:_:)(a1, a2, v2, v2, v2);
}

uint64_t sub_1000D0D98()
{
  uint64_t v0;
  uint64_t v1;

  return static CurrentWeather.== infix(_:_:)(v1, v0);
}

uint64_t sub_1000D0DA4()
{
  return 0;
}

uint64_t sub_1000D0DB0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000D0DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return Optional<A>.write(to:)(v0, *(_QWORD *)(v2 - 104), v1);
}

uint64_t sub_1000D0DD8()
{
  return swift_willThrow();
}

uint64_t sub_1000D0DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v10;

  return a10(a1, v10);
}

unint64_t sub_1000D0DF0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 5;
  return sub_10062DEF0();
}

void sub_1000D0DFC(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

__n128 sub_1000D0E08()
{
  uint64_t v0;
  char v1;
  __n128 result;
  __int128 v3;

  v1 = *(_BYTE *)(v0 - 224);
  result = *(__n128 *)(v0 - 256);
  v3 = *(_OWORD *)(v0 - 240);
  *(__n128 *)(v0 - 304) = result;
  *(_OWORD *)(v0 - 288) = v3;
  *(_BYTE *)(v0 - 272) = v1;
  return result;
}

uint64_t sub_1000D0E38(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000D0E48()
{
  return swift_continuation_await();
}

void sub_1000D0E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  sub_10055E36C(0, 256, 2, 3, 0, 0, 0, 1, 0, a10, a11, a12, a13, a14);
}

uint64_t sub_1000D0E78(uint64_t a1)
{
  type metadata accessor for LocationContentView(0);
  return a1;
}

BOOL sub_1000D0EB0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

unint64_t sub_1000D0ED4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 1;
  return sub_1007FF4D0();
}

uint64_t sub_1000D0EE0(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, v1);
}

uint64_t sub_1000D0EE8()
{
  return type metadata accessor for ViewState(0);
}

uint64_t sub_1000D0EF0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_1000D0EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_1000D0F08(uint64_t a1)
{
  return String.hash(into:)(a1, 0x696C617551726961, 0xEA00000000007974);
}

uint64_t sub_1000D0F24()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

double sub_1000D0F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  sub_1000F40F8(*(_QWORD *)v1);
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v1 + 8);
    sub_100075E0C(1u);
    sub_1000878DC();
    String.hash(into:)(a1, v5, v4);
    sub_10009895C();
  }
  else
  {
    sub_100075E0C(0);
  }
  sub_1000878DC();
  sub_1000E77B8();
  sub_10009895C();
  if ((*(_QWORD *)(v1 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)(v1 + 40);
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 48));
  v7 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  sub_10009BFE0();
  sub_100086DA4(&qword_100BEEA88, (uint64_t (*)(uint64_t))&type metadata accessor for Precipitation, (uint64_t)&protocol conformance descriptor for Precipitation);
  sub_1000D1358(v8);
  sub_1000D90DC(v7[10]);
  sub_1000D9714();
  sub_100075DF4();
  sub_1000D90DC(v7[11]);
  sub_1000D9714();
  sub_100075DF4();
  sub_1000D90DC(v7[12]);
  sub_1000D9714();
  sub_100075DF4();
  sub_100098778();
  sub_100086DA4((unint64_t *)&qword_100BC3588, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  sub_1000D1358(v9);
  v10 = v1 + v7[14];
  sub_100099928();
  sub_100086DA4(&qword_100BCBA30, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
  sub_1000D1358(v11);
  sub_100075E0C(*(_BYTE *)(v2 + v7[15]));
  sub_1000FDBC0(v7[16]);
  sub_1000BDD3C();
  return sub_10011033C(v10);
}

uint64_t sub_1000D10A8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 128);
}

uint64_t sub_1000D10BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
}

uint64_t sub_1000D10D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)(v1 + a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  v3 = v2 - 1;
  if (v3 < 0)
    v3 = -1;
  return (v3 + 1);
}

uint64_t sub_1000D10FC()
{
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_1000D1104(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

void sub_1000D110C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

void *sub_1000D111C()
{
  return malloc(0x28uLL);
}

uint64_t sub_1000D1128(uint64_t a1, uint64_t a2)
{
  NSBundle v2;
  Swift::String v3;
  Swift::String v5;

  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000030;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, (Swift::String_optional)0, v2, v3, v5)._countAndFlagsBits;
}

uint64_t sub_1000D1148()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD);
  uint64_t v2;

  return v1(*(_QWORD *)(v2 - 192), v0, *(_QWORD *)(v2 - 120));
}

uint64_t sub_1000D1160(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t *a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10001456C(a1, a2, a3, a4, (uint64_t)va);
}

uint64_t sub_1000D1168()
{
  uint64_t v0;

  return v0 + 32;
}

void sub_1000D1178(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100021A14(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1000D1184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 144));
}

uint64_t sub_1000D1190()
{
  return type metadata accessor for LocalPreset(0);
}

void sub_1000D1198()
{
  sub_1007D4C44();
}

uint64_t sub_1000D11A0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
}

double sub_1000D11B0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(double *)(v1 + a1);
}

uint64_t sub_1000D11C0()
{
  return type metadata accessor for LocationFooterViewModel(0);
}

uint64_t sub_1000D11C8()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1000D11D8(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

void sub_1000D11F0(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, char a9, char a10, char a11, char a12, char a13)
{
  sub_100520DF8(a1, a2, a3, a4, a5, a6, a7, 2, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1000D11FC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 52) + 32));
}

uint64_t sub_1000D120C()
{
  return static Locale.current.getter();
}

uint64_t sub_1000D1234@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for AveragesDetailViewState(0);
}

void sub_1000D1254(uint64_t a1@<X8>)
{
  sub_1001A44FC(*(void **)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1000D1264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 112), a1);
}

uint64_t sub_1000D1278(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 312));
}

uint64_t sub_1000D1284()
{
  return type metadata accessor for WeatherFormatPlaceholder(0);
}

uint64_t sub_1000D1290()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D12B0()
{
  return type metadata accessor for WeatherDescription(0);
}

uint64_t sub_1000D12B8()
{
  uint64_t v0;

  return v0;
}

void sub_1000D12C8()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100084050(v0, *(_QWORD *)(v2 - 280), v1);
}

uint64_t sub_1000D12E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D12F4()
{
  return 0x696C617551726961;
}

uint64_t sub_1000D1308()
{
  uint64_t v0;

  return dispatch thunk of CustomStringConvertible.description.getter(v0);
}

void sub_1000D1314(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(a1 + 16 * v1);
  *v4 = v3;
  v4[1] = v2;
}

uint64_t sub_1000D1320()
{
  return type metadata accessor for UnitConfiguration.Temperature(0);
}

uint64_t sub_1000D1328(uint64_t result)
{
  *(_BYTE *)(result + 16) = 34;
  return result;
}

uint64_t sub_1000D1334()
{
  uint64_t v0;

  return NotificationSubscription.Kind.containsAny(_:)(v0);
}

uint64_t sub_1000D1340()
{
  unsigned __int8 v0;

  return sub_1004A8828(v0);
}

uint64_t sub_1000D1350(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A68(v2 - 96, a2);
}

uint64_t sub_1000D1358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable.hash(into:)(v1, v2, a1);
}

uint64_t sub_1000D1368()
{
  return 0;
}

void sub_1000D1374(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000A15B4(a1, v3, a3);
}

id sub_1000D137C(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 - 288), a2);
}

uint64_t sub_1000D1388(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000D1390@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000D139C(uint64_t a1)
{
  return Definition.thenConfigure(_:)(a1, 0);
}

uint64_t sub_1000D13A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 232), v0);
}

uint64_t sub_1000D13C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable.hash(into:)(v2, v1, a1);
}

uint64_t sub_1000D13D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1000D13E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t *v8;
  va_list va;

  va_start(va, a8);
  sub_100021A14((uint64_t)va, v8);
}

id sub_1000D13EC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  return objc_msgSend(v3, a2, v2, v4);
}

void sub_1000D13FC()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0;
  *(_QWORD *)(v0 - 112) = 0xE000000000000000;
}

uint64_t sub_1000D1408(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 168));
}

uint64_t sub_1000D1418()
{
  return type metadata accessor for LocationViewModel(0);
}

void sub_1000D1428(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2, a2);
}

void sub_1000D1430(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007802C(a1, v2, v1);
}

uint64_t sub_1000D143C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10006A788(v0, v1);
}

uint64_t sub_1000D1448()
{
  return type metadata accessor for ConfiguredUnit(0);
}

uint64_t sub_1000D1450()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

uint64_t sub_1000D145C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Measurement.init(value:unit:)(v2, a2);
}

uint64_t sub_1000D1468(__n128 *a1, __n128 a2)
{
  _QWORD *v2;

  a1[1] = a2;
  return objc_opt_self(*v2);
}

uint64_t sub_1000D1474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 192, v3 - 65, v2, v1, a1);
}

uint64_t sub_1000D1490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000D14A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

void sub_1000D14B8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  sub_10007802C(v2, a1 + v3, v1);
}

uint64_t sub_1000D14C8()
{
  return 0x64656E6E6970;
}

uint64_t sub_1000D14DC()
{
  return type metadata accessor for WeatherNetworkActivity.Domain(0);
}

uint64_t sub_1000D14E4()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 + 240));
}

uint64_t sub_1000D14EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 232));
}

uint64_t sub_1000D14F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 - 656))(a1, a2, *(_QWORD *)(v2 - 504));
}

uint64_t sub_1000D150C(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, *(_QWORD *)(v1 - 256));
}

uint64_t sub_1000D1514()
{
  uint64_t v0;

  return v0;
}

void sub_1000D1528(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DDC(v3, a2, a3);
}

void sub_1000D1530()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v2);
}

_QWORD *sub_1000D153C()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000D1548()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

uint64_t sub_1000D1558(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t sub_1000D1560(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

double sub_1000D1568(char a1)
{
  return sub_100161564(a1, 0, 0);
}

uint64_t sub_1000D1574()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1000D15A4(uint64_t a1, uint64_t *a2)
{
  return sub_1000BA294(a2);
}

uint64_t sub_1000D15AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 84) = 3;
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 84, v1, v0);
}

uint64_t sub_1000D15D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7);
}

uint64_t sub_1000D15E4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

uint64_t sub_1000D15F4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000DB418(*(_QWORD **)(v1 - 328), v0);
  return v0;
}

uint64_t sub_1000D1624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 992) + 104))(v3, a2, *(_QWORD *)(v2 + 1000));
}

uint64_t sub_1000D1638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v0, v3, v2);
}

double sub_1000D1650()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 320)).n128_u64[0];
  return result;
}

uint64_t sub_1000D165C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100256708(v1, v0);
}

uint64_t sub_1000D1668()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1000D1674(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000D168C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A68(v2, a2);
}

void sub_1000D1694(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100086DA4(a1, v3, a3);
}

uint64_t sub_1000D169C()
{
  return type metadata accessor for MainViewFullscreenMapZoomTransitionModifier.TransitionContainer(0);
}

uint64_t sub_1000D16C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 144))(a1, a2, v2);
}

id sub_1000D16CC()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 3240));
}

uint64_t sub_1000D16D8()
{
  void *v0;

  return sub_1000274EC(v0);
}

void sub_1000D16F4()
{
  sub_1000EF360();
}

uint64_t sub_1000D1700(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1000D1710()
{
  return 2;
}

uint64_t sub_1000D1744()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000D1750()
{
  return type metadata accessor for MoonScrubberInput(0);
}

uint64_t sub_1000D1758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000D1760(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1000DB648(a1, v2, v1);
}

uint64_t sub_1000D176C()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + 40));
}

uint64_t sub_1000D1774()
{
  return type metadata accessor for DailyComponentForecastRowView(0);
}

double sub_1000D177C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000D1798()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000D17A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D17B8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000D17D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0);
}

uint64_t sub_1000D17EC@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000D1800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v4, a2, v2);
}

uint64_t sub_1000D1810()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, v0);
}

uint64_t sub_1000D1820()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, v0);
}

void sub_1000D1840()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 472) = 0;
  *(_QWORD *)(v0 - 688) = 0;
  *(_QWORD *)(v0 - 696) = 0;
  *(_QWORD *)(v0 - 728) = 0;
  *(_QWORD *)(v0 - 744) = 0;
}

uint64_t sub_1000D186C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000D1878()
{
  uint64_t v0;

  return sub_100159C94(v0 - 96);
}

uint64_t sub_1000D1880(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000D1888()
{
  return 1734833517;
}

uint64_t sub_1000D1898()
{
  uint64_t (*v0)(void);

  return v0();
}

void sub_1000D18A0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x696669646F6D203BLL;
  v0._object = (void *)0xEC000000203A6465;
  String.append(_:)(v0);
}

unint64_t sub_1000D18C0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_1004E8464();
}

void sub_1000D18CC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(a1, a2, v2);
}

uint64_t sub_1000D18D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D18E8()
{
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000D18F0()
{
  return type metadata accessor for WeatherMapPreviewLocationState(0);
}

void sub_1000D18F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1001A7210(a1, a2, v2);
}

void sub_1000D1900()
{
  uint64_t v0;

  sub_1001A44FC(*(void **)(v0 + 104), *(void **)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
}

uint64_t sub_1000D1910(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return sub_10009FF10(a1, a2);
}

void sub_1000D1918(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1000A15B4(a1, v2, v1);
}

uint64_t sub_1000D1924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return static WeatherFormatStyle<>.weather(_:usage:locale:)(a1, v1, v2);
}

uint64_t sub_1000D1930()
{
  uint64_t v0;
  uint64_t v1;

  return URL.append<A>(path:directoryHint:)(v1 - 80, v0);
}

void sub_1000D193C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100095B78(*(_QWORD *)(v2 - 96), v0, v1);
}

_QWORD *sub_1000D1964@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_10005F164((_QWORD *)(v1 - 288));
}

uint64_t sub_1000D1970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 96, v6 - 65, v5, a4, a5);
}

uint64_t sub_1000D1988()
{
  return StringBuilder.makeString(for:data:formattedForAccessibility:)();
}

__n128 sub_1000D1994@<Q0>(__int16 a1@<W8>)
{
  int v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  result = *(__n128 *)(v2 - 256);
  v4 = *(_OWORD *)(v2 - 240);
  *(__n128 *)(v2 - 304) = result;
  *(_OWORD *)(v2 - 288) = v4;
  *(_BYTE *)(v2 - 270) = BYTE2(v1);
  *(_WORD *)(v2 - 272) = a1;
  *(_BYTE *)(v2 - 269) = 0;
  return result;
}

uint64_t sub_1000D19C8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v2, v1);
}

__n128 *sub_1000D19D8(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x726F727265;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

uint64_t sub_1000D19F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return type metadata accessor for SearchViewState(0);
}

uint64_t sub_1000D1A10()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, *(_QWORD *)(v1 - 256));
  return type metadata accessor for LocationViewerViewState._Storage(0);
}

uint64_t sub_1000D1A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 - 104) = a4;
  return sub_1000BA294(a4);
}

double sub_1000D1A40()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 - 136) = v0;
  result = 0.0;
  *(_OWORD *)(v1 - 128) = 0u;
  *(_OWORD *)(v1 - 112) = 0u;
  *(_QWORD *)(v1 - 96) = 0;
  return result;
}

uint64_t sub_1000D1A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = v1;
  *(_QWORD *)(v2 - 160) = v0;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000D1A74()
{
  return static UIFont.monospacedDigitSystemFont(ofSize:weight:traits:)(0x8000);
}

uint64_t sub_1000D1A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000D1A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 104, a2, 1);
}

double sub_1000D1A98()
{
  return 0.0;
}

uint64_t sub_1000D1AB4()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000D1AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

void sub_1000D1AD4()
{
  void *v0;

}

uint64_t sub_1000D1AE4@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_1000D1AFC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 224));
}

void sub_1000D1B0C(uint64_t a1)
{
  uint64_t *v1;

  sub_100021AA4(a1, v1);
}

uint64_t sub_1000D1B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000D1B20(uint64_t a1, uint64_t a2)
{
  return sub_1000CE46C(a1, a2);
}

double sub_1000D1B28()
{
  uint64_t v0;

  return *(double *)(v0 - 96);
}

uint64_t sub_1000D1B3C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = 1752392040;
  *(_QWORD *)(v1 - 120) = result;
  return result;
}

uint64_t sub_1000D1B50()
{
  return type metadata accessor for WeatherNetworkActivity.Domain(0);
}

uint64_t sub_1000D1B5C()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(*(_QWORD **)(v0 + 136));
}

uint64_t sub_1000D1B64()
{
  return type metadata accessor for UserInterfaceSizeClass(0);
}

uint64_t sub_1000D1B6C()
{
  uint64_t v0;

  return AirQualityScaleCategory.init(description:number:color:recommendation:range:glyph:)(0xD000000000000019, v0, 2, 0x30304343464623, 0xE700000000000000, 0, 0, 0);
}

BOOL sub_1000D1BA0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000D1BB0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C75C(a1, a2, v2);
}

uint64_t sub_1000D1BC4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  return sub_1000A5EBC(v0, v2 - 96, v1);
}

void sub_1000D1BD8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_1000D1BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 144) + 104))(*(_QWORD *)(v2 - 152), a2, *(_QWORD *)(v2 - 136));
}

uint64_t sub_1000D1BFC()
{
  return type metadata accessor for LocationViewerInput(0);
}

uint64_t sub_1000D1C04(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000D1C1C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000D1C24()
{
  return type metadata accessor for DetailChartGradientModel(0);
}

uint64_t sub_1000D1C2C()
{
  return type metadata accessor for CurrentWeather(0);
}

uint64_t sub_1000D1C48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1001CD0C0(v2, a1 + v1);
}

uint64_t sub_1000D1C54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

void sub_1000D1C5C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_100080C0C(v1 + a1, v2, v3);
}

void sub_1000D1C6C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

uint64_t sub_1000D1C74()
{
  uint64_t v0;

  return Double.init(_:)(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 120), *(_QWORD *)(v0 - 112));
}

void sub_1000D1C80(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 568) = a1;
}

uint64_t sub_1000D1CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(v3 + *(int *)(v1 + 24), v2, *(_QWORD *)(v0 + 112));
}

uint64_t sub_1000D1CE4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v1, v0);
}

uint64_t sub_1000D1CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, v2);
}

uint64_t sub_1000D1D08()
{
  return type metadata accessor for StartupTaskExecutionPhase(0);
}

uint64_t sub_1000D1D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000D1D38(unint64_t *a1)
{
  uint64_t *v1;

  sub_10003D2DC(a1, v1);
}

uint64_t sub_1000D1D54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000D1D64()
{
  void *v0;

  return sub_1000274EC(v0);
}

uint64_t sub_1000D1D6C()
{
  return type metadata accessor for HomeAndWorkRefinementRow(0);
}

uint64_t sub_1000D1D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _ConditionalContent<>.init(storage:)(v2, *(_QWORD *)(v3 - 312), *(_QWORD *)(v3 - 288), v1, a1);
}

uint64_t sub_1000D1DA0()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000D1DB0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for NewsArticle(0);
}

uint64_t sub_1000D1DD0()
{
  return 0;
}

uint64_t sub_1000D1DDC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000D1DE8()
{
  return type metadata accessor for Tips.MaxDisplayCount(0);
}

uint64_t sub_1000D1E04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 272);
}

uint64_t sub_1000D1E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 168))(v0, *(unsigned int *)(v2 - 160), v1);
}

double sub_1000D1E34()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1000D1E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(v0, v1);
}

uint64_t sub_1000D1E54()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D1E68(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 200));
}

uint64_t sub_1000D1E78()
{
  return 0x739980E27449;
}

unint64_t sub_1000D1E94()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 2;
  return sub_1004B1E98();
}

uint64_t sub_1000D1EA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000D1EBC()
{
  return type metadata accessor for UIListContentConfiguration(0);
}

__n128 sub_1000D1ED8(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 128);
  a1[1] = result;
  return result;
}

uint64_t sub_1000D1EE8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D1EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

id sub_1000D1F08()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 184));
}

uint64_t sub_1000D1F14(uint64_t a1)
{
  uint64_t v1;

  return sub_1001009A4(a1, v1);
}

uint64_t sub_1000D1F1C(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;

  return sub_1000A0794(0, a2, v2);
}

uint64_t sub_1000D1F28()
{
  return ProxyContainer.private.getter();
}

uint64_t sub_1000D1F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000D1F44()
{
  return type metadata accessor for MoonDetailSelectedDate(0);
}

uint64_t sub_1000D1F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v1, v0);
}

uint64_t sub_1000D1F6C()
{
  uint64_t v0;

  return v0;
}

id sub_1000D1F78(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0x8000);
}

uint64_t sub_1000D1F80()
{
  uint64_t v0;

  return String.init<A>(describing:)(v0);
}

void sub_1000D1F8C(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 184), 1, 1, a1);
  sub_100112494();
}

uint64_t sub_1000D1FD8()
{
  uint64_t v0;

  return sub_1000A0AA4(v0);
}

uint64_t sub_1000D1FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

void sub_1000D1FF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000787D4(a1, a2, v2);
}

uint64_t sub_1000D2000()
{
  return type metadata accessor for SunriseSunsetDetailView(0);
}

uint64_t sub_1000D2008(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1000D2010()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10006A788(v1, v0);
}

uint64_t sub_1000D201C()
{
  uint64_t v0;

  return sub_10077630C(v0);
}

uint64_t sub_1000D2024()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getAtKeyPath(v0, v1);
}

uint64_t sub_1000D2030()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_1000D203C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000D2050()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 40) + 8));
}

uint64_t sub_1000D2060()
{
  uint64_t v0;

  return Promise.init(error:)(v0);
}

uint64_t sub_1000D206C()
{
  return type metadata accessor for MainView(0);
}

uint64_t sub_1000D2074()
{
  return type metadata accessor for NetworkActivityCompletion(0);
}

double sub_1000D207C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128)).n128_u64[0];
  return result;
}

uint64_t sub_1000D2084()
{
  return type metadata accessor for NewsChannel(0);
}

uint64_t sub_1000D208C()
{
  return 0;
}

void sub_1000D20AC(__n128 a1, __n128 a2)
{
  uint64_t v2;

  *(__n128 *)(v2 - 312) = a1;
  *(__n128 *)(v2 - 296) = a2;
}

uint64_t sub_1000D20C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 - 784))(*(_QWORD *)(v0 - 568), *(unsigned int *)(v0 - 788), *(_QWORD *)(v0 - 560));
}

double sub_1000D20EC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000D20FC()
{
  return type metadata accessor for PresentedLocation(0);
}

uint64_t sub_1000D2104(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000D210C()
{
  return 0x6F697469646E6F63;
}

unint64_t sub_1000D2130()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000DB418(v0, v1);
  return sub_100924FCC();
}

void sub_1000D214C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41154;
  v0._object = (void *)0xA200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_1000D2158()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 352) + 8))(*(_QWORD *)(v0 - 240), *(_QWORD *)(v0 - 344));
}

void sub_1000D2174(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (_QWORD *)(a2 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRelease(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

char *sub_1000D21E8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_1000D226C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000D2360(_QWORD *a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  int v38;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  void (*v45)(char *, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;

  v4 = type metadata accessor for LocationComponentHeaderViewModel(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
    case 4u:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      v5 = a1 + 6;
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      v5 = a1 + 10;
      goto LABEL_6;
    case 2u:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      swift_bridgeObjectRelease(a1[9]);
      swift_bridgeObjectRelease(a1[11]);
      v5 = a1 + 14;
      goto LABEL_6;
    case 3u:
      v6 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      v7 = (_QWORD *)((char *)a1
                    + *(int *)(type metadata accessor for LocationComponentHeaderViewModel.Description(0) + 20));
      swift_bridgeObjectRelease(v7[1]);
      swift_bridgeObjectRelease(v7[3]);
      v5 = v7 + 6;
LABEL_6:
      swift_bridgeObjectRelease(*v5);
      break;
    default:
      break;
  }
  v8 = type metadata accessor for LocationComponentContainerViewModel(0);
  v9 = (char *)a1 + *(int *)(v8 + 20);
  v10 = type metadata accessor for LocationComponentViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 11));
      v11 = *((_QWORD *)v9 + 13);
      goto LABEL_51;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)v9);
      v12 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
      v13 = &v9[v12[5]];
      v14 = sub_1000BA294(&qword_100BC4E68);
      v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v15(v13, v14);
      v15(&v9[v12[6]], v14);
      v15(&v9[v12[7]], v14);
      v16 = v12[8];
      goto LABEL_34;
    case 2u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      v17 = (int *)type metadata accessor for FeelsLikeComponentViewModel(0);
      v18 = (uint64_t)&v9[v17[6]];
      v19 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v19))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v18 + 8));
        v20 = v18 + *(int *)(v19 + 20);
        v21 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
        v22 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        swift_bridgeObjectRelease(*(_QWORD *)(v20 + *(int *)(v22 + 32) + 8));
      }
      goto LABEL_49;
    case 3u:
      v11 = *(_QWORD *)v9;
      goto LABEL_51;
    case 4u:
      v11 = *((_QWORD *)v9 + 2);
      goto LABEL_51;
    case 5u:
      v23 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v9, v23);
      v17 = (int *)type metadata accessor for MapComponentViewModel(0);
      v24 = &v9[v17[5]];
      v25 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
      v26 = (uint64_t)&v9[v17[6]];
      v27 = (int *)type metadata accessor for WeatherData(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v26, 1, (uint64_t)v27))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v26 + 8));
        v28 = v26 + v27[5];
        v29 = type metadata accessor for Locale(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v28, 1, v29))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
        v30 = v26 + v27[6];
        v31 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
        v32 = v26 + v27[7];
        v33 = sub_1000BA294(&qword_100BC3348);
        if (!_s7Weather24LocationCompositionStateOwet_0(v32, 1, v33))
        {
          v34 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v32, v34);
        }
        v35 = v26 + v27[8];
        v36 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, v36);
        if (EnumCaseMultiPayload == 1)
        {
          v56 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v35, v56);
        }
        else if (!EnumCaseMultiPayload)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v35 + 8));
        }
        v57 = v26 + v27[9];
        v58 = type metadata accessor for WeatherDataOverrides(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v57, 1, v58))
        {
          v59 = type metadata accessor for Date(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v57, 1, v59))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v57, v59);
          v60 = v57 + *(int *)(v58 + 20);
          if (!_s7Weather24LocationCompositionStateOwet_0(v60, 1, v59))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v60, v59);
        }
      }
LABEL_49:
      v48 = v17[7];
      goto LABEL_50;
    case 6u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      v38 = v9[32];
      if (v38 != 255)
        sub_100121E04(*((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), v38);
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
      v9 += *(int *)(type metadata accessor for MoonComponentViewModel(0) + 28);
      HourPrecipitationChartViewModel = type metadata accessor for Date(0);
      goto LABEL_37;
    case 7u:
      v40 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v9, v40) == 1)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
        v41 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v42 = (uint64_t)&v9[v41[5]];
        v43 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v42, 1, v43))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
        v44 = swift_bridgeObjectRelease(*(_QWORD *)&v9[v41[6] + 8]);
        v45 = *(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v43 - 8) + 8);
        v45(&v9[v41[7]], v43, v44);
        v46 = (uint64_t)&v9[v41[8]];
        if (!_s7Weather24LocationCompositionStateOwet_0(v46, 1, v43))
          ((void (*)(uint64_t, uint64_t))v45)(v46, v43);
      }
      break;
    case 8u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      v9 += *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      goto LABEL_37;
    case 9u:
      HourPrecipitationChartViewModel = type metadata accessor for Location(0);
      goto LABEL_37;
    case 0xAu:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 9));
      v11 = *((_QWORD *)v9 + 11);
      goto LABEL_51;
    case 0xBu:
      v47 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v9, v47);
      v12 = (int *)type metadata accessor for PressureComponentViewModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v9[v12[5] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v9[v12[6] + 8]);
      v16 = v12[7];
LABEL_34:
      swift_bridgeObjectRelease(*(_QWORD *)&v9[v16 + 8]);
      v48 = v12[9];
LABEL_50:
      v11 = *(_QWORD *)&v9[v48 + 8];
      goto LABEL_51;
    case 0xDu:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 4));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 6));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 8));
      v9 += *(int *)(type metadata accessor for SevereAlertComponentViewModel(0) + 36);
      HourPrecipitationChartViewModel = type metadata accessor for WeatherAlert.Prominence(0);
      goto LABEL_37;
    case 0xEu:
      HourPrecipitationChartViewModel = type metadata accessor for SunriseSunsetViewModel(0);
LABEL_37:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v9, HourPrecipitationChartViewModel);
      break;
    case 0xFu:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 23));
      v11 = *((_QWORD *)v9 + 25);
      goto LABEL_51;
    case 0x10u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      v49 = type metadata accessor for UVIndexComponentViewModel(0);
      v50 = &v9[*(int *)(v49 + 28)];
      v51 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v50, v51);
      v52 = *(int *)(v49 + 32);
      goto LABEL_42;
    case 0x11u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      v11 = *((_QWORD *)v9 + 5);
      goto LABEL_51;
    case 0x12u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 24));
      v53 = type metadata accessor for WindComponentViewModel(0);
      v54 = &v9[*(int *)(v53 + 68)];
      v55 = type metadata accessor for WindComponentCompassViewModel(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
      v52 = *(int *)(v53 + 72);
LABEL_42:
      v11 = *(_QWORD *)&v9[v52];
LABEL_51:
      swift_bridgeObjectRelease(v11);
      break;
    default:
      break;
  }
  v61 = (uint64_t)a1 + *(int *)(v8 + 28);
  v62 = type metadata accessor for LocationComponentAction(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v61, 1, v62))
  {
    switch(swift_getEnumCaseMultiPayload(v61, v62))
    {
      case 0u:
        v63 = type metadata accessor for URL(0);
        goto LABEL_58;
      case 1u:
        v63 = type metadata accessor for WeatherMapOverlayKind(0);
        goto LABEL_58;
      case 2u:
        v63 = type metadata accessor for DetailCondition(0);
        goto LABEL_58;
      case 4u:
        v61 += *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v63 = type metadata accessor for Location(0);
LABEL_58:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v61, v63);
        break;
      default:
        break;
    }
  }
  swift_unknownObjectRelease(*(_QWORD *)((char *)a1 + a2[5]));
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)((char *)a1 + a2[6]));
  v64 = (char *)a1 + a2[8];
  v65 = type metadata accessor for Location.Identifier(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v64, v65);
  swift_release(*(_QWORD *)((char *)a1 + a2[9]));
  swift_release(*(_QWORD *)((char *)a1 + a2[13] + 24));
  sub_1000BF398(*(_QWORD *)((char *)a1 + a2[14]), *(_QWORD *)((char *)a1 + a2[14] + 8));
  sub_1000BF398(*(_QWORD *)((char *)a1 + a2[15]), *(_QWORD *)((char *)a1 + a2[15] + 8));
  sub_1000BF398(*(_QWORD *)((char *)a1 + a2[16]), *(_QWORD *)((char *)a1 + a2[16] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[17] + 8));
  v66 = (_QWORD *)((char *)a1 + a2[18]);
  v67 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v66, v67) == 1)
  {
    v68 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v66, v68);
  }
  else
  {
    swift_release(*v66);
  }
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[19]), *((_BYTE *)a1 + a2[19] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[20]), *((_BYTE *)a1 + a2[20] + 8));
  v69 = (_QWORD *)((char *)a1 + a2[21]);
  v70 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
  {
    v71 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v69, v71);
  }
  else
  {
    swift_release(*v69);
  }
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[22]), *((_BYTE *)a1 + a2[22] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[23]), *((_BYTE *)a1 + a2[23] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[24]), *((_BYTE *)a1 + a2[24] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[25]), *((_BYTE *)a1 + a2[25] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[26]), *((_BYTE *)a1 + a2[26] + 8));
  sub_1000B15F8(*(_QWORD *)((char *)a1 + a2[27]), *((_BYTE *)a1 + a2[27] + 8));
  v72 = (_QWORD *)((char *)a1 + a2[28]);
  v73 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v72, v73) == 1)
  {
    v74 = (char *)v72 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v75 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v74, v75);
  }
  else
  {
    swift_release(*v72);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[29]));
  v76 = (_QWORD *)((char *)a1 + a2[30]);
  swift_release(*v76);
  return swift_release(v76[1]);
}

uint64_t sub_1000D2EAC(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  v10 = (_QWORD *)(a1 + a2[10]);
  v11 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = (char *)v10 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release(*v10);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
  v14 = (_QWORD *)(a1 + a2[12]);
  v15 = sub_1000BA294(&qword_100BC37E8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  sub_1000B15F8(*(_QWORD *)(a1 + a2[13]), *(_BYTE *)(a1 + a2[13] + 8));
  v17 = a1 + a2[14];
  sub_1000D31C4(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24), *(_BYTE *)(v17 + 32));
  v18 = a1 + a2[15];
  sub_1000D31D0(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 24), *(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40), *(_BYTE *)(v18 + 48));
  v19 = a1 + a2[16];
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
  sub_100176DD4(*(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40), *(_BYTE *)(v19 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + 152));
  v20 = a1 + a2[17];
  sub_1000D31B4(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + 24));
  v21 = a1 + a2[18];
  sub_1000D31B4(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + 24));
  v22 = a1 + a2[19];
  if (*(_QWORD *)(v22 + 24))
  {
    sub_1000D31B4(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v22 + 24));
  }
  v23 = a1 + a2[21];
  v24 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = a1 + a2[23];
  v26 = sub_1000BA294(&qword_100BC37F8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
}

double sub_1000D31B4(uint64_t a1, uint64_t a2, char a3)
{
  double result;

  if ((a3 & 1) != 0)
    swift_release(a1);
  else
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

uint64_t sub_1000D31C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_1000D31D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    return swift_release(result);
  return result;
}

void sub_1000D31E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;

  v3 = type metadata accessor for LocationComponentHeaderViewModel(0);
  v4 = (char *)sub_1000D3240 + 4 * byte_10099F7C9[swift_getEnumCaseMultiPayload(a2, v3)];
  __asm { BR              X10 }
}

uint64_t sub_1000D3240(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__dst,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t, __n128);
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t, __n128);
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t, __n128);
  uint64_t v186;
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  void (*v195)(char *, char *, uint64_t, __n128);
  __n128 v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t, __n128);
  __n128 v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  int *v228;
  char *v229;
  void (*v230)(char *, char *, uint64_t, __n128);
  __n128 v231;
  char *v232;
  int *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  uint64_t v251;
  int EnumCaseMultiPayload;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE *v275;
  _BYTE *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _BYTE *v288;
  _BYTE *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  void (*v298)(uint64_t, uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  _QWORD *v393;
  uint64_t v394;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  void (*v404)(char *, char *, uint64_t, __n128);
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  int *v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  int *v424;
  _QWORD *v425;
  _QWORD *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  char *v432;
  int *v433;
  int *v434;
  int *v435;
  int *v436;
  int *v437;
  int *v438;
  int *v439;
  int *v440;

  v39 = *(_QWORD *)(v35 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v39;
  v40 = *(_QWORD *)(v35 + 24);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 24) = v40;
  *(_BYTE *)(v34 + 32) = *(_BYTE *)(v35 + 32);
  v41 = *(_QWORD *)(v35 + 48);
  *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
  *(_QWORD *)(v34 + 48) = v41;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_storeEnumTagMultiPayload(v34, v37, 0);
  v42 = (int *)type metadata accessor for LocationComponentContainerViewModel(0);
  v43 = v42[5];
  v44 = (_QWORD *)(v34 + v43);
  v45 = (_QWORD *)(v35 + v43);
  v46 = type metadata accessor for LocationComponentViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v45, v46))
  {
    case 0u:
      *v44 = *v45;
      *(_OWORD *)(v44 + 1) = *(_OWORD *)(v45 + 1);
      *(_OWORD *)(v44 + 3) = *(_OWORD *)(v45 + 3);
      v47 = v45[5];
      v48 = v45[6];
      v44[5] = v47;
      v44[6] = v48;
      v50 = v45[7];
      v49 = v45[8];
      v44[7] = v50;
      v44[8] = v49;
      v51 = v46;
      v53 = v45[9];
      v52 = v45[10];
      v44[9] = v53;
      v44[10] = v52;
      v54 = v42;
      v55 = v45[11];
      v44[11] = v55;
      *((_WORD *)v44 + 48) = *((_WORD *)v45 + 48);
      v56 = v45[13];
      v44[13] = v56;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v53);
      v57 = v55;
      v42 = v54;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v56);
      v58 = v44;
      v59 = v51;
      v60 = 0;
      goto LABEL_60;
    case 1u:
      v61 = *v45;
      *v44 = *v45;
      v62 = type metadata accessor for DailyForecastComponentViewModel(0);
      *(_QWORD *)(v38 - 88) = v46;
      v63 = (int *)v62;
      v64 = *(int *)(v62 + 20);
      v433 = v42;
      v65 = (char *)v44 + v64;
      v66 = (char *)v45 + v64;
      swift_bridgeObjectRetain(v61);
      v67 = sub_1000BA294(&qword_100BC4E68);
      v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
      v69 = v65;
      v42 = v433;
      v68(v69, v66, v67);
      v68((char *)v44 + v63[6], (char *)v45 + v63[6], v67);
      v68((char *)v44 + v63[7], (char *)v45 + v63[7], v67);
      v70 = v63[8];
      v71 = (_QWORD *)((char *)v44 + v70);
      v72 = (_QWORD *)((char *)v45 + v70);
      v73 = v72[1];
      *v71 = *v72;
      v71[1] = v73;
      v74 = v63[9];
      v75 = (_QWORD *)((char *)v44 + v74);
      v76 = (_QWORD *)((char *)v45 + v74);
      v77 = v76[1];
      *v75 = *v76;
      v75[1] = v77;
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v77);
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 1;
      goto LABEL_60;
    case 2u:
      *(_QWORD *)(v38 - 88) = v46;
      v78 = v45[1];
      *v44 = *v45;
      v44[1] = v78;
      v79 = v45[3];
      v44[2] = v45[2];
      v44[3] = v79;
      v80 = type metadata accessor for FeelsLikeComponentViewModel(0);
      v81 = *(int *)(v80 + 24);
      v418 = v80;
      v425 = (_QWORD *)((char *)v44 + v81);
      v82 = (_QWORD *)((char *)v45 + v81);
      v83 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v79);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v82, 1, v83))
      {
        v84 = sub_1000BA294(&qword_100BC3360);
        memcpy(v425, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        v190 = v82[1];
        *v425 = *v82;
        v425[1] = v190;
        v415 = v83;
        v191 = *(int *)(v83 + 20);
        v192 = (char *)v425 + v191;
        v193 = (char *)v82 + v191;
        v439 = v42;
        v194 = type metadata accessor for TemperatureScaleConfiguration(0);
        v195 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v194 - 8) + 16);
        v196 = swift_bridgeObjectRetain(v190);
        v197 = v194;
        v42 = v439;
        v195(v192, v193, v197, v196);
        v198 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v192[v198[5]] = *(_QWORD *)&v193[v198[5]];
        *(_QWORD *)&v192[v198[6]] = *(_QWORD *)&v193[v198[6]];
        *(_QWORD *)&v192[v198[7]] = *(_QWORD *)&v193[v198[7]];
        v199 = v198[8];
        v200 = &v192[v199];
        v201 = &v193[v199];
        v203 = *(_QWORD *)v201;
        v202 = *((_QWORD *)v201 + 1);
        *(_QWORD *)v200 = v203;
        *((_QWORD *)v200 + 1) = v202;
        v192[v198[9]] = v193[v198[9]];
        swift_bridgeObjectRetain(v202);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v425, 0, 1, v415);
      }
      v204 = *(_QWORD *)(v38 - 88);
      v205 = *(int *)(v418 + 28);
      v206 = (_QWORD *)((char *)v44 + v205);
      v207 = (_QWORD *)((char *)v45 + v205);
      v208 = v207[1];
      *v206 = *v207;
      v206[1] = v208;
      swift_bridgeObjectRetain(v208);
      v58 = v44;
      v59 = v204;
      v60 = 2;
      goto LABEL_60;
    case 3u:
      v85 = *v45;
      *v44 = *v45;
      swift_bridgeObjectRetain(v85);
      v58 = v44;
      v59 = v46;
      v60 = 3;
      goto LABEL_60;
    case 4u:
      *(_OWORD *)v44 = *(_OWORD *)v45;
      v86 = v45[2];
      v44[2] = v86;
      swift_bridgeObjectRetain(v86);
      v58 = v44;
      v59 = v46;
      v60 = 4;
      goto LABEL_60;
    case 5u:
      v87 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v44, v45, v87);
      v88 = (int *)type metadata accessor for MapComponentViewModel(0);
      v89 = v88[5];
      v90 = (char *)v44 + v89;
      v91 = (char *)v45 + v89;
      v92 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v88[6];
      v426 = (_QWORD *)((char *)v44 + v93);
      v94 = (_QWORD *)((char *)v45 + v93);
      v95 = type metadata accessor for WeatherData(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v94, 1, v95))
      {
        v96 = sub_1000BA294(&qword_100BC3460);
        memcpy(v426, v94, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        goto LABEL_59;
      }
      v411 = v88;
      *(_QWORD *)(v38 - 88) = v46;
      v440 = v42;
      v209 = v94[1];
      *v426 = *v94;
      v426[1] = v209;
      v424 = (int *)v95;
      v210 = *(int *)(v95 + 20);
      v211 = (char *)v426 + v210;
      v212 = (char *)v94 + v210;
      v213 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v209);
      v416 = v94;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v212, 1, v213))
      {
        v214 = sub_1000BA294(&qword_100BC3340);
        memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v213 - 8) + 16))(v211, v212, v213);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v211, 0, 1, v213);
      }
      v238 = v424[6];
      v239 = (char *)v426 + v238;
      v240 = (char *)v416 + v238;
      v241 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 16))(v239, v240, v241);
      v242 = v424[7];
      v243 = (char *)v426 + v242;
      v244 = (char *)v416 + v242;
      v245 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v244, 1, v245))
      {
        v246 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
      }
      else
      {
        v247 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 16))(v243, v244, v247);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v243, 0, 1, v245);
      }
      v248 = v424[8];
      v249 = (_QWORD *)((char *)v426 + v248);
      v250 = (_QWORD *)((char *)v416 + v248);
      v251 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v250, v251);
      if (EnumCaseMultiPayload == 1)
      {
        v257 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v257 - 8) + 16))(v249, v250, v257);
        v254 = v249;
        v255 = v251;
        v256 = 1;
        goto LABEL_47;
      }
      if (!EnumCaseMultiPayload)
      {
        v253 = v250[1];
        *v249 = *v250;
        v249[1] = v253;
        swift_bridgeObjectRetain(v253);
        v254 = v249;
        v255 = v251;
        v256 = 0;
LABEL_47:
        swift_storeEnumTagMultiPayload(v254, v255, v256);
        goto LABEL_49;
      }
      memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
LABEL_49:
      v42 = v440;
      v46 = *(_QWORD *)(v38 - 88);
      v258 = v424[9];
      v259 = (char *)v426 + v258;
      v260 = (char *)v416 + v258;
      v261 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v260, 1, v261))
      {
        v262 = sub_1000BA294(&qword_100BC3350);
        memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
        v263 = (uint64_t)v426;
        v88 = v411;
      }
      else
      {
        v407 = v261;
        v417 = (uint64_t)v259;
        v264 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v260, 1, v264))
        {
          v265 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v264 - 8) + 16))(v259, v260, v264);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v259, 0, 1, v264);
        }
        v266 = *(int *)(v261 + 20);
        v267 = &v259[v266];
        v268 = &v260[v266];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v260[v266], 1, v264))
        {
          v269 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v264 - 8) + 16))(v267, v268, v264);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v267, 0, 1, v264);
        }
        v263 = (uint64_t)v426;
        v88 = v411;
        _s7Weather24LocationCompositionStateOwst_0(v417, 0, 1, v407);
        v46 = *(_QWORD *)(v38 - 88);
      }
      _s7Weather24LocationCompositionStateOwst_0(v263, 0, 1, (uint64_t)v424);
LABEL_59:
      v270 = v88[7];
      v271 = (_QWORD *)((char *)v44 + v270);
      v272 = (_QWORD *)((char *)v45 + v270);
      v273 = v272[1];
      *v271 = *v272;
      v271[1] = v273;
      swift_bridgeObjectRetain(v273);
      v58 = v44;
      v59 = v46;
      v60 = 5;
LABEL_60:
      swift_storeEnumTagMultiPayload(v58, v59, v60);
LABEL_61:
      *(_WORD *)(v34 + v42[6]) = *(_WORD *)(v35 + v42[6]);
      v274 = v42[7];
      v275 = (_BYTE *)(v34 + v274);
      v276 = (_BYTE *)(v35 + v274);
      v277 = type metadata accessor for LocationComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v276, 1, v277))
      {
        v278 = sub_1000BA294(&qword_100BDA950);
        memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v276, v277))
        {
          case 0u:
            v279 = type metadata accessor for URL(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v279 - 8) + 16))(v275, v276, v279);
            v280 = sub_1000BA294(&qword_100BC5FE8);
            v275[*(int *)(v280 + 48)] = v276[*(int *)(v280 + 48)];
            v281 = v275;
            v282 = v277;
            v283 = 0;
            goto LABEL_69;
          case 1u:
            v284 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v284 - 8) + 16))(v275, v276, v284);
            v281 = v275;
            v282 = v277;
            v283 = 1;
            goto LABEL_69;
          case 2u:
            v285 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v285 - 8) + 16))(v275, v276, v285);
            v286 = sub_1000BA294(&qword_100BC5FF8);
            v275[*(int *)(v286 + 48)] = v276[*(int *)(v286 + 48)];
            v281 = v275;
            v282 = v277;
            v283 = 2;
            goto LABEL_69;
          case 4u:
            *v275 = *v276;
            v287 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
            v288 = &v275[v287];
            v289 = &v276[v287];
            v290 = type metadata accessor for Location(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v290 - 8) + 16))(v288, v289, v290);
            v281 = v275;
            v282 = v277;
            v283 = 4;
LABEL_69:
            swift_storeEnumTagMultiPayload(v281, v282, v283);
            break;
          default:
            memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v275, 0, 1, v277);
      }
      v291 = v36[5];
      v292 = v36[6];
      v293 = *(_OWORD *)(v35 + v291);
      *(_OWORD *)(v34 + v291) = v293;
      v294 = v34 + v292;
      v295 = v35 + v292;
      v296 = *(_OWORD *)(v35 + v292 + 24);
      *(_OWORD *)(v34 + v292 + 24) = v296;
      v297 = v296;
      v298 = **(void (***)(uint64_t, uint64_t, uint64_t))(v296 - 8);
      swift_unknownObjectRetain(v293);
      v298(v294, v295, v297);
      v299 = v36[8];
      *(_BYTE *)(v34 + v36[7]) = *(_BYTE *)(v35 + v36[7]);
      v300 = v34 + v299;
      v301 = v35 + v299;
      v302 = type metadata accessor for Location.Identifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v302 - 8) + 16))(v300, v301, v302);
      v303 = v36[10];
      *(_QWORD *)(v34 + v36[9]) = *(_QWORD *)(v35 + v36[9]);
      *(_QWORD *)(v34 + v303) = *(_QWORD *)(v35 + v303);
      v304 = v36[12];
      *(_BYTE *)(v34 + v36[11]) = *(_BYTE *)(v35 + v36[11]);
      *(_OWORD *)(v34 + v304) = *(_OWORD *)(v35 + v304);
      v305 = v36[13];
      v306 = v36[14];
      v307 = v34 + v305;
      v308 = v35 + v305;
      *(_BYTE *)(v307 + 16) = *(_BYTE *)(v308 + 16);
      *(_OWORD *)v307 = *(_OWORD *)v308;
      *(_QWORD *)(v307 + 24) = *(_QWORD *)(v308 + 24);
      v309 = v34 + v306;
      v310 = *(_QWORD *)(v35 + v306);
      v311 = *(_QWORD *)(v35 + v306 + 8);
      LOBYTE(v298) = *(_BYTE *)(v35 + v306 + 16);
      swift_retain();
      swift_retain();
      sub_100037094(v310, v311);
      *(_QWORD *)v309 = v310;
      *(_QWORD *)(v309 + 8) = v311;
      *(_BYTE *)(v309 + 16) = (_BYTE)v298;
      v312 = v36[15];
      v313 = v34 + v312;
      v314 = v35 + v312;
      v315 = *(_QWORD *)v314;
      v316 = *(_QWORD *)(v314 + 8);
      LOBYTE(v311) = *(_BYTE *)(v314 + 16);
      sub_100037094(*(_QWORD *)v314, v316);
      *(_QWORD *)v313 = v315;
      *(_QWORD *)(v313 + 8) = v316;
      *(_BYTE *)(v313 + 16) = v311;
      v317 = v36[16];
      v318 = v34 + v317;
      v319 = v35 + v317;
      v320 = *(_QWORD *)v319;
      v321 = *(_QWORD *)(v319 + 8);
      LOBYTE(v311) = *(_BYTE *)(v319 + 16);
      sub_100037094(*(_QWORD *)v319, v321);
      *(_QWORD *)v318 = v320;
      *(_QWORD *)(v318 + 8) = v321;
      *(_BYTE *)(v318 + 16) = v311;
      v322 = v36[17];
      v323 = v36[18];
      v324 = v34 + v322;
      v325 = v35 + v322;
      *(_BYTE *)v324 = *(_BYTE *)v325;
      *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
      v326 = (_QWORD *)(v34 + v323);
      v327 = (_QWORD *)(v35 + v323);
      swift_retain();
      v328 = sub_1000BA294(&qword_100BC2908);
      if (swift_getEnumCaseMultiPayload(v327, v328) == 1)
      {
        v329 = type metadata accessor for LayoutDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v329 - 8) + 16))(v326, v327, v329);
        v330 = 1;
      }
      else
      {
        *v326 = *v327;
        swift_retain();
        v330 = 0;
      }
      swift_storeEnumTagMultiPayload(v326, v328, v330);
      v331 = v36[19];
      v332 = v34 + v331;
      v333 = v35 + v331;
      v334 = *(_QWORD *)v333;
      v335 = *(_BYTE *)(v333 + 8);
      sub_10008D47C(*(_QWORD *)v333, v335);
      *(_QWORD *)v332 = v334;
      *(_BYTE *)(v332 + 8) = v335;
      v336 = v36[20];
      v337 = v34 + v336;
      v338 = v35 + v336;
      v339 = *(_QWORD *)v338;
      v340 = *(_BYTE *)(v338 + 8);
      sub_10008D47C(*(_QWORD *)v338, v340);
      *(_QWORD *)v337 = v339;
      *(_BYTE *)(v337 + 8) = v340;
      v341 = v36[21];
      v342 = (_QWORD *)(v34 + v341);
      v343 = (_QWORD *)(v35 + v341);
      v344 = sub_1000BA294(&qword_100BC37D8);
      if (swift_getEnumCaseMultiPayload(v343, v344) == 1)
      {
        v345 = type metadata accessor for ContentSizeCategory(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v345 - 8) + 16))(v342, v343, v345);
        v346 = 1;
      }
      else
      {
        *v342 = *v343;
        swift_retain();
        v346 = 0;
      }
      swift_storeEnumTagMultiPayload(v342, v344, v346);
      v347 = v36[22];
      v348 = v34 + v347;
      v349 = v35 + v347;
      v350 = *(_QWORD *)v349;
      v351 = *(_BYTE *)(v349 + 8);
      sub_10008D47C(*(_QWORD *)v349, v351);
      *(_QWORD *)v348 = v350;
      *(_BYTE *)(v348 + 8) = v351;
      v352 = v36[23];
      v353 = v34 + v352;
      v354 = v35 + v352;
      v355 = *(_QWORD *)v354;
      v356 = *(_BYTE *)(v354 + 8);
      sub_10008D47C(*(_QWORD *)v354, v356);
      *(_QWORD *)v353 = v355;
      *(_BYTE *)(v353 + 8) = v356;
      v357 = v36[24];
      v358 = v34 + v357;
      v359 = v35 + v357;
      v360 = *(_QWORD *)v359;
      v361 = *(_BYTE *)(v359 + 8);
      sub_10008D47C(*(_QWORD *)v359, v361);
      *(_QWORD *)v358 = v360;
      *(_BYTE *)(v358 + 8) = v361;
      v362 = v36[25];
      v363 = v34 + v362;
      v364 = v35 + v362;
      v365 = *(_QWORD *)v364;
      v366 = *(_BYTE *)(v364 + 8);
      sub_10008D47C(*(_QWORD *)v364, v366);
      *(_QWORD *)v363 = v365;
      *(_BYTE *)(v363 + 8) = v366;
      v367 = v36[26];
      v368 = v34 + v367;
      v369 = v35 + v367;
      v370 = *(_QWORD *)v369;
      v371 = *(_BYTE *)(v369 + 8);
      sub_10008D47C(*(_QWORD *)v369, v371);
      *(_QWORD *)v368 = v370;
      *(_BYTE *)(v368 + 8) = v371;
      v372 = v36[27];
      v373 = v34 + v372;
      v374 = v35 + v372;
      v375 = *(_QWORD *)v374;
      v376 = *(_BYTE *)(v374 + 8);
      sub_10008D47C(*(_QWORD *)v374, v376);
      *(_QWORD *)v373 = v375;
      *(_BYTE *)(v373 + 8) = v376;
      v377 = v36[28];
      v378 = v34 + v377;
      v379 = v35 + v377;
      v380 = sub_1000BA294(&qword_100BC37E0);
      if (swift_getEnumCaseMultiPayload(v379, v380) == 1)
      {
        *(_OWORD *)v378 = *(_OWORD *)v379;
        *(_BYTE *)(v378 + 16) = *(_BYTE *)(v379 + 16);
        *(_BYTE *)(v378 + 17) = *(_BYTE *)(v379 + 17);
        *(_BYTE *)(v378 + 18) = *(_BYTE *)(v379 + 18);
        v381 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
        v382 = v378 + v381;
        v383 = v379 + v381;
        v384 = type metadata accessor for DynamicTypeSize(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v384 - 8) + 16))(v382, v383, v384);
        v385 = 1;
      }
      else
      {
        *(_QWORD *)v378 = *(_QWORD *)v379;
        swift_retain();
        v385 = 0;
      }
      swift_storeEnumTagMultiPayload(v378, v380, v385);
      v386 = v36[29];
      v387 = v36[30];
      v388 = (_QWORD *)(v34 + v386);
      v389 = (uint64_t *)(v35 + v386);
      v390 = *v389;
      v391 = v389[1];
      *v388 = v390;
      v388[1] = v391;
      v392 = (_QWORD *)(v34 + v387);
      v393 = (_QWORD *)(v35 + v387);
      v394 = v393[1];
      *v392 = *v393;
      v392[1] = v394;
      swift_retain();
      swift_retain();
      swift_retain();
      return v34;
    case 6u:
      v97 = v45[1];
      *v44 = *v45;
      v44[1] = v97;
      v98 = *((unsigned __int8 *)v45 + 32);
      swift_bridgeObjectRetain(v97);
      v434 = v42;
      *(_QWORD *)(v38 - 88) = v46;
      if (v98 == 255)
      {
        *((_OWORD *)v44 + 1) = *((_OWORD *)v45 + 1);
        *((_BYTE *)v44 + 32) = *((_BYTE *)v45 + 32);
      }
      else
      {
        v99 = v45[2];
        v100 = v45[3];
        sub_100121DEC(v99, v100, v98);
        v44[2] = v99;
        v44[3] = v100;
        *((_BYTE *)v44 + 32) = v98;
      }
      v215 = v45[5];
      v44[5] = v215;
      v216 = (int *)type metadata accessor for MoonComponentViewModel(0);
      v217 = v216[7];
      v432 = (char *)v44 + v217;
      v218 = (char *)v45 + v217;
      v219 = type metadata accessor for Date(0);
      v220 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v219 - 8) + 16);
      v221 = swift_bridgeObjectRetain(v215);
      v220(v432, v218, v219, v221);
      *((_BYTE *)v44 + v216[8]) = *((_BYTE *)v45 + v216[8]);
      *(_QWORD *)((char *)v44 + v216[9]) = *(_QWORD *)((char *)v45 + v216[9]);
      swift_storeEnumTagMultiPayload(v44, *(_QWORD *)(v38 - 88), 6);
      v42 = v434;
      goto LABEL_61;
    case 7u:
      v101 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v45, v101) == 1)
      {
        v419 = v101;
        v435 = v42;
        v102 = v45[1];
        *v44 = *v45;
        v44[1] = v102;
        v103 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v104 = v103[5];
        v427 = (char *)v44 + v104;
        v105 = (char *)v45 + v104;
        v106 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v102);
        v107 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v106);
        *(_QWORD *)(v38 - 88) = v46;
        if (v107)
        {
          v108 = sub_1000BA294(&qword_100BD4280);
          memcpy(v427, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v427, v105, v106);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v427, 0, 1, v106);
        }
        v222 = v103[6];
        v223 = (_QWORD *)((char *)v44 + v222);
        v224 = (_QWORD *)((char *)v45 + v222);
        v225 = v224[1];
        *v223 = *v224;
        v223[1] = v225;
        v226 = v103[7];
        v227 = (char *)v44 + v226;
        v228 = v103;
        v229 = (char *)v45 + v226;
        v230 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v106 - 8) + 16);
        v231 = swift_bridgeObjectRetain(v225);
        v232 = v229;
        v233 = v228;
        v230(v227, v232, v106, v231);
        v234 = v228[8];
        v235 = (char *)v44 + v234;
        v236 = (char *)v45 + v234;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v45 + v234, 1, v106))
        {
          v237 = sub_1000BA294(&qword_100BD4280);
          memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v230)(v235, v236, v106);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v235, 0, 1, v106);
        }
        v42 = v435;
        *((_BYTE *)v44 + v233[9]) = *((_BYTE *)v45 + v233[9]);
        swift_storeEnumTagMultiPayload(v44, v419, 1);
        v46 = *(_QWORD *)(v38 - 88);
      }
      else
      {
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      v58 = v44;
      v59 = v46;
      v60 = 7;
      goto LABEL_60;
    case 8u:
      v109 = v45[1];
      *v44 = *v45;
      v44[1] = v109;
      v110 = *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      v111 = (char *)v44 + v110;
      v112 = (char *)v45 + v110;
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      v114 = *(_QWORD *)(HourPrecipitationChartViewModel - 8);
      *(_QWORD *)(v38 - 88) = v46;
      v115 = *(void (**)(char *, char *, uint64_t, __n128))(v114 + 16);
      v116 = swift_bridgeObjectRetain(v109);
      v115(v111, v112, HourPrecipitationChartViewModel, v116);
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 8;
      goto LABEL_60;
    case 9u:
      v117 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v44, v45, v117);
      v118 = type metadata accessor for NotificationsOptInComponentViewModel(0);
      *((_BYTE *)v44 + *(int *)(v118 + 20)) = *((_BYTE *)v45 + *(int *)(v118 + 20));
      v58 = v44;
      v59 = v46;
      v60 = 9;
      goto LABEL_60;
    case 0xAu:
      v119 = v45[1];
      *v44 = *v45;
      v44[1] = v119;
      v120 = v45[3];
      v44[2] = v45[2];
      v44[3] = v120;
      v121 = v45[5];
      v44[4] = v45[4];
      v44[5] = v121;
      v122 = v45[7];
      v44[6] = v45[6];
      v44[7] = v122;
      *(_QWORD *)(v38 - 88) = v46;
      v123 = v45[9];
      v44[8] = v45[8];
      v44[9] = v123;
      v124 = v45[10];
      v125 = v45[11];
      v44[10] = v124;
      v44[11] = v125;
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRetain(v122);
      swift_bridgeObjectRetain(v123);
      swift_bridgeObjectRetain(v125);
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 10;
      goto LABEL_60;
    case 0xBu:
      v126 = type metadata accessor for PressureTrend(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v44, v45, v126);
      v127 = (int *)type metadata accessor for PressureComponentViewModel(0);
      v128 = v127[5];
      v129 = (_QWORD *)((char *)v44 + v128);
      v130 = (_QWORD *)((char *)v45 + v128);
      v132 = *v130;
      v131 = v130[1];
      *v129 = v132;
      v129[1] = v131;
      v133 = v127[6];
      v134 = (_QWORD *)((char *)v44 + v133);
      v135 = (_QWORD *)((char *)v45 + v133);
      v136 = v135[1];
      *v134 = *v135;
      v134[1] = v136;
      v137 = v127[7];
      v138 = (_QWORD *)((char *)v44 + v137);
      v139 = (_QWORD *)((char *)v45 + v137);
      v140 = v139[1];
      *v138 = *v139;
      v138[1] = v140;
      *(_QWORD *)((char *)v44 + v127[8]) = *(_QWORD *)((char *)v45 + v127[8]);
      v141 = v127[9];
      v142 = (_QWORD *)((char *)v44 + v141);
      v143 = (_QWORD *)((char *)v45 + v141);
      v144 = v143[1];
      *v142 = *v143;
      v142[1] = v144;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRetain(v140);
      swift_bridgeObjectRetain(v144);
      v58 = v44;
      v59 = v46;
      v60 = 11;
      goto LABEL_60;
    case 0xDu:
      v145 = v45[1];
      *v44 = *v45;
      v44[1] = v145;
      v146 = v45[3];
      v44[2] = v45[2];
      v44[3] = v146;
      v147 = v45[5];
      v420 = v45[4];
      v44[4] = v420;
      v44[5] = v147;
      *(_QWORD *)(v38 - 88) = v46;
      v149 = v45[6];
      v148 = v45[7];
      v44[6] = v149;
      v44[7] = v148;
      v436 = v42;
      v150 = v45[8];
      v44[8] = v150;
      v428 = type metadata accessor for SevereAlertComponentViewModel(0);
      v151 = *(int *)(v428 + 36);
      v408 = (char *)v45 + v151;
      v412 = (char *)v44 + v151;
      v152 = type metadata accessor for WeatherAlert.Prominence(0);
      v404 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v152 - 8) + 16);
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRetain(v146);
      swift_bridgeObjectRetain(v420);
      swift_bridgeObjectRetain(v149);
      v153 = v150;
      v42 = v436;
      v154 = swift_bridgeObjectRetain(v153);
      v404(v412, v408, v152, v154);
      *(_QWORD *)((char *)v44 + *(int *)(v428 + 40)) = *(_QWORD *)((char *)v45 + *(int *)(v428 + 40));
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 13;
      goto LABEL_60;
    case 0xEu:
      v155 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v44, v45, v155);
      v58 = v44;
      v59 = v46;
      v60 = 14;
      goto LABEL_60;
    case 0xFu:
      v156 = v45[1];
      *v44 = *v45;
      v44[1] = v156;
      v157 = v45[3];
      v44[2] = v45[2];
      v44[3] = v157;
      v158 = v45[5];
      v44[4] = v45[4];
      v44[5] = v158;
      v159 = v45[7];
      v44[6] = v45[6];
      v44[7] = v159;
      *(_QWORD *)(v38 - 88) = v46;
      v160 = v45[9];
      v44[8] = v45[8];
      v44[9] = v160;
      v437 = v42;
      v161 = v45[11];
      v44[10] = v45[10];
      v44[11] = v161;
      v429 = v45[13];
      v44[12] = v45[12];
      v44[13] = v429;
      v421 = v45[15];
      v44[14] = v45[14];
      v44[15] = v421;
      v413 = v45[17];
      v44[16] = v45[16];
      v44[17] = v413;
      v409 = v45[19];
      v44[18] = v45[18];
      v44[19] = v409;
      v405 = v45[21];
      v44[20] = v45[20];
      v44[21] = v405;
      v402 = v45[23];
      v44[22] = v45[22];
      v44[23] = v402;
      v162 = v45[24];
      v163 = v45[25];
      v44[24] = v162;
      v44[25] = v163;
      swift_bridgeObjectRetain(v156);
      swift_bridgeObjectRetain(v157);
      swift_bridgeObjectRetain(v158);
      swift_bridgeObjectRetain(v159);
      swift_bridgeObjectRetain(v160);
      v164 = v161;
      v42 = v437;
      swift_bridgeObjectRetain(v164);
      swift_bridgeObjectRetain(v429);
      swift_bridgeObjectRetain(v421);
      swift_bridgeObjectRetain(v413);
      swift_bridgeObjectRetain(v409);
      swift_bridgeObjectRetain(v405);
      swift_bridgeObjectRetain(v402);
      swift_bridgeObjectRetain(v163);
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 15;
      goto LABEL_60;
    case 0x10u:
      *(_OWORD *)v44 = *(_OWORD *)v45;
      v165 = v45[3];
      v44[2] = v45[2];
      v44[3] = v165;
      v166 = type metadata accessor for UVIndexComponentViewModel(0);
      v167 = *(int *)(v166 + 28);
      v422 = (char *)v45 + v167;
      v430 = (char *)v44 + v167;
      v168 = type metadata accessor for WeatherDescription(0);
      *(_QWORD *)(v38 - 88) = v46;
      v169 = v42;
      v170 = v168;
      v171 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v168 - 8) + 16);
      v172 = swift_bridgeObjectRetain(v165);
      v173 = v170;
      v42 = v169;
      v171(v430, v422, v173, v172);
      v174 = *(int *)(v166 + 32);
      v175 = *(_QWORD *)((char *)v45 + v174);
      *(_QWORD *)((char *)v44 + v174) = v175;
      swift_bridgeObjectRetain(v175);
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 16;
      goto LABEL_60;
    case 0x11u:
      v176 = v45[1];
      *v44 = *v45;
      v44[1] = v176;
      v177 = v45[3];
      v44[2] = v45[2];
      v44[3] = v177;
      v178 = v45[5];
      v44[4] = v45[4];
      v44[5] = v178;
      swift_bridgeObjectRetain(v176);
      swift_bridgeObjectRetain(v177);
      swift_bridgeObjectRetain(v178);
      v58 = v44;
      v59 = v46;
      v60 = 17;
      goto LABEL_60;
    case 0x12u:
      *(_QWORD *)(v38 - 88) = v46;
      v179 = v45[1];
      *v44 = *v45;
      v44[1] = v179;
      v438 = v42;
      v180 = v45[3];
      v44[2] = v45[2];
      v44[3] = v180;
      v181 = v45[5];
      v44[4] = v45[4];
      v44[5] = v181;
      v423 = v45[7];
      v44[6] = v45[6];
      v44[7] = v423;
      v414 = v45[9];
      v44[8] = v45[8];
      v44[9] = v414;
      v410 = v45[11];
      v44[10] = v45[10];
      v44[11] = v410;
      v406 = v45[13];
      v44[12] = v45[12];
      v44[13] = v406;
      v403 = v45[15];
      v44[14] = v45[14];
      v44[15] = v403;
      v401 = v45[17];
      v44[16] = v45[16];
      v44[17] = v401;
      v400 = v45[19];
      v44[18] = v45[18];
      v44[19] = v400;
      v182 = v45[21];
      v44[20] = v45[20];
      v44[21] = v182;
      *((_OWORD *)v44 + 11) = *((_OWORD *)v45 + 11);
      v398 = v45[24];
      v399 = v182;
      v44[24] = v398;
      v431 = type metadata accessor for WindComponentViewModel(0);
      v183 = *(int *)(v431 + 68);
      v396 = (char *)v45 + v183;
      v397 = (char *)v44 + v183;
      v184 = type metadata accessor for WindComponentCompassViewModel(0);
      v185 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v184 - 8) + 16);
      swift_bridgeObjectRetain(v179);
      v186 = v180;
      v42 = v438;
      swift_bridgeObjectRetain(v186);
      swift_bridgeObjectRetain(v181);
      swift_bridgeObjectRetain(v423);
      swift_bridgeObjectRetain(v414);
      swift_bridgeObjectRetain(v410);
      swift_bridgeObjectRetain(v406);
      swift_bridgeObjectRetain(v403);
      swift_bridgeObjectRetain(v401);
      swift_bridgeObjectRetain(v400);
      swift_bridgeObjectRetain(v399);
      v187 = swift_bridgeObjectRetain(v398);
      v185(v397, v396, v184, v187);
      v188 = *(int *)(v431 + 72);
      v189 = *(_QWORD *)((char *)v45 + v188);
      *(_QWORD *)((char *)v44 + v188) = v189;
      swift_bridgeObjectRetain(v189);
      v58 = v44;
      v59 = *(_QWORD *)(v38 - 88);
      v60 = 18;
      goto LABEL_60;
    default:
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      goto LABEL_61;
  }
}

uint64_t sub_1000D4AC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  int *v114;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  swift_retain();
  v11 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
    *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
    *(_BYTE *)(v9 + 18) = *(_BYTE *)(v10 + 18);
    v12 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v13 = v9 + v12;
    v14 = v10 + v12;
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = 1;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain();
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 9);
  v22 = *(_BYTE *)(v19 + 8);
  sub_100082BE8(*(_QWORD *)v19, v22, v21);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v22;
  *(_BYTE *)(v18 + 9) = v21;
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    *v24 = *v25;
    swift_retain();
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  v29 = a3[9];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  v32 = sub_1000BA294((uint64_t *)&unk_100C09CD0);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v33 = type metadata accessor for UserInterfaceSizeClass(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v31, 1, v33))
    {
      v34 = sub_1000BA294(&qword_100BC5A68);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      v35 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v35 = 1;
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v30, 0, 1, v33);
    }
  }
  else
  {
    *v30 = *v31;
    swift_retain();
    v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v32, v35);
  v36 = a3[10];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = *(_BYTE *)(v38 + 8);
  sub_10008D47C(*(_QWORD *)v38, v40);
  *(_QWORD *)v37 = v39;
  *(_BYTE *)(v37 + 8) = v40;
  v41 = a3[11];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = *(_QWORD *)v43;
  v45 = *(_BYTE *)(v43 + 8);
  sub_10008D47C(*(_QWORD *)v43, v45);
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = v45;
  v46 = a3[12];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = *(_BYTE *)(v48 + 8);
  sub_10008D47C(*(_QWORD *)v48, v50);
  *(_QWORD *)v47 = v49;
  *(_BYTE *)(v47 + 8) = v50;
  v51 = a3[13];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = *(_QWORD *)v53;
  v55 = *(_QWORD *)(v53 + 8);
  v56 = *(_QWORD *)(v53 + 16);
  v57 = *(_QWORD *)(v53 + 24);
  v58 = *(_BYTE *)(v53 + 32);
  sub_1000D55E4(*(_QWORD *)v53, v55, v56, v57, v58);
  *(_QWORD *)v52 = v54;
  *(_QWORD *)(v52 + 8) = v55;
  *(_QWORD *)(v52 + 16) = v56;
  *(_QWORD *)(v52 + 24) = v57;
  *(_BYTE *)(v52 + 32) = v58;
  v59 = a3[14];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = *(_QWORD *)v61;
  LOBYTE(v55) = *(_BYTE *)(v61 + 8);
  sub_10008D47C(*(_QWORD *)v61, v55);
  *(_QWORD *)v60 = v62;
  *(_BYTE *)(v60 + 8) = v55;
  v63 = a3[15];
  v64 = a3[16];
  v65 = (_QWORD *)(a1 + v63);
  v66 = (_QWORD *)(a2 + v63);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  v68 = a3[17];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = *(_OWORD *)(a2 + v68 + 24);
  *(_OWORD *)(a1 + v68 + 24) = v71;
  v72 = v71;
  v73 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v71 - 8);
  swift_retain();
  v74 = swift_retain();
  v73(v69, v70, v72, v74);
  v75 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v76 = *(_OWORD *)(a2 + v75);
  *(_OWORD *)(a1 + v75) = v76;
  v77 = a3[20];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = *(_OWORD *)(a2 + v77 + 24);
  *(_OWORD *)(a1 + v77 + 24) = v80;
  v81 = v80;
  v82 = **(void (***)(uint64_t, uint64_t, uint64_t))(v80 - 8);
  swift_unknownObjectRetain(v76);
  v82(v78, v79, v81);
  v83 = a3[21];
  v84 = *(_OWORD *)(a2 + v83 + 24);
  *(_OWORD *)(a1 + v83 + 24) = v84;
  (**(void (***)(void))(v84 - 8))();
  v85 = a3[22];
  v86 = a1 + v85;
  v87 = a2 + v85;
  v88 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
  v89 = a3[23];
  v90 = a3[24];
  v91 = a1 + v89;
  v92 = (uint64_t *)(a2 + v89);
  v93 = *v92;
  LOBYTE(v92) = *((_BYTE *)v92 + 8);
  *(_QWORD *)v91 = v93;
  *(_BYTE *)(v91 + 8) = (_BYTE)v92;
  v114 = a3;
  v94 = a1 + v90;
  v95 = *(_QWORD *)(a2 + v90);
  v96 = *(_QWORD *)(a2 + v90 + 8);
  v97 = *(_QWORD *)(a2 + v90 + 16);
  v98 = *(_QWORD *)(a2 + v90 + 24);
  v99 = *(_QWORD *)(a2 + v90 + 32);
  v100 = *(_QWORD *)(a2 + v90 + 40);
  v101 = *(_BYTE *)(a2 + v90 + 48);
  swift_retain();
  sub_1000D55F0(v95, v96, v97, v98, v99, v100, v101);
  *(_QWORD *)v94 = v95;
  *(_QWORD *)(v94 + 8) = v96;
  *(_QWORD *)(v94 + 16) = v97;
  *(_QWORD *)(v94 + 24) = v98;
  *(_QWORD *)(v94 + 32) = v99;
  *(_QWORD *)(v94 + 40) = v100;
  *(_BYTE *)(v94 + 48) = v101;
  v102 = v114[25];
  v103 = v114[26];
  v104 = a1 + v102;
  v105 = a2 + v102;
  *(_BYTE *)v104 = *(_BYTE *)v105;
  *(_QWORD *)(v104 + 8) = *(_QWORD *)(v105 + 8);
  v106 = a1 + v103;
  v107 = *(_QWORD *)(a2 + v103);
  v108 = *(_QWORD *)(a2 + v103 + 8);
  LOBYTE(v97) = *(_BYTE *)(a2 + v103 + 16);
  swift_retain();
  sub_100037094(v107, v108);
  *(_QWORD *)v106 = v107;
  *(_QWORD *)(v106 + 8) = v108;
  *(_BYTE *)(v106 + 16) = v97;
  v109 = v114[27];
  v110 = v114[28];
  v111 = *(void **)(a2 + v109);
  *(_QWORD *)(a1 + v109) = v111;
  *(_QWORD *)(a1 + v110) = *(_QWORD *)(a2 + v110);
  v112 = v111;
  swift_retain();
  return a1;
}

double sub_1000D4FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  double result;

  if ((a10 & 1) == 0)
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000D5004(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v119;
  uint64_t v120;
  uint64_t v121;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_10008D47C(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = sub_1000BA294(&qword_100BC2908);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    *v11 = *v12;
    swift_retain();
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = sub_1000BA294(&qword_100BC37D8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    *v17 = *v18;
    swift_retain();
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_10008D47C(*(_QWORD *)v24, v26);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v26;
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = *(_BYTE *)(v29 + 8);
  sub_10008D47C(*(_QWORD *)v29, v31);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = v31;
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
    *(_BYTE *)(v33 + 17) = *(_BYTE *)(v34 + 17);
    *(_BYTE *)(v33 + 18) = *(_BYTE *)(v34 + 18);
    v36 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v37 = v33 + v36;
    v38 = v34 + v36;
    v39 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    v40 = 1;
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    swift_retain();
    v40 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v35, v40);
  v41 = a3[11];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = *(_QWORD *)v43;
  v45 = *(_BYTE *)(v43 + 8);
  sub_10008D47C(*(_QWORD *)v43, v45);
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = v45;
  v46 = a3[12];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)(a2 + v46);
  v49 = sub_1000BA294(&qword_100BC37E8);
  if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
  {
    v50 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
    v51 = 1;
  }
  else
  {
    *v47 = *v48;
    swift_retain();
    v51 = 0;
  }
  swift_storeEnumTagMultiPayload(v47, v49, v51);
  v52 = a3[13];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)v54;
  v56 = *(_BYTE *)(v54 + 8);
  sub_10008D47C(*(_QWORD *)v54, v56);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = v56;
  v57 = a3[14];
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = *(_QWORD *)v59;
  v61 = *(_QWORD *)(v59 + 8);
  v62 = *(_QWORD *)(v59 + 16);
  v63 = *(_QWORD *)(v59 + 24);
  v121 = a1;
  v64 = *(_BYTE *)(v59 + 32);
  sub_1000D55E4(*(_QWORD *)v59, v61, v62, v63, v64);
  *(_QWORD *)v58 = v60;
  *(_QWORD *)(v58 + 8) = v61;
  *(_QWORD *)(v58 + 16) = v62;
  *(_QWORD *)(v58 + 24) = v63;
  *(_BYTE *)(v58 + 32) = v64;
  v65 = a3[15];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)v67;
  v69 = *(_QWORD *)(v67 + 8);
  v70 = *(_QWORD *)(v67 + 16);
  v71 = *(_QWORD *)(v67 + 24);
  v119 = a3;
  v72 = *(_QWORD *)(v67 + 32);
  v73 = *(_QWORD *)(v67 + 40);
  v74 = *(_BYTE *)(v67 + 48);
  sub_1000D55F0(*(_QWORD *)v67, v69, v70, v71, v72, v73, v74);
  *(_QWORD *)v66 = v68;
  *(_QWORD *)(v66 + 8) = v69;
  *(_QWORD *)(v66 + 16) = v70;
  *(_QWORD *)(v66 + 24) = v71;
  *(_QWORD *)(v66 + 32) = v72;
  *(_QWORD *)(v66 + 40) = v73;
  *(_BYTE *)(v66 + 48) = v74;
  v75 = v119[16];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v78 = *(_QWORD *)(a2 + v75 + 8);
  *(_QWORD *)v76 = *(_QWORD *)(a2 + v75);
  *(_QWORD *)(v76 + 8) = v78;
  v79 = *(_QWORD *)(a2 + v75 + 16);
  v80 = *(_QWORD *)(a2 + v75 + 24);
  v81 = *(_QWORD *)(a2 + v75 + 32);
  v82 = *(_QWORD *)(a2 + v75 + 40);
  LOBYTE(v72) = *(_BYTE *)(a2 + v75 + 48);
  swift_bridgeObjectRetain(v78);
  sub_100176D88(v79, v80, v81, v82, v72);
  *(_QWORD *)(v76 + 16) = v79;
  *(_QWORD *)(v76 + 24) = v80;
  *(_QWORD *)(v76 + 32) = v81;
  *(_QWORD *)(v76 + 40) = v82;
  *(_BYTE *)(v76 + 48) = v72;
  v83 = *(_QWORD *)(v77 + 64);
  *(_QWORD *)(v76 + 56) = *(_QWORD *)(v77 + 56);
  *(_QWORD *)(v76 + 64) = v83;
  v84 = *(_QWORD *)(v77 + 80);
  *(_QWORD *)(v76 + 72) = *(_QWORD *)(v77 + 72);
  *(_QWORD *)(v76 + 80) = v84;
  v85 = *(_QWORD *)(v77 + 96);
  *(_QWORD *)(v76 + 88) = *(_QWORD *)(v77 + 88);
  *(_QWORD *)(v76 + 96) = v85;
  v86 = *(_QWORD *)(v77 + 112);
  *(_QWORD *)(v76 + 104) = *(_QWORD *)(v77 + 104);
  *(_QWORD *)(v76 + 112) = v86;
  v87 = *(_QWORD *)(v77 + 128);
  *(_QWORD *)(v76 + 120) = *(_QWORD *)(v77 + 120);
  *(_QWORD *)(v76 + 128) = v87;
  *(_BYTE *)(v76 + 136) = *(_BYTE *)(v77 + 136);
  *(_WORD *)(v76 + 137) = *(_WORD *)(v77 + 137);
  v88 = *(_QWORD *)(v77 + 152);
  *(_QWORD *)(v76 + 144) = *(_QWORD *)(v77 + 144);
  *(_QWORD *)(v76 + 152) = v88;
  *(_BYTE *)(v76 + 160) = *(_BYTE *)(v77 + 160);
  *(_BYTE *)(v76 + 161) = *(_BYTE *)(v77 + 161);
  v89 = v119[17];
  v120 = a2;
  v90 = a1 + v89;
  v91 = v120 + v89;
  v92 = *(_QWORD *)(v120 + v89);
  v93 = *(_QWORD *)(v120 + v89 + 8);
  LOBYTE(v76) = *(_BYTE *)(v120 + v89 + 16);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v88);
  sub_1000D55D4(v92, v93, v76);
  *(_QWORD *)v90 = v92;
  *(_QWORD *)(v90 + 8) = v93;
  *(_BYTE *)(v90 + 16) = v76;
  v94 = *(_QWORD *)(v91 + 24);
  *(_QWORD *)(v90 + 24) = v94;
  v95 = v119[18];
  v96 = v121 + v95;
  v97 = v120 + v95;
  v98 = *(_QWORD *)(v120 + v95);
  v99 = *(_QWORD *)(v120 + v95 + 8);
  LOBYTE(v85) = *(_BYTE *)(v120 + v95 + 16);
  swift_bridgeObjectRetain(v94);
  sub_1000D55D4(v98, v99, v85);
  *(_QWORD *)v96 = v98;
  *(_QWORD *)(v96 + 8) = v99;
  *(_BYTE *)(v96 + 16) = v85;
  v100 = *(_QWORD *)(v97 + 24);
  *(_QWORD *)(v96 + 24) = v100;
  v101 = v119[19];
  v102 = v121 + v101;
  v103 = v120 + v101;
  v104 = *(_QWORD *)(v120 + v101 + 24);
  swift_bridgeObjectRetain(v100);
  if (v104)
  {
    v105 = *(_QWORD *)v103;
    v106 = *(_QWORD *)(v103 + 8);
    v107 = *(_BYTE *)(v103 + 16);
    sub_1000D55D4(*(_QWORD *)v103, v106, v107);
    *(_QWORD *)v102 = v105;
    *(_QWORD *)(v102 + 8) = v106;
    *(_BYTE *)(v102 + 16) = v107;
    v108 = *(_QWORD *)(v103 + 24);
    *(_QWORD *)(v102 + 24) = v108;
    swift_bridgeObjectRetain(v108);
  }
  else
  {
    v109 = *(_OWORD *)(v103 + 16);
    *(_OWORD *)v102 = *(_OWORD *)v103;
    *(_OWORD *)(v102 + 16) = v109;
  }
  v110 = v119[21];
  *(_QWORD *)(v121 + v119[20]) = *(_QWORD *)(v120 + v119[20]);
  v111 = v121 + v110;
  v112 = v120 + v110;
  v113 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v111, v112, v113);
  v114 = v119[23];
  *(_QWORD *)(v121 + v119[22]) = *(_QWORD *)(v120 + v119[22]);
  v115 = v121 + v114;
  v116 = v120 + v114;
  v117 = sub_1000BA294(&qword_100BC37F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(v115, v116, v117);
  return v121;
}

void sub_1000D55D4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_retain(a1);
  else
    swift_bridgeObjectRetain(a2);
}

double sub_1000D55E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) == 0)
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

double sub_1000D55F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  double result;

  if ((a7 & 1) == 0)
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000D55FC(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  void (*v25)(char *, uint64_t);

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = type metadata accessor for ViewState.SecondaryViewState(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (uint64_t)a1 + a2[8];
  v8 = type metadata accessor for SearchViewState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    v9 = (_QWORD *)(v7 + *(int *)(v8 + 20));
    v10 = type metadata accessor for SearchViewState.ViewState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*v9);
    }
    else if (!EnumCaseMultiPayload)
    {
      v12 = type metadata accessor for CodableError(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
    }
    v13 = v7 + *(int *)(v8 + 28);
    v14 = type metadata accessor for Location(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  v15 = (char *)a1 + a2[9];
  v16 = &v15[*(int *)(type metadata accessor for DisplayMetrics(0) + 36)];
  v17 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (char *)a1 + a2[10];
  v19 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v20 = &v18[v19[6]];
  v21 = type metadata accessor for WeatherMapOverlayKind(0);
  v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v25(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v19[7] + 8]);
  v22 = (uint64_t)&v18[v19[8]];
  v23 = sub_1000BA294(&qword_100BC5FD0);
  result = _s7Weather24LocationCompositionStateOwet_0(v22, 3, v23);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v25)(v22 + *(int *)(v23 + 48), v21);
  return result;
}

_QWORD *sub_1000D581C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int *v61;

  v3 = a3;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for ViewState.SecondaryViewState(0);
  swift_retain();
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    *v7 = *v8;
    swift_retain();
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  v12 = v3[7];
  *((_BYTE *)a1 + v3[6]) = *((_BYTE *)a2 + v3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = v3[8];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = (int *)type metadata accessor for SearchViewState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, (uint64_t)v16))
  {
    v17 = sub_1000BA294(&qword_100BC5F78);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_16;
  }
  v18 = v3;
  v19 = v15[1];
  *v14 = *v15;
  v14[1] = v19;
  v20 = v16[5];
  v21 = (_QWORD *)((char *)v14 + v20);
  v22 = (_QWORD *)((char *)v15 + v20);
  v23 = type metadata accessor for SearchViewState.ViewState(0);
  swift_bridgeObjectRetain(v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v23);
  if (EnumCaseMultiPayload == 1)
  {
    v29 = *v22;
    *v21 = *v22;
    swift_bridgeObjectRetain(v29);
    v26 = v21;
    v27 = v23;
    v28 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      goto LABEL_12;
    }
    v25 = type metadata accessor for CodableError(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v21, v22, v25);
    v26 = v21;
    v27 = v23;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
LABEL_12:
  *((_BYTE *)v14 + v16[6]) = *((_BYTE *)v15 + v16[6]);
  v30 = v16[7];
  v31 = (char *)v14 + v30;
  v32 = (char *)v15 + v30;
  v33 = type metadata accessor for Location(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_1000BA294(&qword_100BC35F8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v31, 0, 1, v33);
  }
  v3 = v18;
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, (uint64_t)v16);
LABEL_16:
  v35 = v3[9];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)((char *)a2 + v35);
  v36[16] = *((_BYTE *)a2 + v35 + 16);
  v36[17] = *((_BYTE *)a2 + v35 + 17);
  v36[18] = *((_BYTE *)a2 + v35 + 18);
  v38 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v39 = &v36[v38];
  v40 = &v37[v38];
  v41 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  v61 = v3;
  v42 = v3[10];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_WORD *)((char *)a1 + v42) = *(_WORD *)((char *)a2 + v42);
  v45 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v46 = v45[6];
  v47 = &v43[v46];
  v48 = &v44[v46];
  v49 = type metadata accessor for WeatherMapOverlayKind(0);
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  v50(v47, v48, v49);
  v51 = v45[7];
  v52 = &v43[v51];
  v53 = &v44[v51];
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *((_QWORD *)v52 + 1) = v54;
  v55 = v45[8];
  v56 = &v43[v55];
  v57 = &v44[v55];
  swift_bridgeObjectRetain(v54);
  v58 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 3, v58))
  {
    v59 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    *v56 = *v57;
    v50(&v56[*(int *)(v58 + 48)], &v57[*(int *)(v58 + 48)], v49);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 3, v58);
  }
  v43[v45[9]] = v44[v45[9]];
  *((_BYTE *)a1 + v61[11]) = *((_BYTE *)a2 + v61[11]);
  return a1;
}

uint64_t type metadata accessor for DisplayMetrics(uint64_t a1)
{
  uint64_t result;

  result = qword_100C127E8;
  if (!qword_100C127E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DisplayMetrics);
  return result;
}

uint64_t type metadata accessor for ViewState.SecondaryViewState(uint64_t a1)
{
  return sub_100098190(a1, qword_100C03FF8, (uint64_t)&nominal type descriptor for ViewState.SecondaryViewState);
}

uint64_t type metadata accessor for WeatherMapPresentationState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD24C0, (uint64_t)&nominal type descriptor for WeatherMapPresentationState);
}

uint64_t type metadata accessor for SearchViewState.ViewState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD02A0, (uint64_t)&nominal type descriptor for SearchViewState.ViewState);
}

uint64_t sub_1000D5C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100267B64);
}

uint64_t type metadata accessor for SearchViewState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BD0330, (uint64_t)&nominal type descriptor for SearchViewState);
}

uint64_t type metadata accessor for WeatherMapTrackingState(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BD2458, (uint64_t)&nominal type descriptor for WeatherMapTrackingState);
}

uint64_t sub_1000D5CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100267C00);
}

uint64_t sub_1000D5CB4(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  int v39;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  void (*v46)(char *, uint64_t, __n128);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  sub_1000B15F8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = type metadata accessor for LocationComponentHeaderViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v4, v5))
  {
    case 0u:
    case 4u:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      v6 = v4 + 6;
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      v6 = v4 + 10;
      goto LABEL_6;
    case 2u:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      swift_bridgeObjectRelease(v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      swift_bridgeObjectRelease(v4[9]);
      swift_bridgeObjectRelease(v4[11]);
      v6 = v4 + 14;
      goto LABEL_6;
    case 3u:
      v7 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
      v8 = (_QWORD *)((char *)v4
                    + *(int *)(type metadata accessor for LocationComponentHeaderViewModel.Description(0) + 20));
      swift_bridgeObjectRelease(v8[1]);
      swift_bridgeObjectRelease(v8[3]);
      v6 = v8 + 6;
LABEL_6:
      swift_bridgeObjectRelease(*v6);
      break;
    default:
      break;
  }
  v9 = type metadata accessor for LocationComponentContainerViewModel(0);
  v10 = (char *)v4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for LocationComponentViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 11));
      v12 = *((_QWORD *)v10 + 13);
      goto LABEL_51;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)v10);
      v13 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
      v14 = &v10[v13[5]];
      v15 = sub_1000BA294(&qword_100BC4E68);
      v16 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
      v16(v14, v15);
      v16(&v10[v13[6]], v15);
      v16(&v10[v13[7]], v15);
      v17 = v13[8];
      goto LABEL_34;
    case 2u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      v18 = (int *)type metadata accessor for FeelsLikeComponentViewModel(0);
      v19 = (uint64_t)&v10[v18[6]];
      v20 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
        v21 = v19 + *(int *)(v20 + 20);
        v22 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
        v23 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        swift_bridgeObjectRelease(*(_QWORD *)(v21 + *(int *)(v23 + 32) + 8));
      }
      goto LABEL_49;
    case 3u:
      v12 = *(_QWORD *)v10;
      goto LABEL_51;
    case 4u:
      v12 = *((_QWORD *)v10 + 2);
      goto LABEL_51;
    case 5u:
      v24 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v10, v24);
      v18 = (int *)type metadata accessor for MapComponentViewModel(0);
      v25 = &v10[v18[5]];
      v26 = type metadata accessor for Location(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      v27 = (uint64_t)&v10[v18[6]];
      v28 = (int *)type metadata accessor for WeatherData(0);
      if (!_s7Weather24LocationCompositionStateOwet_0(v27, 1, (uint64_t)v28))
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v27 + 8));
        v29 = v27 + v28[5];
        v30 = type metadata accessor for Locale(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v29, 1, v30))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
        v31 = v27 + v28[6];
        v32 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
        v33 = v27 + v28[7];
        v34 = sub_1000BA294(&qword_100BC3348);
        if (!_s7Weather24LocationCompositionStateOwet_0(v33, 1, v34))
        {
          v35 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v33, v35);
        }
        v36 = v27 + v28[8];
        v37 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v37);
        if (EnumCaseMultiPayload == 1)
        {
          v57 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v36, v57);
        }
        else if (!EnumCaseMultiPayload)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v36 + 8));
        }
        v58 = v27 + v28[9];
        v59 = type metadata accessor for WeatherDataOverrides(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v58, 1, v59))
        {
          v60 = type metadata accessor for Date(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v58, 1, v60))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v58, v60);
          v61 = v58 + *(int *)(v59 + 20);
          if (!_s7Weather24LocationCompositionStateOwet_0(v61, 1, v60))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v61, v60);
        }
      }
LABEL_49:
      v49 = v18[7];
      goto LABEL_50;
    case 6u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      v39 = v10[32];
      if (v39 != 255)
        sub_100121E04(*((_QWORD *)v10 + 2), *((_QWORD *)v10 + 3), v39);
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      v10 += *(int *)(type metadata accessor for MoonComponentViewModel(0) + 28);
      HourPrecipitationChartViewModel = type metadata accessor for Date(0);
      goto LABEL_37;
    case 7u:
      v41 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v10, v41) == 1)
      {
        swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
        v42 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v43 = (uint64_t)&v10[v42[5]];
        v44 = type metadata accessor for URL(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v43, 1, v44))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
        v45 = swift_bridgeObjectRelease(*(_QWORD *)&v10[v42[6] + 8]);
        v46 = *(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 8);
        v46(&v10[v42[7]], v44, v45);
        v47 = (uint64_t)&v10[v42[8]];
        if (!_s7Weather24LocationCompositionStateOwet_0(v47, 1, v44))
          ((void (*)(uint64_t, uint64_t))v46)(v47, v44);
      }
      break;
    case 8u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      v10 += *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      goto LABEL_37;
    case 9u:
      HourPrecipitationChartViewModel = type metadata accessor for Location(0);
      goto LABEL_37;
    case 0xAu:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 9));
      v12 = *((_QWORD *)v10 + 11);
      goto LABEL_51;
    case 0xBu:
      v48 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v10, v48);
      v13 = (int *)type metadata accessor for PressureComponentViewModel(0);
      swift_bridgeObjectRelease(*(_QWORD *)&v10[v13[5] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v10[v13[6] + 8]);
      v17 = v13[7];
LABEL_34:
      swift_bridgeObjectRelease(*(_QWORD *)&v10[v17 + 8]);
      v49 = v13[9];
LABEL_50:
      v12 = *(_QWORD *)&v10[v49 + 8];
      goto LABEL_51;
    case 0xDu:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 4));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 6));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 8));
      v10 += *(int *)(type metadata accessor for SevereAlertComponentViewModel(0) + 36);
      HourPrecipitationChartViewModel = type metadata accessor for WeatherAlert.Prominence(0);
      goto LABEL_37;
    case 0xEu:
      HourPrecipitationChartViewModel = type metadata accessor for SunriseSunsetViewModel(0);
LABEL_37:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(HourPrecipitationChartViewModel - 8) + 8))(v10, HourPrecipitationChartViewModel);
      break;
    case 0xFu:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 23));
      v12 = *((_QWORD *)v10 + 25);
      goto LABEL_51;
    case 0x10u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      v50 = type metadata accessor for UVIndexComponentViewModel(0);
      v51 = &v10[*(int *)(v50 + 28)];
      v52 = type metadata accessor for WeatherDescription(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
      v53 = *(int *)(v50 + 32);
      goto LABEL_42;
    case 0x11u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      v12 = *((_QWORD *)v10 + 5);
      goto LABEL_51;
    case 0x12u:
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 11));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 13));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 15));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 17));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 19));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 21));
      swift_bridgeObjectRelease(*((_QWORD *)v10 + 24));
      v54 = type metadata accessor for WindComponentViewModel(0);
      v55 = &v10[*(int *)(v54 + 68)];
      v56 = type metadata accessor for WindComponentCompassViewModel(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
      v53 = *(int *)(v54 + 72);
LABEL_42:
      v12 = *(_QWORD *)&v10[v53];
LABEL_51:
      swift_bridgeObjectRelease(v12);
      break;
    default:
      break;
  }
  v62 = (uint64_t)v4 + *(int *)(v9 + 28);
  v63 = type metadata accessor for LocationComponentAction(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v62, 1, v63))
  {
    switch(swift_getEnumCaseMultiPayload(v62, v63))
    {
      case 0u:
        v64 = type metadata accessor for URL(0);
        goto LABEL_58;
      case 1u:
        v64 = type metadata accessor for WeatherMapOverlayKind(0);
        goto LABEL_58;
      case 2u:
        v64 = type metadata accessor for DetailCondition(0);
        goto LABEL_58;
      case 4u:
        v62 += *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
        v64 = type metadata accessor for Location(0);
LABEL_58:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v62, v64);
        break;
      default:
        break;
    }
  }
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_release(*(_QWORD *)(a1 + a2[8] + 8));
  swift_release(*(_QWORD *)(a1 + a2[9] + 8));
  v65 = (_QWORD *)(a1 + a2[10]);
  swift_release(*v65);
  return swift_release(v65[1]);
}

void sub_1000D65FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10008D47C(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_10008D47C(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = a2 + *(int *)(a3 + 24);
  v11 = type metadata accessor for LocationComponentHeaderViewModel(0);
  v12 = (char *)sub_1000D66A8 + 4 * byte_10099FA5D[swift_getEnumCaseMultiPayload(v10, v11)];
  __asm { BR              X10 }
}

uint64_t sub_1000D66A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__dst,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t HourPrecipitationChartViewModel;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t, __n128);
  __n128 v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __n128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  void (*v205)(char *, char *, uint64_t, __n128);
  __n128 v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void (*v224)(char *, char *, uint64_t, __n128);
  uint64_t v225;
  __n128 v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  int *v246;
  _BYTE *v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(char *, char *, uint64_t, __n128);
  __n128 v272;
  int *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  void (*v301)(char *, char *, uint64_t, __n128);
  __n128 v302;
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char *v309;
  void (*v310)(char *, char *, uint64_t, __n128);
  __n128 v311;
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  int EnumCaseMultiPayload;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void (*v360)(char *, char *, uint64_t, __n128);
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  int *v377;
  _QWORD *v378;
  uint64_t v379;
  int *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int *v391;
  int *v392;
  int *v393;
  int *v394;
  int *v395;
  int *v396;
  int *v397;
  int *v398;
  int *v399;
  int *v400;

  v45 = *(_QWORD *)(v41 + 8);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v45;
  v46 = *(_QWORD *)(v41 + 24);
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
  *(_QWORD *)(v40 + 24) = v46;
  *(_BYTE *)(v40 + 32) = *(_BYTE *)(v41 + 32);
  v47 = *(_QWORD *)(v41 + 48);
  *(_QWORD *)(v40 + 40) = *(_QWORD *)(v41 + 40);
  *(_QWORD *)(v40 + 48) = v47;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_storeEnumTagMultiPayload(v40, v42, v43);
  v48 = (int *)type metadata accessor for LocationComponentContainerViewModel(0);
  v49 = v48[5];
  v50 = (_QWORD *)(v40 + v49);
  v51 = (_QWORD *)(v41 + v49);
  v52 = type metadata accessor for LocationComponentViewModel(0);
  switch(swift_getEnumCaseMultiPayload(v51, v52))
  {
    case 0u:
      *v50 = *v51;
      *(_OWORD *)(v50 + 1) = *(_OWORD *)(v51 + 1);
      *(_OWORD *)(v50 + 3) = *(_OWORD *)(v51 + 3);
      v53 = v51[5];
      v54 = v51[6];
      v50[5] = v53;
      v50[6] = v54;
      v56 = v51[7];
      v55 = v51[8];
      v50[7] = v56;
      v50[8] = v55;
      v57 = v38;
      v59 = v51[9];
      v58 = v51[10];
      v50[9] = v59;
      v50[10] = v58;
      *(_QWORD *)(v44 - 104) = v52;
      v60 = v39;
      v61 = v51[11];
      v50[11] = v61;
      *((_WORD *)v50 + 48) = *((_WORD *)v51 + 48);
      v62 = v51[13];
      v50[13] = v62;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v56);
      v63 = v59;
      v38 = v57;
      swift_bridgeObjectRetain(v63);
      v64 = v61;
      v39 = v60;
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v62);
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 0;
      goto LABEL_26;
    case 1u:
      v68 = *v51;
      *v50 = *v51;
      v69 = type metadata accessor for DailyForecastComponentViewModel(0);
      *(_QWORD *)(v44 - 96) = v38;
      v70 = (int *)v69;
      v71 = *(int *)(v69 + 20);
      v72 = v39;
      v73 = (char *)v50 + v71;
      v391 = v48;
      v74 = (char *)v51 + v71;
      swift_bridgeObjectRetain(v68);
      v75 = sub_1000BA294(&qword_100BC4E68);
      v76 = *(_QWORD *)(v75 - 8);
      *(_QWORD *)(v44 - 104) = v52;
      v77 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
      v78 = v73;
      v39 = v72;
      v79 = v74;
      v48 = v391;
      v77(v78, v79, v75);
      v77((char *)v50 + v70[6], (char *)v51 + v70[6], v75);
      v77((char *)v50 + v70[7], (char *)v51 + v70[7], v75);
      v80 = v70[8];
      v81 = (_QWORD *)((char *)v50 + v80);
      v82 = (_QWORD *)((char *)v51 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      v84 = v70[9];
      v38 = *(int **)(v44 - 96);
      v85 = (_QWORD *)((char *)v50 + v84);
      v86 = (_QWORD *)((char *)v51 + v84);
      v87 = v86[1];
      *v85 = *v86;
      v85[1] = v87;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 1;
      goto LABEL_26;
    case 2u:
      v392 = v48;
      *(_QWORD *)(v44 - 96) = v38;
      v88 = v51[1];
      *v50 = *v51;
      v50[1] = v88;
      v89 = v51[3];
      v50[2] = v51[2];
      v50[3] = v89;
      v90 = type metadata accessor for FeelsLikeComponentViewModel(0);
      v91 = *(int *)(v90 + 24);
      v372 = v90;
      v378 = (_QWORD *)((char *)v50 + v91);
      v92 = (_QWORD *)((char *)v51 + v91);
      v93 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v89);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v92, 1, v93))
      {
        v94 = sub_1000BA294(&qword_100BC3360);
        memcpy(v378, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        v265 = v92[1];
        *v378 = *v92;
        v378[1] = v265;
        v369 = v93;
        v266 = *(int *)(v93 + 20);
        v267 = (char *)v378 + v266;
        v390 = v39;
        v268 = (char *)v92 + v266;
        v269 = type metadata accessor for TemperatureScaleConfiguration(0);
        v270 = v52;
        v271 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v269 - 8) + 16);
        v272 = swift_bridgeObjectRetain(v265);
        v271(v267, v268, v269, v272);
        v52 = v270;
        v273 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v267[v273[5]] = *(_QWORD *)&v268[v273[5]];
        *(_QWORD *)&v267[v273[6]] = *(_QWORD *)&v268[v273[6]];
        *(_QWORD *)&v267[v273[7]] = *(_QWORD *)&v268[v273[7]];
        v274 = v273[8];
        v275 = &v267[v274];
        v276 = &v268[v274];
        v278 = *(_QWORD *)v276;
        v277 = *((_QWORD *)v276 + 1);
        *(_QWORD *)v275 = v278;
        *((_QWORD *)v275 + 1) = v277;
        v279 = v273[9];
        LOBYTE(v278) = v268[v279];
        v39 = v390;
        v267[v279] = v278;
        swift_bridgeObjectRetain(v277);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v378, 0, 1, v369);
      }
      v38 = *(int **)(v44 - 96);
      v108 = *(_QWORD *)(v44 - 88);
      v48 = v392;
      v280 = *(int *)(v372 + 28);
      v281 = (_QWORD *)((char *)v50 + v280);
      v282 = (_QWORD *)((char *)v51 + v280);
      v283 = v282[1];
      *v281 = *v282;
      v281[1] = v283;
      swift_bridgeObjectRetain(v283);
      v284 = v50;
      v285 = v52;
      v286 = 2;
      goto LABEL_73;
    case 3u:
      v95 = *v51;
      *v50 = *v51;
      swift_bridgeObjectRetain(v95);
      v65 = v50;
      v66 = v52;
      v67 = 3;
      goto LABEL_26;
    case 4u:
      *(_OWORD *)v50 = *(_OWORD *)v51;
      v96 = v51[2];
      v50[2] = v96;
      swift_bridgeObjectRetain(v96);
      v65 = v50;
      v66 = v52;
      v67 = 4;
      goto LABEL_26;
    case 5u:
      *(_QWORD *)(v44 - 104) = v52;
      *(_QWORD *)(v44 - 96) = v38;
      v97 = type metadata accessor for WeatherMapOverlayKind(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v50, v51, v97);
      v98 = type metadata accessor for MapComponentViewModel(0);
      v99 = *(int *)(v98 + 20);
      v100 = (char *)v50 + v99;
      v101 = (char *)v51 + v99;
      v102 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
      v379 = v98;
      v103 = *(int *)(v98 + 24);
      v104 = (_QWORD *)((char *)v50 + v103);
      v105 = (_QWORD *)((char *)v51 + v103);
      v106 = type metadata accessor for WeatherData(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v105, 1, v106))
      {
        v107 = sub_1000BA294(&qword_100BC3460);
        memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
        v38 = *(int **)(v44 - 96);
        v108 = *(_QWORD *)(v44 - 88);
        v109 = *(_QWORD *)(v44 - 104);
        goto LABEL_72;
      }
      v400 = v48;
      v287 = v105;
      v288 = *v105;
      v289 = v105[1];
      *v104 = v288;
      v104[1] = v289;
      v370 = v287;
      v377 = (int *)v106;
      v290 = *(int *)(v106 + 20);
      v291 = (char *)v104 + v290;
      v292 = (char *)v287 + v290;
      v293 = type metadata accessor for Locale(0);
      swift_bridgeObjectRetain(v289);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v292, 1, v293))
      {
        v294 = sub_1000BA294(&qword_100BC3340);
        memcpy(v291, v292, *(_QWORD *)(*(_QWORD *)(v294 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v293 - 8) + 16))(v291, v292, v293);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v291, 0, 1, v293);
      }
      v316 = v377[6];
      v317 = (char *)v104 + v316;
      v318 = (uint64_t)v370 + v316;
      v319 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v319 - 8) + 16))(v317, v318, v319);
      v320 = v377[7];
      v321 = (char *)v104 + v320;
      v322 = (char *)v370 + v320;
      v363 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v322, 1, v363))
      {
        v323 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v321, v322, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
      }
      else
      {
        v324 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v324 - 8) + 16))(v321, v322, v324);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v321, 0, 1, v363);
      }
      v38 = *(int **)(v44 - 96);
      v325 = v377[8];
      v326 = (_QWORD *)((char *)v104 + v325);
      v327 = (uint64_t *)((char *)v370 + v325);
      v328 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v327, v328);
      if (EnumCaseMultiPayload == 1)
      {
        v334 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v334 - 8) + 16))(v326, v327, v334);
        v331 = v326;
        v332 = v328;
        v333 = 1;
        goto LABEL_60;
      }
      if (!EnumCaseMultiPayload)
      {
        v330 = v327[1];
        *v326 = *v327;
        v326[1] = v330;
        swift_bridgeObjectRetain(v330);
        v331 = v326;
        v332 = v328;
        v333 = 0;
LABEL_60:
        swift_storeEnumTagMultiPayload(v331, v332, v333);
        goto LABEL_62;
      }
      memcpy(v326, v327, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
LABEL_62:
      v335 = v377[9];
      v336 = (char *)v104 + v335;
      v337 = (char *)v370 + v335;
      v338 = type metadata accessor for WeatherDataOverrides(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v337, 1, v338))
      {
        v339 = (uint64_t)v104;
        v340 = sub_1000BA294(&qword_100BC3350);
        memcpy(v336, v337, *(_QWORD *)(*(_QWORD *)(v340 - 8) + 64));
        v108 = *(_QWORD *)(v44 - 88);
        v48 = v400;
        v109 = *(_QWORD *)(v44 - 104);
      }
      else
      {
        v371 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v337, 1, v371))
        {
          v341 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v336, v337, *(_QWORD *)(*(_QWORD *)(v341 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *))(*(_QWORD *)(v371 - 8) + 16))(v336, v337);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v336, 0, 1, v371);
        }
        v359 = v338;
        v364 = (uint64_t)v336;
        v342 = *(int *)(v338 + 20);
        v356 = &v336[v342];
        v343 = &v337[v342];
        v339 = (uint64_t)v104;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v343, 1, v371))
        {
          v344 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v356, v343, *(_QWORD *)(*(_QWORD *)(v344 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v371 - 8) + 16))(v356, v343, v371);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v356, 0, 1, v371);
        }
        v109 = *(_QWORD *)(v44 - 104);
        _s7Weather24LocationCompositionStateOwst_0(v364, 0, 1, v359);
        v108 = *(_QWORD *)(v44 - 88);
        v48 = v400;
      }
      _s7Weather24LocationCompositionStateOwst_0(v339, 0, 1, (uint64_t)v377);
LABEL_72:
      v345 = *(int *)(v379 + 28);
      v346 = (_QWORD *)((char *)v50 + v345);
      v347 = (_QWORD *)((char *)v51 + v345);
      v348 = v347[1];
      *v346 = *v347;
      v346[1] = v348;
      swift_bridgeObjectRetain(v348);
      v284 = v50;
      v285 = v109;
      v286 = 5;
LABEL_73:
      swift_storeEnumTagMultiPayload(v284, v285, v286);
LABEL_28:
      *(_WORD *)(v40 + v48[6]) = *(_WORD *)(v41 + v48[6]);
      v231 = v48[7];
      v232 = (_BYTE *)(v40 + v231);
      v233 = (_BYTE *)(v41 + v231);
      v234 = type metadata accessor for LocationComponentAction(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v233, 1, v234))
      {
        v235 = sub_1000BA294(&qword_100BDA950);
        memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v233, v234))
        {
          case 0u:
            v236 = type metadata accessor for URL(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v236 - 8) + 16))(v232, v233, v236);
            v237 = sub_1000BA294(&qword_100BC5FE8);
            v232[*(int *)(v237 + 48)] = v233[*(int *)(v237 + 48)];
            v238 = v232;
            v239 = v234;
            v240 = 0;
            goto LABEL_36;
          case 1u:
            v241 = type metadata accessor for WeatherMapOverlayKind(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v241 - 8) + 16))(v232, v233, v241);
            v238 = v232;
            v239 = v234;
            v240 = 1;
            goto LABEL_36;
          case 2u:
            v242 = type metadata accessor for DetailCondition(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v232, v233, v242);
            v243 = sub_1000BA294(&qword_100BC5FF8);
            v232[*(int *)(v243 + 48)] = v233[*(int *)(v243 + 48)];
            v238 = v232;
            v239 = v234;
            v240 = 2;
            goto LABEL_36;
          case 4u:
            *v232 = *v233;
            v244 = *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
            v245 = &v232[v244];
            v246 = v38;
            v247 = &v233[v244];
            v248 = type metadata accessor for Location(0);
            v249 = v247;
            v38 = v246;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v248 - 8) + 16))(v245, v249, v248);
            v238 = v232;
            v239 = v234;
            v240 = 4;
LABEL_36:
            swift_storeEnumTagMultiPayload(v238, v239, v240);
            break;
          default:
            memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
            break;
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v232, 0, 1, v234);
      }
      v250 = v38[7];
      v251 = v38[8];
      v252 = *(_OWORD *)(v39 + v250);
      *(_OWORD *)(v108 + v250) = v252;
      v253 = (_QWORD *)(v108 + v251);
      v254 = (_QWORD *)(v39 + v251);
      v255 = v254[1];
      *v253 = *v254;
      v253[1] = v255;
      v256 = v38[9];
      v257 = v38[10];
      v258 = (_QWORD *)(v108 + v256);
      v259 = (_QWORD *)(v39 + v256);
      v260 = v259[1];
      *v258 = *v259;
      v258[1] = v260;
      v261 = v108 + v257;
      v262 = v39 + v257;
      v263 = *(_QWORD *)(v262 + 8);
      *(_QWORD *)v261 = *(_QWORD *)v262;
      *(_QWORD *)(v261 + 8) = v263;
      *(_BYTE *)(v261 + 32) = *(_BYTE *)(v262 + 32);
      *(_OWORD *)(v261 + 16) = *(_OWORD *)(v262 + 16);
      swift_unknownObjectRetain(v252);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      return v108;
    case 6u:
      v393 = v48;
      v110 = v51[1];
      *v50 = *v51;
      v50[1] = v110;
      v111 = *((unsigned __int8 *)v51 + 32);
      swift_bridgeObjectRetain(v110);
      v385 = v39;
      *(_QWORD *)(v44 - 104) = v52;
      *(_QWORD *)(v44 - 96) = v38;
      if (v111 == 255)
      {
        *((_OWORD *)v50 + 1) = *((_OWORD *)v51 + 1);
        *((_BYTE *)v50 + 32) = *((_BYTE *)v51 + 32);
      }
      else
      {
        v112 = v51[2];
        v113 = v51[3];
        sub_100121DEC(v112, v113, v111);
        v50[2] = v112;
        v50[3] = v113;
        *((_BYTE *)v50 + 32) = v111;
      }
      v295 = v51[5];
      v50[5] = v295;
      v296 = (int *)type metadata accessor for MoonComponentViewModel(0);
      v297 = v296[7];
      v298 = (char *)v50 + v297;
      v299 = (char *)v51 + v297;
      v300 = type metadata accessor for Date(0);
      v301 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v300 - 8) + 16);
      v302 = swift_bridgeObjectRetain(v295);
      v301(v298, v299, v300, v302);
      *((_BYTE *)v50 + v296[8]) = *((_BYTE *)v51 + v296[8]);
      *(_QWORD *)((char *)v50 + v296[9]) = *(_QWORD *)((char *)v51 + v296[9]);
      swift_storeEnumTagMultiPayload(v50, *(_QWORD *)(v44 - 104), 6);
      v38 = *(int **)(v44 - 96);
      v108 = *(_QWORD *)(v44 - 88);
      v39 = v385;
      v48 = v393;
      goto LABEL_28;
    case 7u:
      v114 = type metadata accessor for NewsArticleComponentViewModel(0);
      if (swift_getEnumCaseMultiPayload(v51, v114) == 1)
      {
        v373 = v114;
        *(_QWORD *)(v44 - 104) = v52;
        v115 = v51[1];
        *v50 = *v51;
        v50[1] = v115;
        v380 = (int *)type metadata accessor for NewsArticleComponentContentViewModel(0);
        v116 = v380[5];
        v365 = (char *)v50 + v116;
        v117 = (char *)v51 + v116;
        v118 = type metadata accessor for URL(0);
        swift_bridgeObjectRetain(v115);
        v119 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v117, 1, v118);
        v386 = v39;
        *(_QWORD *)(v44 - 96) = v38;
        v394 = v48;
        if (v119)
        {
          v120 = sub_1000BA294(&qword_100BD4280);
          memcpy(v365, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16))(v365, v117, v118);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v365, 0, 1, v118);
        }
        v303 = v380[6];
        v304 = (_QWORD *)((char *)v50 + v303);
        v305 = (_QWORD *)((char *)v51 + v303);
        v306 = v305[1];
        *v304 = *v305;
        v304[1] = v306;
        v307 = v380[7];
        v308 = (char *)v50 + v307;
        v309 = (char *)v51 + v307;
        v310 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v118 - 8) + 16);
        v311 = swift_bridgeObjectRetain(v306);
        v310(v308, v309, v118, v311);
        v312 = v380[8];
        v313 = (char *)v50 + v312;
        v314 = (char *)v51 + v312;
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v51 + v312, 1, v118))
        {
          v315 = sub_1000BA294(&qword_100BD4280);
          memcpy(v313, v314, *(_QWORD *)(*(_QWORD *)(v315 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v310)(v313, v314, v118);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v313, 0, 1, v118);
        }
        v39 = v386;
        v38 = *(int **)(v44 - 96);
        *((_BYTE *)v50 + v380[9]) = *((_BYTE *)v51 + v380[9]);
        swift_storeEnumTagMultiPayload(v50, v373, 1);
        v108 = *(_QWORD *)(v44 - 88);
        v48 = v394;
        v52 = *(_QWORD *)(v44 - 104);
      }
      else
      {
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        v108 = *(_QWORD *)(v44 - 88);
      }
      v284 = v50;
      v285 = v52;
      v286 = 7;
      goto LABEL_73;
    case 8u:
      v121 = v51[1];
      *v50 = *v51;
      v50[1] = v121;
      v122 = *(int *)(type metadata accessor for NextHourPrecipitationComponentViewModel(0) + 20);
      *(_QWORD *)(v44 - 96) = v38;
      v123 = (char *)v50 + v122;
      v395 = v48;
      v124 = v39;
      v125 = (char *)v51 + v122;
      HourPrecipitationChartViewModel = type metadata accessor for NextHourPrecipitationChartViewModel(0);
      v127 = v52;
      v128 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(HourPrecipitationChartViewModel - 8)
                                                                    + 16);
      v129 = swift_bridgeObjectRetain(v121);
      v130 = v123;
      v38 = *(int **)(v44 - 96);
      v131 = v125;
      v39 = v124;
      v48 = v395;
      v128(v130, v131, HourPrecipitationChartViewModel, v129);
      v65 = v50;
      v66 = v127;
      v67 = 8;
      goto LABEL_26;
    case 9u:
      v132 = type metadata accessor for Location(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v50, v51, v132);
      v133 = type metadata accessor for NotificationsOptInComponentViewModel(0);
      *((_BYTE *)v50 + *(int *)(v133 + 20)) = *((_BYTE *)v51 + *(int *)(v133 + 20));
      v65 = v50;
      v66 = v52;
      v67 = 9;
      goto LABEL_26;
    case 0xAu:
      v134 = v51[1];
      *v50 = *v51;
      v50[1] = v134;
      v135 = v51[3];
      v50[2] = v51[2];
      v50[3] = v135;
      v396 = v48;
      v136 = v38;
      v137 = v51[5];
      v50[4] = v51[4];
      v50[5] = v137;
      *(_QWORD *)(v44 - 104) = v52;
      v138 = v39;
      v139 = v51[7];
      v50[6] = v51[6];
      v50[7] = v139;
      v140 = v51[9];
      v50[8] = v51[8];
      v50[9] = v140;
      v141 = v51[10];
      v142 = v51[11];
      v50[10] = v141;
      v50[11] = v142;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRetain(v135);
      v143 = v137;
      v38 = v136;
      v48 = v396;
      swift_bridgeObjectRetain(v143);
      v144 = v139;
      v39 = v138;
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRetain(v140);
      swift_bridgeObjectRetain(v142);
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 10;
      goto LABEL_26;
    case 0xBu:
      v145 = type metadata accessor for PressureTrend(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v50, v51, v145);
      v146 = (int *)type metadata accessor for PressureComponentViewModel(0);
      v147 = v146[5];
      v148 = (_QWORD *)((char *)v50 + v147);
      v149 = (_QWORD *)((char *)v51 + v147);
      v151 = *v149;
      v150 = v149[1];
      *v148 = v151;
      v148[1] = v150;
      v152 = v146[6];
      v153 = (_QWORD *)((char *)v50 + v152);
      v154 = (_QWORD *)((char *)v51 + v152);
      v155 = v154[1];
      *v153 = *v154;
      v153[1] = v155;
      v156 = v146[7];
      v157 = (_QWORD *)((char *)v50 + v156);
      v158 = (_QWORD *)((char *)v51 + v156);
      v159 = v38;
      v160 = v158[1];
      *v157 = *v158;
      v157[1] = v160;
      *(_QWORD *)((char *)v50 + v146[8]) = *(_QWORD *)((char *)v51 + v146[8]);
      v161 = v146[9];
      v162 = (_QWORD *)((char *)v50 + v161);
      v163 = (_QWORD *)((char *)v51 + v161);
      v164 = v52;
      v165 = v39;
      v166 = v163[1];
      *v162 = *v163;
      v162[1] = v166;
      swift_bridgeObjectRetain(v150);
      swift_bridgeObjectRetain(v155);
      v167 = v160;
      v38 = v159;
      swift_bridgeObjectRetain(v167);
      v168 = v166;
      v39 = v165;
      swift_bridgeObjectRetain(v168);
      v65 = v50;
      v66 = v164;
      v67 = 11;
      goto LABEL_26;
    case 0xDu:
      v169 = v51[1];
      *v50 = *v51;
      v50[1] = v169;
      *(_QWORD *)(v44 - 96) = v38;
      v170 = v51[3];
      v50[2] = v51[2];
      v50[3] = v170;
      v387 = v39;
      v397 = v48;
      v172 = v51[4];
      v171 = v51[5];
      v50[4] = v172;
      v50[5] = v171;
      v174 = v51[6];
      v173 = v51[7];
      v50[6] = v174;
      v50[7] = v173;
      v175 = v51[8];
      v50[8] = v175;
      v176 = type metadata accessor for SevereAlertComponentViewModel(0);
      v177 = *(int *)(v176 + 36);
      v374 = (char *)v50 + v177;
      v381 = v176;
      v366 = (char *)v51 + v177;
      v178 = type metadata accessor for WeatherAlert.Prominence(0);
      *(_QWORD *)(v44 - 104) = v52;
      v179 = v178;
      v360 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v178 - 8) + 16);
      swift_bridgeObjectRetain(v169);
      v180 = v170;
      v38 = *(int **)(v44 - 96);
      swift_bridgeObjectRetain(v180);
      v181 = v172;
      v39 = v387;
      swift_bridgeObjectRetain(v181);
      swift_bridgeObjectRetain(v174);
      v182 = v175;
      v48 = v397;
      v183 = swift_bridgeObjectRetain(v182);
      v360(v374, v366, v179, v183);
      *(_QWORD *)((char *)v50 + *(int *)(v381 + 40)) = *(_QWORD *)((char *)v51 + *(int *)(v381 + 40));
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 13;
      goto LABEL_26;
    case 0xEu:
      v184 = type metadata accessor for SunriseSunsetViewModel(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v50, v51, v184);
      v65 = v50;
      v66 = v52;
      v67 = 14;
      goto LABEL_26;
    case 0xFu:
      v185 = v51[1];
      *v50 = *v51;
      v50[1] = v185;
      v186 = v51[3];
      v50[2] = v51[2];
      v50[3] = v186;
      *(_QWORD *)(v44 - 96) = v38;
      v187 = v51[5];
      v50[4] = v51[4];
      v50[5] = v187;
      v388 = v39;
      v188 = v51[7];
      v50[6] = v51[6];
      v50[7] = v188;
      *(_QWORD *)(v44 - 104) = v52;
      v189 = v51[9];
      v50[8] = v51[8];
      v50[9] = v189;
      v190 = v51[11];
      v50[10] = v51[10];
      v50[11] = v190;
      v398 = v48;
      v191 = v51[13];
      v50[12] = v51[12];
      v50[13] = v191;
      v382 = v51[15];
      v50[14] = v51[14];
      v50[15] = v382;
      v375 = v51[17];
      v50[16] = v51[16];
      v50[17] = v375;
      v367 = v51[19];
      v50[18] = v51[18];
      v50[19] = v367;
      v361 = v51[21];
      v50[20] = v51[20];
      v50[21] = v361;
      v357 = v51[23];
      v50[22] = v51[22];
      v50[23] = v357;
      v192 = v51[24];
      v193 = v51[25];
      v50[24] = v192;
      v50[25] = v193;
      swift_bridgeObjectRetain(v185);
      swift_bridgeObjectRetain(v186);
      v194 = v187;
      v38 = *(int **)(v44 - 96);
      swift_bridgeObjectRetain(v194);
      v195 = v188;
      v39 = v388;
      swift_bridgeObjectRetain(v195);
      swift_bridgeObjectRetain(v189);
      swift_bridgeObjectRetain(v190);
      v196 = v191;
      v48 = v398;
      swift_bridgeObjectRetain(v196);
      swift_bridgeObjectRetain(v382);
      swift_bridgeObjectRetain(v375);
      swift_bridgeObjectRetain(v367);
      swift_bridgeObjectRetain(v361);
      swift_bridgeObjectRetain(v357);
      swift_bridgeObjectRetain(v193);
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 15;
      goto LABEL_26;
    case 0x10u:
      *(_OWORD *)v50 = *(_OWORD *)v51;
      v197 = v51[3];
      v50[2] = v51[2];
      v50[3] = v197;
      v198 = type metadata accessor for UVIndexComponentViewModel(0);
      *(_QWORD *)(v44 - 96) = v38;
      v199 = v198;
      v200 = *(int *)(v198 + 28);
      v389 = v39;
      v201 = (char *)v50 + v200;
      v383 = (char *)v51 + v200;
      v202 = type metadata accessor for WeatherDescription(0);
      v203 = *(_QWORD *)(v202 - 8);
      *(_QWORD *)(v44 - 104) = v52;
      v204 = v48;
      v205 = *(void (**)(char *, char *, uint64_t, __n128))(v203 + 16);
      v206 = swift_bridgeObjectRetain(v197);
      v207 = v201;
      v39 = v389;
      v205(v207, v383, v202, v206);
      v48 = v204;
      v208 = *(int *)(v199 + 32);
      v38 = *(int **)(v44 - 96);
      v209 = *(_QWORD *)((char *)v51 + v208);
      *(_QWORD *)((char *)v50 + v208) = v209;
      swift_bridgeObjectRetain(v209);
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 16;
      goto LABEL_26;
    case 0x11u:
      v210 = v51[1];
      *v50 = *v51;
      v50[1] = v210;
      v211 = v51[3];
      v50[2] = v51[2];
      v50[3] = v211;
      v212 = v52;
      v213 = v38;
      v214 = v51[5];
      v50[4] = v51[4];
      v50[5] = v214;
      swift_bridgeObjectRetain(v210);
      swift_bridgeObjectRetain(v211);
      v215 = v214;
      v38 = v213;
      swift_bridgeObjectRetain(v215);
      v65 = v50;
      v66 = v212;
      v67 = 17;
      goto LABEL_26;
    case 0x12u:
      v399 = v48;
      v216 = v51[1];
      *v50 = *v51;
      v50[1] = v216;
      v376 = v51[3];
      v50[2] = v51[2];
      v50[3] = v376;
      v368 = v51[5];
      v50[4] = v51[4];
      v50[5] = v368;
      v362 = v51[7];
      v50[6] = v51[6];
      v50[7] = v362;
      v358 = v51[9];
      v50[8] = v51[8];
      v50[9] = v358;
      v355 = v51[11];
      v50[10] = v51[10];
      v50[11] = v355;
      v354 = v51[13];
      v50[12] = v51[12];
      v50[13] = v354;
      v353 = v51[15];
      v50[14] = v51[14];
      v50[15] = v353;
      v352 = v51[17];
      v50[16] = v51[16];
      v50[17] = v352;
      v351 = v51[19];
      v50[18] = v51[18];
      v50[19] = v351;
      v217 = v51[21];
      v50[20] = v51[20];
      v50[21] = v217;
      *((_OWORD *)v50 + 11) = *((_OWORD *)v51 + 11);
      v349 = v51[24];
      v350 = v217;
      v50[24] = v349;
      v384 = type metadata accessor for WindComponentViewModel(0);
      v218 = *(int *)(v384 + 68);
      v219 = (char *)v50 + v218;
      *(_QWORD *)(v44 - 96) = v38;
      v220 = (char *)v51 + v218;
      v221 = v39;
      v222 = type metadata accessor for WindComponentCompassViewModel(0);
      v223 = *(_QWORD *)(v222 - 8);
      *(_QWORD *)(v44 - 104) = v52;
      v224 = *(void (**)(char *, char *, uint64_t, __n128))(v223 + 16);
      v225 = v216;
      v48 = v399;
      swift_bridgeObjectRetain(v225);
      swift_bridgeObjectRetain(v376);
      swift_bridgeObjectRetain(v368);
      swift_bridgeObjectRetain(v362);
      swift_bridgeObjectRetain(v358);
      swift_bridgeObjectRetain(v355);
      swift_bridgeObjectRetain(v354);
      swift_bridgeObjectRetain(v353);
      swift_bridgeObjectRetain(v352);
      swift_bridgeObjectRetain(v351);
      swift_bridgeObjectRetain(v350);
      v226 = swift_bridgeObjectRetain(v349);
      v227 = v220;
      v38 = *(int **)(v44 - 96);
      v228 = v222;
      v39 = v221;
      v224(v219, v227, v228, v226);
      v229 = *(int *)(v384 + 72);
      v230 = *(_QWORD *)((char *)v51 + v229);
      *(_QWORD *)((char *)v50 + v229) = v230;
      swift_bridgeObjectRetain(v230);
      v65 = v50;
      v66 = *(_QWORD *)(v44 - 104);
      v67 = 18;
LABEL_26:
      swift_storeEnumTagMultiPayload(v65, v66, v67);
      goto LABEL_27;
    default:
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
LABEL_27:
      v108 = *(_QWORD *)(v44 - 88);
      goto LABEL_28;
  }
}

uint64_t type metadata accessor for LocationComponentHeaderViewModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCF078, (uint64_t)&nominal type descriptor for LocationComponentHeaderViewModel);
}

uint64_t type metadata accessor for LocationComponentViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C08940;
  if (!qword_100C08940)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationComponentViewModel);
  return result;
}

uint64_t type metadata accessor for LocationComponentAction(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCDB80, (uint64_t)&nominal type descriptor for LocationComponentAction);
}

uint64_t type metadata accessor for LocationComponentContainerViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C12D58;
  if (!qword_100C12D58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationComponentContainerViewModel);
  return result;
}

uint64_t type metadata accessor for LocationComponentHeaderViewModel.Description(uint64_t a1)
{
  return sub_100098190(a1, qword_100BCEFC8, (uint64_t)&nominal type descriptor for LocationComponentHeaderViewModel.Description);
}

double sub_1000D7C30(char *a1, int *a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  char *v8;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double result;
  __n128 v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(char *, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = (int *)type metadata accessor for DailyForecastComponentViewModel(0);
  v5 = &a1[v4[5]];
  v6 = sub_1000BA294(&qword_100BC4E68);
  v7 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(&a1[v4[6]], v6);
  v7(&a1[v4[7]], v6);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[v4[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[v4[9] + 8]);
  swift_release(*(_QWORD *)&a1[a2[5] + 8]);
  v8 = &a1[a2[7]];
  v9 = type metadata accessor for Date(0);
  v21 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v21(v8, v9);
  v10 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[5] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[6] + 8]);
  v11 = &v8[v10[7]];
  v12 = type metadata accessor for TimeZone(0);
  v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v20(v11, v12);
  v7(&v8[v10[8]], v6);
  v7(&v8[v10[9]], v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[14] + 8]);
  v13 = (uint64_t)&v8[v10[15]];
  v14 = type metadata accessor for Precipitation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[17] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[18] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v10[20]]);
  v15 = &a1[a2[13]];
  swift_release(*(_QWORD *)v15);
  swift_release(*((_QWORD *)v15 + 1));
  v16 = (uint64_t)&v15[*(int *)(sub_1000BA294(&qword_100BCB330) + 32)];
  if (!_s7Weather24LocationCompositionStateOwet_0(v16, 1, (uint64_t)v10))
  {
    v21((char *)v16, v9);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[5] + 8));
    v18 = swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[6] + 8));
    ((void (*)(uint64_t, uint64_t, __n128))v20)(v16 + v10[7], v12, v18);
    v7((char *)(v16 + v10[8]), v6);
    v7((char *)(v16 + v10[9]), v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[14] + 8));
    v19 = v16 + v10[15];
    if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v19, v14);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[17] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[18] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[19] + 8));
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v16 + v10[20])).n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for DailyForecastComponentViewModel(uint64_t a1)
{
  return sub_100098190(a1, qword_100BF6288, (uint64_t)&nominal type descriptor for DailyForecastComponentViewModel);
}

uint64_t sub_1000D7FC4(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v31(a1, v4);
  v5 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[6] + 8));
  v6 = a1 + v5[7];
  v7 = type metadata accessor for TimeZone(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + v5[8];
  v10 = sub_1000BA294(&qword_100BC4E68);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + v5[9], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[14] + 8));
  v12 = a1 + v5[15];
  v13 = type metadata accessor for Precipitation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[19] + 8));
  v14 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[20]));
  ((void (*)(uint64_t, uint64_t, __n128))v11)(a1 + a2[5], v10, v14);
  v11(a1 + a2[6], v10);
  v15 = a1 + a2[7];
  if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v10))
    v11(v15, v10);
  swift_release(*(_QWORD *)(a1 + a2[11] + 8));
  v16 = (_QWORD *)(a1 + a2[14]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (uint64_t)v16 + *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, (uint64_t)v5))
  {
    v31(v17, v4);
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[5] + 8));
    v18 = swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[6] + 8));
    ((void (*)(uint64_t, uint64_t, __n128))v8)(v17 + v5[7], v7, v18);
    v11(v17 + v5[8], v10);
    v11(v17 + v5[9], v10);
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[14] + 8));
    v19 = v17 + v5[15];
    if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v19, v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[17] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[18] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[19] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v17 + v5[20]));
  }
  v20 = a1 + a2[15];
  v21 = sub_1000BA294(&qword_100BD3380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = a1 + a2[16];
  v23 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  sub_1000B15F8(*(_QWORD *)(a1 + a2[17]), *(_BYTE *)(a1 + a2[17] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[18]), *(_BYTE *)(a1 + a2[18] + 8));
  sub_1000B15F8(*(_QWORD *)(a1 + a2[19]), *(_BYTE *)(a1 + a2[19] + 8));
  v24 = (_QWORD *)(a1 + a2[20]);
  v25 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (_QWORD *)(a1 + a2[21]);
  swift_release(*v27);
  swift_release(v27[1]);
  v28 = a1 + a2[22];
  if (!_s7Weather24LocationCompositionStateOwet_0(v28, 1, v4))
    v31(v28, v4);
  v29 = *(_QWORD *)(v28 + *(int *)(sub_1000BA294(&qword_100BDD670) + 28));
  return swift_release(v29);
}

uint64_t sub_1000D8430(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  void (*v159)(char *, char *, uint64_t, __n128);
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t);
  void (*v163)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v164;

  v164 = type metadata accessor for Date(0);
  v162 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
  v162(a1, a2);
  v6 = (int *)type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
  v7 = v6[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = v6[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v6[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = type metadata accessor for TimeZone(0);
  v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain(v10);
  v20 = swift_bridgeObjectRetain(v14);
  v159 = v19;
  v160 = v18;
  v19(v16, v17, v18, v20);
  v21 = v6[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_1000BA294(&qword_100BC4E68);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v25(v22, v23, v24);
  v163 = (void (*)(uint64_t, uint64_t, uint64_t, __n128))v25;
  v25(a1 + v6[9], a2 + v6[9], v24);
  v26 = v6[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v6[11];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  *(_QWORD *)(a1 + v6[12]) = *(_QWORD *)(a2 + v6[12]);
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  v34 = v6[14];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = v6[15];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  v41 = type metadata accessor for Precipitation(0);
  v42 = v29;
  v43 = v41;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v37);
  v161 = v43;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v40, 1, v43))
  {
    v44 = sub_1000BA294(&qword_100BCB338);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v39, v40, v43);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v39, 0, 1, v43);
  }
  *(_BYTE *)(a1 + v6[16]) = *(_BYTE *)(a2 + v6[16]);
  v45 = v6[17];
  v46 = (_QWORD *)(a1 + v45);
  v47 = (_QWORD *)(a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = v6[18];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = v6[19];
  v54 = (_QWORD *)(a1 + v53);
  v55 = (_QWORD *)(a2 + v53);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = v6[20];
  v58 = *(_QWORD *)(a2 + v57);
  *(_QWORD *)(a1 + v57) = v58;
  v59 = a3[5];
  v60 = a1 + v59;
  v61 = a2 + v59;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v56);
  v62 = swift_bridgeObjectRetain(v58);
  v163(v60, v61, v24, v62);
  ((void (*)(uint64_t, uint64_t, uint64_t))v163)(a1 + a3[6], a2 + a3[6], v24);
  v63 = a3[7];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v63, 1, v24))
  {
    v66 = sub_1000BA294(qword_100BC4E80);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    ((void (*)(void *, const void *, uint64_t))v163)(v64, v65, v24);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v64, 0, 1, v24);
  }
  v67 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v67) = *(_OWORD *)(a2 + v67);
  v68 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v69 = (_QWORD *)(a1 + v68);
  v70 = (_QWORD *)(a2 + v68);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v72) = *(_BYTE *)(a2 + v72);
  v73 = a3[14];
  v74 = (_QWORD *)(a1 + v73);
  v75 = a2 + v73;
  v76 = *(_QWORD *)(a2 + v73 + 8);
  *v74 = *(_QWORD *)(a2 + v73);
  v74[1] = v76;
  swift_retain();
  swift_retain();
  swift_retain();
  v77 = *(int *)(sub_1000BA294(&qword_100BCB330) + 32);
  v78 = (char *)v74 + v77;
  v79 = (char *)(v75 + v77);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v79, 1, (uint64_t)v6))
  {
    v80 = sub_1000BA294(&qword_100BCB340);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v162)(v78, v79, v164);
    v81 = v6[5];
    v82 = &v78[v81];
    v83 = &v79[v81];
    v84 = *((_QWORD *)v83 + 1);
    *(_QWORD *)v82 = *(_QWORD *)v83;
    *((_QWORD *)v82 + 1) = v84;
    v85 = v6[6];
    v86 = &v78[v85];
    v87 = &v79[v85];
    v88 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v89 = v6[7];
    v90 = &v78[v89];
    v91 = &v79[v89];
    swift_bridgeObjectRetain(v84);
    v92 = swift_bridgeObjectRetain(v88);
    v159(v90, v91, v160, v92);
    ((void (*)(char *, char *, uint64_t))v163)(&v78[v6[8]], &v79[v6[8]], v24);
    ((void (*)(char *, char *, uint64_t))v163)(&v78[v6[9]], &v79[v6[9]], v24);
    v93 = v6[10];
    v94 = &v78[v93];
    v95 = &v79[v93];
    v96 = *((_QWORD *)v95 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v95;
    *((_QWORD *)v94 + 1) = v96;
    v97 = v6[11];
    v98 = &v78[v97];
    v99 = &v79[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    *(_QWORD *)&v78[v6[12]] = *(_QWORD *)&v79[v6[12]];
    v78[v6[13]] = v79[v6[13]];
    v101 = v6[14];
    v102 = &v78[v101];
    v103 = &v79[v101];
    v104 = *((_QWORD *)v103 + 1);
    *(_QWORD *)v102 = *(_QWORD *)v103;
    *((_QWORD *)v102 + 1) = v104;
    v105 = v6[15];
    v106 = &v78[v105];
    v107 = &v79[v105];
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v104);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v107, 1, v161))
    {
      v108 = sub_1000BA294(&qword_100BCB338);
      memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v106, v107, v161);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v106, 0, 1, v161);
    }
    v78[v6[16]] = v79[v6[16]];
    v109 = v6[17];
    v110 = &v78[v109];
    v111 = &v79[v109];
    v112 = *((_QWORD *)v111 + 1);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_QWORD *)v110 + 1) = v112;
    v113 = v6[18];
    v114 = &v78[v113];
    v115 = &v79[v113];
    v116 = *((_QWORD *)v115 + 1);
    *(_QWORD *)v114 = *(_QWORD *)v115;
    *((_QWORD *)v114 + 1) = v116;
    v117 = v6[19];
    v118 = &v78[v117];
    v119 = &v79[v117];
    v120 = *((_QWORD *)v119 + 1);
    *(_QWORD *)v118 = *(_QWORD *)v119;
    *((_QWORD *)v118 + 1) = v120;
    v121 = v6[20];
    v122 = *(_QWORD *)&v79[v121];
    *(_QWORD *)&v78[v121] = v122;
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v116);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v122);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v78, 0, 1, (uint64_t)v6);
  }
  v123 = a3[15];
  v124 = a1 + v123;
  v125 = a2 + v123;
  v126 = sub_1000BA294(&qword_100BD3380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
  v127 = a3[16];
  v128 = a1 + v127;
  v129 = a2 + v127;
  v130 = sub_1000BA294(&qword_100BDD668);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
  v131 = a3[17];
  v132 = a1 + v131;
  v133 = a2 + v131;
  v134 = *(_QWORD *)v133;
  LOBYTE(v129) = *(_BYTE *)(v133 + 8);
  sub_10008D47C(*(_QWORD *)v133, v129);
  *(_QWORD *)v132 = v134;
  *(_BYTE *)(v132 + 8) = v129;
  v135 = a3[18];
  v136 = a1 + v135;
  v137 = a2 + v135;
  v138 = *(_QWORD *)v137;
  LOBYTE(v129) = *(_BYTE *)(v137 + 8);
  sub_10008D47C(*(_QWORD *)v137, v129);
  *(_QWORD *)v136 = v138;
  *(_BYTE *)(v136 + 8) = v129;
  v139 = a3[19];
  v140 = a1 + v139;
  v141 = a2 + v139;
  v142 = *(_QWORD *)v141;
  LOBYTE(v129) = *(_BYTE *)(v141 + 8);
  sub_10008D47C(*(_QWORD *)v141, v129);
  *(_QWORD *)v140 = v142;
  *(_BYTE *)(v140 + 8) = v129;
  v143 = a3[20];
  v144 = (_QWORD *)(a1 + v143);
  v145 = (_QWORD *)(a2 + v143);
  v146 = sub_1000BA294(&qword_100BC68C8);
  if (swift_getEnumCaseMultiPayload(v145, v146) == 1)
  {
    v147 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v144, v145, v147);
    v148 = 1;
  }
  else
  {
    *v144 = *v145;
    swift_retain();
    v148 = 0;
  }
  swift_storeEnumTagMultiPayload(v144, v146, v148);
  v149 = a3[21];
  v150 = a3[22];
  v151 = (_QWORD *)(a1 + v149);
  v152 = (_QWORD *)(a2 + v149);
  v153 = v152[1];
  *v151 = *v152;
  v151[1] = v153;
  v154 = (char *)(a1 + v150);
  v155 = (char *)(a2 + v150);
  swift_retain();
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v155, 1, v164))
  {
    v156 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v162)(v154, v155, v164);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v154, 0, 1, v164);
  }
  v157 = sub_1000BA294(&qword_100BDD670);
  *(_QWORD *)&v154[*(int *)(v157 + 28)] = *(_QWORD *)&v155[*(int *)(v157 + 28)];
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BF6380, (uint64_t)&nominal type descriptor for DailyForecastComponentViewModel.DayForecastViewModel);
}

uint64_t sub_1000D8C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005FB8C4);
}

void sub_1000D8C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100099310();
  v4 = sub_1000E7BD0(v1, v2, v3);
  v5 = type metadata accessor for DayWeather(v4);
  v6 = sub_1000DAC14(v5);
  __chkstk_darwin(v6);
  sub_1000B30E0();
  v8 = __chkstk_darwin(v7);
  sub_1000BF100(v8, v9, v10, v11, v12, v13, v14, v15, v28);
  sub_1001FB504();
  sub_1000BEE28();
  __chkstk_darwin(v16);
  sub_100094EC4();
  sub_1000BA294(&qword_100BCE7B0);
  sub_10009D98C();
  __chkstk_darwin(v17);
  sub_1000C45A0();
  sub_1000F43C4((unint64_t *)&qword_100BCE7B8);
  sub_1000C13DC(v18);
  sub_10011E18C();
  sub_1000F43C4((unint64_t *)&qword_100BCE7C0);
  sub_1000E6F1C(v19);
  sub_1000B25A8();
  if (v21)
  {
LABEL_8:
    sub_10009518C(v20, &qword_100BCE7B0);
    sub_100252B48();
  }
  else
  {
    sub_1000EAF3C();
    while (1)
    {
      v22 = sub_1000DA90C();
      sub_1001101D4(v22, v23);
      sub_1000AE8CC();
      sub_1000993C8();
      sub_1000C0D4C();
      sub_1000DAE54();
      sub_1000D1638();
      v24 = sub_1000CF7C4();
      if (v0)
      {
        v27 = sub_1001098D0();
        sub_1000BEA18(v27, &qword_100BCE7B0);
        goto LABEL_12;
      }
      if ((v24 & 1) != 0)
        break;
      sub_1000CD5F0();
      sub_1000D1CE4();
      sub_1000B25A8();
      if (v21)
        goto LABEL_8;
    }
    sub_1000BEA18(v24, &qword_100BCE7B0);
    v25 = sub_1000D1148();
    v26 = 0;
  }
  sub_1000CDBDC(v25, v26);
LABEL_12:
  sub_10009E33C();
  sub_1000B44B0();
}

uint64_t sub_1000D8D88@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000D8D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 136) + a1;
}

uint64_t sub_1000D8DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 584), 1, 1, *(_QWORD *)(v4 - 280));
}

uint64_t sub_1000D8DDC()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t sub_1000D8DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 112), v0);
}

uint64_t sub_1000D8DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_1000D8E08@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(*(_QWORD *)(v2 + 1312), a1, *(_QWORD *)(v2 + 968));
}

uint64_t sub_1000D8E14()
{
  return type metadata accessor for LocalPresetLocationsViewController(0);
}

uint64_t sub_1000D8E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v2, v1);
}

uint64_t sub_1000D8E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void sub_1000D8E34(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_1000D8E40()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100102BB4(v0, *(_QWORD *)(v1 - 160));
}

uint64_t sub_1000D8E50()
{
  return type metadata accessor for LocationViewerActiveLocationState(0);
}

uint64_t sub_1000D8E58(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return sub_10006BD20(v2, a2);
}

__n128 *sub_1000D8E78(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1684957547;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

void sub_1000D8E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  sub_10007802C(v3, a1 + v1, v2);
}

uint64_t sub_1000D8EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(unint64_t, _QWORD, _QWORD);
  uint64_t v4;

  *(_QWORD *)(v0 + 16) = v2;
  return v3(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 120) + 80))+ *(_QWORD *)(*(_QWORD *)(v4 - 120) + 72) * v1, *(_QWORD *)(v4 - 184), *(_QWORD *)(v4 - 216));
}

void sub_1000D8ED0(char *a1)
{
  sub_1001B8C68(*a1);
}

id sub_1000D8EDC()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2360));
}

void sub_1000D8EE8()
{
  sub_1001206B4(1);
}

uint64_t sub_1000D8F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Published.subscript.setter(a1, v1, v2, v3);
}

double sub_1000D8F18()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  return sub_10016396C(v0, v1, v2);
}

uint64_t sub_1000D8F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(a1, a2, *(_QWORD *)(v5 - 256), v6, a5);
}

uint64_t sub_1000D8F34()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 56) + 8));
}

uint64_t sub_1000D8F44()
{
  return type metadata accessor for TemperatureAveragesHeroChartViewModel(0);
}

unint64_t sub_1000D8F4C()
{
  return 0xD00000000000001ELL;
}

void sub_1000D8F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, v1, v2);
}

uint64_t sub_1000D8F6C()
{
  return IndexPath.row.getter();
}

uint64_t sub_1000D8F74()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000D8F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 144))(v1, *(unsigned int *)(v2 - 136), v0);
}

uint64_t sub_1000D8F94()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000D8FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000D8FE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return swift_beginAccess(v1 + a1, v2 - 112, 0, 0);
}

void sub_1000D8FFC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000D9008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return v2 + *(int *)(v1 + 40) + a1;
}

uint64_t sub_1000D9018@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_1000D9044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

unint64_t sub_1000D9058()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 3;
  return sub_1004B1E5C();
}

uint64_t sub_1000D9074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 176) = v0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 32))(v2, v3, v1);
}

void sub_1000D9090(uint64_t a1@<X8>)
{
  char v1;

  *(_QWORD *)(a1 + 64) |= 1 << v1;
}

uint64_t sub_1000D90A8(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_1000D90B8(uint64_t a1)
{
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1);
}

uint64_t sub_1000D90C4@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 424) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000D90D0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10005EAA0(v0, v1);
}

uint64_t sub_1000D90DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000D90EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000D9100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v5, *(_QWORD *)(v6 - 192), a3, a4, a5);
}

uint64_t sub_1000D910C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000D9114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1000E3404(v2, v0, v1);
}

uint64_t sub_1000D9124()
{
  return 0;
}

uint64_t sub_1000D9130()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D913C()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000D9144(uint64_t a1)
{
  uint64_t v1;

  return static Optional<A>.read(from:)(a1, v1);
}

uint64_t sub_1000D9154()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_1000D915C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1, v0);
}

void sub_1000D9170()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;

  *(_QWORD *)(v2 - 96) = 0x6E6F697461636F4CLL;
  *(_QWORD *)(v2 - 88) = 0xEB000000003A4449;
  v3._countAndFlagsBits = v1;
  v3._object = v0;
  String.append(_:)(v3);
}

uint64_t sub_1000D91A4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  return sub_100051B90(a1, v3, a3);
}

double sub_1000D91AC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(v3 - 288) = a1;
  *(_QWORD *)(v3 - 280) = v1;
  *(_BYTE *)(v3 - 272) = 1;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000D91D0()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000D91D8(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 0);
}

uint64_t sub_1000D91F8()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

uint64_t sub_1000D9204()
{
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000D920C()
{
  return type metadata accessor for NotificationsOptInAction(0);
}

__n128 sub_1000D9214(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __n128 result;

  result = a9;
  a1[1] = a9;
  return result;
}

uint64_t sub_1000D9224()
{
  return type metadata accessor for DebugNotificationDeliveryScheduleViewController(0);
}

uint64_t sub_1000D922C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v5 - 88, v5 - 65, *(_QWORD *)(v5 - 104), a4, a5);
}

uint64_t sub_1000D9244(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000D924C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100741D08(v1, a1);
}

uint64_t sub_1000D9254()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10006A788(v1, v0);
}

Swift::Int sub_1000D9260(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  return _findStringSwitchCase(cases:string:)(cases, v3);
}

uint64_t sub_1000D9274()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000D9280()
{
  return type metadata accessor for EnvironmentValues(0);
}

void sub_1000D9288()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 0;
}

uint64_t sub_1000D9294()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[85] + 8))(v0[84], v0[86]);
}

uint64_t sub_1000D92A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return ObservedObject.init(wrappedValue:)(v2, v0, v1);
}

BOOL sub_1000D92B8()
{
  uint64_t v0;
  uint64_t v1;

  return *(double *)(v1 + 64) == *(double *)(v0 + 64);
}

uint64_t sub_1000D92CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10082172C(v1 + a1, v2);
}

uint64_t sub_1000D92D8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 112);
}

uint64_t sub_1000D92EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000D92F4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 456);
}

void sub_1000D9308(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10003773C(a1, a2, v2);
}

void sub_1000D9310(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1000D931C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

void sub_1000D932C()
{
  _QWORD *v0;

  sub_100077A84(v0);
}

void sub_1000D9334(Swift::String a1)
{
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(a1);
}

void sub_1000D933C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 312), a2);
}

uint64_t sub_1000D9348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 504));
}

uint64_t sub_1000D935C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

unint64_t sub_1000D9374()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return sub_100925080();
}

double sub_1000D9380(uint64_t a1)
{
  uint64_t v1;
  char v2;

  return sub_1000D31B4(a1, v1, v2);
}

uint64_t sub_1000D938C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000D939C()
{
  return type metadata accessor for HourWeather(0);
}

uint64_t sub_1000D93A8()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v0);
}

uint64_t sub_1000D93B8(uint64_t a1)
{
  uint64_t v1;

  return URLHandlerMatch.Values.subscript.getter(a1, v1);
}

double sub_1000D93D8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000D93E4()
{
  return type metadata accessor for SearchResultsList(0);
}

uint64_t sub_1000D9404()
{
  uint64_t v0;

  return v0;
}

id sub_1000D9414(id a1, SEL a2)
{
  double v2;
  double v3;

  return objc_msgSend(a1, a2, v2, v3);
}

uint64_t sub_1000D9420()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

double sub_1000D9434()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 - 176)).n128_u64[0];
  return result;
}

uint64_t sub_1000D9440()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1000D9448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, v2);
}

void sub_1000D9450(uint64_t a1)
{
  sub_10006BDC8(a1);
}

uint64_t sub_1000D946C(uint64_t a1)
{
  uint64_t v1;

  return swift_allocObject(a1, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 336) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 336) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 336) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 336) + 80) | 7);
}

uint64_t sub_1000D9490()
{
  return NotificationSubscription.Location.location.getter();
}

uint64_t sub_1000D949C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000D94A4()
{
  return static OS_os_log.default.getter();
}

void sub_1000D94C0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100095B78(a1, a2, v2);
}

double sub_1000D94C8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  sub_1000B15F8(*(_QWORD *)(v1 + *(int *)(v0 + 36)), *(_BYTE *)(v1 + *(int *)(v0 + 36) + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 40))).n128_u64[0];
  return result;
}

void sub_1000D94F8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100086DA4(a1, v3, a3);
}

uint64_t sub_1000D9500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1000D950C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return AnyHashable.init<A>(_:)(&a9);
}

void sub_1000D952C()
{
  MicaBackgroundAnimation.play(_:)(0);
}

uint64_t sub_1000D9538()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D9548(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for _ConditionalContent(255, v1, a1);
}

uint64_t sub_1000D9558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _ConditionalContent<>.init(storage:)(v2, *(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 192), v1, a1);
}

uint64_t sub_1000D9574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 - 136) + a1;
}

uint64_t sub_1000D9580()
{
  return type metadata accessor for TitleAndDetailLollipopDetailViewModel(0);
}

uint64_t sub_1000D9588()
{
  return type metadata accessor for DetailCondition(0);
}

BOOL sub_1000D9590@<W0>(CGRect *a1@<X8>)
{
  CGRect *v1;

  return CGRectEqualToRect(*v1, *a1);
}

uint64_t sub_1000D95B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v0, v2);
}

unint64_t sub_1000D95C8()
{
  return 0xD000000000000012;
}

_QWORD *sub_1000D95E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 80) = v1;
  *(_QWORD *)(v2 - 72) = a1;
  return sub_10005F164((_QWORD *)(v2 - 104));
}

uint64_t sub_1000D95F0()
{
  return type metadata accessor for Calendar(0);
}

uint64_t sub_1000D95F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1);
}

uint64_t sub_1000D960C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AttributedString.init(localized:bundle:linkA:linkB:)(a1, a2, a3, a4, 0, 0);
}

_QWORD *sub_1000D9618()
{
  uint64_t v0;

  return Hasher.init(_seed:)((_QWORD *)(v0 - 240));
}

void sub_1000D9624()
{
  _StringGuts.grow(_:)(16);
}

uint64_t sub_1000D962C()
{
  return 0;
}

uint64_t sub_1000D966C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

double sub_1000D9678()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 - 80) = 0;
  result = 0.0;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 96) = 0u;
  return result;
}

void sub_1000D9688()
{
  sub_1005FED88();
}

uint64_t sub_1000D9694()
{
  return 7630696;
}

uint64_t sub_1000D96A4()
{
  return SavedLocation.identifier.getter();
}

uint64_t sub_1000D96BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, (a3 - 32) | 0x8000000000000000, a2, v3);
}

uint64_t sub_1000D96E8()
{
  return type metadata accessor for LocationViewerViewAction(0);
}

uint64_t sub_1000D96F0()
{
  return type metadata accessor for ToolbarSearchViewModel.State(0);
}

uint64_t sub_1000D9714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000D9724()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 200) + 8))(*(_QWORD *)(v0 - 224), *(_QWORD *)(v0 - 192));
}

id sub_1000D9734(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_1000D9740()
{
  return type metadata accessor for SunriseSunsetDetailViewModel(0);
}

double sub_1000D9748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100590FB0(v2, v0, v1);
}

uint64_t sub_1000D9758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 32))(*(_QWORD *)(v2 - 152), v1, v0);
}

void sub_1000D9770(char *a1)
{
  sub_1001554AC(*a1);
}

uint64_t sub_1000D977C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000D9784()
{
  return type metadata accessor for ListViewModel(0);
}

uint64_t sub_1000D97A8()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000D97B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v2 - 288), 1, 1, a1);
  return v1;
}

uint64_t sub_1000D97F4(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 184));
  return type metadata accessor for ModalViewState(0);
}

void sub_1000D9814()
{
  sub_100080AC0();
}

uint64_t sub_1000D9820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

double sub_1000D9840()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

id sub_1000D9850(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000D985C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

void sub_1000D9868(id a1)
{

}

void sub_1000D9878()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v1 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  v4 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v0);
  *v4 = v3;
  v4[1] = v2;
}

uint64_t sub_1000D98A8()
{
  uint64_t v0;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 216), 1, 1, *(_QWORD *)(v0 - 168));
}

uint64_t sub_1000D98C0()
{
  uint64_t v0;

  return sub_10073A178(v0);
}

void sub_1000D98CC()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

uint64_t sub_1000D98E8()
{
  return type metadata accessor for LocationInput(0);
}

uint64_t sub_1000D98F0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

uint64_t sub_1000D9900()
{
  return type metadata accessor for EnvironmentValues(0);
}

void sub_1000D9910()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  sub_1007AE31C(v0, v2, v1);
}

char *sub_1000D9920@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  char *result;

  result = (char *)a1 + v1;
  *a1 = 0x4B79616C7265766FLL;
  a1[1] = 0xEB00000000646E69;
  return result;
}

uint64_t sub_1000D994C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 376) = a1;
  *(_QWORD *)(v3 - 384) = a2;
  return swift_release(v2);
}

uint64_t sub_1000D9964()
{
  return type metadata accessor for Measurement(255);
}

uint64_t sub_1000D996C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v0);
}

uint64_t sub_1000D9994()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 128, v0);
}

uint64_t sub_1000D99A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_1000D99BC()
{
  void *v0;

}

double sub_1000D99C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = sub_1000DB418(v2, a2);
  return Location.coordinate.getter(v3);
}

_QWORD *sub_1000D99E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  uint64_t v12;

  return Tips.Parameter.wrappedValue.getter(&a12, v12);
}

uint64_t sub_1000D99F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000D99FC()
{
  return 2;
}

uint64_t sub_1000D9A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return CurrentWeather.init(date:cloudCover:cloudCoverLow:cloudCoverMid:cloudCoverHigh:cloudCoverByAltitude:condition:symbolName:dewPoint:humidity:precipitationIntensity:pressure:pressureTrend:rainfallAmount:snowfallAmount:pastHourPrecipitationAmountByType:pastSixHoursPrecipitationAmountByType:pastTwentyFourHoursPrecipitationAmountByType:nextHourPrecipitationAmountByType:nextSixHoursPrecipitationAmountByType:nextTwentyFourHoursPrecipitationAmountByType:apparentPrecipitationIntensity:isDaylight:temperature:apparentTemperature:highTemperature:lowTemperature:uvIndex:visibility:wind:metadata:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 - 352), *(_QWORD *)(v5 - 328), *(_QWORD *)(v5 - 288));
}

uint64_t sub_1000D9A44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 336);
}

uint64_t sub_1000D9A5C()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v0, 1, v1);
}

uint64_t sub_1000D9A6C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1000D9A78@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_1000D9A84()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1008EC420(v2, *(char **)(v3 - 192), *(_QWORD *)(v3 - 168), v0, v1, *(_DWORD *)(v3 - 204) & 1);
}

uint64_t sub_1000D9ABC()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_1000D9ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_1000D9B0C(_QWORD *a1)
{
  uint64_t v1;

  sub_1000DB418(a1, v1);
  return v1;
}

uint64_t sub_1000D9B28()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 176, v0);
}

uint64_t sub_1000D9B34()
{
  return type metadata accessor for LocalizedStringResource(0);
}

uint64_t sub_1000D9B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000D9B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Disposable.dispose(on:)(a1, v1, v2);
}

uint64_t sub_1000D9B64@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000D9B78(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 1);
}

uint64_t sub_1000D9B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 83) = 2;
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 83, v1, v0);
}

uint64_t sub_1000D9BBC()
{
  return type metadata accessor for PrimitiveButtonStyleConfiguration(0);
}

uint64_t sub_1000D9BC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v2[120] + 16))(v2[164], a2, v2[121]);
}

uint64_t sub_1000D9BD8()
{
  return type metadata accessor for SunriseSunsetDetailViewState(0);
}

uint64_t sub_1000D9BE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 280) + 8))(*(_QWORD *)(v0 - 264), *(_QWORD *)(v0 - 256));
}

uint64_t sub_1000D9BFC()
{
  return type metadata accessor for NotificationSettingsInput(0);
}

uint64_t sub_1000D9C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, v2);
}

uint64_t sub_1000D9C20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A68(v2, a2);
}

uint64_t sub_1000D9C28()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 32))(*(_QWORD *)(v1 - 168), v0, *(_QWORD *)(v1 - 152));
}

void sub_1000D9C40(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v1);
}

void sub_1000D9C54(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000D9C70@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return swift_allocObject(v2, a1, a2 | 7);
}

id sub_1000D9C7C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0);
}

void sub_1000D9C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100121BA4((uint64_t)&a9, (uint64_t)&a13);
}

id sub_1000D9C94()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000D9CA0()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000D9CB0()
{
  uint64_t v0;

  return VisualEffect.opacity(_:)(v0);
}

uint64_t sub_1000D9CBC(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for ModifiedContent(255, v1, a1);
}

uint64_t sub_1000D9CCC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 160);
}

uint64_t sub_1000D9D08()
{
  return AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
}

uint64_t sub_1000D9D2C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000D9D34@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1000D9D54()
{
  return type metadata accessor for AveragesDetailInput.Content(0);
}

uint64_t sub_1000D9D78(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = a1;
  return v1 - 320;
}

uint64_t sub_1000D9D90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 20));
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000D9DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, a2, a3, v3);
}

id sub_1000D9DB4(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 1);
}

uint64_t sub_1000D9DBC()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000D9DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(a1, a2, a3, a4, a5, a6, a7, 0);
}

double sub_1000D9DD0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_1000D9DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return swift_release(*(_QWORD *)(v1 + (v0 & ~v2)));
}

uint64_t sub_1000D9DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 344) = (char *)&a9 - v9;
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000D9E08()
{
  uint64_t v0;
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(*(_QWORD *)(v1 - 152) + 44)));
}

uint64_t sub_1000D9E1C(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 192));
}

uint64_t sub_1000D9E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

double sub_1000D9E58()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double result;

  sub_1000D31B4(v0, v1, v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1000D9E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_1000D9E94(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, a1);
}

uint64_t sub_1000D9EA0()
{
  return type metadata accessor for SunriseSunsetTableViewModelFactory(0);
}

uint64_t sub_1000D9EA8()
{
  return 1835819363;
}

uint64_t sub_1000D9EB8()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_1000D9EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v2);
  return swift_beginAccess(v1, v3 - 112, 33, 0);
}

void sub_1000D9EF4(uint64_t a1)
{
  uint64_t *v1;

  sub_100021AA4(a1, v1);
}

uint64_t sub_1000D9EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

void sub_1000D9F14()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BF398(*(_QWORD *)(v1 + *(int *)(v0 + 104)), *(_QWORD *)(v1 + *(int *)(v0 + 104) + 8));

}

uint64_t sub_1000D9F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 312) + 8);
  v3 = *(_QWORD *)(v1 - 264);
  *(_QWORD *)(v1 - 312) = v2;
  return v2(v0, v3);
}

uint64_t sub_1000D9F84()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 144) + 8))(v0, *(_QWORD *)(v1 - 120));
}

uint64_t sub_1000D9F98()
{
  return type metadata accessor for AirQualityDetailViewModel.Model(0);
}

uint64_t sub_1000D9FA0()
{
  return type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
}

void sub_1000D9FBC()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000979AC(v1, v0);
}

uint64_t sub_1000D9FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v0, v2, v1);
}

uint64_t sub_1000D9FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Configurable.setting<A>(_:)(a1, v1, v2);
}

void sub_1000D9FF0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000D9FFC()
{
  return type metadata accessor for NewsArticleComponentView(0);
}

uint64_t sub_1000DA004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t sub_1000DA01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void sub_1000DA044(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 152) = 1752392040;
}

uint64_t sub_1000DA064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6 - 240, a2, a3, v5, a5);
}

__n128 sub_1000DA074()
{
  __int16 v0;
  uint64_t v1;
  __int16 v2;
  __int16 v3;
  __n128 result;
  __int128 v5;

  v2 = *(unsigned __int8 *)(v1 - 224);
  if (*(_BYTE *)(v1 - 223))
    v3 = v0;
  else
    v3 = 0;
  result = *(__n128 *)(v1 - 256);
  v5 = *(_OWORD *)(v1 - 240);
  *(__n128 *)(v1 - 304) = result;
  *(_OWORD *)(v1 - 288) = v5;
  *(_WORD *)(v1 - 272) = v3 | v2;
  return result;
}

uint64_t sub_1000DA0A8()
{
  return 0x64656C696166;
}

uint64_t sub_1000DA0C4()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_1000DA0CC()
{
  void *v0;

}

void sub_1000DA0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005FF4AC(a1, a2, 1, v2);
}

uint64_t sub_1000DA104()
{
  return static String.read(from:)();
}

uint64_t sub_1000DA10C()
{
  return 0;
}

uint64_t sub_1000DA13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Updatable.save<A>(setting:value:)(a1, a2, v2, v3);
}

uint64_t sub_1000DA14C()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

double sub_1000DA154()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DA160(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000DA170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000DA180()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v1 - 168), 1);
}

uint64_t sub_1000DA190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 288) + 104))(v2, a2, *(_QWORD *)(v3 - 280));
}

uint64_t sub_1000DA1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000DA1C4()
{
  uint64_t v0;

  return sub_10073A2FC(v0);
}

uint64_t sub_1000DA1D0()
{
  return type metadata accessor for SunriseSunsetInteractiveChartView(0);
}

uint64_t sub_1000DA1D8(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 6);
}

uint64_t sub_1000DA1E4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_1000DA1F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Configurable.setting<A>(_:)(a1, v1, v2);
}

void sub_1000DA1FC(unint64_t *a1, uint64_t *a2)
{
  sub_10003D2DC(a1, a2);
}

uint64_t sub_1000DA204()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000DA210@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 - 256);
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v4;
  return static String.localizedStringWithFormat(_:_:)(*(_QWORD *)(v3 - 296), *(_QWORD *)(v3 - 368), v2);
}

uint64_t sub_1000DA234()
{
  return 0;
}

void sub_1000DA24C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
}

uint64_t sub_1000DA278()
{
  uint64_t v0;

  return sub_10011F394(v0 - 160);
}

uint64_t sub_1000DA280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

__n128 *sub_1000DA294(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_1000DA2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_1000DA2C4()
{
  void *v0;

}

uint64_t sub_1000DA2CC()
{
  return type metadata accessor for Domain(0);
}

unint64_t sub_1000DA2D4()
{
  return sub_10082F034();
}

uint64_t sub_1000DA2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_1000DA2EC()
{
  return type metadata accessor for MapComponentViewModel(0);
}

uint64_t sub_1000DA2F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000DA300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000DA314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t sub_1000DA328()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000DA334()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100151DA4(v0, *(_QWORD *)(v1 - 376));
}

double sub_1000DA34C()
{
  double result;

  type metadata accessor for WeatherConditionBackgroundModifier(0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000DA380()
{
  uint64_t v0;

  return sub_1000AA25C(v0);
}

unint64_t sub_1000DA39C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_100926EDC();
}

uint64_t sub_1000DA3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000DA3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 104), a1);
}

double sub_1000DA3D4()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

double sub_1000DA3E0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DA3EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 144, v1 + 8);
}

uint64_t sub_1000DA404()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_1000DA428()
{
  uint64_t v0;

  sub_10008D47C(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
  sub_100109B54();
}

uint64_t sub_1000DA450(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_1000DA474(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000DA494(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000DA4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ChartLineStyle.init(strokeStyle:lineThickness:lineColor:lineDash:opacity:opacityIncreasedContrast:areaStyle:)(a1, a2, a3, 0, 1, v3);
}

_QWORD *sub_1000DA4B8(_QWORD *a1, uint64_t a2)
{
  return sub_1000DB418(a1, a2);
}

uint64_t sub_1000DA4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5)
{
  Swift::String v5;
  Swift::String v7;

  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0xD000000000000024;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v5, v7)._countAndFlagsBits;
}

void sub_1000DA4E0(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, *(_QWORD *)(a3 - 256), a2);
}

void sub_1000DA4EC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_10003D310(a1, v3, a3);
}

double sub_1000DA4F4(char a1)
{
  uint64_t v1;
  double result;

  *(_BYTE *)(v1 + 32) = a1;
  result = 0.0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_BYTE *)(v1 + 72) = 1;
  return result;
}

uint64_t sub_1000DA510()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 160) + 8))(*(_QWORD *)(v0 - 168), *(_QWORD *)(v0 - 152));
}

id sub_1000DA520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100551298(a1, a2, a3, a4, 1);
}

uint64_t sub_1000DA52C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000DA540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + *(int *)(v2 + 28), v1);
}

uint64_t sub_1000DA558()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DA570(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000DA578()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 152))();
}

uint64_t sub_1000DA580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000DA58C()
{
  uint64_t (*v0)(_QWORD, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 248), *(_QWORD *)(v2 - 168), v1);
}

uint64_t sub_1000DA5A0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10068ACFC(*(_QWORD *)(v1 - 96), v0);
}

uint64_t sub_1000DA5AC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1001517AC(6, 254, v1, 0, 0, v2, v0);
}

uint64_t sub_1000DA5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 224) + 104))(v2, a2, v3);
}

unint64_t sub_1000DA600()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 5;
  return sub_1004B1DE4();
}

uint64_t sub_1000DA60C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1004CE0D0(a1, v1);
}

uint64_t sub_1000DA614()
{
  return DayWeather.date.getter();
}

uint64_t sub_1000DA61C()
{
  return 0x6465766965636572;
}

uint64_t sub_1000DA63C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000DA644(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000DA64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FrameLayout.init(width:height:alignment:)(a1, a2, a3, 0);
}

uint64_t sub_1000DA654()
{
  uint64_t v0;
  uint64_t v1;

  return static CurrentWeather.== infix(_:_:)(v1, v0);
}

uint64_t sub_1000DA660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000DA670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000DA688@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t sub_1000DA69C()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000DA6A8()
{
  return 0;
}

void sub_1000DA6C4()
{
  Hasher._combine(_:)(1uLL);
}

uint64_t sub_1000DA6CC()
{
  uint64_t v0;

  return v0;
}

void sub_1000DA6E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037768(a1, v2, v1);
}

uint64_t sub_1000DA6F0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 304) = v1;
  *(_QWORD *)(v7 - 296) = v2;
  *(_QWORD *)(v7 - 288) = v3;
  *(_QWORD *)(v7 - 280) = v4;
  *(_DWORD *)(v7 - 272) = a1 | v5;
  *(_BYTE *)(v7 - 268) = 0;
  return sub_100665F38(v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1000DA740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, 0xE400000000000000, a3, v3);
}

uint64_t sub_1000DA74C()
{
  return type metadata accessor for ViewState.SecondaryViewState(0);
}

uint64_t sub_1000DA768(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

uint64_t sub_1000DA770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000DA778(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_1000CE1C8(a1, a2, (uint64_t *)va);
}

unint64_t sub_1000DA784()
{
  uint64_t v0;

  return sub_1000991C8(v0);
}

uint64_t sub_1000DA790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t sub_1000DA79C()
{
  return type metadata accessor for EnvironmentAction(0);
}

void sub_1000DA7A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2, a2);
}

void sub_1000DA7AC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(v2, a1, v1);
}

uint64_t sub_1000DA7BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 328));
}

uint64_t sub_1000DA7C8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ShortDescription.init(name:_:)(0xD00000000000001CLL, (a2 - 32) | 0x8000000000000000, a1, v2);
}

uint64_t sub_1000DA7E4()
{
  return type metadata accessor for TargetWindowSizeClass(0);
}

void *sub_1000DA7EC(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0xD0uLL);
}

uint64_t sub_1000DA7F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 176))();
}

uint64_t sub_1000DA800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for MeasurementEditorView(a1, v4, a3, a4);
}

uint64_t sub_1000DA808(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * a1));
}

void sub_1000DA814(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, v3, a3);
}

uint64_t sub_1000DA81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

uint64_t sub_1000DA830()
{
  return type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
}

uint64_t sub_1000DA838()
{
  return type metadata accessor for ObservableResolver(0);
}

uint64_t sub_1000DA84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1000E3404(v2, v1, v0);
}

void sub_1000DA85C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_10007802C(v2, a1 + v1, v3);
}

unint64_t sub_1000DA86C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_100931DD0();
}

uint64_t sub_1000DA878()
{
  return type metadata accessor for DetailChartCondition(0);
}

uint64_t sub_1000DA880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(v2, a1, a2);
}

double sub_1000DA898()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  double result;

  v2 = *v1;
  *v0 = *v1;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000DA8A4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000DA8AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 - 360))(*(_QWORD *)(v0 - 432), *(_QWORD *)(v0 - 608));
}

uint64_t sub_1000DA8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(a1, a2, a3, 2, v3);
}

uint64_t sub_1000DA8D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DA900()
{
  _QWORD *v0;

  return swift_allocObject(v0[23], v0[33], v0[32]);
}

uint64_t sub_1000DA90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of Collection.subscript.read(v3 - 112, v0, v2, v1);
}

uint64_t sub_1000DA920()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DA934()
{
  return type metadata accessor for DispatchPredicate(0);
}

uint64_t sub_1000DA950()
{
  return type metadata accessor for AirQualityDetailViewModel.Model(0);
}

double sub_1000DA958@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000DA964@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + a1 + 24);
  sub_1000DB418((_QWORD *)(v1 + a1), v2);
  return v2;
}

void sub_1000DA98C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 168), a2);
}

double sub_1000DA994()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1000DA99C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000DA9A8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 256));
}

_QWORD *sub_1000DA9B8()
{
  uint64_t v0;

  return sub_1000DB418((_QWORD *)(*(_QWORD *)(v0 - 296) + 56), *(_QWORD *)(*(_QWORD *)(v0 - 296) + 80));
}

uint64_t sub_1000DA9CC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(a1, 1, v1);
}

uint64_t sub_1000DA9E8()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

uint64_t sub_1000DA9F0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000DA9FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MoonDetailRootContentView(0) - 8) + 80);
  return v0 + ((v1 + 16) & ~v1);
}

uint64_t sub_1000DAA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 168) = (char *)&a9 - v9;
  return type metadata accessor for DayWeather(0);
}

uint64_t sub_1000DAA3C()
{
  return dispatch thunk of Column.value.getter();
}

uint64_t sub_1000DAA48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000DAA50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000DAA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;

  return sub_100560600(1, a2, v6, a4, 0, a6);
}

uint64_t sub_1000DAA7C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 96) = result;
  return result;
}

uint64_t sub_1000DAA90()
{
  return type metadata accessor for WeatherFormatPlaceholder(0);
}

void *sub_1000DAA98(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0x70uLL);
}

uint64_t sub_1000DAAA4()
{
  return 0;
}

uint64_t sub_1000DAAB8(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000DAAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return dispatch thunk of Hashable.hash(into:)(a1, v3, a3);
}

void sub_1000DAAC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, *(_QWORD *)(v3 - 232), a3);
}

uint64_t sub_1000DAAD4(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return type metadata accessor for ViewState.SecondaryViewState(0);
}

uint64_t sub_1000DAAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000DAAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

double sub_1000DAB00()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_OWORD *)(v0 + 440) = 0u;
  *(_OWORD *)(v0 + 456) = 0u;
  *(_BYTE *)(v0 + 472) = 0;
  return result;
}

uint64_t sub_1000DAB2C()
{
  return 0;
}

uint64_t sub_1000DAB38(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 328) = result;
  *(_QWORD *)(v2 - 352) = a2;
  return result;
}

uint64_t sub_1000DAB4C(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 6);
}

uint64_t sub_1000DAB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for MeasurementEditorView(0, v4, a3, a4);
}

void sub_1000DAB7C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000215BC(*(_QWORD *)(v2 - 376), a2);
}

uint64_t sub_1000DAB88(uint64_t a1)
{
  return swift_allocObject(a1, 96, 7);
}

uint64_t sub_1000DAB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, a5, 2, v5);
}

uint64_t sub_1000DABA0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_1000CE1C8(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000DABAC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000DABB8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 416);
}

double sub_1000DABCC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 40))).n128_u64[0];
  return result;
}

void sub_1000DAC04(uint64_t a1, id *a2)
{

}

uint64_t sub_1000DAC14(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = result;
  return result;
}

uint64_t sub_1000DAC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v4 - 168), a2, v3);
}

uint64_t sub_1000DAC40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = v2;
  return static Edge.Set.all.getter();
}

uint64_t sub_1000DAC4C()
{
  return type metadata accessor for AirPollutant(0);
}

uint64_t sub_1000DAC60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 200))(a1, a2, v2);
}

uint64_t sub_1000DAC6C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DAC78()
{
  return type metadata accessor for LocationComponentViewModel(0);
}

uint64_t sub_1000DAC8C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 184) = result;
  return result;
}

void sub_1000DACA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(v2 - 160, a2);
}

uint64_t sub_1000DACA8()
{
  return type metadata accessor for Settings.Maps.Overrides(0);
}

uint64_t sub_1000DACB4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DACC0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 192));
}

unint64_t sub_1000DACC8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 16;
  return sub_1004FB984();
}

uint64_t sub_1000DACD4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DACE8@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 176));
}

uint64_t sub_1000DACF4()
{
  return type metadata accessor for LocationOfInterest(0);
}

uint64_t sub_1000DAD00()
{
  uint64_t v0;

  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_1000DAD14()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 8));
}

__n128 sub_1000DAD1C()
{
  char v0;
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 - 224);
  result = *(__n128 *)(v1 - 256);
  v4 = *(_OWORD *)(v1 - 240);
  *(__n128 *)(v1 - 304) = result;
  *(_OWORD *)(v1 - 288) = v4;
  *(_BYTE *)(v1 - 272) = v2;
  *(_BYTE *)(v1 - 271) = v0;
  return result;
}

double sub_1000DAD58()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56)).n128_u64[0];
  return result;
}

uint64_t sub_1000DAD60()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_1000DAD70()
{
  sub_10011ED70();
}

uint64_t sub_1000DAD8C()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 176), v1);
}

void sub_1000DAD9C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 312) = *(_QWORD *)(v0 + 8);
}

double sub_1000DADAC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DADB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1000DADC4()
{
  return EnvironmentValues.accessibilityInvertColors.getter();
}

uint64_t sub_1000DADD0@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectRetain(*(_QWORD *)(a1 - 256));
}

uint64_t sub_1000DADDC()
{
  uint64_t v0;

  return Date.wc_addHours(_:calendar:)(1, v0);
}

uint64_t sub_1000DADEC()
{
  return type metadata accessor for ListView.ListContentView(0);
}

double sub_1000DAE08()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000F9174(v0, v1);
}

uint64_t sub_1000DAE14()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000DAE1C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 320);
}

uint64_t sub_1000DAE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1272) + 8))(v1, v2);
}

uint64_t sub_1000DAE48(uint64_t a1)
{
  uint64_t v1;

  return sub_100102BB4(a1, *(_QWORD *)(v1 - 192));
}

uint64_t sub_1000DAE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v0, v1);
}

uint64_t sub_1000DAE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(0xD000000000000010, a2, a3, v3);
}

void sub_1000DAE84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000DAE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

uint64_t sub_1000DAE98()
{
  return sub_1002EFE64();
}

uint64_t sub_1000DAEA0()
{
  return 0;
}

void sub_1000DAED0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C77C(a1, v2, v1);
}

uint64_t sub_1000DAEDC()
{
  return type metadata accessor for DailyComponentView(0);
}

uint64_t sub_1000DAEE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DAEF0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 344);
}

uint64_t sub_1000DAF0C()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_1000DAF14()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1000DAF20()
{
  uint64_t (*v0)(_QWORD, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 248), *(_QWORD *)(v2 - 168), v1);
}

uint64_t sub_1000DAF34@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000DAF40()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DAF68(uint64_t *a1)
{
  uint64_t v1;

  return sub_1004CDB84(a1, v1);
}

uint64_t sub_1000DAF70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10010AAC4(v2, a2);
}

uint64_t sub_1000DAF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

void sub_1000DAF90()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C77C(v2, v0, v1);
}

uint64_t sub_1000DAFA0()
{
  return type metadata accessor for MapEmbedStateData(0);
}

uint64_t sub_1000DAFA8(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, *(_QWORD *)(v1 - 128));
}

uint64_t sub_1000DAFB0(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 7);
}

uint64_t sub_1000DAFC0()
{
  double v0;
  double v1;

  return CLLocationCoordinate2D.id.getter(v0, v1);
}

double sub_1000DAFCC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1)).n128_u64[0];
  return result;
}

uint64_t sub_1000DAFE4()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_1000DB000()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 0;
  return sub_100631570();
}

_BYTE *sub_1000DB008(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

__n128 sub_1000DB01C()
{
  uint64_t v0;
  char v1;
  __n128 result;
  __int128 v3;

  v1 = *(_BYTE *)(v0 - 224);
  result = *(__n128 *)(v0 - 256);
  v3 = *(_OWORD *)(v0 - 240);
  *(__n128 *)(v0 - 304) = result;
  *(_OWORD *)(v0 - 288) = v3;
  *(_BYTE *)(v0 - 272) = v1;
  *(_BYTE *)(v0 - 271) = 1;
  return result;
}

void sub_1000DB04C(uint64_t a1, char a2, char a3, char a4)
{
  sub_100133204(a1, a2, a3, a4, 0, 0);
}

uint64_t sub_1000DB058()
{
  return 0x616E6964726F6F63;
}

uint64_t sub_1000DB074(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

uint64_t sub_1000DB07C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100021A3C(v2, a2);
}

uint64_t sub_1000DB084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000DB08C()
{
  return static Logger.automation.getter();
}

uint64_t sub_1000DB0B4(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1
                                 + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))
                                 + 8));
}

uint64_t sub_1000DB0D8()
{
  return type metadata accessor for ModalViewState(0);
}

void *sub_1000DB0F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = a1;
  return _Block_copy((const void *)(v2 - 160));
}

void sub_1000DB104(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2, a2);
}

uint64_t sub_1000DB10C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getAtKeyPath(v1, v0);
}

uint64_t sub_1000DB11C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 360) = result;
  *(_QWORD *)(v2 - 392) = a2;
  return result;
}

uint64_t sub_1000DB130()
{
  return 0;
}

double sub_1000DB144()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void *sub_1000DB150(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0x60uLL);
}

uint64_t sub_1000DB15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 - 192));
}

uint64_t sub_1000DB168(uint64_t a1)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(a1 + 28)));
}

unint64_t sub_1000DB188()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return sub_1007FF458();
}

uint64_t sub_1000DB194()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1000DB19C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 608))(a1, *(_QWORD *)(v1 - 360));
}

uint64_t sub_1000DB1B0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000DB1BC(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 344));
}

double sub_1000DB1D0()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;

  return sub_1001639C8(v2, v0, v1);
}

uint64_t sub_1000DB1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 136));
}

uint64_t sub_1000DB1EC@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000DB200@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1000DB22C()
{
  return type metadata accessor for ChartAreaStyle(0);
}

uint64_t sub_1000DB234()
{
  uint64_t v0;
  uint64_t v1;

  return v1 + *(int *)(v0 + 28);
}

uint64_t sub_1000DB248()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 184) + 8))(v0, *(_QWORD *)(v1 - 120));
}

double sub_1000DB25C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1)).n128_u64[0];
  return result;
}

uint64_t sub_1000DB264()
{
  return type metadata accessor for DayWeather(0);
}

uint64_t sub_1000DB26C()
{
  return UIListContentConfiguration.secondaryText.setter();
}

uint64_t sub_1000DB274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v4, a2, v3);
}

void sub_1000DB284(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10003773C(a1, a2, v2);
}

void *sub_1000DB28C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

double sub_1000DB2A8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_1000DB2B0()
{
  return NotificationSubscription.Location.location.getter();
}

uint64_t sub_1000DB2BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for Date(0);
}

unint64_t sub_1000DB2CC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return sub_1004FBD08();
}

uint64_t sub_1000DB2D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10058214C(v2 + *(int *)(a1 + 48), v1);
}

uint64_t sub_1000DB2E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DB32C()
{
  return 0x696C617551726961;
}

uint64_t sub_1000DB348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.write(to:)(a1, a2, a3);
}

uint64_t sub_1000DB35C()
{
  return type metadata accessor for SavedLocation(0);
}

uint64_t sub_1000DB364(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1000DB370(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, *(_QWORD *)(v3 - 232), a3);
}

uint64_t sub_1000DB37C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1000DB39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000DB3AC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DB3BC()
{
  return type metadata accessor for CurrentWeather(0);
}

uint64_t sub_1000DB3F0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 296));
}

uint64_t sub_1000DB3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 248) + 32))(*(_QWORD *)(v2 - 256), v0, v1);
}

_QWORD *sub_1000DB418(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t type metadata accessor for LocationViewerViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C04990;
  if (!qword_100C04990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewerViewModel);
  return result;
}

uint64_t type metadata accessor for MainViewModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C092D8, (uint64_t)&nominal type descriptor for MainViewModel);
}

uint64_t sub_1000DB488(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v18 + 16) = a1;
  v24 = v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_appConfiguration;
  *(_BYTE *)(v18 + 24) = a2;
  sub_10007802C(a3, v24, type metadata accessor for AppConfigurationState);
  sub_10007802C(a4, v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, type metadata accessor for EnvironmentState);
  sub_10007802C(a5, v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, type metadata accessor for LocationsState);
  v25 = v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications;
  *(_BYTE *)v25 = a6;
  *(_QWORD *)(v25 + 8) = a7;
  *(_QWORD *)(v25 + 16) = a8;
  sub_10007802C(a9, v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn, type metadata accessor for NotificationsOptInState);
  sub_10007802C(a10, v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, type metadata accessor for TimeState);
  sub_10007802C(a11, v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, type metadata accessor for ViewState);
  sub_1001FBCF4(v26, v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, type metadata accessor for ModalViewState);
  v27 = v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData;
  *(_OWORD *)v27 = a13;
  *(_QWORD *)(v27 + 16) = a14;
  *(_QWORD *)(v27 + 24) = a15;
  v28 = v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState;
  *(_BYTE *)v28 = a16;
  *(_QWORD *)(v28 + 8) = a17;
  *(_QWORD *)(v18 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_contentStatusBanners) = a18;
  return v18;
}

void sub_1000DB648(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_1000B4328(v3);
  sub_10004A298();
}

void sub_1000DB674(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_100089000(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10004A298();
}

uint64_t sub_1000DB6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:resolvers:)(v10, v9, v12 - 128, v8, v11, v7, a7, 0);
}

uint64_t sub_1000DB6D0()
{
  uint64_t v0;
  uint64_t v1;

  return URLHandlerMatch.Values.subscript.getter(v0, v1);
}

uint64_t sub_1000DB6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 96, v2);
}

uint64_t sub_1000DB6F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

void sub_1000DB750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_100037794(a1, v2, v1);
}

uint64_t sub_1000DB75C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return swift_endAccess(va);
}

unint64_t sub_1000DB764()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2081;
  return sub_1002084DC();
}

uint64_t sub_1000DB774()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_1000DB780()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DB794()
{
  return type metadata accessor for SkyBackgroundGradient(0);
}

uint64_t sub_1000DB79C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 40)));
}

uint64_t sub_1000DB7A8(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 0);
}

uint64_t sub_1000DB7B8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void sub_1000DB7CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_100248174(a1, a2, a3, a4, 0);
}

void sub_1000DB7D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037794(a1, a2, v2);
}

uint64_t sub_1000DB7E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 328) + 8))(*(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 320));
}

uint64_t sub_1000DB7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000DB80C()
{
  uint64_t v0;

  return _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 - 120));
}

uint64_t sub_1000DB814()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

_QWORD *sub_1000DB820()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000DB418(v0, *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000DB860()
{
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000DB868()
{
  uint64_t (*v0)(void);

  return v0();
}

id sub_1000DB874(void *a1)
{
  return objc_msgSend(a1, "mainBundle");
}

uint64_t sub_1000DB884(uint64_t a1)
{
  return UITableView.register<A>(cell:name:)(a1, 0, 0, a1);
}

uint64_t sub_1000DB894(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t *a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10014819C(a1, a2, a3, a4, (uint64_t)va);
}

double sub_1000DB8A0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DB8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, a2, *(_QWORD *)(v3 - 144), v2);
}

void sub_1000DB8C0(unsigned __int8 a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _BYTE *a5@<X8>, char a6, char a7, uint64_t a8, char a9, char a10, char a11, uint64_t a12)
{
  sub_1007686D0(a1, a2, a3, a4, 0, 0, 2, 2, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1000DB8D4()
{
  return type metadata accessor for BackgroundAnimationData.Model(0);
}

void sub_1000DB8DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100321224(a1, a2, v2);
}

unint64_t sub_1000DB8E4()
{
  return sub_1002270FC();
}

uint64_t sub_1000DB8F0()
{
  return type metadata accessor for MoonComponentViewModel(0);
}

uint64_t sub_1000DB8F8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000DB918()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_1000DB92C()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 72) = *(_BYTE *)(v1 + 72);
}

uint64_t sub_1000DB944()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

void sub_1000DB950(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = 0;
}

uint64_t sub_1000DB978()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

id sub_1000DB984(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_1000DB990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static WeatherFormatStyle<>.weather(_:usage:scaling:trimLeadingZeroes:locale:)(v0, *(_QWORD *)(v3 - 152), v2, 2, v1);
}

uint64_t sub_1000DB9AC()
{
  return DynamicTypeSize.isAccessibilitySize.getter();
}

uint64_t sub_1000DB9B8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000DB9C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DB9D8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000DB9E0()
{
  uint64_t v0;

  return v0 - 104;
}

uint64_t sub_1000DB9F4()
{
  return type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
}

uint64_t sub_1000DB9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return a26;
}

uint64_t sub_1000DBA2C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for NotificationSubscription.Location(0);
}

uint64_t sub_1000DBA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000DBA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_1000DBA6C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

id sub_1000DBA78()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1936));
}

uint64_t sub_1000DBA84()
{
  uint64_t (*v0)(_QWORD, _QWORD);
  uint64_t v1;

  return v0(*(_QWORD *)(v1 - 320), *(_QWORD *)(v1 - 280));
}

uint64_t sub_1000DBA9C()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000DBAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 136, a2, 1);
}

uint64_t sub_1000DBAB0(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

void sub_1000DBAD4(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  sub_1004B7C08(a1, a2, 7);
}

uint64_t sub_1000DBADC()
{
  return 0x73776F626E696172;
}

void sub_1000DBAF0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0x3A64657461657263;
  *(_QWORD *)(v0 - 112) = 0xE900000000000020;
  sub_1004E23A0();
}

uint64_t sub_1000DBB18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 96), a1);
}

uint64_t sub_1000DBB2C()
{
  return type metadata accessor for MainAction(0);
}

void sub_1000DBB38()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1000215BC(v1, v0);
}

void sub_1000DBB44(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037794(a1, a2, v2);
}

uint64_t sub_1000DBB4C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DBB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000DBB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 192));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000DBB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000DBB98()
{
  return type metadata accessor for ComparisonCapsuleViewModel.Row.Body(0);
}

uint64_t sub_1000DBBA0(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1000DBBB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 128));
  return static Set<>.full.getter(v2);
}

id sub_1000DBBCC(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, "stringFromDate:", a1);
}

uint64_t sub_1000DBBE4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000DBBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1000BA294(a5);
}

uint64_t sub_1000DBBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000DBC04()
{
  return type metadata accessor for PreviewLocation(0);
}

uint64_t sub_1000DBC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100632C40(v2, a1 + v1);
}

__n128 sub_1000DBC2C@<Q0>(__int16 a1@<W8>)
{
  __int16 v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  result = *(__n128 *)(v2 - 256);
  v4 = *(_OWORD *)(v2 - 240);
  *(__n128 *)(v2 - 304) = result;
  *(_OWORD *)(v2 - 288) = v4;
  *(_WORD *)(v2 - 272) = v1 | a1;
  *(_BYTE *)(v2 - 270) = 0;
  return result;
}

uint64_t sub_1000DBC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v1, v0);
}

double sub_1000DBC6C()
{
  return 0.0;
}

uint64_t sub_1000DBC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 248));
}

double sub_1000DBC94()
{
  uint64_t v0;

  return sub_1006840CC(v0 + 976);
}

double sub_1000DBCA0()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 136)).n128_u64[0];
  return result;
}

uint64_t sub_1000DBCA8()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_1000DBCB4()
{
  return type metadata accessor for RedactionReasons(0);
}

uint64_t sub_1000DBCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return _s7Weather24LocationCompositionStateOwst_0(v6, 1, 1, v5);
}

uint64_t sub_1000DBCE8()
{
  return type metadata accessor for CompactOverviewTableColumnView(0);
}

uint64_t sub_1000DBCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  return sub_1006D162C((uint64_t)&a27);
}

uint64_t sub_1000DBCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000DBD0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32))(a1, v3, v2);
}

uint64_t sub_1000DBD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 96), v1);
}

uint64_t sub_1000DBD2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 192) + 8))(*(_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 168));
}

uint64_t sub_1000DBD54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_storeEnumTagMultiPayload(v2, a2, 1);
}

void sub_1000DBD60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, *(_QWORD *)(a2 - 256), v2);
}

void sub_1000DBD70(unint64_t *a1, uint64_t *a2)
{
  sub_10003D2DC(a1, a2);
}

uint64_t sub_1000DBD78()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 384), 1, 1, v0);
}

uint64_t sub_1000DBD94()
{
  return 0x53657369726E7573;
}

uint64_t sub_1000DBDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Definition.whenTesting(_:_:)(v2, a2, 0);
}

uint64_t sub_1000DBDC8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 104) + 8))(v0, *(_QWORD *)(v1 - 96));
}

uint64_t sub_1000DBDD8()
{
  return type metadata accessor for Measurement(0);
}

void sub_1000DBDEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;
  Swift::String v13;

  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t sub_1000DBDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

_QWORD *sub_1000DBE08(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  return sub_10005F164(v1);
}

uint64_t sub_1000DBE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_1000DBE24()
{
  sub_10017BA10();
}

uint64_t sub_1000DBE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 240) = a2;
  *(_QWORD *)(v3 - 232) = a1;
  return swift_release(v2);
}

uint64_t sub_1000DBE3C()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000DBE48()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 560) + 8))(*(_QWORD *)(v0 - 280), *(_QWORD *)(v0 - 552));
}

uint64_t sub_1000DBE68()
{
  return 0;
}

void sub_1000DBE9C()
{
  _DWORD *v0;

  v0[32] = 0;
  v0[34] = 0;
  v0[30] = 1;
}

void sub_1000DBEC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100033A34(a1, a2, v2);
}

uint64_t sub_1000DBED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v3);
  return WeatherMetadata.init(date:expirationDate:attribution:)(v1, v2, v0);
}

void sub_1000DBF00()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000979AC(v0, v1);
}

uint64_t sub_1000DBF0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000DBF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_arrayDestroy(a10, 2);
}

uint64_t sub_1000DBF2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 432))();
}

uint64_t sub_1000DBF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

void sub_1000DBF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 208);
  *(_QWORD *)(v2 - 136) = v1;
  *(_QWORD *)(v2 - 128) = v3;
  v4 = *(_QWORD *)(v2 - 216);
  *(_QWORD *)(v2 - 120) = v0;
  *(_QWORD *)(v2 - 112) = v4;
}

uint64_t sub_1000DBF60()
{
  uint64_t v0;
  uint64_t v1;

  return State.init(wrappedValue:)(v1 - 160, v0);
}

uint64_t sub_1000DBF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_1000DBF80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_10007C75C(a1, *(_QWORD *)(a2 - 256), v2);
}

double sub_1000DBF90()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DBF9C()
{
  return type metadata accessor for PrecipitationTotalPlatterViewModel(0);
}

uint64_t sub_1000DBFAC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DBFB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

unint64_t sub_1000DBFD0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return sub_1009251B4();
}

uint64_t sub_1000DBFD8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_1000DBFE4()
{
  return 0;
}

uint64_t sub_1000DC008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_1000DC014()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10056E8A8(v0, v1);
}

uint64_t sub_1000DC020()
{
  uint64_t v0;

  return v0;
}

void sub_1000DC030()
{
  uint64_t v0;

  sub_10095D8AC(v0);
}

uint64_t sub_1000DC03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

unint64_t sub_1000DC05C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_10029E324();
}

uint64_t sub_1000DC068()
{
  return type metadata accessor for WindComponentCompassViewModel(0);
}

uint64_t sub_1000DC074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ConditionalContent<>.init(storage:)(a1, a2, a3, a4, a4);
}

uint64_t sub_1000DC07C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

double sub_1000DC084()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 - 120)).n128_u64[0];
  return result;
}

unint64_t sub_1000DC08C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 71) = 1;
  return sub_100731E04();
}

uint64_t sub_1000DC098(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000DC0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, *(_QWORD *)(v2 - 176));
}

uint64_t sub_1000DC0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1000DC0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 168) = (char *)&a9 - v9;
  return 0;
}

uint64_t sub_1000DC0F0@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2;
  return result;
}

__n128 sub_1000DC104()
{
  __n128 *v0;

  return v0[6];
}

uint64_t sub_1000DC11C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DC128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1000DC134()
{
  return type metadata accessor for ConditionUnits(0);
}

__n128 sub_1000DC13C(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[12];
  a1[1] = result;
  return result;
}

uint64_t sub_1000DC150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, uint64_t);
  uint64_t v3;

  return v2(*(_QWORD *)(v3 - 184), v0, v1);
}

void sub_1000DC160(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000DC17C()
{
  return type metadata accessor for NewsArticleComponentViewModel(0);
}

uint64_t sub_1000DC18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v2;
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v3;
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 40) = v4;
  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 56) = v5;
  *(_BYTE *)(v0 + 64) = *(_BYTE *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 80) = v6;
  *(_BYTE *)(v0 + 88) = *(_BYTE *)(v1 + 88);
  return swift_bridgeObjectRetain(v2);
}

void *sub_1000DC1C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = a1;
  *(_QWORD *)(v2 - 136) = v1;
  return _Block_copy((const void *)(v2 - 160));
}

void sub_1000DC1D4()
{
  void *v0;

}

void sub_1000DC1E0()
{
  uint64_t v0;

}

unint64_t sub_1000DC1E8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 10;
  return sub_1004FBAEC();
}

char *sub_1000DC1F4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000DC214()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 400);
}

void sub_1000DC22C(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_1000DC250()
{
  return type metadata accessor for LocationViewModel(0);
}

uint64_t sub_1000DC258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 344) = (char *)&a9 - v9;
  return 0;
}

uint64_t sub_1000DC274(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 184) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 88);
}

uint64_t sub_1000DC28C()
{
  return 0;
}

double sub_1000DC2A0()
{
  uint64_t *v0;

  return sub_10010F9B0(v0[41], v0[43], v0[44], v0[45]);
}

uint64_t sub_1000DC2B0()
{
  return Calendar.dateComponents(_:from:to:)();
}

double sub_1000DC2BC()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DC2C8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 864));
}

uint64_t sub_1000DC2F4(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1000DC314()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v1 + *(int *)(v0 + 96)));
  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 100)));
}

double sub_1000DC334()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DC344(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, v1);
  return type metadata accessor for SearchViewState(0);
}

void sub_1000DC364(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_100080C0C(a1, *(_QWORD *)(a3 - 256), a2);
}

void sub_1000DC370(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

uint64_t sub_1000DC384()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 488))();
}

uint64_t sub_1000DC390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

__n128 sub_1000DC3AC()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 56);
}

id sub_1000DC3C4(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 - 304), a2);
}

uint64_t sub_1000DC3D0()
{
  return type metadata accessor for DetailChartsViewModel(0);
}

double sub_1000DC3D8()
{
  int *v0;
  uint64_t v1;
  double result;

  sub_1000BF398(*(_QWORD *)(v1 + v0[14]), *(_QWORD *)(v1 + v0[14] + 8));
  sub_1000BF398(*(_QWORD *)(v1 + v0[15]), *(_QWORD *)(v1 + v0[15] + 8));
  sub_1000BF398(*(_QWORD *)(v1 + v0[16]), *(_QWORD *)(v1 + v0[16] + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v1 + v0[17] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000DC42C()
{
  uint64_t v0;

  return NotificationSubscription.Location.init(_:)(v0);
}

uint64_t sub_1000DC43C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v2);
}

void sub_1000DC448(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  uint64_t v4;

  _os_log_impl(a1, *(os_log_t *)(v4 - 176), a3, a4, *(uint8_t **)(v4 - 232), 0x20u);
}

unint64_t sub_1000DC460()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 6;
  return sub_1004FBBDC();
}

uint64_t sub_1000DC46C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DC480()
{
  uint64_t v0;

  return objc_opt_self(*(_QWORD *)(v0 + 1616));
}

uint64_t sub_1000DC488(uint64_t a1)
{
  uint64_t v1;

  return sub_100128208(a1, v1);
}

uint64_t sub_1000DC490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

uint64_t sub_1000DC4C8()
{
  return type metadata accessor for PreprocessedWeatherData(0);
}

uint64_t sub_1000DC4D0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for DetailChartSelection(0);
}

uint64_t sub_1000DC508()
{
  return 0;
}

void sub_1000DC51C()
{
  sub_10008D488();
}

uint64_t sub_1000DC524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000DC52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000DC57C(uint64_t a1)
{
  return NSNotificationCenter.publisher(for:object:)(a1, 0);
}

uint64_t sub_1000DC588(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 368));
}

uint64_t sub_1000DC59C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000DC5B0(uint64_t a1)
{
  type metadata accessor for WeatherConditionBackgroundModifier(0);
  return a1;
}

uint64_t sub_1000DC5E0()
{
  return type metadata accessor for ConditionDetailChartDataInput(0);
}

uint64_t sub_1000DC5E8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000DC5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000DC5F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v1, v2);
}

double sub_1000DC610()
{
  return 0.0;
}

__n128 sub_1000DC624@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)a1;
}

uint64_t sub_1000DC638()
{
  uint64_t v0;

  return v0;
}

void sub_1000DC644(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

void sub_1000DC650(uint64_t a1, uint64_t a2)
{
  sub_100600708(a1, a2);
}

uint64_t sub_1000DC668()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1000DC684()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000DC68C()
{
  return type metadata accessor for DetailChartCondition(0);
}

uint64_t sub_1000DC694()
{
  return type metadata accessor for WeatherMapTrackingState(0);
}

uint64_t sub_1000DC69C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  *(_BYTE *)(v1 + 24) = 0;
  return type metadata accessor for AutomationInfoProperty(0);
}

uint64_t sub_1000DC6AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000DC6BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a1 + 20);
  v4 = v1 + v3;
  v5 = v2 + v3;
  v7 = *(_QWORD *)(v2 + v3);
  v6 = *(_QWORD *)(v2 + v3 + 8);
  *(_QWORD *)v4 = v7;
  *(_QWORD *)(v4 + 8) = v6;
  v8 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v4 + 24) = v8;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v4 + 48) = v9;
  *(_BYTE *)(v1 + *(int *)(a1 + 24)) = *(_BYTE *)(v2 + *(int *)(a1 + 24));
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_1000DC6FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000DC708(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000DC710@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for LocationModel(0);
}

uint64_t sub_1000DC720()
{
  return type metadata accessor for SunriseSunsetEventCalculator(0);
}

uint64_t sub_1000DC728()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0;
  *(_QWORD *)(v0 - 112) = 0xE000000000000000;
  return Location.coordinate.getter();
}

void sub_1000DC738(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_10007C75C(a1, v1, v2);
}

uint64_t sub_1000DC744()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 88));
}

uint64_t sub_1000DC74C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DC758@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v1 - 256), *(_QWORD *)(v2 - 120));
}

uint64_t sub_1000DC764()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  sub_1000DB418(v1, v2);
  return dispatch thunk of SavedLocationsManagerType.savedLocations.getter(v2, v3);
}

void sub_1000DC798(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100078058(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000DC7B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000DC7C4(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 184), 1, 1, a1);
}

uint64_t sub_1000DC7F0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 904));
}

uint64_t sub_1000DC7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_1000DC808(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100084050(a1, a2, v2);
}

uint64_t sub_1000DC810()
{
  return CloudCoverByAltitude.init(low:medium:high:)(0.0, 0.0, 0.0);
}

void sub_1000DC828(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  sub_1008EC420(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000DC830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v2, v1);
}

double sub_1000DC83C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1001639C8(*(_QWORD *)(v1 - 224), v0, *(_DWORD *)(v1 - 204));
}

void sub_1000DC864()
{
  uint64_t v0;
  uint64_t *v1;

  sub_100021A14(v0, v1);
}

uint64_t sub_1000DC870@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13[2] = a9;
  v13[3] = result;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a5;
  v13[8] = a6;
  v13[9] = a7;
  v13[10] = a8;
  v13[11] = v9;
  v13[12] = v10;
  v13[13] = v11;
  v13[14] = v12;
  return result;
}

double sub_1000DC890@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = swift_retain(*(_QWORD *)(a1 + 144)).n128_u64[0];
  return result;
}

uint64_t sub_1000DC89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 83) = 2;
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 83, v1, v0);
}

uint64_t sub_1000DC8D8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, a1);
}

uint64_t sub_1000DC8EC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = a1;
  return KeyedDecodingContainer.codingPath.getter(*(_QWORD *)(v2 - 88));
}

uint64_t sub_1000DC900(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000DC908()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_1000DC924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000DC92C()
{
  return static DispatchTime.now()();
}

uint64_t sub_1000DC93C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v2, v1);
}

unint64_t sub_1000DC960()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 12;
  return sub_1004FBA74();
}

uint64_t sub_1000DC96C()
{
  uint64_t v0;

  type metadata accessor for MeasuredLocationViewerView(0);
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000DC9A0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_1000DC9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_10007C77C(v0, v1, v2);
}

uint64_t sub_1000DC9B8()
{
  return LocationOfInterest.location.getter();
}

uint64_t sub_1000DC9C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v1, *(_QWORD *)(v2 - 136));
}

uint64_t sub_1000DC9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  *v9 = 0x8000000000000000;
  return a9;
}

uint64_t sub_1000DCA14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return String.write(to:)(v1, *(_QWORD *)(v2 + a1), *(_QWORD *)(v2 + a1 + 8));
}

uint64_t sub_1000DCA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v0);
}

uint64_t sub_1000DCA44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DCA70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 384) + 104))(*(_QWORD *)(v2 - 376), a2, *(_QWORD *)(v2 - 368));
}

uint64_t sub_1000DCA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(a1, 0, 0, v7, v6, a6, 48, 2);
}

uint64_t sub_1000DCAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

double sub_1000DCAC4(_QWORD *a1)
{
  uint64_t v1;
  double result;

  sub_1000DB418(a1, v1);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_1000DCAE0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_1000DCAEC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v0, *(_QWORD *)(v1 - 232));
}

uint64_t sub_1000DCB00(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000DCB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v5 - 152), 1, 1, *(_QWORD *)(v5 - 160));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000DCB44()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 1752392040;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 - 120, v0 - 112);
}

uint64_t sub_1000DCB60()
{
  uint64_t v0;

  return v0 - 120;
}

uint64_t sub_1000DCB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for ViewState(0);
}

uint64_t sub_1000DCB90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 - 176) + 96);
  sub_1000DB418(*(_QWORD **)(v0 - 328), v1);
  return v1;
}

uint64_t sub_1000DCBBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 336);
}

uint64_t sub_1000DCBDC()
{
  return DebugBundle.name.getter();
}

uint64_t sub_1000DCBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for WeatherAsyncImage.LoadingState(255, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return type metadata accessor for State(0, v5);
}

uint64_t sub_1000DCC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return sub_100238858(a1, a2, a3, a4, a5, a21);
}

uint64_t sub_1000DCC10()
{
  return type metadata accessor for SearchResultRowView(0);
}

uint64_t sub_1000DCC18(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 5);
}

void *sub_1000DCC24(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t sub_1000DCC2C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.startIndex.getter(v1, v0);
}

uint64_t sub_1000DCC3C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

double sub_1000DCC48()
{
  int *v0;
  uint64_t v1;
  double result;

  sub_1000BF398(*(_QWORD *)(v1 + v0[11]), *(_QWORD *)(v1 + v0[11] + 8));
  sub_1000BF398(*(_QWORD *)(v1 + v0[12]), *(_QWORD *)(v1 + v0[12] + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v1 + v0[13] + 8)).n128_u64[0];
  return result;
}

void sub_1000DCC88(uint64_t a1)
{
  uint64_t *v1;

  sub_1000FF448(a1, v1);
}

uint64_t sub_1000DCC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  return sub_1000DEBAC(0, 3, v23, v24, v25, v20, v21, v22, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

__n128 sub_1000DCCD4(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v1 + 32);
  return result;
}

uint64_t sub_1000DCCE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return Text.init<A>(_:)(v2 - 112, v1, v0);
}

uint64_t sub_1000DCCF8(uint64_t a1)
{
  return swift_getKeyPath(a1);
}

uint64_t sub_1000DCD00()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void sub_1000DCD10(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xEF3D6C65646F6D20;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000DCD24(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 0, 1, a1);
}

uint64_t sub_1000DCD38(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 328), 1, 1, a1);
  return type metadata accessor for DisplayMetrics(0);
}

void sub_1000DCD64()
{
  WeatherConditionPlaybackCoordinatorType.pause(_:)(0);
}

uint64_t sub_1000DCD7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1000DCD8C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10012D0C4(v1, v0, 0);
}

void sub_1000DCDB4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100084050(a1, *(_QWORD *)(v2 - 184), v1);
}

uint64_t sub_1000DCDC4()
{
  return TipGroup.currentTip.getter();
}

__n128 sub_1000DCDCC@<Q0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v9;
  char v10;
  uint64_t v11;

  v3 = a1[1];
  v4 = (*a1)[1];
  v5 = *((_BYTE *)*a1 + 16);
  v6 = (*a1)[3];
  v7 = *((_BYTE *)*a1 + 32);
  result = *(__n128 *)(*a1 + 5);
  v9 = *(_OWORD *)(*a1 + 7);
  v10 = *((_BYTE *)*a1 + 72);
  *(_QWORD *)a2 = **a1;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  *(__n128 *)(a2 + 40) = result;
  *(_OWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 72) = v10;
  v11 = *v3;
  LOBYTE(v3) = *((_BYTE *)v3 + 8);
  *(_QWORD *)(a2 + 80) = v11;
  *(_BYTE *)(a2 + 88) = (_BYTE)v3;
  return result;
}

id sub_1000DCE24(uint64_t a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v5;

  return sub_100379A4C(a2, a3, a4, a4, a1, v5, v4);
}

uint64_t sub_1000DCE34()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000DCE44(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000DCE4C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 504);
}

uint64_t sub_1000DCE64()
{
  return type metadata accessor for Tips.Rule(0);
}

uint64_t sub_1000DCE80()
{
  return type metadata accessor for SearchView(0);
}

uint64_t sub_1000DCE88()
{
  return type metadata accessor for ConditionDetailMapViewModel(0);
}

uint64_t sub_1000DCE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  _s7Weather24LocationCompositionStateOwst_0(a1, a2, 1, *(_QWORD *)(v2 - 96));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000DCEB4()
{
  return type metadata accessor for SuggestedSearchResultRowView(0);
}

uint64_t sub_1000DCEBC()
{
  return type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
}

uint64_t sub_1000DCED8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 312) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_1000DCEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

double sub_1000DCF0C()
{
  return 0.0;
}

uint64_t sub_1000DCF44()
{
  NSBundle v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v6;

  v3._countAndFlagsBits = 0xD00000000000001CLL;
  v3._object = v2;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = v1;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, v0, v4, v6)._countAndFlagsBits;
}

unint64_t sub_1000DCF6C(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return sub_1001C6D68();
}

uint64_t sub_1000DCF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ShortDescription.init(name:_:)(a1, a2, a3, v3);
}

uint64_t sub_1000DCF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000DCFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000DCFB4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_1000DCFF0()
{
  return == infix(_:_:)(0x7069726373627573, 0xEC0000006E6F6974);
}

uint64_t sub_1000DD010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000DD028@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000DD034()
{
  uint64_t v0;

  return sub_1000CE110((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 144), v0 - 112, v0 - 120, v0 - 128);
}

uint64_t sub_1000DD04C()
{
  return type metadata accessor for UVIndexComponentViewModel(0);
}

uint64_t sub_1000DD05C()
{
  return type metadata accessor for LocationPreviewModalViewModel(0);
}

uint64_t sub_1000DD078()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 424, v1);
}

uint64_t sub_1000DD08C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 8))(v0, *(_QWORD *)(v1 - 128));
}

void sub_1000DD09C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10000AB54(a1, a2, v2);
}

double sub_1000DD0A4()
{
  double v0;

  return v0;
}

uint64_t sub_1000DD0D0()
{
  uint64_t v0;

  return v0;
}

void sub_1000DD104()
{
  void *v0;

}

uint64_t sub_1000DD10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000DD114()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000DD130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000DD13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return FloatingPointFormatStyle.init(locale:)(v3, a2, v2);
}

uint64_t sub_1000DD148()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 216) + 8))(*(_QWORD *)(v1 - 128), v0);
}

uint64_t sub_1000DD16C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000DD178()
{
  return type metadata accessor for DetailComponentContainerView(0);
}

uint64_t sub_1000DD180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v1, v3, v2, a1);
}

void sub_1000DD194(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  sub_10007802C(v3, a1 + v2, v1);
}

uint64_t sub_1000DD1A8()
{
  return type metadata accessor for DetailViewVisibilityTrackerModel(0);
}

uint64_t sub_1000DD1B0()
{
  return CurrentWeather.visibility.getter();
}

__n128 sub_1000DD1BC()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __n128 result;

  v1 = *(_OWORD *)(v0 + 976);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 992);
  *(_OWORD *)(v0 + 528) = v1;
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 1008);
  v2 = *(_OWORD *)(v0 + 1024);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 1040);
  *(_OWORD *)(v0 + 448) = v2;
  result = *(__n128 *)(v0 + 1056);
  *(__n128 *)(v0 + 416) = result;
  return result;
}

uint64_t sub_1000DD1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 432) = v4;
  _s7Weather24LocationCompositionStateOwst_0(v4, 1, 1, a4);
  return type metadata accessor for EnvironmentState(0);
}

uint64_t sub_1000DD230()
{
  return type metadata accessor for LocationViewAction(0);
}

unint64_t sub_1000DD238()
{
  uint64_t v0;

  sub_1000DB418((_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
  return sub_100135E1C();
}

void sub_1000DD258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = a1;
  *(_QWORD *)(v1 + 40) = v2;
  type metadata accessor for AttributeName(0);
}

uint64_t sub_1000DD268()
{
  uint64_t v0;

  return Measurement.value.getter(v0);
}

uint64_t sub_1000DD274(float a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;

  *v3 = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_errorRetain(v1);
}

uint64_t sub_1000DD294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 136) = v0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

void sub_1000DD2A8()
{
  uint64_t *v0;
  uint64_t v1;

  sub_100021A14(v1, v0);
}

uint64_t sub_1000DD2B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100040308(a1, a2, a3, 0xE800000000000000);
}

uint64_t sub_1000DD2BC()
{
  return CurrentWeather.uvIndex.getter();
}

uint64_t sub_1000DD2C8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000DD2D4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_once(v1, v0);
}

uint64_t sub_1000DD2E0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000DD304@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_1000DD324@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[7] = a2;
  a1[8] = v2;
  a1[4] = v6;
  return static String.localizedStringWithFormat(_:_:)(v4, v5, v3);
}

uint64_t sub_1000DD33C()
{
  return type metadata accessor for MainAction(0);
}

uint64_t sub_1000DD348()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000DD360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000DD370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t sub_1000DD388()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 152))();
}

uint64_t sub_1000DD390()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000DD3B8(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for ModifiedContent(255, v1, a1);
}

uint64_t sub_1000DD3C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 184) + 8))(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 168));
}

uint64_t sub_1000DD3D8()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000DD3E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return sub_1007BD5D0(a2 + v2 * a1, v3);
}

uint64_t sub_1000DD3F0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t sub_1000DD3FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return AttributedString.subscript.setter(v2 - 120, v1, a1);
}

uint64_t sub_1000DD410()
{
  return type metadata accessor for Location(0);
}

uint64_t sub_1000DD42C()
{
  return type metadata accessor for MainViewModel.ModalModule(0);
}

unint64_t sub_1000DD448()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_1007E7E6C();
}

void sub_1000DD454()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_100078058(v1, *(_QWORD *)(v2 - 112), v0);
}

uint64_t sub_1000DD474()
{
  return type metadata accessor for Calendar(0);
}

id sub_1000DD484(float a1)
{
  float *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *v1 = a1;
  *(_QWORD *)(v4 - 160) = v1 + 1;
  return objc_msgSend(v2, *(SEL *)(v3 + 1072));
}

uint64_t sub_1000DD4A0()
{
  return Location.name.getter();
}

uint64_t sub_1000DD4AC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return swift_endAccess(va);
}

uint64_t sub_1000DD4B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of ResolverType.resolve<A>(_:)(a1, a1, v1, v2);
}

uint64_t sub_1000DD4C8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v1 - 136), 1);
}

uint64_t sub_1000DD4D8(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000DD4E8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[1] + 8))(v0[15], v0[13]);
}

uint64_t sub_1000DD508()
{
  return type metadata accessor for ConditionDetailChartHeaderViewModel(0);
}

void sub_1000DD518(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100080C0C(a1, v2, v1);
}

void sub_1000DD524(uint64_t a1@<X8>)
{

}

uint64_t sub_1000DD52C()
{
  return type metadata accessor for MoonRiseSet(0);
}

uint64_t sub_1000DD548()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_100605B40(0, v0, v1);
}

uint64_t sub_1000DD558()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000DD574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 136) = v1;
  *(_QWORD *)(v3 - 128) = a1;
  v4 = *(_QWORD *)(v3 - 320);
  *(_QWORD *)(v3 - 120) = v2;
  *(_QWORD *)(v3 - 112) = v4;
  return v3 - 136;
}

uint64_t sub_1000DD58C()
{
  return type metadata accessor for LocalizedStringResource(0);
}

uint64_t sub_1000DD5A8()
{
  return type metadata accessor for WindComponentViewModel(0);
}

uint64_t sub_1000DD5B0()
{
  uint64_t v0;

  return Font.weight(_:)(v0);
}

unint64_t sub_1000DD5B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_100929D20();
}

void sub_1000DD5C4()
{
  sub_10009AAB0();
}

uint64_t sub_1000DD5CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  return sub_1000A6594(v3, v4, a3);
}

void sub_1000DD5D8()
{
  sub_100605C2C();
}

uint64_t sub_1000DD5F0(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 7);
}

uint64_t sub_1000DD5FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000DD610()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v1);
}

NSString sub_1000DD624()
{
  return String._bridgeToObjectiveC()();
}

NSString sub_1000DD638()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000DD644()
{
  return type metadata accessor for LocalizedStringResource.BundleDescription(0);
}

uint64_t sub_1000DD660()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v0, v3);
}

uint64_t sub_1000DD680()
{
  _QWORD *v0;
  uint64_t *v1;

  *v0 = 0x8000000000000000;
  return sub_1000BA294(v1);
}

uint64_t sub_1000DD6A0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;

  v3 = v2[7];
  *(_BYTE *)(v0 + v2[6]) = *(_BYTE *)(v1 + v2[6]);
  *(_QWORD *)(v0 + v3) = *(_QWORD *)(v1 + v3);
  v4 = v2[9];
  *(_QWORD *)(v0 + v2[8]) = *(_QWORD *)(v1 + v2[8]);
  *(_QWORD *)(v0 + v4) = *(_QWORD *)(v1 + v4);
  v5 = v2[10];
  v6 = (_QWORD *)(v0 + v5);
  v7 = (_QWORD *)(v1 + v5);
  result = v7[1];
  *v6 = *v7;
  v6[1] = result;
  return result;
}

uint64_t sub_1000DD6E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

void sub_1000DD6F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10007EBC8(a1, a2, v2);
}

uint64_t sub_1000DD700()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(v2 - 184), v0);
}

uint64_t sub_1000DD70C(uint64_t a1)
{
  uint64_t v1;

  return EnvironmentValues.subscript.setter(a1, v1, v1);
}

uint64_t sub_1000DD718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _ConditionalContent<>.init(storage:)(v4 - 121, a2, a2, a4, a4);
}

uint64_t sub_1000DD72C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_1000DD738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  return sub_1000DEBAC(0, 3, v25, v24, v26, 0, 0, 0, v23, v22, v21, v20, 0, 0, 0, 0, 0, 0, a19, a20);
}

uint64_t sub_1000DD770(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
}

uint64_t sub_1000DD788()
{
  return type metadata accessor for CalendarViewModel(0);
}

uint64_t sub_1000DD790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  return sub_1000DEBAC(0, 3, v21, v20, v22, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1000DD7B4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

_QWORD *sub_1000DD7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return EntityProperty.wrappedValue.getter(&a9);
}

uint64_t sub_1000DD7C4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v1, v0 + 1720, 1, 0);
}

uint64_t sub_1000DD7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

_QWORD *sub_1000DD7E8()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1000DB418(v1, v0);
}

uint64_t sub_1000DD7F4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_1000DD800()
{
  return Calendar.timeZone.getter();
}

uint64_t sub_1000DD80C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 44) + 8));
}

void sub_1000DD81C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_1000DD828()
{
  sub_10011ECD4();
}

uint64_t sub_1000DD83C(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000DD84C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Collection.endIndex.getter(v1, v0);
}

uint64_t sub_1000DD85C(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 104), 1, 1, a1);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 120), 1, 1, *(_QWORD *)(v1 - 144));
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 128), 1, 1, *(_QWORD *)(v1 - 136));
}

void sub_1000DD8A8()
{
  sub_1005DD6E4();
}

uint64_t sub_1000DD8B0(uint64_t a1)
{
  return swift_allocObject(a1, 49, 7);
}

uint64_t sub_1000DD8BC(uint64_t a1)
{
  return swift_getKeyPath(a1);
}

uint64_t sub_1000DD8E0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 320), 1, 1, a1);
  return type metadata accessor for WeatherMapPresentationState(0);
}

uint64_t sub_1000DD90C()
{
  return GeometryProxy.frame(in:)();
}

void sub_1000DD914(uint64_t a1@<X8>)
{
  char v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = v3 + a1;
  *(_BYTE *)v9 = v1;
  *(_QWORD *)(v9 + 8) = v5;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 40) = 0;
  sub_100021A14(v4, v2);
}

uint64_t sub_1000DD934(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  return sub_100080BA8(a1, a2, v2);
}

uint64_t sub_1000DD93C()
{
  return type metadata accessor for WeatherNetworkActivity(0);
}

uint64_t sub_1000DD948(uint64_t a1)
{
  return Measurement.value.getter(a1);
}

uint64_t sub_1000DD950(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 144), 1, 1, a1);
  return type metadata accessor for ViewState(0);
}

uint64_t sub_1000DD978(uint64_t a1)
{
  type metadata accessor for MoonComponentView(0);
  return a1;
}

double sub_1000DD9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v2 - 256));
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

unint64_t sub_1000DD9D4()
{
  return 0xD00000000000001ELL;
}

void sub_1000DD9F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021AA4(v2 - 128, a2);
}

uint64_t sub_1000DD9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

unint64_t sub_1000DDA08()
{
  char v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = v0;
  *(_BYTE *)(v1 - 66) = 0;
  return sub_100382FB0();
}

uint64_t sub_1000DDA14()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_1000CE1C8(v0, v1, (uint64_t *)(v2 - 104));
}

double sub_1000DDA24()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DDA30()
{
  return URLHandlerMatch.values.getter();
}

uint64_t sub_1000DDA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v6, 0, 0, v8, v7, a6, 48, 2);
}

uint64_t sub_1000DDA68()
{
  uint64_t v0;

  return sub_100147AE4(v0);
}

uint64_t sub_1000DDA70()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v1, v2);
}

uint64_t sub_1000DDA80()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, v0);
}

void sub_1000DDA94(int a1@<W8>, int a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_100520DF8(2u, 0, 0, 2, 2, 2, v3, 2, v4, a1, SBYTE1(a1), SBYTE2(a1), SHIBYTE(a1), a3);
}

uint64_t sub_1000DDAC0()
{
  return type metadata accessor for MoonDetailSelectedDate(0);
}

uint64_t sub_1000DDAD0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 336) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for DispatchTime(0);
}

uint64_t sub_1000DDAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000DDB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 288))(v0, v1);
}

uint64_t sub_1000DDB48(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000DDB54()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10021D04C(v1, v0);
}

void sub_1000DDB7C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 64) = 0;
  *(_QWORD *)(v0 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
}

_QWORD *sub_1000DDB90()
{
  _QWORD *v0;

  return sub_1000DB418(v0, v0[3]);
}

unint64_t sub_1000DDBAC()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000DDBC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000DDBD4()
{
  uint64_t v0;

  return v0;
}

void sub_1000DDBEC()
{
  sub_100946D9C();
}

uint64_t sub_1000DDBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000DDC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1, v0);
}

uint64_t sub_1000DDC18()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DDC24()
{
  uint64_t v0;

  return sub_1000CE9E8(v0);
}

uint64_t sub_1000DDC2C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 576);
}

uint64_t sub_1000DDC40()
{
  return type metadata accessor for LocationPreviewViewModel(0);
}

uint64_t sub_1000DDC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 65, v6 - 66, v4, a4, v5);
}

uint64_t sub_1000DDC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, a2, v3, v2);
}

uint64_t sub_1000DDC90(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  return sub_1000B56C0(a1, v1);
}

uint64_t sub_1000DDC98(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 168), 1, 1, a1);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 176), 1, 1, *(_QWORD *)(v1 - 192));
  return type metadata accessor for TimeState(0);
}

uint64_t sub_1000DDCD0(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000DDCDC()
{
  return type metadata accessor for AveragesDetailViewAction(0);
}

void sub_1000DDCE4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C75C(a1, v2, v1);
}

void sub_1000DDCF0()
{
  sub_1001226F8();
}

uint64_t sub_1000DDCF8(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  return sub_1000FC98C(a1, v1);
}

uint64_t sub_1000DDD00()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 360);
}

double sub_1000DDD24()
{
  uint64_t v0;
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(v0 - 120);
  result = 0.0;
  *v1 = 0u;
  v1[1] = 0u;
  return result;
}

uint64_t sub_1000DDD44()
{
  return static Locale.autoupdatingCurrent.getter();
}

uint64_t sub_1000DDD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_1000DDD64()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1000DDD78()
{
  return type metadata accessor for DetailComponentContainerViewModel(0);
}

uint64_t sub_1000DDD80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, a2, v3, v2);
}

uint64_t sub_1000DDD94()
{
  return Location.timeZone.getter();
}

uint64_t sub_1000DDDA0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_1000DDDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000DDDD4(uint64_t a1, __n128 a2, __n128 a3)
{
  double v3;

  return static UIFont.scaledSystemFont(ofSize:style:maxSize:weight:traits:)(a1, 0, a2, a3, v3);
}

id sub_1000DDDE0()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2736));
}

uint64_t sub_1000DDE00(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(va, v2, a1);
}

uint64_t sub_1000DDE10(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 272), 1, 1, a1);
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000DDE3C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000DDE44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DDE5C()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

uint64_t sub_1000DDE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000DDE7C(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(*(_QWORD *)(v1 - 160), a1, 19);
}

uint64_t sub_1000DDE90(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100040308(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000);
}

uint64_t sub_1000DDE98()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_1000DDEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000DDEAC(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return type metadata accessor for NotificationsOptInState(0);
}

uint64_t sub_1000DDED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 112), a1);
}

uint64_t sub_1000DDEE4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1000DDF00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return swift_beginAccess(v1 + a1, v2 - 112, 0, 0);
}

uint64_t sub_1000DDF18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return swift_beginAccess(v1 + a1, v2 - 152, 0, 0);
}

uint64_t sub_1000DDF30()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000DDF38(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for ModifiedContent(255, v1, a1);
}

void sub_1000DDF48(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

double sub_1000DDF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double result;

  v13 = (_QWORD *)(v12 + *(int *)(v10 + 32));
  *v13 = a10;
  v13[1] = v11;
  *(_QWORD *)&result = swift_retain(v11).n128_u64[0];
  return result;
}

uint64_t sub_1000DDF74()
{
  uint64_t v0;

  return Definition.inScope(_:)(v0);
}

uint64_t sub_1000DDF80()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1007C3590(v0, v1);
}

unint64_t sub_1000DDF8C(uint64_t a1)
{
  return sub_1000991C8(a1);
}

uint64_t sub_1000DDF94()
{
  return sub_1000769AC();
}

unint64_t sub_1000DDFAC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1007FD1C8();
}

uint64_t sub_1000DDFB8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_1000CE1C8(v0, v1, (uint64_t *)(v2 - 120));
}

uint64_t sub_1000DDFC8()
{
  uint64_t v0;

  return Date.formattedShortMonthAndDay(timeZone:)(*(_QWORD *)(v0 - 152));
}

uint64_t sub_1000DDFD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v1, v0);
}

uint64_t sub_1000DDFE8()
{
  uint64_t v0;

  return Measurement.value.getter(v0);
}

uint64_t sub_1000DDFF4()
{
  return type metadata accessor for TemperatureScaleConfiguration(0);
}

uint64_t sub_1000DDFFC()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v2, v3, v1);
}

void sub_1000DE00C()
{
  sub_1000ED624();
}

uint64_t sub_1000DE018()
{
  return type metadata accessor for ModalPresentationViewModifier(0);
}

uint64_t sub_1000DE034(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_1000DE040()
{
  return type metadata accessor for ConditionDetailViewModel.Model(0);
}

double sub_1000DE048()
{
  return 0.0;
}

uint64_t sub_1000DE0E8()
{
  return type metadata accessor for WeatherAlert(0);
}

uint64_t sub_1000DE0F4()
{
  return type metadata accessor for LocationComponentViewModel(0);
}

uint64_t sub_1000DE0FC(uint64_t a1)
{
  type metadata accessor for ListView.ListContentView(0);
  return a1;
}

uint64_t sub_1000DE134()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 208));
}

uint64_t sub_1000DE144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v3 - 136), v0, v2);
}

uint64_t sub_1000DE15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for WeatherComponentButton(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void sub_1000DE190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000DE198(uint64_t a1)
{
  return static Font.Weight.medium.getter(a1);
}

uint64_t sub_1000DE1B0()
{
  uint64_t v0;
  uint64_t v1;

  return static WeatherFormatStyle<>.weather(_:locale:)(v0, v1);
}

uint64_t sub_1000DE1C0(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, a1, 4);
}

uint64_t sub_1000DE1D0()
{
  return type metadata accessor for HomeAndWorkRefinementContentViewModel(0);
}

uint64_t sub_1000DE1D8()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  return sub_10006BD20(v1, v0);
}

void sub_1000DE1E4()
{
  sub_100605C2C();
}

uint64_t sub_1000DE218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ScaledMetric.init(wrappedValue:relativeTo:)(a1, v1, v3, v2);
}

unint64_t sub_1000DE23C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_10095ED50();
}

void sub_1000DE248(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000979AC(v2, a2);
}

uint64_t sub_1000DE25C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 1384));
}

void sub_1000DE264(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_1000787D4(a1, v2, v1);
}

uint64_t sub_1000DE288()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DE298()
{
  char v0;

  return v0 & 1;
}

uint64_t type metadata accessor for TimeState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C03B48;
  if (!qword_100C03B48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeState);
  return result;
}

uint64_t sub_1000DE2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E8DD8);
}

uint64_t sub_1000DE2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10076FBA4);
}

uint64_t sub_1000DE2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100520D28);
}

uint64_t sub_1000DE300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10077E7DC);
}

uint64_t sub_1000DE30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007685DC);
}

double sub_1000DE318(char *a1, uint64_t a2)
{
  char *v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  __n128 v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, __n128);

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v4 = type metadata accessor for PreviewLocation(0);
      switch(swift_getEnumCaseMultiPayload(v2, v4))
      {
        case 0u:
          v5 = type metadata accessor for Location(0);
          goto LABEL_11;
        case 1u:
          v5 = type metadata accessor for LocationOfInterest(0);
LABEL_11:
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
          break;
        case 2u:

          swift_bridgeObjectRelease(*((_QWORD *)v2 + 2));
          swift_bridgeObjectRelease(*((_QWORD *)v2 + 4));
          swift_bridgeObjectRelease(*((_QWORD *)v2 + 6));
          v10 = (uint64_t)&v2[*(int *)(type metadata accessor for SearchLocation(0) + 32)];
          v11 = type metadata accessor for Location(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
          break;
        case 3u:
          swift_bridgeObjectRelease(*((_QWORD *)v2 + 3));
          break;
        default:
          break;
      }
      v2 += *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
      v12 = type metadata accessor for LocationPreviewModalViewState(0);
      switch(swift_getEnumCaseMultiPayload(v2, v12))
      {
        case 0u:
          goto LABEL_23;
        case 1u:
          goto LABEL_24;
        case 2u:
        case 3u:
        case 4u:
          goto LABEL_22;
        case 5u:
          goto LABEL_28;
        case 6u:
          goto LABEL_38;
        case 7u:
          goto LABEL_33;
        case 8u:
          goto LABEL_35;
        default:
          return result;
      }
    case 2u:
    case 3u:
      swift_release(*(_QWORD *)v2);
      break;
    case 4u:
      v6 = type metadata accessor for ModalViewState.MapViewModal(0);
      if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v2, 1, v6))
      {
        v8 = type metadata accessor for PreviewLocation(0);
        switch(swift_getEnumCaseMultiPayload(v2, v8))
        {
          case 0u:
            v9 = type metadata accessor for Location(0);
            goto LABEL_17;
          case 1u:
            v9 = type metadata accessor for LocationOfInterest(0);
LABEL_17:
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v2, v9);
            break;
          case 2u:

            swift_bridgeObjectRelease(*((_QWORD *)v2 + 2));
            swift_bridgeObjectRelease(*((_QWORD *)v2 + 4));
            swift_bridgeObjectRelease(*((_QWORD *)v2 + 6));
            v13 = (uint64_t)&v2[*(int *)(type metadata accessor for SearchLocation(0) + 32)];
            v14 = type metadata accessor for Location(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
            break;
          case 3u:
            swift_bridgeObjectRelease(*((_QWORD *)v2 + 3));
            break;
          default:
            break;
        }
        v2 += *(int *)(type metadata accessor for LocationPreviewViewState(0) + 20);
        v15 = type metadata accessor for LocationPreviewModalViewState(0);
        switch(swift_getEnumCaseMultiPayload(v2, v15))
        {
          case 0u:
            goto LABEL_23;
          case 1u:
            goto LABEL_24;
          case 2u:
          case 3u:
          case 4u:
            goto LABEL_22;
          case 5u:
            goto LABEL_28;
          case 6u:
LABEL_38:
            swift_bridgeObjectRelease(*((_QWORD *)v2 + 1));
            swift_bridgeObjectRelease(*((_QWORD *)v2 + 3));
            v40 = (int *)type metadata accessor for NewsArticle(0);
            v41 = (uint64_t)&v2[v40[6]];
            v42 = type metadata accessor for URL(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v41, 1, v42))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
            v43 = &v2[v40[7]];
            v44 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
            v45 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8);
            v45(&v2[v40[8]], v42);
            v46 = &v2[v40[9]];
            swift_bridgeObjectRelease(*((_QWORD *)v46 + 1));
            swift_bridgeObjectRelease(*((_QWORD *)v46 + 3));
            v47 = (uint64_t)&v46[*(int *)(type metadata accessor for NewsChannel(0) + 24)];
            if (!_s7Weather24LocationCompositionStateOwet_0(v47, 1, v42))
              v45((char *)v47, v42);
            swift_bridgeObjectRelease(*(_QWORD *)&v2[v40[10]]);
            swift_bridgeObjectRelease(*(_QWORD *)&v2[v40[11]]);
            *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v2[v40[12]]).n128_u64[0];
            break;
          case 7u:
            goto LABEL_33;
          case 8u:
            goto LABEL_35;
          default:
            return result;
        }
      }
      break;
    case 5u:
      v7 = type metadata accessor for ModalViewState.LocationDetailModal(0);
      switch(swift_getEnumCaseMultiPayload(v2, v7))
      {
        case 0u:
LABEL_24:
          v17 = type metadata accessor for DetailCondition(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v2, v17);
          v18 = (int *)type metadata accessor for ConditionDetailViewState(0);
          v19 = &v2[v18[5]];
          v20 = type metadata accessor for Location(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
          v21 = (uint64_t)&v2[v18[6]];
          v22 = type metadata accessor for Date(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v22))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
          v23 = (uint64_t)&v2[v18[8]];
          v24 = (int *)type metadata accessor for DetailChartSelection(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, (uint64_t)v24))
          {
            v25 = swift_bridgeObjectRelease(*(_QWORD *)(v23 + 8));
            v48 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 8);
            v48(v23 + v24[5], v22, v25);
            ((void (*)(uint64_t, uint64_t))v48)(v23 + v24[6], v22);
            v26 = (_QWORD *)(v23 + v24[7]);
            v27 = v22;
            v28 = v48;
            break;
          }
          return result;
        case 1u:
        case 2u:
        case 3u:
LABEL_22:
          v16 = type metadata accessor for Location(0);
          goto LABEL_36;
        case 4u:
LABEL_28:
          v29 = type metadata accessor for Location(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v2, v29);
          v30 = type metadata accessor for MoonDetailViewState(0);
          v31 = (uint64_t)&v2[*(int *)(v30 + 20)];
          v32 = type metadata accessor for MoonDetailSelectedDate(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v31, 1, v32)
            && swift_getEnumCaseMultiPayload(v31, v32) <= 2)
          {
            v33 = type metadata accessor for Date(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v31, v33);
          }
          v34 = (uint64_t)&v2[*(int *)(v30 + 24)];
          v35 = type metadata accessor for Date(0);
          if (_s7Weather24LocationCompositionStateOwet_0(v34, 1, v35))
            return result;
          v28 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v35 - 8) + 8);
          v26 = (_QWORD *)v34;
          v27 = v35;
          break;
        case 5u:
LABEL_33:
          v36 = type metadata accessor for Location(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v2, v36);
          v37 = (uint64_t)&v2[*(int *)(type metadata accessor for AveragesDetailViewState(0) + 24)];
          v38 = type metadata accessor for DetailHeroChartLollipopPosition(0);
          if (_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
            return result;
          v2 = (char *)(v37 + *(int *)(v38 + 20));
          v16 = type metadata accessor for Date(0);
LABEL_36:
          v27 = v16;
          v28 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 8);
          v26 = v2;
          break;
        case 6u:
LABEL_23:
          v16 = type metadata accessor for URL(0);
          goto LABEL_36;
        case 7u:
LABEL_35:
          v39 = type metadata accessor for Location(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v2, v39);
          v2 += *(int *)(type metadata accessor for HomeAndWorkRefinementViewState(0) + 20);
          v16 = type metadata accessor for LocationOfInterest(0);
          goto LABEL_36;
        default:
          return result;
      }
      ((void (*)(_QWORD *, uint64_t))v28)(v26, v27);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000DE9B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;

  v4 = a1 + a2[7];
  v5 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v6 = (id *)(a1 + a2[16]);

}

double sub_1000DEA48(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = type metadata accessor for CurrentLocation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4)
    && swift_getEnumCaseMultiPayload(a1, v4) <= 2)
  {
    v5 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  sub_1001639C8(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8), *(_BYTE *)(a1 + a2[12] + 16));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13])).n128_u64[0];
  return result;
}

uint64_t sub_1000DEB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1000DEB78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000DEBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(_QWORD);
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  sub_1000986AC();
  v129 = v22;
  v130 = v23;
  v112 = v24;
  v113 = v25;
  v110 = v26;
  v107 = v27;
  v106 = v28;
  v116 = v29;
  v127 = v30;
  v105 = v31;
  v118 = a12;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100088FDC();
  v115 = v33;
  v114 = sub_1000D0EE8();
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v124 = v35;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  sub_100088FDC();
  v111 = v37;
  v38 = sub_10009876C();
  v109 = type metadata accessor for TimeState(v38);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_100098678(v40, v104);
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_100088FDC();
  v108 = v42;
  v43 = sub_10009876C();
  v117 = type metadata accessor for NotificationsOptInState(v43);
  sub_1000B42B0();
  __chkstk_darwin(v44);
  sub_100088FDC();
  v122 = v45;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v46);
  sub_100098728();
  v49 = v48 - v47;
  v104 = type metadata accessor for LocationsState(0);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100088FDC();
  v121 = v51;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  sub_100099234();
  v53 = type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_100088FDC();
  v120 = v55;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v56);
  v57 = sub_1000C19E4();
  v58 = type metadata accessor for AppConfigurationState(v57);
  sub_1000B42B0();
  __chkstk_darwin(v59);
  v119 = (uint64_t)&v104 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v61);
  sub_100098728();
  v64 = v63 - v62;
  v65 = sub_1000BD65C();
  sub_1000B42B0();
  __chkstk_darwin(v66);
  sub_1000986FC();
  v126 = v67;
  sub_10009D2A4();
  v69 = __chkstk_darwin(v68);
  v71 = (char *)&v104 - v70;
  __chkstk_darwin(v69);
  v125 = (uint64_t)&v104 - v72;
  sub_10009D8F8(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, v73, v74);
  sub_10003773C(v118, v64, &qword_100BC5F60);
  sub_100088FC8(v64, 1, v65);
  if (v75)
  {
    sub_100021A14(v64, &qword_100BC5F60);
  }
  else
  {
    sub_1000215BC((uint64_t)v71, type metadata accessor for ModalViewState);
    sub_10007C77C(v64, (uint64_t)v71, type metadata accessor for ModalViewState);
  }
  v76 = v114;
  v77 = v112;
  v78 = v105;
  sub_10007C77C((uint64_t)v71, v125, type metadata accessor for ModalViewState);
  if (v78)
  {
    v79 = v78;
  }
  else
  {
    v79 = *(_QWORD *)(a20 + 16);
    swift_bridgeObjectRetain(v79);
  }
  if (v127 == 3)
    v127 = *(unsigned __int8 *)(a20 + 24);
  sub_10003773C(v116, v20, &qword_100BC5FB0);
  sub_100088FC8(v20, 1, v58);
  if (v75)
  {
    sub_100095B78(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_appConfiguration, v119, type metadata accessor for AppConfigurationState);
    sub_100099360();
    sub_100021A14(v20, &qword_100BC5FB0);
  }
  else
  {
    sub_10007C77C(v20, v119, type metadata accessor for AppConfigurationState);
    sub_100099360();
  }
  v80 = v104;
  sub_10003773C(v106, v21, &qword_100BC5FA8);
  sub_100088FC8(v21, 1, v53);
  v118 = v79;
  if (v75)
  {
    v81 = a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    sub_1000992EC(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, (uint64_t)&v128);
    sub_100095B78(v81, v120, type metadata accessor for EnvironmentState);
    sub_100021A14(v21, &qword_100BC5FA8);
  }
  else
  {
    sub_10007C77C(v21, v120, type metadata accessor for EnvironmentState);
  }
  v82 = v115;
  v83 = v110;
  v84 = v108;
  sub_10003773C(v107, v49, &qword_100BC5FA0);
  sub_100088FC8(v49, 1, v80);
  if (v75)
  {
    sub_100095B78(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v121, type metadata accessor for LocationsState);
    sub_100021A14(v49, &qword_100BC5FA0);
  }
  else
  {
    sub_10007C77C(v49, v121, type metadata accessor for LocationsState);
  }
  if (v77)
  {
    LODWORD(v116) = v83;
    v114 = v113;
    v115 = v77;
  }
  else
  {
    LODWORD(v116) = *(unsigned __int8 *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications);
    v85 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 16);
    v115 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notifications + 8);
    swift_bridgeObjectRetain(v115);
    v114 = v85;
    swift_bridgeObjectRetain(v85);
  }
  sub_10003773C(a9, v84, &qword_100BC5F98);
  sub_100088FC8(v84, 1, v117);
  if (v75)
  {
    sub_100095B78(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_notificationsOptIn, v122, type metadata accessor for NotificationsOptInState);
    sub_1000DA84C();
    sub_100021A14(v84, &qword_100BC5F98);
  }
  else
  {
    sub_10007C77C(v84, v122, type metadata accessor for NotificationsOptInState);
    sub_1000DA84C();
  }
  v86 = v111;
  v87 = v109;
  sub_10003773C(a10, v111, &qword_100BC5F90);
  sub_100088FC8(v86, 1, v87);
  if (v75)
  {
    sub_100095B78(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, v123, type metadata accessor for TimeState);
    sub_100021A14(v86, &qword_100BC5F90);
  }
  else
  {
    sub_10007C77C(v86, v123, type metadata accessor for TimeState);
  }
  v88 = a15;
  v89 = a13;
  v90 = sub_1000C1A00();
  sub_10003773C(v90, v91, v92);
  v93 = sub_1000C1F74();
  sub_100088FC8(v93, v94, v76);
  if (v75)
  {
    sub_100095B78(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v124, type metadata accessor for ViewState);
    sub_100021A14(v82, &qword_100BC5F88);
  }
  else
  {
    sub_10007C77C(v82, v124, type metadata accessor for ViewState);
  }
  sub_10007C77C(v125, v126, type metadata accessor for ModalViewState);
  v117 = a16;
  v112 = a13;
  v113 = a15;
  if (a14)
  {
    v95 = a14;
    v96 = a16;
  }
  else
  {
    v89 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData);
    v95 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 8);
    v88 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    v96 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 24);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v96);
  }
  if (!a18)
  {
    v97 = *(_BYTE *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState);
    v98 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState + 8);
    swift_bridgeObjectRetain(v98);
    if (a19)
      goto LABEL_35;
LABEL_37:
    v99 = *(_QWORD *)(a20 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_contentStatusBanners);
    swift_bridgeObjectRetain(v99);
    goto LABEL_38;
  }
  v97 = a17 & 1;
  v98 = a18;
  if (!a19)
    goto LABEL_37;
LABEL_35:
  v99 = a19;
LABEL_38:
  v100 = type metadata accessor for MainState._Storage(0);
  swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
  *(_QWORD *)&v103 = v89;
  *((_QWORD *)&v103 + 1) = v95;
  v101 = sub_1000DB488(v118, v127, v119, v120, v121, v116, v115, v114, v122, v123, v124, v126, v103, v88, v96, v97, v98, v99);
  sub_1000E3434(v112, a14, v113, v117);
  swift_bridgeObjectRetain(a18);
  sub_100099360();
  return v101;
}

void sub_1000DF3CC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = sub_10009C82C();
  v2 = v1(v0);
  sub_10009D2C8(v2);
  sub_10004A298();
}

uint64_t sub_1000DF3F4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return String.LocalizationValue.init(stringLiteral:)(0x6E6F697461636F4CLL, 0xE800000000000000);
}

uint64_t sub_1000DF414()
{
  return type metadata accessor for WeatherQueryParameterKey(0);
}

void sub_1000DF41C(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_BYTE *)(v2 - 144) = *(_DWORD *)(v2 - 228);
}

uint64_t sub_1000DF434()
{
  return 0;
}

uint64_t sub_1000DF448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

double sub_1000DF460()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 32) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000DF480(uint64_t a1)
{
  uint64_t v1;

  return Regex.Match.subscript.getter(a1, v1);
}

uint64_t sub_1000DF490(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, a2);
}

uint64_t sub_1000DF49C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1000DF4A8()
{
  return type metadata accessor for MapComponent(0);
}

uint64_t sub_1000DF4B0()
{
  return Date.init()();
}

void sub_1000DF4B8()
{
  sub_10009ADAC();
}

_QWORD *sub_1000DF4D4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  result[15] = v2;
  result[16] = 1702125924;
  result[17] = v1;
  return result;
}

uint64_t sub_1000DF4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v5 - 88, v5 - 65, *(_QWORD *)(v5 - 96), a4, a5);
}

uint64_t sub_1000DF508()
{
  uint64_t v0;

  return v0;
}

void sub_1000DF514(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10000F1C8(a1, v1);
}

double sub_1000DF51C()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DF52C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 128))(a1, v1);
}

uint64_t sub_1000DF538()
{
  return type metadata accessor for NextHourPrecipitationDetailViewModel.Model(0);
}

uint64_t sub_1000DF540()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v1, v0, 5);
}

uint64_t sub_1000DF550()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v1);
}

uint64_t sub_1000DF564(uint64_t a1)
{
  uint64_t v1;

  return type metadata accessor for _ConditionalContent(255, v1, a1);
}

uint64_t sub_1000DF574()
{
  uint64_t v0;

  return sub_1002BDF74(v0 - 144);
}

uint64_t sub_1000DF57C()
{
  return type metadata accessor for LocationComponentHeaderMetrics(0);
}

uint64_t sub_1000DF584()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000DF598@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void sub_1000DF5B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1001A7210(a1, a2, v2);
}

uint64_t sub_1000DF5C0()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_1000DF5CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return sub_1003BB790(a1, a2, v3, *(_QWORD *)(v4 - 328), a3);
}

uint64_t sub_1000DF5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_1000DF5EC(unsigned int a1)
{
  return String.LocalizationValue.init(stringLiteral:)(a1 | 0x6E6F697400000000, 0xE800000000000000);
}

uint64_t sub_1000DF5FC()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1000DF61C(uint64_t a1)
{
  _WORD *v1;
  uint64_t v2;
  uint64_t result;

  result = _s7Weather24LocationCompositionStateOwst_0(v2, 1, 1, a1);
  *v1 = 0;
  return result;
}

uint64_t sub_1000DF640()
{
  return type metadata accessor for PressureTrend(0);
}

uint64_t sub_1000DF648()
{
  return type metadata accessor for MoonDetailViewModel.Model(0);
}

uint64_t sub_1000DF650()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v1 - 160), 1);
}

uint64_t sub_1000DF660(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(v1 - 224), 4);
}

uint64_t sub_1000DF66C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _s7Weather24LocationCompositionStateOwst_0(v2, a2, 1, *(_QWORD *)(v3 - 112));
}

double sub_1000DF680()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void sub_1000DF690(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10049D0B0(a1, a2, v2);
}

uint64_t sub_1000DF698(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 7);
}

uint64_t sub_1000DF6A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DF6B8()
{
  return 1684957559;
}

unint64_t sub_1000DF6C8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1004E4E94();
}

uint64_t sub_1000DF6D4(uint64_t result)
{
  *(_BYTE *)(result + 16) = 34;
  return result;
}

uint64_t sub_1000DF6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(_QWORD *)(v2 - 256), v3);
}

uint64_t sub_1000DF6FC()
{
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000DF70C()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 424, v1);
}

uint64_t sub_1000DF71C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return sub_1000B56C0(v2, a2);
}

uint64_t sub_1000DF724()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DF738()
{
  return type metadata accessor for DispatchPredicate(0);
}

uint64_t sub_1000DF744()
{
  return type metadata accessor for MoonCalendarInput(0);
}

void sub_1000DF74C(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  sub_100095B78(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t sub_1000DF76C()
{
  return type metadata accessor for ComparisonCapsuleViewModel.Row.Body.Temperature(0);
}

double sub_1000DF788()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000DF794()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DF7A0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 200))();
}

double sub_1000DF7A8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10014D7F8(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8), *(_QWORD *)(v1 + a1 + 16), *(_QWORD *)(v1 + a1 + 24));
}

NSDate sub_1000DF7B8()
{
  return Date._bridgeToObjectiveC()();
}

uint64_t sub_1000DF7CC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DF7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v3, a2, v2, v3);
}

void sub_1000DF7F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100033A34(a1, a2, v2);
}

uint64_t sub_1000DF7FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 280) + 8))(v0, *(_QWORD *)(v1 - 208));
}

uint64_t sub_1000DF814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v5 - 112, v5 - 65, *(_QWORD *)(v5 - 120), a4, a5);
}

uint64_t sub_1000DF82C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_1000DF838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 320))(a1, a2, v2);
}

void sub_1000DF848()
{
  sub_10008CF58();
}

uint64_t sub_1000DF854(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 216), 1, 1, a1);
  return type metadata accessor for WeatherMapPresentationState(0);
}

void sub_1000DF87C()
{
  sub_1005FECD8();
}

uint64_t sub_1000DF8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, a4);
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000DF8C0()
{
  return AirQuality.scale.getter();
}

void sub_1000DF8C8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

id sub_1000DF8D4(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2, 0.0);
}

void sub_1000DF8E0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000DF910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 288) + 104))(v2, a2, *(_QWORD *)(v3 - 280));
}

uint64_t sub_1000DF930()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000DF93C()
{
  uint64_t v0;

  return sub_10006A74C(v0);
}

uint64_t sub_1000DF944()
{
  return ProxyContainer.callback.getter();
}

uint64_t sub_1000DF950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 256) = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000DF95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000B15F8(v0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

uint64_t sub_1000DF980(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 296));
}

uint64_t sub_1000DF994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000DF9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for MeasurementEditorView(0, *(_QWORD *)(v4 + 32), a3, a4);
}

void sub_1000DF9CC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100078058(a1, *(_QWORD *)(v2 - 120), v1);
}

uint64_t sub_1000DF9DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000DF9E8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_1000DF9FC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_1000215BC(v0, v1);
}

uint64_t sub_1000DFA08(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 264), 1, 1, a1);
}

uint64_t sub_1000DFA24()
{
  return type metadata accessor for ModalPresentationViewModifier(0);
}

uint64_t sub_1000DFA2C@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 312) = a1;
  return 0;
}

uint64_t sub_1000DFA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return _ConditionalContent<>.init(storage:)(a1, *(_QWORD *)(v5 - 152), a3, a4, a5);
}

uint64_t sub_1000DFA44(uint64_t a1)
{
  return swift_allocObject(a1, 33, 7);
}

uint64_t sub_1000DFA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t sub_1000DFA64()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 152);
}

uint64_t sub_1000DFA78(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, *(_QWORD *)(v1 - 344));
}

uint64_t sub_1000DFA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000DFA90()
{
  uint64_t v0;

  return v0;
}

id sub_1000DFAA0()
{
  return sub_1008DEBB4();
}

id sub_1000DFAA8()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2984));
}

void sub_1000DFAB4(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10007C75C(*(_QWORD *)(a1 - 256), *(_QWORD *)(v2 - 352), v1);
}

unint64_t sub_1000DFACC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 3;
  return sub_100925008();
}

uint64_t sub_1000DFAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v2, a2, v4);
}

uint64_t sub_1000DFAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000DFAFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1) = 0;
  return type metadata accessor for WeatherIntentResponse();
}

NSString sub_1000DFB04()
{
  return String._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for MainAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDEC70;
  if (!qword_100BDEC70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainAction);
  return result;
}

uint64_t type metadata accessor for ViewState(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C04088, (uint64_t)&nominal type descriptor for ViewState);
}

uint64_t type metadata accessor for EnvironmentState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C03D78;
  if (!qword_100C03D78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EnvironmentState);
  return result;
}

uint64_t type metadata accessor for NotificationsOptInState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BED0B0;
  if (!qword_100BED0B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsOptInState);
  return result;
}

uint64_t type metadata accessor for AppConfigurationState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C04E38;
  if (!qword_100C04E38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppConfigurationState);
  return result;
}

_QWORD *sub_1000DFC04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *result;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for PreviewLocation(0);
      v7 = (char *)&loc_1000DFC94 + 4 * byte_1009C35E9[swift_getEnumCaseMultiPayload(a2, v6)];
      __asm { BR              X10 }
      return result;
    case 2u:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_10;
    case 3u:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_10;
    case 4u:
      v11 = type metadata accessor for ModalViewState.MapViewModal(0);
      if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v11))
      {
        v15 = type metadata accessor for PreviewLocation(0);
        v16 = (char *)&loc_1000DFE68 + 4 * word_1009C35D8[swift_getEnumCaseMultiPayload(a2, v15)];
        __asm { BR              X10 }
      }
      v12 = sub_1000BA294(&qword_100BC5F58);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      v8 = a1;
      v9 = a3;
      v10 = 4;
LABEL_10:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    case 5u:
      v13 = type metadata accessor for ModalViewState.LocationDetailModal(0);
      v14 = (char *)&loc_1000DFD8C + 4 * word_1009C35C8[swift_getEnumCaseMultiPayload(a2, v13)];
      __asm { BR              X10 }
      return result;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t type metadata accessor for ModalViewState(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C01D10, (uint64_t)&nominal type descriptor for ModalViewState);
}

void sub_1000E18F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_1000E1948 + 4 * byte_1009DC4B4[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_1000E1948(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__dst,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = v45[1];
  *v44 = *v45;
  v44[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_storeEnumTagMultiPayload(v44, v46, v47);
  return v44;
}

char *sub_1000E2718(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v35;
  uint64_t v36;
  int *v37;

  v6 = type metadata accessor for CurrentLocation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v10 = a1;
      v11 = v6;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v14 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v10 = a1;
      v11 = v6;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_11;
      }
      v9 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v6;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
LABEL_11:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
    goto LABEL_12;
  }
  v7 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_12:
  v15 = a3[5];
  v16 = a3[6];
  v17 = *(_QWORD *)&a2[v15];
  *(_QWORD *)&a1[v15] = v17;
  v18 = *(_QWORD *)&a2[v16];
  *(_QWORD *)&a1[v16] = v18;
  v19 = a3[7];
  v20 = a3[8];
  v21 = *(_QWORD *)&a2[v19];
  *(_QWORD *)&a1[v19] = v21;
  v22 = *(_QWORD *)&a2[v20];
  *(_QWORD *)&a1[v20] = v22;
  v23 = a3[9];
  v24 = a3[10];
  v25 = *(_QWORD *)&a2[v23];
  *(_QWORD *)&a1[v23] = v25;
  v26 = *(_QWORD *)&a2[v24];
  *(_QWORD *)&a1[v24] = v26;
  v27 = a3[11];
  v28 = a3[12];
  v29 = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[v27] = v29;
  v37 = a3;
  v30 = &a1[v28];
  v31 = *(_QWORD *)&a2[v28];
  v36 = *(_QWORD *)&a2[v28 + 8];
  v35 = a2[v28 + 16];
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  sub_100163980(v31, v36, v35);
  *(_QWORD *)v30 = v31;
  *((_QWORD *)v30 + 1) = v36;
  v30[16] = v35;
  v32 = v37[13];
  v33 = *(_QWORD *)&a2[v32];
  *(_QWORD *)&a1[v32] = v33;
  swift_bridgeObjectRetain(v33);
  return a1;
}

uint64_t sub_1000E2954(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[8];
  v11 = a3[9];
  v12 = (_QWORD *)(a1 + v10);
  v13 = (_QWORD *)(a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v15 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[16];
  v19 = (_QWORD *)(a1 + v18);
  v20 = a2 + v18;
  v21 = *(void **)v20;
  v22 = *(void **)(v20 + 8);
  *v19 = *(_QWORD *)v20;
  v19[1] = v22;
  v23 = *(void **)(v20 + 16);
  v24 = *(void **)(v20 + 24);
  v19[2] = v23;
  v19[3] = v24;
  v25 = *(void **)(v20 + 32);
  v26 = *(void **)(v20 + 40);
  v19[4] = v25;
  v19[5] = v26;
  swift_bridgeObjectRetain(v14);
  v27 = v21;
  v28 = v22;
  v29 = v23;
  v30 = v24;
  v31 = v25;
  v32 = v26;
  return a1;
}

void sub_1000E2A68(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int *v60;
  char *v61;
  __n128 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for Location.Identifier(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for CurrentLocation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8)
    && swift_getEnumCaseMultiPayload(v7, v8) <= 2)
  {
    v9 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  v10 = (int *)type metadata accessor for LocationsState(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[6]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[8]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[11]));
  sub_1001639C8(*(_QWORD *)(v7 + v10[12]), *(_QWORD *)(v7 + v10[12] + 8), *(_BYTE *)(v7 + v10[12] + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v10[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  v11 = a1 + a2[11];
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16]));
  v14 = (uint64_t *)(a1 + a2[18]);
  v15 = type metadata accessor for LocationWeatherDataState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
    if (EnumCaseMultiPayload == 2)
    {
      v17 = v14[1];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease(v14[1]);
        v18 = (int *)type metadata accessor for WeatherData(0);
        v19 = (uint64_t)v14 + v18[5];
        v20 = type metadata accessor for Locale(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
        v21 = (char *)v14 + v18[6];
        v22 = type metadata accessor for WeatherDataModel(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
        v23 = (uint64_t)v14 + v18[7];
        v24 = sub_1000BA294(&qword_100BC3348);
        if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
          v13(v23, v12);
        v25 = (char *)v14 + v18[8];
        v26 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
        v27 = swift_getEnumCaseMultiPayload(v25, v26);
        if (v27 == 1)
        {
          v28 = type metadata accessor for WeatherStatisticsModel(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v25, v28);
        }
        else if (!v27)
        {
          swift_bridgeObjectRelease(*((_QWORD *)v25 + 1));
        }
        v29 = (uint64_t)v14 + v18[9];
        v30 = type metadata accessor for WeatherDataOverrides(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v29, 1, v30))
        {
          if (!_s7Weather24LocationCompositionStateOwet_0(v29, 1, v12))
            v13(v29, v12);
          v31 = v29 + *(int *)(v30 + 20);
          if (!_s7Weather24LocationCompositionStateOwet_0(v31, 1, v12))
            v13(v31, v12);
        }
        v69 = sub_1000BA294(&qword_100BC3358);
        v32 = (char *)v14 + *(int *)(v69 + 48);
        v33 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
        v34 = (int *)type metadata accessor for PreprocessedWeatherData(0);
        swift_bridgeObjectRelease(*(_QWORD *)&v32[v34[5]]);
        v35 = &v32[v34[6]];
        swift_bridgeObjectRelease(*((_QWORD *)v35 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v35 + 3));
        swift_bridgeObjectRelease(*((_QWORD *)v35 + 5));
        v36 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
        v37 = (uint64_t)&v35[*(int *)(v36 + 28)];
        v38 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v37, 1, v38))
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v37 + 8));
          v39 = v37 + *(int *)(v38 + 20);
          v40 = type metadata accessor for TemperatureScaleConfiguration(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
          v41 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
          swift_bridgeObjectRelease(*(_QWORD *)(v39 + *(int *)(v41 + 32) + 8));
        }
        swift_bridgeObjectRelease(*(_QWORD *)&v35[*(int *)(v36 + 32) + 8]);
        v42 = &v32[v34[7]];
        swift_bridgeObjectRelease(*(_QWORD *)v42);
        v43 = (uint64_t)&v42[*(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20)];
        v44 = type metadata accessor for WeatherDescription(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v43, 1, v44))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
        v45 = &v32[v34[8]];
        swift_bridgeObjectRelease(*((_QWORD *)v45 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v45 + 3));
        swift_bridgeObjectRelease(*((_QWORD *)v45 + 5));
        swift_bridgeObjectRelease(*((_QWORD *)v45 + 7));
        v46 = &v45[*(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32)];
        v47 = (void (*)(char *, uint64_t, __n128))v13;
        v13((uint64_t)v46, v12);
        v48 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
        v49 = (uint64_t)&v46[*(int *)(v48 + 20)];
        v50 = type metadata accessor for Elevation(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v49, 1, v50))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
        v51 = (uint64_t)&v46[*(int *)(v48 + 24)];
        v52 = type metadata accessor for BackgroundMoonData(0);
        if (!_s7Weather24LocationCompositionStateOwet_0(v51, 1, v52))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
        v53 = &v32[v34[9]];
        swift_bridgeObjectRelease(*((_QWORD *)v53 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v53 + 3));
        swift_bridgeObjectRelease(*((_QWORD *)v53 + 5));
        swift_bridgeObjectRelease(*((_QWORD *)v53 + 7));
        swift_bridgeObjectRelease(*((_QWORD *)v53 + 9));
        swift_bridgeObjectRelease(*((_QWORD *)v53 + 11));
        v54 = swift_bridgeObjectRelease(*((_QWORD *)v53 + 13));
        v55 = &v32[v34[10]];
        (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 8))(v55, v44, v54);
        v56 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
        swift_bridgeObjectRelease(*(_QWORD *)&v55[*(int *)(v56 + 20) + 8]);
        v57 = &v32[v34[11]];
        swift_bridgeObjectRelease(*((_QWORD *)v57 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v57 + 3));
        swift_bridgeObjectRelease(*((_QWORD *)v57 + 5));
        v58 = &v32[v34[12]];
        v59 = type metadata accessor for PressureTrend(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
        v60 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
        swift_bridgeObjectRelease(*(_QWORD *)&v58[v60[5] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v58[v60[6] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v58[v60[7] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v58[v60[9] + 8]);
        v61 = &v32[v34[13]];
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 3));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 5));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 7));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 9));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 11));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 13));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 15));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 17));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 19));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 21));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 23));
        swift_bridgeObjectRelease(*((_QWORD *)v61 + 25));
        v62 = swift_bridgeObjectRelease(*((_QWORD *)v61 + 28));
        v63 = &v32[v34[14]];
        v47(v63, v12, v62);
        v64 = (uint64_t)&v63[*(int *)(v48 + 20)];
        if (!_s7Weather24LocationCompositionStateOwet_0(v64, 1, v50))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v64, v50);
        v65 = (uint64_t)&v63[*(int *)(v48 + 24)];
        if (!_s7Weather24LocationCompositionStateOwet_0(v65, 1, v52))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v65, v52);
        v66 = &v32[v34[15]];
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 3));
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 5));
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 7));
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 9));
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 11));
        swift_bridgeObjectRelease(*((_QWORD *)v66 + 13));
        v14 = (uint64_t *)((char *)v14 + *(int *)(v69 + 64));
      }
      else if (EnumCaseMultiPayload)
      {
        return;
      }
      v67 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v14, v67) != 1)
      {
        v68 = type metadata accessor for News(0);
        (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v14, v68);
        return;
      }
      v17 = *v14;
    }
    swift_bridgeObjectRelease(v17);
  }
}

uint64_t type metadata accessor for LocationsState(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFFC38;
  if (!qword_100BFFC38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationsState);
  return result;
}

uint64_t type metadata accessor for MainState._Storage(uint64_t a1)
{
  return sub_100098190(a1, qword_100BC8C28, (uint64_t)&nominal type descriptor for MainState._Storage);
}

uint64_t sub_1000E32F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_1000E33C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E3404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000E3434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t type metadata accessor for ModalViewState.MapViewModal(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100C01C90, (uint64_t)&nominal type descriptor for ModalViewState.MapViewModal);
}

void sub_1000E3484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD);
  char *v57;

  type metadata accessor for AveragesDetailViewAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v2);
  sub_100088FDC();
  v3 = sub_10009876C();
  type metadata accessor for MoonDetailViewAction(v3);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v5 = sub_10009876C();
  type metadata accessor for ConditionDetailViewAction(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v7 = sub_10009876C();
  type metadata accessor for DebugAction(v7);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v10 = sub_1000987B4(v9);
  type metadata accessor for PerformanceTestAction(v10);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v13 = sub_1000987B4(v12);
  type metadata accessor for WeatherDataAction(v13);
  sub_1000B42B0();
  __chkstk_darwin(v14);
  sub_100088FDC();
  v15 = sub_10009876C();
  type metadata accessor for NotificationsOptInState(v15);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v18 = sub_1000987B4(v17);
  type metadata accessor for NotificationsOptInAction(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v21 = sub_1000987B4(v20);
  type metadata accessor for NotificationsAction(v21);
  sub_1000B42B0();
  __chkstk_darwin(v22);
  sub_100088FDC();
  v24 = sub_1000987B4(v23);
  type metadata accessor for LocationViewAction(v24);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100088FDC();
  v27 = sub_1000987B4(v26);
  type metadata accessor for ModalViewState(v27);
  sub_1000B42B0();
  __chkstk_darwin(v28);
  sub_100088FDC();
  v30 = sub_1000987B4(v29);
  type metadata accessor for ModalViewAction(v30);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100088FDC();
  v33 = sub_1000987B4(v32);
  type metadata accessor for ViewState(v33);
  sub_1000B42B0();
  __chkstk_darwin(v34);
  sub_100088FDC();
  v36 = sub_1000987B4(v35);
  type metadata accessor for ViewAction(v36);
  sub_1000B42B0();
  __chkstk_darwin(v37);
  sub_100098728();
  type metadata accessor for LocationsState(0);
  sub_1000B42B0();
  __chkstk_darwin(v38);
  sub_100098728();
  type metadata accessor for LocationsAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v39);
  sub_100098728();
  type metadata accessor for EnvironmentState(0);
  sub_1000B42B0();
  __chkstk_darwin(v40);
  sub_100098728();
  type metadata accessor for EnvironmentAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  sub_100098728();
  type metadata accessor for AppConfigurationAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  __chkstk_darwin(v43);
  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v44);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v45);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v46);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v47);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v48);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v49);
  sub_100088FDC();
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v50);
  sub_100088FDC();
  v51 = sub_10009876C();
  type metadata accessor for MainAction(v51);
  sub_1000B42B0();
  __chkstk_darwin(v52);
  sub_100098728();
  v55 = v54 - v53;
  sub_100080C0C(a2, v54 - v53, v56);
  v57 = (char *)sub_1000E38D4 + 4 * word_1009C8808[swift_getEnumCaseMultiPayload(v55)];
  __asm { BR              X10 }
}

uint64_t sub_1000E38D4()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = *v1;
  sub_1000DB418((_QWORD *)(*(_QWORD *)(v4 - 136) + 56), *(_QWORD *)(*(_QWORD *)(v4 - 136) + 80));
  v6 = *(_QWORD *)(v4 - 120);
  v7 = sub_10013D5B8(*(unsigned __int8 *)(v6 + 24), v5);
  v8 = sub_1000C08E4();
  v10 = sub_1000C3054(v0, 1, v9, v8);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 168), 1, 1, v10);
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 176), 1, 1, *(_QWORD *)(v4 - 208));
  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v4 - 184), 1, 1, *(_QWORD *)(v4 - 192));
  v11 = sub_1000E745C();
  sub_10009D358(v11, v7, v0, v0, v3, v12, v13, v14, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, 0, v6);
  sub_1000DA75C();
  sub_10009ED60(v15, &qword_100BC5F60);
  sub_1000992DC(v16, &qword_100BC5F88);
  sub_100094EEC(v17, &qword_100BC5F90);
  sub_1000988B0(v18, &qword_100BC5F98);
  sub_1000988A0(v19, &qword_100BC5FA0);
  sub_1000B3B00(v20, &qword_100BC5FA8);
  sub_100021A14(v0, &qword_100BC5FB0);
  return v2;
}

void sub_1000E4278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 - 264);
  sub_1000C0CEC(v0, v2);
  sub_1000DB418((_QWORD *)(*(_QWORD *)(v1 - 136) + 456), *(_QWORD *)(*(_QWORD *)(v1 - 136) + 480));
  v3 = *(_QWORD *)(v1 - 120);
  v4 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState);
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState + 8);
  sub_1000D9274();
  sub_100272DE8(v4, v5, v3, v2);
  sub_10003BC58();
  JUMPOUT(0x1000E424CLL);
}

uint64_t type metadata accessor for ViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C11620;
  if (!qword_100C11620)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ViewAction);
  return result;
}

uint64_t type metadata accessor for ModalViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BDF890;
  if (!qword_100BDF890)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModalViewAction);
  return result;
}

uint64_t type metadata accessor for LocationViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BD8BC0;
  if (!qword_100BD8BC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewAction);
  return result;
}

uint64_t type metadata accessor for NotificationsAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE5F80;
  if (!qword_100BE5F80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsAction);
  return result;
}

uint64_t type metadata accessor for ConditionDetailViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BE5D40;
  if (!qword_100BE5D40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConditionDetailViewAction);
  return result;
}

uint64_t type metadata accessor for AveragesDetailViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BCF4D0;
  if (!qword_100BCF4D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AveragesDetailViewAction);
  return result;
}

uint64_t type metadata accessor for AppConfigurationAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C03480;
  if (!qword_100C03480)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppConfigurationAction);
  return result;
}

uint64_t type metadata accessor for PerformanceTestAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C018B0;
  if (!qword_100C018B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PerformanceTestAction);
  return result;
}

uint64_t type metadata accessor for MoonDetailViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100C129C0;
  if (!qword_100C129C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoonDetailViewAction);
  return result;
}

uint64_t type metadata accessor for DebugAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BFCFE8;
  if (!qword_100BFCFE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugAction);
  return result;
}

uint64_t sub_1000E451C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];

  sub_1000BA294(&qword_100BC5F60);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  sub_100088FDC();
  v65 = v5;
  sub_1000BA294(&qword_100BC5F88);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v64 = v7;
  sub_1000BA294(&qword_100BC5F90);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098728();
  v11 = v10 - v9;
  sub_1000BA294(&qword_100BC5F98);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  v15 = v14 - v13;
  sub_1000BA294(&qword_100BC5FA0);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100098728();
  v19 = v18 - v17;
  sub_1000BA294(&qword_100BC5FA8);
  sub_1000B42B0();
  __chkstk_darwin(v20);
  sub_100098728();
  v23 = v22 - v21;
  sub_1000BA294(&qword_100BC5FB0);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  v28 = (int *)type metadata accessor for BannerStateComputer(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_100098728();
  v32 = v31 - v30;
  sub_100080C0C(a2, v31 - v30, type metadata accessor for MainAction);
  v33 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_contentStatusBanners);
  *(_QWORD *)(v32 + v28[5]) = a1;
  *(_QWORD *)(v32 + v28[6]) = v33;
  v34 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v66, 0, 0);
  *(_BYTE *)(v32 + v28[7]) = *(_BYTE *)(v34 + 2) == 4;
  swift_retain();
  swift_bridgeObjectRetain(v33);
  sub_1000E4884();
  v36 = v35;
  v37 = type metadata accessor for AppConfigurationState(0);
  v40 = sub_1000BA2E8(v27, v38, v39, v37);
  v41 = type metadata accessor for EnvironmentState(v40);
  v44 = sub_1000BA2E8(v23, v42, v43, v41);
  v45 = type metadata accessor for LocationsState(v44);
  v48 = sub_1000BA2E8(v19, v46, v47, v45);
  v49 = type metadata accessor for NotificationsOptInState(v48);
  v52 = sub_1000BA2E8(v15, v50, v51, v49);
  v53 = type metadata accessor for TimeState(v52);
  v56 = sub_1000BA2E8(v11, v54, v55, v53);
  v57 = type metadata accessor for ViewState(v56);
  v60 = sub_1000BA2E8(v64, v58, v59, v57);
  v61 = type metadata accessor for ModalViewState(v60);
  _s7Weather24LocationCompositionStateOwst_0(v65, 1, 1, v61);
  v62 = sub_1000DEBAC(0, 3, v27, v23, v19, 0, 0, 0, v15, v11, v64, v65, 0, 0, 0, 0, 0, 0, v36, a1);
  swift_bridgeObjectRelease(v36);
  sub_100021A14(v65, &qword_100BC5F60);
  sub_100021A14(v64, &qword_100BC5F88);
  sub_100021A14(v11, &qword_100BC5F90);
  sub_100021A14(v15, &qword_100BC5F98);
  sub_100021A14(v19, &qword_100BC5FA0);
  sub_100021A14(v23, &qword_100BC5FA8);
  sub_100021A14(v27, &qword_100BC5FB0);
  sub_1000215BC(v32, type metadata accessor for BannerStateComputer);
  return v62;
}

double sub_1000E4884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int EnumCaseMultiPayload;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  double result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v0 = type metadata accessor for CurrentLocation(0);
  __chkstk_darwin(v0);
  v67 = (uint64_t)&v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for LocationsAction(0);
  v2 = __chkstk_darwin(v71);
  v72 = (uint64_t)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v74 = (uint64_t)&v63 - v4;
  v5 = type metadata accessor for LocationViewAction(0);
  __chkstk_darwin(v5);
  v70 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for LocationViewerViewAction(0);
  v7 = __chkstk_darwin(v64);
  v66 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v65 = (uint64_t)&v63 - v9;
  v68 = type metadata accessor for ViewAction(0);
  v10 = __chkstk_darwin(v68);
  v69 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v73 = (uint64_t)&v63 - v12;
  v13 = type metadata accessor for ModalViewAction(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v63 - v17;
  v19 = type metadata accessor for WeatherDataAction(0);
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v75 = (uint64_t)&v63 - v23;
  v24 = type metadata accessor for EnvironmentAction(0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v63 - v28;
  v30 = type metadata accessor for MainAction(0);
  __chkstk_darwin(v30);
  v32 = (uint64_t *)((char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100080C0C(v76, (uint64_t)v32, v33);
  switch(swift_getEnumCaseMultiPayload(v32, v30))
  {
    case 2u:
      sub_10007802C((uint64_t)v32, (uint64_t)v29, type metadata accessor for EnvironmentAction);
      sub_100080C0C((uint64_t)v29, (uint64_t)v27, type metadata accessor for EnvironmentAction);
      if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
      {
        v34 = v76;
        sub_10013C484();
        sub_10013BCAC();
        sub_10013BE8C();
      }
      else
      {
        sub_1000215BC((uint64_t)v27, type metadata accessor for EnvironmentAction);
        v34 = v76;
      }
      v52 = type metadata accessor for EnvironmentAction;
      v51 = (uint64_t)v29;
      goto LABEL_34;
    case 3u:
      v43 = v74;
      sub_10007802C((uint64_t)v32, v74, type metadata accessor for LocationsAction);
      v44 = v72;
      sub_100080C0C(v43, v72, type metadata accessor for LocationsAction);
      if (swift_getEnumCaseMultiPayload(v44, v71))
      {
        sub_1000215BC(v44, type metadata accessor for LocationsAction);
        v34 = v76;
      }
      else
      {
        v55 = v67;
        sub_10007802C(v44, v67, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
        v34 = v76;
        sub_100032144(v55);
        sub_1000215BC(v55, (uint64_t (*)(_QWORD))&type metadata accessor for CurrentLocation);
      }
      v52 = type metadata accessor for LocationsAction;
      v51 = v43;
      goto LABEL_34;
    case 6u:
      v45 = v73;
      sub_10007802C((uint64_t)v32, v73, type metadata accessor for ViewAction);
      v46 = v69;
      sub_100080C0C(v45, v69, type metadata accessor for ViewAction);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v46, v68);
      if ((EnumCaseMultiPayload - 8) < 2)
      {
        v34 = v76;
        sub_10013BE8C();
        goto LABEL_33;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v58 = v65;
        sub_10007802C(v46, v65, type metadata accessor for LocationViewerViewAction);
        v59 = v66;
        sub_100080C0C(v58, v66, type metadata accessor for LocationViewerViewAction);
        v60 = swift_getEnumCaseMultiPayload(v59, v64);
        v34 = v76;
        if (v60 == 6)
        {
          sub_10013BE8C();
          v48 = type metadata accessor for LocationViewerViewAction;
          v49 = v58;
        }
        else
        {
          sub_1000215BC(v58, type metadata accessor for LocationViewerViewAction);
          v49 = v59;
          v48 = type metadata accessor for LocationViewerViewAction;
        }
      }
      else
      {
        if (EnumCaseMultiPayload != 5)
        {
          sub_1000215BC(v46, type metadata accessor for ViewAction);
          v34 = v76;
          goto LABEL_33;
        }
        v34 = v76;
        sub_10013BCAC();
        v48 = type metadata accessor for ViewAction;
        v49 = v46;
      }
      sub_1000215BC(v49, v48);
LABEL_33:
      v52 = type metadata accessor for ViewAction;
      v51 = v45;
LABEL_34:
      sub_1000215BC(v51, v52);
LABEL_35:
      v61 = type metadata accessor for BannerStateComputer(0);
      *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v34 + *(int *)(v61 + 24))).n128_u64[0];
      return result;
    case 7u:
      sub_10007802C((uint64_t)v32, (uint64_t)v18, type metadata accessor for ModalViewAction);
      sub_100080C0C((uint64_t)v18, (uint64_t)v16, type metadata accessor for ModalViewAction);
      if (swift_getEnumCaseMultiPayload(v16, v13) == 4)
      {
        v34 = v76;
        sub_10013BE8C();
      }
      else
      {
        sub_1000215BC((uint64_t)v16, type metadata accessor for ModalViewAction);
        v34 = v76;
      }
      v52 = type metadata accessor for ModalViewAction;
      v51 = (uint64_t)v18;
      goto LABEL_34;
    case 8u:
      v50 = v70;
      sub_10007802C((uint64_t)v32, v70, type metadata accessor for LocationViewAction);
      v34 = v76;
      sub_1007D6668(v50);
      v51 = v50;
      v52 = type metadata accessor for LocationViewAction;
      goto LABEL_34;
    case 9u:
      v35 = v75;
      sub_10007802C((uint64_t)v32, v75, type metadata accessor for WeatherDataAction);
      sub_100080C0C(v35, (uint64_t)v22, type metadata accessor for WeatherDataAction);
      v36 = swift_getEnumCaseMultiPayload(v22, v19);
      if (v36 == 2)
      {
        v56 = *v22;
        v57 = v22[1];
        swift_bridgeObjectRelease(v22[3]);
        v34 = v76;
        sub_1007D7028(v56, v57, v35);
        swift_bridgeObjectRelease(v57);
      }
      else if (v36 == 4)
      {
        v37 = *v22;
        v38 = v22[1];
        v39 = (int *)sub_1000BA294(&qword_100BCB630);
        v40 = (uint64_t)v22 + v39[12];
        v41 = (uint64_t)v22 + v39[16];
        v42 = (uint64_t)v22 + v39[20];
        v34 = v76;
        sub_1000F8514(v37, v38, v35);
        swift_bridgeObjectRelease(v38);
        sub_1000215BC(v42, type metadata accessor for NewsDataModel);
        sub_1000215BC(v41, type metadata accessor for PreprocessedWeatherData);
        sub_1000215BC(v40, type metadata accessor for WeatherData);
      }
      else
      {
        sub_1000215BC((uint64_t)v22, type metadata accessor for WeatherDataAction);
        v34 = v76;
      }
      v52 = type metadata accessor for WeatherDataAction;
      v51 = v35;
      goto LABEL_34;
    case 0x10u:
      v53 = *v32;
      v54 = v32[1];
      v34 = v76;
      sub_1007D6958(v53, v54);
      swift_bridgeObjectRelease(v54);
      goto LABEL_35;
    default:
      sub_1000215BC((uint64_t)v32, type metadata accessor for MainAction);
      v34 = v76;
      goto LABEL_35;
  }
}

uint64_t type metadata accessor for BannerStateComputer(uint64_t a1)
{
  uint64_t result;

  result = qword_100C09160;
  if (!qword_100C09160)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BannerStateComputer);
  return result;
}

uint64_t type metadata accessor for LocationViewerViewAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100BF5EE8;
  if (!qword_100BF5EE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewerViewAction);
  return result;
}

double sub_1000E5058(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  int *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __n128 v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int *v107;
  char *v108;
  __n128 v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  double result;
  void (*v116)(char *, uint64_t);
  uint64_t v117;

  v4 = type metadata accessor for MainAction(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 1u:
      v5 = type metadata accessor for AppConfiguration(0);
      goto LABEL_82;
    case 2u:
      v6 = type metadata accessor for EnvironmentAction(0);
      switch(swift_getEnumCaseMultiPayload(a1, v6))
      {
        case 2u:
          v5 = type metadata accessor for Locale(0);
          goto LABEL_82;
        case 3u:
          v44 = type metadata accessor for ActivityAction(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v44);
          if (EnumCaseMultiPayload == 1)
          {
            v69 = type metadata accessor for PreviewLocation(0);
            switch(swift_getEnumCaseMultiPayload(a1, v69))
            {
              case 0u:
                goto LABEL_81;
              case 1u:
                goto LABEL_97;
              case 2u:
                goto LABEL_107;
              case 3u:
                goto LABEL_30;
              default:
                goto LABEL_131;
            }
            goto LABEL_131;
          }
          if (EnumCaseMultiPayload)
            goto LABEL_131;
          v46 = type metadata accessor for SavedLocation(0);
          if (swift_getEnumCaseMultiPayload(a1, v46) == 1)
          {
            v5 = type metadata accessor for SavedLocation.Placeholder(0);
            goto LABEL_82;
          }
          goto LABEL_81;
        case 4u:
          goto LABEL_67;
        case 8u:
          v24 = a1[1];
          if (v24 >= 2)
            goto LABEL_79;
          goto LABEL_131;
        case 0xAu:
          v47 = type metadata accessor for ConfiguredUnitsAction(0);
          v48 = swift_getEnumCaseMultiPayload(a1, v47);
          if (v48 == 1)
          {
            v70 = type metadata accessor for UnitConfiguration.Temperature(0);
            if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v70))
              (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(a1, v70);
            goto LABEL_131;
          }
          if (v48)
            goto LABEL_131;
          v5 = type metadata accessor for ConfiguredUnit(0);
          break;
        default:
          goto LABEL_131;
      }
      goto LABEL_82;
    case 3u:
      v7 = type metadata accessor for LocationsAction(0);
      switch(swift_getEnumCaseMultiPayload(a1, v7))
      {
        case 0u:
          v8 = type metadata accessor for CurrentLocation(0);
          v9 = swift_getEnumCaseMultiPayload(a1, v8);
          if (v9 == 2 || v9 == 1)
            goto LABEL_81;
          goto LABEL_26;
        case 1u:
          goto LABEL_81;
        case 2u:
          swift_bridgeObjectRelease(*a1);
          goto LABEL_67;
        case 5u:
          goto LABEL_78;
        case 6u:
          sub_1001639C8(*a1, a1[1], *((_BYTE *)a1 + 16));
          break;
        default:
          goto LABEL_131;
      }
      goto LABEL_131;
    case 4u:
      v10 = type metadata accessor for NotificationsAction(0);
      switch(swift_getEnumCaseMultiPayload(a1, v10))
      {
        case 1u:
          v11 = type metadata accessor for LocationModel(0);
          if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v11))
            (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
          v12 = (uint64_t)a1 + *(int *)(sub_1000BA294((uint64_t *)&unk_100C0B810) + 48);
          v13 = type metadata accessor for URL(0);
          goto LABEL_105;
        case 2u:
          v49 = type metadata accessor for NotificationSubscription.Location(0);
          (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(a1, v49);
          v50 = &qword_100BD2378;
          goto LABEL_71;
        case 3u:
        case 4u:
          goto LABEL_78;
        case 5u:
          v51 = type metadata accessor for Location(0);
          (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(a1, v51);
          v50 = &qword_100BD2370;
LABEL_71:
          v34 = (_QWORD *)((char *)a1 + *(int *)(sub_1000BA294(v50) + 48));
          v35 = type metadata accessor for NotificationSubscription.Kind(0);
          goto LABEL_130;
        default:
          goto LABEL_131;
      }
    case 5u:
      v14 = type metadata accessor for NotificationsOptInAction(0);
      v15 = swift_getEnumCaseMultiPayload(a1, v14);
      switch(v15)
      {
        case 4:
          goto LABEL_44;
        case 3:
LABEL_78:
          v24 = *a1;
LABEL_79:
          swift_bridgeObjectRelease(v24);
          break;
        case 2:
          goto LABEL_81;
      }
      goto LABEL_131;
    case 6u:
      v16 = type metadata accessor for ViewAction(0);
      switch(swift_getEnumCaseMultiPayload(a1, v16))
      {
        case 0u:
          v17 = type metadata accessor for ListViewAction(0);
          v18 = swift_getEnumCaseMultiPayload(a1, v17);
          if (v18 == 2)
            goto LABEL_84;
          goto LABEL_74;
        case 1u:
          v52 = type metadata accessor for LocationViewerViewAction(0);
          v18 = swift_getEnumCaseMultiPayload(a1, v52);
          if (v18 == 2)
          {
LABEL_84:
            v5 = type metadata accessor for Location.Identifier(0);
          }
          else if (v18 == 1)
          {
LABEL_95:
            v5 = type metadata accessor for WeatherMapOverlayKind(0);
          }
          else
          {
LABEL_74:
            if (v18)
              goto LABEL_131;
            v5 = type metadata accessor for LocationModel(0);
          }
          break;
        case 3u:
          v53 = type metadata accessor for SearchViewAction(0);
          switch(swift_getEnumCaseMultiPayload(a1, v53))
          {
            case 0u:
              v5 = type metadata accessor for CodableError(0);
              goto LABEL_82;
            case 1u:
              goto LABEL_78;
            case 2u:
              goto LABEL_67;
            case 3u:
            case 6u:
              goto LABEL_81;
            case 4u:
LABEL_97:
              v5 = type metadata accessor for LocationOfInterest(0);
              goto LABEL_82;
            case 5u:
LABEL_107:

              swift_bridgeObjectRelease(a1[2]);
              swift_bridgeObjectRelease(a1[4]);
              swift_bridgeObjectRelease(a1[6]);
              v12 = (uint64_t)a1 + *(int *)(type metadata accessor for SearchLocation(0) + 32);
              v13 = type metadata accessor for Location(0);
              goto LABEL_105;
            default:
              goto LABEL_131;
          }
          goto LABEL_131;
        case 4u:
          v54 = type metadata accessor for InteractiveMapViewAction(0);
          switch(swift_getEnumCaseMultiPayload(a1, v54))
          {
            case 0u:
            case 1u:
            case 2u:
            case 4u:
              goto LABEL_81;
            case 3u:
              goto LABEL_95;
            default:
              goto LABEL_131;
          }
          goto LABEL_131;
        case 5u:
          v34 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36));
          v35 = type metadata accessor for DynamicTypeSize(0);
          goto LABEL_130;
        default:
          goto LABEL_131;
      }
      goto LABEL_82;
    case 7u:
      v19 = type metadata accessor for ModalViewAction(0);
      v20 = swift_getEnumCaseMultiPayload(a1, v19);
      if (v20 == 3)
      {
        if ((~*a1 & 0xF000000000000006) != 0)
          sub_10019D2B8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
      }
      else if (!v20)
      {
        v21 = type metadata accessor for LocationPreviewViewAction(0);
        if (swift_getEnumCaseMultiPayload(a1, v21) == 1)
          goto LABEL_81;
      }
      goto LABEL_131;
    case 8u:
      v22 = type metadata accessor for LocationViewAction(0);
      v9 = swift_getEnumCaseMultiPayload(a1, v22);
      if (v9 == 2)
      {
        v37 = type metadata accessor for Location(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(a1, v37);
        v34 = (_QWORD *)((char *)a1 + *(int *)(sub_1000BA294(&qword_100BC5FC0) + 48));
        v35 = type metadata accessor for LocationOfInterest(0);
LABEL_130:
        (*(void (**)(unint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
        goto LABEL_131;
      }
      if (v9 == 1)
      {
        v38 = type metadata accessor for LocationComponentAction(0);
        switch(swift_getEnumCaseMultiPayload(a1, v38))
        {
          case 0u:
            v39 = type metadata accessor for URL(0);
            goto LABEL_102;
          case 1u:
            v39 = type metadata accessor for WeatherMapOverlayKind(0);
            goto LABEL_102;
          case 2u:
            v39 = type metadata accessor for DetailCondition(0);
LABEL_102:
            (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(a1, v39);
            break;
          case 4u:
            v71 = (char *)a1 + *(int *)(sub_1000BA294(&qword_100BC5FF0) + 48);
            v72 = type metadata accessor for Location(0);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
            break;
          default:
            break;
        }
        v12 = (uint64_t)a1 + *(int *)(sub_1000BA294(&qword_100BC5FC8) + 64);
        v13 = type metadata accessor for Date(0);
LABEL_105:
        v73 = v13;
        if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, v13))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v12, v73);
        goto LABEL_131;
      }
LABEL_26:
      if (v9)
        goto LABEL_131;
LABEL_81:
      v5 = type metadata accessor for Location(0);
      goto LABEL_82;
    case 9u:
      v23 = type metadata accessor for WeatherDataAction(0);
      switch(swift_getEnumCaseMultiPayload(a1, v23))
      {
        case 0u:
        case 1u:
        case 7u:
          goto LABEL_67;
        case 2u:
        case 3u:
        case 9u:
          swift_bridgeObjectRelease(a1[1]);
LABEL_30:
          v24 = a1[3];
          goto LABEL_79;
        case 4u:
          swift_bridgeObjectRelease(a1[1]);
          v55 = sub_1000BA294(&qword_100BCB630);
          v56 = (char *)a1 + *(int *)(v55 + 48);
          swift_bridgeObjectRelease(*((_QWORD *)v56 + 1));
          v57 = (int *)type metadata accessor for WeatherData(0);
          v58 = (uint64_t)&v56[v57[5]];
          v59 = type metadata accessor for Locale(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v58, 1, v59))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
          v60 = &v56[v57[6]];
          v61 = type metadata accessor for WeatherDataModel(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v60, v61);
          v62 = (uint64_t)&v56[v57[7]];
          v63 = sub_1000BA294(&qword_100BC3348);
          if (!_s7Weather24LocationCompositionStateOwet_0(v62, 1, v63))
          {
            v64 = type metadata accessor for Date(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v62, v64);
          }
          v65 = &v56[v57[8]];
          v66 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
          v67 = swift_getEnumCaseMultiPayload(v65, v66);
          if (v67 == 1)
          {
            v74 = type metadata accessor for WeatherStatisticsModel(0);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v65, v74);
          }
          else if (!v67)
          {
            swift_bridgeObjectRelease(*((_QWORD *)v65 + 1));
          }
          v75 = (uint64_t)&v56[v57[9]];
          v76 = type metadata accessor for WeatherDataOverrides(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v75, 1, v76))
          {
            v77 = type metadata accessor for Date(0);
            if (!_s7Weather24LocationCompositionStateOwet_0(v75, 1, v77))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v75, v77);
            v78 = v75 + *(int *)(v76 + 20);
            if (!_s7Weather24LocationCompositionStateOwet_0(v78, 1, v77))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 8))(v78, v77);
          }
          v117 = v55;
          v79 = (char *)a1 + *(int *)(v55 + 64);
          v80 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v79, v80);
          v81 = (int *)type metadata accessor for PreprocessedWeatherData(0);
          swift_bridgeObjectRelease(*(_QWORD *)&v79[v81[5]]);
          v82 = &v79[v81[6]];
          swift_bridgeObjectRelease(*((_QWORD *)v82 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v82 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v82 + 5));
          v83 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
          v84 = (uint64_t)&v82[*(int *)(v83 + 28)];
          v85 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v84, 1, v85))
          {
            swift_bridgeObjectRelease(*(_QWORD *)(v84 + 8));
            v86 = v84 + *(int *)(v85 + 20);
            v87 = type metadata accessor for TemperatureScaleConfiguration(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v86, v87);
            v88 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
            swift_bridgeObjectRelease(*(_QWORD *)(v86 + *(int *)(v88 + 32) + 8));
          }
          swift_bridgeObjectRelease(*(_QWORD *)&v82[*(int *)(v83 + 32) + 8]);
          v89 = &v79[v81[7]];
          swift_bridgeObjectRelease(*(_QWORD *)v89);
          v90 = (uint64_t)&v89[*(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20)];
          v91 = type metadata accessor for WeatherDescription(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v90, 1, v91))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(v90, v91);
          v92 = &v79[v81[8]];
          swift_bridgeObjectRelease(*((_QWORD *)v92 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v92 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v92 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v92 + 7));
          v93 = &v92[*(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32)];
          v94 = type metadata accessor for Date(0);
          v116 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 8);
          v116(v93, v94);
          v95 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
          v96 = (uint64_t)&v93[*(int *)(v95 + 20)];
          v97 = type metadata accessor for Elevation(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v96, 1, v97))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v96, v97);
          v98 = (uint64_t)&v93[*(int *)(v95 + 24)];
          v99 = type metadata accessor for BackgroundMoonData(0);
          if (!_s7Weather24LocationCompositionStateOwet_0(v98, 1, v99))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 8))(v98, v99);
          v100 = &v79[v81[9]];
          swift_bridgeObjectRelease(*((_QWORD *)v100 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v100 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v100 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v100 + 7));
          swift_bridgeObjectRelease(*((_QWORD *)v100 + 9));
          swift_bridgeObjectRelease(*((_QWORD *)v100 + 11));
          v101 = swift_bridgeObjectRelease(*((_QWORD *)v100 + 13));
          v102 = &v79[v81[10]];
          (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v91 - 8) + 8))(v102, v91, v101);
          v103 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
          swift_bridgeObjectRelease(*(_QWORD *)&v102[*(int *)(v103 + 20) + 8]);
          v104 = &v79[v81[11]];
          swift_bridgeObjectRelease(*((_QWORD *)v104 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v104 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v104 + 5));
          v105 = &v79[v81[12]];
          v106 = type metadata accessor for PressureTrend(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v105, v106);
          v107 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
          swift_bridgeObjectRelease(*(_QWORD *)&v105[v107[5] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v105[v107[6] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v105[v107[7] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v105[v107[9] + 8]);
          v108 = &v79[v81[13]];
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 7));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 9));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 11));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 13));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 15));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 17));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 19));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 21));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 23));
          swift_bridgeObjectRelease(*((_QWORD *)v108 + 25));
          v109 = swift_bridgeObjectRelease(*((_QWORD *)v108 + 28));
          v110 = &v79[v81[14]];
          ((void (*)(char *, uint64_t, __n128))v116)(v110, v94, v109);
          v111 = (uint64_t)&v110[*(int *)(v95 + 20)];
          if (!_s7Weather24LocationCompositionStateOwet_0(v111, 1, v97))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v111, v97);
          v112 = (uint64_t)&v110[*(int *)(v95 + 24)];
          if (!_s7Weather24LocationCompositionStateOwet_0(v112, 1, v99))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 8))(v112, v99);
          v113 = &v79[v81[15]];
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 1));
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 3));
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 5));
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 7));
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 9));
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 11));
          swift_bridgeObjectRelease(*((_QWORD *)v113 + 13));
          v68 = *(int *)(v117 + 80);
          goto LABEL_127;
        case 5u:
          swift_bridgeObjectRelease(a1[1]);
          v68 = *(int *)(sub_1000BA294(&qword_100BCB620) + 48);
LABEL_127:
          v34 = (_QWORD *)((char *)a1 + v68);
          v114 = type metadata accessor for NewsDataModel(0);
          if (swift_getEnumCaseMultiPayload(v34, v114) == 1)
          {
            v24 = *v34;
            goto LABEL_79;
          }
          v35 = type metadata accessor for News(0);
          break;
        case 6u:
          swift_bridgeObjectRelease(a1[1]);
          v34 = (_QWORD *)((char *)a1 + *(int *)(sub_1000BA294(&qword_100BCB628) + 48));
          v35 = type metadata accessor for AvailableDataSets(0);
          goto LABEL_130;
        case 8u:
          swift_bridgeObjectRelease(a1[1]);
          v34 = (_QWORD *)((char *)a1 + *(int *)(sub_1000BA294(&qword_100BCB618) + 48));
          v35 = type metadata accessor for WeatherStatisticsModel(0);
          goto LABEL_130;
        default:
          goto LABEL_131;
      }
      goto LABEL_130;
    case 0xAu:
      v25 = type metadata accessor for DebugAction(0);
      v26 = swift_getEnumCaseMultiPayload(a1, v25);
      if (v26 == 1)
        goto LABEL_81;
      if (v26)
        goto LABEL_131;
      v27 = type metadata accessor for WeatherCondition(0);
      if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)a1, 1, v27))
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
      v24 = *(_QWORD *)((char *)a1 + *(int *)(sub_1000BA294(&qword_100BD0A98) + 48) + 8);
      goto LABEL_79;
    case 0xBu:
      v28 = type metadata accessor for ConditionDetailViewAction(0);
      v29 = swift_getEnumCaseMultiPayload(a1, v28);
      if (v29 == 2)
      {
        swift_bridgeObjectRelease(a1[1]);
        v40 = (int *)type metadata accessor for DetailChartSelection(0);
        v41 = (char *)a1 + v40[5];
        v42 = type metadata accessor for Date(0);
        v43 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8);
        v43(v41, v42);
        v43((char *)a1 + v40[6], v42);
        v43((char *)a1 + v40[7], v42);
      }
      else
      {
        if (v29 == 1)
        {
LABEL_48:
          v5 = type metadata accessor for DetailCondition(0);
        }
        else
        {
LABEL_43:
          if (v29)
            goto LABEL_131;
LABEL_44:
          v5 = type metadata accessor for Date(0);
        }
LABEL_82:
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      }
LABEL_131:
      swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
      *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24))).n128_u64[0];
      return result;
    case 0xDu:
      v30 = type metadata accessor for MoonDetailViewAction(0);
      v31 = swift_getEnumCaseMultiPayload(a1, v30);
      if (v31 == 1)
        goto LABEL_44;
      if (v31)
        goto LABEL_131;
      v32 = type metadata accessor for MoonDetailSelectedDate(0);
      v29 = swift_getEnumCaseMultiPayload(a1, v32);
      if (v29 != 2 && v29 != 1)
        goto LABEL_43;
      goto LABEL_44;
    case 0xEu:
      v33 = type metadata accessor for AveragesDetailViewAction(0);
      if (swift_getEnumCaseMultiPayload(a1, v33) != 1)
        goto LABEL_131;
      v34 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for DetailHeroChartLollipopPosition(0) + 20));
      v35 = type metadata accessor for Date(0);
      goto LABEL_130;
    case 0x10u:
LABEL_67:
      v24 = a1[1];
      goto LABEL_79;
    case 0x11u:
      v36 = type metadata accessor for PerformanceTestAction(0);
      switch(swift_getEnumCaseMultiPayload(a1, v36))
      {
        case 0u:
          goto LABEL_48;
        case 2u:
          goto LABEL_81;
        case 3u:
          v34 = (_QWORD *)((char *)a1 + *(int *)(sub_1000BA294((uint64_t *)&unk_100BFFA70) + 48));
          v35 = type metadata accessor for WeatherMapOverlayKind(0);
          goto LABEL_130;
        case 4u:
          v5 = type metadata accessor for WeatherCondition(0);
          goto LABEL_82;
        default:
          goto LABEL_131;
      }
      goto LABEL_131;
    default:
      goto LABEL_131;
  }
}

uint64_t sub_1000E6038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationPreviewViewState(0);
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, v4, sub_10072638C);
}

uint64_t type metadata accessor for LocationPreviewViewState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BDBBD8, (uint64_t)&nominal type descriptor for LocationPreviewViewState);
}

_QWORD *sub_1000E6088(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1000E611C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10011EDFC(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10011EDFC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_1000E611C(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_1000E628C(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

_QWORD *sub_1000E628C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_1000BA294(&qword_100BD79A0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

void sub_1000E62F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  _QWORD aBlock[5];
  uint64_t v64;
  _BYTE v65[72];
  _BYTE __src[72];
  char v67[8];

  v62 = a7;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v58 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v60 - 8);
  v17 = __chkstk_darwin(v60);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v54 = (char *)&v49 - v20;
  a2 += 16;
  swift_beginAccess(a2, v67, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    v52 = v14;
    v23 = COERCE_DOUBLE(a3(a1));
    v25 = v24;
    v61 = a8;
    sub_100037768(a1, (uint64_t)__src, &qword_100BC43C0);
    v26 = v61;
    sub_100037768((uint64_t)__src, (uint64_t)v65, &qword_100BC43C0);
    v27 = (_QWORD *)swift_allocObject(&unk_100B5E500, 128, 7);
    v28 = a5;
    v27[2] = a5;
    v27[3] = a6;
    v29 = a6;
    memcpy(v27 + 4, __src, 0x48uLL);
    v30 = v62;
    v27[13] = v22;
    v27[14] = v30;
    v27[15] = v26;
    if ((v25 & 1) != 0)
    {
      if (v23 == 0.0)
      {
        swift_retain_n(v26, 2);
        swift_retain();
        swift_retain();
        goto LABEL_12;
      }
      v31 = qword_100BC2820;
      swift_retain_n(v26, 2);
      swift_retain_n(v29, 2);
      swift_retain();
      if (v31 != -1)
        swift_once(&qword_100BC2820, sub_10091A684);
      sub_10017EBE0(v22, (uint64_t)sub_10019DBD0, (uint64_t)v27);
    }
    else
    {
      if (v23 != 0.0)
      {
        sub_10009FFE0();
        swift_retain_n(v26, 2);
        v51 = a6;
        swift_retain_n(a6, 2);
        v32 = swift_retain_n(v22, 2);
        v50 = static OS_dispatch_queue.main.getter(v32);
        static DispatchTime.now()(v50);
        v33 = v54;
        + infix(_:_:)(v19);
        v62 = *(void (**)(uint64_t))(v53 + 8);
        ((void (*)(char *, uint64_t))v62)(v19, v60);
        v34 = swift_allocObject(&unk_100B5E528, 32, 7);
        *(_QWORD *)(v34 + 16) = sub_10019DBD0;
        *(_QWORD *)(v34 + 24) = v27;
        aBlock[4] = sub_10019EACC;
        v64 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100121D84;
        aBlock[3] = &unk_100B5E540;
        v35 = _Block_copy(aBlock);
        v36 = v64;
        swift_retain();
        v37 = swift_release(v36);
        v38 = (_QWORD *)v22;
        v39 = v55;
        static DispatchQoS.unspecified.getter(v37);
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_10000F1C8((unint64_t *)&qword_100BFFA20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v41 = v40;
        v42 = sub_1000BA294(&qword_100BD4F10);
        sub_10003D2DC((unint64_t *)&qword_100BFFA30, &qword_100BD4F10);
        v43 = v58;
        v44 = v52;
        v45 = v41;
        v26 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v46, v52, v45);
        v47 = (void *)v50;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v39, v43, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
        v48 = v39;
        v22 = (uint64_t)v38;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v57);
        ((void (*)(char *, uint64_t))v62)(v33, v60);
        swift_release(v51);
        swift_release(v27);
        v27 = v38;
        goto LABEL_12;
      }
      swift_retain_n(v26, 2);
      swift_retain_n(a6, 2);
      swift_retain();
      sub_100196128(v28, a6, (uint64_t)v65, v22, v30, v26);
    }
    swift_release(v29);
LABEL_12:
    swift_release(v27);
    sub_100021A14((uint64_t)v65, &qword_100BC43C0);
    swift_release(v26);
    swift_release(v22);
  }
}

uint64_t type metadata accessor for ActiveLocationInput(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BCE5C8, (uint64_t)&nominal type descriptor for ActiveLocationInput);
}

uint64_t type metadata accessor for LocationInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100C05700;
  if (!qword_100C05700)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationInput);
  return result;
}

uint64_t sub_1000E68C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024AD78);
}

uint64_t type metadata accessor for LocationViewerInput(uint64_t a1)
{
  uint64_t result;

  result = qword_100BC33E0;
  if (!qword_100BC33E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewerInput);
  return result;
}

uint64_t sub_1000E690C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  id v48;
  Swift::String v49;
  Swift::String_optional v50;
  NSBundle v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  Swift::Int v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[10];
  Swift::String v116;

  LODWORD(v111) = a7;
  v100 = a5;
  v99 = a4;
  v94 = a3;
  v114 = a1;
  v112 = a12;
  v110 = a11;
  v96 = a14;
  v95 = a13;
  v106 = type metadata accessor for WeatherFormatPlaceholder(0);
  v113 = *(_QWORD *)(v106 - 8);
  sub_10009D98C();
  __chkstk_darwin(v20);
  sub_100088FDC();
  v105 = v21;
  v104 = type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle(0);
  v98 = *(void (**)(uint64_t))(v104 - 8);
  sub_10009D98C();
  __chkstk_darwin(v22);
  sub_10009883C();
  v103 = v23 - v24;
  __chkstk_darwin(v25);
  v26 = sub_100098778();
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a9 = 0;
  v30 = (int *)sub_10009C160();
  v31 = a9 + v30[13];
  v108 = v27;
  v109 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v31, a1, v26);
  v32 = a9 + v30[14];
  v33 = sub_100099928();
  v101 = *(_QWORD *)(v33 - 8);
  v34 = *(void (**)(uint64_t, uint64_t))(v101 + 16);
  v35 = v32;
  v36 = a2;
  v102 = v33;
  v34(v35, a2);
  v37 = v99;
  *(_QWORD *)(a9 + 8) = v94;
  *(_QWORD *)(a9 + 16) = v37;
  v38 = v100;
  if (!a6)
    v38 = 0;
  v39 = 0xE000000000000000;
  if (a6)
    v39 = a6;
  *(_QWORD *)(a9 + 24) = v38;
  *(_QWORD *)(a9 + 32) = v39;
  *(double *)(a9 + 40) = a10;
  *(_BYTE *)(a9 + 48) = v111;
  v40 = a9 + v30[9];
  v41 = sub_10009BFE0();
  v99 = *(_QWORD *)(v41 - 8);
  v42 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 16);
  v111 = a8;
  v100 = v41;
  v43 = v42(v40, a8);
  *(_QWORD *)(a9 + v30[16]) = v95;
  v44 = Date.init()(v43);
  v107 = v29;
  v97 = v36;
  if ((v96 & 1) != 0
    && (Date.timeIntervalSinceReferenceDate.getter(v44), v45 = sub_10011E628(), a10 - v46 <= 0.0)
    && (Date.timeIntervalSinceReferenceDate.getter(v45), sub_10011E628(), a10 - v47 > -3600.0))
  {
    v48 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v116._object = (void *)0x8000000100A09CC0;
    sub_1000C29F4();
    v116._countAndFlagsBits = 0xD000000000000035;
    v53 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, v51, v52, v116);

    *(Swift::String *)(a9 + v30[11]) = v53;
    *(Swift::String *)(a9 + v30[12]) = v53;
    *(_BYTE *)(a9 + v30[15]) = 1;
    v54 = sub_100094EDC();
    static WeatherFormatStyle<>.weather.getter(v54);
    sub_10009DB80();
    v55 = sub_1000D9F50();
    sub_1000D06E8(v55, enum case for WeatherFormatPlaceholder.none(_:));
    v56 = type metadata accessor for UnitManager(0);
    v57 = static UnitManager.standard.getter(v56);
    sub_1000BA294(&qword_100BC4E68);
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v58 = sub_10011DB78();
    v65 = Measurement.formatted<A>(_:placeholder:unitManager:)(v58, v59, v60, v61, v62, v63, v64);
    v67 = v66;
    v68 = v110;
  }
  else
  {
    v69 = Date.formattedHours(timeZone:forAccessibility:)(v36, 0);
    v70 = (uint64_t *)(a9 + v30[11]);
    *v70 = v69;
    v70[1] = v71;
    v72 = Date.formattedHours(timeZone:forAccessibility:)(v36, 1);
    v73 = (uint64_t *)(a9 + v30[12]);
    *v73 = v72;
    v73[1] = v74;
    *(_BYTE *)(a9 + v30[15]) = 0;
    static WeatherFormatStyle<>.weather.getter(v72);
    sub_10009DB80();
    v75 = sub_1000D9F50();
    sub_1000D06E8(v75, enum case for WeatherFormatPlaceholder.none(_:));
    v76 = type metadata accessor for UnitManager(0);
    v57 = static UnitManager.standard.getter(v76);
    sub_1000BA294(&qword_100BC4E68);
    sub_100086DA4((unint64_t *)&qword_100BCB9D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle, (uint64_t)&protocol conformance descriptor for NSUnitTemperature.BaseWeatherFormatStyle);
    v77 = sub_10011DB78();
    v68 = v110;
    v65 = Measurement.formatted<A>(_:placeholder:unitManager:)(v77, v78, v79, v80, v81, v82, v83);
    v67 = v84;
  }
  swift_release(v57);
  (*(void (**)(uint64_t, unint64_t))(v113 + 8))(a1, a6);
  v85 = sub_1000DC11C();
  v98(v85);
  v86 = (uint64_t *)(a9 + v30[10]);
  *v86 = v65;
  v86[1] = v67;
  Hasher.init(_seed:)(v115);
  sub_1000D0F30((uint64_t)v115);
  v87 = Hasher._finalize()();
  v88 = sub_1000BA294(&qword_100BC4E68);
  v89 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8);
  v89(v112, v88);
  v89(v68, v88);
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v111, v100);
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v97, v102);
  v90 = v109;
  v91 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
  v91(v114, v109);
  result = ((uint64_t (*)(char *, uint64_t))v91)(v107, v90);
  *(_QWORD *)a9 = v87;
  return result;
}

uint64_t sub_1000E6E70()
{
  return type metadata accessor for TimeZone(0);
}

uint64_t sub_1000E6E9C()
{
  uint64_t v0;

  return EnvironmentValues.subscript.getter(v0, v0);
}

uint64_t sub_1000E6EA8()
{
  return 2;
}

BOOL sub_1000E6EC8()
{
  NSObject *v0;
  os_log_type_t v1;

  return os_log_type_enabled(v0, v1);
}

uint64_t sub_1000E6ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000E6EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_storeEnumTagMultiPayload(v2, a2, 12);
}

uint64_t sub_1000E6EEC()
{
  uint64_t v0;

  return String.init<A>(describing:)(v0);
}

uint64_t sub_1000E6EF4()
{
  return type metadata accessor for Elevation(0);
}

uint64_t sub_1000E6EFC(uint64_t a1)
{
  return NSNotificationCenter.publisher(for:object:)(a1, 0);
}

uint64_t sub_1000E6F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_1000E6F14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037794(a1, a2, v2);
}

uint64_t sub_1000E6F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 136) = v1;
  *(_QWORD *)(v4 - 128) = v2;
  return dispatch thunk of Collection.endIndex.getter(v3, a1);
}

void *sub_1000E6F3C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x79uLL);
}

uint64_t sub_1000E6F44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E6F58()
{
  return type metadata accessor for LocationPreviewViewContentModel(0);
}

uint64_t sub_1000E6F60()
{
  return 0;
}

void sub_1000E6F74(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_100037768(*(_QWORD *)(a2 - 256), a1, v2);
}

uint64_t sub_1000E6F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _ConditionalContent<>.init(storage:)(v2, *(_QWORD *)(v3 - 272), *(_QWORD *)(v3 - 248), v1, a1);
}

uint64_t sub_1000E6FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeConformance2(v2 - 144, a2, 1);
}

uint64_t sub_1000E6FAC@<X0>(unint64_t a1@<X8>, __n128 a2@<Q0>)
{
  __n128 *v2;
  uint64_t v3;

  *v2 = a2;
  v2[1].n128_u64[0] = a1;
  return swift_endAccess(v3 - 168);
}

void sub_1000E6FBC()
{
  type metadata accessor for CGRect(0);
}

void sub_1000E6FC8(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10003D310(a1, a2, v2);
}

uint64_t sub_1000E6FD0()
{
  return type metadata accessor for NewsArticleComponentViewModel(0);
}

uint64_t sub_1000E6FE0()
{
  return type metadata accessor for PrecipitationAmountsEditorView(0);
}

uint64_t sub_1000E7004()
{
  return type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
}

void sub_1000E7014(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000E7020()
{
  return type metadata accessor for DailyForecastComponentViewModel.DayForecastViewModel(0);
}

uint64_t sub_1000E7028()
{
  uint64_t v0;

  return static Tips.RuleBuilder.buildExpression(_:)(v0);
}

uint64_t sub_1000E7030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 200))(v2, v1, v0);
}

uint64_t sub_1000E7044()
{
  uint64_t v0;

  return v0;
}

double sub_1000E7054@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(double *)(v1 + a1);
}

uint64_t sub_1000E7064()
{
  return type metadata accessor for DebugSevereNotificationViewController(0);
}

uint64_t sub_1000E706C()
{
  return ProxyContainer.public.getter();
}

uint64_t sub_1000E7074()
{
  uint64_t v0;

  return sub_10005EA64(v0);
}

uint64_t sub_1000E707C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000E708C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000E70A0()
{
  uint64_t v0;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 272), 1, 1, *(_QWORD *)(v0 - 264));
}

uint64_t sub_1000E70C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 208) + 104))(v2, a2, v3);
}

void sub_1000E70D4(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  sub_1004B7C08(a1, a2, 6);
}

uint64_t sub_1000E70DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000E70F8()
{
  return 7959140;
}

void sub_1000E711C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_100095B78(v2 + a2, a1, v3);
}

uint64_t sub_1000E7128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;

  return a15(v15, v16);
}

uint64_t sub_1000E713C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1000E7150()
{
  uint64_t v0;

  return Debouncer.init(interval:queue:)(v0, 1.0);
}

void sub_1000E7164(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100037794(a1, a2, v2);
}

uint64_t sub_1000E716C()
{
  return type metadata accessor for ViewAction(0);
}

uint64_t sub_1000E7198@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(v2 - 96) + a2) = result & 1;
  return result;
}

uint64_t sub_1000E71A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t sub_1000E71C0()
{
  return 5849412;
}

uint64_t sub_1000E71F8()
{
  return type metadata accessor for MapOverlayData(0);
}

uint64_t sub_1000E7200()
{
  return type metadata accessor for PrecipitationAveragesHeroChartViewModel(0);
}

uint64_t sub_1000E7208()
{
  return type metadata accessor for DetailChartViewModel(0);
}

uint64_t sub_1000E7210()
{
  uint64_t v0;

  return v0 + *(int *)(type metadata accessor for ComparisonCapsuleViewModel.Row(0) + 20);
}

uint64_t sub_1000E722C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return static Forecast.== infix(_:_:)(v1, v2, v3, v4, v5, a1);
}

uint64_t sub_1000E7248()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 168))();
}

uint64_t sub_1000E7250()
{
  return sub_1001554F8();
}

uint64_t sub_1000E725C()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_100605B40(0, v0, v1);
}

uint64_t sub_1000E726C(uint64_t a1)
{
  return static FixedSizeTypeBinaryCodable.read(from:)(a1);
}

char *sub_1000E7278(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  char *v3;

  v2 = *(_OWORD **)(v1 - 120);
  v3 = (char *)v2 + *(int *)(a1 + 48);
  *v2 = 0u;
  v2[1] = 0u;
  return v3;
}

uint64_t sub_1000E7298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static Measurement.== infix<A, B>(_:_:)(a1, a2, v2, v2, v2);
}

void sub_1000E72A8()
{
  sub_10017BA7C();
}

uint64_t sub_1000E72B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

uint64_t sub_1000E72C0(uint64_t a1, uint64_t a2)
{
  return sub_100628C38(a1, a2);
}

uint64_t sub_1000E72E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _ConditionalContent<>.init(storage:)(v2, *(_QWORD *)(v3 - 104), *(_QWORD *)(v3 - 88), v1, a1);
}

double sub_1000E7300@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(v3 - 288) = a2;
  *(_QWORD *)(v3 - 280) = v2;
  *(_BYTE *)(v3 - 272) = 1;
  *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  return result;
}

void sub_1000E7320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  sub_100149094(0, 0, 1, 0, 0, 0xE000000000000000, 0, 0, a9, a10, a11, a12, a13);
}

uint64_t sub_1000E7344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5)
{
  Swift::String v5;
  Swift::String v7;

  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0xD000000000000031;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v5, v7)._countAndFlagsBits;
}

uint64_t sub_1000E7370()
{
  return 0x6269737365636361;
}

uint64_t sub_1000E738C()
{
  uint64_t v0;

  return FixedSizeTypeBinaryCodable.write(to:)(v0);
}

id sub_1000E73B4(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000E73C0()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_1000E73D0()
{
  return type metadata accessor for LocationsState(0);
}

uint64_t sub_1000E73D8()
{
  return type metadata accessor for SunriseSunsetViewModel(0);
}

uint64_t sub_1000E73E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + a2) = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000E73F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  return type metadata accessor for DisplayMetrics(0);
}

uint64_t sub_1000E7404()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000E7410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1000E741C()
{
  return type metadata accessor for SunEvents(0);
}

uint64_t sub_1000E7424(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1000E7434(uint64_t a1)
{
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(a1, v1);
}

uint64_t sub_1000E743C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

uint64_t sub_1000E7450()
{
  return 0;
}

uint64_t sub_1000E745C()
{
  return 0;
}

uint64_t sub_1000E7478()
{
  return 0;
}

uint64_t sub_1000E748C()
{
  return type metadata accessor for CoordinateActivityHandler();
}

uint64_t sub_1000E7498(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1, v1);
}

uint64_t sub_1000E74A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static Measurement.== infix<A, B>(_:_:)(a1, a2, v2, v2, v2);
}

uint64_t sub_1000E74B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getOpaqueTypeMetadata2(a1, a2, v2, 0);
}

uint64_t sub_1000E74C4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

double sub_1000E74DC()
{
  unsigned __int8 v0;

  return (double)((2 * v0) | 1);
}

uint64_t sub_1000E74F4()
{
  return type metadata accessor for WeatherNetworkActivity(0);
}

uint64_t sub_1000E74FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000E7508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

id sub_1000E7514(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 1080));
}

uint64_t sub_1000E7524()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1000E7530(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  return sub_10006BD20(a1, v1);
}

uint64_t sub_1000E7538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return _ConditionalContent<>.init(storage:)(v6, a2, v5, a4, a5);
}

void sub_1000E7548()
{
  sub_1000FB8D0();
}

void sub_1000E755C(uint64_t a1@<X8>, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t v6;

  sub_100520DF8(2u, 0, 0, 2, 2, 2, v6, 2, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000E7584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000E758C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100033A34(a1, a2, v2);
}

uint64_t sub_1000E7594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000E75A4()
{
  return 0x65736E6F6F4DLL;
}

double sub_1000E75C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10035D5AC(a1, a2, a3, v3);
}

uint64_t sub_1000E75C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v1, v2, a1);
}

unint64_t sub_1000E75EC()
{
  uint64_t v0;

  return sub_1004907AC(*(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 88));
}

uint64_t sub_1000E75F8()
{
  return type metadata accessor for MapComponent(0);
}

uint64_t sub_1000E7600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return Measurement.formatted<A>(_:placeholder:unitManager:)(a1, a2, a3, a4, a5, v5, *(_QWORD *)(v6 - 176));
}

uint64_t sub_1000E760C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000E7614()
{
  uint64_t v0;
  uint64_t v1;

  return Image.init(systemName:)(*(_QWORD *)(v1 - 320), v0);
}

void sub_1000E7624(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_100021A14(*(_QWORD *)(a1 - 256), v1);
}

uint64_t sub_1000E7630()
{
  return static HorizontalAlignment.center.getter();
}

_QWORD *sub_1000E7638()
{
  uint64_t v0;

  return sub_1000DB418((_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224));
}

uint64_t sub_1000E7644()
{
  return type metadata accessor for NextHourPrecipitationDetailViewModel.Model(0);
}

uint64_t sub_1000E764C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1, 0);
}

uint64_t sub_1000E766C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

double sub_1000E7678()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void *sub_1000E7688()
{
  void *v0;
  uint64_t v1;
  const void *v2;

  return memcpy(v0, v2, *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64));
}

uint64_t sub_1000E769C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_release(a13);
}

uint64_t sub_1000E76A4(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of NotificationsOptInManagerType.didEnterSettingsApp()(a1, v1);
}

uint64_t sub_1000E76B0()
{
  return type metadata accessor for DetailChartCondition(0);
}

uint64_t sub_1000E76C0()
{
  return WeatherDataModel.dailyForecast.getter();
}

_QWORD *sub_1000E76E8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DB418((_QWORD *)(v1 + *(int *)(a1 + 56)), *(_QWORD *)(v1 + *(int *)(a1 + 56) + 24));
}

uint64_t sub_1000E76F8()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 136, 0);
}

uint64_t sub_1000E7704()
{
  return 0;
}

uint64_t sub_1000E771C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E7730()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100316C14(v0, v1 - 184);
}

unint64_t sub_1000E773C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 14;
  return sub_1003B852C();
}

uint64_t sub_1000E7748()
{
  return 0;
}

double sub_1000E7754()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56)).n128_u64[0];
  return result;
}

uint64_t sub_1000E775C()
{
  return type metadata accessor for MapsConfiguration.OverlayKind(0);
}

uint64_t sub_1000E7764()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 0, 1, v1);
}

void sub_1000E778C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0;
  *(_QWORD *)(v0 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
}

uint64_t sub_1000E77A0()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000E77B0()
{
  uint64_t v0;

  return Dictionary.init(dictionaryLiteral:)(v0);
}

uint64_t sub_1000E77B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_1000E77C8()
{
  return type metadata accessor for DetailChartExtrema(0);
}

unint64_t sub_1000E77D0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_1005606B4();
}

uint64_t sub_1000E77DC(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 5);
}

void sub_1000E77E8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1000A15B4(a1, v2, v1);
}

uint64_t sub_1000E77F4()
{
  uint64_t v0;
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(v0, 1, 1, v1);
}

uint64_t sub_1000E7814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000E7854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000E7864(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000E7878(uint64_t a1)
{
  return swift_allocObject(a1, 90, 7);
}

uint64_t sub_1000E7884(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 224), 1, 1, a1);
  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v1 - 208), 1, 1, *(_QWORD *)(v1 - 280));
}

void sub_1000E78DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000787D4(v3, v0 + *(int *)(v2 + 48), v1);
}

uint64_t sub_1000E78F0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000E78FC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 248));
}

void sub_1000E7904(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_10000AB54(a1, v2, v1);
}

uint64_t sub_1000E7910(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 4);
}

void sub_1000E791C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  sub_100605D80();
}

uint64_t sub_1000E7934()
{
  return type metadata accessor for ListLocationRowPrimaryText(0);
}

uint64_t sub_1000E793C()
{
  return type metadata accessor for ScrubberView(0);
}

void sub_1000E7944()
{
  uint64_t v0;

  sub_10006BDC8(v0);
}

void sub_1000E7950()
{
  sub_10009ADAC();
}

uint64_t sub_1000E7978@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000E79B0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000E79B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  Swift::String v18;
  void *object;
  uint64_t v21[2];
  _QWORD v22[2];

  sub_10011E488();
  sub_1000B42B0();
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100098778();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100094EC4();
  type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  sub_1000B42B0();
  __chkstk_darwin(v7);
  sub_1000C0F18(v8, v9, v21[0]);
  v10 = sub_1000BCF4C();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_1000B2F40(v0, (uint64_t)v4);
      v22[0] = 0x2D72756F68;
      v22[1] = 0xE500000000000000;
      v21[1] = *v4;
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int);
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      v17 = (uint64_t)v4;
      v16 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
      goto LABEL_7;
    }
    v13 = (unsigned __int16)sub_10011E53C() | 0x2D7465736E0000;
    v14 = 0xE700000000000000;
  }
  else
  {
    v13 = (unsigned __int16)sub_10011E53C() | 0x2D657369726E0000;
    v14 = 0xE800000000000000;
  }
  String.append(_:)(*(Swift::String *)&v13);
  v15 = sub_1000BD0D0();
  Date.timeIntervalSinceReferenceDate.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  Double.write<A>(to:)(v22, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v16 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem;
  v17 = v0;
LABEL_7:
  sub_1000979AC(v17, v16);
  return sub_1000B3154();
}

unint64_t sub_1000E7B84()
{
  uint64_t v0;

  return sub_1000991C8(v0);
}

uint64_t sub_1000E7BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
  return type metadata accessor for SearchViewState(0);
}

uint64_t sub_1000E7BB8()
{
  uint64_t v0;

  return v0;
}

void sub_1000E7BC4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000F9DA4(*(_QWORD *)(v3 + 320), *(_QWORD *)(v3 + 328), a3);
}

uint64_t sub_1000E7BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 152) = a1;
  *(_QWORD *)(v4 - 144) = a2;
  *(_QWORD *)(v4 - 192) = a3;
  return 0;
}

uint64_t sub_1000E7BE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E7BF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1000CE1C8(a1, a2, (uint64_t *)(v2 - 232));
}

uint64_t sub_1000E7C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return DetailChartDataElement.init(date:value:secondValue:thirdValue:valueLabel:dateLabel:accessibilityDateString:accessibilityValueDescription:color:textColor:)(a1, a2, a3, a4, a5, a6, 0, 0xE000000000000000);
}

uint64_t sub_1000E7C2C()
{
  return type metadata accessor for IndexPath(0);
}

uint64_t sub_1000E7C34()
{
  return type metadata accessor for ConditionDetailInnerView(0);
}

uint64_t sub_1000E7C40()
{
  return type metadata accessor for LayoutDirection(0);
}

uint64_t sub_1000E7C48()
{
  return Location.Identifier.Kind.rawValue.getter(1);
}

uint64_t sub_1000E7C58(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, *(_QWORD *)(v1 - 144));
}

uint64_t sub_1000E7C68()
{
  uint64_t v0;

  return v0;
}

void sub_1000E7C7C(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  sub_1004D4890(a1, a2, a3, *(_QWORD *)(v3 - 224));
}

uint64_t sub_1000E7C88(uint64_t result)
{
  *(_QWORD *)(result + 16) = 1752392040;
  return result;
}

unint64_t sub_1000E7C98()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 13;
  return sub_1004FBA38();
}

uint64_t sub_1000E7CA4(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

_QWORD *sub_1000E7CAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 - 288);
  *v2 = v0;
  return v2;
}

uint64_t sub_1000E7CC0()
{
  return type metadata accessor for SavedLocation(0);
}

uint64_t sub_1000E7CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

uint64_t sub_1000E7CEC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_1000E7D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.write(to:)(a1, a2, a3);
}

uint64_t sub_1000E7D10()
{
  return 0;
}

uint64_t sub_1000E7D2C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

double sub_1000E7D48()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000E7D58()
{
  uint64_t v0;
  double v1;

  return Color.init(_:white:opacity:)(v0, 1.0, v1);
}

void sub_1000E7D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_100095B78(v1, a1, v2);
}

uint64_t sub_1000E7D78()
{
  uint64_t v0;

  return swift_endAccess(v0 + 1056);
}

uint64_t sub_1000E7D94()
{
  uint64_t v0;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 240), 1, 1, *(_QWORD *)(v0 - 808));
}

uint64_t sub_1000E7DB0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E7DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;

  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (v9 & ~v8) + v10;
  if (v11 <= v10)
    v11 = *(_QWORD *)(v7 + 64);
  if (v11 <= 0x20)
    v12 = 32;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v5);
    v16 = 2;
  }
  else
  {
    if (v13 != 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 24);
      v18 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 24) = v17;
      *(_BYTE *)(a1 + v12) = 0;
      swift_retain(v18);
      swift_retain(v17);
      return a1;
    }
    v15 = ~v8;
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v9 + a1) & v15, (v9 + a2) & v15, v5);
    v16 = 1;
  }
  *(_BYTE *)(a1 + v12) = v16;
  return a1;
}

double sub_1000E7F68(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  __n128 v12;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[14], v5);
  v7 = (_QWORD *)(a1 + a2[16]);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[2]);
  swift_bridgeObjectRelease(v7[3]);
  v8 = a1 + a2[17];
  v9 = type metadata accessor for CurrentLocation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9)
    && swift_getEnumCaseMultiPayload(v8, v9) <= 2)
  {
    v10 = type metadata accessor for Location(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  v11 = (id *)(a1 + a2[19]);

  v12 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20]));
  ((void (*)(uint64_t, uint64_t, __n128))v6)(a1 + a2[21], v5, v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[22] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000E80B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024ADF4);
}

uint64_t sub_1000E80BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v62;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  v13 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v61 = v11;
  v62 = v10;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + a3[14], a2 + a3[14], v10);
  v16 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v18[2];
  v21 = v18[3];
  v17[2] = v20;
  v17[3] = v21;
  v22 = a3[17];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = type metadata accessor for CurrentLocation(0);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
    if (EnumCaseMultiPayload == 2)
    {
      v32 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v23, v24, v32);
      v29 = v23;
      v30 = v25;
      v31 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v33 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v23, v24, v33);
      v29 = v23;
      v30 = v25;
      v31 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        goto LABEL_11;
      }
      v28 = type metadata accessor for Location(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v23, v24, v28);
      v29 = v23;
      v30 = v25;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
LABEL_11:
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
    goto LABEL_12;
  }
  v26 = sub_1000BA294((uint64_t *)&unk_100C0D170);
  memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_12:
  v34 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v35 = (_QWORD *)(a1 + v34);
  v36 = a2 + v34;
  v37 = *(void **)v36;
  v38 = *(void **)(v36 + 8);
  *v35 = *(_QWORD *)v36;
  v35[1] = v38;
  v39 = *(void **)(v36 + 16);
  v40 = *(void **)(v36 + 24);
  v35[2] = v39;
  v35[3] = v40;
  v41 = *(void **)(v36 + 32);
  v42 = *(void **)(v36 + 40);
  v35[4] = v41;
  v35[5] = v42;
  v43 = a3[20];
  v44 = a3[21];
  v45 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v45;
  v60 = a1 + v44;
  v46 = a2 + v44;
  v47 = v37;
  v48 = v38;
  v49 = v39;
  v50 = v40;
  v51 = v41;
  v52 = v42;
  v53 = swift_bridgeObjectRetain(v45);
  v61(v60, v46, v62, v53);
  v54 = a3[22];
  v55 = a3[23];
  v56 = a1 + v54;
  v57 = a2 + v54;
  *(_BYTE *)v56 = *(_BYTE *)v57;
  v58 = *(_QWORD *)(v57 + 8);
  *(_QWORD *)(v56 + 8) = v58;
  *(_BYTE *)(a1 + v55) = *(_BYTE *)(a2 + v55);
  swift_bridgeObjectRetain(v58);
  return a1;
}

_BYTE *sub_1000E83AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t active;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, active))
  {
    v10 = sub_1000BA294(&qword_100BC5F40);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Location.Identifier(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v11))
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, v11);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v7, 0, 1, active);
  }
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)&a2[v12];
  *(_QWORD *)&a1[v12] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_1000E84CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008008E8);
}

double sub_1000E84D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t active;
  uint64_t v6;
  double result;

  v4 = a1 + *(int *)(a2 + 20);
  active = type metadata accessor for LocationViewerActiveLocationState(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, active))
  {
    v6 = type metadata accessor for Location.Identifier(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24))).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for LocationViewerActiveLocationState(uint64_t a1)
{
  uint64_t result;

  result = qword_100C0ADA8;
  if (!qword_100C0ADA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewerActiveLocationState);
  return result;
}

uint64_t sub_1000E8598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008008A8);
}

char *sub_1000E85A4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t active;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t, __n128);
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t, __n128);
  __n128 v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  __n128 v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t, __n128);
  __n128 v206;
  int *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  __n128 v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(char *, char *, uint64_t, __n128);
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 v280;
  char *v281;
  uint64_t v282;
  void (*v283)(char *, char *, uint64_t);
  uint64_t v284;
  char *v285;
  int *v286;
  int *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;

  v6 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    active = type metadata accessor for LocationViewerActiveLocationState(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(active - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for LocationModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for CurrentLocation(0);
  v288 = a2;
  v291 = a1;
  v286 = a3;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_1000BA294((uint64_t *)&unk_100C0D170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_15;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
  if (EnumCaseMultiPayload == 2)
  {
    v22 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v13, v14, v22);
    v19 = v13;
    v20 = v15;
    v21 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v23 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v13, v14, v23);
    v19 = v13;
    v20 = v15;
    v21 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_14;
    }
    v18 = type metadata accessor for Location(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v14, v18);
    v19 = v13;
    v20 = v15;
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v20, v21);
LABEL_14:
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v13, 0, 1, v15);
LABEL_15:
  v24 = (int *)type metadata accessor for LocationsState(0);
  v25 = v24[5];
  v26 = *(_QWORD *)&v14[v25];
  *(_QWORD *)&v13[v25] = v26;
  v27 = v24[6];
  v28 = *(_QWORD *)&v14[v27];
  *(_QWORD *)&v13[v27] = v28;
  v29 = v24[7];
  v30 = *(_QWORD *)&v14[v29];
  *(_QWORD *)&v13[v29] = v30;
  v31 = v24[8];
  v32 = *(_QWORD *)&v14[v31];
  *(_QWORD *)&v13[v31] = v32;
  v33 = v24[9];
  v34 = *(_QWORD *)&v14[v33];
  *(_QWORD *)&v13[v33] = v34;
  v35 = v24[10];
  v36 = *(_QWORD *)&v14[v35];
  *(_QWORD *)&v13[v35] = v36;
  v37 = v24[11];
  v38 = *(_QWORD *)&v14[v37];
  *(_QWORD *)&v13[v37] = v38;
  v39 = v24[12];
  v40 = &v13[v39];
  v41 = &v14[v39];
  v282 = *((_QWORD *)v41 + 1);
  v284 = *(_QWORD *)v41;
  v280 = v41[16];
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v38);
  sub_100163980(v284, v282, v280);
  *(_QWORD *)v40 = v284;
  *((_QWORD *)v40 + 1) = v282;
  v40[16] = v280;
  v42 = v24[13];
  v43 = *(_QWORD *)&v14[v42];
  *(_QWORD *)&v13[v42] = v43;
  v44 = v286[9];
  v45 = v291;
  v291[v286[8]] = v288[v286[8]];
  v291[v44] = v288[v44];
  v46 = v286[10];
  v47 = v286[11];
  v48 = &v291[v46];
  v49 = &v288[v46];
  *v48 = *v49;
  v50 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v48 + 1) = v50;
  v51 = &v291[v47];
  v52 = &v288[v47];
  v53 = type metadata accessor for Date(0);
  v54 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v53 - 8) + 16);
  swift_bridgeObjectRetain(v43);
  v55 = swift_bridgeObjectRetain(v50);
  v54(v51, v52, v53, v55);
  v56 = v286[13];
  v291[v286[12]] = v288[v286[12]];
  *(_QWORD *)&v291[v56] = *(_QWORD *)&v288[v56];
  v57 = v286[15];
  v291[v286[14]] = v288[v286[14]];
  v291[v57] = v288[v57];
  v58 = v286[16];
  v59 = v286[17];
  v60 = *(_QWORD *)&v288[v58];
  *(_QWORD *)&v291[v58] = v60;
  v291[v59] = v288[v59];
  v61 = v286[18];
  v62 = &v291[v61];
  v63 = &v288[v61];
  v64 = type metadata accessor for LocationWeatherDataState(0);
  swift_bridgeObjectRetain(v60);
  if (!_s7Weather24LocationCompositionStateOwet_0((uint64_t)v63, 1, v64))
  {
    v66 = swift_getEnumCaseMultiPayload(v63, v64);
    if (v66 == 2)
    {
      v70 = *((_QWORD *)v63 + 1);
      *(_QWORD *)v62 = *(_QWORD *)v63;
      *((_QWORD *)v62 + 1) = v70;
      swift_bridgeObjectRetain(v70);
      v71 = v62;
      v72 = v64;
      v73 = 2;
      goto LABEL_69;
    }
    if (v66 != 1)
    {
      if (v66)
      {
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
LABEL_70:
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v62, 0, 1, v64);
        return v45;
      }
      v67 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v63, v67) == 1)
      {
        v68 = *(_QWORD *)v63;
        *(_QWORD *)v62 = *(_QWORD *)v63;
        swift_bridgeObjectRetain(v68);
        v69 = 1;
      }
      else
      {
        v81 = type metadata accessor for News(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v62, v63, v81);
        v69 = 0;
      }
      swift_storeEnumTagMultiPayload(v62, v67, v69);
      v71 = v62;
      v72 = v64;
      v73 = 0;
LABEL_69:
      swift_storeEnumTagMultiPayload(v71, v72, v73);
      goto LABEL_70;
    }
    v283 = (void (*)(char *, char *, uint64_t))v54;
    v74 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v74;
    v75 = (int *)type metadata accessor for WeatherData(0);
    v76 = v75[5];
    v77 = &v62[v76];
    v78 = &v63[v76];
    v79 = type metadata accessor for Locale(0);
    swift_bridgeObjectRetain(v74);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v78, 1, v79))
    {
      v80 = sub_1000BA294(&qword_100BC3340);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v77, 0, 1, v79);
    }
    v82 = v75[6];
    v83 = &v62[v82];
    v84 = &v63[v82];
    v85 = type metadata accessor for WeatherDataModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
    v86 = v75[7];
    v87 = &v62[v86];
    v88 = &v63[v86];
    v89 = sub_1000BA294(&qword_100BC3348);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v88, 1, v89))
    {
      v90 = type metadata accessor for WeatherData.CachingState(0);
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      v283(v87, v88, v53);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v87, 0, 1, v89);
    }
    v91 = v75[8];
    v92 = &v62[v91];
    v93 = &v63[v91];
    v94 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
    v95 = swift_getEnumCaseMultiPayload(v93, v94);
    v278 = v64;
    if (v95 == 1)
    {
      v100 = type metadata accessor for WeatherStatisticsModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v92, v93, v100);
      v97 = v92;
      v98 = v94;
      v99 = 1;
    }
    else
    {
      if (v95)
      {
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        goto LABEL_38;
      }
      v96 = *((_QWORD *)v93 + 1);
      *(_QWORD *)v92 = *(_QWORD *)v93;
      *((_QWORD *)v92 + 1) = v96;
      swift_bridgeObjectRetain(v96);
      v97 = v92;
      v98 = v94;
      v99 = 0;
    }
    swift_storeEnumTagMultiPayload(v97, v98, v99);
LABEL_38:
    v101 = v75[9];
    v102 = &v62[v101];
    v103 = &v63[v101];
    v104 = type metadata accessor for WeatherDataOverrides(0);
    v279 = v53;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v104))
    {
      v105 = sub_1000BA294(&qword_100BC3350);
      memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    }
    else
    {
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v103, 1, v53))
      {
        v106 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v283(v102, v103, v53);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v53);
      }
      v107 = *(int *)(v104 + 20);
      v108 = &v102[v107];
      v109 = &v103[v107];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v103[v107], 1, v53))
      {
        v110 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
        memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        v283(v108, v109, v53);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v108, 0, 1, v53);
      }
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v102, 0, 1, v104);
    }
    v277 = sub_1000BA294(&qword_100BC3358);
    v111 = *(int *)(v277 + 48);
    v281 = v62;
    v112 = &v62[v111];
    v113 = &v63[v111];
    v114 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v112, v113, v114);
    v115 = type metadata accessor for PreprocessedWeatherData(0);
    v116 = *(int *)(v115 + 20);
    v117 = *(_QWORD *)&v113[v116];
    *(_QWORD *)&v112[v116] = v117;
    v287 = (int *)v115;
    v289 = v112;
    v118 = *(int *)(v115 + 24);
    v119 = &v112[v118];
    v285 = v113;
    v120 = &v113[v118];
    v121 = *(_QWORD *)&v113[v118 + 8];
    *(_QWORD *)v119 = *(_QWORD *)&v113[v118];
    *((_QWORD *)v119 + 1) = v121;
    v122 = *(_QWORD *)&v113[v118 + 24];
    *((_QWORD *)v119 + 2) = *(_QWORD *)&v113[v118 + 16];
    *((_QWORD *)v119 + 3) = v122;
    v123 = *(_QWORD *)&v113[v118 + 40];
    *((_QWORD *)v119 + 4) = *(_QWORD *)&v113[v118 + 32];
    *((_QWORD *)v119 + 5) = v123;
    v275 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
    v124 = *(int *)(v275 + 28);
    v125 = &v119[v124];
    v126 = &v120[v124];
    v127 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v123);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v126, 1, v127))
    {
      v128 = sub_1000BA294(&qword_100BC3360);
      memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
    }
    else
    {
      v129 = *((_QWORD *)v126 + 1);
      *(_QWORD *)v125 = *(_QWORD *)v126;
      *((_QWORD *)v125 + 1) = v129;
      v130 = *(int *)(v127 + 20);
      v131 = &v125[v130];
      v132 = &v126[v130];
      v133 = type metadata accessor for TemperatureScaleConfiguration(0);
      v134 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v133 - 8) + 16);
      v135 = swift_bridgeObjectRetain(v129);
      v134(v131, v132, v133, v135);
      v136 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
      *(_QWORD *)&v131[v136[5]] = *(_QWORD *)&v132[v136[5]];
      *(_QWORD *)&v131[v136[6]] = *(_QWORD *)&v132[v136[6]];
      *(_QWORD *)&v131[v136[7]] = *(_QWORD *)&v132[v136[7]];
      v137 = v136[8];
      v138 = &v131[v137];
      v139 = &v132[v137];
      v141 = *(_QWORD *)v139;
      v140 = *((_QWORD *)v139 + 1);
      *(_QWORD *)v138 = v141;
      *((_QWORD *)v138 + 1) = v140;
      v131[v136[9]] = v132[v136[9]];
      swift_bridgeObjectRetain(v140);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v125, 0, 1, v127);
    }
    v142 = *(int *)(v275 + 32);
    v143 = &v119[v142];
    v144 = &v120[v142];
    v145 = *((_QWORD *)v144 + 1);
    *(_QWORD *)v143 = *(_QWORD *)v144;
    *((_QWORD *)v143 + 1) = v145;
    v146 = v287[7];
    v147 = &v289[v146];
    v148 = &v285[v146];
    v149 = *(_QWORD *)&v285[v146];
    *(_QWORD *)&v289[v146] = v149;
    v150 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
    v151 = &v147[v150];
    v152 = &v148[v150];
    v153 = type metadata accessor for WeatherDescription(0);
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRetain(v149);
    v272 = v153;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v152, 1, v153))
    {
      v154 = sub_1000BA294(&qword_100BC3368);
      memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v152, v153);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v151, 0, 1, v153);
    }
    v155 = v287[8];
    v156 = &v289[v155];
    v157 = &v285[v155];
    v158 = *(_QWORD *)&v285[v155 + 8];
    *(_QWORD *)v156 = *(_QWORD *)&v285[v155];
    *((_QWORD *)v156 + 1) = v158;
    v159 = *(_QWORD *)&v285[v155 + 24];
    *((_QWORD *)v156 + 2) = *(_QWORD *)&v285[v155 + 16];
    *((_QWORD *)v156 + 3) = v159;
    v160 = *(_QWORD *)&v285[v155 + 40];
    *((_QWORD *)v156 + 4) = *(_QWORD *)&v285[v155 + 32];
    *((_QWORD *)v156 + 5) = v160;
    v161 = *(_QWORD *)&v285[v155 + 56];
    *((_QWORD *)v156 + 6) = *(_QWORD *)&v285[v155 + 48];
    *((_QWORD *)v156 + 7) = v161;
    v162 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
    v163 = &v156[v162];
    v164 = &v157[v162];
    swift_bridgeObjectRetain(v158);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v160);
    v165 = swift_bridgeObjectRetain(v161);
    ((void (*)(char *, char *, uint64_t, __n128))v283)(v163, v164, v279, v165);
    v166 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
    v167 = *(int *)(v166 + 20);
    v168 = &v163[v167];
    v169 = &v164[v167];
    v170 = type metadata accessor for Elevation(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v169, 1, v170))
    {
      v171 = sub_1000BA294(&qword_100BC3370);
      memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v168, v169, v170);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v168, 0, 1, v170);
    }
    v172 = *(int *)(v166 + 24);
    v173 = &v163[v172];
    v174 = &v164[v172];
    v175 = type metadata accessor for BackgroundMoonData(0);
    v274 = v170;
    v276 = v166;
    v261 = v175;
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v174, 1, v175))
    {
      v176 = sub_1000BA294(&qword_100BC3378);
      memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v173, v174, v175);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v173, 0, 1, v175);
    }
    v177 = v287[9];
    v178 = &v289[v177];
    v179 = &v285[v177];
    v180 = *((_QWORD *)v179 + 1);
    *(_QWORD *)v178 = *(_QWORD *)v179;
    *((_QWORD *)v178 + 1) = v180;
    v181 = *((_QWORD *)v179 + 3);
    *((_QWORD *)v178 + 2) = *((_QWORD *)v179 + 2);
    *((_QWORD *)v178 + 3) = v181;
    v182 = *((_QWORD *)v179 + 5);
    *((_QWORD *)v178 + 4) = *((_QWORD *)v179 + 4);
    *((_QWORD *)v178 + 5) = v182;
    v183 = *((_QWORD *)v179 + 7);
    *((_QWORD *)v178 + 6) = *((_QWORD *)v179 + 6);
    *((_QWORD *)v178 + 7) = v183;
    v184 = *((_QWORD *)v179 + 9);
    *((_QWORD *)v178 + 8) = *((_QWORD *)v179 + 8);
    *((_QWORD *)v178 + 9) = v184;
    v185 = *((_QWORD *)v179 + 11);
    *((_QWORD *)v178 + 10) = *((_QWORD *)v179 + 10);
    *((_QWORD *)v178 + 11) = v185;
    v186 = *((_QWORD *)v179 + 13);
    *((_QWORD *)v178 + 12) = *((_QWORD *)v179 + 12);
    *((_QWORD *)v178 + 13) = v186;
    v187 = v287[10];
    v188 = &v289[v187];
    v189 = &v285[v187];
    v270 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v272 - 8) + 16);
    swift_bridgeObjectRetain(v180);
    swift_bridgeObjectRetain(v181);
    swift_bridgeObjectRetain(v182);
    swift_bridgeObjectRetain(v183);
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRetain(v185);
    v190 = swift_bridgeObjectRetain(v186);
    v270(v188, v189, v272, v190);
    v191 = *(int *)(type metadata accessor for UVIndexComponentPreprocessedDataModel(0) + 20);
    v192 = &v188[v191];
    v193 = &v189[v191];
    v194 = *((_QWORD *)v193 + 1);
    *(_QWORD *)v192 = *(_QWORD *)v193;
    *((_QWORD *)v192 + 1) = v194;
    v195 = v287[11];
    v196 = &v289[v195];
    v197 = &v285[v195];
    v198 = *((_QWORD *)v197 + 1);
    *(_QWORD *)v196 = *(_QWORD *)v197;
    *((_QWORD *)v196 + 1) = v198;
    v199 = *((_QWORD *)v197 + 3);
    *((_QWORD *)v196 + 2) = *((_QWORD *)v197 + 2);
    *((_QWORD *)v196 + 3) = v199;
    v200 = *((_QWORD *)v197 + 5);
    *((_QWORD *)v196 + 4) = *((_QWORD *)v197 + 4);
    *((_QWORD *)v196 + 5) = v200;
    v201 = v287[12];
    v202 = &v289[v201];
    v203 = &v285[v201];
    v204 = type metadata accessor for PressureTrend(0);
    v205 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v204 - 8) + 16);
    swift_bridgeObjectRetain(v194);
    swift_bridgeObjectRetain(v198);
    swift_bridgeObjectRetain(v199);
    v206 = swift_bridgeObjectRetain(v200);
    v205(v202, v203, v204, v206);
    v207 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
    v208 = v207[5];
    v209 = &v202[v208];
    v210 = &v203[v208];
    v211 = *((_QWORD *)v210 + 1);
    *(_QWORD *)v209 = *(_QWORD *)v210;
    *((_QWORD *)v209 + 1) = v211;
    v212 = v207[6];
    v213 = &v202[v212];
    v214 = &v203[v212];
    v273 = *((_QWORD *)v214 + 1);
    *(_QWORD *)v213 = *(_QWORD *)v214;
    *((_QWORD *)v213 + 1) = v273;
    v215 = v207[7];
    v216 = &v202[v215];
    v217 = &v203[v215];
    v271 = *((_QWORD *)v217 + 1);
    *(_QWORD *)v216 = *(_QWORD *)v217;
    *((_QWORD *)v216 + 1) = v271;
    *(_QWORD *)&v202[v207[8]] = *(_QWORD *)&v203[v207[8]];
    v218 = v207[9];
    v219 = &v202[v218];
    v220 = &v203[v218];
    v269 = *((_QWORD *)v220 + 1);
    *(_QWORD *)v219 = *(_QWORD *)v220;
    *((_QWORD *)v219 + 1) = v269;
    v221 = v287[13];
    v222 = &v289[v221];
    v223 = &v285[v221];
    v224 = *((_QWORD *)v223 + 1);
    *(_QWORD *)v222 = *(_QWORD *)v223;
    *((_QWORD *)v222 + 1) = v224;
    v225 = *((_QWORD *)v223 + 3);
    *((_QWORD *)v222 + 2) = *((_QWORD *)v223 + 2);
    *((_QWORD *)v222 + 3) = v225;
    v226 = *((_QWORD *)v223 + 5);
    *((_QWORD *)v222 + 4) = *((_QWORD *)v223 + 4);
    *((_QWORD *)v222 + 5) = v226;
    v227 = *((_QWORD *)v223 + 7);
    *((_QWORD *)v222 + 6) = *((_QWORD *)v223 + 6);
    *((_QWORD *)v222 + 7) = v227;
    v228 = *((_QWORD *)v223 + 9);
    *((_QWORD *)v222 + 8) = *((_QWORD *)v223 + 8);
    *((_QWORD *)v222 + 9) = v228;
    v229 = *((_QWORD *)v223 + 11);
    *((_QWORD *)v222 + 10) = *((_QWORD *)v223 + 10);
    *((_QWORD *)v222 + 11) = v229;
    v230 = *((_QWORD *)v223 + 13);
    *((_QWORD *)v222 + 12) = *((_QWORD *)v223 + 12);
    *((_QWORD *)v222 + 13) = v230;
    v267 = *((_QWORD *)v223 + 15);
    *((_QWORD *)v222 + 14) = *((_QWORD *)v223 + 14);
    *((_QWORD *)v222 + 15) = v267;
    v266 = *((_QWORD *)v223 + 17);
    *((_QWORD *)v222 + 16) = *((_QWORD *)v223 + 16);
    *((_QWORD *)v222 + 17) = v266;
    v265 = *((_QWORD *)v223 + 19);
    *((_QWORD *)v222 + 18) = *((_QWORD *)v223 + 18);
    *((_QWORD *)v222 + 19) = v265;
    v264 = *((_QWORD *)v223 + 21);
    *((_QWORD *)v222 + 20) = *((_QWORD *)v223 + 20);
    *((_QWORD *)v222 + 21) = v264;
    v263 = *((_QWORD *)v223 + 23);
    *((_QWORD *)v222 + 22) = *((_QWORD *)v223 + 22);
    *((_QWORD *)v222 + 23) = v263;
    v262 = *((_QWORD *)v223 + 25);
    *((_QWORD *)v222 + 24) = *((_QWORD *)v223 + 24);
    *((_QWORD *)v222 + 25) = v262;
    *((_OWORD *)v222 + 13) = *((_OWORD *)v223 + 13);
    v268 = *((_QWORD *)v223 + 28);
    *((_QWORD *)v222 + 28) = v268;
    v231 = v287[14];
    v232 = &v289[v231];
    v233 = &v285[v231];
    swift_bridgeObjectRetain(v211);
    swift_bridgeObjectRetain(v273);
    swift_bridgeObjectRetain(v271);
    swift_bridgeObjectRetain(v269);
    swift_bridgeObjectRetain(v224);
    swift_bridgeObjectRetain(v225);
    swift_bridgeObjectRetain(v226);
    swift_bridgeObjectRetain(v227);
    swift_bridgeObjectRetain(v228);
    swift_bridgeObjectRetain(v229);
    swift_bridgeObjectRetain(v230);
    swift_bridgeObjectRetain(v267);
    swift_bridgeObjectRetain(v266);
    swift_bridgeObjectRetain(v265);
    swift_bridgeObjectRetain(v264);
    swift_bridgeObjectRetain(v263);
    swift_bridgeObjectRetain(v262);
    v234 = swift_bridgeObjectRetain(v268);
    ((void (*)(char *, char *, uint64_t, __n128))v283)(v232, v233, v279, v234);
    v235 = *(int *)(v276 + 20);
    v236 = &v232[v235];
    v237 = &v233[v235];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v233[v235], 1, v274))
    {
      v238 = sub_1000BA294(&qword_100BC3370);
      memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v274 - 8) + 16))(v236, v237, v274);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v236, 0, 1, v274);
    }
    v239 = *(int *)(v276 + 24);
    v240 = &v232[v239];
    v241 = &v233[v239];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v233[v239], 1, v261))
    {
      v242 = sub_1000BA294(&qword_100BC3378);
      memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v261 - 8) + 16))(v240, v241, v261);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v240, 0, 1, v261);
    }
    v243 = v287[15];
    v244 = &v289[v243];
    v245 = &v285[v243];
    v246 = *((_QWORD *)v245 + 1);
    *(_QWORD *)v244 = *(_QWORD *)v245;
    *((_QWORD *)v244 + 1) = v246;
    v247 = *((_QWORD *)v245 + 3);
    *((_QWORD *)v244 + 2) = *((_QWORD *)v245 + 2);
    *((_QWORD *)v244 + 3) = v247;
    v248 = *((_QWORD *)v245 + 5);
    *((_QWORD *)v244 + 4) = *((_QWORD *)v245 + 4);
    *((_QWORD *)v244 + 5) = v248;
    v249 = *((_QWORD *)v245 + 7);
    *((_QWORD *)v244 + 6) = *((_QWORD *)v245 + 6);
    *((_QWORD *)v244 + 7) = v249;
    v250 = *((_QWORD *)v245 + 9);
    *((_QWORD *)v244 + 8) = *((_QWORD *)v245 + 8);
    *((_QWORD *)v244 + 9) = v250;
    v251 = *((_QWORD *)v245 + 11);
    *((_QWORD *)v244 + 10) = *((_QWORD *)v245 + 10);
    *((_QWORD *)v244 + 11) = v251;
    v252 = *((_QWORD *)v245 + 13);
    *((_QWORD *)v244 + 12) = *((_QWORD *)v245 + 12);
    *((_QWORD *)v244 + 13) = v252;
    v253 = *(int *)(v277 + 64);
    v290 = &v281[v253];
    v254 = &v63[v253];
    v255 = type metadata accessor for NewsDataModel(0);
    swift_bridgeObjectRetain(v246);
    swift_bridgeObjectRetain(v247);
    swift_bridgeObjectRetain(v248);
    swift_bridgeObjectRetain(v249);
    swift_bridgeObjectRetain(v250);
    swift_bridgeObjectRetain(v251);
    swift_bridgeObjectRetain(v252);
    if (swift_getEnumCaseMultiPayload(v254, v255) == 1)
    {
      v256 = *(_QWORD *)v254;
      v257 = v290;
      *(_QWORD *)v290 = *(_QWORD *)v254;
      swift_bridgeObjectRetain(v256);
      v258 = 1;
    }
    else
    {
      v259 = type metadata accessor for News(0);
      v257 = v290;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v290, v254, v259);
      v258 = 0;
    }
    v45 = v291;
    v64 = v278;
    swift_storeEnumTagMultiPayload(v257, v255, v258);
    v62 = v281;
    v71 = v281;
    v72 = v278;
    v73 = 1;
    goto LABEL_69;
  }
  v65 = sub_1000BA294(&qword_100BC3380);
  memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  return v45;
}

uint64_t type metadata accessor for ActiveLocationModel(uint64_t a1)
{
  return sub_100098190(a1, (uint64_t *)&unk_100BCE530, (uint64_t)&nominal type descriptor for ActiveLocationModel);
}

uint64_t sub_1000E96DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *__dst;

  v6 = type metadata accessor for LocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v11 = a2 + v8;
  v12 = *(_QWORD *)(a2 + v8 + 8);
  *v10 = *(_QWORD *)(a2 + v8);
  v10[1] = v12;
  v13 = type metadata accessor for ConditionPickerMenuViewModel(0);
  v14 = *(int *)(v13 + 20);
  __dst = (char *)v10 + v14;
  v15 = (const void *)(v11 + v14);
  v16 = type metadata accessor for WeatherCondition(0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v15, 1, v16))
  {
    v17 = sub_1000BA294(&qword_100BC3660);
    memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v15, v16);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)__dst, 0, 1, v16);
  }
  v18 = *(int *)(v13 + 24);
  v19 = *(_QWORD *)(v11 + v18);
  *(_QWORD *)((char *)v10 + v18) = v19;
  v20 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v21 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  v24 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  v29 = v26[5];
  v25[4] = v26[4];
  v25[5] = v29;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t sub_1000E98A0(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for Location.Identifier(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v4))
    v5(v6, v4);
  v7 = a1 + a2[6];
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  sub_100176DD4(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_BYTE *)(v7 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_release(*(_QWORD *)(a1 + a2[8]) & 0xFFFFFFFFFFFFFFBLL);
  v8 = a1 + a2[9];
  v9 = (int *)type metadata accessor for LocationFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, (uint64_t)v9))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 16));
    v10 = v8 + v9[8];
    v11 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = v8 + v9[9];
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
    v13 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v14 = v12 + v13[6];
    if (!_s7Weather24LocationCompositionStateOwet_0(v14, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v14, v11);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[7] + 8));
    swift_release(*(_QWORD *)(v12 + v13[8]));
    v15 = v8 + v9[11];
    v16 = type metadata accessor for LocationOfInterest(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v8 + v9[14];
    v18 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v17, 1, v18))
    {
      v19 = v17 + *(int *)(v18 + 20);
      v20 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17 + *(int *)(v18 + 24), v16);
    }
  }

  v21 = a1 + a2[19];
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = a1 + a2[20];
  v24 = type metadata accessor for ForegroundEffect(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[22]));
  v25 = a1 + a2[24];
  v26 = type metadata accessor for LocationEntity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
}

uint64_t sub_1000E9B9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  id v83;
  uint64_t v84;
  void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v96;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  int *v102;

  v6 = type metadata accessor for Location.Identifier(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  if (_s7Weather24LocationCompositionStateOwet_0(a2 + v8, 1, v6))
  {
    v11 = sub_1000BA294(&qword_100BCD680);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(v13 + 8) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 16);
  v17 = *(_QWORD *)(a2 + v12 + 24);
  v18 = *(_QWORD *)(a2 + v12 + 32);
  v19 = *(_QWORD *)(a2 + v12 + 40);
  v20 = *(_BYTE *)(a2 + v12 + 48);
  swift_bridgeObjectRetain(v15);
  sub_100176D88(v16, v17, v18, v19, v20);
  *(_QWORD *)(v13 + 16) = v16;
  *(_QWORD *)(v13 + 24) = v17;
  *(_QWORD *)(v13 + 32) = v18;
  *(_QWORD *)(v13 + 40) = v19;
  *(_BYTE *)(v13 + 48) = v20;
  v21 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = v21;
  v22 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v13 + 72) = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v13 + 80) = v22;
  v99 = *(_QWORD *)(v14 + 96);
  *(_QWORD *)(v13 + 88) = *(_QWORD *)(v14 + 88);
  *(_QWORD *)(v13 + 96) = v99;
  v98 = *(_QWORD *)(v14 + 112);
  *(_QWORD *)(v13 + 104) = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v13 + 112) = v98;
  v23 = *(_QWORD *)(v14 + 128);
  *(_QWORD *)(v13 + 120) = *(_QWORD *)(v14 + 120);
  *(_QWORD *)(v13 + 128) = v23;
  *(_BYTE *)(v13 + 136) = *(_BYTE *)(v14 + 136);
  *(_WORD *)(v13 + 137) = *(_WORD *)(v14 + 137);
  v24 = *(_QWORD *)(v14 + 144);
  v25 = *(_QWORD *)(v14 + 152);
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
  v26 = a3[7];
  v27 = a3[8];
  v28 = *(_QWORD *)(a2 + v26);
  *(_QWORD *)(v13 + 144) = v24;
  *(_QWORD *)(v13 + 152) = v25;
  *(_QWORD *)(a1 + v26) = v28;
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  v101 = a2;
  v102 = a3;
  v29 = a3[9];
  v30 = a1;
  v31 = (_BYTE *)(a1 + v29);
  v32 = (_BYTE *)(a2 + v29);
  v33 = type metadata accessor for LocationFooterViewModel(0);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  v34 = (int *)v33;
  swift_bridgeObjectRetain(v28);
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v32, 1, v33))
  {
    v35 = sub_1000BA294(&qword_100BCD690);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    v36 = v101;
    v37 = v30;
  }
  else
  {
    *v31 = *v32;
    *(_WORD *)(v31 + 1) = *(_WORD *)(v32 + 1);
    v38 = *((_QWORD *)v32 + 2);
    *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
    *((_QWORD *)v31 + 2) = v38;
    v39 = *(int *)(v33 + 32);
    v40 = &v31[v39];
    v41 = v32;
    v42 = &v32[v39];
    v43 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v38);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v43))
    {
      v44 = sub_1000BA294(&qword_100BD4280);
      memcpy(v40, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v42, v43);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v43);
    }
    v37 = v30;
    v100 = v34;
    v45 = v34[9];
    v46 = (uint64_t)v31;
    v47 = &v31[v45];
    v48 = &v41[v45];
    *v47 = v41[v45];
    v49 = *(_QWORD *)&v41[v45 + 8];
    *((_QWORD *)v47 + 1) = v49;
    v50 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v51 = v50[6];
    v52 = &v47[v51];
    v53 = &v48[v51];
    swift_bridgeObjectRetain(v49);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v53, 1, v43))
    {
      v54 = sub_1000BA294(&qword_100BD4280);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v52, v53, v43);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v52, 0, 1, v43);
    }
    v55 = v50[7];
    v56 = &v47[v55];
    v57 = &v48[v55];
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    *(_QWORD *)&v47[v50[8]] = *(_QWORD *)&v48[v50[8]];
    *(_BYTE *)(v46 + v100[10]) = v41[v100[10]];
    v59 = v100[11];
    v60 = (void *)(v46 + v59);
    v61 = &v41[v59];
    v62 = type metadata accessor for LocationOfInterest(0);
    swift_bridgeObjectRetain(v58);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v61, 1, v62))
    {
      v63 = sub_1000BA294(&qword_100BC3118);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v60, 0, 1, v62);
    }
    *(_BYTE *)(v46 + v100[12]) = v41[v100[12]];
    *(_BYTE *)(v46 + v100[13]) = v41[v100[13]];
    v64 = v100[14];
    v65 = (_BYTE *)(v46 + v64);
    v66 = &v41[v64];
    v67 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v66, 1, (uint64_t)v67))
    {
      v68 = sub_1000BA294(&qword_100BCD688);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      *v65 = *v66;
      v69 = v67[5];
      v70 = &v65[v69];
      v71 = &v66[v69];
      v72 = type metadata accessor for Location(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(&v65[v67[6]], &v66[v67[6]], v62);
      v65[v67[7]] = v66[v67[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v65, 0, 1, (uint64_t)v67);
    }
    v36 = v101;
    _s7Weather24LocationCompositionStateOwst_0(v46, 0, 1, (uint64_t)v100);
  }
  v73 = v102[11];
  *(_BYTE *)(v37 + v102[10]) = *(_BYTE *)(v36 + v102[10]);
  *(_BYTE *)(v37 + v73) = *(_BYTE *)(v36 + v73);
  v74 = v102[13];
  *(_BYTE *)(v37 + v102[12]) = *(_BYTE *)(v36 + v102[12]);
  *(_BYTE *)(v37 + v74) = *(_BYTE *)(v36 + v74);
  v75 = v102[15];
  *(_BYTE *)(v37 + v102[14]) = *(_BYTE *)(v36 + v102[14]);
  v76 = *(void **)(v36 + v75);
  *(_QWORD *)(v37 + v75) = v76;
  v77 = v102[17];
  *(_BYTE *)(v37 + v102[16]) = *(_BYTE *)(v36 + v102[16]);
  *(_BYTE *)(v37 + v77) = *(_BYTE *)(v36 + v77);
  v78 = v102[19];
  *(_BYTE *)(v37 + v102[18]) = *(_BYTE *)(v36 + v102[18]);
  v79 = v37 + v78;
  v80 = v36 + v78;
  v81 = type metadata accessor for Date(0);
  v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
  v83 = v76;
  v82(v79, v80, v81);
  v84 = v102[20];
  v85 = (void *)(v37 + v84);
  v86 = (const void *)(v36 + v84);
  v87 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v86, 1, v87))
  {
    v88 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v85, 0, 1, v87);
  }
  v89 = v102[22];
  *(_BYTE *)(v37 + v102[21]) = *(_BYTE *)(v36 + v102[21]);
  v90 = *(_QWORD *)(v36 + v89);
  *(_QWORD *)(v37 + v89) = v90;
  v91 = v102[24];
  *(_BYTE *)(v37 + v102[23]) = *(_BYTE *)(v36 + v102[23]);
  v92 = v37 + v91;
  v93 = v36 + v91;
  v94 = type metadata accessor for LocationEntity(0);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v94 - 8) + 16);
  v96 = swift_bridgeObjectRetain(v90);
  v95(v92, v93, v94, v96);
  return v37;
}

uint64_t sub_1000EA22C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v4 = sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_1000BF398(*(_QWORD *)((char *)a1 + a2[5]), *(_QWORD *)((char *)a1 + a2[5] + 8));
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for Location.Identifier(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = (int *)type metadata accessor for LocationViewModel(0);
  v10 = (uint64_t)&v6[v9[5]];
  if (!_s7Weather24LocationCompositionStateOwet_0(v10, 1, v7))
    v8((char *)v10, v7);
  v11 = &v6[v9[6]];
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
  sub_100176DD4(*((_QWORD *)v11 + 2), *((_QWORD *)v11 + 3), *((_QWORD *)v11 + 4), *((_QWORD *)v11 + 5), v11[48]);
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 8));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 10));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 12));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 14));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 16));
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 19));
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v9[7]]);
  swift_release(*(_QWORD *)&v6[v9[8]] & 0xFFFFFFFFFFFFFFBLL);
  v12 = (uint64_t)&v6[v9[9]];
  v13 = (int *)type metadata accessor for LocationFooterViewModel(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v12, 1, (uint64_t)v13))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 16));
    v14 = v12 + v13[8];
    v15 = type metadata accessor for URL(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v14, 1, v15))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v12 + v13[9];
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8));
    v17 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v18 = v16 + v17[6];
    if (!_s7Weather24LocationCompositionStateOwet_0(v18, 1, v15))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v18, v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + v17[7] + 8));
    swift_release(*(_QWORD *)(v16 + v17[8]));
    v19 = v12 + v13[11];
    v20 = type metadata accessor for LocationOfInterest(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v19, 1, v20))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    v21 = v12 + v13[14];
    v22 = type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v21, 1, v22))
    {
      v23 = v21 + *(int *)(v22 + 20);
      v24 = type metadata accessor for Location(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v21 + *(int *)(v22 + 24), v20);
    }
  }

  v25 = &v6[v9[19]];
  v26 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = (uint64_t)&v6[v9[20]];
  v28 = type metadata accessor for ForegroundEffect(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v27, 1, v28))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v9[22]]);
  v29 = &v6[v9[24]];
  v30 = type metadata accessor for LocationEntity(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  swift_unknownObjectRelease(*(_QWORD *)((char *)a1 + a2[7]));
  swift_release(*(_QWORD *)((char *)a1 + a2[8] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[9]));
}

_QWORD *sub_1000EA5C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  int *v50;
  uint64_t v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  id v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t, __n128);
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  int *v118;
  int *v119;
  _QWORD *v120;
  _QWORD *v121;

  v6 = sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = *((_QWORD *)v13 + 1);
  v16 = v13[16];
  sub_100037094(*(_QWORD *)v13, v15);
  *(_QWORD *)v12 = v14;
  *((_QWORD *)v12 + 1) = v15;
  v12[16] = v16;
  v119 = a3;
  v17 = a3[6];
  v121 = a1;
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Location.Identifier(0);
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v22 = type metadata accessor for LocationViewModel(0);
  v23 = *(int *)(v22 + 20);
  v24 = &v18[v23];
  v25 = &v19[v23];
  v120 = a2;
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v19[v23], 1, v20))
  {
    v26 = sub_1000BA294(&qword_100BCD680);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v21(v24, v25, v20);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v24, 0, 1, v20);
  }
  v27 = *(int *)(v22 + 24);
  v28 = &v18[v27];
  v29 = &v19[v27];
  v30 = *(_QWORD *)&v19[v27 + 8];
  *(_QWORD *)v28 = *(_QWORD *)&v19[v27];
  *((_QWORD *)v28 + 1) = v30;
  v31 = *(_QWORD *)&v19[v27 + 16];
  v32 = *(_QWORD *)&v19[v27 + 24];
  v33 = *(_QWORD *)&v19[v27 + 32];
  v34 = *(_QWORD *)&v19[v27 + 40];
  v35 = v18;
  v36 = (int *)v22;
  v37 = v19[v27 + 48];
  swift_bridgeObjectRetain(v30);
  sub_100176D88(v31, v32, v33, v34, v37);
  *((_QWORD *)v28 + 2) = v31;
  *((_QWORD *)v28 + 3) = v32;
  *((_QWORD *)v28 + 4) = v33;
  *((_QWORD *)v28 + 5) = v34;
  v28[48] = v37;
  v38 = *((_QWORD *)v29 + 8);
  *((_QWORD *)v28 + 7) = *((_QWORD *)v29 + 7);
  *((_QWORD *)v28 + 8) = v38;
  v39 = *((_QWORD *)v29 + 10);
  *((_QWORD *)v28 + 9) = *((_QWORD *)v29 + 9);
  *((_QWORD *)v28 + 10) = v39;
  v40 = *((_QWORD *)v29 + 12);
  *((_QWORD *)v28 + 11) = *((_QWORD *)v29 + 11);
  *((_QWORD *)v28 + 12) = v40;
  v115 = *((_QWORD *)v29 + 14);
  *((_QWORD *)v28 + 13) = *((_QWORD *)v29 + 13);
  *((_QWORD *)v28 + 14) = v115;
  v41 = *((_QWORD *)v29 + 16);
  *((_QWORD *)v28 + 15) = *((_QWORD *)v29 + 15);
  *((_QWORD *)v28 + 16) = v41;
  v28[136] = v29[136];
  *(_WORD *)(v28 + 137) = *(_WORD *)(v29 + 137);
  v42 = *((_QWORD *)v29 + 19);
  *((_QWORD *)v28 + 18) = *((_QWORD *)v29 + 18);
  *((_QWORD *)v28 + 19) = v42;
  v28[160] = v29[160];
  v28[161] = v29[161];
  v43 = v36[7];
  v44 = *(_QWORD *)&v19[v43];
  *(_QWORD *)&v35[v43] = v44;
  *(_QWORD *)&v35[v36[8]] = *(_QWORD *)&v19[v36[8]];
  v118 = v36;
  v45 = v36[9];
  v46 = v35;
  v47 = v19;
  v48 = &v35[v45];
  v117 = v47;
  v49 = &v47[v45];
  v50 = (int *)type metadata accessor for LocationFooterViewModel(0);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v44);
  swift_retain();
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v49, 1, (uint64_t)v50))
  {
    v51 = sub_1000BA294(&qword_100BCD690);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    v52 = v117;
    v53 = v118;
  }
  else
  {
    *v48 = *v49;
    *(_WORD *)(v48 + 1) = *(_WORD *)(v49 + 1);
    v54 = *((_QWORD *)v49 + 2);
    *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
    *((_QWORD *)v48 + 2) = v54;
    v55 = v50[8];
    v116 = (uint64_t)v48;
    v56 = &v48[v55];
    v57 = &v49[v55];
    v58 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v54);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v57, 1, v58))
    {
      v59 = sub_1000BA294(&qword_100BD4280);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v56, 0, 1, v58);
    }
    v60 = v50[9];
    v61 = v116 + v60;
    v62 = &v49[v60];
    *(_BYTE *)v61 = v49[v60];
    v63 = *(_QWORD *)&v49[v60 + 8];
    *(_QWORD *)(v61 + 8) = v63;
    v64 = (int *)type metadata accessor for LearnMoreAttributorViewModel(0);
    v65 = v64[6];
    v66 = (void *)(v61 + v65);
    v67 = &v62[v65];
    swift_bridgeObjectRetain(v63);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v67, 1, v58))
    {
      v68 = sub_1000BA294(&qword_100BD4280);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v66, v67, v58);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v66, 0, 1, v58);
    }
    v69 = v64[7];
    v70 = (_QWORD *)(v61 + v69);
    v71 = &v62[v69];
    v72 = *((_QWORD *)v71 + 1);
    *v70 = *(_QWORD *)v71;
    v70[1] = v72;
    *(_QWORD *)(v61 + v64[8]) = *(_QWORD *)&v62[v64[8]];
    *(_BYTE *)(v116 + v50[10]) = v49[v50[10]];
    v73 = v50[11];
    v74 = (void *)(v116 + v73);
    v75 = &v49[v73];
    v76 = type metadata accessor for LocationOfInterest(0);
    swift_bridgeObjectRetain(v72);
    swift_retain();
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v75, 1, v76))
    {
      v77 = sub_1000BA294(&qword_100BC3118);
      memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v74, 0, 1, v76);
    }
    v53 = v118;
    *(_BYTE *)(v116 + v50[12]) = v49[v50[12]];
    *(_BYTE *)(v116 + v50[13]) = v49[v50[13]];
    v78 = v50[14];
    v79 = (char *)(v116 + v78);
    v80 = &v49[v78];
    v81 = (int *)type metadata accessor for HomeAndWorkRefinementRowViewModel(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v80, 1, (uint64_t)v81))
    {
      v82 = sub_1000BA294(&qword_100BCD688);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      *v79 = *v80;
      v83 = v81[5];
      v84 = &v79[v83];
      v85 = &v80[v83];
      v86 = type metadata accessor for Location(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(&v79[v81[6]], &v80[v81[6]], v76);
      v79[v81[7]] = v80[v81[7]];
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v79, 0, 1, (uint64_t)v81);
    }
    v52 = v117;
    _s7Weather24LocationCompositionStateOwst_0(v116, 0, 1, (uint64_t)v50);
  }
  v46[v53[10]] = v52[v53[10]];
  v46[v53[11]] = v52[v53[11]];
  v46[v53[12]] = v52[v53[12]];
  v46[v53[13]] = v52[v53[13]];
  v46[v53[14]] = v52[v53[14]];
  v87 = v53[15];
  v88 = *(void **)&v52[v87];
  *(_QWORD *)&v46[v87] = v88;
  v46[v53[16]] = v52[v53[16]];
  v46[v53[17]] = v52[v53[17]];
  v46[v53[18]] = v52[v53[18]];
  v89 = v53[19];
  v90 = &v46[v89];
  v91 = &v52[v89];
  v92 = type metadata accessor for Date(0);
  v93 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
  v94 = v88;
  v93(v90, v91, v92);
  v95 = v53[20];
  v96 = &v46[v95];
  v97 = &v52[v95];
  v98 = type metadata accessor for ForegroundEffect(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v97, 1, v98))
  {
    v99 = sub_1000BA294(&qword_100BC5B30);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v96, 0, 1, v98);
  }
  v46[v53[21]] = v52[v53[21]];
  v100 = v53[22];
  v101 = *(_QWORD *)&v52[v100];
  *(_QWORD *)&v46[v100] = v101;
  v46[v53[23]] = v52[v53[23]];
  v102 = v53[24];
  v103 = &v46[v102];
  v104 = &v52[v102];
  v105 = type metadata accessor for LocationEntity(0);
  v106 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v105 - 8) + 16);
  v107 = swift_bridgeObjectRetain(v101);
  v106(v103, v104, v105, v107);
  v108 = v119[7];
  v109 = v119[8];
  v110 = *(_OWORD *)((char *)v120 + v108);
  *(_OWORD *)((char *)v121 + v108) = v110;
  v111 = (_QWORD *)((char *)v121 + v109);
  v112 = (_QWORD *)((char *)v120 + v109);
  v113 = v112[1];
  *v111 = *v112;
  v111[1] = v113;
  *(_QWORD *)((char *)v121 + v119[9]) = *(_QWORD *)((char *)v120 + v119[9]);
  swift_unknownObjectRetain(v110);
  swift_retain();
  swift_retain();
  return v121;
}

uint64_t sub_1000EAD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005EEA28);
}

uint64_t sub_1000EAD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100384930);
}

uint64_t type metadata accessor for LocationViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100C00178;
  if (!qword_100C00178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationViewModel);
  return result;
}

uint64_t sub_1000EADDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100384A10);
}

void sub_1000EADE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char *v4;
  uint64_t v5;

  sub_1000CF948();
  sub_1000B42B0();
  __chkstk_darwin(v1);
  sub_1000B4B0C(v2, v3, v5);
  v4 = (char *)sub_1000EAE40 + 4 * byte_1009BBB90[sub_10009F7EC(v0)];
  __asm { BR              X10 }
}

void sub_1000EAE40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10009BC18(a1, type metadata accessor for LocationWeatherDataState);
  v2 = sub_1000C2148();
  sub_10009926C(v1, 1, v3, v2);
  sub_100079F70();
}

uint64_t type metadata accessor for LocationWeatherDataState(uint64_t a1)
{
  return sub_100098190(a1, qword_100BFB170, (uint64_t)&nominal type descriptor for LocationWeatherDataState);
}

uint64_t sub_1000EAED0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000EAEE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 200) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 104);
}

void sub_1000EAF1C(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_100021A14(*(_QWORD *)(a2 - 256), a1);
}

uint64_t sub_1000EAF24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000EAF50()
{
  return type metadata accessor for WeatherConditionBackgroundModel(0);
}

uint64_t sub_1000EAF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Collection.formIndex(after:)(v2, v0, v1);
}

uint64_t sub_1000EAF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_1000EAF8C()
{
  uint64_t v0;
  uint64_t *v1;

  sub_100021A14(v0, v1);
}

uint64_t sub_1000EAF98()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 120, 0);
}

uint64_t sub_1000EAFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t sub_1000EAFB0()
{
  uint64_t v0;
  uint64_t v1;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v0 + v1));
  return swift_release(*(_QWORD *)(v0 + v1 + 48));
}

uint64_t sub_1000EAFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Swift::String v9;

  v9._countAndFlagsBits = a8 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, *(Swift::String *)&a6, v9)._countAndFlagsBits;
}

uint64_t sub_1000EAFD4()
{
  return type metadata accessor for SettingReader(0);
}

uint64_t sub_1000EAFDC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000EAFF0()
{
  return type metadata accessor for OverviewTableRowViewModel(0);
}

void sub_1000EAFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100037768(v0, v1, v2);
}

BOOL sub_1000EB00C()
{
  NSObject *v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v2 - 168) = v1;
  return os_log_type_enabled(v0, (os_log_type_t)v1);
}

uint64_t sub_1000EB01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000EB034(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000EB03C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1005B0EEC(v1, v0);
}

uint64_t sub_1000EB048()
{
  return type metadata accessor for ChartView(0);
}

void sub_1000EB06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

}

uint64_t sub_1000EB074()
{
  return static WeatherFormatStyle<>.weather.getter();
}

uint64_t sub_1000EB084()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000EB098()
{
  _QWORD *v0;

  return swift_release(*v0);
}

__n128 sub_1000EB0A0()
{
  __int16 v0;
  uint64_t v1;
  __int16 v2;
  __n128 result;
  __int128 v4;

  v2 = *(unsigned __int8 *)(v1 - 224);
  result = *(__n128 *)(v1 - 256);
  v4 = *(_OWORD *)(v1 - 240);
  *(__n128 *)(v1 - 304) = result;
  *(_OWORD *)(v1 - 288) = v4;
  *(_WORD *)(v1 - 272) = v2;
  *(_WORD *)(v1 - 270) = v0;
  return result;
}

uint64_t sub_1000EB0F4()
{
  uint64_t v0;

  return sub_1000B15F8(*(_QWORD *)(v0 + 144), *(_BYTE *)(v0 + 152));
}

uint64_t sub_1000EB114()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000EB128(uint64_t a1, uint64_t a2)
{
  sub_1000DB418((_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 104));
  return a2;
}

uint64_t sub_1000EB164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10082AEB8(v2, a1 + v1);
}

uint64_t sub_1000EB170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)(a5 - 256) = a4;
  return _s7Weather24LocationCompositionStateOwst_0(a1, a2, a3, a4);
}

uint64_t sub_1000EB178()
{
  uint64_t v0;
  uint64_t v1;

  return swift_unknownObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 44)));
}

void sub_1000EB184(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*a1);
  }
  else
  {
    v3 = type metadata accessor for News(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
}

double sub_1000EB1D4(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  double result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v5 = (_QWORD *)(a1 + a2[6]);
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  swift_bridgeObjectRelease(v5[5]);
  v6 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
  v7 = (uint64_t)v5 + *(int *)(v6 + 28);
  v8 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v7, 1, v8))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    v9 = v7 + *(int *)(v8 + 20);
    v10 = type metadata accessor for TemperatureScaleConfiguration(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v11 + 32) + 8));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + *(int *)(v6 + 32) + 8));
  v12 = (_QWORD *)(a1 + a2[7]);
  swift_bridgeObjectRelease(*v12);
  v13 = (uint64_t)v12 + *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
  v14 = type metadata accessor for WeatherDescription(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = (_QWORD *)(a1 + a2[8]);
  swift_bridgeObjectRelease(v15[1]);
  swift_bridgeObjectRelease(v15[3]);
  swift_bridgeObjectRelease(v15[5]);
  swift_bridgeObjectRelease(v15[7]);
  v16 = (char *)v15 + *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v20 = (uint64_t)&v16[*(int *)(v19 + 20)];
  v21 = type metadata accessor for Elevation(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t)&v16[*(int *)(v19 + 24)];
  v23 = type metadata accessor for BackgroundMoonData(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = (_QWORD *)(a1 + a2[9]);
  swift_bridgeObjectRelease(v24[1]);
  swift_bridgeObjectRelease(v24[3]);
  swift_bridgeObjectRelease(v24[5]);
  swift_bridgeObjectRelease(v24[7]);
  swift_bridgeObjectRelease(v24[9]);
  swift_bridgeObjectRelease(v24[11]);
  v25 = swift_bridgeObjectRelease(v24[13]);
  v26 = a1 + a2[10];
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 8))(v26, v14, v25);
  v27 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v26 + *(int *)(v27 + 20) + 8));
  v28 = (_QWORD *)(a1 + a2[11]);
  swift_bridgeObjectRelease(v28[1]);
  swift_bridgeObjectRelease(v28[3]);
  swift_bridgeObjectRelease(v28[5]);
  v29 = a1 + a2[12];
  v30 = type metadata accessor for PressureTrend(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v31 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v31[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v31[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v31[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v29 + v31[9] + 8));
  v32 = (_QWORD *)(a1 + a2[13]);
  swift_bridgeObjectRelease(v32[1]);
  swift_bridgeObjectRelease(v32[3]);
  swift_bridgeObjectRelease(v32[5]);
  swift_bridgeObjectRelease(v32[7]);
  swift_bridgeObjectRelease(v32[9]);
  swift_bridgeObjectRelease(v32[11]);
  swift_bridgeObjectRelease(v32[13]);
  swift_bridgeObjectRelease(v32[15]);
  swift_bridgeObjectRelease(v32[17]);
  swift_bridgeObjectRelease(v32[19]);
  swift_bridgeObjectRelease(v32[21]);
  swift_bridgeObjectRelease(v32[23]);
  swift_bridgeObjectRelease(v32[25]);
  v33 = swift_bridgeObjectRelease(v32[28]);
  v34 = a1 + a2[14];
  ((void (*)(uint64_t, uint64_t, __n128))v18)(v34, v17, v33);
  v35 = v34 + *(int *)(v19 + 20);
  if (!_s7Weather24LocationCompositionStateOwet_0(v35, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v35, v21);
  v36 = v34 + *(int *)(v19 + 24);
  if (!_s7Weather24LocationCompositionStateOwet_0(v36, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v36, v23);
  v37 = (_QWORD *)(a1 + a2[15]);
  swift_bridgeObjectRelease(v37[1]);
  swift_bridgeObjectRelease(v37[3]);
  swift_bridgeObjectRelease(v37[5]);
  swift_bridgeObjectRelease(v37[7]);
  swift_bridgeObjectRelease(v37[9]);
  swift_bridgeObjectRelease(v37[11]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v37[13]).n128_u64[0];
  return result;
}

_QWORD *sub_1000EB640(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    swift_bridgeObjectRetain(v11);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for AvailableDataSets(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

_QWORD *sub_1000EB6EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale(0);
  swift_bridgeObjectRetain(v6);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BC3340);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_1000BA294(&qword_100BC3348);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v18, 1, v19))
  {
    v20 = type metadata accessor for WeatherData.CachingState(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v17, 0, 1, v19);
  }
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
  if (EnumCaseMultiPayload == 1)
  {
    v31 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v23, v24, v31);
    v28 = v23;
    v29 = v25;
    v30 = 1;
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    v27 = v24[1];
    *v23 = *v24;
    v23[1] = v27;
    swift_bridgeObjectRetain(v27);
    v28 = v23;
    v29 = v25;
    v30 = 0;
LABEL_11:
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    goto LABEL_13;
  }
  memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_13:
  v32 = a3[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for WeatherDataOverrides(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v35))
  {
    v36 = sub_1000BA294(&qword_100BC3350);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v34, 1, v37))
    {
      v38 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v33, v34, v37);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v37);
    }
    v39 = *(int *)(v35 + 20);
    v40 = &v33[v39];
    v41 = &v34[v39];
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v41, 1, v37))
    {
      v42 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v40, v41, v37);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v40, 0, 1, v37);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v33, 0, 1, v35);
  }
  return a1;
}

uint64_t sub_1000EBA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007E9748);
}

char *sub_1000EBA4C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BCD680);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  return a1;
}

uint64_t sub_1000EBB08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v41;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for MainViewModel.ModalModule(0);
  swift_bridgeObjectRetain(v6);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1000BA294(&qword_100BF3FD0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v12 = type metadata accessor for MainViewModel.ModalModule.LocationDetailModule(0);
      if (swift_getEnumCaseMultiPayload(v9, v12) == 6)
      {
        v13 = type metadata accessor for URL(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
        swift_storeEnumTagMultiPayload(v8, v12, 6);
      }
      else
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v41 = a3;
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_WORD *)(a1 + v15) = *(_WORD *)(a2 + v15);
  v18 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v19 = v18[6];
  v20 = v16 + v19;
  v21 = v17 + v19;
  v22 = type metadata accessor for WeatherMapOverlayKind(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  v24 = v18[7];
  v25 = (_QWORD *)(v16 + v24);
  v26 = (_QWORD *)(v17 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v18[8];
  v29 = (_BYTE *)(v16 + v28);
  v30 = (_BYTE *)(v17 + v28);
  swift_bridgeObjectRetain(v27);
  v31 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v30, 3, v31))
  {
    v32 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *v29 = *v30;
    v23((uint64_t)&v29[*(int *)(v31 + 48)], (uint64_t)&v30[*(int *)(v31 + 48)], v22);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v29, 0, 3, v31);
  }
  *(_BYTE *)(v16 + v18[9]) = *(_BYTE *)(v17 + v18[9]);
  v33 = v41[10];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_OWORD *)v34 = *(_OWORD *)(a2 + v33);
  *(_BYTE *)(v34 + 16) = *(_BYTE *)(a2 + v33 + 16);
  *(_BYTE *)(v34 + 17) = *(_BYTE *)(a2 + v33 + 17);
  *(_BYTE *)(v34 + 18) = *(_BYTE *)(a2 + v33 + 18);
  v36 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v37 = v34 + v36;
  v38 = v35 + v36;
  v39 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  return a1;
}

uint64_t sub_1000EBDE8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for MainViewModel.ModalModule(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5)
    && swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for MainViewModel.ModalModule.LocationDetailModule(0);
    if (swift_getEnumCaseMultiPayload(v4, v6) == 6)
    {
      v7 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
    }
  }
  v8 = a1 + a2[9];
  v9 = (int *)type metadata accessor for WeatherMapPresentationState(0);
  v10 = v8 + v9[6];
  v11 = type metadata accessor for WeatherMapOverlayKind(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[7] + 8));
  v13 = v8 + v9[8];
  v14 = sub_1000BA294(&qword_100BC5FD0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v13, 3, v14))
    v12(v13 + *(int *)(v14 + 48), v11);
  v15 = a1 + a2[10];
  v16 = v15 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
  v17 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

uint64_t type metadata accessor for MainViewModel.ModalModule(uint64_t a1)
{
  return sub_100098190(a1, qword_100C09448, (uint64_t)&nominal type descriptor for MainViewModel.ModalModule);
}

uint64_t sub_1000EBF68(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000EFB28(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000EBF70(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for Location.Identifier(0);
  result = _s7Weather24LocationCompositionStateOwet_0(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void sub_1000EBFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  char *v48;
  _QWORD v49[21];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a6;
  v51 = a4;
  v49[6] = a5;
  v52 = a3;
  v53 = a1;
  v49[20] = a2;
  v6 = type metadata accessor for WeatherStatisticsModel(0);
  v49[12] = *(_QWORD *)(v6 - 8);
  v49[13] = v6;
  __chkstk_darwin(v6);
  sub_100088FDC();
  v49[11] = v7;
  v8 = sub_10009876C();
  v49[18] = type metadata accessor for WeatherData.WeatherStatisticsState(v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_100098728();
  v10 = type metadata accessor for AvailableDataSets(0);
  v49[9] = *(_QWORD *)(v10 - 8);
  v49[10] = v10;
  __chkstk_darwin(v10);
  sub_100098728();
  type metadata accessor for LocationAvailableDataSetState(0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  sub_100098728();
  sub_1000BA294(&qword_100BC3650);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100098728();
  type metadata accessor for TimeState(0);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v49[1] = v14;
  v15 = sub_10009876C();
  type metadata accessor for WeatherData.CachingState(v15);
  sub_1000B42B0();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v49[5] = v17;
  v18 = sub_10009876C();
  type metadata accessor for NewsDataModel(v18);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_1000986FC();
  v49[4] = v20;
  sub_10009D2A4();
  __chkstk_darwin(v21);
  sub_100079F7C();
  v49[16] = v22;
  v23 = sub_10009876C();
  type metadata accessor for PreprocessedWeatherData(v23);
  sub_1000B42B0();
  __chkstk_darwin(v24);
  sub_1000986FC();
  v49[7] = v25;
  sub_10009D2A4();
  __chkstk_darwin(v26);
  sub_100079F7C();
  v49[14] = v27;
  v28 = sub_10009876C();
  v49[3] = type metadata accessor for WeatherData(v28);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_1000986FC();
  v49[2] = v30;
  sub_10009D2A4();
  __chkstk_darwin(v31);
  v49[0] = (char *)v49 - v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  sub_100079F7C();
  v49[15] = v34;
  v35 = sub_10009876C();
  v49[19] = type metadata accessor for LocationWeatherDataState(v35);
  sub_1000B42B0();
  __chkstk_darwin(v36);
  __chkstk_darwin(v37);
  v49[8] = (char *)v49 - v38;
  sub_10009D2A4();
  __chkstk_darwin(v39);
  sub_100079F7C();
  v49[17] = v40;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v41);
  __chkstk_darwin(v42);
  type metadata accessor for WeatherDataAction(0);
  sub_1000B42B0();
  __chkstk_darwin(v43);
  sub_100098728();
  v46 = v45 - v44;
  sub_100095B78(v50, v45 - v44, v47);
  v48 = (char *)sub_1000EC2FC + 4 * word_1009D1C10[swift_getEnumCaseMultiPayload(v46)];
  __asm { BR              X10 }
}

uint64_t sub_1000EC2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 8));
  v3 = sub_1000DF508();
  sub_1000D03A8(v3, v4);
  sub_1000986E8();
  v5 = *(_QWORD *)(v2 - 136);
  v6 = _s7Weather24LocationCompositionStateOwet_0(v0, 1, v5);
  v7 = *(_QWORD *)(v2 - 96);
  if (v6 != 1)
  {
    v9 = (char *)&loc_1000EC7DC + 4 * byte_1009D1C28[swift_getEnumCaseMultiPayload(v0)];
    __asm { BR              X10 }
  }
  v8 = *(_QWORD *)(v2 - 152);
  swift_storeEnumTagMultiPayload(v8, v5, 3);
  sub_1000DE00C();
  sub_1000C6304();
  sub_1000979AC(v8, type metadata accessor for LocationWeatherDataState);
  return v7;
}

void sub_1000ECE60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  sub_10004A2B0(a1, a2, a3);
  sub_1000C2D18();
  v5(v3, v4);
  sub_10004A298();
}

void sub_1000ECE8C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a4(&v6);
  v5 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7);
  *a1 = v5;
  sub_100099960();
}

unint64_t sub_1000ECED8(uint64_t a1, uint64_t a2)
{
  return sub_1000991C8(a2);
}

uint64_t sub_1000ECEFC(uint64_t a1)
{
  return Dictionary.init(dictionaryLiteral:)(a1);
}

uint64_t sub_1000ECF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s7Weather24LocationCompositionStateOwst_0(a1, 1, 1, a4);
}

uint64_t sub_1000ECF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 112) = v3;
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v5, v4);
}

uint64_t sub_1000ECF60()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_1000ECF68()
{
  return type metadata accessor for NewsChannel(0);
}

uint64_t sub_1000ECF70()
{
  return type metadata accessor for AutomationInfo(0);
}

void sub_1000ECF80(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
}

void sub_1000ECFA4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 91;
  *(_QWORD *)(v0 - 112) = 0xE100000000000000;
}

double sub_1000ECFB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v2;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

unint64_t sub_1000ECFCC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 3;
  return sub_1004FBC90();
}

uint64_t sub_1000ECFD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000ECFF8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000ED004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Measurement.< infix<A, B>(_:_:)(a1, a2, a3, a3, a3);
}

void sub_1000ED010(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000787D4(a1, a2, v2);
}

uint64_t sub_1000ED018()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v0 + *(int *)(v1 + 32)) & 0xFFFFFFFFFFFFFFBLL);
}

void sub_1000ED02C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000ED048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return sub_100146618(a1, v9, (uint64_t)&a9);
}

uint64_t sub_1000ED058(uint64_t a1)
{
  return FixedSizeTypeBinaryCodable.write(to:)(a1);
}

__n128 *sub_1000ED060(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return a1 + 3;
}

__n128 sub_1000ED07C(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 224);
  a1[1] = result;
  return result;
}

uint64_t sub_1000ED098()
{
  return type metadata accessor for WeatherDataOverrides(0);
}

double sub_1000ED0A0()
{
  _QWORD *v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*v0).n128_u64[0];
  return result;
}

uint64_t sub_1000ED0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 88));
}

void sub_1000ED0B8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1008EC420(v2, *(char **)(v3 - 192), *(_QWORD *)(v3 - 168), v0, v1, *(_DWORD *)(v3 - 204) & 1);
}

uint64_t sub_1000ED0D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BF398(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000ED0E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000ED0FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1000ED110(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

void sub_1000ED11C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000ED124(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

void sub_1000ED124(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t v6;

  a4(&v6);
  v5 = *a1 + 4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, (char *)&v6 + 4);
  *a1 = v5;
  sub_100099960();
}

uint64_t sub_1000ED170@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000ED178(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1000ED178@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = sub_1000D92EC(a1);
  *a2 = result;
  return result;
}

void sub_1000ED19C()
{
  uint64_t v0;

  sub_1000ED1A4(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1000ED1A4(uint64_t (*a1)(void))
{
  sub_1000D92EC(a1);
  sub_10004A298();
}

void sub_1000ED1BC()
{
  uint64_t v0;

  sub_1000ED1C4(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1000ED1C4(uint64_t (*a1)(void))
{
  sub_1000D92EC(a1);
  sub_10004A298();
}

uint64_t sub_1000ED1E0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

void sub_1000ED1E8()
{
  sub_1005FEB60();
}

BOOL sub_1000ED1F4(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

double sub_1000ED218()
{
  return 0.0;
}

_QWORD *sub_1000ED238(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

void sub_1000ED244(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100080C0C(a1, a2, v2);
}

uint64_t sub_1000ED26C(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_1000ED27C()
{
  return type metadata accessor for RowElementStyle(0);
}

uint64_t sub_1000ED28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return type metadata accessor for ModifiedContent(255, a2, v2);
}

uint64_t sub_1000ED298()
{
  return type metadata accessor for NextHourPrecipitationChartViewModel(0);
}

double sub_1000ED2A8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000ED2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = v0;
  return v1;
}

uint64_t sub_1000ED2D0(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2[23] = result;
  v2[24] = a2;
  v2[25] = 58;
  v2[26] = 0xE100000000000000;
  v2[27] = 0;
  v2[28] = 0xE000000000000000;
  return result;
}

uint64_t sub_1000ED2F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable.hash(into:)(v1, v2, a1);
}

uint64_t sub_1000ED300()
{
  return type metadata accessor for LocationFooterViewModel(0);
}

uint64_t sub_1000ED310()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000ED338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.write(to:)(a1, a2, a3);
}

uint64_t sub_1000ED340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 288));
}

void sub_1000ED34C()
{
  sub_100267F78();
}

uint64_t sub_1000ED358(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000ED364()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_1000ED388()
{
  return OSSignpostID.init(log:)();
}

uint64_t sub_1000ED394()
{
  return type metadata accessor for ApparentPrecipitationIntensityCategory(0);
}

void sub_1000ED3B0(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_10007C75C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000ED3B8()
{
  return type metadata accessor for WeatherConditionBackgroundModifier(0);
}

uint64_t sub_1000ED3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v5, v4, a4);
}

uint64_t sub_1000ED3CC(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_1000ED3D8()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1000ED3E4()
{
  uint64_t v0;

  return static Calendar.currentCalendar(with:)(v0);
}

uint64_t sub_1000ED3F0(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(a1, 0, 1, *(_QWORD *)(v1 - 664));
  return 0;
}

void sub_1000ED420(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007802C(v3, a2, a3);
}

uint64_t sub_1000ED428(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000ED430(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000BA294(a3);
}

uint64_t sub_1000ED438@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t sub_1000ED444@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_1000ED450()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 3);
}

uint64_t sub_1000ED460()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000ED46C()
{
  return type metadata accessor for ForegroundEffect(0);
}

uint64_t sub_1000ED47C()
{
  return type metadata accessor for ModalViewState(0);
}

uint64_t sub_1000ED498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_1000ED4A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  sub_1000787D4(v3, a2, v2);
}

void sub_1000ED4B0(unint64_t *a1)
{
  uint64_t *v1;

  sub_10029E5F4(a1, v1);
}

uint64_t sub_1000ED4B8(uint64_t a1)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwet_0(v1, 1, a1);
}

uint64_t sub_1000ED4CC()
{
  return type metadata accessor for WeatherStatisticsModel(0);
}

uint64_t sub_1000ED4D4()
{
  uint64_t v0;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(v0 - 184), 1, 1, *(_QWORD *)(v0 - 384));
}

uint64_t sub_1000ED50C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, *(_QWORD *)(v2 + 432));
}

uint64_t sub_1000ED520()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000ED52C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

void sub_1000ED538(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000ED540(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_1000ED540(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  sub_10004A298();
}

uint64_t sub_1000ED564(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ED588(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))&Calendar.isDateInTomorrow(_:)) & 1;
}

uint64_t sub_1000ED588(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10009E540();
  DayWeather.date.getter(v7);
  LOBYTE(a3) = a3(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  return a3 & 1;
}

void sub_1000ED624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int EnumCaseMultiPayload;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  sub_1000986AC();
  v131 = v2;
  v132 = v1;
  v4 = v3;
  v136 = v5;
  v133 = (uint64_t *)v6;
  v7 = sub_1000D91D0();
  v129 = *(_QWORD *)(v7 - 8);
  v130 = v7;
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000D0278(v9, v111);
  sub_1000BA294(&qword_100BC6B68);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_10009BE88(v11, v111);
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v12);
  sub_100088FDC();
  v118 = v13;
  v14 = sub_10009876C();
  type metadata accessor for WeatherData.WeatherStatisticsState(v14);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  sub_1000986FC();
  v115 = v16;
  sub_10009D2A4();
  __chkstk_darwin(v17);
  sub_100079F7C();
  v116 = v18;
  sub_1000BA294(&qword_100BFB1E0);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_100088FDC();
  v121 = v20;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  v134 = (uint64_t)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v23);
  sub_100079F7C();
  v124 = v24;
  v122 = sub_1000C22D0();
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_1000986FC();
  v117 = v26;
  sub_10009D2A4();
  __chkstk_darwin(v27);
  sub_1000860D0();
  v119 = v28;
  sub_10009D2A4();
  __chkstk_darwin(v29);
  sub_1000860D0();
  v120 = v30;
  sub_10009D2A4();
  __chkstk_darwin(v31);
  sub_1000860D0();
  v125 = v32;
  sub_10009D2A4();
  __chkstk_darwin(v33);
  sub_100079F7C();
  v126 = v34;
  sub_1000DC4C8();
  sub_1000B42B0();
  __chkstk_darwin(v35);
  v127 = (uint64_t)&v111 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = (int *)sub_1000C1A18();
  sub_1000B42B0();
  __chkstk_darwin(v38);
  sub_10009883C();
  v41 = (_QWORD *)(v39 - v40);
  __chkstk_darwin(v42);
  v44 = (char *)&v111 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v111 - v46;
  v48 = type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v49);
  sub_10009883C();
  v52 = v50 - v51;
  __chkstk_darwin(v53);
  sub_1000F3FD8();
  __chkstk_darwin(v54);
  v55 = v4;
  v137 = v4;
  v56 = (uint64_t)v133;
  v135 = (uint64_t)&v111 - v57;
  sub_10009F7F4((uint64_t)v133, (uint64_t)&v111 - v57);
  sub_10009F7F4(v56, v0);
  if (swift_getEnumCaseMultiPayload(v0) == 1)
  {
    v114 = v52;
    v113 = v41;
    v133 = (uint64_t *)v44;
    v58 = v123;
    v59 = sub_1000BA294(&qword_100BC3358);
    v60 = v0 + *(int *)(v59 + 48);
    v61 = v0 + *(int *)(v59 + 64);
    v62 = sub_1000878D0();
    sub_10007C77C(v62, v63, v64);
    sub_10007C77C(v60, v127, type metadata accessor for PreprocessedWeatherData);
    v65 = v61;
    v66 = v126;
    sub_10007C77C(v65, v126, type metadata accessor for NewsDataModel);
    sub_1000989F8();
    v67 = v132;
    sub_10009E3E0();
    v68 = v124;
    sub_1000EED10(v136, v67, v55);
    swift_bridgeObjectRelease();
    sub_100088FC8(v68, 1, v48);
    if (!v69)
    {
      v111 = v59;
      v112 = v48;
      v77 = v114;
      sub_10007C77C(v68, v114, type metadata accessor for LocationWeatherDataState);
      v78 = v133;
      sub_100095B78((uint64_t)v47, (uint64_t)v133, type metadata accessor for WeatherData);
      sub_100095B78(v66, v125, type metadata accessor for NewsDataModel);
      v79 = v121;
      sub_1000F9CD4(v121);
      v80 = type metadata accessor for WeatherStatisticsModel(0);
      v81 = _s7Weather24LocationCompositionStateOwet_0(v79, 1, v80);
      v82 = v81;
      sub_1000988A8(v81, &qword_100BFB1E0);
      v83 = v58;
      if (v82 == 1)
      {
        v84 = v118;
        sub_1000EADE8();
        v85 = sub_100088FC8(v84, 1, (uint64_t)v37);
        if (v69)
        {
          sub_1000B3B00(v85, &qword_100BC3460);
        }
        else
        {
          v86 = v115;
          sub_100095B78(v84 + v37[8], v115, type metadata accessor for WeatherData.WeatherStatisticsState);
          sub_100098AD4(v87, type metadata accessor for WeatherData);
          v88 = v116;
          sub_10009BD30(v86, v116);
          v90 = *v78;
          v89 = v78[1];
          v91 = v113;
          sub_10003773C((uint64_t)v78 + v37[5], (uint64_t)v113 + v37[5], &qword_100BC3340);
          v92 = v37[6];
          v93 = (char *)v133 + v92;
          v94 = (char *)v91 + v92;
          v95 = type metadata accessor for WeatherDataModel(0);
          v83 = v58;
          v96 = (uint64_t)v133;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v94, v93, v95);
          sub_100095B78(v88, (uint64_t)v91 + v37[8], type metadata accessor for WeatherData.WeatherStatisticsState);
          sub_100095B78(v96 + v37[7], (uint64_t)v91 + v37[7], type metadata accessor for WeatherData.CachingState);
          sub_10003773C(v96 + v37[9], (uint64_t)v91 + v37[9], &qword_100BC3350);
          *v91 = v90;
          v91[1] = v89;
          v66 = v126;
          sub_10009EF94();
          sub_1000215BC(v88, type metadata accessor for WeatherData.WeatherStatisticsState);
          sub_100079F9C(v96);
          sub_1000992F8((uint64_t)v91, v96);
        }
        v77 = v114;
      }
      sub_1000FB2B0();
      sub_10009EFA8(v77);
      sub_100098AD4(v97, type metadata accessor for WeatherData);
      sub_10009EFA8(v135);
      sub_100088FC8(v83, 1, v122);
      if (v69)
      {
        v98 = v127;
        sub_1000215BC(v66, type metadata accessor for NewsDataModel);
        sub_1000988A8(v99, &qword_100BC6B68);
      }
      else
      {
        v100 = v120;
        sub_1000992F8(v83, v120);
        v101 = v119;
        sub_1000C3608(v100, v119);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v101);
        if (EnumCaseMultiPayload == 1)
        {
          v98 = v127;
          swift_bridgeObjectRelease();
          v103 = v117;
          sub_10007C77C(v66, v117, type metadata accessor for NewsDataModel);
          v104 = swift_getEnumCaseMultiPayload(v103);
          v72 = v130;
          v74 = v128;
          v73 = v129;
          v75 = v135;
          if ((_DWORD)v104 == 1)
          {
            sub_100079F9C(v120);
            sub_100079F9C(v103);
          }
          else
          {
            v110 = v125;
            sub_100098AD4(v104, type metadata accessor for NewsDataModel);
            sub_10009EFA8(v103);
            sub_1000D0D68(v120, v110);
          }
          goto LABEL_19;
        }
        v98 = v127;
        sub_100079F9C(v100);
        sub_100079F9C(v66);
        sub_100079F9C(v101);
      }
      v72 = v130;
      v74 = v128;
      v73 = v129;
      v75 = v135;
LABEL_19:
      v105 = v75 + *(int *)(v111 + 64);
      sub_10007C77C((uint64_t)v133, v75, type metadata accessor for WeatherData);
      sub_1000F4500(v98, v106, type metadata accessor for PreprocessedWeatherData);
      sub_10007C77C(v125, v105, type metadata accessor for NewsDataModel);
      sub_10009525C(v75, v112);
      goto LABEL_20;
    }
    sub_1000215BC(v66, type metadata accessor for NewsDataModel);
    sub_1000998DC(v70, type metadata accessor for PreprocessedWeatherData);
    sub_1000215BC((uint64_t)v47, type metadata accessor for WeatherData);
    sub_1000988A8(v71, &qword_100BC3380);
    v72 = v130;
    v74 = v128;
    v73 = v129;
    v75 = v135;
  }
  else
  {
    v76 = sub_1000989F8();
    sub_1000998DC(v76, type metadata accessor for LocationWeatherDataState);
    v72 = v130;
    v74 = v128;
    v73 = v129;
    v75 = v135;
  }
LABEL_20:
  v107 = v134;
  sub_1000C3608(v75, v134);
  sub_1000988B8(v107, 0);
  sub_10009E3E0();
  sub_1000987A8();
  sub_1000EDE8C();
  v108 = sub_100099360();
  v109 = UUID.init()(v108);
  UUID.uuidString.getter(v109);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v72);
  sub_100079F9C(v75);
  sub_100098640();
}

void sub_1000EDE8C()
{
  sub_10016B66C();
}

void sub_1000EDEA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10004A2B0(a1, a2, a3);
  sub_100089000(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_10004A298();
}

uint64_t sub_1000EDED4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000EDEDC(uint64_t (*a1)(void))
{
  sub_1000992C4();
  return a1();
}

uint64_t sub_1000EDF18()
{
  uint64_t v0;

  return sub_1000EDF20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000EDF20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  if (a2 == 1)
    return 1701736302;
  v3 = sub_1000EE9A0();
  return ShortDescribable.description.getter(&type metadata for CountryCode, v3);
}

_OWORD *sub_1000EDF74(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v122)(char *, char *);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  int *v127;

  if (a1 != a2)
  {
    sub_1000215BC((uint64_t)a1, type metadata accessor for LocationWeatherDataState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = (int *)type metadata accessor for WeatherData(0);
      v9 = v8[5];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Locale(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v11, 1, v12))
      {
        v13 = sub_1000BA294(&qword_100BC3340);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v10, 0, 1, v12);
      }
      v18 = v8[6];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      v22 = v8[7];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = sub_1000BA294(&qword_100BC3348);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v24, 1, v25))
      {
        v26 = type metadata accessor for WeatherData.CachingState(0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v27 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v23, v24, v27);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v23, 0, 1, v25);
      }
      v28 = v8[8];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v31 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
      if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
      {
        v32 = type metadata accessor for WeatherStatisticsModel(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
        swift_storeEnumTagMultiPayload(v29, v31, 1);
      }
      else
      {
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      v33 = v8[9];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = type metadata accessor for WeatherDataOverrides(0);
      v125 = a3;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v36))
      {
        v37 = sub_1000BA294(&qword_100BC3350);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v38 = type metadata accessor for Date(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v35, 1, v38))
        {
          v39 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v34, v35, v38);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v38);
        }
        v40 = *(int *)(v36 + 20);
        v41 = &v34[v40];
        v42 = &v35[v40];
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v42, 1, v38))
        {
          v43 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v41, v42, v38);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)v41, 0, 1, v38);
        }
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v36);
      }
      v124 = sub_1000BA294(&qword_100BC3358);
      v44 = *(int *)(v124 + 48);
      v45 = (char *)a1 + v44;
      v46 = (char *)a2 + v44;
      v47 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
      v48 = type metadata accessor for PreprocessedWeatherData(0);
      *(_QWORD *)&v45[*(int *)(v48 + 20)] = *(_QWORD *)&v46[*(int *)(v48 + 20)];
      v127 = (int *)v48;
      v49 = *(int *)(v48 + 24);
      v50 = &v45[v49];
      v51 = &v46[v49];
      v52 = *(_OWORD *)&v46[v49 + 16];
      *(_OWORD *)v50 = *(_OWORD *)&v46[v49];
      *((_OWORD *)v50 + 1) = v52;
      *((_OWORD *)v50 + 2) = *(_OWORD *)&v46[v49 + 32];
      v53 = type metadata accessor for FeelsLikeComponentPreprocessedDataModel(0);
      v54 = *(int *)(v53 + 28);
      v55 = &v50[v54];
      v56 = &v51[v54];
      v57 = type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference(0);
      v126 = v45;
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v56, 1, v57))
      {
        v58 = sub_1000BA294(&qword_100BC3360);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v55 = *(_OWORD *)v56;
        v59 = *(int *)(v57 + 20);
        v60 = &v55[v59];
        v61 = &v56[v59];
        v62 = type metadata accessor for TemperatureScaleConfiguration(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
        v63 = (int *)type metadata accessor for FeelsLikeComponentViewModel.SignificantDifference.Variance(0);
        *(_QWORD *)&v60[v63[5]] = *(_QWORD *)&v61[v63[5]];
        *(_QWORD *)&v60[v63[6]] = *(_QWORD *)&v61[v63[6]];
        *(_QWORD *)&v60[v63[7]] = *(_QWORD *)&v61[v63[7]];
        *(_OWORD *)&v60[v63[8]] = *(_OWORD *)&v61[v63[8]];
        v60[v63[9]] = v61[v63[9]];
        v45 = v126;
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v55, 0, 1, v57);
      }
      *(_OWORD *)&v50[*(int *)(v53 + 32)] = *(_OWORD *)&v51[*(int *)(v53 + 32)];
      v64 = v127[7];
      v65 = &v45[v64];
      v66 = &v46[v64];
      *(_QWORD *)&v45[v64] = *(_QWORD *)&v46[v64];
      v67 = *(int *)(type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0) + 20);
      v68 = &v65[v67];
      v69 = &v66[v67];
      v70 = type metadata accessor for WeatherDescription(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v69, 1, v70))
      {
        v71 = sub_1000BA294(&qword_100BC3368);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v68, v69, v70);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v68, 0, 1, v70);
      }
      v72 = v127[8];
      v73 = &v45[v72];
      v74 = &v46[v72];
      v75 = *(_OWORD *)&v46[v72 + 16];
      *(_OWORD *)v73 = *(_OWORD *)&v46[v72];
      *((_OWORD *)v73 + 1) = v75;
      v76 = *(_OWORD *)&v46[v72 + 48];
      *((_OWORD *)v73 + 2) = *(_OWORD *)&v46[v72 + 32];
      *((_OWORD *)v73 + 3) = v76;
      v77 = *(int *)(type metadata accessor for ListPreprocessedDataModel(0) + 32);
      v78 = &v73[v77];
      v79 = &v74[v77];
      v80 = type metadata accessor for Date(0);
      v122 = *(void (**)(char *, char *))(*(_QWORD *)(v80 - 8) + 32);
      v123 = v80;
      v122(v78, v79);
      v81 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
      v82 = *(int *)(v81 + 20);
      v83 = &v78[v82];
      v84 = &v79[v82];
      v85 = type metadata accessor for Elevation(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v84, 1, v85))
      {
        v86 = sub_1000BA294(&qword_100BC3370);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v83, 0, 1, v85);
      }
      v87 = *(int *)(v81 + 24);
      v88 = &v78[v87];
      v89 = &v79[v87];
      v90 = type metadata accessor for BackgroundMoonData(0);
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v89, 1, v90))
      {
        v91 = sub_1000BA294(&qword_100BC3378);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v88, 0, 1, v90);
      }
      memcpy(&v126[v127[9]], &v46[v127[9]], 0x70uLL);
      v92 = v127[10];
      v93 = &v126[v92];
      v94 = &v46[v92];
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(&v126[v92], &v46[v92], v70);
      v95 = type metadata accessor for UVIndexComponentPreprocessedDataModel(0);
      *(_OWORD *)&v93[*(int *)(v95 + 20)] = *(_OWORD *)&v94[*(int *)(v95 + 20)];
      v96 = v127[11];
      v97 = &v126[v96];
      v98 = &v46[v96];
      v99 = *((_OWORD *)v98 + 1);
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *((_OWORD *)v97 + 1) = v99;
      *((_OWORD *)v97 + 2) = *((_OWORD *)v98 + 2);
      v100 = v127[12];
      v101 = &v126[v100];
      v102 = &v46[v100];
      v103 = type metadata accessor for PressureTrend(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
      v104 = (int *)type metadata accessor for PressureComponentPreprocessedDataModel(0);
      *(_OWORD *)&v101[v104[5]] = *(_OWORD *)&v102[v104[5]];
      *(_OWORD *)&v101[v104[6]] = *(_OWORD *)&v102[v104[6]];
      *(_OWORD *)&v101[v104[7]] = *(_OWORD *)&v102[v104[7]];
      *(_QWORD *)&v101[v104[8]] = *(_QWORD *)&v102[v104[8]];
      *(_OWORD *)&v101[v104[9]] = *(_OWORD *)&v102[v104[9]];
      memcpy(&v126[v127[13]], &v46[v127[13]], 0xE8uLL);
      v105 = v127[14];
      v106 = &v126[v105];
      v107 = &v46[v105];
      ((void (*)(char *, char *, uint64_t))v122)(&v126[v105], &v46[v105], v123);
      v108 = *(int *)(v81 + 20);
      v109 = &v106[v108];
      v110 = &v107[v108];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)&v107[v108], 1, v85))
      {
        v111 = sub_1000BA294(&qword_100BC3370);
        memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v109, v110, v85);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v109, 0, 1, v85);
      }
      v112 = *(int *)(v81 + 24);
      v113 = &v106[v112];
      v114 = &v107[v112];
      if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v114, 1, v90))
      {
        v115 = sub_1000BA294(&qword_100BC3378);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v113, v114, v90);
        _s7Weather24LocationCompositionStateOwst_0((uint64_t)v113, 0, 1, v90);
      }
      memcpy(&v126[v127[15]], &v46[v127[15]], 0x70uLL);
      v116 = *(int *)(v124 + 64);
      v117 = (char *)a1 + v116;
      v118 = (char *)a2 + v116;
      v119 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(v118, v119))
      {
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        v120 = type metadata accessor for News(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v117, v118, v120);
        swift_storeEnumTagMultiPayload(v117, v119, 0);
      }
      v15 = a1;
      v16 = v125;
      v17 = 1;
      goto LABEL_49;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for NewsDataModel(0);
      if (swift_getEnumCaseMultiPayload(a2, v7))
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v14 = type metadata accessor for News(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        swift_storeEnumTagMultiPayload(a1, v7, 0);
      }
      v15 = a1;
      v16 = a3;
      v17 = 0;
LABEL_49:
      swift_storeEnumTagMultiPayload(v15, v16, v17);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1000EE974(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t sub_1000EE980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000EE988(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

double sub_1000EE98C(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 != 1)
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

unint64_t sub_1000EE9A0()
{
  unint64_t result;

  result = qword_100BEA2F0;
  if (!qword_100BEA2F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_100BEA2F0);
  }
  return result;
}

void sub_1000EE9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 2u:
      v3 = type metadata accessor for Locale(0);
      goto LABEL_20;
    case 3u:
      v5 = type metadata accessor for ActivityAction(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v5);
      if (EnumCaseMultiPayload == 1)
      {
        v10 = type metadata accessor for PreviewLocation(0);
        switch(swift_getEnumCaseMultiPayload(v2, v10))
        {
          case 0u:
            goto LABEL_14;
          case 1u:
            v3 = type metadata accessor for LocationOfInterest(0);
            goto LABEL_20;
          case 2u:

            swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
            swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));
            swift_bridgeObjectRelease(*(_QWORD *)(v2 + 48));
            v2 += *(int *)(type metadata accessor for SearchLocation(0) + 32);
            v11 = type metadata accessor for Location(0);
            goto LABEL_16;
          case 3u:
            v4 = *(_QWORD *)(v2 + 24);
            goto LABEL_9;
          default:
            return;
        }
        return;
      }
      if (EnumCaseMultiPayload)
        return;
      v7 = type metadata accessor for SavedLocation(0);
      if (swift_getEnumCaseMultiPayload(v2, v7) == 1)
        v3 = type metadata accessor for SavedLocation.Placeholder(0);
      else
LABEL_14:
        v3 = type metadata accessor for Location(0);
      goto LABEL_20;
    case 4u:
      v4 = *(_QWORD *)(v2 + 8);
      goto LABEL_9;
    case 8u:
      v4 = *(_QWORD *)(v2 + 8);
      if (v4 >= 2)
LABEL_9:
        swift_bridgeObjectRelease(v4);
      return;
    case 0xAu:
      v8 = type metadata accessor for ConfiguredUnitsAction(0);
      v9 = swift_getEnumCaseMultiPayload(v2, v8);
      if (v9 != 1)
      {
        if (v9)
          return;
        v3 = type metadata accessor for ConfiguredUnit(0);
LABEL_20:
        v15 = v3;
        v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
        v14 = v2;
        goto LABEL_21;
      }
      v11 = type metadata accessor for UnitConfiguration.Temperature(0);
LABEL_16:
      v12 = v11;
      if (!_s7Weather24LocationCompositionStateOwet_0(v2, 1, v11))
      {
        v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
        v14 = v2;
        v15 = v12;
LABEL_21:
        v13(v14, v15);
      }
      return;
    default:
      return;
  }
}

uint64_t sub_1000EEBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;

  v4 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
  swift_bridgeObjectRetain(v7);
  v9 = Location.id.getter(v8);
  v11 = v10;
  sub_1000EED10(v9, v10, v7);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v7);
  v12 = type metadata accessor for LocationWeatherDataState(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v12) == 1)
  {
    sub_100021A14((uint64_t)v6, &qword_100BC3380);
LABEL_6:
    v15 = sub_1000EED1C(a1, a2);
    return v15 & 1;
  }
  if (swift_getEnumCaseMultiPayload(v6, v12) != 1)
  {
    sub_1000215BC((uint64_t)v6, type metadata accessor for LocationWeatherDataState);
    goto LABEL_6;
  }
  v13 = sub_1000BA294(&qword_100BC3358);
  v14 = (uint64_t)&v6[*(int *)(v13 + 48)];
  sub_1000215BC((uint64_t)&v6[*(int *)(v13 + 64)], type metadata accessor for NewsDataModel);
  sub_1000215BC(v14, type metadata accessor for PreprocessedWeatherData);
  sub_1000215BC((uint64_t)v6, type metadata accessor for WeatherData);
  v15 = 0;
  return v15 & 1;
}

uint64_t sub_1000EED10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1007D4A98(a1, a2, a3, type metadata accessor for LocationWeatherDataState);
}

uint64_t sub_1000EED1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v21;

  v3 = sub_1000BA294(&qword_100BCD680);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  sub_1000A6114(a2, (uint64_t)&v21 - v7);
  sub_100037768((uint64_t)v8, (uint64_t)v6, &qword_100BCD680);
  v9 = type metadata accessor for Location.Identifier(0);
  v10 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v6, 1, v9);
  if ((_DWORD)v10 == 1)
  {
    sub_100021A14((uint64_t)v6, &qword_100BCD680);
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v12 = Location.Identifier.id.getter(v10);
    v13 = v14;
    v11 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
  }
  v15 = Location.id.getter(v11);
  v17 = v16;
  if (v13)
  {
    if (v12 == v15 && v13 == v16)
      v19 = 1;
    else
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v15, v16, 0);
    swift_bridgeObjectRelease(v17);
    sub_100021A14((uint64_t)v8, &qword_100BCD680);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    sub_100021A14((uint64_t)v8, &qword_100BCD680);
    swift_bridgeObjectRelease(v17);
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_1000EEEA8(uint64_t a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for ContentStatusBanner(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(a1, 1, v4))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5 >= 2)
      swift_bridgeObjectRelease(v5);
    v6 = a1 + *(int *)(v4 + 24);
    v7 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(a1 + a2[5]));
  v8 = a1 + a2[6];
  sub_1000D31C4(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_BYTE *)(v8 + 32));
  v9 = (_QWORD *)(a1 + a2[7]);
  v10 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = (char *)v9 + *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release(*v9);
  }
  v13 = a1 + a2[8];
  v14 = *(_QWORD *)(v13 + 16);
  if (v14 >= 2)
    swift_bridgeObjectRelease(v14);
  v15 = v13 + *(int *)(v4 + 24);
  v16 = type metadata accessor for Date(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = *(_QWORD *)(v13 + *(int *)(sub_1000BA294(&qword_100BEE180) + 28));
  return swift_release(v17);
}

_QWORD *sub_1000EF030(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  _BYTE *v38;
  _OWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000BA294(&qword_100BC3620);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v8 = a2 + 1;
    v9 = a2[2];
    if (v9 >= 2)
    {
      a1[1] = *v8;
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
    }
    else
    {
      *(_OWORD *)(a1 + 1) = *(_OWORD *)v8;
    }
    v10 = *(int *)(v6 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v12, 1, v13))
    {
      v14 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v11, 0, 1, v13);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v15 = a3[5];
  v16 = *(_OWORD *)((char *)a2 + v15 + 24);
  *(_OWORD *)((char *)a1 + v15 + 24) = v16;
  (**(void (***)(void))(v16 - 8))();
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  v22 = *((_QWORD *)v19 + 2);
  v23 = *((_QWORD *)v19 + 3);
  v24 = v19[32];
  sub_1000D55E4(*(_QWORD *)v19, v21, v22, v23, v24);
  *(_QWORD *)v18 = v20;
  *((_QWORD *)v18 + 1) = v21;
  *((_QWORD *)v18 + 2) = v22;
  *((_QWORD *)v18 + 3) = v23;
  v18[32] = v24;
  v25 = a3[7];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = sub_1000BA294(&qword_100BC37E0);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v26[17] = v27[17];
    v26[18] = v27[18];
    v29 = *(int *)(type metadata accessor for DisplayMetrics(0) + 36);
    v30 = &v26[v29];
    v31 = &v27[v29];
    v32 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = 1;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)v27;
    swift_retain();
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v28, v33);
  v34 = a3[8];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *((_BYTE *)a2 + v34);
  v38 = (char *)a1 + v34;
  *v38 = v37;
  v39 = v38 + 8;
  v40 = v36 + 8;
  v41 = *((_QWORD *)v36 + 2);
  if (v41 >= 2)
  {
    *((_QWORD *)v35 + 1) = *v40;
    *((_QWORD *)v35 + 2) = v41;
    swift_bridgeObjectRetain(v41);
  }
  else
  {
    *v39 = *(_OWORD *)v40;
  }
  v42 = *(int *)(v6 + 24);
  v43 = &v35[v42];
  v44 = &v36[v42];
  v45 = type metadata accessor for Date(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v44, 1, v45))
  {
    v46 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v43, 0, 1, v45);
  }
  v47 = sub_1000BA294(&qword_100BEE180);
  *(_QWORD *)&v35[*(int *)(v47 + 28)] = *(_QWORD *)&v36[*(int *)(v47 + 28)];
  swift_retain();
  return a1;
}

void sub_1000EF360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29[10];
  uint64_t v30;
  uint64_t v31;

  sub_1000986AC();
  v30 = v1;
  v31 = v2;
  type metadata accessor for ModalViewState.LocationDetailModal(0);
  sub_1000B42B0();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v29[7] = v4;
  v5 = sub_10009876C();
  v29[8] = type metadata accessor for ModalViewState.MapViewModal(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_1000D0278(v7, v29[0]);
  v29[5] = sub_1000BA294(&qword_100C01D68);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100088FDC();
  v29[9] = v9;
  sub_1000BA294(&qword_100BC5F58);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_1000986FC();
  v29[3] = v11;
  __chkstk_darwin(v12);
  v29[6] = (uint64_t)v29 - v13;
  v14 = sub_10009876C();
  v29[2] = type metadata accessor for LocationPreviewViewState(v14);
  sub_1000B42B0();
  __chkstk_darwin(v15);
  v29[4] = (uint64_t)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10009876C();
  v18 = type metadata accessor for ModalViewState(v17);
  sub_1000B42B0();
  __chkstk_darwin(v19);
  sub_10009883C();
  __chkstk_darwin(v20);
  sub_10009DF40();
  __chkstk_darwin(v21);
  sub_10009E3CC();
  __chkstk_darwin(v22);
  sub_1000B2F10();
  __chkstk_darwin(v23);
  sub_1000C0E4C();
  __chkstk_darwin(v24);
  sub_1000BA294(&qword_100C01D70);
  sub_1000B42B0();
  __chkstk_darwin(v25);
  sub_100079F58();
  v27 = v0 + *(int *)(v26 + 48);
  sub_100080C0C(v30, v0, type metadata accessor for ModalViewState);
  sub_100080C0C(v31, v27, type metadata accessor for ModalViewState);
  v28 = (char *)sub_1000EF55C + 4 * byte_1009C366E[swift_getEnumCaseMultiPayload(v0, v18)];
  __asm { BR              X10 }
}

void sub_1000EF55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_100080C0C(v0, v2, type metadata accessor for ModalViewState);
  if (sub_1000DF930())
  {
    sub_1000215BC(v2, type metadata accessor for LocationPreviewViewState);
    sub_100021A14(v0, &qword_100C01D70);
  }
  else
  {
    v5 = *(_QWORD *)(v3 - 144);
    sub_10007802C(v1, v5, type metadata accessor for LocationPreviewViewState);
    sub_10063001C(v2, v5);
    if ((v6 & 1) != 0)
    {
      v7 = *(int *)(*(_QWORD *)(v3 - 160) + 20);
      sub_100381D74(v2 + v7, v5 + v7);
    }
    sub_10009EFA8(v5);
    sub_10009EFA8(v2);
    sub_100098AD4(v4, type metadata accessor for ModalViewState);
  }
  sub_100098640();
}

uint64_t sub_1000EF934()
{
  uint64_t *v0;

  return sub_1000BA294(v0);
}

void sub_1000EF944()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100037768(v1, v2, v0);
}

unint64_t sub_1000EF954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = v1;
  *(_QWORD *)(v2 - 104) = v0;
  *(_BYTE *)(v2 - 81) = 0;
  return sub_1001F6050();
}

uint64_t sub_1000EF970()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

void sub_1000EF984(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100021A14(*(_QWORD *)(v2 - 200), a2);
}

uint64_t sub_1000EF98C()
{
  return type metadata accessor for NewsArticle(0);
}

uint64_t sub_1000EF994()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 - 144))(v0);
}

uint64_t sub_1000EF9BC()
{
  return type metadata accessor for WeatherDataModel(0);
}

void sub_1000EF9CC(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_10007802C(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000EF9D8()
{
  return dispatch thunk of Column.value.getter();
}

uint64_t sub_1000EF9E4(uint64_t result)
{
  _WORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = result;
  *(_QWORD *)(v2 - 120) = 0;
  *(_QWORD *)(v2 - 224) = v1;
  *v1 = 770;
  *(_QWORD *)(v2 - 112) = v1 + 1;
  return result;
}

uint64_t sub_1000EFA00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000EFA0C()
{
  return type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
}

uint64_t sub_1000EFA14()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t sub_1000EFA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000EFA30@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

unint64_t sub_1000EFA3C()
{
  uint64_t v0;

  return sub_1000991C8(v0);
}

uint64_t sub_1000EFA48(uint64_t a1)
{
  uint64_t v1;

  _s7Weather24LocationCompositionStateOwst_0(v1, 1, 1, a1);
  return 0;
}

uint64_t sub_1000EFA70()
{
  uint64_t v0;
  uint64_t v1;

  return static Location.== infix(_:_:)(v1, v0);
}

double sub_1000EFA7C()
{
  return 60.0;
}

uint64_t sub_1000EFA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return static PlottableValue.value(_:_:)(a1, a2, a3, a4, a5, v5, v6);
}

uint64_t sub_1000EFA9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_1000EFAAC()
{
  return static NSNumberFormatter.percent.getter();
}

uint64_t sub_1000EFAB4()
{
  return type metadata accessor for BackgroundMoonData(0);
}

uint64_t sub_1000EFAD0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 448);
}

void sub_1000EFAEC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1000F9DDC(a1, v2, v1);
}

uint64_t sub_1000EFAF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10010E534(v1, a1 + *(_QWORD *)(v2 - 176));
}

uint64_t type metadata accessor for ModalViewState.LocationDetailModal(uint64_t a1)
{
  return sub_100098190(a1, qword_100C01BE8, (uint64_t)&nominal type descriptor for ModalViewState.LocationDetailModal);
}

uint64_t sub_1000EFB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10077A90C);
}

uint64_t sub_1000EFB28(uint64_t *a1, uint64_t (*a2)(void))
{
  return sub_10009BD28(*a1, a2);
}

uint64_t sub_1000EFB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_1000D55E4(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(int *)(a3 + 20);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    *v12 = *v13;
    swift_retain();
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v20 = *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v21 = (_QWORD *)(v18 + v20);
  v22 = (_QWORD *)(v19 + v20);
  v23 = type metadata accessor for ContentStatusBanner(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v22, 1, v23))
  {
    v24 = sub_1000BA294(&qword_100BC3620);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_BYTE *)v21 = *(_BYTE *)v22;
    v25 = v22 + 1;
    v26 = v22[2];
    if (v26 >= 2)
    {
      v21[1] = *v25;
      v21[2] = v26;
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      *(_OWORD *)(v21 + 1) = *(_OWORD *)v25;
    }
    v27 = *(int *)(v23 + 24);
    v28 = (char *)v21 + v27;
    v29 = (char *)v22 + v27;
    v30 = type metadata accessor for Date(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v30))
    {
      v31 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      _s7Weather24LocationCompositionStateOwst_0((uint64_t)v28, 0, 1, v30);
    }
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v21, 0, 1, v23);
  }
  v32 = sub_1000BA294(&qword_100BEE5E8);
  *(_QWORD *)(v18 + *(int *)(v32 + 28)) = *(_QWORD *)(v19 + *(int *)(v32 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_1000EFD78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t (*v64)(_QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v99;
  char v100;
  uint64_t v101;
  _BOOL8 v102;
  Swift::Int v103;
  unint64_t v104;
  char v105;
  Swift::Bool v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t result;
  int64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  _QWORD *v192;
  char v193[8];

  v181 = a2;
  v170 = sub_100098778();
  v169 = *(_QWORD *)(v170 - 8);
  sub_10009D98C();
  __chkstk_darwin(v3);
  sub_100088FDC();
  v171 = v4;
  v5 = sub_10009876C();
  type metadata accessor for TimeState(v5);
  sub_1000B42B0();
  __chkstk_darwin(v6);
  sub_100088FDC();
  v168 = v7;
  v8 = sub_10009876C();
  v166 = type metadata accessor for ModalViewState(v8);
  sub_1000B42B0();
  __chkstk_darwin(v9);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v10);
  sub_100079F7C();
  v165 = v11;
  v12 = sub_10009876C();
  type metadata accessor for LocationsState(v12);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100088FDC();
  v179 = v14;
  v15 = sub_10009876C();
  v158 = type metadata accessor for CurrentWeather(v15);
  v157 = *(_QWORD *)(v158 - 8);
  sub_10009D98C();
  __chkstk_darwin(v16);
  sub_100088FDC();
  v156 = v17;
  sub_1000BA294(&qword_100BC3460);
  sub_1000B42B0();
  __chkstk_darwin(v18);
  sub_100088FDC();
  v173 = v19;
  v20 = sub_10009876C();
  v172 = type metadata accessor for WeatherData(v20);
  sub_1000B42B0();
  __chkstk_darwin(v21);
  sub_100088FDC();
  v155 = v22;
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  __chkstk_darwin(v23);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v24);
  sub_100079F7C();
  v178 = v25;
  v26 = sub_10009876C();
  v188 = *(_QWORD *)(type metadata accessor for ContentStatusBanner(v26) - 8);
  sub_10009D98C();
  __chkstk_darwin(v27);
  sub_1000986FC();
  v190 = v28;
  __chkstk_darwin(v29);
  sub_100079F7C();
  v187 = v30;
  sub_1000BA294(&qword_100BC3468);
  sub_1000B42B0();
  v32 = __chkstk_darwin(v31);
  v34 = (int64_t *)((char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32);
  v36 = (int64_t *)((char *)&v152 - v35);
  v164 = sub_1000BE878();
  v176 = *(_QWORD *)(v164 - 8);
  sub_10009D98C();
  __chkstk_darwin(v37);
  sub_1000986FC();
  v177 = v38;
  __chkstk_darwin(v39);
  sub_100079F7C();
  v183 = v40;
  v41 = sub_10009876C();
  type metadata accessor for LocationViewerActiveLocationState(v41);
  sub_1000B42B0();
  __chkstk_darwin(v42);
  sub_1000986FC();
  v175 = v43;
  v45 = __chkstk_darwin(v44);
  v47 = (char *)&v152 - v46;
  __chkstk_darwin(v45);
  v49 = (char *)&v152 - v48;
  v180 = type metadata accessor for Location.Identifier(0);
  v174 = *(_QWORD *)(v180 - 8);
  sub_10009D98C();
  __chkstk_darwin(v50);
  sub_100088FDC();
  v182 = v51;
  v52 = sub_10009876C();
  v53 = type metadata accessor for ViewState.SecondaryViewState(v52);
  sub_1000B42B0();
  __chkstk_darwin(v54);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v55);
  sub_1000BA30C();
  __chkstk_darwin(v56);
  v58 = (int64_t *)((char *)&v152 - v57);
  v59 = (int *)type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v60);
  sub_1000986FC();
  sub_1000BA30C();
  __chkstk_darwin(v61);
  v63 = (char *)&v152 - v62;
  v184 = a1;
  v161 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
  sub_100078058(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, (uint64_t)&v152 - v62, v64);
  sub_1000C1264((uint64_t)&v63[v59[5]]);
  v163 = v53;
  if (swift_getEnumCaseMultiPayload(v58) == 1)
  {
    sub_1000215BC((uint64_t)v58, type metadata accessor for ViewState.SecondaryViewState);
LABEL_3:
    sub_1000215BC((uint64_t)v63, type metadata accessor for ViewState);
    v65 = 1;
    v66 = v181;
LABEL_53:
    v149 = sub_1000D1BFC();
    return sub_10009926C(v66, v65, v150, v149);
  }
  v67 = *v58;
  if (*(_QWORD *)&v63[v59[9] + 8] == 1)
  {
    v68 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v68, "userInterfaceIdiom");

    if ((v63[v59[7]] & 1) == 0)
    {
      swift_release(v67);
      goto LABEL_3;
    }
  }
  sub_1000215BC((uint64_t)v63, type metadata accessor for ViewState);
  v153 = v67 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState;
  sub_100078058(v67 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, (uint64_t)v49, type metadata accessor for LocationViewerActiveLocationState);
  sub_100078058((uint64_t)v49, (uint64_t)v47, type metadata accessor for LocationViewerActiveLocationState);
  v69 = v180;
  v70 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v47, 1, v180);
  v154 = v59;
  v159 = v67;
  v71 = v182;
  if (v70 == 1)
    static CurrentLocation.placeholderIdentifier.getter();
  else
    (*(void (**)(uint64_t, char *, uint64_t))(v174 + 32))(v182, v47, v69);
  v72 = v187;
  sub_1000215BC((uint64_t)v49, type metadata accessor for LocationViewerActiveLocationState);
  v73 = v184;
  sub_1000F1498(v184, v71, v183);
  v74 = *(_QWORD *)(v73 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_contentStatusBanners);
  v75 = *(_QWORD *)(v74 + 64);
  v185 = v74 + 64;
  v76 = 1 << *(_BYTE *)(v74 + 32);
  v77 = -1;
  if (v76 < 64)
    v77 = ~(-1 << v76);
  v78 = v77 & v75;
  v186 = (unint64_t)(v76 + 63) >> 6;
  v152 = v186 - 1;
  v189 = v74;
  swift_bridgeObjectRetain(v74);
  v191 = 0;
  v79 = &_swiftEmptyDictionarySingleton;
  v80 = v188;
  if (!v78)
    goto LABEL_14;
LABEL_12:
  v81 = __clz(__rbit64(v78));
  v78 &= v78 - 1;
  v82 = v81 | (v191 << 6);
LABEL_13:
  v83 = *(_QWORD *)(v189 + 56);
  v84 = (uint64_t *)(*(_QWORD *)(v189 + 48) + 16 * v82);
  v85 = *v84;
  v86 = v84[1];
  *v34 = *v84;
  v34[1] = v86;
  v87 = v83 + *(_QWORD *)(v80 + 72) * v82;
  v88 = sub_10009BE2C();
  sub_100078058(v87, (uint64_t)v34 + *(int *)(v88 + 48), type metadata accessor for ContentStatusBanner);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v34, 0, 1, v88);
  sub_10013BB0C(v85, v86);
  while (1)
  {
    sub_10009E8CC((uint64_t)v34, (uint64_t)v36, &qword_100BC3468);
    v94 = sub_10009BE2C();
    sub_100098750((uint64_t)v36);
    if (v95)
    {
      swift_release(v189);
      v117 = *(_QWORD *)(v184 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
      swift_bridgeObjectRetain(v117);
      v119 = Location.Identifier.id.getter(v118);
      v121 = v120;
      v122 = v178;
      sub_1000EED10(v119, v120, v117);
      swift_bridgeObjectRelease(v121);
      swift_bridgeObjectRelease(v117);
      v123 = v160;
      sub_1000F1F18(v122, v160);
      v124 = type metadata accessor for LocationWeatherDataState(0);
      if (_s7Weather24LocationCompositionStateOwet_0(v123, 1, v124) == 1)
      {
        sub_100021A14(v123, &qword_100BC3380);
        v125 = _s7Weather24LocationCompositionStateOwst_0(v173, 1, 1, v172);
        v126 = v159;
      }
      else
      {
        v127 = v173;
        sub_1000EADE8();
        sub_1000215BC(v123, type metadata accessor for LocationWeatherDataState);
        v125 = _s7Weather24LocationCompositionStateOwet_0(v127, 1, v172);
        v126 = v159;
        if ((_DWORD)v125 != 1)
        {
          v128 = v155;
          sub_1000CC798(v127, v155);
          v129 = v156;
          v131 = WeatherDataModel.currentWeather.getter(v130);
          LODWORD(v191) = CurrentWeather.requiresAdditionalContrast.getter(v131);
          (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v129, v158);
          sub_1000215BC(v128, type metadata accessor for WeatherData);
          goto LABEL_52;
        }
      }
      sub_1000B3B00(v125, &qword_100BC3460);
      LODWORD(v191) = 0;
LABEL_52:
      LODWORD(v190) = *(unsigned __int8 *)(v126
                                         + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_listToLocationViewTransitionState);
      sub_100078058(v153, v175, type metadata accessor for LocationViewerActiveLocationState);
      v132 = v164;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 16))(v177, v183, v164);
      v133 = v184;
      LODWORD(v189) = *(unsigned __int8 *)(v126
                                         + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_notificationsOptInAlertState);
      sub_100078058(v184 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, v179, type metadata accessor for LocationsState);
      v134 = v133 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
      swift_beginAccess(v133 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, &v192, 0, 0);
      LODWORD(v188) = *(unsigned __int8 *)(v134 + 1);
      v135 = v165;
      sub_1000C1264(v133 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView);
      v136 = type metadata accessor for ModalViewState.MapViewModal(0);
      v137 = v167;
      sub_10009926C(v167, 1, v138, v136);
      swift_storeEnumTagMultiPayload(v137, v166, 4);
      sub_1000EF360();
      LODWORD(v187) = v139;
      sub_1000215BC(v137, type metadata accessor for ModalViewState);
      sub_1000215BC(v135, type metadata accessor for ModalViewState);
      LODWORD(v186) = *(unsigned __int8 *)(v133 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState);
      v140 = *(_QWORD *)(v133 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState + 8);
      v141 = v133 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time;
      v142 = v168;
      sub_100078058(v141, v168, type metadata accessor for TimeState);
      v143 = v171;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v169 + 32))(v171, v142, v170);
      v144 = *(_BYTE *)(v134 + *(int *)(type metadata accessor for EnvironmentState(0) + 36));
      v145 = v161;
      sub_1000CD53C(v161, (uint64_t)&v192);
      v146 = v154;
      v147 = *(_QWORD *)((char *)type metadata accessor for ModalViewState + v154[9]);
      swift_bridgeObjectRetain(v140);
      sub_10009D2F8((uint64_t)type metadata accessor for ModalViewState);
      sub_1000CD53C(v145 + v146[5], (uint64_t)v193);
      v148 = v162;
      sub_100078058((uint64_t)type metadata accessor for ModalViewState, v162, type metadata accessor for ViewState.SecondaryViewState);
      LOBYTE(v145) = swift_getEnumCaseMultiPayload(v148) != 1;
      sub_10009D2F8(v148);
      swift_release(v159);
      sub_10009D2F8((uint64_t)type metadata accessor for ModalViewState);
      (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v183, v132);
      (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v182, v180);
      v66 = v181;
      sub_1000F1F60(v175, v177, v189, v179, v188, v187 & 1, v186, v140, v181, v143, v144, v147, v190 & 1, v145, (uint64_t)v79, v191 & 1, v178);
      v65 = 0;
      goto LABEL_53;
    }
    v96 = *v36;
    v97 = v36[1];
    sub_1000CC798((uint64_t)v36 + *(int *)(v94 + 48), v72);
    if (v97 < 2)
    {
      sub_1000DAE08();
      goto LABEL_44;
    }
    sub_100078058(v72, v190, type metadata accessor for ContentStatusBanner);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v79);
    v192 = v79;
    v99 = sub_1000991C8(v96);
    v101 = v79[2];
    v102 = (v100 & 1) == 0;
    v103 = v101 + v102;
    if (__OFADD__(v101, v102))
      break;
    v104 = v99;
    v105 = v100;
    sub_1000BA294(&qword_100BC3478);
    v106 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v103);
    v80 = v188;
    if (v106)
    {
      v107 = sub_1000991C8(v96);
      if ((v105 & 1) != (v108 & 1))
        goto LABEL_58;
      v104 = v107;
    }
    v79 = v192;
    if ((v105 & 1) != 0)
    {
      v109 = sub_1000D10A8();
      sub_10016AB5C(v109, v110);
    }
    else
    {
      v192[(v104 >> 6) + 8] |= 1 << v104;
      v111 = (uint64_t *)(v79[6] + 16 * v104);
      *v111 = v96;
      v111[1] = v97;
      v112 = sub_1000D10A8();
      sub_1000CC798(v112, v113);
      v114 = v79[2];
      v115 = __OFADD__(v114, 1);
      v116 = v114 + 1;
      if (v115)
        goto LABEL_56;
      v79[2] = v116;
      swift_bridgeObjectRetain(v97);
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1000DAE08();
    v72 = v187;
LABEL_44:
    sub_1000215BC(v72, type metadata accessor for ContentStatusBanner);
    if (v78)
      goto LABEL_12;
LABEL_14:
    v89 = v191 + 1;
    if (__OFADD__(v191, 1))
      goto LABEL_55;
    if (v89 < v186)
    {
      v90 = *(_QWORD *)(v185 + 8 * v89);
      if (v90)
        goto LABEL_17;
      v91 = v191 + 2;
      ++v191;
      if (v89 + 1 < v186)
      {
        v90 = *(_QWORD *)(v185 + 8 * v91);
        if (v90)
          goto LABEL_20;
        v191 = v89 + 1;
        if (v89 + 2 < v186)
        {
          v90 = *(_QWORD *)(v185 + 8 * (v89 + 2));
          if (v90)
          {
            v89 += 2;
            goto LABEL_17;
          }
          v91 = v89 + 3;
          v191 = v89 + 2;
          if (v89 + 3 < v186)
          {
            v90 = *(_QWORD *)(v185 + 8 * v91);
            if (!v90)
            {
              while (1)
              {
                v89 = v91 + 1;
                if (__OFADD__(v91, 1))
                  goto LABEL_57;
                if (v89 >= v186)
                {
                  v191 = v152;
                  goto LABEL_31;
                }
                v90 = *(_QWORD *)(v185 + 8 * v89);
                ++v91;
                if (v90)
                  goto LABEL_17;
              }
            }
LABEL_20:
            v89 = v91;
LABEL_17:
            v78 = (v90 - 1) & v90;
            v82 = __clz(__rbit64(v90)) + (v89 << 6);
            v191 = v89;
            goto LABEL_13;
          }
        }
      }
    }
LABEL_31:
    v92 = sub_10009BE2C();
    sub_10009926C((uint64_t)v34, 1, v93, v92);
    v78 = 0;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t *sub_1000F0B18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for WeatherCondition(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t sub_1000F0BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016AA84);
}

uint64_t sub_1000F0BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void (*v15)(uint64_t, uint64_t);

  v7 = sub_100098AA0();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000CD2C4();
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100079FBC();
  sub_1000BA294(&qword_100C0AE18);
  sub_10009D98C();
  __chkstk_darwin(v10);
  sub_1000BCED8();
  v12 = v2 + *(int *)(v11 + 48);
  sub_1000F0D1C(a1, v2);
  sub_1000F0D1C(a2, v12);
  sub_1000B489C(v2);
  if (!v14)
  {
    sub_1000F0D1C(v2, v4);
    sub_1000B489C(v12);
    if (!v14)
    {
      sub_1000992E4(v3, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
      v13 = static Location.Identifier.== infix(_:_:)(v4, v3);
      v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v15(v3, v7);
      v15(v4, v7);
      sub_1000F0DF4(v2);
      return v13 & 1;
    }
    sub_100098820(v4, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
LABEL_9:
    sub_100021A68(v2, &qword_100C0AE18);
    v13 = 0;
    return v13 & 1;
  }
  sub_1000B489C(v12);
  if (!v14)
    goto LABEL_9;
  sub_1000F0DF4(v2);
  v13 = 1;
  return v13 & 1;
}

uint64_t sub_1000F0D1C(uint64_t a1, uint64_t a2)
{
  uint64_t active;

  active = type metadata accessor for LocationViewerActiveLocationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 16))(a2, a1, active);
  return a2;
}

void *sub_1000F0D60(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Location.Identifier(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_1000F0DF4(uint64_t a1)
{
  uint64_t active;

  active = type metadata accessor for LocationViewerActiveLocationState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 8))(a1, active);
  return a1;
}

uint64_t sub_1000F0E30(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_release(*v4);
  swift_release(v4[1]);
  v5 = (char *)v4 + *(int *)(sub_1000BA294(&qword_100BECFA0) + 32);
  v6 = type metadata accessor for Location.Identifier(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

void sub_1000F0E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL *v27;
  BOOL *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_1000986AC();
  a19 = v23;
  a20 = v24;
  v26 = v25;
  v28 = v27;
  type metadata accessor for ViewState.SecondaryViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v29);
  sub_10009E540();
  v30 = (int *)type metadata accessor for ViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v31);
  sub_100079FBC();
  sub_1000BA294(&qword_100BC5F40);
  sub_1000B42B0();
  __chkstk_darwin(v32);
  sub_100099864();
  type metadata accessor for ModalViewState(0);
  sub_1000B42B0();
  __chkstk_darwin(v33);
  v35 = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AB54(v26 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_modalView, (uint64_t)v35, type metadata accessor for ModalViewState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35);
  sub_1000215BC((uint64_t)v35, type metadata accessor for ModalViewState);
  sub_10000AB54(v26 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v21, type metadata accessor for ViewState);
  sub_10000AB54(v21 + v30[5], (uint64_t)v22, type metadata accessor for ViewState.SecondaryViewState);
  if (swift_getEnumCaseMultiPayload(v22) == 1)
  {
    sub_1000215BC((uint64_t)v22, type metadata accessor for ViewState.SecondaryViewState);
LABEL_7:
    sub_1000215BC(v21, type metadata accessor for ViewState);
    v39 = 1;
    goto LABEL_8;
  }
  v37 = *v22;
  if (*(_QWORD *)(v21 + v30[9] + 8) == 1)
  {
    v38 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    objc_msgSend(v38, "userInterfaceIdiom");

    if ((*(_BYTE *)(v21 + v30[7]) & 1) == 0)
    {
      swift_release(v37);
      goto LABEL_7;
    }
  }
  sub_1000215BC(v21, type metadata accessor for ViewState);
  sub_10000AB54(v37 + OBJC_IVAR____TtCV7Weather23LocationViewerViewState8_Storage_activeLocationState, v20, type metadata accessor for LocationViewerActiveLocationState);
  swift_release(v37);
  v39 = 0;
LABEL_8:
  v40 = sub_1000D8E50();
  _s7Weather24LocationCompositionStateOwst_0(v20, v39, 1, v40);
  v41 = v26 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v42 = *(_QWORD *)(v41 + *(int *)(type metadata accessor for LocationsState(0) + 36));
  *v28 = EnumCaseMultiPayload == 0;
  v43 = sub_1000C13D4();
  sub_1000F111C(v20, (uint64_t)&v28[*(int *)(v43 + 20)], &qword_100BC5F40);
  *(_QWORD *)&v28[*(int *)(v43 + 24)] = v42;
  swift_bridgeObjectRetain(v42);
  sub_100098640();
}

void sub_1000F111C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100075DC0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_10004A298();
}

void sub_1000F1150()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  _QWORD v25[2];

  sub_1000986AC();
  v2 = v1;
  v4 = v3;
  v5 = sub_1000D8E50();
  sub_1000B42B0();
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BCE610);
  sub_1000B42B0();
  __chkstk_darwin(v10);
  sub_100099864();
  sub_1000BA294(&qword_100BC5F40);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v25 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)v25 - v18;
  if (*v4 != *v2)
    goto LABEL_13;
  v20 = sub_1000C13D4();
  v21 = *(int *)(v20 + 20);
  v25[0] = v4;
  sub_1000DB7D8((uint64_t)&v4[v21], (uint64_t)v19);
  v25[1] = v20;
  sub_1000DB7D8((uint64_t)&v2[*(int *)(v20 + 20)], (uint64_t)v17);
  v22 = v0 + *(int *)(v9 + 48);
  sub_1000DB7D8((uint64_t)v19, v0);
  sub_1000DB7D8((uint64_t)v17, v22);
  sub_100088FC8(v0, 1, v5);
  if (v23)
  {
    sub_1000987A0((uint64_t)v17);
    sub_1000987A0((uint64_t)v19);
    sub_100088FC8(v22, 1, v5);
    if (v23)
    {
      sub_100021A14(v0, &qword_100BC5F40);
LABEL_12:
      sub_1000F13D4();
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  sub_100037794(v0, (uint64_t)v14, &qword_100BC5F40);
  sub_100088FC8(v22, 1, v5);
  if (v23)
  {
    sub_100075DD0((uint64_t)v17);
    sub_100075DD0((uint64_t)v19);
    sub_1000215BC((uint64_t)v14, type metadata accessor for LocationViewerActiveLocationState);
LABEL_10:
    sub_100021A14(v0, &qword_100BCE610);
    goto LABEL_13;
  }
  sub_1000F13F0(v22, (uint64_t)v8);
  v24 = sub_1000F0BB4((uint64_t)v14, (uint64_t)v8);
  sub_1000215BC((uint64_t)v8, type metadata accessor for LocationViewerActiveLocationState);
  sub_1000987A0((uint64_t)v17);
  sub_1000987A0((uint64_t)v19);
  sub_1000215BC((uint64_t)v14, type metadata accessor for LocationViewerActiveLocationState);
  sub_1000987A0(v0);
  if ((v24 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  sub_100098640();
}

void sub_1000F13D4()
{
  sub_100947700();
}

uint64_t sub_1000F13F0(uint64_t a1, uint64_t a2)
{
  uint64_t active;

  active = type metadata accessor for LocationViewerActiveLocationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 32))(a2, a1, active);
  return a2;
}

uint64_t type metadata accessor for LocationViewerPageControl(uint64_t a1)
{
  return sub_100098190(a1, qword_100BED000, (uint64_t)&nominal type descriptor for LocationViewerPageControl);
}

uint64_t sub_1000F1448(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WeatherCondition(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t sub_1000F1498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v83 = a3;
  v5 = type metadata accessor for Location.Identifier(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v76 - v9;
  v79 = type metadata accessor for LocationsState(0);
  __chkstk_darwin(v79);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000BA294(&qword_100C0B8D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocationModel(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v80 = (char *)&v76 - v21;
  sub_100078058(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations, (uint64_t)v12, type metadata accessor for LocationsState);
  static CurrentLocation.placeholderIdentifier.getter();
  v85 = a2;
  LOBYTE(a1) = static Location.Identifier.== infix(_:_:)(a2, v10);
  v81 = v6;
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23 = v5;
  v84 = v22;
  v22(v10, v5);
  if ((a1 & 1) != 0)
  {
    v24 = (uint64_t)&v15[*(int *)(sub_1000BA294(&qword_100BC3488) + 48)];
    v25 = type metadata accessor for CurrentLocation(0);
    swift_storeEnumTagMultiPayload(v15, v25, 3);
    v26 = type metadata accessor for LocationOfInterest(0);
    _s7Weather24LocationCompositionStateOwst_0(v24, 1, 1, v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v15, enum case for LocationModel.current(_:), v16);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v16);
    v27 = (uint64_t)v15;
    v28 = (uint64_t)v12;
    v29 = v82;
    v30 = v83;
  }
  else
  {
    v78 = v15;
    v31 = v5;
    v32 = *(int *)(v79 + 24);
    v79 = (uint64_t)v12;
    v33 = *(_QWORD *)&v12[v32];
    v34 = *(_QWORD *)(v33 + 16);
    v77 = v33;
    if (v34)
    {
      v35 = v33 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v36 = *(_QWORD *)(v17 + 72);
      v37 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
      v38 = swift_bridgeObjectRetain(v33);
      while (1)
      {
        v39 = v37(v20, v35, v16, v38);
        LocationModel.identifier.getter(v39);
        v40 = static Location.Identifier.== infix(_:_:)(v10, v85);
        v84(v10, v31);
        if ((v40 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
        v35 += v36;
        if (!--v34)
          goto LABEL_9;
      }
      v27 = (uint64_t)v78;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v78, v20, v16);
      v41 = v27;
      v42 = 0;
    }
    else
    {
      swift_bridgeObjectRetain(v33);
LABEL_9:
      v27 = (uint64_t)v78;
      v41 = (uint64_t)v78;
      v42 = 1;
    }
    _s7Weather24LocationCompositionStateOwst_0(v41, v42, 1, v16);
    swift_bridgeObjectRelease(v77);
    v29 = v82;
    v30 = v83;
    v23 = v31;
    v28 = v79;
  }
  sub_1000215BC(v28, type metadata accessor for LocationsState);
  if (_s7Weather24LocationCompositionStateOwet_0(v27, 1, v16) != 1)
  {
    v55 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v56 = v80;
    v55(v80, v27, v16);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v55)(v30, v56, v16);
  }
  sub_100021A14(v27, &qword_100C0B8D0);
  if (qword_100BC2408 != -1)
    swift_once(&qword_100BC2408, sub_100159778);
  v43 = type metadata accessor for Logger(0);
  sub_1000AECD4(v43, (uint64_t)qword_100CAF010);
  v82 = *(char **)(v81 + 16);
  v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v82)(v29, v85, v23);
  v45 = Logger.logObject.getter(v44);
  v47 = static os_log_type_t.error.getter(v45, v46);
  if (os_log_type_enabled(v45, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(32, -1);
    v81 = v49;
    *(_DWORD *)v48 = 141558275;
    v86 = 1752392040;
    v87 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);
    *(_WORD *)(v48 + 12) = 2081;
    v80 = (char *)(v48 + 14);
    sub_1000AED38();
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v23);
    v52 = v51;
    v86 = sub_1000CE1C8(v50, v51, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);
    v53 = swift_bridgeObjectRelease(v52);
    ((void (*)(char *, uint64_t, __n128))v84)(v29, v23, v53);
    _os_log_impl((void *)&_mh_execute_header, v45, v47, "Location identifier: %{private,mask.hash}s, was not found in LocationsState", (uint8_t *)v48, 0x16u);
    v54 = v81;
    swift_arrayDestroy(v81, 1);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    v84(v29, v23);
  }

  v59 = Location.Identifier.kind.getter(v58);
  v60 = Location.Identifier.Kind.rawValue.getter(v59 & 1);
  v62 = v61;
  v63 = Location.Identifier.Kind.rawValue.getter(1);
  v65 = v60 == v63 && v62 == v64;
  v66 = v83;
  if (v65)
  {
    swift_bridgeObjectRelease_n(v62, 2);
    goto LABEL_26;
  }
  v67 = v64;
  v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v63, v64, 0);
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v67);
  if ((v68 & 1) != 0)
  {
LABEL_26:
    v73 = v66 + *(int *)(sub_1000BA294(&qword_100BC3488) + 48);
    v74 = type metadata accessor for CurrentLocation(0);
    swift_storeEnumTagMultiPayload(v66, v74, 3);
    v75 = type metadata accessor for LocationOfInterest(0);
    _s7Weather24LocationCompositionStateOwst_0(v73, 1, 1, v75);
    v72 = (unsigned int *)&enum case for LocationModel.current(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v66, *v72, v16);
  }
  v69 = v66 + *(int *)(sub_1000BA294(&qword_100BC3480) + 48);
  ((void (*)(char *, uint64_t, uint64_t))v82)(v10, v85, v23);
  SavedLocation.Placeholder.init(identifier:searchTitle:searchSubtitle:)(v10, 0, 0, 0, 0);
  v70 = type metadata accessor for SavedLocation(0);
  swift_storeEnumTagMultiPayload(v66, v70, 1);
  v71 = type metadata accessor for LocationOfInterest(0);
  _s7Weather24LocationCompositionStateOwst_0(v69, 1, 1, v71);
  v72 = (unsigned int *)&enum case for LocationModel.saved(_:);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v66, *v72, v16);
}

BOOL sub_1000F1B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _BOOL8 result;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  type metadata accessor for LocationWeatherDataState(0);
  sub_1000B42B0();
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000BA294(&qword_100BC3458);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BA294(&qword_100BC3380);
  sub_1000B42B0();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v35 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  if ((sub_1000F0BB4(a1, a2) & 1) == 0)
    return 0;
  v20 = (int *)sub_1000D1BFC();
  if ((static LocationModel.== infix(_:_:)(a1 + v20[5], a2 + v20[5]) & 1) == 0)
    return 0;
  sub_1000B4318();
  if (!v26 || (sub_10009C240(a1 + v20[7]) & 1) == 0)
    return 0;
  v21 = v20[8];
  v22 = *(_BYTE *)(a1 + v21);
  v37 = *(unsigned __int8 *)(a2 + v21);
  v36 = LocationAuthorizationState.rawValue.getter(v22);
  v38 = v23;
  v25 = LocationAuthorizationState.rawValue.getter(v37);
  v26 = v36 == v25 && v38 == v24;
  if (v26)
  {
    swift_bridgeObjectRelease_n(v38, 2);
    goto LABEL_13;
  }
  v35 = v24;
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v25, v24, 0);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v35);
  result = 0;
  if ((v37 & 1) != 0)
  {
LABEL_13:
    sub_1000B4318();
    if (!v26)
      return 0;
    if (*(unsigned __int8 *)(a1 + v20[10]) != *(unsigned __int8 *)(a2 + v20[10]))
      return 0;
    sub_10009CA08();
    if ((v28 & 1) == 0)
      return 0;
    if ((static Date.== infix(_:_:)(a1 + v20[11], a2 + v20[11]) & 1) == 0)
      return 0;
    sub_1000B4318();
    if (!v26)
      return 0;
    if (*(_QWORD *)(a1 + v20[13]) != *(_QWORD *)(a2 + v20[13]))
      return 0;
    sub_1000B4318();
    if (!v26)
      return 0;
    sub_1000B4318();
    if (!v26)
      return 0;
    sub_1000F45A4();
    if ((v29 & 1) == 0)
      return 0;
    sub_1000B4318();
    if (!v26)
      return 0;
    sub_1000F1F18(a1 + v20[18], (uint64_t)v19);
    sub_1000F1F18(a2 + v20[18], (uint64_t)v17);
    v30 = (uint64_t)&v10[*(int *)(v7 + 48)];
    sub_1000F1F18((uint64_t)v19, (uint64_t)v10);
    sub_1000F1F18((uint64_t)v17, v30);
    sub_100098750((uint64_t)v10);
    if (v26)
    {
      sub_10009E47C((uint64_t)v17);
      sub_10009E47C((uint64_t)v19);
      v31 = sub_100098750(v30);
      if (v26)
      {
        sub_1000B3B00(v31, &qword_100BC3380);
        return 1;
      }
    }
    else
    {
      sub_1000F1F18((uint64_t)v10, (uint64_t)v14);
      sub_100098750(v30);
      if (!v32)
      {
        sub_10007C75C(v30, (uint64_t)v6, type metadata accessor for LocationWeatherDataState);
        sub_1000F9F74();
        v34 = v33;
        sub_1000215BC((uint64_t)v6, type metadata accessor for LocationWeatherDataState);
        sub_10009E47C((uint64_t)v17);
        sub_10009E47C((uint64_t)v19);
        sub_1000215BC((uint64_t)v14, type metadata accessor for LocationWeatherDataState);
        sub_10009E47C((uint64_t)v10);
        return (v34 & 1) != 0;
      }
      sub_100021A14((uint64_t)v17, &qword_100BC3380);
      sub_100021A14((uint64_t)v19, &qword_100BC3380);
      sub_1000215BC((uint64_t)v14, type metadata accessor for LocationWeatherDataState);
    }
    sub_1000B3B00(v31, &qword_100BC3458);
    return 0;
  }
  return result;
}

uint64_t sub_1000F1F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000F1F60(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17)
{
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10007C75C(a1, a9, type metadata accessor for LocationViewerActiveLocationState);
  v24 = (int *)sub_1000D1BFC();
  v25 = a9 + v24[5];
  v26 = sub_1000BE878();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a2, v26);
  *(_BYTE *)(a9 + v24[6]) = a3;
  sub_10007C75C(a4, a9 + v24[7], type metadata accessor for LocationsState);
  *(_BYTE *)(a9 + v24[8]) = a5;
  *(_BYTE *)(a9 + v24[9]) = a6;
  v27 = a9 + v24[10];
  *(_BYTE *)v27 = a7;
  *(_QWORD *)(v27 + 8) = a8;
  v28 = a9 + v24[11];
  v29 = sub_100098778();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a10, v29);
  *(_BYTE *)(a9 + v24[12]) = a11;
  *(_QWORD *)(a9 + v24[13]) = a12;
  *(_BYTE *)(a9 + v24[14]) = a13;
  *(_BYTE *)(a9 + v24[15]) = a14;
  *(_QWORD *)(a9 + v24[16]) = a15;
  *(_BYTE *)(a9 + v24[17]) = a16;
  sub_10009E8CC(a17, a9 + v24[18], &qword_100BC3380);
}

void sub_1000F2100(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_10004A2B0(a1, a2, a3);
  sub_1000C13A8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  sub_10004A298();
}

uint64_t storeEnumTagSinglePayload for ContentStatusBanner.Placement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentStatusBanner.Placement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

_QWORD *sub_1000F21E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 2u:
      v6 = type metadata accessor for Locale(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_28;
    case 3u:
      v11 = type metadata accessor for ActivityAction(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v11);
      if (EnumCaseMultiPayload == 1)
      {
        v23 = type metadata accessor for PreviewLocation(0);
        v24 = (char *)&loc_1000F23B4 + 4 * byte_1009A79C3[swift_getEnumCaseMultiPayload(a2, v23)];
        __asm { BR              X10 }
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        v13 = type metadata accessor for SavedLocation(0);
        if (swift_getEnumCaseMultiPayload(a2, v13) == 1)
        {
          v14 = type metadata accessor for SavedLocation.Placeholder(0);
          v15 = 1;
        }
        else
        {
          v14 = type metadata accessor for Location(0);
          v15 = 0;
        }
        (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v14 - 8) + 16))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, v13, v15);
        swift_storeEnumTagMultiPayload(a1, v11, 0);
      }
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_28;
    case 4u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_28;
    case 8u:
      v16 = a2[1];
      if (v16 >= 2)
      {
        *a1 = *a2;
        a1[1] = v16;
        swift_bridgeObjectRetain(v16);
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_28;
    case 0xAu:
      v17 = type metadata accessor for ConfiguredUnitsAction(0);
      v18 = swift_getEnumCaseMultiPayload(a2, v17);
      if (v18 == 1)
      {
        v25 = type metadata accessor for UnitConfiguration.Temperature(0);
        if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)a2, 1, v25))
        {
          v26 = sub_1000BA294(&qword_100BD7148);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
          _s7Weather24LocationCompositionStateOwst_0((uint64_t)a1, 0, 1, v25);
        }
        v20 = a1;
        v21 = v17;
        v22 = 1;
      }
      else
      {
        if (v18)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          goto LABEL_26;
        }
        v19 = type metadata accessor for ConfiguredUnit(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
        v20 = a1;
        v21 = v17;
        v22 = 0;
      }
      swift_storeEnumTagMultiPayload(v20, v21, v22);
LABEL_26:
      v7 = a1;
      v8 = a3;
      v9 = 10;
LABEL_28:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      return a1;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

uint64_t sub_1000F2680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocationPreviewViewState(0);
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, v6, sub_1007263E8);
}

void sub_1000F26CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  id v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  id v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  int v129;
  _BYTE *v130;
  uint64_t v131;
  char *v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  id v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  _BYTE *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[4];

  v214 = a2;
  v193 = a3;
  v4 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  __chkstk_darwin(v4);
  v192 = (char *)&v158 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000BA294(&qword_100BD11F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000BA294(&qword_100BC3378);
  __chkstk_darwin(v9);
  v11 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC3370);
  __chkstk_darwin(v12);
  v14 = (char *)&v158 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for Date(0);
  v173 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209);
  v210 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for BackgroundAnimationKind(0);
  v188 = *(_QWORD *)(v172 - 8);
  v16 = __chkstk_darwin(v172);
  v208 = (char *)&v158 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v187 = (char *)&v158 - v18;
  v19 = type metadata accessor for WeatherConditionGradientModel.PresentationContext(0);
  v207 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v196 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v206 = (char *)&v158 - v22;
  v23 = type metadata accessor for TimeState(0);
  __chkstk_darwin(v23);
  v170 = (void (*)(uint64_t, uint64_t))((char *)&v158 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_1000BA294(&qword_100BC3460);
  v26 = __chkstk_darwin(v25);
  v164 = (char *)&v158 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v169 = (uint64_t)&v158 - v28;
  v29 = type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel(0);
  __chkstk_darwin(v29);
  v160 = (uint64_t)&v158 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = type metadata accessor for LocationWeatherDataState(0);
  v31 = __chkstk_darwin(v204);
  v163 = (uint64_t)&v158 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v168 = (uint64_t)&v158 - v33;
  v34 = sub_1000BA294(&qword_100BF1FA8);
  __chkstk_darwin(v34);
  v197 = (char *)&v158 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for PreprocessedWeatherData(0);
  __chkstk_darwin(v195);
  v159 = (uint64_t)&v158 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for WeatherConditionBackgroundTimeData(0);
  v37 = __chkstk_darwin(v185);
  v171 = (uint64_t)&v158 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v205 = (uint64_t)&v158 - v39;
  v40 = sub_1000BA294(&qword_100BC35F8);
  v41 = __chkstk_darwin(v40);
  v189 = (uint64_t)&v158 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v183 = (uint64_t)&v158 - v43;
  v184 = type metadata accessor for Location(0);
  v167 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v166 = (char *)&v158 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000BA294(&qword_100BC3660);
  v46 = __chkstk_darwin(v45);
  v203 = (uint64_t)&v158 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v216 = (uint64_t)&v158 - v48;
  v49 = sub_1000BA294(&qword_100BC3380);
  v50 = __chkstk_darwin(v49);
  v165 = (char *)&v158 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v213 = (uint64_t)&v158 - v52;
  v182 = type metadata accessor for ViewState(0);
  __chkstk_darwin(v182);
  v181 = (uint64_t)&v158 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for Location.Identifier(0);
  v54 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v217 = (char *)&v158 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for WeatherConditionBackgroundOptions.DisplayLocation(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v180 = (char *)&v158 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for WeatherConditionBackgroundConfig.CameraPositionType(0);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v199 = (char *)&v158 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for VFXEffectViewID(0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v198 = (char *)&v158 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for WeatherConditionBackgroundOptions(0);
  v202 = *(_QWORD *)(v186 - 8);
  v59 = __chkstk_darwin(v186);
  v201 = (char *)&v158 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  v215 = (char *)&v158 - v61;
  v62 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v200 = (id)UIApplication.maybeWindow.getter();

  v63 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_locations;
  v64 = *(_QWORD *)(v63 + *(int *)(type metadata accessor for LocationsState(0) + 36));
  v65 = *(_QWORD *)(v64 + 16);
  v66 = _swiftEmptyArrayStorage;
  v218 = v54;
  v191 = v8;
  v211 = v14;
  v212 = v11;
  v190 = v19;
  if (v65)
  {
    v162 = a1;
    v220[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v64);
    sub_10009AAB0();
    v67 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    v161 = v64;
    v68 = v64 + v67;
    v69 = *(_QWORD *)(v54 + 72);
    v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16);
    do
    {
      v71 = v217;
      v72 = v219;
      v73 = v70(v217, v68, v219);
      v74 = Location.Identifier.uniqueID.getter(v73);
      v76 = v75;
      (*(void (**)(char *, uint64_t))(v218 + 8))(v71, v72);
      v66 = (_QWORD *)v220[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v220[0]) & 1) == 0)
      {
        sub_10009AAB0();
        v66 = (_QWORD *)v220[0];
      }
      v77 = v66[2];
      if (v77 >= v66[3] >> 1)
      {
        sub_10009AAB0();
        v66 = (_QWORD *)v220[0];
      }
      v66[2] = v77 + 1;
      v78 = &v66[2 * v77];
      v78[4] = v74;
      v78[5] = v76;
      v68 += v69;
      --v65;
    }
    while (v65);
    swift_bridgeObjectRelease(v161);
    a1 = v162;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v174 + 104))(v198, enum case for VFXEffectViewID.locationViewer(_:), v175);
  (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v199, enum case for WeatherConditionBackgroundConfig.CameraPositionType.default(_:), v177);
  (*(void (**)(char *, _QWORD, uint64_t))(v178 + 104))(v180, enum case for WeatherConditionBackgroundOptions.DisplayLocation.locationViewer(_:), v179);
  v79 = v214;
  v80 = v200;
  if (v200)
  {
    objc_msgSend(v200, "bounds");
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v88 = v87;
    v89 = v80;
    v90 = UIWindow.displayScale.getter();

  }
  else
  {
    v82 = 0.0;
    v90 = 1.0;
    v84 = 0.0;
    v86 = 0.0;
    v88 = 0.0;
  }
  v91 = v213;
  v92 = v181;
  sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_view, v181, type metadata accessor for ViewState);
  sub_1000215BC(v92, type metadata accessor for ViewState);
  WeatherConditionBackgroundOptions.init(locationIDs:applyMask:applyLegibilityScrim:effectViewID:canShowCollisionLayer:cameraPositionType:displayLocation:windowBounds:displayScale:locationViewerOrientation:)(v66, 1, 0, v198, 1, v82, v84, v86, v88, v90, (_BYTE)v199);
  v93 = v183;
  sub_100037768(v79, v183, &qword_100BC35F8);
  v94 = v184;
  v95 = _s7Weather24LocationCompositionStateOwet_0(v93, 1, v184);
  v96 = v194;
  if (v95 == 1)
  {
    sub_100021A14(v93, &qword_100BC35F8);
    v97 = v204;
    _s7Weather24LocationCompositionStateOwst_0(v91, 1, 1, v204);
    v98 = type metadata accessor for WeatherCondition(0);
    _s7Weather24LocationCompositionStateOwst_0(v216, 1, 1, v98);
    v99 = v209;
  }
  else
  {
    v100 = v167;
    v101 = v166;
    (*(void (**)(char *, uint64_t, uint64_t))(v167 + 32))(v166, v93, v94);
    v102 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    swift_bridgeObjectRetain(v102);
    v104 = Location.id.getter(v103);
    v106 = v105;
    v107 = (uint64_t)v165;
    sub_1000EED10(v104, v105, v102);
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v102);
    sub_100819318(v107, v91);
    v108 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_debugState + 8);
    swift_bridgeObjectRetain(v108);
    v109 = v217;
    v111 = Location.identifier.getter(v110);
    v112 = Location.Identifier.id.getter(v111);
    v114 = v113;
    sub_1000F3CAC(v112, v113, v108);
    swift_bridgeObjectRelease(v108);
    v115 = swift_bridgeObjectRelease(v114);
    (*(void (**)(char *, uint64_t, __n128))(v218 + 8))(v109, v219, v115);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v94);
    v99 = v209;
    v97 = v204;
  }
  v116 = (uint64_t)v197;
  v117 = v195;
  if (_s7Weather24LocationCompositionStateOwet_0(v91, 1, v97))
  {
    _s7Weather24LocationCompositionStateOwst_0(v116, 1, 1, v117);
LABEL_18:
    sub_100021A14(v116, &qword_100BF1FA8);
    sub_100043CA8(v96+ OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_weatherConditionBackgroundTimeDataFactory, (uint64_t)v220);
    sub_1000DB418(v220, v220[3]);
    if (_s7Weather24LocationCompositionStateOwet_0(v91, 1, v97))
    {
      v121 = type metadata accessor for WeatherData(0);
      v122 = v169;
      _s7Weather24LocationCompositionStateOwst_0(v169, 1, 1, v121);
    }
    else
    {
      v123 = v168;
      sub_100080C0C(v213, v168, type metadata accessor for LocationWeatherDataState);
      v122 = v169;
      sub_1000EADE8();
      v96 = v194;
      sub_1000215BC(v123, type metadata accessor for LocationWeatherDataState);
    }
    v124 = v173;
    v125 = v172;
    v126 = v170;
    v127 = v171;
    sub_100080C0C(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_time, (uint64_t)v170, type metadata accessor for TimeState);
    sub_1003B4364(v214, v122, v126, v127);
    sub_100021A14(v122, &qword_100BC3460);
    (*(void (**)(_QWORD, uint64_t))(v124 + 8))(v126, v99);
    _s7Weather29UVIDescriptorViewModelFactoryVwxx_0(v220);
    goto LABEL_22;
  }
  v118 = v168;
  sub_100080C0C(v91, v168, type metadata accessor for LocationWeatherDataState);
  sub_1000FB3A4();
  v119 = v118;
  v116 = (uint64_t)v197;
  v120 = v195;
  sub_1000215BC(v119, type metadata accessor for LocationWeatherDataState);
  if (_s7Weather24LocationCompositionStateOwet_0(v116, 1, v120) == 1)
    goto LABEL_18;
  v153 = v159;
  sub_10007802C(v116, v159, type metadata accessor for PreprocessedWeatherData);
  v154 = v160;
  sub_100080C0C(v153 + *(int *)(v120 + 56), v160, type metadata accessor for WeatherConditionBackgroundPreprocessedDataModel);
  sub_1000215BC(v153, type metadata accessor for PreprocessedWeatherData);
  v127 = v171;
  sub_10007802C(v154, v171, type metadata accessor for WeatherConditionBackgroundTimeData);
  v124 = v173;
  v125 = v172;
LABEL_22:
  v128 = v205;
  sub_10007802C(v127, v205, type metadata accessor for WeatherConditionBackgroundTimeData);
  v129 = *(unsigned __int8 *)(v96
                            + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory_forceTileGradientPresentationContext);
  v130 = v187;
  v131 = sub_1000F3B30(v187);
  v132 = v206;
  BackgroundAnimationKind.gradientContext.getter(v131);
  (*(void (**)(_BYTE *, uint64_t))(v188 + 8))(v130, v125);
  v133 = (unsigned int *)&enum case for WeatherConditionGradientModel.PresentationContext.tile(_:);
  v134 = v207;
  if (!v129)
    v133 = (unsigned int *)&enum case for WeatherConditionGradientModel.PresentationContext.fullScreen(_:);
  v135 = v190;
  (*(void (**)(char *, _QWORD, uint64_t))(v207 + 104))(v132, *v133, v190);
  v136 = v135;
  sub_1000F3B30(v208);
  (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v210, v128, v99);
  v137 = v185;
  sub_100037768(v128 + *(int *)(v185 + 20), (uint64_t)v211, &qword_100BC3370);
  sub_100037768(v128 + *(int *)(v137 + 24), (uint64_t)v212, &qword_100BC3378);
  sub_100037768(v216, v203, &qword_100BC3660);
  v138 = a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v220, 0, 0);
  v139 = *(unsigned __int8 *)(v138 + *(int *)(type metadata accessor for EnvironmentState(0) + 36));
  v140 = v189;
  sub_100037768(v214, v189, &qword_100BC35F8);
  v141 = v186;
  (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v215, v186);
  v142 = v196;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v196, v132, v136);
  v143 = v213;
  v144 = _s7Weather24LocationCompositionStateOwet_0(v213, 1, v204);
  v145 = (uint64_t)v192;
  v146 = (uint64_t)v191;
  if (!v144)
  {
    v147 = v163;
    sub_100080C0C(v143, v163, type metadata accessor for LocationWeatherDataState);
    v148 = (uint64_t)v164;
    sub_1000EADE8();
    sub_1000215BC(v147, type metadata accessor for LocationWeatherDataState);
    v149 = type metadata accessor for WeatherData(0);
    if (_s7Weather24LocationCompositionStateOwet_0(v148, 1, v149) != 1)
    {
      v155 = v148 + *(int *)(v149 + 24);
      v156 = type metadata accessor for WeatherDataModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 16))(v146, v155, v156);
      sub_1000215BC(v148, type metadata accessor for WeatherData);
      _s7Weather24LocationCompositionStateOwst_0(v146, 0, 1, v156);
      v142 = v196;
      v143 = v213;
      goto LABEL_28;
    }
    sub_100021A14(v148, &qword_100BC3460);
    v142 = v196;
    v143 = v213;
  }
  v150 = type metadata accessor for WeatherDataModel(0);
  _s7Weather24LocationCompositionStateOwst_0(v146, 1, 1, v150);
LABEL_28:
  _s7Weather24LocationCompositionStateOwst_0(v145, 1, 1, v209);
  v157 = v142;
  v151 = v193;
  WeatherConditionBackgroundModelFactoryInput.init(animationKind:currentTime:elevation:moonData:debugConditionOverride:isReduceMotionEnabled:location:options:presentationContext:weatherData:conditionBackgroundDateOverride:)(v208, v210, v211, v212, v203, v139, v140, v201, v157, v146, v145);

  (*(void (**)(char *, uint64_t))(v207 + 8))(v206, v136);
  sub_1000215BC(v205, type metadata accessor for WeatherConditionBackgroundTimeData);
  sub_100021A14(v216, &qword_100BC3660);
  (*(void (**)(char *, uint64_t))(v202 + 8))(v215, v141);
  v152 = type metadata accessor for WeatherConditionBackgroundModelFactoryInput(0);
  _s7Weather24LocationCompositionStateOwst_0(v151, 0, 1, v152);
  sub_100021A14(v143, &qword_100BC3380);
}

uint64_t sub_1000F3968(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Locale(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for WeatherDataModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = sub_1000BA294(&qword_100BC3348);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
  {
    v10 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  v11 = a1 + a2[8];
  v12 = type metadata accessor for WeatherData.WeatherStatisticsState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  if (EnumCaseMultiPayload == 1)
  {
    v14 = type metadata accessor for WeatherStatisticsModel(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
  }
  v15 = a1 + a2[9];
  v16 = type metadata accessor for WeatherDataOverrides(0);
  result = _s7Weather24LocationCompositionStateOwet_0(v15, 1, v16);
  if (!(_DWORD)result)
  {
    v18 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v15, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v15, v18);
    v19 = v15 + *(int *)(v16 + 20);
    result = _s7Weather24LocationCompositionStateOwet_0(v19, 1, v18);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v19, v18);
  }
  return result;
}

uint64_t sub_1000F3B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007E965C);
}

uint64_t sub_1000F3B30@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v3 = sub_1000BA294(&qword_100C0B4E0);
  v4 = __chkstk_darwin(v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v12[-v7];
  v9 = v1 + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___animationKind;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Weather43WeatherConditionBackgroundModelInputFactory____lazy_storage___animationKind, v13, 0, 0);
  sub_100037768(v9, (uint64_t)v8, &qword_100C0B4E0);
  v10 = type metadata accessor for BackgroundAnimationKind(0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v8, 1, v10) != 1)
    return (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, v8, v10);
  sub_100021A14((uint64_t)v8, &qword_100C0B4E0);
  sub_10014EF04(a1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, a1, v10);
  _s7Weather24LocationCompositionStateOwst_0((uint64_t)v6, 0, 1, v10);
  swift_beginAccess(v9, v12, 33, 0);
  sub_1000A3908((uint64_t)v6, v9, &qword_100C0B4E0);
  return swift_endAccess(v12);
}

uint64_t sub_1000F3CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1007D4D84(a1, a2, a3, (void (*)(_QWORD))&type metadata accessor for WeatherCondition);
}

_WORD *sub_1000F3CB8(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for WeatherMapOverlayKind(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  swift_bridgeObjectRetain(v15);
  v18 = sub_1000BA294(&qword_100BC5FD0);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 3, v18))
  {
    v19 = type metadata accessor for WeatherMapTrackingState(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v10(&v16[*(int *)(v18 + 48)], &v17[*(int *)(v18 + 48)], v9);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v16, 0, 3, v18);
  }
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_1000F3DD0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_1000F3DDC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000F3DFC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

_QWORD *sub_1000F3E04()
{
  uint64_t v0;

  return sub_1000DB418((_QWORD *)(*(_QWORD *)(v0 + 728) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 728) + 40));
}

uint64_t sub_1000F3E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v2, v1, v0);
}

uint64_t sub_1000F3E2C(char *a1)
{
  return sub_100886A00(*a1);
}

void sub_1000F3E38(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, a3, a2);
}

double sub_1000F3E40()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88)).n128_u64[0];
  return result;
}

BOOL sub_1000F3E48()
{
  NSObject *v0;
  uint64_t v1;

  return os_log_type_enabled(v0, (os_log_type_t)*(_DWORD *)(v1 - 168));
}

uint64_t sub_1000F3E7C()
{
  return type metadata accessor for UnitsConfigurationViewModel.Representation.Full(0);
}

uint64_t sub_1000F3E84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for WeatherMapOverlayKind(0);
}

uint64_t sub_1000F3E94@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000F3EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.read(from:)(a1, a2, a3, a4);
}

void sub_1000F3EBC(uint64_t a1)
{
  sub_100748054(a1);
}

uint64_t sub_1000F3EC8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_1000F3EDC(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100037768(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000F3EE8()
{
  uint64_t v0;

  return sub_100878F40(*(_QWORD *)(v0 - 264));
}

uint64_t sub_1000F3EF4()
{
  return type metadata accessor for ListView.ListContentView(0);
}

uint64_t sub_1000F3F18(uint64_t a1)
{
  return NSNotificationCenter.publisher(for:object:)(a1, 0);
}

double sub_1000F3F24()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000F9174(v1, v0);
}

uint64_t sub_1000F3F30()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1000F3F3C()
{
  uint64_t v0;

  return Cache.subscript.getter(v0);
}

uint64_t sub_1000F3F48()
{
  _QWORD *v0;

  return swift_release(*v0);
}

uint64_t sub_1000F3F50()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1000F3F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return type metadata accessor for ConditionContentView(0, v4, v5, a4);
}

void sub_1000F3F84()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + *(int *)(v2 + 20) + 8) = -v0;
}

uint64_t sub_1000F3F98@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(_QWORD *)(a1 - 256));
}

uint64_t sub_1000F3FA0()
{
  uint64_t v0;

  return UITableViewCell.contentConfiguration.setter(v0 - 120);
}

uint64_t sub_1000F3FAC@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

void sub_1000F3FC8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000F3FE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 + *(int *)(v0 + 36)) = 0;
  return type metadata accessor for ModalViewState.LocationDetailModal(0);
}

uint64_t sub_1000F4008()
{
  return AttributeContainer.init()();
}

uint64_t sub_1000F4014()
{
  return type metadata accessor for PointMark(255);
}

uint64_t sub_1000F4020()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_1000F4034()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_1000F4058(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_10007802C(a1, a2, v2);
}

uint64_t sub_1000F4060@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void sub_1000F406C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9[2] = v11;
  v9[3] = v10;
  v9[4] = a5;
  v9[5] = a6;
  v9[6] = a7;
  v9[7] = a8;
  v9[8] = v8;
  v9[9] = v12;
  v9[10] = v13;
  v9[11] = v14;
}

uint64_t sub_1000F4084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return _s7Weather24LocationCompositionStateOwst_0(*(_QWORD *)(a1 - 256), 1, 1, *(_QWORD *)(v1 - 528));
}

void sub_1000F409C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1005C1B30(v1, v0);
}

uint64_t sub_1000F40BC()
{
  return type metadata accessor for ConditionDetailInput.Input(0);
}

uint64_t sub_1000F40C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

uint64_t sub_1000F40D4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void sub_1000F40E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000A3908(v3, v4, a3);
}

uint64_t sub_1000F40F0()
{
  return type metadata accessor for DebugNotificationSubscriptionViewController(0);
}

void sub_1000F40F8(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_1000F4108()
{
  _QWORD *v0;

  return static _SetStorage.copy(original:)(*v0);
}

void sub_1000F4118(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100037768(a1, v3, a3);
}

uint64_t sub_1000F4120@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1000F412C@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(*(_QWORD *)(a1 - 256), *(_QWORD *)(v3 - 136), v2);
}

uint64_t sub_1000F4140()
{
  return 0x7865646E497675;
}

uint64_t sub_1000F4158(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_1000F4160()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 320) + *(int *)(*(_QWORD *)(v0 - 144) + 20);
}

uint64_t sub_1000F4178()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000F4190()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_1000F41A4()
{
  return 0x7469706963657270;
}

uint64_t sub_1000F41D4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000F41E8()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1000F41F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000F41FC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[162] + 8))(v0[151], v0[163]);
}

uint64_t sub_1000F4214()
{
  return type metadata accessor for UserInterfaceSizeClass(0);
}

uint64_t sub_1000F421C()
{
  return type metadata accessor for WeatherData(0);
}

uint64_t sub_1000F422C()
{
  return 0;
}

void sub_1000F423C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100080C0C(a1, v3, a3);
}

void sub_1000F4244(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000787D4(v4, v3, a3);
}

BOOL sub_1000F4250@<W0>(os_log_type_t a1@<W8>)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000F425C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_arrayInitWithTakeFrontToBack(a1, a2, a3, a4);
}

uint64_t sub_1000F426C()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_1000F4278()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000F4288()
{
  uint64_t v0;

  return _diagnoseUnexpectedEnumCase<A>(type:)(v0, v0);
}

uint64_t sub_1000F4294()
{
  return type metadata accessor for LocationPreviewModalViewState(0);
}

uint64_t sub_1000F42BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000F42C8()
{
  return AttributeContainer.init()();
}

uint64_t sub_1000F42D4()
{
  return LocalizedStringKey.init(stringLiteral:)(121, 0xE100000000000000);
}

uint64_t sub_1000F42E0()
{
  return 1684107116;
}

uint64_t sub_1000F42F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000F4304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return WeatherMetadata.init(date:expirationDate:attribution:)(v1, v0, v2);
}

uint64_t sub_1000F4328@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000F4334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100946668(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000F434C()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100163980(v2, v1, v0);
}

uint64_t sub_1000F435C(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v2, v1);
}

uint64_t sub_1000F4380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000F438C()
{
  return 0;
}

uint64_t sub_1000F439C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_deallocPartialClassInstance(v2, a2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

uint64_t sub_1000F43B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 944));
}

uint64_t sub_1000F43B8()
{
  return type metadata accessor for WeatherAlert.Prominence(0);
}

void sub_1000F43C4(unint64_t *a1)
{
  uint64_t *v1;

  sub_10003D2DC(a1, v1);
}

uint64_t sub_1000F43CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s7Weather29UVIDescriptorViewModelFactoryVwxx_0((_QWORD *)(v2 + *(int *)(v0 + 64)));
  return v1;
}

uint64_t sub_1000F43F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for ConditionContentView(0, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a4);
}

uint64_t sub_1000F4420()
{
  return type metadata accessor for WeatherMapOverlayKind(0);
}

void sub_1000F4430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 232) = (char *)&a9 - v9;
}

double sub_1000F4444()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v0 + 40))).n128_u64[0];
  return result;
}

uint64_t sub_1000F4450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(int *)(a1 + 20);
  v5 = v1 + v4;
  v6 = v2 + v4;
  v7 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
  *(_BYTE *)(v1 + *(int *)(a1 + 24)) = *(_BYTE *)(v2 + *(int *)(a1 + 24));
  return swift_storeEnumTagMultiPayload(v1, v3, 3);
}

uint64_t sub_1000F4490()
{
  return SunEvents.sunrise.getter();
}

uint64_t sub_1000F449C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v0, *(_QWORD *)(v1 - 160));
}

uint64_t sub_1000F44AC(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_1000F44BC()
{
  return type metadata accessor for UserInterfaceSizeClass(0);
}

uint64_t sub_1000F44C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 424);
}

uint64_t sub_1000F44DC()
{
  return URL.write(to:)();
}

uint64_t sub_1000F44E4()
{
  return NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter();
}

void sub_1000F4500(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_10007C77C(a1, v3, a3);
}

uint64_t sub_1000F4508(uint64_t (*a1)(void))
{
  return a1();
}

double sub_1000F451C()
{
  return 0.0;
}

uint64_t sub_1000F4538()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 256) + 8))(v0, *(_QWORD *)(v1 - 248));
}

uint64_t sub_1000F4548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v2, v1);
}

double sub_1000F4558@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8)).n128_u64[0];
  return result;
}

void sub_1000F4564(uint64_t a1@<X8>)
{
  sub_10000E75C(a1);
}

uint64_t sub_1000F458C(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

uint64_t sub_1000F4598(uint64_t a1, uint64_t a2)
{
  return sub_10025ECF4(a1, a2);
}

void sub_1000F45A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  sub_1000986AC();
  v5 = v4;
  v7 = v6;
  v8 = sub_100098778();
  v77 = *(_QWORD *)(v8 - 8);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v76 = v10;
  sub_1000BA294((uint64_t *)&unk_100BD35A0);
  sub_1000B42B0();
  __chkstk_darwin(v11);
  v79 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_1000BA294(&qword_100BC4978);
  sub_1000B42B0();
  __chkstk_darwin(v13);
  sub_100079FBC();
  v80 = type metadata accessor for ContentStatusBanner(0);
  v85 = *(_QWORD *)(v80 - 8);
  sub_10009D98C();
  __chkstk_darwin(v14);
  v82 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009D2A4();
  __chkstk_darwin(v16);
  sub_1001FB600();
  sub_1000BA294(&qword_100BCA110);
  sub_1000B42B0();
  __chkstk_darwin(v17);
  sub_1000BBB38();
  __chkstk_darwin(v18);
  sub_10009C838();
  v86 = v5;
  if (v7 != v5 && *(_QWORD *)(v7 + 16) == *(_QWORD *)(v86 + 16))
  {
    v78 = 0;
    v74 = v2;
    v75 = v7;
    sub_1001FB0B8();
    v72 = v7 + 64;
    v73 = v19;
    v71 = v19 - 1;
    v20 = &unk_100BCA118;
    v21 = (unsigned __int8 *)v82;
    v83 = (_QWORD *)v0;
    if (!v22)
      goto LABEL_6;
LABEL_4:
    v23 = v3;
    v24 = v1;
    sub_1001FB58C();
    v84 = v25;
LABEL_5:
    sub_1001FBB18();
    v28 = *v26;
    v27 = v26[1];
    v31 = v30 + *(_QWORD *)(v85 + 72) * v29;
    v32 = sub_1000BF070();
    v33 = v83;
    sub_100080C0C(v31, (uint64_t)v83 + *(int *)(v32 + 48), type metadata accessor for ContentStatusBanner);
    *v33 = v28;
    v33[1] = v27;
    sub_10009ED08((uint64_t)v33, 0, 1, v32);
    v1 = v24;
    v3 = v23;
    v21 = (unsigned __int8 *)v82;
    v2 = v74;
    while (1)
    {
      v43 = sub_1001FB954();
      sub_1000787D4(v43, v44, &qword_100BCA110);
      v45 = v20;
      v46 = sub_1000BF070();
      v47 = sub_1000BCF40();
      sub_100088FC8(v47, v48, v46);
      if (v57)
        goto LABEL_52;
      v49 = *v2;
      sub_1000C0CEC((uint64_t)v2 + *(int *)(v46 + 48), (uint64_t)v3);
      v50 = sub_1000991C8(v49);
      v52 = v51;
      sub_10003BC58();
      if ((v52 & 1) == 0)
        goto LABEL_51;
      sub_1000BCF30(*(_QWORD *)(v86 + 56) + *(_QWORD *)(v85 + 72) * v50, (uint64_t)v21);
      if (*v21 != *v3)
        goto LABEL_50;
      v53 = *((_QWORD *)v21 + 2);
      v54 = *((_QWORD *)v3 + 2);
      if (v53)
      {
        if (v53 == 1)
        {
          if (v54 != 1)
            goto LABEL_50;
        }
        else
        {
          if (v54 < 2)
            goto LABEL_50;
          v55 = *((_QWORD *)v21 + 1);
          v56 = *((_QWORD *)v3 + 1);
          v57 = v55 == v56 && v53 == v54;
          if (!v57 && (sub_100099264(v55, v53, v56, v54) & 1) == 0)
            goto LABEL_50;
        }
      }
      else if (v54)
      {
        goto LABEL_50;
      }
      v58 = v1 + *(int *)(v81 + 48);
      sub_10009DD64((uint64_t)&v21[*(int *)(v80 + 24)], v1);
      v59 = sub_1000C0108();
      sub_10009DD64(v59, v60);
      sub_100088FC8(v1, 1, v8);
      if (v57)
      {
        sub_100088FC8(v58, 1, v8);
        if (!v57)
          goto LABEL_49;
        sub_1000B3B4C(v1);
      }
      else
      {
        sub_10009DD64(v1, v79);
        sub_100088FC8(v58, 1, v8);
        if (v61)
        {
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v8);
LABEL_49:
          sub_100021A14(v1, &qword_100BC4978);
LABEL_50:
          sub_1000215BC((uint64_t)v21, type metadata accessor for ContentStatusBanner);
LABEL_51:
          sub_1000215BC((uint64_t)v3, type metadata accessor for ContentStatusBanner);
          goto LABEL_52;
        }
        v62 = v77;
        sub_1000C5B18(v76, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
        sub_10005329C((unint64_t *)&qword_100BC3590, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v63 = v79;
        v64 = sub_1001FB7F4();
        v68 = sub_1001FBB24(v64, v65, v66, v67);
        v69 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        v69(v63, v8);
        v70 = sub_100079FDC();
        ((void (*)(uint64_t))v69)(v70);
        sub_100021A14(v1, (uint64_t *)&unk_100BD35A0);
        if ((v68 & 1) == 0)
          goto LABEL_50;
      }
      sub_100079F9C((uint64_t)v21);
      sub_100079F9C((uint64_t)v3);
      v0 = (uint64_t)v83;
      v20 = v45;
      if (v84)
        goto LABEL_4;
LABEL_6:
      v34 = v78 + 1;
      if (__OFADD__(v78, 1))
        break;
      if (v34 < v73)
      {
        if (*(_QWORD *)(v72 + 8 * v34))
          goto LABEL_9;
        v37 = v78 + 2;
        ++v78;
        if (v34 + 1 < v73)
        {
          if (*(_QWORD *)(v72 + 8 * v37))
            goto LABEL_9;
          v78 = v34 + 1;
          if (v34 + 2 < v73)
          {
            if (*(_QWORD *)(v72 + 8 * (v34 + 2)))
              goto LABEL_9;
            v38 = v34 + 3;
            v78 = v34 + 2;
            if (v34 + 3 < v73)
            {
              if (*(_QWORD *)(v72 + 8 * v38))
              {
LABEL_9:
                v23 = v3;
                v24 = v1;
                sub_1001FB5D0();
                v84 = v35;
                v78 = v36;
                goto LABEL_5;
              }
              while (!__OFADD__(v38, 1))
              {
                if (v38 + 1 >= v73)
                {
                  v78 = v71;
                  goto LABEL_22;
                }
                sub_1000DE250();
                if (v39)
                  goto LABEL_9;
              }
              goto LABEL_54;
            }
          }
        }
      }
LABEL_22:
      v40 = sub_1000BF070();
      sub_10009D34C(v0, v41, v42, v40);
      v84 = 0;
    }
    __break(1u);
LABEL_54:
    __break(1u);
    return;
  }
LABEL_52:
  sub_100098640();
}

uint64_t sub_1000F4B08()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000F4B18(uint64_t a1)
{
  uint64_t v1;

  return Measurement.init(value:unit:)(a1, *(_QWORD *)(v1 - 128));
}

uint64_t sub_1000F4B24(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000D31C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_1000BA294(&qword_100C09EB0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = a1 + *(int *)(a2 + 24);
  v8 = v7 + *(int *)(type metadata accessor for ContentStatusBannerPresentationMetrics(0) + 20);
  v9 = type metadata accessor for ContentStatusBanner(0);
  if (!_s7Weather24LocationCompositionStateOwet_0(v8, 1, v9))
  {
    v10 = *(_QWORD *)(v8 + 16);
    if (v10 >= 2)
      swift_bridgeObjectRelease(v10);
    v11 = v8 + *(int *)(v9 + 24);
    v12 = type metadata accessor for Date(0);
    if (!_s7Weather24LocationCompositionStateOwet_0(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = *(_QWORD *)(v7 + *(int *)(sub_1000BA294(&qword_100BEE5E8) + 28));
  return swift_release(v13);
}

uint64_t sub_1000F4C48(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ED588(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))&Calendar.isDateInToday(_:)) & 1;
}

uint64_t sub_1000F4C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, _QWORD);
  uint64_t (*v84)(uint64_t, _QWORD);
  uint64_t (*v85)(uint64_t, _QWORD);
  uint64_t *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, _QWORD);
  uint64_t result;
  _QWORD v90[6];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char v112[8];
  char v113[8];
  uint64_t v114;
  char v115[8];
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;

  v104 = a2;
  v99 = a3;
  sub_1000BA294(&qword_100BCB318);
  sub_10009D98C();
  __chkstk_darwin(v5);
  sub_100088FDC();
  v97 = v6;
  sub_1000BA294(&qword_100BCCC48);
  sub_10009D98C();
  __chkstk_darwin(v7);
  sub_100088FDC();
  v96 = v8;
  sub_1000BA294(&qword_100BC3368);
  sub_10009D98C();
  __chkstk_darwin(v9);
  sub_100088FDC();
  v98 = v10;
  v100 = *(_QWORD *)(type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0) - 8);
  sub_10009D98C();
  __chkstk_darwin(v11);
  sub_100088FDC();
  v105 = v12;
  sub_1000BA294(&qword_100BCB138);
  sub_10009D98C();
  v14 = __chkstk_darwin(v13);
  v103 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v102 = (void (*)(char *, uint64_t))((char *)v90 - v16);
  v17 = type metadata accessor for TimeZone(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_100098728();
  v21 = v20 - v19;
  v22 = type metadata accessor for Calendar(0);
  sub_1000B43A4(v22, (uint64_t)v118);
  v95 = v23;
  sub_10009D98C();
  __chkstk_darwin(v24);
  sub_100098728();
  v27 = v26 - v25;
  v28 = sub_1000BA294(&qword_100BCB130);
  sub_1000B43A4(v28, (uint64_t)v115);
  v92 = v29;
  sub_10009D98C();
  __chkstk_darwin(v30);
  sub_100098728();
  v33 = v32 - v31;
  v34 = sub_1000BA294(&qword_100BCB9F8);
  sub_1000B43A4(v34, (uint64_t)v113);
  v90[4] = v35;
  sub_10009D98C();
  __chkstk_darwin(v36);
  sub_10009E540();
  v37 = type metadata accessor for CurrentWeather(0);
  sub_1000B43A4(v37, (uint64_t)v112);
  v90[2] = v38;
  sub_10009D98C();
  __chkstk_darwin(v39);
  sub_100098728();
  v42 = v41 - v40;
  v43 = type metadata accessor for WeatherData(0);
  v44 = a1 + *(int *)(v43 + 24);
  v45 = WeatherDataModel.currentWeather.getter(v43);
  v46 = WeatherDataModel.hourlyForecast.getter(v45);
  v90[1] = v44;
  v47 = WeatherDataModel.dailyForecast.getter(v46);
  v48 = v104;
  Location.timeZone.getter(v47);
  static Calendar.currentCalendar(with:)(v21);
  v49 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v91 = v21;
  v93 = v17;
  v90[0] = v49;
  v49(v21, v17);
  v116 = v27;
  v50 = v102;
  v101 = v33;
  sub_1000D8C28();
  v114 = v27;
  v51 = (uint64_t)v103;
  sub_1000D8C28();
  sub_1000F802C(v48, v105);
  v107 = v48;
  v108 = v27;
  v52 = v48;
  v109 = v50;
  v110 = v51;
  v111 = v42;
  sub_10084A984();
  v54 = v53;
  v55 = v52;
  v56 = v3;
  v94 = v27;
  v57 = sub_1000F6C84(v55, v42, v3, v101, v27, v50, v51);
  v117 = v54;
  swift_bridgeObjectRetain(v57);
  sub_1000F55B0(v58);
  v59 = v105;
  v106 = v105;
  sub_1000F56A4();
  v61 = v60;
  v62 = sub_1000BA294(&qword_100BE4270);
  v63 = *(unsigned __int8 *)(v100 + 80);
  v64 = (v63 + 32) & ~v63;
  v65 = swift_allocObject(v62, v64 + *(_QWORD *)(v100 + 72), v63 | 7);
  *(_OWORD *)(v65 + 16) = xmmword_10097CA50;
  sub_100095B78(v59, v65 + v64, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  v117 = v65;
  sub_1000F55B0(v61);
  v66 = v117;
  v67 = *((_QWORD *)v57 + 2);
  swift_bridgeObjectRelease(v57);
  if (__OFADD__(v67, 24))
  {
    __break(1u);
    result = swift_release(v117);
    __break(1u);
  }
  else
  {
    v117 = v66;
    swift_bridgeObjectRetain(v66);
    sub_1000F5A00(&v117);
    swift_bridgeObjectRelease(v66);
    v68 = sub_1000F59E8(v67 + 24, v117);
    v117 = v68;
    v118[0] = v69;
    v118[1] = v70;
    v118[2] = v71;
    v72 = sub_1000BA294(&qword_100BE4278);
    v73 = sub_1000F59A4();
    v74 = Sequence.unique<A>(by:)(sub_1000E7978, 0, v72, &type metadata for String, v73, &protocol witness table for String);
    v75 = swift_unknownObjectRelease(v68);
    v76 = v96;
    v77 = WeatherDataModel.weatherChanges.getter(v75);
    v78 = v97;
    v79 = WeatherDataModel.historicalFacts.getter(v77);
    v80 = v91;
    Location.timeZone.getter(v79);
    v81 = v98;
    v82 = v101;
    WeatherForecastDescriptionStringBuilder.buildWeatherDescription(from:hourlyForecast:dailyForecast:weatherChanges:historicalFacts:timeZone:)(v42, v56, v101, v76, v78, v80);
    ((void (*)(uint64_t, uint64_t))v90[0])(v80, v93);
    sub_100021A14(v78, &qword_100BCB318);
    sub_100021A14(v76, &qword_100BCCC48);
    sub_1000C5C00((uint64_t)&v120);
    sub_1000C5C00((uint64_t)&v119);
    sub_1000988C4();
    sub_100094F10(v82, v83);
    sub_1000988C4();
    sub_100094F10(v56, v84);
    sub_1000988C4();
    sub_100094F10(v42, v85);
    v86 = v99;
    *v99 = v74;
    v87 = type metadata accessor for HourlyForecastComponentPreprocessedDataModel(0);
    sub_1000F6C3C(v81, (uint64_t)v86 + *(int *)(v87 + 20));
    sub_1000215BC(v105, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    sub_1000988C4();
    return sub_100094F10(v94, v88);
  }
  return result;
}

void sub_1000F52E0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[24];

  v6 = *a1;
  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v24, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
  {
    v17 = sub_1000BA294(&qword_100BD3370);
    v18 = *(_QWORD *)(type metadata accessor for MainAction(0) - 8);
    v19 = *(_QWORD *)(v18 + 72);
    v20 = *(unsigned __int8 *)(v18 + 80);
    v21 = (v20 + 32) & ~v20;
    v22 = swift_allocObject(v17, v21 + v19, v20 | 7);
    *(_OWORD *)(v22 + 16) = xmmword_10097CA50;
    sub_1000A1570(a2, v22 + v21);
    v23 = v6;
    swift_bridgeObjectRetain(v6);
    sub_1000F5588(v22);
LABEL_6:
    v16 = v23;
    goto LABEL_7;
  }
  v9 = Strong;
  v10 = *(_BYTE *)(Strong + OBJC_IVAR____TtC7Weather29WeatherDataDebounceMiddleware_resetAccumulator);
  v11 = sub_1000BA294(&qword_100BD3370);
  v12 = *(_QWORD *)(type metadata accessor for MainAction(0) - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v11, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_10097CA50;
  sub_1000A1570(a2, v16 + v15);
  if ((v10 & 1) == 0)
  {
    v23 = v6;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v16);
    sub_1000F5588(v16);
    swift_release(v9);
    swift_setDeallocating(v16);
    sub_1000F557C();
    goto LABEL_6;
  }
  swift_release(v9);
LABEL_7:
  *a4 = v16;
}

uint64_t sub_1000F5474(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1(0);
  sub_1000BC460(v1);
  v2 = sub_10009DB58();
  return swift_deallocClassInstance(v2, v3, v4);
}

void sub_1000F5498(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_1000DB814() || v7 + v5 > *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_1000BD35C();
    v6 = a2();
  }
  if (!*(_QWORD *)(v3 + 16))
  {
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  v10 = (*(_QWORD *)(v6 + 24) >> 1) - *(_QWORD *)(v6 + 16);
  v11 = a3(0);
  if (v10 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_1000C525C(v11);
  sub_10025ECF4(v12, v13);
  if (!v5)
  {
LABEL_11:
    sub_1000986E8();
    *v4 = v6;
    return;
  }
  sub_1000D004C();
  if (!v15)
  {
    *(_QWORD *)(v6 + 16) = v14;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_1000F5568()
{
  sub_1005FEB88();
}

uint64_t sub_1000F557C()
{
  return sub_1000F5474(type metadata accessor for MainAction);
}

void sub_1000F5588(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1000F5568, type metadata accessor for MainAction);
}

void sub_1000F559C()
{
  sub_1005FEB88();
}

void sub_1000F55B0(uint64_t a1)
{
  sub_1000F5498(a1, (uint64_t (*)(void))sub_1000F559C, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
}

uint64_t sub_1000F55C4(uint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD, uint64_t), void (*a4)(_QWORD))
{
  unint64_t v6;
  char v7;
  unint64_t v8;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a2 + 16);
  result = a3(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v7 & 1) != 0)
    v8 = v6;
  else
    v8 = result;
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v6 >= v8)
  {
    a4(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000F5658(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

void sub_1000F56A4()
{
  sub_1000F56C8();
}

void sub_1000F56C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *);
  uint64_t v26;

  sub_100099310();
  v19 = v1;
  v3 = v2;
  v5 = v4;
  v25 = (uint64_t (*)(char *))v6;
  v26 = v7;
  v24 = *(_QWORD *)(sub_1000BDBA8(v6, v7, v4, v2) - 8);
  sub_10009D98C();
  __chkstk_darwin(v8);
  sub_1000986FC();
  v23 = v9;
  sub_10009D2A4();
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - v11;
  v22 = *(_QWORD *)(v5 + 16);
  if (v22)
  {
    v13 = 0;
    v20 = v3;
    v21 = v5;
    while (v13 < *(_QWORD *)(v5 + 16))
    {
      v14 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v15 = *(_QWORD *)(v24 + 72);
      sub_100080C0C(v5 + v14 + v15 * v13, (uint64_t)v12, v3);
      v16 = v25(v12);
      if (v0)
      {
        sub_1000950A4();
        swift_release(_swiftEmptyArrayStorage);
        sub_100075DF4();
        goto LABEL_16;
      }
      if ((v16 & 1) != 0)
      {
        sub_10007802C((uint64_t)v12, v23, v3);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1000C203C(0, _swiftEmptyArrayStorage[2] + 1);
        v18 = _swiftEmptyArrayStorage[2];
        v17 = _swiftEmptyArrayStorage[3];
        if (v18 >= v17 >> 1)
          sub_1000C203C(v17 > 1, v18 + 1);
        _swiftEmptyArrayStorage[2] = v18 + 1;
        v3 = v20;
        sub_10007802C(v23, (uint64_t)_swiftEmptyArrayStorage + v14 + v18 * v15, v20);
        v5 = v21;
      }
      else
      {
        sub_1000950A4();
      }
      if (v22 == ++v13)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_100075DF4();
LABEL_16:
    sub_10009C884();
    sub_1000B44B0();
  }
}

uint64_t sub_1000F5878()
{
  return sub_1000F5894() & 1;
}

uint64_t sub_1000F5894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void (*v10)(char *, uint64_t);
  _QWORD v12[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v12 - v6;
  v8 = sub_1000BD0D0(v5);
  sub_1000BD0D0(v8);
  v9 = static Date.> infix(_:_:)(v7, v4);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v7, v0);
  return v9 & 1;
}

void sub_1000F5970()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1006063AC();
  *v0 = v1;
}

unint64_t sub_1000F59A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100BE4280;
  if (!qword_100BE4280)
  {
    v1 = sub_100075EB0(&qword_100BE4278);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100BE4280);
  }
  return result;
}

uint64_t sub_1000F59E8(uint64_t a1, uint64_t a2)
{
  return sub_1000F55C4(a1, a2, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t))sub_1000F59FC, (void (*)(_QWORD))type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
}

void sub_1000F5A00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000F5A80();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1000F5AAC(v6);
  *a1 = v3;
}

void sub_1000F5A80()
{
  sub_1000BBD10();
  sub_1000F5A90();
}

void sub_1000F5A90()
{
  sub_1006063AC();
}

void sub_1000F5AAC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  unint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int EnumCaseMultiPayload;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  void (*v65)(char *, uint64_t, uint64_t);
  Swift::Int v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  void (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t);
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  Swift::Int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  char v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  Swift::Int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  Swift::Int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  Swift::Int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  Swift::Int v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;

  v2 = v1;
  v214 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel(0);
  __chkstk_darwin(v214);
  v213 = (uint64_t)&v191 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  __chkstk_darwin(v5);
  v221 = (uint64_t)&v191 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v226 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v191 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v225 = (char *)&v191 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v191 - v14;
  v16 = __chkstk_darwin(v13);
  v208 = (char *)&v191 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v191 - v19;
  __chkstk_darwin(v18);
  v196 = (char *)&v191 - v21;
  v219 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  v210 = *(_QWORD *)(v219 - 8);
  v22 = __chkstk_darwin(v219);
  v203 = (uint64_t)&v191 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v222 = (uint64_t)&v191 - v25;
  v26 = __chkstk_darwin(v24);
  v224 = (uint64_t)&v191 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v191 - v29;
  v31 = __chkstk_darwin(v28);
  v220 = (uint64_t)&v191 - v32;
  v33 = __chkstk_darwin(v31);
  v223 = (uint64_t)&v191 - v34;
  v35 = __chkstk_darwin(v33);
  v207 = (uint64_t)&v191 - v36;
  v37 = __chkstk_darwin(v35);
  v206 = (uint64_t)&v191 - v38;
  v39 = __chkstk_darwin(v37);
  v211 = (uint64_t)&v191 - v40;
  v41 = __chkstk_darwin(v39);
  v205 = (uint64_t)&v191 - v42;
  v43 = __chkstk_darwin(v41);
  v194 = (char *)&v191 - v44;
  v45 = __chkstk_darwin(v43);
  v195 = (uint64_t)&v191 - v46;
  v47 = __chkstk_darwin(v45);
  v199 = (uint64_t)&v191 - v48;
  __chkstk_darwin(v47);
  v197 = (uint64_t)&v191 - v49;
  v229 = a1;
  v50 = a1[1];
  v198 = _minimumMergeRunLength(_:)(v50);
  if (v198 >= v50)
  {
    if ((v50 & 0x8000000000000000) == 0)
    {
      if (v50)
        sub_1000B3C48(0, v50, 1, v229);
      return;
    }
    goto LABEL_164;
  }
  sub_10087B6D8(v50 / 2);
  v192 = v51;
  v209 = v52;
  v193 = v50;
  if (v50 <= 0)
  {
LABEL_126:
    v212 = (char *)_swiftEmptyArrayStorage;
    v131 = _swiftEmptyArrayStorage[2];
LABEL_127:
    if (v131 < 2)
    {
      v183 = v212;
LABEL_140:
      swift_bridgeObjectRelease(v183);
      if (v193 >= -1)
        goto LABEL_141;
      goto LABEL_168;
    }
    v184 = *v229;
    v183 = v212;
    while (1)
    {
      v185 = v131 - 2;
      if (v131 < 2)
        break;
      if (!v184)
        goto LABEL_172;
      v186 = *(_QWORD *)&v183[16 * v185 + 32];
      v187 = *(_QWORD *)&v183[16 * v131 + 24];
      sub_100463EF8(v184 + *(_QWORD *)(v210 + 72) * v186, v184 + *(_QWORD *)(v210 + 72) * *(_QWORD *)&v183[16 * v131 + 16], v184 + *(_QWORD *)(v210 + 72) * v187, v209);
      if (v2)
        goto LABEL_124;
      if (v187 < v186)
        goto LABEL_159;
      if ((swift_isUniquelyReferenced_nonNull_native(v183) & 1) == 0)
        v183 = sub_10021A488();
      if (v185 >= *((_QWORD *)v183 + 2))
        goto LABEL_160;
      v188 = &v183[16 * v185 + 32];
      *(_QWORD *)v188 = v186;
      *((_QWORD *)v188 + 1) = v187;
      v189 = *((_QWORD *)v183 + 2);
      if (v131 > v189)
        goto LABEL_161;
      memmove(&v183[16 * v131 + 16], &v183[16 * v131 + 32], 16 * (v189 - v131));
      *((_QWORD *)v183 + 2) = v189 - 1;
      v131 = v189 - 1;
      if (v189 <= 2)
        goto LABEL_140;
    }
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
    return;
  }
  v215 = v30;
  v191 = v20;
  v202 = v15;
  v216 = v10;
  v53 = 0;
  v212 = (char *)_swiftEmptyArrayStorage;
  v230 = v7;
  v54 = v220;
  while (1)
  {
    v55 = v53 + 1;
    v204 = v53;
    if (v53 + 1 >= v50)
    {
      v66 = v53 + 1;
      v67 = v219;
      v68 = v198;
    }
    else
    {
      v227 = v50;
      v56 = *v229;
      v57 = *(_QWORD *)(v210 + 72);
      v58 = v197;
      sub_100095B78(*v229 + v57 * v55, v197, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v228 = v57;
      sub_100095B78(v56 + v57 * v53, v199, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v59 = v58;
      v60 = v195;
      sub_100095B78(v59, v195, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v60, v219);
      if (EnumCaseMultiPayload)
      {
        v62 = (uint64_t)v194;
        if (EnumCaseMultiPayload == 1)
        {
          v63 = v221;
          v64 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
          sub_10007C77C(v195, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
          v65 = *(void (**)(char *, uint64_t, uint64_t))(v226 + 16);
          v65(v196, v63, v7);
        }
        else
        {
          v63 = v213;
          v64 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
          sub_10007C77C(v195, v213, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
          v65 = *(void (**)(char *, uint64_t, uint64_t))(v226 + 16);
          v65(v196, v63 + *(int *)(v214 + 52), v7);
        }
        sub_1000215BC(v63, v64);
      }
      else
      {
        v69 = v221;
        sub_10007C77C(v195, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
        v65 = *(void (**)(char *, uint64_t, uint64_t))(v226 + 16);
        v65(v196, v69, v7);
        sub_1000215BC(v69, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
        v62 = (uint64_t)v194;
      }
      sub_100095B78(v199, v62, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      if (swift_getEnumCaseMultiPayload(v62, v219) > 1)
      {
        v70 = v213;
        v71 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
        sub_10007C77C(v62, v213, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
        v74 = v70 + *(int *)(v214 + 52);
        v72 = v191;
        v73 = v191;
      }
      else
      {
        v70 = v221;
        v71 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
        sub_10007C77C(v62, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
        v72 = v191;
        v73 = v191;
        v74 = v70;
      }
      v65(v73, v74, v7);
      sub_1000215BC(v70, v71);
      v75 = v196;
      LODWORD(v218) = static Date.< infix(_:_:)(v196, v72);
      v76 = *(void (**)(char *, uint64_t))(v226 + 8);
      v76(v72, v7);
      v76(v75, v7);
      sub_1000215BC(v199, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      sub_1000215BC(v197, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v200 = v56;
      if (v53 + 2 < v227)
      {
        v217 = v228 * v55;
        v77 = v56;
        v78 = v53 + 2;
        v201 = v228 * (v53 + 2);
        v67 = v219;
        while (1)
        {
          v79 = v205;
          sub_100095B78(v77 + v201, v205, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
          sub_100095B78(v77 + v217, v211, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
          v80 = v79;
          v81 = v206;
          sub_100095B78(v80, v206, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
          if (swift_getEnumCaseMultiPayload(v81, v67) > 1)
          {
            v82 = v213;
            v83 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
            sub_10007C77C(v206, v213, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
            v85 = v82 + *(int *)(v214 + 52);
            v84 = v208;
          }
          else
          {
            v82 = v221;
            v83 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
            sub_10007C77C(v206, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
            v84 = v208;
            v85 = v82;
          }
          v65(v84, v85, v7);
          sub_1000215BC(v82, v83);
          v86 = v207;
          sub_100095B78(v211, v207, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
          if (swift_getEnumCaseMultiPayload(v86, v67) > 1)
          {
            v87 = v213;
            v88 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
            sub_10007C77C(v207, v213, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
            v91 = v87 + *(int *)(v214 + 52);
            v89 = v202;
            v90 = v202;
          }
          else
          {
            v87 = v221;
            v88 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
            sub_10007C77C(v207, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
            v89 = v202;
            v90 = v202;
            v91 = v87;
          }
          v65(v90, v91, v7);
          sub_1000215BC(v87, v88);
          v92 = v208;
          v93 = static Date.< infix(_:_:)(v208, v89);
          v76(v89, v7);
          v76(v92, v7);
          sub_1000215BC(v211, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
          sub_1000215BC(v205, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
          if (((v218 ^ v93) & 1) != 0)
            break;
          v77 += v228;
          ++v78;
          v67 = v219;
          if (v78 >= v227)
          {
            v50 = v227;
            v66 = v227;
            v53 = v204;
            goto LABEL_28;
          }
        }
        v67 = v219;
        v66 = v78;
        v53 = v204;
        v50 = v227;
LABEL_28:
        v56 = v200;
      }
      else
      {
        v67 = v219;
        v66 = v53 + 2;
        v50 = v227;
      }
      v54 = v220;
      v68 = v198;
      if ((v218 & 1) != 0)
      {
        if (v66 < v53)
          goto LABEL_165;
        if (v53 < v66)
        {
          v94 = 0;
          v95 = v228 * (v66 - 1);
          v96 = v66 * v228;
          v97 = v53;
          v98 = v53 * v228;
          do
          {
            if (v97 != v66 + v94 - 1)
            {
              if (!v56)
                goto LABEL_171;
              v99 = v56 + v98;
              v218 = v56 + v95;
              sub_10007C77C(v56 + v98, v203, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              if (v98 < v95 || v99 >= v56 + v96)
              {
                v101 = v56 + v98;
                v102 = v218;
                swift_arrayInitWithTakeFrontToBack(v101, v218, 1, v219);
              }
              else
              {
                v102 = v218;
                if (v98 != v95)
                  swift_arrayInitWithTakeBackToFront(v99, v218, 1, v219);
              }
              sub_10007C77C(v203, v102, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              v7 = v230;
              v56 = v200;
            }
            ++v97;
            --v94;
            v95 -= v228;
            v96 -= v228;
            v98 += v228;
          }
          while (v97 < v66 + v94);
          v67 = v219;
          v54 = v220;
          v68 = v198;
          v53 = v204;
          v50 = v227;
        }
      }
    }
    if (v66 < v50)
    {
      if (__OFSUB__(v66, v53))
        goto LABEL_163;
      if (v66 - v53 < v68)
      {
        if (__OFADD__(v53, v68))
          goto LABEL_166;
        if (v53 + v68 >= v50)
          v103 = v50;
        else
          v103 = v53 + v68;
        if (v103 < v53)
          goto LABEL_167;
        if (v66 != v103)
        {
          v200 = v2;
          v217 = *(_QWORD *)(v210 + 72);
          v227 = v66 * v217;
          v228 = v217 * (v66 - 1);
          v201 = v103;
          do
          {
            v104 = 0;
            v218 = v66;
            while (1)
            {
              v105 = *v229;
              v106 = v223;
              sub_100095B78(v227 + v104 + *v229, v223, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              sub_100095B78(v228 + v104 + v105, v54, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              v107 = v106;
              v108 = (uint64_t)v215;
              sub_100095B78(v107, (uint64_t)v215, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              if (swift_getEnumCaseMultiPayload(v108, v67) > 1)
              {
                v113 = v108;
                v110 = v213;
                v111 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
                sub_10007C77C(v113, v213, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
                v112 = *(void (**)(char *, uint64_t, uint64_t))(v226 + 16);
                v112(v225, v110 + *(int *)(v214 + 52), v230);
              }
              else
              {
                v109 = v108;
                v110 = v221;
                v111 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
                sub_10007C77C(v109, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
                v112 = *(void (**)(char *, uint64_t, uint64_t))(v226 + 16);
                v112(v225, v110, v230);
              }
              sub_1000215BC(v110, v111);
              v114 = v224;
              sub_100095B78(v54, v224, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              if (swift_getEnumCaseMultiPayload(v114, v67) > 1)
              {
                v115 = v213;
                v116 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel;
                sub_10007C77C(v224, v213, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.HourModel);
                v119 = v115 + *(int *)(v214 + 52);
                v117 = v216;
                v118 = v216;
              }
              else
              {
                v115 = v221;
                v116 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel;
                sub_10007C77C(v224, v221, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel);
                v117 = v216;
                v118 = v216;
                v119 = v115;
              }
              v120 = v230;
              v112(v118, v119, v230);
              sub_1000215BC(v115, v116);
              v121 = v225;
              v122 = static Date.< infix(_:_:)(v225, v117);
              v123 = *(void (**)(char *, uint64_t))(v226 + 8);
              v123(v117, v120);
              v123(v121, v120);
              v54 = v220;
              sub_1000215BC(v220, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              sub_1000215BC(v223, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              if ((v122 & 1) == 0)
                break;
              v124 = *v229;
              v67 = v219;
              if (!*v229)
                goto LABEL_169;
              v125 = v124 + v227 + v104;
              v126 = v124 + v228 + v104;
              sub_10007C77C(v125, v222, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              swift_arrayInitWithTakeFrontToBack(v125, v126, 1, v67);
              sub_10007C77C(v222, v126, type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
              v127 = v218;
              v104 -= v217;
              if (v218 == ++v53)
                goto LABEL_68;
            }
            v127 = v218;
            v67 = v219;
LABEL_68:
            v66 = v127 + 1;
            v228 += v217;
            v227 += v217;
            v53 = v204;
          }
          while (v66 != v201);
          v66 = v201;
          v2 = v200;
          v7 = v230;
        }
      }
    }
    if (v66 < v53)
      goto LABEL_162;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v212);
    v218 = v66;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v212 = sub_10021A398(0, *((_QWORD *)v212 + 2) + 1, 1, v212);
    v130 = *((_QWORD *)v212 + 2);
    v129 = *((_QWORD *)v212 + 3);
    v131 = v130 + 1;
    if (v130 >= v129 >> 1)
      v212 = sub_10021A398((char *)(v129 > 1), v130 + 1, 1, v212);
    v132 = v212;
    *((_QWORD *)v212 + 2) = v131;
    v133 = v132 + 32;
    v134 = &v132[16 * v130 + 32];
    v135 = v218;
    *(_QWORD *)v134 = v53;
    *((_QWORD *)v134 + 1) = v135;
    if (v130)
      break;
    v131 = 1;
LABEL_118:
    v50 = v229[1];
    v53 = v218;
    if (v218 >= v50)
      goto LABEL_127;
  }
  while (1)
  {
    v136 = v131 - 1;
    if (v131 >= 4)
    {
      v141 = &v133[16 * v131];
      v142 = *((_QWORD *)v141 - 8);
      v143 = *((_QWORD *)v141 - 7);
      v147 = __OFSUB__(v143, v142);
      v144 = v143 - v142;
      if (v147)
        goto LABEL_147;
      v146 = *((_QWORD *)v141 - 6);
      v145 = *((_QWORD *)v141 - 5);
      v147 = __OFSUB__(v145, v146);
      v139 = v145 - v146;
      v140 = v147;
      if (v147)
        goto LABEL_148;
      v148 = v131 - 2;
      v149 = &v133[16 * v131 - 32];
      v151 = *(_QWORD *)v149;
      v150 = *((_QWORD *)v149 + 1);
      v147 = __OFSUB__(v150, v151);
      v152 = v150 - v151;
      if (v147)
        goto LABEL_149;
      v147 = __OFADD__(v139, v152);
      v153 = v139 + v152;
      if (v147)
        goto LABEL_151;
      if (v153 >= v144)
      {
        v171 = &v133[16 * v136];
        v173 = *(_QWORD *)v171;
        v172 = *((_QWORD *)v171 + 1);
        v147 = __OFSUB__(v172, v173);
        v174 = v172 - v173;
        if (v147)
          goto LABEL_157;
        v164 = v139 < v174;
        goto LABEL_107;
      }
    }
    else
    {
      if (v131 != 3)
      {
        v165 = *((_QWORD *)v212 + 4);
        v166 = *((_QWORD *)v212 + 5);
        v147 = __OFSUB__(v166, v165);
        v158 = v166 - v165;
        v159 = v147;
        goto LABEL_101;
      }
      v138 = *((_QWORD *)v212 + 4);
      v137 = *((_QWORD *)v212 + 5);
      v147 = __OFSUB__(v137, v138);
      v139 = v137 - v138;
      v140 = v147;
    }
    if ((v140 & 1) != 0)
      goto LABEL_150;
    v148 = v131 - 2;
    v154 = &v133[16 * v131 - 32];
    v156 = *(_QWORD *)v154;
    v155 = *((_QWORD *)v154 + 1);
    v157 = __OFSUB__(v155, v156);
    v158 = v155 - v156;
    v159 = v157;
    if (v157)
      goto LABEL_152;
    v160 = &v133[16 * v136];
    v162 = *(_QWORD *)v160;
    v161 = *((_QWORD *)v160 + 1);
    v147 = __OFSUB__(v161, v162);
    v163 = v161 - v162;
    if (v147)
      goto LABEL_154;
    if (__OFADD__(v158, v163))
      goto LABEL_156;
    if (v158 + v163 >= v139)
    {
      v164 = v139 < v163;
LABEL_107:
      if (v164)
        v136 = v148;
      goto LABEL_109;
    }
LABEL_101:
    if ((v159 & 1) != 0)
      goto LABEL_153;
    v167 = &v133[16 * v136];
    v169 = *(_QWORD *)v167;
    v168 = *((_QWORD *)v167 + 1);
    v147 = __OFSUB__(v168, v169);
    v170 = v168 - v169;
    if (v147)
      goto LABEL_155;
    if (v170 < v158)
      goto LABEL_118;
LABEL_109:
    v175 = v136 - 1;
    if (v136 - 1 >= v131)
    {
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    if (!*v229)
      goto LABEL_170;
    v176 = &v133[16 * v175];
    v177 = *(_QWORD *)v176;
    v178 = &v133[16 * v136];
    v179 = *((_QWORD *)v178 + 1);
    sub_100463EF8(*v229 + *(_QWORD *)(v210 + 72) * *(_QWORD *)v176, *v229 + *(_QWORD *)(v210 + 72) * *(_QWORD *)v178, *v229 + *(_QWORD *)(v210 + 72) * v179, v209);
    if (v2)
      break;
    if (v179 < v177)
      goto LABEL_144;
    v180 = v212;
    if (v136 > *((_QWORD *)v212 + 2))
      goto LABEL_145;
    *(_QWORD *)v176 = v177;
    *(_QWORD *)&v133[16 * v175 + 8] = v179;
    v181 = *((_QWORD *)v180 + 2);
    if (v136 >= v181)
      goto LABEL_146;
    v182 = v180;
    v131 = v181 - 1;
    memmove(&v133[16 * v136], v178 + 16, 16 * (v181 - 1 - v136));
    *((_QWORD *)v182 + 2) = v181 - 1;
    v164 = v181 > 2;
    v7 = v230;
    v54 = v220;
    if (!v164)
      goto LABEL_118;
  }
  v183 = v212;
LABEL_124:
  swift_bridgeObjectRelease(v183);
  if (v193 < -1)
  {
    __break(1u);
    goto LABEL_126;
  }
LABEL_141:
  v190 = v192;
  *(_QWORD *)(v192 + 16) = 0;
  swift_bridgeObjectRelease(v190);
}

uint64_t sub_1000F6C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000BA294(&qword_100BC3368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_1000F6C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t), uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  void (*v68)(_QWORD, _QWORD);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t (*v103)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  char *v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  int *v122;
  void (**v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  char *v141;
  uint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  void (*v148)(_QWORD, _QWORD);
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t (*v152)(char *, uint64_t);
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  int *v161;
  _QWORD *v162;
  char *v163;
  uint64_t *v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t);
  uint64_t v172;
  uint64_t (*v173)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  char *v174;
  uint64_t v175;
  char v176;
  uint64_t (*v177)(char *, _QWORD);
  uint64_t v178;
  char *v179;
  char v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(char *, uint64_t);
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  void (*v194)(char *, uint64_t);
  uint64_t v195;
  int *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  void (*v205)(char *, uint64_t);
  uint64_t v206;
  void (*v207)(char *, uint64_t);
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(char *, uint64_t);
  char *v219;
  uint64_t (*v220)(char *, char *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  void (*v255)(char *, uint64_t);

  v248 = a7;
  v255 = a6;
  v234 = a3;
  v252 = a2;
  v240 = a1;
  v7 = sub_1000BA294(&qword_100BCB930);
  __chkstk_darwin(v7);
  v251 = (char *)&v215 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for HourWeather(0);
  v235 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v242 = (char *)&v215 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  v238 = *(_QWORD *)(v10 - 8);
  v239 = v10;
  v11 = __chkstk_darwin(v10);
  v236 = (char *)&v215 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v249 = (char *)&v215 - v13;
  v237 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  v241 = *(_QWORD *)(v237 - 8);
  v14 = __chkstk_darwin(v237);
  v223 = (char *)&v215 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v224 = (char *)&v215 - v17;
  v18 = __chkstk_darwin(v16);
  v233 = (char *)&v215 - v19;
  __chkstk_darwin(v18);
  v232 = (char *)&v215 - v20;
  v21 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v22 = __chkstk_darwin(v21);
  v231 = (char *)&v215 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v229 = (char *)&v215 - v25;
  v26 = __chkstk_darwin(v24);
  v246 = (char *)&v215 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v215 - v28;
  v30 = type metadata accessor for SunEvents(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v230 = (char *)&v215 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v228 = (char *)&v215 - v35;
  v36 = __chkstk_darwin(v34);
  v245 = (char *)&v215 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v215 - v38;
  v40 = type metadata accessor for Date(0);
  v253 = *(_QWORD *)(v40 - 8);
  v41 = __chkstk_darwin(v40);
  v227 = (char *)&v215 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v226 = (char *)&v215 - v44;
  v45 = __chkstk_darwin(v43);
  v243 = (char *)&v215 - v46;
  v47 = __chkstk_darwin(v45);
  v254 = (char *)&v215 - v48;
  __chkstk_darwin(v47);
  v50 = (char *)&v215 - v49;
  v51 = sub_1000BA294(&qword_100BCB138);
  v52 = __chkstk_darwin(v51);
  v247 = (uint64_t)&v215 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v55 = (char *)&v215 - v54;
  v56 = type metadata accessor for DayWeather(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = __chkstk_darwin(v56);
  v250 = (char *)&v215 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v61 = (char *)&v215 - v60;
  v63 = v62;
  sub_10003773C((uint64_t)v255, (uint64_t)v55, &qword_100BCB138);
  if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v55, 1, v63) == 1)
  {
    sub_100021A14((uint64_t)v55, &qword_100BCB138);
    return (char *)_swiftEmptyArrayStorage;
  }
  v222 = v57;
  v220 = *(uint64_t (**)(char *, char *, uint64_t))(v57 + 32);
  v65 = v220(v61, v55, v63);
  v66 = DayWeather.sun.getter(v65);
  SunEvents.sunrise.getter(v66);
  v255 = *(void (**)(char *, uint64_t))(v31 + 8);
  v255(v39, v30);
  v67 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v29, 1, v40);
  v68 = (void (*)(_QWORD, _QWORD))v40;
  v69 = v61;
  v225 = v30;
  if (v67 == 1)
  {
    sub_100021A14((uint64_t)v29, (uint64_t *)&unk_100BD35A0);
    v64 = (char *)_swiftEmptyArrayStorage;
LABEL_10:
    v95 = (uint64_t)v251;
    goto LABEL_11;
  }
  v71 = v253;
  v72 = *(uint64_t (**)(char *, char *, uint64_t))(v253 + 32);
  v73 = v72(v50, v29, v40);
  v74 = v254;
  CurrentWeather.date.getter(v73);
  v75 = static Date.< infix(_:_:)(v74, v50);
  v76 = *(void (**)(char *, uint64_t))(v71 + 8);
  v76(v74, v40);
  if ((v75 & 1) == 0)
  {
    v70 = ((uint64_t (*)(char *, uint64_t))v76)(v50, v40);
    v64 = (char *)_swiftEmptyArrayStorage;
    v30 = v225;
    goto LABEL_10;
  }
  v218 = v76;
  v219 = v69;
  v221 = v63;
  v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v74, v50, v40);
  Location.timeZone.getter(v77);
  sub_1000B375C();
  v217 = static NSDateFormatter.prevailingPeriodSymbols.getter();
  v78 = v236;
  Location.timeZone.getter(v217);
  v216 = Date.formattedTime(timeZone:)(v78);
  v215 = v79;
  v81 = v238;
  v80 = v239;
  v82 = *(uint64_t (**)(char *, uint64_t))(v238 + 8);
  v83 = v82(v78, v239);
  Location.timeZone.getter(v83);
  v84 = Date.accessibilityFormattedTime(timeZone:)(v78);
  v86 = v85;
  v87 = v78;
  v68 = (void (*)(_QWORD, _QWORD))v40;
  v82(v87, v80);
  v88 = (uint64_t)v232;
  v72(v232, v74, (uint64_t)v68);
  v89 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v88 + v89[5], v249, v80);
  *(_QWORD *)(v88 + v89[6]) = v217;
  v90 = (uint64_t *)(v88 + v89[7]);
  v91 = v215;
  *v90 = v216;
  v90[1] = v91;
  v92 = (uint64_t *)(v88 + v89[8]);
  *v92 = v84;
  v92[1] = v86;
  swift_storeEnumTagMultiPayload(v88, v237, 0);
  sub_1000F559C();
  v64 = v93;
  v94 = *((_QWORD *)v93 + 2);
  if (v94 >= *((_QWORD *)v93 + 3) >> 1)
  {
    sub_1000F559C();
    v64 = v208;
  }
  v69 = v219;
  v30 = v225;
  v95 = (uint64_t)v251;
  *((_QWORD *)v64 + 2) = v94 + 1;
  sub_10007C77C((uint64_t)v232, (uint64_t)&v64[((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80))+ *(_QWORD *)(v241 + 72) * v94], type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
  v70 = ((uint64_t (*)(char *, _QWORD))v218)(v50, v68);
  v63 = v221;
LABEL_11:
  v96 = v245;
  v97 = DayWeather.sun.getter(v70);
  v98 = (uint64_t)v246;
  SunEvents.sunset.getter(v97);
  v255(v96, v30);
  v99 = _s7Weather24LocationCompositionStateOwet_0(v98, 1, (uint64_t)v68);
  v100 = v254;
  if (v99 == 1)
  {
    sub_100021A14(v98, (uint64_t *)&unk_100BD35A0);
    v101 = v250;
  }
  else
  {
    v221 = v63;
    v102 = v253;
    v103 = *(uint64_t (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v253 + 32);
    v104 = v243;
    v105 = v103(v243, v98, v68);
    CurrentWeather.date.getter(v105);
    v106 = static Date.< infix(_:_:)(v100, v104);
    v107 = *(char **)(v102 + 8);
    ((void (*)(char *, _QWORD))v107)(v100, v68);
    if ((v106 & 1) != 0)
    {
      v245 = v107;
      v219 = v69;
      v108 = (*(uint64_t (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v102 + 16))(v100, v104, v68);
      Location.timeZone.getter(v108);
      sub_1000B375C();
      v232 = (char *)static NSDateFormatter.prevailingPeriodSymbols.getter();
      v109 = v68;
      v110 = v236;
      Location.timeZone.getter(v232);
      v218 = (void (*)(char *, uint64_t))Date.formattedTime(timeZone:)(v110);
      v217 = v111;
      v112 = v238;
      v246 = v64;
      v113 = *(uint64_t (**)(char *, uint64_t))(v238 + 8);
      v114 = v100;
      v115 = v239;
      v116 = v113(v110, v239);
      Location.timeZone.getter(v116);
      v117 = Date.accessibilityFormattedTime(timeZone:)(v110);
      v119 = v118;
      v120 = v110;
      v68 = v109;
      v113(v120, v115);
      v121 = (uint64_t)v233;
      v103(v233, (uint64_t)v114, v68);
      v122 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
      (*(void (**)(uint64_t, char *, uint64_t))(v112 + 32))(v121 + v122[5], v249, v115);
      *(_QWORD *)(v121 + v122[6]) = v232;
      v123 = (void (**)(char *, uint64_t))(v121 + v122[7]);
      v124 = v217;
      *v123 = v218;
      v123[1] = (void (*)(char *, uint64_t))v124;
      v125 = v122[8];
      v64 = v246;
      v126 = (uint64_t *)(v121 + v125);
      *v126 = v117;
      v126[1] = v119;
      swift_storeEnumTagMultiPayload(v121, v237, 1);
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
      {
        sub_1000F559C();
        v64 = v209;
      }
      v30 = v225;
      v127 = *((_QWORD *)v64 + 2);
      v69 = v219;
      v101 = v250;
      v95 = (uint64_t)v251;
      v100 = v254;
      v128 = v243;
      if (v127 >= *((_QWORD *)v64 + 3) >> 1)
      {
        sub_1000F559C();
        v64 = v210;
      }
      *((_QWORD *)v64 + 2) = v127 + 1;
      sub_10007C77C((uint64_t)v233, (uint64_t)&v64[((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80))+ *(_QWORD *)(v241 + 72) * v127], type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      ((void (*)(char *, _QWORD))v245)(v128, v68);
      v63 = v221;
    }
    else
    {
      ((void (*)(char *, _QWORD))v107)(v104, v68);
      v63 = v221;
      v101 = v250;
      v30 = v225;
    }
  }
  v129 = v247;
  sub_10003773C(v248, v247, &qword_100BCB138);
  if (_s7Weather24LocationCompositionStateOwet_0(v129, 1, v63) == 1)
  {
    (*(void (**)(char *, uint64_t))(v222 + 8))(v69, v63);
    v130 = &qword_100BCB138;
    v131 = v129;
LABEL_36:
    sub_100021A14(v131, v130);
    return v64;
  }
  v220(v101, (char *)v129, v63);
  sub_1000F7EEC(v95);
  v132 = v244;
  if (_s7Weather24LocationCompositionStateOwet_0(v95, 1, v244) == 1)
  {
    v133 = *(void (**)(char *, uint64_t))(v222 + 8);
    v133(v101, v63);
    v133(v69, v63);
    v130 = &qword_100BCB930;
    v131 = v95;
    goto LABEL_36;
  }
  v134 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v235 + 32))(v242, v95, v132);
  v135 = v228;
  v136 = DayWeather.sun.getter(v134);
  v137 = (uint64_t)v229;
  SunEvents.sunrise.getter(v136);
  v255(v135, v30);
  if (_s7Weather24LocationCompositionStateOwet_0(v137, 1, (uint64_t)v68) == 1)
  {
    sub_100021A14(v137, (uint64_t *)&unk_100BD35A0);
  }
  else
  {
    v246 = v64;
    v139 = v253;
    v140 = *(uint64_t (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v253 + 32);
    v141 = v226;
    v142 = v140(v226, v137, v68);
    CurrentWeather.date.getter(v142);
    v143 = static Date.< infix(_:_:)(v100, v141);
    v144 = *(char **)(v139 + 8);
    v145 = ((uint64_t (*)(char *, _QWORD))v144)(v100, v68);
    if ((v143 & 1) != 0
      && (HourWeather.date.getter(v145),
          v146 = static Date.< infix(_:_:)(v141, v100),
          ((void (*)(char *, _QWORD))v144)(v100, v68),
          (v146 & 1) != 0))
    {
      v251 = v144;
      v219 = v69;
      v221 = v63;
      v147 = (*(uint64_t (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v253 + 16))(v100, v141, v68);
      Location.timeZone.getter(v147);
      sub_1000B375C();
      v248 = static NSDateFormatter.prevailingPeriodSymbols.getter();
      v148 = v68;
      v149 = v236;
      Location.timeZone.getter(v248);
      v247 = Date.formattedTime(timeZone:)(v149);
      v245 = v150;
      v151 = v238;
      v152 = *(uint64_t (**)(char *, uint64_t))(v238 + 8);
      v153 = v100;
      v154 = v239;
      v155 = v152(v149, v239);
      Location.timeZone.getter(v155);
      v156 = Date.accessibilityFormattedTime(timeZone:)(v149);
      v158 = v157;
      v159 = v149;
      v68 = v148;
      v152(v159, v154);
      v160 = (uint64_t)v224;
      v140(v224, (uint64_t)v153, v68);
      v161 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
      (*(void (**)(uint64_t, char *, uint64_t))(v151 + 32))(v160 + v161[5], v249, v154);
      *(_QWORD *)(v160 + v161[6]) = v248;
      v162 = (_QWORD *)(v160 + v161[7]);
      v163 = v245;
      *v162 = v247;
      v162[1] = v163;
      v164 = (uint64_t *)(v160 + v161[8]);
      *v164 = v156;
      v164[1] = v158;
      swift_storeEnumTagMultiPayload(v160, v237, 0);
      if ((swift_isUniquelyReferenced_nonNull_native(v246) & 1) == 0)
      {
        sub_1000F559C();
        v246 = v211;
      }
      v165 = *((_QWORD *)v246 + 2);
      v63 = v221;
      v69 = v219;
      v101 = v250;
      v100 = v254;
      v30 = v225;
      if (v165 >= *((_QWORD *)v246 + 3) >> 1)
      {
        sub_1000F559C();
        v246 = v212;
      }
      v64 = v246;
      *((_QWORD *)v246 + 2) = v165 + 1;
      sub_10007C77C((uint64_t)v224, (uint64_t)&v64[((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80))+ *(_QWORD *)(v241 + 72) * v165], type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
      v138 = ((uint64_t (*)(char *, _QWORD))v251)(v226, v68);
    }
    else
    {
      v138 = ((uint64_t (*)(char *, _QWORD))v144)(v141, v68);
      v30 = v225;
      v64 = v246;
    }
  }
  v166 = v230;
  v167 = DayWeather.sun.getter(v138);
  v168 = (uint64_t)v231;
  SunEvents.sunset.getter(v167);
  v255(v166, v30);
  if (_s7Weather24LocationCompositionStateOwet_0(v168, 1, (uint64_t)v68) == 1)
  {
    (*(void (**)(char *, uint64_t))(v235 + 8))(v242, v244);
    v169 = v168;
    v170 = *(void (**)(char *, uint64_t))(v222 + 8);
    v170(v101, v63);
    v170(v69, v63);
    v130 = (uint64_t *)&unk_100BD35A0;
    v131 = v169;
    goto LABEL_36;
  }
  v246 = v64;
  v172 = v253;
  v173 = *(uint64_t (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v253 + 32);
  v174 = v227;
  v175 = v173(v227, v168, v68);
  CurrentWeather.date.getter(v175);
  v176 = static Date.< infix(_:_:)(v100, v174);
  v177 = *(uint64_t (**)(char *, _QWORD))(v172 + 8);
  v178 = v177(v100, v68);
  v179 = v242;
  if ((v176 & 1) != 0
    && (HourWeather.date.getter(v178), v180 = static Date.< infix(_:_:)(v174, v100), v177(v100, v68), (v180 & 1) != 0))
  {
    v219 = v69;
    v221 = v63;
    v181 = (*(uint64_t (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v253 + 16))(v100, v174, v68);
    Location.timeZone.getter(v181);
    sub_1000B375C();
    v254 = (char *)static NSDateFormatter.prevailingPeriodSymbols.getter();
    v255 = (void (*)(char *, uint64_t))v68;
    v182 = v236;
    Location.timeZone.getter(v254);
    v183 = Date.formattedTime(timeZone:)(v182);
    v252 = v184;
    v253 = v183;
    v185 = v238;
    v186 = *(uint64_t (**)(char *, uint64_t))(v238 + 8);
    v187 = v100;
    v188 = v239;
    v189 = v186(v182, v239);
    Location.timeZone.getter(v189);
    v190 = Date.accessibilityFormattedTime(timeZone:)(v182);
    v192 = v191;
    v193 = v182;
    v194 = v255;
    v186(v193, v188);
    v195 = (uint64_t)v223;
    v173(v223, (uint64_t)v187, (void (*)(_QWORD, _QWORD))v194);
    v196 = (int *)type metadata accessor for HourlyForecastComponentViewModel.HourlyItem.SunriseSetModel(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v185 + 32))(v195 + v196[5], v249, v188);
    *(_QWORD *)(v195 + v196[6]) = v254;
    v197 = (uint64_t *)(v195 + v196[7]);
    v198 = v252;
    *v197 = v253;
    v197[1] = v198;
    v199 = (uint64_t *)(v195 + v196[8]);
    *v199 = v190;
    v199[1] = v192;
    swift_storeEnumTagMultiPayload(v195, v237, 1);
    if ((swift_isUniquelyReferenced_nonNull_native(v246) & 1) == 0)
    {
      sub_1000F559C();
      v246 = v213;
    }
    v200 = *((_QWORD *)v246 + 2);
    v201 = v219;
    v202 = v227;
    v203 = v222;
    if (v200 >= *((_QWORD *)v246 + 3) >> 1)
    {
      sub_1000F559C();
      v246 = v214;
    }
    v204 = v246;
    *((_QWORD *)v246 + 2) = v200 + 1;
    sub_10007C77C(v195, (uint64_t)&v204[((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80))+ *(_QWORD *)(v241 + 72) * v200], type metadata accessor for HourlyForecastComponentViewModel.HourlyItem);
    v177(v202, v194);
    v64 = v204;
    (*(void (**)(char *, uint64_t))(v235 + 8))(v242, v244);
    v205 = *(void (**)(char *, uint64_t))(v203 + 8);
    v206 = v221;
    v205(v250, v221);
    v205(v201, v206);
  }
  else
  {
    v177(v174, v68);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v179, v244);
    v207 = *(void (**)(char *, uint64_t))(v222 + 8);
    v207(v250, v63);
    v207(v69, v63);
    return v246;
  }
  return v64;
}

uint64_t sub_1000F7EEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  uint64_t v16;

  v2 = sub_1000BA294(&qword_100BCB9F8);
  sub_1000F7FF4((unint64_t *)&qword_100BCBA00);
  v4 = v3;
  if ((dispatch thunk of Collection.isEmpty.getter(v2, v3) & 1) != 0)
  {
    sub_10009ED8C();
    v5 = sub_1000C34B8();
    return _s7Weather24LocationCompositionStateOwst_0(v5, v6, v7, v8);
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter(v2, v4);
    sub_1000F7FF4(&qword_100BCBA08);
    dispatch thunk of BidirectionalCollection.index(before:)(&v16, v15, v2, v10);
    v11 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v15, &v16, v2, v4);
    v13 = v12;
    v14 = sub_10009ED8C();
    sub_10008908C(a1, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16));
    v11(v15, 0);
    return sub_1000C138C(a1, 0);
  }
}

void sub_1000F7FF4(unint64_t *a1)
{
  uint64_t v2;

  if (!*a1)
  {
    v2 = sub_100075EB0(&qword_100BCB9F8);
    atomic_store(sub_10003BC38(v2), a1);
  }
  sub_10004A298();
}

double sub_1000F802C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  Swift::String_optional v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  void *object;
  char *v43;
  uint64_t countAndFlagsBits;
  char *v45;
  char *v46;
  uint64_t v47;

  countAndFlagsBits = a1;
  v47 = a2;
  v2 = sub_1000BA294(&qword_100BC4E68);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)&v40 - v5;
  v6 = type metadata accessor for Precipitation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v43 = (char *)&v40 - v11;
  v12 = type metadata accessor for WeatherCondition(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = CurrentWeather.date.getter(v20);
  v24 = Location.timeZone.getter(v23);
  v25 = CurrentWeather.condition.getter(v24);
  v26 = CurrentWeather.isDaylight.getter(v25);
  v27 = WeatherCondition.conditionIconName(isDaytime:)(v26 & 1);
  countAndFlagsBits = v27.value._countAndFlagsBits;
  object = v27.value._object;
  v28 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v41 = CurrentWeather.conditionDescription.getter(v28);
  v30 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for Precipitation.rain(_:), v6);
  v31 = (uint64_t)v43;
  static Precipitation.mock(kind:)(v10);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v33 = (uint64_t)v45;
  v34 = CurrentWeather.temperature.getter(v32);
  v35 = (uint64_t)v46;
  CurrentWeather.temperature.getter(v34);
  sub_1000B375C();
  v36 = static NSDateFormatter.prevailingPeriodSymbols.getter();
  v37 = v47;
  sub_1000E690C((uint64_t)v22, (uint64_t)v18, countAndFlagsBits, (uint64_t)object, v41, v30, 0, v31, v47, 0.0, v33, v35, v36, 1u);
  v38 = type metadata accessor for HourlyForecastComponentViewModel.HourlyItem(0);
  *(_QWORD *)&result = swift_storeEnumTagMultiPayload(v37, v38, 2).n128_u64[0];
  return result;
}

uint64_t sub_1000F82EC()
{
  return sub_1000F8308() & 1;
}

uint64_t sub_1000F8308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DayWeather.date.getter(v2);
  v5 = Calendar.isDateInToday(_:)(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5 & 1;
}

uint64_t sub_1000F83A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F83C4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000F83C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v19[1] = a2;
  v2 = type metadata accessor for CurrentWeather(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v19 - v12;
  DayWeather.date.getter(v11);
  v14 = type metadata accessor for WeatherData(0);
  v15 = WeatherDataModel.currentWeather.getter(v14);
  CurrentWeather.date.getter(v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16 = Calendar.isDate(_:inSameDayAs:)(v13, v10);
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  v17(v13, v6);
  return v16 & 1;
}

void sub_1000F8514(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[16];
  uint64_t v95[3];

  v4 = v3;
  v8 = sub_1000BA294(&qword_100BC3620);
  v9 = __chkstk_darwin(v8);
  v91 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v92 = (uint64_t)&v83 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v83 - v13;
  v15 = type metadata accessor for CurrentWeather(0);
  v89 = *(_QWORD *)(v15 - 8);
  v90 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000BA294(&qword_100BC3380);
  __chkstk_darwin(v18);
  v20 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000BA294(&qword_100BC3460);
  __chkstk_darwin(v21);
  v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000BA294((uint64_t *)&unk_100BD35A0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = static Location.currentLocationID.getter(v25);
  if (v28 == a1 && v29 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_12;
  }
  v31 = v29;
  v88 = a1;
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v28, v29, 0);
  swift_bridgeObjectRelease(v31);
  if ((v32 & 1) != 0)
  {
LABEL_12:
    sub_100047F34(a3);
    goto LABEL_13;
  }
  v33 = type metadata accessor for BannerStateComputer(0);
  if (*(_BYTE *)(v4 + *(int *)(v33 + 28)) == 1)
  {
    if (qword_100BC24E0 != -1)
      swift_once(&qword_100BC24E0, sub_1001596E4);
    v34 = type metadata accessor for Logger(0);
    sub_1000AECD4(v34, (uint64_t)qword_100CAF288);
    v35 = swift_bridgeObjectRetain_n(a2, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter();
    v38 = v37;
    v39 = os_log_type_enabled(v36, v37);
    v87 = v33;
    if (v39)
    {
      v40 = swift_slowAlloc(22, -1);
      v86 = v36;
      v41 = v40;
      v85 = swift_slowAlloc(32, -1);
      v95[0] = v85;
      *(_DWORD *)v41 = 141558275;
      v93 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
      *(_WORD *)(v41 + 12) = 2081;
      v83 = v41 + 14;
      swift_bridgeObjectRetain(a2);
      v84 = v38;
      v42 = v88;
      v93 = sub_1000CE1C8(v88, a2, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v84, "Showing no connection banner (loaded from cache). ID=%{private,mask.hash}s", (uint8_t *)v41, 0x16u);
      v43 = v85;
      swift_arrayDestroy(v85, 1);
      v44 = v43;
      v33 = v87;
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      v42 = v88;
    }
    v68 = *(int *)(v33 + 20);
    v69 = *(_QWORD *)(*(_QWORD *)(v4 + v68) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v69);
    sub_1000EED10(v42, a2, v69);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v69);
    v70 = type metadata accessor for LocationWeatherDataState(0);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v20, 1, v70) == 1)
    {
      v71 = &qword_100BC3380;
      v72 = (uint64_t)v20;
    }
    else
    {
      sub_1000EADE8();
      sub_1000215BC((uint64_t)v20, type metadata accessor for LocationWeatherDataState);
      v75 = type metadata accessor for WeatherData(0);
      v76 = _s7Weather24LocationCompositionStateOwet_0((uint64_t)v23, 1, v75);
      if ((_DWORD)v76 != 1)
      {
        WeatherDataModel.currentWeather.getter(v76);
        sub_1000215BC((uint64_t)v23, type metadata accessor for WeatherData);
        CurrentWeather.date.getter(v78);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v17, v90);
        v77 = 0;
        goto LABEL_36;
      }
      v71 = &qword_100BC3460;
      v72 = (uint64_t)v23;
    }
    sub_100021A14(v72, v71);
    v77 = 1;
LABEL_36:
    v79 = type metadata accessor for Date(0);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v27, v77, 1, v79);
    v80 = *(_QWORD *)(v4 + v68) + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    swift_beginAccess(v80, &v93, 0, 0);
    if (*(_BYTE *)(v80 + *(int *)(type metadata accessor for EnvironmentState(0) + 60)))
      v81 = 2;
    else
      v81 = 1;
    v82 = type metadata accessor for ContentStatusBanner(0);
    sub_100037768((uint64_t)v27, (uint64_t)&v14[*(int *)(v82 + 24)], (uint64_t *)&unk_100BD35A0);
    *v14 = v81;
    *((_QWORD *)v14 + 1) = v42;
    *((_QWORD *)v14 + 2) = a2;
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v14, 0, 1, v82);
    swift_bridgeObjectRetain_n(a2, 2);
    sub_1000F8E2C((uint64_t)v14, v42, a2);
    sub_100021A14((uint64_t)v27, (uint64_t *)&unk_100BD35A0);
    goto LABEL_13;
  }
  v61 = v88;
  if (qword_100BC24E0 != -1)
    swift_once(&qword_100BC24E0, sub_1001596E4);
  v62 = type metadata accessor for Logger(0);
  sub_1000AECD4(v62, (uint64_t)qword_100CAF288);
  v63 = swift_bridgeObjectRetain_n(a2, 2);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(32, -1);
    v95[0] = v67;
    *(_DWORD *)v66 = 141558275;
    v93 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    *(_WORD *)(v66 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    v93 = sub_1000CE1C8(v61, a2, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Removing banner (successfully loaded new data). ID=%{private,mask.hash}s", (uint8_t *)v66, 0x16u);
    swift_arrayDestroy(v67, 1);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v73 = type metadata accessor for ContentStatusBanner(0);
  v74 = v92;
  _s7Weather24LocationCompositionStateOwst_0(v92, 1, 1, v73);
  swift_bridgeObjectRetain(a2);
  sub_1000F8E2C(v74, v61, a2);
LABEL_13:
  v45 = type metadata accessor for BannerStateComputer(0);
  if (*(_BYTE *)(v4 + *(int *)(v45 + 28)) == 1)
  {
    v46 = *(_QWORD *)(v4 + *(int *)(v45 + 20));
    v47 = OBJC_IVAR____TtCV7Weather9MainState8_Storage_view;
    if (*(_QWORD *)(v46 + v47 + *(int *)(type metadata accessor for ViewState(0) + 36) + 8) != 1)
      return;
    v48 = v46 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment;
    swift_beginAccess(v46 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_environment, v95, 0, 0);
    if (*(_BYTE *)(v48 + *(int *)(type metadata accessor for EnvironmentState(0) + 60)))
      v49 = 2;
    else
      v49 = 1;
    v50 = *(_QWORD *)(v46 + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData + 16);
    swift_bridgeObjectRetain(v50);
    v52 = sub_1007D5FCC(v51);
    swift_bridgeObjectRelease(v50);
    v53 = sub_1007D6488((uint64_t)v52);
    swift_bridgeObjectRelease(v52);
    v54 = type metadata accessor for ContentStatusBanner(0);
    v55 = (uint64_t)v91;
    sub_1007D7B70((uint64_t)v53, (uint64_t)&v91[*(int *)(v54 + 24)]);
    swift_bridgeObjectRelease(v53);
    *(_BYTE *)v55 = v49;
    *(_QWORD *)(v55 + 8) = 0;
    *(_QWORD *)(v55 + 16) = 0;
    _s7Weather24LocationCompositionStateOwst_0(v55, 0, 1, v54);
    v56 = v55;
    v57 = 0;
  }
  else
  {
    sub_1000F9188();
    if ((v58 & 1) != 0)
      return;
    v59 = type metadata accessor for ContentStatusBanner(0);
    v60 = v92;
    _s7Weather24LocationCompositionStateOwst_0(v92, 1, 1, v59);
    sub_1000F8E2C(v60, 0, 0);
    _s7Weather24LocationCompositionStateOwst_0(v60, 1, 1, v59);
    v56 = v60;
    v57 = 1;
  }
  sub_1000F8E2C(v56, 0, v57);
}

void sub_1000F8E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  sub_1000BA294(&qword_100BC3620);
  sub_1000B42B0();
  __chkstk_darwin(v8);
  sub_100098694();
  sub_10009985C();
  sub_1000B42B0();
  __chkstk_darwin(v9);
  v10 = sub_1000C1940();
  sub_100088FC8(v10, v11, v12);
  if (v13)
  {
    sub_100021A14(a1, &qword_100BC3620);
    sub_1000F8F08();
    sub_1000F3F24();
    sub_100021A14(v3, &qword_100BC3620);
  }
  else
  {
    sub_10007802C(a1, v4, type metadata accessor for ContentStatusBanner);
    sub_10016D878(v4, a2, a3);
    sub_1000F3F24();
  }
  sub_10004A2A0();
}

uint64_t sub_1000F8EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10062BA2C);
}

uint64_t sub_1000F8F08()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  sub_10009BBD4();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = *v1;
  swift_bridgeObjectRetain(*v1);
  v9 = sub_1000F9020(v5, v3);
  LOBYTE(v3) = v10;
  swift_bridgeObjectRelease(v8);
  if ((v3 & 1) != 0)
  {
    v11 = sub_1000BCF00();
    v24 = *v1;
    v12 = *v1;
    *v1 = 0x8000000000000000;
    v13 = *(_QWORD *)(v12 + 24);
    sub_1000BA294(&qword_100BC3610);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v11, v13);
    sub_1000F9174(*(_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * v9 + 8));
    v14 = *(_QWORD *)(v24 + 56);
    v15 = sub_10009985C();
    sub_1000C652C();
    sub_10007802C(v14 + v16 * v9, v7, v17);
    v18 = sub_10016ED30();
    _NativeDictionary._delete(at:)(v9, v24, &type metadata for ContentStatusBanner.Placement, v15, v18);
    sub_100099850();
    v19 = sub_1000CF71C();
    v22 = v15;
  }
  else
  {
    sub_10009985C();
    v19 = sub_1000C34B8();
  }
  return _s7Weather24LocationCompositionStateOwst_0(v19, v20, v21, v22);
}

unint64_t sub_1000F9020(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_1000D0BF8(a1);
  if (a2)
  {
    if (a2 != 1)
    {
      Hasher._combine(_:)(1uLL);
      sub_1000F435C(v4);
      goto LABEL_7;
    }
    v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
LABEL_7:
  sub_10007A148();
  v5 = sub_1000987A8();
  return sub_1000F9094(v5, v6, v7);
}

unint64_t sub_1000F9094(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (_QWORD *)(v10 + 16 * v6);
      v12 = v11[1];
      if (v12)
      {
        if (v12 == 1)
        {
          if (a2 == 1)
            return v6;
        }
        else if (a2 >= 2)
        {
          v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
            return v6;
        }
      }
      else if (!a2)
      {
        return v6;
      }
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

double sub_1000F9174(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >= 2)
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

void sub_1000F9188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  int64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v59 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  __chkstk_darwin(v2);
  v56 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000BA294(&qword_100C090F8);
  __chkstk_darwin(v65);
  v71 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WeatherData.CachingState(0);
  v6 = __chkstk_darwin(v5);
  v58 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v69 = (uint64_t)&v55 - v8;
  v64 = type metadata accessor for WeatherData(0);
  __chkstk_darwin(v64);
  v68 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for LocationWeatherDataState(0);
  v66 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000BA294(&qword_100BC9EF0);
  v13 = __chkstk_darwin(v12);
  v15 = (int64_t *)((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v17 = (char *)&v55 - v16;
  v18 = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for BannerStateComputer(0) + 20))
                  + OBJC_IVAR____TtCV7Weather9MainState8_Storage_weatherData
                  + 16);
  v19 = *(_QWORD *)(v18 + 64);
  v57 = v18 + 64;
  v20 = 1 << *(_BYTE *)(v18 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v62 = (unint64_t)(v20 + 63) >> 6;
  v55 = v62 - 1;
  v67 = v18;
  swift_bridgeObjectRetain(v18);
  v72 = 0;
  v63 = v11;
  v61 = v17;
  while (v22)
  {
    v23 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    v24 = v23 | (v72 << 6);
LABEL_6:
    v25 = *(_QWORD *)(v67 + 56);
    v26 = (_QWORD *)(*(_QWORD *)(v67 + 48) + 16 * v24);
    v27 = v26[1];
    *v15 = *v26;
    v15[1] = v27;
    v28 = v25 + *(_QWORD *)(v66 + 72) * v24;
    v29 = sub_1000BA294(&qword_100BC9EF8);
    sub_100080C0C(v28, (uint64_t)v15 + *(int *)(v29 + 48), type metadata accessor for LocationWeatherDataState);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 0, 1, v29);
    swift_bridgeObjectRetain(v27);
LABEL_25:
    sub_1000787D4((uint64_t)v15, (uint64_t)v17, &qword_100BC9EF0);
    v34 = sub_1000BA294(&qword_100BC9EF8);
    if (_s7Weather24LocationCompositionStateOwet_0((uint64_t)v17, 1, v34) == 1)
    {
      swift_release(v67);
      return;
    }
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 1));
    sub_10007802C((uint64_t)&v17[*(int *)(v34 + 48)], (uint64_t)v11, type metadata accessor for LocationWeatherDataState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v70);
    if (EnumCaseMultiPayload == 1)
    {
      v36 = v68;
      sub_10007802C((uint64_t)v11, v68, type metadata accessor for WeatherData);
      v37 = v36 + *(int *)(v64 + 28);
      v38 = sub_1000BA294(&qword_100BC3348);
      v39 = v69;
      _s7Weather24LocationCompositionStateOwst_0(v69, 1, 1, v38);
      v40 = v71;
      v41 = v71 + *(int *)(v65 + 48);
      sub_100080C0C(v37, v71, type metadata accessor for WeatherData.CachingState);
      sub_100080C0C(v39, v41, type metadata accessor for WeatherData.CachingState);
      if (_s7Weather24LocationCompositionStateOwet_0(v40, 1, v38) == 1)
      {
        v42 = _s7Weather24LocationCompositionStateOwet_0(v41, 1, v38);
        v11 = v63;
        if (v42 == 1)
        {
          sub_1000215BC(v71, type metadata accessor for WeatherData.CachingState);
          v43 = 1;
          goto LABEL_36;
        }
        goto LABEL_34;
      }
      v44 = v58;
      sub_100080C0C(v71, v58, type metadata accessor for WeatherData.CachingState);
      if (_s7Weather24LocationCompositionStateOwet_0(v41, 1, v38) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v44, v60);
        v11 = v63;
LABEL_34:
        sub_100021A14(v71, &qword_100C090F8);
        v43 = 0;
        goto LABEL_36;
      }
      v45 = v59;
      v46 = v56;
      v47 = v41;
      v48 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v56, v47, v60);
      v43 = static Date.== infix(_:_:)(v44, v46);
      v49 = *(void (**)(char *, uint64_t))(v45 + 8);
      v49(v46, v48);
      v49((char *)v44, v48);
      sub_1000215BC(v71, type metadata accessor for WeatherData.CachingState);
      v11 = v63;
LABEL_36:
      v50 = sub_1000BA294(&qword_100BC3358);
      v51 = (uint64_t)&v11[*(int *)(v50 + 48)];
      v52 = (uint64_t)&v11[*(int *)(v50 + 64)];
      sub_1000215BC(v69, type metadata accessor for WeatherData.CachingState);
      sub_1000215BC(v68, type metadata accessor for WeatherData);
      if ((v43 & 1) != 0)
      {
        swift_release(v67);
        sub_1000215BC(v52, type metadata accessor for NewsDataModel);
        v53 = type metadata accessor for PreprocessedWeatherData;
        v54 = v51;
        goto LABEL_41;
      }
      sub_1000215BC(v52, type metadata accessor for NewsDataModel);
      sub_1000215BC(v51, type metadata accessor for PreprocessedWeatherData);
      v17 = v61;
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        swift_release(v67);
        v53 = type metadata accessor for LocationWeatherDataState;
        v54 = (uint64_t)v11;
LABEL_41:
        sub_1000215BC(v54, v53);
        return;
      }
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
    }
  }
  v30 = v72 + 1;
  if (__OFADD__(v72, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v30 >= v62)
  {
LABEL_24:
    v33 = sub_1000BA294(&qword_100BC9EF8);
    _s7Weather24LocationCompositionStateOwst_0((uint64_t)v15, 1, 1, v33);
    v22 = 0;
    goto LABEL_25;
  }
  v31 = *(_QWORD *)(v57 + 8 * v30);
  if (v31)
  {
LABEL_10:
    v22 = (v31 - 1) & v31;
    v24 = __clz(__rbit64(v31)) + (v30 << 6);
    v72 = v30;
    goto LABEL_6;
  }
  v32 = v72 + 2;
  ++v72;
  if (v30 + 1 >= v62)
    goto LABEL_24;
  v31 = *(_QWORD *)(v57 + 8 * v32);
  if (v31)
    goto LABEL_13;
  v72 = v30 + 1;
  if (v30 + 2 >= v62)
    goto LABEL_24;
  v31 = *(_QWORD *)(v57 + 8 * (v30 + 2));
  if (v31)
  {
    v30 += 2;
    goto LABEL_10;
  }
  v32 = v30 + 3;
  v72 = v30 + 2;
  if (v30 + 3 >= v62)
    goto LABEL_24;
  v31 = *(_QWORD *)(v57 + 8 * v32);
  if (v31)
  {
LABEL_13:
    v30 = v32;
    goto LABEL_10;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v62)
    {
      v72 = v55;
      goto LABEL_24;
    }
    v31 = *(_QWORD *)(v57 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_10;
  }
LABEL_43:
  __break(1u);
}

